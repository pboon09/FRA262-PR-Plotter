
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014d50  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  08014f28  08014f28  00015f28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015578  08015578  0001761c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08015578  08015578  00016578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015580  08015580  0001761c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015580  08015580  00016580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015584  08015584  00016584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000061c  20000000  08015588  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000227c  2000061c  08015ba4  0001761c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002898  08015ba4  00017898  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001761c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cd33  00000000  00000000  0001764c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055e9  00000000  00000000  0004437f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d90  00000000  00000000  00049968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001735  00000000  00000000  0004b6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dbc2  00000000  00000000  0004ce2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c2ca  00000000  00000000  0007a9ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a6b0  00000000  00000000  000a6cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c1369  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000868c  00000000  00000000  001c13ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001c9a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000061c 	.word	0x2000061c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08014f10 	.word	0x08014f10

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000620 	.word	0x20000620
 8000214:	08014f10 	.word	0x08014f10

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00b fad6 	bl	800c590 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f00a fbbf 	bl	800b774 <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fe71 	bl	8001e22 <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0.0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0.0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0.0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	4613      	mov	r3, r2
 800134a:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	88fa      	ldrh	r2, [r7, #6]
 8001356:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3328      	adds	r3, #40	@ 0x28
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	4618      	mov	r0, r3
 8001362:	f002 faf1 	bl	8003948 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8b3a      	ldrh	r2, [r7, #24]
 8001370:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001390:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800139a:	2b00      	cmp	r3, #0
 800139c:	d15f      	bne.n	800145e <MDXX_set_range+0xda>
		if (duty == 0) {
 800139e:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	d115      	bne.n	80013d8 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3310      	adds	r3, #16
 80013b0:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001530 <MDXX_set_range+0x1ac>
 80013b4:	ed97 0a02 	vldr	s0, [r7, #8]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 fbed 	bl	8003b98 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3328      	adds	r3, #40	@ 0x28
 80013c2:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001530 <MDXX_set_range+0x1ac>
 80013c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 fbe4 	bl	8003b98 <PWM_write_range>
			mdxx->cmd = 0;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80013d6:	e0a6      	b.n	8001526 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80013d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	dd1a      	ble.n	800141c <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3310      	adds	r3, #16
 80013ea:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001530 <MDXX_set_range+0x1ac>
 80013ee:	ed97 0a02 	vldr	s0, [r7, #8]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 fbd0 	bl	8003b98 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3328      	adds	r3, #40	@ 0x28
 80013fc:	edd7 0a01 	vldr	s1, [r7, #4]
 8001400:	ed97 0a02 	vldr	s0, [r7, #8]
 8001404:	4618      	mov	r0, r3
 8001406:	f002 fbc7 	bl	8003b98 <PWM_write_range>
			mdxx->cmd = duty;
 800140a:	edd7 7a01 	vldr	s15, [r7, #4]
 800140e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001412:	ee17 2a90 	vmov	r2, s15
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800141a:	e084      	b.n	8001526 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3310      	adds	r3, #16
 8001420:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001534 <MDXX_set_range+0x1b0>
 8001424:	ed97 0a02 	vldr	s0, [r7, #8]
 8001428:	4618      	mov	r0, r3
 800142a:	f002 fbb5 	bl	8003b98 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3328      	adds	r3, #40	@ 0x28
 8001432:	edd7 7a01 	vldr	s15, [r7, #4]
 8001436:	eef0 7ae7 	vabs.f32	s15, s15
 800143a:	eef0 0a67 	vmov.f32	s1, s15
 800143e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001442:	4618      	mov	r0, r3
 8001444:	f002 fba8 	bl	8003b98 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001448:	edd7 7a01 	vldr	s15, [r7, #4]
 800144c:	eef0 7ae7 	vabs.f32	s15, s15
 8001450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001454:	ee17 2a90 	vmov	r2, s15
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145c:	e063      	b.n	8001526 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001464:	2b01      	cmp	r3, #1
 8001466:	d15e      	bne.n	8001526 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8001468:	edd7 7a01 	vldr	s15, [r7, #4]
 800146c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	d115      	bne.n	80014a2 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	f00b ffca 	bl	800d41c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3328      	adds	r3, #40	@ 0x28
 800148c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001530 <MDXX_set_range+0x1ac>
 8001490:	ed97 0a02 	vldr	s0, [r7, #8]
 8001494:	4618      	mov	r0, r3
 8001496:	f002 fb7f 	bl	8003b98 <PWM_write_range>
			mdxx->cmd = 0;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e041      	b.n	8001526 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	dd1a      	ble.n	80014e6 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014ba:	2200      	movs	r2, #0
 80014bc:	4619      	mov	r1, r3
 80014be:	f00b ffad 	bl	800d41c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3328      	adds	r3, #40	@ 0x28
 80014c6:	edd7 0a01 	vldr	s1, [r7, #4]
 80014ca:	ed97 0a02 	vldr	s0, [r7, #8]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 fb62 	bl	8003b98 <PWM_write_range>
			mdxx->cmd = duty;
 80014d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014dc:	ee17 2a90 	vmov	r2, s15
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e01f      	b.n	8001526 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014f0:	2201      	movs	r2, #1
 80014f2:	4619      	mov	r1, r3
 80014f4:	f00b ff92 	bl	800d41c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3328      	adds	r3, #40	@ 0x28
 80014fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001500:	eef0 7ae7 	vabs.f32	s15, s15
 8001504:	eef0 0a67 	vmov.f32	s1, s15
 8001508:	ed97 0a02 	vldr	s0, [r7, #8]
 800150c:	4618      	mov	r0, r3
 800150e:	f002 fb43 	bl	8003b98 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001512:	edd7 7a01 	vldr	s15, [r7, #4]
 8001516:	eef0 7ae7 	vabs.f32	s15, s15
 800151a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151e:	ee17 2a90 	vmov	r2, s15
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	00000000 	.word	0x00000000
 8001534:	42c80000 	.word	0x42c80000

08001538 <REVOLUTE_MOTOR_FFD_Init>:
	.offset = 30.07e-3,
    .c = 24.13e-3,
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	601a      	str	r2, [r3, #0]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001554:	b5b0      	push	{r4, r5, r7, lr}
 8001556:	ed2d 8b02 	vpush	{d8}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001574:	f7ff f80c 	bl	8000590 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4614      	mov	r4, r2
 800157e:	461d      	mov	r5, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001590:	f7fe fffe 	bl	8000590 <__aeabi_dmul>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4620      	mov	r0, r4
 800159a:	4629      	mov	r1, r5
 800159c:	f7fe fe42 	bl	8000224 <__adddf3>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015b0:	f7ff f918 	bl	80007e4 <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff faca 	bl	8000b54 <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 80015c4:	ed97 7a00 	vldr	s14, [r7]
 80015c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d0:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fab8 	bl	8000b54 <__aeabi_d2f>
 80015e4:	4603      	mov	r3, r0
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eeb1 8a67 	vneg.f32	s16, s15
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff faab 	bl	8000b54 <__aeabi_d2f>
 80015fe:	4604      	mov	r4, r0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff faa2 	bl	8000b54 <__aeabi_d2f>
 8001610:	4603      	mov	r3, r0
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef1 8a67 	vneg.f32	s17, s15
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fa95 	bl	8000b54 <__aeabi_d2f>
 800162a:	4603      	mov	r3, r0
 800162c:	ee02 3a10 	vmov	s4, r3
 8001630:	eef0 1a68 	vmov.f32	s3, s17
 8001634:	ee01 4a10 	vmov	s2, r4
 8001638:	eef0 0a48 	vmov.f32	s1, s16
 800163c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001640:	f000 fbef 	bl	8001e22 <mapf>
 8001644:	eef0 7a40 	vmov.f32	s15, s0
}
 8001648:	eeb0 0a67 	vmov.f32	s0, s15
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	ecbd 8b02 	vpop	{d8}
 8001654:	bdb0      	pop	{r4, r5, r7, pc}

08001656 <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	605a      	str	r2, [r3, #4]
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float s){
 800167a:	b5b0      	push	{r4, r5, r7, lr}
 800167c:	ed2d 8b02 	vpush	{d8}
 8001680:	b088      	sub	sp, #32
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	ed87 0a02 	vstr	s0, [r7, #8]
 800168a:	edc7 0a01 	vstr	s1, [r7, #4]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * (s + motor->En->offset);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	ed93 7a01 	vldr	s14, [r3, #4]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a2:	ee17 0a90 	vmov	r0, s15
 80016a6:	f7fe ff1b 	bl	80004e0 <__aeabi_f2d>
 80016aa:	4604      	mov	r4, r0
 80016ac:	460d      	mov	r5, r1
 80016ae:	68b8      	ldr	r0, [r7, #8]
 80016b0:	f7fe ff16 	bl	80004e0 <__aeabi_f2d>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	ec43 2b10 	vmov	d0, r2, r3
 80016bc:	f011 fd74 	bl	80131a8 <sin>
 80016c0:	ec53 2b10 	vmov	r2, r3, d0
 80016c4:	4620      	mov	r0, r4
 80016c6:	4629      	mov	r1, r5
 80016c8:	f7fe ff62 	bl	8000590 <__aeabi_dmul>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4614      	mov	r4, r2
 80016d2:	461d      	mov	r5, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	ed93 7a05 	vldr	s14, [r3, #20]
 80016dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80016e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e4:	ee17 0a90 	vmov	r0, s15
 80016e8:	f7fe fefa 	bl	80004e0 <__aeabi_f2d>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4620      	mov	r0, r4
 80016f2:	4629      	mov	r1, r5
 80016f4:	f7fe ff4c 	bl	8000590 <__aeabi_dmul>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff fa28 	bl	8000b54 <__aeabi_d2f>
 8001704:	4603      	mov	r3, r0
 8001706:	61fb      	str	r3, [r7, #28]

    float gravity_compensate_rail = motor->En->slide_rail_mass * motor->En->g * sin(q) * (motor->En->c);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	edd3 7a00 	vldr	s15, [r3]
 8001718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171c:	ee17 0a90 	vmov	r0, s15
 8001720:	f7fe fede 	bl	80004e0 <__aeabi_f2d>
 8001724:	4604      	mov	r4, r0
 8001726:	460d      	mov	r5, r1
 8001728:	68b8      	ldr	r0, [r7, #8]
 800172a:	f7fe fed9 	bl	80004e0 <__aeabi_f2d>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	ec43 2b10 	vmov	d0, r2, r3
 8001736:	f011 fd37 	bl	80131a8 <sin>
 800173a:	ec53 2b10 	vmov	r2, r3, d0
 800173e:	4620      	mov	r0, r4
 8001740:	4629      	mov	r1, r5
 8001742:	f7fe ff25 	bl	8000590 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4614      	mov	r4, r2
 800174c:	461d      	mov	r5, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fec3 	bl	80004e0 <__aeabi_f2d>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4620      	mov	r0, r4
 8001760:	4629      	mov	r1, r5
 8001762:	f7fe ff15 	bl	8000590 <__aeabi_dmul>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff f9f1 	bl	8000b54 <__aeabi_d2f>
 8001772:	4603      	mov	r3, r0
 8001774:	61bb      	str	r3, [r7, #24]

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001786:	f7ff f82d 	bl	80007e4 <__aeabi_ddiv>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff f9df 	bl	8000b54 <__aeabi_d2f>
 8001796:	4603      	mov	r3, r0
 8001798:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter - gravity_compensate_rail) * transfer_function;
 800179a:	ed97 7a07 	vldr	s14, [r7, #28]
 800179e:	edd7 7a06 	vldr	s15, [r7, #24]
 80017a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80017aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ae:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f7ff f9c9 	bl	8000b54 <__aeabi_d2f>
 80017c2:	4603      	mov	r3, r0
 80017c4:	ee07 3a90 	vmov	s15, r3
 80017c8:	eeb1 8a67 	vneg.f32	s16, s15
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff f9bc 	bl	8000b54 <__aeabi_d2f>
 80017dc:	4604      	mov	r4, r0
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f7ff f9b3 	bl	8000b54 <__aeabi_d2f>
 80017ee:	4603      	mov	r3, r0
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eef1 8a67 	vneg.f32	s17, s15
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	f7ff f9a6 	bl	8000b54 <__aeabi_d2f>
 8001808:	4603      	mov	r3, r0
 800180a:	ee02 3a10 	vmov	s4, r3
 800180e:	eef0 1a68 	vmov.f32	s3, s17
 8001812:	ee01 4a10 	vmov	s2, r4
 8001816:	eef0 0a48 	vmov.f32	s1, s16
 800181a:	ed97 0a04 	vldr	s0, [r7, #16]
 800181e:	f000 fb00 	bl	8001e22 <mapf>
 8001822:	eef0 7a40 	vmov.f32	s15, s0
}
 8001826:	eeb0 0a67 	vmov.f32	s0, s15
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	ecbd 8b02 	vpop	{d8}
 8001832:	bdb0      	pop	{r4, r5, r7, pc}

08001834 <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	601a      	str	r2, [r3, #0]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <PRISMATIC_MOTOR_FFD_Compute>:

float PRISMATIC_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float sd) {
 8001850:	b5b0      	push	{r4, r5, r7, lr}
 8001852:	ed2d 8b02 	vpush	{d8}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R  + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001870:	f7fe fe8e 	bl	8000590 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4614      	mov	r4, r2
 800187a:	461d      	mov	r5, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800188c:	f7fe fe80 	bl	8000590 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4620      	mov	r0, r4
 8001896:	4629      	mov	r1, r5
 8001898:	f7fe fcc4 	bl	8000224 <__adddf3>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018ac:	f7fe ff9a 	bl	80007e4 <__aeabi_ddiv>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff f94c 	bl	8000b54 <__aeabi_d2f>
 80018bc:	4603      	mov	r3, r0
 80018be:	60fb      	str	r3, [r7, #12]

    float v = sd * transfer_function;
 80018c0:	ed97 7a00 	vldr	s14, [r7]
 80018c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018cc:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v * 0.1, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80018d0:	68b8      	ldr	r0, [r7, #8]
 80018d2:	f7fe fe05 	bl	80004e0 <__aeabi_f2d>
 80018d6:	a326      	add	r3, pc, #152	@ (adr r3, 8001970 <PRISMATIC_MOTOR_FFD_Compute+0x120>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe fe58 	bl	8000590 <__aeabi_dmul>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	f7ff f934 	bl	8000b54 <__aeabi_d2f>
 80018ec:	4604      	mov	r4, r0
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	f7ff f92b 	bl	8000b54 <__aeabi_d2f>
 80018fe:	4603      	mov	r3, r0
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eeb1 8a67 	vneg.f32	s16, s15
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff f91e 	bl	8000b54 <__aeabi_d2f>
 8001918:	4605      	mov	r5, r0
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001922:	4610      	mov	r0, r2
 8001924:	4619      	mov	r1, r3
 8001926:	f7ff f915 	bl	8000b54 <__aeabi_d2f>
 800192a:	4603      	mov	r3, r0
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eef1 8a67 	vneg.f32	s17, s15
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f7ff f908 	bl	8000b54 <__aeabi_d2f>
 8001944:	4603      	mov	r3, r0
 8001946:	ee02 3a10 	vmov	s4, r3
 800194a:	eef0 1a68 	vmov.f32	s3, s17
 800194e:	ee01 5a10 	vmov	s2, r5
 8001952:	eef0 0a48 	vmov.f32	s1, s16
 8001956:	ee00 4a10 	vmov	s0, r4
 800195a:	f000 fa62 	bl	8001e22 <mapf>
 800195e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001962:	eeb0 0a67 	vmov.f32	s0, s15
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	ecbd 8b02 	vpop	{d8}
 800196e:	bdb0      	pop	{r4, r5, r7, pc}
 8001970:	9999999a 	.word	0x9999999a
 8001974:	3fb99999 	.word	0x3fb99999

08001978 <PRISMATIC_MOTOR_DFD_Init>:

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	605a      	str	r2, [r3, #4]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	0000      	movs	r0, r0
	...

080019a0 <PRISMATIC_MOTOR_DFD_Compute>:

float PRISMATIC_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qd, float s){
 80019a0:	b5b0      	push	{r4, r5, r7, lr}
 80019a2:	ed2d 8b02 	vpush	{d8}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80019b0:	edc7 0a01 	vstr	s1, [r7, #4]
 80019b4:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * cos(q);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	edd3 7a00 	vldr	s15, [r3]
 80019c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019cc:	ee17 0a90 	vmov	r0, s15
 80019d0:	f7fe fd86 	bl	80004e0 <__aeabi_f2d>
 80019d4:	4604      	mov	r4, r0
 80019d6:	460d      	mov	r5, r1
 80019d8:	68b8      	ldr	r0, [r7, #8]
 80019da:	f7fe fd81 	bl	80004e0 <__aeabi_f2d>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	ec43 2b10 	vmov	d0, r2, r3
 80019e6:	f011 fb8b 	bl	8013100 <cos>
 80019ea:	ec53 2b10 	vmov	r2, r3, d0
 80019ee:	4620      	mov	r0, r4
 80019f0:	4629      	mov	r1, r5
 80019f2:	f7fe fdcd 	bl	8000590 <__aeabi_dmul>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	f7ff f8a9 	bl	8000b54 <__aeabi_d2f>
 8001a02:	4603      	mov	r3, r0
 8001a04:	61fb      	str	r3, [r7, #28]

    float centrifugal_force = motor->En->plotter_mass * qd * qd * s;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1e:	ed97 7a00 	vldr	s14, [r7]
 8001a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a26:	edc7 7a06 	vstr	s15, [r7, #24]

    float transfer_function = (motor->Mx->R * motor->En->prismatic_pulley_radius) / motor->Mx->Kt;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fd51 	bl	80004e0 <__aeabi_f2d>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4620      	mov	r0, r4
 8001a44:	4629      	mov	r1, r5
 8001a46:	f7fe fda3 	bl	8000590 <__aeabi_dmul>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a5a:	f7fe fec3 	bl	80007e4 <__aeabi_ddiv>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4610      	mov	r0, r2
 8001a64:	4619      	mov	r1, r3
 8001a66:	f7ff f875 	bl	8000b54 <__aeabi_d2f>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + centrifugal_force) * transfer_function;
 8001a6e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a72:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a82:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v * 0.1, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001a86:	6938      	ldr	r0, [r7, #16]
 8001a88:	f7fe fd2a 	bl	80004e0 <__aeabi_f2d>
 8001a8c:	a326      	add	r3, pc, #152	@ (adr r3, 8001b28 <PRISMATIC_MOTOR_DFD_Compute+0x188>)
 8001a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a92:	f7fe fd7d 	bl	8000590 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f7ff f859 	bl	8000b54 <__aeabi_d2f>
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f7ff f850 	bl	8000b54 <__aeabi_d2f>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	ee07 3a90 	vmov	s15, r3
 8001aba:	eeb1 8a67 	vneg.f32	s16, s15
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f7ff f843 	bl	8000b54 <__aeabi_d2f>
 8001ace:	4605      	mov	r5, r0
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	f7ff f83a 	bl	8000b54 <__aeabi_d2f>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eef1 8a67 	vneg.f32	s17, s15
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f7ff f82d 	bl	8000b54 <__aeabi_d2f>
 8001afa:	4603      	mov	r3, r0
 8001afc:	ee02 3a10 	vmov	s4, r3
 8001b00:	eef0 1a68 	vmov.f32	s3, s17
 8001b04:	ee01 5a10 	vmov	s2, r5
 8001b08:	eef0 0a48 	vmov.f32	s1, s16
 8001b0c:	ee00 4a10 	vmov	s0, r4
 8001b10:	f000 f987 	bl	8001e22 <mapf>
 8001b14:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b18:	eeb0 0a67 	vmov.f32	s0, s15
 8001b1c:	3720      	adds	r7, #32
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	ecbd 8b02 	vpop	{d8}
 8001b24:	bdb0      	pop	{r4, r5, r7, pc}
 8001b26:	bf00      	nop
 8001b28:	9999999a 	.word	0x9999999a
 8001b2c:	3fb99999 	.word	0x3fb99999

08001b30 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	ed2d 8b02 	vpush	{d8}
 8001b36:	b08a      	sub	sp, #40	@ 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b42:	edc7 0a00 	vstr	s1, [r7]
 8001b46:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001b48:	897b      	ldrh	r3, [r7, #10]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d102      	bne.n	8001b5a <FIR_init+0x2a>
        numTaps += 1;
 8001b54:	897b      	ldrh	r3, [r7, #10]
 8001b56:	3301      	adds	r3, #1
 8001b58:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	897a      	ldrh	r2, [r7, #10]
 8001b5e:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001b66:	897b      	ldrh	r3, [r7, #10]
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f011 f9be 	bl	8012eec <malloc>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461a      	mov	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001b78:	897b      	ldrh	r3, [r7, #10]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f011 f9b5 	bl	8012eec <malloc>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 80e0 	beq.w	8001d54 <FIR_init+0x224>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80db 	beq.w	8001d54 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001ba2:	e00a      	b.n	8001bba <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001bb4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001bba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001bbc:	897b      	ldrh	r3, [r7, #10]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d3f0      	bcc.n	8001ba4 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001bc2:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bc6:	ed97 7a00 	vldr	s14, [r7]
 8001bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bce:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001bd2:	897b      	ldrh	r3, [r7, #10]
 8001bd4:	085b      	lsrs	r3, r3, #1
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001bda:	2300      	movs	r3, #0
 8001bdc:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001bde:	e077      	b.n	8001cd0 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001be0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001be4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d10c      	bne.n	8001c06 <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bfc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c00:	edc3 7a00 	vstr	s15, [r3]
 8001c04:	e02c      	b.n	8001c60 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001c06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c08:	8afb      	ldrh	r3, [r7, #22]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001c10:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c14:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001d60 <FIR_init+0x230>
 8001c18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c20:	ee07 3a90 	vmov	s15, r3
 8001c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c30:	f011 fb90 	bl	8013354 <sinf>
 8001c34:	eef0 6a40 	vmov.f32	s13, s0
 8001c38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c44:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001d64 <FIR_init+0x234>
 8001c48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c5c:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	ed93 8a00 	vldr	s16, [r3]
 8001c70:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c74:	ee07 3a90 	vmov	s15, r3
 8001c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c7c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001d60 <FIR_init+0x230>
 8001c80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c84:	897b      	ldrh	r3, [r7, #10]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	ee07 3a90 	vmov	s15, r3
 8001c8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c90:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c94:	eeb0 0a66 	vmov.f32	s0, s13
 8001c98:	f011 fb18 	bl	80132cc <cosf>
 8001c9c:	eef0 7a40 	vmov.f32	s15, s0
 8001ca0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001d68 <FIR_init+0x238>
 8001ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca8:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001d6c <FIR_init+0x23c>
 8001cac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001cc0:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001cc4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001cd0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001cd4:	897b      	ldrh	r3, [r7, #10]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	db82      	blt.n	8001be0 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	83fb      	strh	r3, [r7, #30]
 8001ce4:	e00f      	b.n	8001d06 <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	8bfb      	ldrh	r3, [r7, #30]
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	edd3 7a00 	vldr	s15, [r3]
 8001cf4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfc:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001d00:	8bfb      	ldrh	r3, [r7, #30]
 8001d02:	3301      	adds	r3, #1
 8001d04:	83fb      	strh	r3, [r7, #30]
 8001d06:	8bfa      	ldrh	r2, [r7, #30]
 8001d08:	897b      	ldrh	r3, [r7, #10]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d3eb      	bcc.n	8001ce6 <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001d0e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1a:	d01b      	beq.n	8001d54 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	83bb      	strh	r3, [r7, #28]
 8001d20:	e014      	b.n	8001d4c <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	8bbb      	ldrh	r3, [r7, #28]
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	edd3 6a00 	vldr	s13, [r3]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	8bbb      	ldrh	r3, [r7, #28]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d42:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d46:	8bbb      	ldrh	r3, [r7, #28]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	83bb      	strh	r3, [r7, #28]
 8001d4c:	8bba      	ldrh	r2, [r7, #28]
 8001d4e:	897b      	ldrh	r3, [r7, #10]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d3e6      	bcc.n	8001d22 <FIR_init+0x1f2>
            }
        }
    }
}
 8001d54:	bf00      	nop
 8001d56:	3728      	adds	r7, #40	@ 0x28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	ecbd 8b02 	vpop	{d8}
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40c90fdb 	.word	0x40c90fdb
 8001d64:	40490fdb 	.word	0x40490fdb
 8001d68:	3eeb851f 	.word	0x3eeb851f
 8001d6c:	3f0a3d71 	.word	0x3f0a3d71

08001d70 <FIR_process>:

float FIR_process(FIR *fir, float input) {
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	ed87 0a00 	vstr	s0, [r7]
    // Update circular buffer with new input
    fir->buffer[fir->bufferIndex] = input;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	895b      	ldrh	r3, [r3, #10]
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	601a      	str	r2, [r3, #0]

    // Compute output (convolution)
    float output = 0.0f;
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
    uint16_t index = fir->bufferIndex;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	895b      	ldrh	r3, [r3, #10]
 8001d96:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001d98:	2300      	movs	r3, #0
 8001d9a:	813b      	strh	r3, [r7, #8]
 8001d9c:	e023      	b.n	8001de6 <FIR_process+0x76>
        output += fir->buffer[index] * fir->coeffs[i];
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	897b      	ldrh	r3, [r7, #10]
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	ed93 7a00 	vldr	s14, [r3]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	893b      	ldrh	r3, [r7, #8]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dbe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc6:	edc7 7a03 	vstr	s15, [r7, #12]

        // Move back in circular buffer
        if (index == 0) {
 8001dca:	897b      	ldrh	r3, [r7, #10]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d104      	bne.n	8001dda <FIR_process+0x6a>
            index = fir->numTaps - 1;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	891b      	ldrh	r3, [r3, #8]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	817b      	strh	r3, [r7, #10]
 8001dd8:	e002      	b.n	8001de0 <FIR_process+0x70>
        } else {
            index--;
 8001dda:	897b      	ldrh	r3, [r7, #10]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	817b      	strh	r3, [r7, #10]
    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001de0:	893b      	ldrh	r3, [r7, #8]
 8001de2:	3301      	adds	r3, #1
 8001de4:	813b      	strh	r3, [r7, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	891b      	ldrh	r3, [r3, #8]
 8001dea:	893a      	ldrh	r2, [r7, #8]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d3d6      	bcc.n	8001d9e <FIR_process+0x2e>
        }
    }

    // Update buffer index for next input
    fir->bufferIndex++;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	895b      	ldrh	r3, [r3, #10]
 8001df4:	3301      	adds	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	815a      	strh	r2, [r3, #10]
    if (fir->bufferIndex >= fir->numTaps) {
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	895a      	ldrh	r2, [r3, #10]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	891b      	ldrh	r3, [r3, #8]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d302      	bcc.n	8001e0e <FIR_process+0x9e>
        fir->bufferIndex = 0;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	815a      	strh	r2, [r3, #10]
    }

    return output;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	ee07 3a90 	vmov	s15, r3
}
 8001e14:	eeb0 0a67 	vmov.f32	s0, s15
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001e22:	b480      	push	{r7}
 8001e24:	b089      	sub	sp, #36	@ 0x24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	ed87 0a05 	vstr	s0, [r7, #20]
 8001e2c:	edc7 0a04 	vstr	s1, [r7, #16]
 8001e30:	ed87 1a03 	vstr	s2, [r7, #12]
 8001e34:	edc7 1a02 	vstr	s3, [r7, #8]
 8001e38:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001e3c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e40:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e44:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e48:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e58:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001e5c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e68:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e70:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e78:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	ee07 3a90 	vmov	s15, r3
}
 8001e82:	eeb0 0a67 	vmov.f32	s0, s15
 8001e86:	3724      	adds	r7, #36	@ 0x24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001e94:	4b0d      	ldr	r3, [pc, #52]	@ (8001ecc <modbus_1t5_Timeout+0x3c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <modbus_1t5_Timeout+0x3c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001ea8:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <modbus_1t5_Timeout+0x3c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <modbus_1t5_Timeout+0x3c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000638 	.word	0x20000638

08001ed0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001ed8:	4b04      	ldr	r3, [pc, #16]	@ (8001eec <modbus_3t5_Timeout+0x1c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2201      	movs	r2, #1
 8001ede:	755a      	strb	r2, [r3, #21]

}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	20000638 	.word	0x20000638

08001ef0 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f00f f9dd 	bl	80112b8 <HAL_UART_GetError>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b20      	cmp	r3, #32
 8001f02:	d101      	bne.n	8001f08 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001f04:	f7ff ffc4 	bl	8001e90 <modbus_1t5_Timeout>

	}
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001f1e:	4a2d      	ldr	r2, [pc, #180]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001f24:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001f2c:	4b29      	ldr	r3, [pc, #164]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001f34:	4b27      	ldr	r3, [pc, #156]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001f3c:	4b25      	ldr	r3, [pc, #148]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	7e3a      	ldrb	r2, [r7, #24]
 8001f42:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001f44:	4b23      	ldr	r3, [pc, #140]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	69fa      	ldr	r2, [r7, #28]
 8001f4a:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	4a21      	ldr	r2, [pc, #132]	@ (8001fd8 <Modbus_init+0xc8>)
 8001f52:	210e      	movs	r1, #14
 8001f54:	4618      	mov	r0, r3
 8001f56:	f00d fbd3 	bl	800f700 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2110      	movs	r1, #16
 8001f60:	4618      	mov	r0, r3
 8001f62:	f00f f953 	bl	801120c <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f00f f96a 	bl	8011244 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	4a19      	ldr	r2, [pc, #100]	@ (8001fdc <Modbus_init+0xcc>)
 8001f76:	2104      	movs	r1, #4
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f00e fc11 	bl	80107a0 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001f7e:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001f84:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001f90:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001f94:	4413      	add	r3, r2
 8001f96:	3302      	adds	r3, #2
 8001f98:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f00e fd39 	bl	8010a14 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <Modbus_init+0xc4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d10c      	bne.n	8001fcc <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001fb2:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <Modbus_init+0xc4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f00c fb7d 	bl	800e6b8 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001fbe:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <Modbus_init+0xc4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f00c fdcc 	bl	800eb64 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000638 	.word	0x20000638
 8001fd8:	08001ed1 	.word	0x08001ed1
 8001fdc:	08001ef1 	.word	0x08001ef1

08001fe0 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001fec:	23ff      	movs	r3, #255	@ 0xff
 8001fee:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001ff0:	23ff      	movs	r3, #255	@ 0xff
 8001ff2:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001ff4:	e013      	b.n	800201e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	781a      	ldrb	r2, [r3, #0]
 8001ffe:	7bbb      	ldrb	r3, [r7, #14]
 8002000:	4053      	eors	r3, r2
 8002002:	b2db      	uxtb	r3, r3
 8002004:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8002006:	4a10      	ldr	r2, [pc, #64]	@ (8002048 <CRC16+0x68>)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4413      	add	r3, r2
 800200c:	781a      	ldrb	r2, [r3, #0]
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	4053      	eors	r3, r2
 8002012:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8002014:	4a0d      	ldr	r2, [pc, #52]	@ (800204c <CRC16+0x6c>)
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	4413      	add	r3, r2
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800201e:	883b      	ldrh	r3, [r7, #0]
 8002020:	1e5a      	subs	r2, r3, #1
 8002022:	803a      	strh	r2, [r7, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1e6      	bne.n	8001ff6 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	b21b      	sxth	r3, r3
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	b21a      	sxth	r2, r3
 8002030:	7bbb      	ldrb	r3, [r7, #14]
 8002032:	b21b      	sxth	r3, r3
 8002034:	4313      	orrs	r3, r2
 8002036:	b21b      	sxth	r3, r3
 8002038:	b29b      	uxth	r3, r3
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	20000218 	.word	0x20000218
 800204c:	20000118 	.word	0x20000118

08002050 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8002056:	4b7e      	ldr	r3, [pc, #504]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	7ddb      	ldrb	r3, [r3, #23]
 800205c:	3b01      	subs	r3, #1
 800205e:	2b03      	cmp	r3, #3
 8002060:	d80a      	bhi.n	8002078 <Modbus_Protocal_Worker+0x28>
 8002062:	a201      	add	r2, pc, #4	@ (adr r2, 8002068 <Modbus_Protocal_Worker+0x18>)
 8002064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002068:	08002083 	.word	0x08002083
 800206c:	08002217 	.word	0x08002217
 8002070:	0800210f 	.word	0x0800210f
 8002074:	08002153 	.word	0x08002153
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8002078:	4b75      	ldr	r3, [pc, #468]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2201      	movs	r2, #1
 800207e:	75da      	strb	r2, [r3, #23]
		break;
 8002080:	e0e1      	b.n	8002246 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8002082:	4b73      	ldr	r3, [pc, #460]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800208a:	2b00      	cmp	r3, #0
 800208c:	d006      	beq.n	800209c <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 800208e:	4b70      	ldr	r3, [pc, #448]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2202      	movs	r2, #2
 8002094:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8002096:	f000 f9cd 	bl	8002434 <Modbus_Emission>
 800209a:	e018      	b.n	80020ce <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 800209c:	4b6c      	ldr	r3, [pc, #432]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80020a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d00b      	beq.n	80020ce <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80020b6:	4b66      	ldr	r3, [pc, #408]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2200      	movs	r2, #0
 80020bc:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80020be:	4b64      	ldr	r3, [pc, #400]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2200      	movs	r2, #0
 80020c4:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80020c6:	4b62      	ldr	r3, [pc, #392]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2203      	movs	r2, #3
 80020cc:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80020ce:	4b60      	ldr	r3, [pc, #384]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020d8:	2b20      	cmp	r3, #32
 80020da:	f040 80ad 	bne.w	8002238 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80020de:	4b5c      	ldr	r3, [pc, #368]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80020e8:	4b59      	ldr	r3, [pc, #356]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80020ee:	4b58      	ldr	r3, [pc, #352]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b57      	ldr	r3, [pc, #348]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80020fa:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80020fe:	4413      	add	r3, r2
 8002100:	3302      	adds	r3, #2
 8002102:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002106:	4619      	mov	r1, r3
 8002108:	f00e fc84 	bl	8010a14 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 800210c:	e094      	b.n	8002238 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800210e:	4b50      	ldr	r3, [pc, #320]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	7d1b      	ldrb	r3, [r3, #20]
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 8091 	beq.w	800223c <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800211a:	4b4d      	ldr	r3, [pc, #308]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	22fe      	movs	r2, #254	@ 0xfe
 8002120:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8002122:	4b4b      	ldr	r3, [pc, #300]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 800212c:	4b48      	ldr	r3, [pc, #288]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 800213c:	4b44      	ldr	r3, [pc, #272]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800213e:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8002140:	1a8a      	subs	r2, r1, r2
 8002142:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8002144:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8002148:	4b41      	ldr	r3, [pc, #260]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2204      	movs	r2, #4
 800214e:	75da      	strb	r2, [r3, #23]
		}
		break;
 8002150:	e074      	b.n	800223c <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8002152:	4b3f      	ldr	r3, [pc, #252]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800215a:	f113 0f02 	cmn.w	r3, #2
 800215e:	d150      	bne.n	8002202 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8002160:	4b3b      	ldr	r3, [pc, #236]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2200      	movs	r2, #0
 8002166:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8002168:	4b39      	ldr	r3, [pc, #228]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8002170:	4b37      	ldr	r3, [pc, #220]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002178:	3b02      	subs	r3, #2
 800217a:	4619      	mov	r1, r3
 800217c:	4610      	mov	r0, r2
 800217e:	f7ff ff2f 	bl	8001fe0 <CRC16>
 8002182:	4603      	mov	r3, r0
 8002184:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8002186:	793a      	ldrb	r2, [r7, #4]
 8002188:	4b31      	ldr	r3, [pc, #196]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800218a:	6819      	ldr	r1, [r3, #0]
 800218c:	4b30      	ldr	r3, [pc, #192]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002194:	3b02      	subs	r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 800219c:	429a      	cmp	r2, r3
 800219e:	d10c      	bne.n	80021ba <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80021a0:	797a      	ldrb	r2, [r7, #5]
 80021a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021a4:	6819      	ldr	r1, [r3, #0]
 80021a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80021ae:	3b01      	subs	r3, #1
 80021b0:	440b      	add	r3, r1
 80021b2:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d004      	beq.n	80021c4 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80021ba:	4b25      	ldr	r3, [pc, #148]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	22ff      	movs	r2, #255	@ 0xff
 80021c0:	759a      	strb	r2, [r3, #22]
				break;
 80021c2:	e040      	b.n	8002246 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80021c4:	4b22      	ldr	r3, [pc, #136]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80021cc:	4b20      	ldr	r3, [pc, #128]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d113      	bne.n	80021fe <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80021d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80021de:	4b1c      	ldr	r3, [pc, #112]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80021e6:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80021e8:	4b19      	ldr	r3, [pc, #100]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80021f0:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80021f2:	461a      	mov	r2, r3
 80021f4:	f010 ff74 	bl	80130e0 <memcpy>

			//execute command
			Modbus_frame_response();
 80021f8:	f000 f904 	bl	8002404 <Modbus_frame_response>
 80021fc:	e001      	b.n	8002202 <Modbus_Protocal_Worker+0x1b2>
				break;
 80021fe:	bf00      	nop
					}
		break;


	}
}
 8002200:	e021      	b.n	8002246 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8002202:	4b13      	ldr	r3, [pc, #76]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	7d5b      	ldrb	r3, [r3, #21]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d019      	beq.n	8002240 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 800220c:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2201      	movs	r2, #1
 8002212:	75da      	strb	r2, [r3, #23]
		break;
 8002214:	e014      	b.n	8002240 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002216:	4b0e      	ldr	r3, [pc, #56]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002220:	2b20      	cmp	r3, #32
 8002222:	d10f      	bne.n	8002244 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8002224:	4b0a      	ldr	r3, [pc, #40]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800222e:	4b08      	ldr	r3, [pc, #32]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2201      	movs	r2, #1
 8002234:	75da      	strb	r2, [r3, #23]
		break;
 8002236:	e005      	b.n	8002244 <Modbus_Protocal_Worker+0x1f4>
		break;
 8002238:	bf00      	nop
 800223a:	e004      	b.n	8002246 <Modbus_Protocal_Worker+0x1f6>
		break;
 800223c:	bf00      	nop
 800223e:	e002      	b.n	8002246 <Modbus_Protocal_Worker+0x1f6>
		break;
 8002240:	bf00      	nop
 8002242:	e000      	b.n	8002246 <Modbus_Protocal_Worker+0x1f6>
		break;
 8002244:	bf00      	nop
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000638 	.word	0x20000638

08002254 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800225a:	4b1d      	ldr	r3, [pc, #116]	@ (80022d0 <modbusWrite1Register+0x7c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	7e5b      	ldrb	r3, [r3, #25]
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	b29b      	uxth	r3, r3
 8002264:	4a1a      	ldr	r2, [pc, #104]	@ (80022d0 <modbusWrite1Register+0x7c>)
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	7e92      	ldrb	r2, [r2, #26]
 800226a:	4413      	add	r3, r2
 800226c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800226e:	88fa      	ldrh	r2, [r7, #6]
 8002270:	4b17      	ldr	r3, [pc, #92]	@ (80022d0 <modbusWrite1Register+0x7c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	429a      	cmp	r2, r3
 8002278:	d903      	bls.n	8002282 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800227a:	2002      	movs	r0, #2
 800227c:	f000 f8a0 	bl	80023c0 <ModbusErrorReply>
			 return;
 8002280:	e023      	b.n	80022ca <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8002282:	4b13      	ldr	r3, [pc, #76]	@ (80022d0 <modbusWrite1Register+0x7c>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <modbusWrite1Register+0x7c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6859      	ldr	r1, [r3, #4]
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	440b      	add	r3, r1
 8002292:	7ed2      	ldrb	r2, [r2, #27]
 8002294:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8002296:	4b0e      	ldr	r3, [pc, #56]	@ (80022d0 <modbusWrite1Register+0x7c>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4b0d      	ldr	r3, [pc, #52]	@ (80022d0 <modbusWrite1Register+0x7c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6859      	ldr	r1, [r3, #4]
 80022a0:	88fb      	ldrh	r3, [r7, #6]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	440b      	add	r3, r1
 80022a6:	7f12      	ldrb	r2, [r2, #28]
 80022a8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80022aa:	4b09      	ldr	r3, [pc, #36]	@ (80022d0 <modbusWrite1Register+0x7c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80022b2:	4b07      	ldr	r3, [pc, #28]	@ (80022d0 <modbusWrite1Register+0x7c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 80022b8:	2208      	movs	r2, #8
 80022ba:	4619      	mov	r1, r3
 80022bc:	f010 ff10 	bl	80130e0 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80022c0:	4b03      	ldr	r3, [pc, #12]	@ (80022d0 <modbusWrite1Register+0x7c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2205      	movs	r2, #5
 80022c6:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000638 	.word	0x20000638

080022d4 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80022da:	4b38      	ldr	r3, [pc, #224]	@ (80023bc <modbusRead1Register+0xe8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	7edb      	ldrb	r3, [r3, #27]
 80022e0:	021b      	lsls	r3, r3, #8
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	4a35      	ldr	r2, [pc, #212]	@ (80023bc <modbusRead1Register+0xe8>)
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	7f12      	ldrb	r2, [r2, #28]
 80022ea:	4413      	add	r3, r2
 80022ec:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80022ee:	4b33      	ldr	r3, [pc, #204]	@ (80023bc <modbusRead1Register+0xe8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	7e5b      	ldrb	r3, [r3, #25]
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	4a30      	ldr	r2, [pc, #192]	@ (80023bc <modbusRead1Register+0xe8>)
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	7e92      	ldrb	r2, [r2, #26]
 80022fe:	4413      	add	r3, r2
 8002300:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <modbusRead1Register+0x3a>
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	2b7d      	cmp	r3, #125	@ 0x7d
 800230c:	d903      	bls.n	8002316 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800230e:	2003      	movs	r0, #3
 8002310:	f000 f856 	bl	80023c0 <ModbusErrorReply>
		 return;
 8002314:	e04e      	b.n	80023b4 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8002316:	88ba      	ldrh	r2, [r7, #4]
 8002318:	4b28      	ldr	r3, [pc, #160]	@ (80023bc <modbusRead1Register+0xe8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	429a      	cmp	r2, r3
 8002320:	d808      	bhi.n	8002334 <modbusRead1Register+0x60>
 8002322:	88ba      	ldrh	r2, [r7, #4]
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	4413      	add	r3, r2
 8002328:	461a      	mov	r2, r3
 800232a:	4b24      	ldr	r3, [pc, #144]	@ (80023bc <modbusRead1Register+0xe8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	429a      	cmp	r2, r3
 8002332:	d903      	bls.n	800233c <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002334:	2002      	movs	r0, #2
 8002336:	f000 f843 	bl	80023c0 <ModbusErrorReply>
		 return;
 800233a:	e03b      	b.n	80023b4 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 800233c:	4b1f      	ldr	r3, [pc, #124]	@ (80023bc <modbusRead1Register+0xe8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2203      	movs	r2, #3
 8002342:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4b1c      	ldr	r3, [pc, #112]	@ (80023bc <modbusRead1Register+0xe8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	0052      	lsls	r2, r2, #1
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8002356:	2400      	movs	r4, #0
 8002358:	e020      	b.n	800239c <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 800235a:	4b18      	ldr	r3, [pc, #96]	@ (80023bc <modbusRead1Register+0xe8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	88bb      	ldrh	r3, [r7, #4]
 8002362:	4423      	add	r3, r4
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	18d1      	adds	r1, r2, r3
 8002368:	4b14      	ldr	r3, [pc, #80]	@ (80023bc <modbusRead1Register+0xe8>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	1c63      	adds	r3, r4, #1
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	7849      	ldrb	r1, [r1, #1]
 8002372:	4413      	add	r3, r2
 8002374:	460a      	mov	r2, r1
 8002376:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800237a:	4b10      	ldr	r3, [pc, #64]	@ (80023bc <modbusRead1Register+0xe8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	88bb      	ldrh	r3, [r7, #4]
 8002382:	4423      	add	r3, r4
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	18d1      	adds	r1, r2, r3
 8002388:	4b0c      	ldr	r3, [pc, #48]	@ (80023bc <modbusRead1Register+0xe8>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	0063      	lsls	r3, r4, #1
 800238e:	3303      	adds	r3, #3
 8002390:	7809      	ldrb	r1, [r1, #0]
 8002392:	4413      	add	r3, r2
 8002394:	460a      	mov	r2, r1
 8002396:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 800239a:	3401      	adds	r4, #1
 800239c:	88fb      	ldrh	r3, [r7, #6]
 800239e:	429c      	cmp	r4, r3
 80023a0:	dbdb      	blt.n	800235a <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	3301      	adds	r3, #1
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	4b04      	ldr	r3, [pc, #16]	@ (80023bc <modbusRead1Register+0xe8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	0052      	lsls	r2, r2, #1
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd90      	pop	{r4, r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000638 	.word	0x20000638

080023c0 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80023ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002400 <ModbusErrorReply+0x40>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	7e1a      	ldrb	r2, [r3, #24]
 80023d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <ModbusErrorReply+0x40>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 80023de:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <ModbusErrorReply+0x40>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	79fa      	ldrb	r2, [r7, #7]
 80023e4:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 80023e8:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <ModbusErrorReply+0x40>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2202      	movs	r2, #2
 80023ee:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20000638 	.word	0x20000638

08002404 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8002408:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <Modbus_frame_response+0x2c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	7e1b      	ldrb	r3, [r3, #24]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d004      	beq.n	800241c <Modbus_frame_response+0x18>
 8002412:	2b06      	cmp	r3, #6
 8002414:	d105      	bne.n	8002422 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8002416:	f7ff ff1d 	bl	8002254 <modbusWrite1Register>
		break;
 800241a:	e006      	b.n	800242a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 800241c:	f7ff ff5a 	bl	80022d4 <modbusRead1Register>
		break;
 8002420:	e003      	b.n	800242a <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8002422:	2001      	movs	r0, #1
 8002424:	f7ff ffcc 	bl	80023c0 <ModbusErrorReply>
		break;
 8002428:	bf00      	nop

	}
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000638 	.word	0x20000638

08002434 <Modbus_Emission>:

void Modbus_Emission()
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800243a:	4b38      	ldr	r3, [pc, #224]	@ (800251c <Modbus_Emission+0xe8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002444:	2b20      	cmp	r3, #32
 8002446:	d15d      	bne.n	8002504 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8002448:	4b34      	ldr	r3, [pc, #208]	@ (800251c <Modbus_Emission+0xe8>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b33      	ldr	r3, [pc, #204]	@ (800251c <Modbus_Emission+0xe8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	7812      	ldrb	r2, [r2, #0]
 8002452:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8002456:	4b31      	ldr	r3, [pc, #196]	@ (800251c <Modbus_Emission+0xe8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 800245e:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8002460:	4b2e      	ldr	r3, [pc, #184]	@ (800251c <Modbus_Emission+0xe8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8002468:	4b2c      	ldr	r3, [pc, #176]	@ (800251c <Modbus_Emission+0xe8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8002470:	461a      	mov	r2, r3
 8002472:	f010 fe35 	bl	80130e0 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8002476:	4b29      	ldr	r3, [pc, #164]	@ (800251c <Modbus_Emission+0xe8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800247e:	461a      	mov	r2, r3
 8002480:	4b26      	ldr	r3, [pc, #152]	@ (800251c <Modbus_Emission+0xe8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	3203      	adds	r2, #3
 8002486:	b292      	uxth	r2, r2
 8002488:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800248c:	4b23      	ldr	r3, [pc, #140]	@ (800251c <Modbus_Emission+0xe8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8002494:	4b21      	ldr	r3, [pc, #132]	@ (800251c <Modbus_Emission+0xe8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800249c:	3b02      	subs	r3, #2
 800249e:	4619      	mov	r1, r3
 80024a0:	4610      	mov	r0, r2
 80024a2:	f7ff fd9d 	bl	8001fe0 <CRC16>
 80024a6:	4603      	mov	r3, r0
 80024a8:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80024aa:	4b1c      	ldr	r3, [pc, #112]	@ (800251c <Modbus_Emission+0xe8>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	4b1b      	ldr	r3, [pc, #108]	@ (800251c <Modbus_Emission+0xe8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80024b6:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80024b8:	7939      	ldrb	r1, [r7, #4]
 80024ba:	4413      	add	r3, r2
 80024bc:	460a      	mov	r2, r1
 80024be:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80024c2:	4b16      	ldr	r3, [pc, #88]	@ (800251c <Modbus_Emission+0xe8>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	4b15      	ldr	r3, [pc, #84]	@ (800251c <Modbus_Emission+0xe8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80024ce:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80024d0:	7979      	ldrb	r1, [r7, #5]
 80024d2:	4413      	add	r3, r2
 80024d4:	460a      	mov	r2, r1
 80024d6:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80024da:	4b10      	ldr	r3, [pc, #64]	@ (800251c <Modbus_Emission+0xe8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d10d      	bne.n	8002504 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80024e8:	4b0c      	ldr	r3, [pc, #48]	@ (800251c <Modbus_Emission+0xe8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80024ee:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <Modbus_Emission+0xe8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80024f6:	4b09      	ldr	r3, [pc, #36]	@ (800251c <Modbus_Emission+0xe8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80024fa:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80024fe:	461a      	mov	r2, r3
 8002500:	f00e fa08 	bl	8010914 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8002504:	4b05      	ldr	r3, [pc, #20]	@ (800251c <Modbus_Emission+0xe8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2200      	movs	r2, #0
 800250a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 800250c:	4b03      	ldr	r3, [pc, #12]	@ (800251c <Modbus_Emission+0xe8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2200      	movs	r2, #0
 8002512:	755a      	strb	r2, [r3, #21]

}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000638 	.word	0x20000638

08002520 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	@ 0x30
 8002524:	af00      	add	r7, sp, #0
 8002526:	6278      	str	r0, [r7, #36]	@ 0x24
 8002528:	ed87 0a08 	vstr	s0, [r7, #32]
 800252c:	edc7 0a07 	vstr	s1, [r7, #28]
 8002530:	ed87 1a06 	vstr	s2, [r7, #24]
 8002534:	edc7 1a05 	vstr	s3, [r7, #20]
 8002538:	ed87 2a04 	vstr	s4, [r7, #16]
 800253c:	edc7 2a03 	vstr	s5, [r7, #12]
 8002540:	ed87 3a02 	vstr	s6, [r7, #8]
 8002544:	edc7 3a01 	vstr	s7, [r7, #4]
 8002548:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 800254c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254e:	6a3a      	ldr	r2, [r7, #32]
 8002550:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 8002554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 800255c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 8002564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 8002574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 800257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	2210      	movs	r2, #16
 8002588:	2100      	movs	r1, #0
 800258a:	4618      	mov	r0, r3
 800258c:	f010 fd64 	bl	8013058 <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	3310      	adds	r3, #16
 8002594:	2240      	movs	r2, #64	@ 0x40
 8002596:	2100      	movs	r1, #0
 8002598:	4618      	mov	r0, r3
 800259a:	f010 fd5d 	bl	8013058 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800259e:	2300      	movs	r3, #0
 80025a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025a2:	e00c      	b.n	80025be <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 80025a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ae:	3304      	adds	r3, #4
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	4a79      	ldr	r2, [pc, #484]	@ (800279c <MotorKalman_Init+0x27c>)
 80025b6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ba:	3301      	adds	r3, #1
 80025bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	ddef      	ble.n	80025a4 <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 80025ca:	2240      	movs	r2, #64	@ 0x40
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f010 fd42 	bl	8013058 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025d4:	2300      	movs	r3, #0
 80025d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025d8:	e00d      	b.n	80025f6 <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 80025da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025e4:	33be      	adds	r3, #190	@ 0xbe
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80025ee:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f2:	3301      	adds	r3, #1
 80025f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	ddee      	ble.n	80025da <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 80025fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fe:	33f0      	adds	r3, #240	@ 0xf0
 8002600:	2210      	movs	r2, #16
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f010 fd27 	bl	8013058 <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 800260a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002610:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002616:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800261a:	2210      	movs	r2, #16
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f010 fd1a 	bl	8013058 <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 8002624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002626:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800262a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 800262e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002632:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002634:	f000 f922 	bl	800287c <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 8002638:	ed97 0a00 	vldr	s0, [r7]
 800263c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800263e:	f000 f94d 	bl	80028dc <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264a:	2201      	movs	r2, #1
 800264c:	2104      	movs	r1, #4
 800264e:	f00f ff92 	bl	8012576 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	3310      	adds	r3, #16
 800265c:	2204      	movs	r2, #4
 800265e:	2104      	movs	r1, #4
 8002660:	f00f ff89 	bl	8012576 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8002670:	2204      	movs	r2, #4
 8002672:	2104      	movs	r1, #4
 8002674:	f00f ff7f 	bl	8012576 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8002684:	2201      	movs	r2, #1
 8002686:	2101      	movs	r1, #1
 8002688:	f00f ff75 	bl	8012576 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8002698:	2201      	movs	r2, #1
 800269a:	2101      	movs	r1, #1
 800269c:	f00f ff6b 	bl	8012576 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 80026a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a2:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 80026a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a8:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 80026ac:	2201      	movs	r2, #1
 80026ae:	2101      	movs	r1, #1
 80026b0:	f00f ff61 	bl	8012576 <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 80026b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b6:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 80026ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026bc:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80026c0:	2204      	movs	r2, #4
 80026c2:	2104      	movs	r1, #4
 80026c4:	f00f ff57 	bl	8012576 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 80026c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ca:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 80026d4:	2201      	movs	r2, #1
 80026d6:	2104      	movs	r1, #4
 80026d8:	f00f ff4d 	bl	8012576 <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 80026dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026de:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80026e8:	2201      	movs	r2, #1
 80026ea:	2104      	movs	r1, #4
 80026ec:	f00f ff43 	bl	8012576 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 80026f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f2:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 80026f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f8:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 80026fc:	2204      	movs	r2, #4
 80026fe:	2104      	movs	r1, #4
 8002700:	f00f ff39 	bl	8012576 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 8002704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002706:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8002710:	2204      	movs	r2, #4
 8002712:	2101      	movs	r1, #1
 8002714:	f00f ff2f 	bl	8012576 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8002724:	2201      	movs	r2, #1
 8002726:	2101      	movs	r1, #1
 8002728:	f00f ff25 	bl	8012576 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 8002732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002734:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 8002738:	2201      	movs	r2, #1
 800273a:	2104      	movs	r1, #4
 800273c:	f00f ff1b 	bl	8012576 <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8002740:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002742:	f000 f82d 	bl	80027a0 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	3390      	adds	r3, #144	@ 0x90
 8002750:	2204      	movs	r2, #4
 8002752:	2104      	movs	r1, #4
 8002754:	f00f ff0f 	bl	8012576 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 8002758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275a:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 800275e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002760:	33e0      	adds	r3, #224	@ 0xe0
 8002762:	2201      	movs	r2, #1
 8002764:	2104      	movs	r1, #4
 8002766:	f00f ff06 	bl	8012576 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002772:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002776:	2204      	movs	r2, #4
 8002778:	2104      	movs	r1, #4
 800277a:	f00f fefc 	bl	8012576 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 800277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002780:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800278a:	2201      	movs	r2, #1
 800278c:	2104      	movs	r1, #4
 800278e:	f00f fef2 	bl	8012576 <arm_mat_init_f32>
}
 8002792:	bf00      	nop
 8002794:	3730      	adds	r7, #48	@ 0x30
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	42c80000 	.word	0x42c80000

080027a0 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 80027dc:	4619      	mov	r1, r3
 80027de:	4610      	mov	r0, r2
 80027e0:	eeb0 3a64 	vmov.f32	s6, s9
 80027e4:	eef0 2a45 	vmov.f32	s5, s10
 80027e8:	eeb0 2a65 	vmov.f32	s4, s11
 80027ec:	eef0 1a46 	vmov.f32	s3, s12
 80027f0:	eeb0 1a66 	vmov.f32	s2, s13
 80027f4:	eef0 0a47 	vmov.f32	s1, s14
 80027f8:	eeb0 0a67 	vmov.f32	s0, s15
 80027fc:	f001 f83c 	bl	8003878 <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002806:	2240      	movs	r2, #64	@ 0x40
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f010 fc24 	bl	8013058 <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002816:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002874 <MotorKalman_DiscretizeModel+0xd4>
 800281a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800283a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800284a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002878 <MotorKalman_DiscretizeModel+0xd8>
 800284e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800285e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002874 <MotorKalman_DiscretizeModel+0xd4>
 8002862:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	3c23d70a 	.word	0x3c23d70a
 8002878:	3dcccccd 	.word	0x3dcccccd

0800287c <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800288e:	2240      	movs	r2, #64	@ 0x40
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f010 fbe0 	bl	8013058 <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 8002898:	edd7 7a00 	vldr	s15, [r7]
 800289c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80028b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028bc:	d107      	bne.n	80028ce <MotorKalman_SetProcessNoise+0x52>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 80028c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028cc:	d002      	beq.n	80028d4 <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ff66 	bl	80027a0 <MotorKalman_DiscretizeModel>
    }
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 80028e8:	ed97 0a00 	vldr	s0, [r7]
 80028ec:	f010 fcd0 	bl	8013290 <sqrtf>
 80028f0:	eef0 7a40 	vmov.f32	s15, s0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 800290a:	b580      	push	{r7, lr}
 800290c:	b0b2      	sub	sp, #200	@ 0xc8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 800291e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800292c:	2300      	movs	r3, #0
 800292e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002932:	e041      	b.n	80029b8 <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 8002934:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	33c8      	adds	r3, #200	@ 0xc8
 800293c:	443b      	add	r3, r7
 800293e:	3b3c      	subs	r3, #60	@ 0x3c
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002946:	2300      	movs	r3, #0
 8002948:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800294c:	e02b      	b.n	80029a6 <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 800294e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	33c8      	adds	r3, #200	@ 0xc8
 8002956:	443b      	add	r3, r7
 8002958:	3b3c      	subs	r3, #60	@ 0x3c
 800295a:	ed93 7a00 	vldr	s14, [r3]
 800295e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002962:	009a      	lsls	r2, r3, #2
 8002964:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002968:	4413      	add	r3, r2
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	3324      	adds	r3, #36	@ 0x24
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	edd3 6a00 	vldr	s13, [r3]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	edd3 7a00 	vldr	s15, [r3]
 8002984:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800298c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	33c8      	adds	r3, #200	@ 0xc8
 8002994:	443b      	add	r3, r7
 8002996:	3b3c      	subs	r3, #60	@ 0x3c
 8002998:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800299c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029a0:	3301      	adds	r3, #1
 80029a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	ddcf      	ble.n	800294e <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029b2:	3301      	adds	r3, #1
 80029b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80029b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029bc:	2b03      	cmp	r3, #3
 80029be:	ddb9      	ble.n	8002934 <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029c0:	2300      	movs	r3, #0
 80029c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80029c6:	e021      	b.n	8002a0c <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 80029c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	33c8      	adds	r3, #200	@ 0xc8
 80029d0:	443b      	add	r3, r7
 80029d2:	3b3c      	subs	r3, #60	@ 0x3c
 80029d4:	ed93 7a00 	vldr	s14, [r3]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029de:	3338      	adds	r3, #56	@ 0x38
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	edd3 6a00 	vldr	s13, [r3]
 80029e8:	edd7 7a00 	vldr	s15, [r7]
 80029ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a06:	3301      	adds	r3, #1
 8002a08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002a0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	ddd9      	ble.n	80029c8 <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002a14:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002a18:	2240      	movs	r2, #64	@ 0x40
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f010 fb1b 	bl	8013058 <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002a22:	f107 030c 	add.w	r3, r7, #12
 8002a26:	2240      	movs	r2, #64	@ 0x40
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f010 fb14 	bl	8013058 <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a36:	e05f      	b.n	8002af8 <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a3e:	e052      	b.n	8002ae6 <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002a40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a44:	009a      	lsls	r2, r3, #2
 8002a46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	33c8      	adds	r3, #200	@ 0xc8
 8002a50:	443b      	add	r3, r7
 8002a52:	3b7c      	subs	r3, #124	@ 0x7c
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a60:	e038      	b.n	8002ad4 <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002a62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a66:	009a      	lsls	r2, r3, #2
 8002a68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	33c8      	adds	r3, #200	@ 0xc8
 8002a72:	443b      	add	r3, r7
 8002a74:	3b7c      	subs	r3, #124	@ 0x7c
 8002a76:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 8002a7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a7e:	009a      	lsls	r2, r3, #2
 8002a80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a84:	4413      	add	r3, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	3324      	adds	r3, #36	@ 0x24
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	edd3 6a00 	vldr	s13, [r3]
 8002a92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a96:	009a      	lsls	r2, r3, #2
 8002a98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a9c:	4413      	add	r3, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002aae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ab2:	009a      	lsls	r2, r3, #2
 8002ab4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ab8:	4413      	add	r3, r2
 8002aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	33c8      	adds	r3, #200	@ 0xc8
 8002ac2:	443b      	add	r3, r7
 8002ac4:	3b7c      	subs	r3, #124	@ 0x7c
 8002ac6:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002aca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ad4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	ddc2      	ble.n	8002a62 <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002adc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ae6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	dda8      	ble.n	8002a40 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002aee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002af2:	3301      	adds	r3, #1
 8002af4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002af8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	dd9b      	ble.n	8002a38 <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b00:	2300      	movs	r3, #0
 8002b02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b06:	e05f      	b.n	8002bc8 <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b0e:	e052      	b.n	8002bb6 <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002b10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b14:	009a      	lsls	r2, r3, #2
 8002b16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	33c8      	adds	r3, #200	@ 0xc8
 8002b20:	443b      	add	r3, r7
 8002b22:	3bbc      	subs	r3, #188	@ 0xbc
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002b30:	e038      	b.n	8002ba4 <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b36:	009a      	lsls	r2, r3, #2
 8002b38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	33c8      	adds	r3, #200	@ 0xc8
 8002b42:	443b      	add	r3, r7
 8002b44:	3bbc      	subs	r3, #188	@ 0xbc
 8002b46:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 8002b4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b4e:	009a      	lsls	r2, r3, #2
 8002b50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	33c8      	adds	r3, #200	@ 0xc8
 8002b5a:	443b      	add	r3, r7
 8002b5c:	3b7c      	subs	r3, #124	@ 0x7c
 8002b5e:	edd3 6a00 	vldr	s13, [r3]
 8002b62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b66:	009a      	lsls	r2, r3, #2
 8002b68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b6c:	4413      	add	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	3324      	adds	r3, #36	@ 0x24
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	edd3 7a00 	vldr	s15, [r3]
 8002b7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b82:	009a      	lsls	r2, r3, #2
 8002b84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b88:	4413      	add	r3, r2
 8002b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	33c8      	adds	r3, #200	@ 0xc8
 8002b92:	443b      	add	r3, r7
 8002b94:	3bbc      	subs	r3, #188	@ 0xbc
 8002b96:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002b9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002ba4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	ddc2      	ble.n	8002b32 <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002bac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002bb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	dda8      	ble.n	8002b10 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002bbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002bc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	dd9b      	ble.n	8002b08 <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002bd6:	e037      	b.n	8002c48 <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002bde:	e02a      	b.n	8002c36 <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002be0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002be4:	009a      	lsls	r2, r3, #2
 8002be6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bea:	4413      	add	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	33c8      	adds	r3, #200	@ 0xc8
 8002bf0:	443b      	add	r3, r7
 8002bf2:	3bbc      	subs	r3, #188	@ 0xbc
 8002bf4:	ed93 7a00 	vldr	s14, [r3]
 8002bf8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bfc:	009a      	lsls	r2, r3, #2
 8002bfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c02:	4413      	add	r3, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	3354      	adds	r3, #84	@ 0x54
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002c10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c14:	009a      	lsls	r2, r3, #2
 8002c16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c1a:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	3304      	adds	r3, #4
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002c2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c30:	3301      	adds	r3, #1
 8002c32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c36:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	ddd0      	ble.n	8002be0 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002c3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c42:	3301      	adds	r3, #1
 8002c44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	ddc3      	ble.n	8002bd8 <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	2104      	movs	r1, #4
 8002c84:	f00f fc77 	bl	8012576 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3310      	adds	r3, #16
 8002c92:	2204      	movs	r2, #4
 8002c94:	2104      	movs	r1, #4
 8002c96:	f00f fc6e 	bl	8012576 <arm_mat_init_f32>
}
 8002c9a:	bf00      	nop
 8002c9c:	37c8      	adds	r7, #200	@ 0xc8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b0d0      	sub	sp, #320	@ 0x140
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cb2:	6018      	str	r0, [r3, #0]
 8002cb4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cb8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002cbc:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 8002cc0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cc4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002cce:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002cd8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cdc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 8002ce6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cea:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	edd3 7a00 	vldr	s15, [r3]
 8002cf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cf8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cfc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 8002d06:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d0a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d18:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002d1c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d20:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 8002d2a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d2e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d38:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002d3c:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002d40:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d44:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 8002d4e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d52:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d64:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 8002d68:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d6c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002d70:	ed93 7a00 	vldr	s14, [r3]
 8002d74:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8002d78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d7c:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8002d80:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002d94:	e04d      	b.n	8002e32 <MotorKalman_Update+0x18e>
        CP[i] = 0;
 8002d96:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002da0:	443b      	add	r3, r7
 8002da2:	3b58      	subs	r3, #88	@ 0x58
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002daa:	2300      	movs	r3, #0
 8002dac:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002db0:	e036      	b.n	8002e20 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 8002db2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002dbc:	443b      	add	r3, r7
 8002dbe:	3b58      	subs	r3, #88	@ 0x58
 8002dc0:	ed93 7a00 	vldr	s14, [r3]
 8002dc4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002dc8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002dd2:	333c      	adds	r3, #60	@ 0x3c
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	edd3 6a00 	vldr	s13, [r3]
 8002ddc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002de0:	009a      	lsls	r2, r3, #2
 8002de2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002de6:	4413      	add	r3, r2
 8002de8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002dec:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002df0:	6812      	ldr	r2, [r2, #0]
 8002df2:	3304      	adds	r3, #4
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	edd3 7a00 	vldr	s15, [r3]
 8002dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e04:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002e0e:	443b      	add	r3, r7
 8002e10:	3b58      	subs	r3, #88	@ 0x58
 8002e12:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002e16:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002e20:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	ddc4      	ble.n	8002db2 <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002e28:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002e32:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	ddad      	ble.n	8002d96 <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002e42:	2300      	movs	r3, #0
 8002e44:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002e48:	e021      	b.n	8002e8e <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 8002e4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002e54:	443b      	add	r3, r7
 8002e56:	3b58      	subs	r3, #88	@ 0x58
 8002e58:	ed93 7a00 	vldr	s14, [r3]
 8002e5c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002e60:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e6a:	333c      	adds	r3, #60	@ 0x3c
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	edd3 7a00 	vldr	s15, [r3]
 8002e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e78:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e80:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002e84:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e88:	3301      	adds	r3, #1
 8002e8a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002e8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	ddd9      	ble.n	8002e4a <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 8002e96:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002e9a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002ea4:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eac:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 8002eb0:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002ec4:	e04d      	b.n	8002f62 <MotorKalman_Update+0x2be>
        PC[i] = 0;
 8002ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002ed0:	443b      	add	r3, r7
 8002ed2:	3b68      	subs	r3, #104	@ 0x68
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002eda:	2300      	movs	r3, #0
 8002edc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002ee0:	e036      	b.n	8002f50 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 8002ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002eec:	443b      	add	r3, r7
 8002eee:	3b68      	subs	r3, #104	@ 0x68
 8002ef0:	ed93 7a00 	vldr	s14, [r3]
 8002ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002ef8:	009a      	lsls	r2, r3, #2
 8002efa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002efe:	4413      	add	r3, r2
 8002f00:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002f04:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	edd3 6a00 	vldr	s13, [r3]
 8002f14:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f18:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f22:	333c      	adds	r3, #60	@ 0x3c
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	edd3 7a00 	vldr	s15, [r3]
 8002f2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002f3e:	443b      	add	r3, r7
 8002f40:	3b68      	subs	r3, #104	@ 0x68
 8002f42:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002f46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002f50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	ddc4      	ble.n	8002ee2 <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	ddad      	ble.n	8002ec6 <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 8002f6a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002f7e:	e01a      	b.n	8002fb6 <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8002f80:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002f8a:	443b      	add	r3, r7
 8002f8c:	3b68      	subs	r3, #104	@ 0x68
 8002f8e:	edd3 6a00 	vldr	s13, [r3]
 8002f92:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8002f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f9a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002fa4:	443b      	add	r3, r7
 8002fa6:	3b78      	subs	r3, #120	@ 0x78
 8002fa8:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002fac:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002fb6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	dde0      	ble.n	8002f80 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002fc4:	e029      	b.n	800301a <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 8002fc6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002fca:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	ed93 7a00 	vldr	s14, [r3]
 8002fdc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002fe6:	443b      	add	r3, r7
 8002fe8:	3b78      	subs	r3, #120	@ 0x78
 8002fea:	edd3 6a00 	vldr	s13, [r3]
 8002fee:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8002ff2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ffa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ffe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003010:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003014:	3301      	adds	r3, #1
 8003016:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800301a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800301e:	2b03      	cmp	r3, #3
 8003020:	ddd1      	ble.n	8002fc6 <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8003022:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8003026:	2240      	movs	r2, #64	@ 0x40
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f010 f814 	bl	8013058 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003030:	2300      	movs	r3, #0
 8003032:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003036:	e035      	b.n	80030a4 <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003038:	2300      	movs	r3, #0
 800303a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800303e:	e028      	b.n	8003092 <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 8003040:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800304a:	443b      	add	r3, r7
 800304c:	3b78      	subs	r3, #120	@ 0x78
 800304e:	ed93 7a00 	vldr	s14, [r3]
 8003052:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003056:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003060:	333c      	adds	r3, #60	@ 0x3c
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	edd3 7a00 	vldr	s15, [r3]
 800306a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800306e:	009a      	lsls	r2, r3, #2
 8003070:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003074:	4413      	add	r3, r2
 8003076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003080:	443b      	add	r3, r7
 8003082:	3bb8      	subs	r3, #184	@ 0xb8
 8003084:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003088:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800308c:	3301      	adds	r3, #1
 800308e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003092:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003096:	2b03      	cmp	r3, #3
 8003098:	ddd2      	ble.n	8003040 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800309a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800309e:	3301      	adds	r3, #1
 80030a0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80030a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	ddc5      	ble.n	8003038 <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80030ac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80030b0:	2240      	movs	r2, #64	@ 0x40
 80030b2:	2100      	movs	r1, #0
 80030b4:	4618      	mov	r0, r3
 80030b6:	f00f ffcf 	bl	8013058 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80030ba:	2300      	movs	r3, #0
 80030bc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80030c0:	e038      	b.n	8003134 <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80030c2:	2300      	movs	r3, #0
 80030c4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80030c8:	e02b      	b.n	8003122 <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 80030ca:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80030ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d102      	bne.n	80030dc <MotorKalman_Update+0x438>
 80030d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80030da:	e001      	b.n	80030e0 <MotorKalman_Update+0x43c>
 80030dc:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 80032f8 <MotorKalman_Update+0x654>
 80030e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030e4:	009a      	lsls	r2, r3, #2
 80030e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80030f2:	443b      	add	r3, r7
 80030f4:	3bb8      	subs	r3, #184	@ 0xb8
 80030f6:	edd3 7a00 	vldr	s15, [r3]
 80030fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030fe:	009a      	lsls	r2, r3, #2
 8003100:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003104:	4413      	add	r3, r2
 8003106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003110:	443b      	add	r3, r7
 8003112:	3bf8      	subs	r3, #248	@ 0xf8
 8003114:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003118:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800311c:	3301      	adds	r3, #1
 800311e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003122:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003126:	2b03      	cmp	r3, #3
 8003128:	ddcf      	ble.n	80030ca <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800312a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800312e:	3301      	adds	r3, #1
 8003130:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003138:	2b03      	cmp	r3, #3
 800313a:	ddc2      	ble.n	80030c2 <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 800313c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003140:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f103 0110 	add.w	r1, r3, #16
 800314a:	f107 0308 	add.w	r3, r7, #8
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	4618      	mov	r0, r3
 8003152:	f00f ffc5 	bl	80130e0 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003156:	2300      	movs	r3, #0
 8003158:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800315c:	e06e      	b.n	800323c <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800315e:	2300      	movs	r3, #0
 8003160:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003164:	e061      	b.n	800322a <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8003166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800316a:	009a      	lsls	r2, r3, #2
 800316c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003170:	4413      	add	r3, r2
 8003172:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8003176:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	3304      	adds	r3, #4
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8003188:	2300      	movs	r3, #0
 800318a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800318e:	e043      	b.n	8003218 <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8003190:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003194:	009a      	lsls	r2, r3, #2
 8003196:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800319a:	4413      	add	r3, r2
 800319c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80031a0:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	3304      	adds	r3, #4
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 80031b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031b4:	009a      	lsls	r2, r3, #2
 80031b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80031c2:	443b      	add	r3, r7
 80031c4:	3bf8      	subs	r3, #248	@ 0xf8
 80031c6:	edd3 6a00 	vldr	s13, [r3]
 80031ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ce:	009a      	lsls	r2, r3, #2
 80031d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80031d4:	4413      	add	r3, r2
 80031d6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80031da:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	edd3 7a00 	vldr	s15, [r3]
 80031e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80031ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031ee:	009a      	lsls	r2, r3, #2
 80031f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80031f4:	4413      	add	r3, r2
 80031f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fa:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80031fe:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	3304      	adds	r3, #4
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800320e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003212:	3301      	adds	r3, #1
 8003214:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800321c:	2b03      	cmp	r3, #3
 800321e:	ddb7      	ble.n	8003190 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003220:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003224:	3301      	adds	r3, #1
 8003226:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800322a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800322e:	2b03      	cmp	r3, #3
 8003230:	dd99      	ble.n	8003166 <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003232:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003236:	3301      	adds	r3, #1
 8003238:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800323c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003240:	2b03      	cmp	r3, #3
 8003242:	dd8c      	ble.n	800315e <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8003244:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003248:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003254:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 800325e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003262:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800326e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8003278:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800327c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003288:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8003292:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003296:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032a2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 80032ac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032b0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 80032ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032be:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2201      	movs	r2, #1
 80032c6:	2104      	movs	r1, #4
 80032c8:	f00f f955 	bl	8012576 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 80032cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 80032da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032de:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3310      	adds	r3, #16
 80032e6:	2204      	movs	r2, #4
 80032e8:	2104      	movs	r1, #4
 80032ea:	f00f f944 	bl	8012576 <arm_mat_init_f32>
}
 80032ee:	bf00      	nop
 80032f0:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	00000000 	.word	0x00000000

080032fc <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	ed87 0a02 	vstr	s0, [r7, #8]
 8003308:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 800330c:	ed97 0a02 	vldr	s0, [r7, #8]
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f7ff fafa 	bl	800290a <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 8003316:	ed97 0a01 	vldr	s0, [r7, #4]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f7ff fcc2 	bl	8002ca4 <MotorKalman_Update>

    return filter->velocity;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 8003326:	ee07 3a90 	vmov	s15, r3
}
 800332a:	eeb0 0a67 	vmov.f32	s0, s15
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	e00c      	b.n	8003360 <matrix_copy+0x2c>
        dst[i] = src[i];
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	441a      	add	r2, r3
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	68b9      	ldr	r1, [r7, #8]
 8003354:	440b      	add	r3, r1
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	3301      	adds	r3, #1
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	429a      	cmp	r2, r3
 8003366:	dbee      	blt.n	8003346 <matrix_copy+0x12>
    }
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
	...

08003378 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 800337e:	af00      	add	r7, sp, #0
 8003380:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8003384:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8003388:	6020      	str	r0, [r4, #0]
 800338a:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 800338e:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8003392:	6001      	str	r1, [r0, #0]
 8003394:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8003398:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 800339c:	ed81 0a00 	vstr	s0, [r1]
 80033a0:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 80033a4:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 80033a8:	600a      	str	r2, [r1, #0]
 80033aa:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 80033ae:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 80033b2:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 80033b4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80033b8:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80033bc:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2204      	movs	r2, #4
 80033c4:	2104      	movs	r1, #4
 80033c6:	f00f f8d6 	bl	8012576 <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 80033ca:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80033ce:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 80033d2:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2204      	movs	r2, #4
 80033da:	2104      	movs	r1, #4
 80033dc:	f00f f8cb 	bl	8012576 <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 80033e0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80033e4:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80033e8:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2201      	movs	r2, #1
 80033f0:	2104      	movs	r1, #4
 80033f2:	f00f f8c0 	bl	8012576 <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 80033f6:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80033fa:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80033fe:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2201      	movs	r2, #1
 8003406:	2104      	movs	r1, #4
 8003408:	f00f f8b5 	bl	8012576 <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 800340c:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8003410:	2240      	movs	r2, #64	@ 0x40
 8003412:	2100      	movs	r1, #0
 8003414:	4618      	mov	r0, r3
 8003416:	f00f fe1f 	bl	8013058 <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 800341a:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 800341e:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8003422:	2204      	movs	r2, #4
 8003424:	2104      	movs	r1, #4
 8003426:	f00f f8a6 	bl	8012576 <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 800342a:	2300      	movs	r3, #0
 800342c:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8003430:	e011      	b.n	8003456 <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 8003432:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8003442:	443b      	add	r3, r7
 8003444:	3b6c      	subs	r3, #108	@ 0x6c
 8003446:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800344a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 800344c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8003450:	3301      	adds	r3, #1
 8003452:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8003456:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 800345a:	2b03      	cmp	r3, #3
 800345c:	dde9      	ble.n	8003432 <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 800345e:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8003462:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8003466:	2204      	movs	r2, #4
 8003468:	2104      	movs	r1, #4
 800346a:	f00f f884 	bl	8012576 <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 800346e:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8003472:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003476:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800347a:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 800347e:	ed93 0a00 	vldr	s0, [r3]
 8003482:	4610      	mov	r0, r2
 8003484:	f00f fc80 	bl	8012d88 <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8003488:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800348c:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8003490:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8003494:	2210      	movs	r2, #16
 8003496:	6819      	ldr	r1, [r3, #0]
 8003498:	f7ff ff4c 	bl	8003334 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 800349c:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 80034a0:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 80034a4:	2204      	movs	r2, #4
 80034a6:	2104      	movs	r1, #4
 80034a8:	f00f f865 	bl	8012576 <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 80034ac:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80034b0:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 80034b4:	2204      	movs	r2, #4
 80034b6:	2104      	movs	r1, #4
 80034b8:	f00f f85d 	bl	8012576 <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 80034bc:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 80034c0:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 80034c4:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 80034c8:	4618      	mov	r0, r3
 80034ca:	f00f f819 	bl	8012500 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 80034ce:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 80034d2:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80034d6:	2210      	movs	r2, #16
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff ff2b 	bl	8003334 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 80034de:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80034e2:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 80034e6:	2302      	movs	r3, #2
 80034e8:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 80034ec:	e03a      	b.n	8003564 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 80034ee:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80034f2:	ee07 3a90 	vmov	s15, r3
 80034f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034fa:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 80034fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003502:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8003506:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 800350a:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 800350e:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8003512:	4618      	mov	r0, r3
 8003514:	f00f fbbe 	bl	8012c94 <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8003518:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 800351c:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8003520:	2210      	movs	r2, #16
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff ff06 	bl	8003334 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8003528:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800352c:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8003530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003534:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8003538:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800353c:	4611      	mov	r1, r2
 800353e:	eeb0 0a47 	vmov.f32	s0, s14
 8003542:	4618      	mov	r0, r3
 8003544:	f00f fc20 	bl	8012d88 <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8003548:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 800354c:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8003550:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 8003554:	4618      	mov	r0, r3
 8003556:	f00e ffd3 	bl	8012500 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 800355a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 800355e:	3301      	adds	r3, #1
 8003560:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8003564:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8003568:	2b0a      	cmp	r3, #10
 800356a:	ddc0      	ble.n	80034ee <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 800356c:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8003570:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003574:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003578:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 800357c:	ed93 0a00 	vldr	s0, [r3]
 8003580:	4610      	mov	r0, r2
 8003582:	f00f fc01 	bl	8012d88 <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 8003586:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800358a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800358e:	461a      	mov	r2, r3
 8003590:	2300      	movs	r3, #0
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	6053      	str	r3, [r2, #4]
 8003596:	6093      	str	r3, [r2, #8]
 8003598:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 800359a:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 800359e:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 80035a2:	2201      	movs	r2, #1
 80035a4:	2104      	movs	r1, #4
 80035a6:	f00e ffe6 	bl	8012576 <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 80035aa:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 80035ae:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80035b2:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 80035b6:	4618      	mov	r0, r3
 80035b8:	f00f fb6c 	bl	8012c94 <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 80035bc:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 80035c0:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 80035c4:	2201      	movs	r2, #1
 80035c6:	2104      	movs	r1, #4
 80035c8:	f00e ffd5 	bl	8012576 <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 80035cc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80035d0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80035d4:	edd3 7a00 	vldr	s15, [r3]
 80035d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80035dc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80035e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80035e4:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80035e8:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80035ec:	4611      	mov	r1, r2
 80035ee:	eeb0 0a47 	vmov.f32	s0, s14
 80035f2:	4618      	mov	r0, r3
 80035f4:	f00f fbc8 	bl	8012d88 <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80035f8:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80035fc:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003600:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003604:	4618      	mov	r0, r3
 8003606:	f00e ff7b 	bl	8012500 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 800360a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800360e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003612:	4618      	mov	r0, r3
 8003614:	2340      	movs	r3, #64	@ 0x40
 8003616:	461a      	mov	r2, r3
 8003618:	2100      	movs	r1, #0
 800361a:	f00f fd1d 	bl	8013058 <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 800361e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8003622:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8003626:	2204      	movs	r2, #4
 8003628:	2104      	movs	r1, #4
 800362a:	f00e ffa4 	bl	8012576 <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 800362e:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8003632:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8003636:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 800363a:	4618      	mov	r0, r3
 800363c:	f00f fb2a 	bl	8012c94 <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8003640:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003644:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003648:	461a      	mov	r2, r3
 800364a:	2300      	movs	r3, #0
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	6053      	str	r3, [r2, #4]
 8003650:	6093      	str	r3, [r2, #8]
 8003652:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 8003654:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003658:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 800365c:	2201      	movs	r2, #1
 800365e:	2104      	movs	r1, #4
 8003660:	f00e ff89 	bl	8012576 <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 8003664:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8003668:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800366c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003670:	4618      	mov	r0, r3
 8003672:	f00f fb0f 	bl	8012c94 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 8003676:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800367a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800367e:	edd3 7a00 	vldr	s15, [r3]
 8003682:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003686:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800368a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800368e:	edd3 7a00 	vldr	s15, [r3]
 8003692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003696:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 800369a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800369e:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80036a2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80036a6:	4611      	mov	r1, r2
 80036a8:	eeb0 0a47 	vmov.f32	s0, s14
 80036ac:	4618      	mov	r0, r3
 80036ae:	f00f fb6b 	bl	8012d88 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80036b2:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80036b6:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80036ba:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80036be:	4618      	mov	r0, r3
 80036c0:	f00e ff1e 	bl	8012500 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 80036c4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80036c8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80036cc:	4618      	mov	r0, r3
 80036ce:	2340      	movs	r3, #64	@ 0x40
 80036d0:	461a      	mov	r2, r3
 80036d2:	2100      	movs	r1, #0
 80036d4:	f00f fcc0 	bl	8013058 <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 80036d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80036dc:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80036e0:	2204      	movs	r2, #4
 80036e2:	2104      	movs	r1, #4
 80036e4:	f00e ff47 	bl	8012576 <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 80036e8:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80036ec:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80036f0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80036f4:	4618      	mov	r0, r3
 80036f6:	f00f facd 	bl	8012c94 <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 80036fa:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80036fe:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003702:	461a      	mov	r2, r3
 8003704:	2300      	movs	r3, #0
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	6053      	str	r3, [r2, #4]
 800370a:	6093      	str	r3, [r2, #8]
 800370c:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 800370e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003712:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 8003716:	2201      	movs	r2, #1
 8003718:	2104      	movs	r1, #4
 800371a:	f00e ff2c 	bl	8012576 <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 800371e:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8003722:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003726:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800372a:	4618      	mov	r0, r3
 800372c:	f00f fab2 	bl	8012c94 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 8003730:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003734:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003738:	edd3 7a00 	vldr	s15, [r3]
 800373c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003740:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003744:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003748:	edd3 7a00 	vldr	s15, [r3]
 800374c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003750:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003754:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003758:	edd3 7a00 	vldr	s15, [r3]
 800375c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003760:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8003764:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003768:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800376c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003770:	4611      	mov	r1, r2
 8003772:	eeb0 0a47 	vmov.f32	s0, s14
 8003776:	4618      	mov	r0, r3
 8003778:	f00f fb06 	bl	8012d88 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800377c:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003780:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003784:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003788:	4618      	mov	r0, r3
 800378a:	f00e feb9 	bl	8012500 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 800378e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003792:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8003796:	4618      	mov	r0, r3
 8003798:	2340      	movs	r3, #64	@ 0x40
 800379a:	461a      	mov	r2, r3
 800379c:	2100      	movs	r1, #0
 800379e:	f00f fc5b 	bl	8013058 <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 80037a2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80037a6:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80037aa:	2204      	movs	r2, #4
 80037ac:	2104      	movs	r1, #4
 80037ae:	f00e fee2 	bl	8012576 <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 80037b2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80037b6:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80037ba:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80037be:	4618      	mov	r0, r3
 80037c0:	f00f fa68 	bl	8012c94 <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 80037c4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80037c8:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 80037cc:	461a      	mov	r2, r3
 80037ce:	2300      	movs	r3, #0
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	6053      	str	r3, [r2, #4]
 80037d4:	6093      	str	r3, [r2, #8]
 80037d6:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 80037d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037dc:	f107 001c 	add.w	r0, r7, #28
 80037e0:	2201      	movs	r2, #1
 80037e2:	2104      	movs	r1, #4
 80037e4:	f00e fec7 	bl	8012576 <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 80037e8:	f107 021c 	add.w	r2, r7, #28
 80037ec:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80037f0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80037f4:	4618      	mov	r0, r3
 80037f6:	f00f fa4d 	bl	8012c94 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 80037fa:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80037fe:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003802:	edd3 7a00 	vldr	s15, [r3]
 8003806:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800380a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800380e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003812:	edd3 7a00 	vldr	s15, [r3]
 8003816:	ee27 7a27 	vmul.f32	s14, s14, s15
 800381a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800381e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003822:	edd3 7a00 	vldr	s15, [r3]
 8003826:	ee27 7a27 	vmul.f32	s14, s14, s15
 800382a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800382e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003832:	edd3 7a00 	vldr	s15, [r3]
 8003836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8003874 <discretize_system_with_arm+0x4fc>
 800383e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003842:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003846:	f107 031c 	add.w	r3, r7, #28
 800384a:	4611      	mov	r1, r2
 800384c:	eeb0 0a47 	vmov.f32	s0, s14
 8003850:	4618      	mov	r0, r3
 8003852:	f00f fa99 	bl	8012d88 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003856:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800385a:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800385e:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003862:	4618      	mov	r0, r3
 8003864:	f00e fe4c 	bl	8012500 <arm_mat_add_f32>
}
 8003868:	bf00      	nop
 800386a:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 800386e:	46bd      	mov	sp, r7
 8003870:	bd90      	pop	{r4, r7, pc}
 8003872:	bf00      	nop
 8003874:	42f00000 	.word	0x42f00000

08003878 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 8003878:	b580      	push	{r7, lr}
 800387a:	b09e      	sub	sp, #120	@ 0x78
 800387c:	af00      	add	r7, sp, #0
 800387e:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8003882:	edc7 0a08 	vstr	s1, [r7, #32]
 8003886:	ed87 1a07 	vstr	s2, [r7, #28]
 800388a:	edc7 1a06 	vstr	s3, [r7, #24]
 800388e:	ed87 2a05 	vstr	s4, [r7, #20]
 8003892:	edc7 2a04 	vstr	s5, [r7, #16]
 8003896:	ed87 3a03 	vstr	s6, [r7, #12]
 800389a:	60b8      	str	r0, [r7, #8]
 800389c:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 800389e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80038a2:	2240      	movs	r2, #64	@ 0x40
 80038a4:	2100      	movs	r1, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f00f fbd6 	bl	8013058 <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 80038ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 80038ba:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80038be:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 80038c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80038c4:	eef1 6a67 	vneg.f32	s13, s15
 80038c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80038cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038d0:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 80038d4:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 80038d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80038dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038e0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 80038e4:	edd7 6a04 	vldr	s13, [r7, #16]
 80038e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80038ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038f0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 80038f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80038f8:	eef1 6a67 	vneg.f32	s13, s15
 80038fc:	ed97 7a08 	vldr	s14, [r7, #32]
 8003900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003904:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 8003908:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800390c:	eef1 6a67 	vneg.f32	s13, s15
 8003910:	ed97 7a08 	vldr	s14, [r7, #32]
 8003914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003918:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 800391c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003920:	ed97 7a08 	vldr	s14, [r7, #32]
 8003924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003928:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    discretize_system_with_arm(A_c, B_c, dt, A, B);
 800392c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003930:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	ed97 0a03 	vldr	s0, [r7, #12]
 800393c:	f7ff fd1c 	bl	8003378 <discretize_system_with_arm>
}
 8003940:	bf00      	nop
 8003942:	3778      	adds	r7, #120	@ 0x78
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	4613      	mov	r3, r2
 8003954:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4a0b      	ldr	r2, [pc, #44]	@ (8003988 <PWM_init+0x40>)
 800395a:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	88fa      	ldrh	r2, [r7, #6]
 8003966:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 800396e:	68b8      	ldr	r0, [r7, #8]
 8003970:	f00a fe32 	bl	800e5d8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	4619      	mov	r1, r3
 8003978:	68b8      	ldr	r0, [r7, #8]
 800397a:	f00a ff79 	bl	800e870 <HAL_TIM_PWM_Start>
}
 800397e:	bf00      	nop
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	0a21fe80 	.word	0x0a21fe80

0800398c <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 800398c:	b5b0      	push	{r4, r5, r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	ed87 0a02 	vstr	s0, [r7, #8]
 8003998:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 800399c:	edd7 7a02 	vldr	s15, [r7, #8]
 80039a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80039a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a8:	d137      	bne.n	8003a1a <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	889b      	ldrh	r3, [r3, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d105      	bne.n	80039be <PWM_write_duty+0x32>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2200      	movs	r2, #0
 80039ba:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 80039bc:	e0e1      	b.n	8003b82 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	889b      	ldrh	r3, [r3, #4]
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d105      	bne.n	80039d2 <PWM_write_duty+0x46>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	2300      	movs	r3, #0
 80039ce:	6393      	str	r3, [r2, #56]	@ 0x38
 80039d0:	e0d7      	b.n	8003b82 <PWM_write_duty+0x1f6>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	889b      	ldrh	r3, [r3, #4]
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d105      	bne.n	80039e6 <PWM_write_duty+0x5a>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	2300      	movs	r3, #0
 80039e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80039e4:	e0cd      	b.n	8003b82 <PWM_write_duty+0x1f6>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	889b      	ldrh	r3, [r3, #4]
 80039ea:	2b0c      	cmp	r3, #12
 80039ec:	d105      	bne.n	80039fa <PWM_write_duty+0x6e>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	2300      	movs	r3, #0
 80039f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80039f8:	e0c3      	b.n	8003b82 <PWM_write_duty+0x1f6>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	889b      	ldrh	r3, [r3, #4]
 80039fe:	2b10      	cmp	r3, #16
 8003a00:	d105      	bne.n	8003a0e <PWM_write_duty+0x82>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	6493      	str	r3, [r2, #72]	@ 0x48
 8003a0c:	e0b9      	b.n	8003b82 <PWM_write_duty+0x1f6>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	2300      	movs	r3, #0
 8003a16:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003a18:	e0b3      	b.n	8003b82 <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	ee07 3a90 	vmov	s15, r3
 8003a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a26:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a32:	ee17 2a90 	vmov	r2, s15
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003a42:	33fe      	adds	r3, #254	@ 0xfe
 8003a44:	4a51      	ldr	r2, [pc, #324]	@ (8003b8c <PWM_write_duty+0x200>)
 8003a46:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4a:	0bdb      	lsrs	r3, r3, #15
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	ee07 3a90 	vmov	s15, r3
 8003a5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	899b      	ldrh	r3, [r3, #12]
 8003a66:	3301      	adds	r3, #1
 8003a68:	ee07 3a90 	vmov	s15, r3
 8003a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a70:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a74:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a88:	ee17 3a90 	vmov	r3, s15
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	89db      	ldrh	r3, [r3, #14]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fc fd10 	bl	80004bc <__aeabi_i2d>
 8003a9c:	4604      	mov	r4, r0
 8003a9e:	460d      	mov	r5, r1
 8003aa0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aa4:	eef0 7ae7 	vabs.f32	s15, s15
 8003aa8:	ee17 0a90 	vmov	r0, s15
 8003aac:	f7fc fd18 	bl	80004e0 <__aeabi_f2d>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	f7fc fd6a 	bl	8000590 <__aeabi_dmul>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	4b31      	ldr	r3, [pc, #196]	@ (8003b90 <PWM_write_duty+0x204>)
 8003aca:	f7fc fe8b 	bl	80007e4 <__aeabi_ddiv>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	f7fd f81d 	bl	8000b14 <__aeabi_d2uiz>
 8003ada:	4603      	mov	r3, r0
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	899a      	ldrh	r2, [r3, #12]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	89da      	ldrh	r2, [r3, #14]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	89da      	ldrh	r2, [r3, #14]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	889b      	ldrh	r3, [r3, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <PWM_write_duty+0x190>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	6952      	ldr	r2, [r2, #20]
 8003b18:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003b1a:	e032      	b.n	8003b82 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	889b      	ldrh	r3, [r3, #4]
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d106      	bne.n	8003b32 <PWM_write_duty+0x1a6>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003b30:	e027      	b.n	8003b82 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	889b      	ldrh	r3, [r3, #4]
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d106      	bne.n	8003b48 <PWM_write_duty+0x1bc>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003b46:	e01c      	b.n	8003b82 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	889b      	ldrh	r3, [r3, #4]
 8003b4c:	2b0c      	cmp	r3, #12
 8003b4e:	d106      	bne.n	8003b5e <PWM_write_duty+0x1d2>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003b5c:	e011      	b.n	8003b82 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	889b      	ldrh	r3, [r3, #4]
 8003b62:	2b10      	cmp	r3, #16
 8003b64:	d106      	bne.n	8003b74 <PWM_write_duty+0x1e8>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003b72:	e006      	b.n	8003b82 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003b80:	e7ff      	b.n	8003b82 <PWM_write_duty+0x1f6>
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bdb0      	pop	{r4, r5, r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	80008001 	.word	0x80008001
 8003b90:	40590000 	.word	0x40590000
 8003b94:	00000000 	.word	0x00000000

08003b98 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8003b98:	b5b0      	push	{r4, r5, r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ba4:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003ba8:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bac:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb4:	d137      	bne.n	8003c26 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	889b      	ldrh	r3, [r3, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d105      	bne.n	8003bca <PWM_write_range+0x32>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003bc8:	e0e1      	b.n	8003d8e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	889b      	ldrh	r3, [r3, #4]
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d105      	bne.n	8003bde <PWM_write_range+0x46>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	6393      	str	r3, [r2, #56]	@ 0x38
 8003bdc:	e0d7      	b.n	8003d8e <PWM_write_range+0x1f6>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	889b      	ldrh	r3, [r3, #4]
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d105      	bne.n	8003bf2 <PWM_write_range+0x5a>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	2300      	movs	r3, #0
 8003bee:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003bf0:	e0cd      	b.n	8003d8e <PWM_write_range+0x1f6>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	889b      	ldrh	r3, [r3, #4]
 8003bf6:	2b0c      	cmp	r3, #12
 8003bf8:	d105      	bne.n	8003c06 <PWM_write_range+0x6e>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	2300      	movs	r3, #0
 8003c02:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c04:	e0c3      	b.n	8003d8e <PWM_write_range+0x1f6>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	889b      	ldrh	r3, [r3, #4]
 8003c0a:	2b10      	cmp	r3, #16
 8003c0c:	d105      	bne.n	8003c1a <PWM_write_range+0x82>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	2300      	movs	r3, #0
 8003c16:	6493      	str	r3, [r2, #72]	@ 0x48
 8003c18:	e0b9      	b.n	8003d8e <PWM_write_range+0x1f6>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	2300      	movs	r3, #0
 8003c22:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003c24:	e0b3      	b.n	8003d8e <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c32:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c3e:	ee17 2a90 	vmov	r2, s15
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003c4e:	33fe      	adds	r3, #254	@ 0xfe
 8003c50:	4a53      	ldr	r2, [pc, #332]	@ (8003da0 <PWM_write_range+0x208>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	0bdb      	lsrs	r3, r3, #15
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	ee07 3a90 	vmov	s15, r3
 8003c6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	899b      	ldrh	r3, [r3, #12]
 8003c72:	3301      	adds	r3, #1
 8003c74:	ee07 3a90 	vmov	s15, r3
 8003c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c7c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003c80:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c94:	ee17 3a90 	vmov	r3, s15
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	89db      	ldrh	r3, [r3, #14]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fc fc0a 	bl	80004bc <__aeabi_i2d>
 8003ca8:	4604      	mov	r4, r0
 8003caa:	460d      	mov	r5, r1
 8003cac:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cb0:	eef0 7ae7 	vabs.f32	s15, s15
 8003cb4:	ee17 0a90 	vmov	r0, s15
 8003cb8:	f7fc fc12 	bl	80004e0 <__aeabi_f2d>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	f7fc fc64 	bl	8000590 <__aeabi_dmul>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4619      	mov	r1, r3
 8003cd0:	a331      	add	r3, pc, #196	@ (adr r3, 8003d98 <PWM_write_range+0x200>)
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	f7fc fd85 	bl	80007e4 <__aeabi_ddiv>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4610      	mov	r0, r2
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f7fc ff17 	bl	8000b14 <__aeabi_d2uiz>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	461a      	mov	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	899a      	ldrh	r2, [r3, #12]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	89da      	ldrh	r2, [r3, #14]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	89da      	ldrh	r2, [r3, #14]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	889b      	ldrh	r3, [r3, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <PWM_write_range+0x190>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	6952      	ldr	r2, [r2, #20]
 8003d24:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003d26:	e032      	b.n	8003d8e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	889b      	ldrh	r3, [r3, #4]
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d106      	bne.n	8003d3e <PWM_write_range+0x1a6>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003d3c:	e027      	b.n	8003d8e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	889b      	ldrh	r3, [r3, #4]
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d106      	bne.n	8003d54 <PWM_write_range+0x1bc>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003d52:	e01c      	b.n	8003d8e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	889b      	ldrh	r3, [r3, #4]
 8003d58:	2b0c      	cmp	r3, #12
 8003d5a:	d106      	bne.n	8003d6a <PWM_write_range+0x1d2>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003d68:	e011      	b.n	8003d8e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	889b      	ldrh	r3, [r3, #4]
 8003d6e:	2b10      	cmp	r3, #16
 8003d70:	d106      	bne.n	8003d80 <PWM_write_range+0x1e8>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003d7e:	e006      	b.n	8003d8e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003d8c:	e7ff      	b.n	8003d8e <PWM_write_range+0x1f6>
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bdb0      	pop	{r4, r5, r7, pc}
 8003d96:	bf00      	nop
 8003d98:	00000000 	.word	0x00000000
 8003d9c:	40efffe0 	.word	0x40efffe0
 8003da0:	80008001 	.word	0x80008001

08003da4 <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6178      	str	r0, [r7, #20]
 8003dac:	6139      	str	r1, [r7, #16]
 8003dae:	60fa      	str	r2, [r7, #12]
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	ed87 0a01 	vstr	s0, [r7, #4]
 8003db6:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2200      	movs	r2, #0
 8003de2:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 8003e04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	fb93 f2f2 	sdiv	r2, r3, r2
 8003e0e:	68f9      	ldr	r1, [r7, #12]
 8003e10:	fb01 f202 	mul.w	r2, r1, r2
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2200      	movs	r2, #0
 8003e22:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2200      	movs	r2, #0
 8003e28:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8003e72:	213c      	movs	r1, #60	@ 0x3c
 8003e74:	6938      	ldr	r0, [r7, #16]
 8003e76:	f00a ffb7 	bl	800ede8 <HAL_TIM_Encoder_Start>
}
 8003e7a:	bf00      	nop
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	0000      	movs	r0, r0
 8003e84:	0000      	movs	r0, r0
	...

08003e88 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003e88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	0fda      	lsrs	r2, r3, #31
 8003eb0:	4413      	add	r3, r2
 8003eb2:	105b      	asrs	r3, r3, #1
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	dd05      	ble.n	8003ec8 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	e00e      	b.n	8003ee6 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	0fda      	lsrs	r2, r3, #31
 8003ece:	4413      	add	r3, r2
 8003ed0:	105b      	asrs	r3, r3, #1
 8003ed2:	425b      	negs	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	da04      	bge.n	8003ee6 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef4:	441a      	add	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	ee07 3a90 	vmov	s15, r3
 8003f08:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	ee07 3a90 	vmov	s15, r3
 8003f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f18:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003f22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fc fad3 	bl	80004e0 <__aeabi_f2d>
 8003f3a:	4604      	mov	r4, r0
 8003f3c:	460d      	mov	r5, r1
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	ee07 3a90 	vmov	s15, r3
 8003f46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f5a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003f5e:	ee17 0a90 	vmov	r0, s15
 8003f62:	f7fc fabd 	bl	80004e0 <__aeabi_f2d>
 8003f66:	a33c      	add	r3, pc, #240	@ (adr r3, 8004058 <QEI_get_diff_count+0x1d0>)
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	f7fc fb10 	bl	8000590 <__aeabi_dmul>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4690      	mov	r8, r2
 8003f76:	4699      	mov	r9, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fc faaf 	bl	80004e0 <__aeabi_f2d>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4640      	mov	r0, r8
 8003f88:	4649      	mov	r1, r9
 8003f8a:	f7fc fb01 	bl	8000590 <__aeabi_dmul>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4620      	mov	r0, r4
 8003f94:	4629      	mov	r1, r5
 8003f96:	f7fc f945 	bl	8000224 <__adddf3>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4610      	mov	r0, r2
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	f7fc fdd7 	bl	8000b54 <__aeabi_d2f>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fc fa95 	bl	80004e0 <__aeabi_f2d>
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	460d      	mov	r5, r1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	ee07 3a90 	vmov	s15, r3
 8003fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fd2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003fd6:	ee16 0a90 	vmov	r0, s13
 8003fda:	f7fc fa81 	bl	80004e0 <__aeabi_f2d>
 8003fde:	a31e      	add	r3, pc, #120	@ (adr r3, 8004058 <QEI_get_diff_count+0x1d0>)
 8003fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe4:	f7fc fad4 	bl	8000590 <__aeabi_dmul>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4690      	mov	r8, r2
 8003fee:	4699      	mov	r9, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fc fa73 	bl	80004e0 <__aeabi_f2d>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4640      	mov	r0, r8
 8004000:	4649      	mov	r1, r9
 8004002:	f7fc fac5 	bl	8000590 <__aeabi_dmul>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4690      	mov	r8, r2
 800400c:	4699      	mov	r9, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004012:	4618      	mov	r0, r3
 8004014:	f7fc fa64 	bl	80004e0 <__aeabi_f2d>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4640      	mov	r0, r8
 800401e:	4649      	mov	r1, r9
 8004020:	f7fc fab6 	bl	8000590 <__aeabi_dmul>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4620      	mov	r0, r4
 800402a:	4629      	mov	r1, r5
 800402c:	f7fc f8fa 	bl	8000224 <__adddf3>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4610      	mov	r0, r2
 8004036:	4619      	mov	r1, r3
 8004038:	f7fc fd8c 	bl	8000b54 <__aeabi_d2f>
 800403c:	4602      	mov	r2, r0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	605a      	str	r2, [r3, #4]
}
 800404a:	bf00      	nop
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004054:	f3af 8000 	nop.w
 8004058:	54442d18 	.word	0x54442d18
 800405c:	400921fb 	.word	0x400921fb

08004060 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8004060:	b5b0      	push	{r4, r5, r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004070:	fb02 f303 	mul.w	r3, r2, r3
 8004074:	ee07 3a90 	vmov	s15, r3
 8004078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004086:	4618      	mov	r0, r3
 8004088:	f7fc fa2a 	bl	80004e0 <__aeabi_f2d>
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	4b83      	ldr	r3, [pc, #524]	@ (80042a0 <QEI_compute_data+0x240>)
 8004092:	f7fc fa7d 	bl	8000590 <__aeabi_dmul>
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	4614      	mov	r4, r2
 800409c:	461d      	mov	r5, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040aa:	ee17 0a90 	vmov	r0, s15
 80040ae:	f7fc fa17 	bl	80004e0 <__aeabi_f2d>
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	4620      	mov	r0, r4
 80040b8:	4629      	mov	r1, r5
 80040ba:	f7fc fb93 	bl	80007e4 <__aeabi_ddiv>
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	4614      	mov	r4, r2
 80040c4:	461d      	mov	r5, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fc fa08 	bl	80004e0 <__aeabi_f2d>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4620      	mov	r0, r4
 80040d6:	4629      	mov	r1, r5
 80040d8:	f7fc fa5a 	bl	8000590 <__aeabi_dmul>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
 80040e4:	f7fc fd36 	bl	8000b54 <__aeabi_d2f>
 80040e8:	4602      	mov	r2, r0
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80040f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80040f8:	ee17 0a90 	vmov	r0, s15
 80040fc:	f7fc f9f0 	bl	80004e0 <__aeabi_f2d>
 8004100:	a365      	add	r3, pc, #404	@ (adr r3, 8004298 <QEI_compute_data+0x238>)
 8004102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004106:	f7fc fa43 	bl	8000590 <__aeabi_dmul>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4614      	mov	r4, r2
 8004110:	461d      	mov	r5, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	ee07 3a90 	vmov	s15, r3
 800411a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800411e:	ee17 0a90 	vmov	r0, s15
 8004122:	f7fc f9dd 	bl	80004e0 <__aeabi_f2d>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4620      	mov	r0, r4
 800412c:	4629      	mov	r1, r5
 800412e:	f7fc fb59 	bl	80007e4 <__aeabi_ddiv>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4614      	mov	r4, r2
 8004138:	461d      	mov	r5, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800413e:	4618      	mov	r0, r3
 8004140:	f7fc f9ce 	bl	80004e0 <__aeabi_f2d>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4620      	mov	r0, r4
 800414a:	4629      	mov	r1, r5
 800414c:	f7fc fa20 	bl	8000590 <__aeabi_dmul>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4610      	mov	r0, r2
 8004156:	4619      	mov	r1, r3
 8004158:	f7fc fcfc 	bl	8000b54 <__aeabi_d2f>
 800415c:	4602      	mov	r2, r0
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004166:	4618      	mov	r0, r3
 8004168:	f7fc f9ba 	bl	80004e0 <__aeabi_f2d>
 800416c:	a34a      	add	r3, pc, #296	@ (adr r3, 8004298 <QEI_compute_data+0x238>)
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	f7fc fa0d 	bl	8000590 <__aeabi_dmul>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	4614      	mov	r4, r2
 800417c:	461d      	mov	r5, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004182:	4618      	mov	r0, r3
 8004184:	f7fc f9ac 	bl	80004e0 <__aeabi_f2d>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4620      	mov	r0, r4
 800418e:	4629      	mov	r1, r5
 8004190:	f7fc f9fe 	bl	8000590 <__aeabi_dmul>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4614      	mov	r4, r2
 800419a:	461d      	mov	r5, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	ee07 3a90 	vmov	s15, r3
 80041a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041a8:	ee17 0a90 	vmov	r0, s15
 80041ac:	f7fc f998 	bl	80004e0 <__aeabi_f2d>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4620      	mov	r0, r4
 80041b6:	4629      	mov	r1, r5
 80041b8:	f7fc fb14 	bl	80007e4 <__aeabi_ddiv>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4614      	mov	r4, r2
 80041c2:	461d      	mov	r5, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fc f989 	bl	80004e0 <__aeabi_f2d>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4620      	mov	r0, r4
 80041d4:	4629      	mov	r1, r5
 80041d6:	f7fc f9db 	bl	8000590 <__aeabi_dmul>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4610      	mov	r0, r2
 80041e0:	4619      	mov	r1, r3
 80041e2:	f7fc fcb7 	bl	8000b54 <__aeabi_d2f>
 80041e6:	4602      	mov	r2, r0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	edd3 7a03 	vldr	s15, [r3, #12]
 8004208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800420c:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8004210:	edd7 7a03 	vldr	s15, [r7, #12]
 8004214:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800421c:	d00a      	beq.n	8004234 <QEI_compute_data+0x1d4>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004222:	ee07 3a90 	vmov	s15, r3
 8004226:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800422a:	edd7 7a03 	vldr	s15, [r7, #12]
 800422e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004232:	e001      	b.n	8004238 <QEI_compute_data+0x1d8>
 8004234:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 80042a4 <QEI_compute_data+0x244>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	ed93 7a04 	vldr	s14, [r3, #16]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	edd3 7a05 	vldr	s15, [r3, #20]
 800424a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800424e:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 8004252:	edd7 7a02 	vldr	s15, [r7, #8]
 8004256:	eef5 7a40 	vcmp.f32	s15, #0.0
 800425a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425e:	d00a      	beq.n	8004276 <QEI_compute_data+0x216>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004264:	ee07 3a90 	vmov	s15, r3
 8004268:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800426c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004274:	e001      	b.n	800427a <QEI_compute_data+0x21a>
 8004276:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80042a4 <QEI_compute_data+0x244>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	615a      	str	r2, [r3, #20]
}
 8004290:	bf00      	nop
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bdb0      	pop	{r4, r5, r7, pc}
 8004298:	54442d18 	.word	0x54442d18
 800429c:	400921fb 	.word	0x400921fb
 80042a0:	404e0000 	.word	0x404e0000
 80042a4:	00000000 	.word	0x00000000

080042a8 <QEI_reset>:

void QEI_reset(QEI *qei) {
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
    // Reset counter history
    qei->c[NOW] = 0;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	605a      	str	r2, [r3, #4]

    // Reset all position and velocity values
    qei->diff_counts = 0;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->pulses = 0;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs = 0;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	63da      	str	r2, [r3, #60]	@ 0x3c
    qei->rads = 0;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	649a      	str	r2, [r3, #72]	@ 0x48

    // Reset velocity history
    qei->r[NOW] = 0;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	615a      	str	r2, [r3, #20]
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8004314:	b580      	push	{r7, lr}
 8004316:	b08e      	sub	sp, #56	@ 0x38
 8004318:	af00      	add	r7, sp, #0
 800431a:	6178      	str	r0, [r7, #20]
 800431c:	ed87 0a04 	vstr	s0, [r7, #16]
 8004320:	edc7 0a03 	vstr	s1, [r7, #12]
 8004324:	ed87 1a02 	vstr	s2, [r7, #8]
 8004328:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2200      	movs	r2, #0
 8004330:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 8004352:	ed97 7a03 	vldr	s14, [r7, #12]
 8004356:	edd7 7a04 	vldr	s15, [r7, #16]
 800435a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800435e:	eef0 7ae7 	vabs.f32	s15, s15
 8004362:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8004366:	ed97 7a03 	vldr	s14, [r7, #12]
 800436a:	edd7 7a04 	vldr	s15, [r7, #16]
 800436e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004372:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800437a:	d503      	bpl.n	8004384 <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	22ff      	movs	r2, #255	@ 0xff
 8004380:	741a      	strb	r2, [r3, #16]
 8004382:	e002      	b.n	800438a <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	2201      	movs	r2, #1
 8004388:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 800438a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800438e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004396:	d006      	beq.n	80043a6 <Trapezoidal_Generator+0x92>
 8004398:	edd7 7a01 	vldr	s15, [r7, #4]
 800439c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80043a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a4:	d104      	bne.n	80043b0 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	60da      	str	r2, [r3, #12]
        return;
 80043ae:	e06f      	b.n	8004490 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 80043b0:	edd7 6a02 	vldr	s13, [r7, #8]
 80043b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80043b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043bc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 80043c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80043c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80043c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80043cc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80043d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80043d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043dc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 80043e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 80043e4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80043e8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80043ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043f0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 80043f4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80043f8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80043fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004404:	db27      	blt.n	8004456 <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8004406:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800440a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800440e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004412:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8004416:	edd7 6a07 	vldr	s13, [r7, #28]
 800441a:	ed97 7a02 	vldr	s14, [r7, #8]
 800441e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004422:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800442a:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 800442c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004430:	edd7 7a06 	vldr	s15, [r7, #24]
 8004434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 800443e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004442:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004446:	edd7 7a06 	vldr	s15, [r7, #24]
 800444a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	edc3 7a02 	vstr	s15, [r3, #8]
 8004454:	e018      	b.n	8004488 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8004456:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800445a:	edd7 7a01 	vldr	s15, [r7, #4]
 800445e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004462:	eeb0 0a66 	vmov.f32	s0, s13
 8004466:	f00e ff13 	bl	8013290 <sqrtf>
 800446a:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	6a3a      	ldr	r2, [r7, #32]
 8004472:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	6a3a      	ldr	r2, [r7, #32]
 8004478:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 800447a:	edd7 7a08 	vldr	s15, [r7, #32]
 800447e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	60da      	str	r2, [r3, #12]
}
 8004490:	3738      	adds	r7, #56	@ 0x38
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8004498:	b480      	push	{r7}
 800449a:	b08d      	sub	sp, #52	@ 0x34
 800449c:	af00      	add	r7, sp, #0
 800449e:	6178      	str	r0, [r7, #20]
 80044a0:	6139      	str	r1, [r7, #16]
 80044a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80044a6:	edc7 0a02 	vstr	s1, [r7, #8]
 80044aa:	ed87 1a01 	vstr	s2, [r7, #4]
 80044ae:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80044b8:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 800473c <Trapezoidal_Evaluated+0x2a4>
 80044bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	ed93 7a03 	vldr	s14, [r3, #12]
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80044d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044da:	f200 811b 	bhi.w	8004714 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2200      	movs	r2, #0
 80044e2:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	7c1b      	ldrb	r3, [r3, #16]
 80044e8:	b25b      	sxtb	r3, r3
 80044ea:	ee07 3a90 	vmov	s15, r3
 80044ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044f2:	ed97 7a00 	vldr	s14, [r7]
 80044f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044fa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	ed93 7a00 	vldr	s14, [r3]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	edd3 7a01 	vldr	s15, [r3, #4]
 800450a:	eeb4 7a67 	vcmp.f32	s14, s15
 800450e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004512:	d109      	bne.n	8004528 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	edd3 7a00 	vldr	s15, [r3]
 800451a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800451e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004522:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8004526:	e00c      	b.n	8004542 <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	7c1b      	ldrb	r3, [r3, #16]
 800452c:	b25b      	sxtb	r3, r3
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004536:	ed97 7a01 	vldr	s14, [r7, #4]
 800453a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	ed93 7a03 	vldr	s14, [r3, #12]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	edd3 7a00 	vldr	s15, [r3]
 800454e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004556:	d824      	bhi.n	80045a2 <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8004558:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800455c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004560:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	edd3 7a03 	vldr	s15, [r3, #12]
 800456a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	edd3 7a03 	vldr	s15, [r3, #12]
 8004574:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004578:	edd7 7a03 	vldr	s15, [r7, #12]
 800457c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	ed93 7a03 	vldr	s14, [r3, #12]
 800458c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800459e:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 80045a0:	e0c6      	b.n	8004730 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	ed93 7a03 	vldr	s14, [r3, #12]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80045ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045b6:	d830      	bhi.n	800461a <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 80045b8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80045bc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80045c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	edd3 7a00 	vldr	s15, [r3]
 80045ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	edd3 7a00 	vldr	s15, [r3]
 80045d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80045dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045e0:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	edd3 7a00 	vldr	s15, [r3]
 80045f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045f4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80045f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8004600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800460e:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	609a      	str	r2, [r3, #8]
}
 8004618:	e08a      	b.n	8004730 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	edd3 7a02 	vldr	s15, [r3, #8]
 8004626:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800462a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800462e:	d900      	bls.n	8004632 <Trapezoidal_Evaluated+0x19a>
}
 8004630:	e07e      	b.n	8004730 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8004632:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004636:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800463a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	edd3 7a00 	vldr	s15, [r3]
 8004644:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	edd3 7a00 	vldr	s15, [r3]
 800464e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004652:	ed97 7a03 	vldr	s14, [r7, #12]
 8004656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800465a:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	ed93 7a01 	vldr	s14, [r3, #4]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	edd3 7a00 	vldr	s15, [r3]
 800466e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004676:	dd11      	ble.n	800469c <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	ed93 7a01 	vldr	s14, [r3, #4]
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	edd3 7a00 	vldr	s15, [r3]
 8004684:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004688:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800468c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004690:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004698:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	ed93 7a03 	vldr	s14, [r3, #12]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80046a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ac:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 80046b0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80046b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80046b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046bc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80046c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046c4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80046c8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80046cc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80046d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80046d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80046d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80046dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 80046ea:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80046ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80046f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80046fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 8004704:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004708:	eef1 7a67 	vneg.f32	s15, s15
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004712:	e00d      	b.n	8004730 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	2201      	movs	r2, #1
 8004718:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	609a      	str	r2, [r3, #8]
}
 8004730:	bf00      	nop
 8004732:	3734      	adds	r7, #52	@ 0x34
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	3a83126f 	.word	0x3a83126f

08004740 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	ed87 0a01 	vstr	s0, [r7, #4]
 800474a:	4603      	mov	r3, r0
 800474c:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	2b1a      	cmp	r3, #26
 8004752:	d018      	beq.n	8004786 <temperature_to_base+0x46>
 8004754:	2b1a      	cmp	r3, #26
 8004756:	dc1d      	bgt.n	8004794 <temperature_to_base+0x54>
 8004758:	2b18      	cmp	r3, #24
 800475a:	d002      	beq.n	8004762 <temperature_to_base+0x22>
 800475c:	2b19      	cmp	r3, #25
 800475e:	d003      	beq.n	8004768 <temperature_to_base+0x28>
 8004760:	e018      	b.n	8004794 <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8004762:	edd7 7a01 	vldr	s15, [r7, #4]
 8004766:	e017      	b.n	8004798 <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 8004768:	edd7 7a01 	vldr	s15, [r7, #4]
 800476c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80047a8 <temperature_to_base+0x68>
 8004770:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004774:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8004778:	ee27 7a87 	vmul.f32	s14, s15, s14
 800477c:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 8004780:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004784:	e008      	b.n	8004798 <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 8004786:	edd7 7a01 	vldr	s15, [r7, #4]
 800478a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80047ac <temperature_to_base+0x6c>
 800478e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004792:	e001      	b.n	8004798 <temperature_to_base+0x58>
        default:
            return value;
 8004794:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8004798:	eeb0 0a67 	vmov.f32	s0, s15
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	42000000 	.word	0x42000000
 80047ac:	43889333 	.word	0x43889333

080047b0 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80047ba:	4603      	mov	r3, r0
 80047bc:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 80047be:	78fb      	ldrb	r3, [r7, #3]
 80047c0:	2b1a      	cmp	r3, #26
 80047c2:	d018      	beq.n	80047f6 <temperature_from_base+0x46>
 80047c4:	2b1a      	cmp	r3, #26
 80047c6:	dc1d      	bgt.n	8004804 <temperature_from_base+0x54>
 80047c8:	2b18      	cmp	r3, #24
 80047ca:	d002      	beq.n	80047d2 <temperature_from_base+0x22>
 80047cc:	2b19      	cmp	r3, #25
 80047ce:	d003      	beq.n	80047d8 <temperature_from_base+0x28>
 80047d0:	e018      	b.n	8004804 <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 80047d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80047d6:	e017      	b.n	8004808 <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 80047d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80047dc:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 80047e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80047e4:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80047e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047ec:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004818 <temperature_from_base+0x68>
 80047f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047f4:	e008      	b.n	8004808 <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 80047f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80047fa:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800481c <temperature_from_base+0x6c>
 80047fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004802:	e001      	b.n	8004808 <temperature_from_base+0x58>
        default:
            return value;
 8004804:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8004808:	eeb0 0a67 	vmov.f32	s0, s15
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	42000000 	.word	0x42000000
 800481c:	43889333 	.word	0x43889333

08004820 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2202      	movs	r2, #2
 8004832:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004834:	2300      	movs	r3, #0
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	e00a      	b.n	8004850 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	3304      	adds	r3, #4
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3301      	adds	r3, #1
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b1a      	cmp	r3, #26
 8004854:	ddf1      	ble.n	800483a <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a11      	ldr	r2, [pc, #68]	@ (80048a0 <init_length_converter+0x80>)
 800485a:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a11      	ldr	r2, [pc, #68]	@ (80048a4 <init_length_converter+0x84>)
 8004860:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004868:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a0e      	ldr	r2, [pc, #56]	@ (80048a8 <init_length_converter+0x88>)
 800486e:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a0e      	ldr	r2, [pc, #56]	@ (80048ac <init_length_converter+0x8c>)
 8004874:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a0d      	ldr	r2, [pc, #52]	@ (80048b0 <init_length_converter+0x90>)
 800487a:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a0d      	ldr	r2, [pc, #52]	@ (80048b4 <init_length_converter+0x94>)
 8004880:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a0c      	ldr	r2, [pc, #48]	@ (80048b8 <init_length_converter+0x98>)
 8004886:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004894:	bf00      	nop
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	3a83126f 	.word	0x3a83126f
 80048a4:	3c23d70a 	.word	0x3c23d70a
 80048a8:	447a0000 	.word	0x447a0000
 80048ac:	3cd013a9 	.word	0x3cd013a9
 80048b0:	3e9c0ebf 	.word	0x3e9c0ebf
 80048b4:	3f6a161e 	.word	0x3f6a161e
 80048b8:	44c92b02 	.word	0x44c92b02

080048bc <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	220a      	movs	r2, #10
 80048ce:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	e00a      	b.n	80048ec <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	3304      	adds	r3, #4
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	3301      	adds	r3, #1
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b1a      	cmp	r3, #26
 80048f0:	ddf1      	ble.n	80048d6 <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a0e      	ldr	r2, [pc, #56]	@ (8004930 <init_mass_converter+0x74>)
 80048f6:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004934 <init_mass_converter+0x78>)
 80048fc:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004904:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a0b      	ldr	r2, [pc, #44]	@ (8004938 <init_mass_converter+0x7c>)
 800490a:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a0b      	ldr	r2, [pc, #44]	@ (800493c <init_mass_converter+0x80>)
 8004910:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a0a      	ldr	r2, [pc, #40]	@ (8004940 <init_mass_converter+0x84>)
 8004916:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004924:	bf00      	nop
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	358637bd 	.word	0x358637bd
 8004934:	3a83126f 	.word	0x3a83126f
 8004938:	447a0000 	.word	0x447a0000
 800493c:	3ce83d36 	.word	0x3ce83d36
 8004940:	3ee83d36 	.word	0x3ee83d36

08004944 <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	220f      	movs	r2, #15
 8004956:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	e00a      	b.n	8004974 <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	3304      	adds	r3, #4
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3301      	adds	r3, #1
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2b1a      	cmp	r3, #26
 8004978:	ddf1      	ble.n	800495e <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a0a      	ldr	r2, [pc, #40]	@ (80049a8 <init_angle_converter+0x64>)
 800497e:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004986:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a08      	ldr	r2, [pc, #32]	@ (80049ac <init_angle_converter+0x68>)
 800498c:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800499a:	bf00      	nop
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	3c8efa35 	.word	0x3c8efa35
 80049ac:	3c80adfd 	.word	0x3c80adfd

080049b0 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2203      	movs	r2, #3
 80049bc:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2214      	movs	r2, #20
 80049c2:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	e00a      	b.n	80049e0 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	3304      	adds	r3, #4
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3301      	adds	r3, #1
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b1a      	cmp	r3, #26
 80049e4:	ddf1      	ble.n	80049ca <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a10      	ldr	r2, [pc, #64]	@ (8004a2c <init_time_converter+0x7c>)
 80049ea:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a10      	ldr	r2, [pc, #64]	@ (8004a30 <init_time_converter+0x80>)
 80049f0:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a0f      	ldr	r2, [pc, #60]	@ (8004a34 <init_time_converter+0x84>)
 80049f6:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80049fe:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a0d      	ldr	r2, [pc, #52]	@ (8004a38 <init_time_converter+0x88>)
 8004a04:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a0c      	ldr	r2, [pc, #48]	@ (8004a3c <init_time_converter+0x8c>)
 8004a0a:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8004a40 <init_time_converter+0x90>)
 8004a10:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	3089705f 	.word	0x3089705f
 8004a30:	358637bd 	.word	0x358637bd
 8004a34:	3a83126f 	.word	0x3a83126f
 8004a38:	42700000 	.word	0x42700000
 8004a3c:	45610000 	.word	0x45610000
 8004a40:	47a8c000 	.word	0x47a8c000

08004a44 <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2204      	movs	r2, #4
 8004a50:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2218      	movs	r2, #24
 8004a56:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e00a      	b.n	8004a74 <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	3304      	adds	r3, #4
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3301      	adds	r3, #1
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b1a      	cmp	r3, #26
 8004a78:	ddf1      	ble.n	8004a5e <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a05      	ldr	r2, [pc, #20]	@ (8004a94 <init_temperature_converter+0x50>)
 8004a7e:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a05      	ldr	r2, [pc, #20]	@ (8004a98 <init_temperature_converter+0x54>)
 8004a84:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004a86:	bf00      	nop
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	08004741 	.word	0x08004741
 8004a98:	080047b1 	.word	0x080047b1

08004a9c <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff feba 	bl	8004820 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3378      	adds	r3, #120	@ 0x78
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff ff03 	bl	80048bc <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	33f0      	adds	r3, #240	@ 0xf0
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff ff42 	bl	8004944 <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff ff72 	bl	80049b0 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff ffb6 	bl	8004a44 <init_temperature_converter>
}
 8004ad8:	bf00      	nop
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	2b1a      	cmp	r3, #26
 8004aee:	d803      	bhi.n	8004af8 <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 8004af0:	79fb      	ldrb	r3, [r7, #7]
 8004af2:	4a05      	ldr	r2, [pc, #20]	@ (8004b08 <UnitConverter_get_unit_type+0x28>)
 8004af4:	5cd3      	ldrb	r3, [r2, r3]
 8004af6:	e000      	b.n	8004afa <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	20000318 	.word	0x20000318

08004b0c <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	71fb      	strb	r3, [r7, #7]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 8004b20:	79fb      	ldrb	r3, [r7, #7]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff ffdc 	bl	8004ae0 <UnitConverter_get_unit_type>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 8004b2c:	79bb      	ldrb	r3, [r7, #6]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff ffd6 	bl	8004ae0 <UnitConverter_get_unit_type>
 8004b34:	4603      	mov	r3, r0
 8004b36:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 8004b38:	7efa      	ldrb	r2, [r7, #27]
 8004b3a:	7ebb      	ldrb	r3, [r7, #26]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d002      	beq.n	8004b46 <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 8004b40:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b44:	e03b      	b.n	8004bbe <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 8004b46:	7efa      	ldrb	r2, [r7, #27]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	011b      	lsls	r3, r3, #4
 8004b4c:	1a9b      	subs	r3, r3, r2
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4413      	add	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d009      	beq.n	8004b72 <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b62:	79fa      	ldrb	r2, [r7, #7]
 8004b64:	4610      	mov	r0, r2
 8004b66:	ed97 0a02 	vldr	s0, [r7, #8]
 8004b6a:	4798      	blx	r3
 8004b6c:	ed87 0a07 	vstr	s0, [r7, #28]
 8004b70:	e00c      	b.n	8004b8c <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 8004b72:	79fb      	ldrb	r3, [r7, #7]
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	edd3 7a00 	vldr	s15, [r3]
 8004b80:	ed97 7a02 	vldr	s14, [r7, #8]
 8004b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b88:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d009      	beq.n	8004ba8 <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b98:	79ba      	ldrb	r2, [r7, #6]
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	ed97 0a07 	vldr	s0, [r7, #28]
 8004ba0:	4798      	blx	r3
 8004ba2:	eef0 7a40 	vmov.f32	s15, s0
 8004ba6:	e00a      	b.n	8004bbe <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 8004ba8:	79bb      	ldrb	r3, [r7, #6]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	ed93 7a00 	vldr	s14, [r3]
 8004bb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 8004bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8004bc2:	3720      	adds	r7, #32
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	ed87 0a02 	vstr	s0, [r7, #8]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	71fb      	strb	r3, [r7, #7]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff ff7e 	bl	8004ae0 <UnitConverter_get_unit_type>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d111      	bne.n	8004c0e <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 8004bea:	79bb      	ldrb	r3, [r7, #6]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff ff77 	bl	8004ae0 <UnitConverter_get_unit_type>
 8004bf2:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d10a      	bne.n	8004c0e <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 8004bf8:	79ba      	ldrb	r2, [r7, #6]
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	ed97 0a02 	vldr	s0, [r7, #8]
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f7ff ff82 	bl	8004b0c <UnitConverter_convert>
 8004c08:	eef0 7a40 	vmov.f32	s15, s0
 8004c0c:	e001      	b.n	8004c12 <UnitConverter_angle+0x4a>
    }
    return value;
 8004c0e:	edd7 7a02 	vldr	s15, [r7, #8]
}
 8004c12:	eeb0 0a67 	vmov.f32	s0, s15
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08c      	sub	sp, #48	@ 0x30
 8004c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	605a      	str	r2, [r3, #4]
 8004c2c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004c2e:	1d3b      	adds	r3, r7, #4
 8004c30:	2220      	movs	r2, #32
 8004c32:	2100      	movs	r1, #0
 8004c34:	4618      	mov	r0, r3
 8004c36:	f00e fa0f 	bl	8013058 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004c3a:	4b39      	ldr	r3, [pc, #228]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c3c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004c40:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004c42:	4b37      	ldr	r3, [pc, #220]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c44:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004c48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004c4a:	4b35      	ldr	r3, [pc, #212]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c50:	4b33      	ldr	r3, [pc, #204]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8004c56:	4b32      	ldr	r3, [pc, #200]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004c5c:	4b30      	ldr	r3, [pc, #192]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004c62:	4b2f      	ldr	r3, [pc, #188]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c64:	2204      	movs	r2, #4
 8004c66:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004c68:	4b2d      	ldr	r3, [pc, #180]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c70:	2201      	movs	r2, #1
 8004c72:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8004c74:	4b2a      	ldr	r3, [pc, #168]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c76:	2202      	movs	r2, #2
 8004c78:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004c7a:	4b29      	ldr	r3, [pc, #164]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004c82:	4b27      	ldr	r3, [pc, #156]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004c88:	4b25      	ldr	r3, [pc, #148]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004c8e:	4b24      	ldr	r3, [pc, #144]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004c96:	4b22      	ldr	r3, [pc, #136]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004c9c:	4b20      	ldr	r3, [pc, #128]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004ca4:	481e      	ldr	r0, [pc, #120]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004ca6:	f006 fba9 	bl	800b3fc <HAL_ADC_Init>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8004cb0:	f004 fbb0 	bl	8009414 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004cb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4818      	ldr	r0, [pc, #96]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004cc0:	f007 fcc8 	bl	800c654 <HAL_ADCEx_MultiModeConfigChannel>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8004cca:	f004 fba3 	bl	8009414 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004cce:	4b15      	ldr	r3, [pc, #84]	@ (8004d24 <MX_ADC1_Init+0x108>)
 8004cd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004cd2:	2306      	movs	r3, #6
 8004cd4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004cd6:	2307      	movs	r3, #7
 8004cd8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004cda:	237f      	movs	r3, #127	@ 0x7f
 8004cdc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004cde:	2304      	movs	r3, #4
 8004ce0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004ce6:	1d3b      	adds	r3, r7, #4
 8004ce8:	4619      	mov	r1, r3
 8004cea:	480d      	ldr	r0, [pc, #52]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004cec:	f006 fe34 	bl	800b958 <HAL_ADC_ConfigChannel>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8004cf6:	f004 fb8d 	bl	8009414 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8004d28 <MX_ADC1_Init+0x10c>)
 8004cfc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004cfe:	230c      	movs	r3, #12
 8004d00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d02:	1d3b      	adds	r3, r7, #4
 8004d04:	4619      	mov	r1, r3
 8004d06:	4806      	ldr	r0, [pc, #24]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004d08:	f006 fe26 	bl	800b958 <HAL_ADC_ConfigChannel>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8004d12:	f004 fb7f 	bl	8009414 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004d16:	bf00      	nop
 8004d18:	3730      	adds	r7, #48	@ 0x30
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	2000063c 	.word	0x2000063c
 8004d24:	19200040 	.word	0x19200040
 8004d28:	1d500080 	.word	0x1d500080

08004d2c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b09e      	sub	sp, #120	@ 0x78
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	605a      	str	r2, [r3, #4]
 8004d3e:	609a      	str	r2, [r3, #8]
 8004d40:	60da      	str	r2, [r3, #12]
 8004d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d44:	f107 0310 	add.w	r3, r7, #16
 8004d48:	2254      	movs	r2, #84	@ 0x54
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f00e f983 	bl	8013058 <memset>
  if(adcHandle->Instance==ADC1)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d5a:	d15e      	bne.n	8004e1a <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004d5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d60:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004d62:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004d66:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d68:	f107 0310 	add.w	r3, r7, #16
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f009 f981 	bl	800e074 <HAL_RCCEx_PeriphCLKConfig>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004d78:	f004 fb4c 	bl	8009414 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004d7c:	4b29      	ldr	r3, [pc, #164]	@ (8004e24 <HAL_ADC_MspInit+0xf8>)
 8004d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d80:	4a28      	ldr	r2, [pc, #160]	@ (8004e24 <HAL_ADC_MspInit+0xf8>)
 8004d82:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004d86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d88:	4b26      	ldr	r3, [pc, #152]	@ (8004e24 <HAL_ADC_MspInit+0xf8>)
 8004d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d94:	4b23      	ldr	r3, [pc, #140]	@ (8004e24 <HAL_ADC_MspInit+0xf8>)
 8004d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d98:	4a22      	ldr	r2, [pc, #136]	@ (8004e24 <HAL_ADC_MspInit+0xf8>)
 8004d9a:	f043 0304 	orr.w	r3, r3, #4
 8004d9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004da0:	4b20      	ldr	r3, [pc, #128]	@ (8004e24 <HAL_ADC_MspInit+0xf8>)
 8004da2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	60bb      	str	r3, [r7, #8]
 8004daa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004dac:	2303      	movs	r3, #3
 8004dae:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004db0:	2303      	movs	r3, #3
 8004db2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004db8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	481a      	ldr	r0, [pc, #104]	@ (8004e28 <HAL_ADC_MspInit+0xfc>)
 8004dc0:	f008 f992 	bl	800d0e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004dc4:	4b19      	ldr	r3, [pc, #100]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dc6:	4a1a      	ldr	r2, [pc, #104]	@ (8004e30 <HAL_ADC_MspInit+0x104>)
 8004dc8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004dca:	4b18      	ldr	r3, [pc, #96]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dcc:	2205      	movs	r2, #5
 8004dce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004dd0:	4b16      	ldr	r3, [pc, #88]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dd6:	4b15      	ldr	r3, [pc, #84]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004ddc:	4b13      	ldr	r3, [pc, #76]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dde:	2280      	movs	r2, #128	@ 0x80
 8004de0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004de2:	4b12      	ldr	r3, [pc, #72]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004de4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004de8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004dea:	4b10      	ldr	r3, [pc, #64]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004df0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004df2:	4b0e      	ldr	r3, [pc, #56]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004df4:	2220      	movs	r2, #32
 8004df6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004df8:	4b0c      	ldr	r3, [pc, #48]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004dfe:	480b      	ldr	r0, [pc, #44]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004e00:	f007 fe40 	bl	800ca84 <HAL_DMA_Init>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8004e0a:	f004 fb03 	bl	8009414 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a06      	ldr	r2, [pc, #24]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004e12:	655a      	str	r2, [r3, #84]	@ 0x54
 8004e14:	4a05      	ldr	r2, [pc, #20]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004e1a:	bf00      	nop
 8004e1c:	3778      	adds	r7, #120	@ 0x78
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40021000 	.word	0x40021000
 8004e28:	48000800 	.word	0x48000800
 8004e2c:	200006a8 	.word	0x200006a8
 8004e30:	40020008 	.word	0x40020008

08004e34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004e3a:	4b22      	ldr	r3, [pc, #136]	@ (8004ec4 <MX_DMA_Init+0x90>)
 8004e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e3e:	4a21      	ldr	r2, [pc, #132]	@ (8004ec4 <MX_DMA_Init+0x90>)
 8004e40:	f043 0304 	orr.w	r3, r3, #4
 8004e44:	6493      	str	r3, [r2, #72]	@ 0x48
 8004e46:	4b1f      	ldr	r3, [pc, #124]	@ (8004ec4 <MX_DMA_Init+0x90>)
 8004e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	607b      	str	r3, [r7, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004e52:	4b1c      	ldr	r3, [pc, #112]	@ (8004ec4 <MX_DMA_Init+0x90>)
 8004e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e56:	4a1b      	ldr	r2, [pc, #108]	@ (8004ec4 <MX_DMA_Init+0x90>)
 8004e58:	f043 0301 	orr.w	r3, r3, #1
 8004e5c:	6493      	str	r3, [r2, #72]	@ 0x48
 8004e5e:	4b19      	ldr	r3, [pc, #100]	@ (8004ec4 <MX_DMA_Init+0x90>)
 8004e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	200b      	movs	r0, #11
 8004e70:	f007 fdd3 	bl	800ca1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004e74:	200b      	movs	r0, #11
 8004e76:	f007 fdea 	bl	800ca4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	200c      	movs	r0, #12
 8004e80:	f007 fdcb 	bl	800ca1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004e84:	200c      	movs	r0, #12
 8004e86:	f007 fde2 	bl	800ca4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	200d      	movs	r0, #13
 8004e90:	f007 fdc3 	bl	800ca1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004e94:	200d      	movs	r0, #13
 8004e96:	f007 fdda 	bl	800ca4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	200e      	movs	r0, #14
 8004ea0:	f007 fdbb 	bl	800ca1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004ea4:	200e      	movs	r0, #14
 8004ea6:	f007 fdd2 	bl	800ca4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2100      	movs	r1, #0
 8004eae:	200f      	movs	r0, #15
 8004eb0:	f007 fdb3 	bl	800ca1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004eb4:	200f      	movs	r0, #15
 8004eb6:	f007 fdca 	bl	800ca4e <HAL_NVIC_EnableIRQ>

}
 8004eba:	bf00      	nop
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40021000 	.word	0x40021000

08004ec8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08a      	sub	sp, #40	@ 0x28
 8004ecc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ece:	f107 0314 	add.w	r3, r7, #20
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	605a      	str	r2, [r3, #4]
 8004ed8:	609a      	str	r2, [r3, #8]
 8004eda:	60da      	str	r2, [r3, #12]
 8004edc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ede:	4b7c      	ldr	r3, [pc, #496]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ee2:	4a7b      	ldr	r2, [pc, #492]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004ee4:	f043 0304 	orr.w	r3, r3, #4
 8004ee8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004eea:	4b79      	ldr	r3, [pc, #484]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ef6:	4b76      	ldr	r3, [pc, #472]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004efa:	4a75      	ldr	r2, [pc, #468]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004efc:	f043 0320 	orr.w	r3, r3, #32
 8004f00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f02:	4b73      	ldr	r3, [pc, #460]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f0e:	4b70      	ldr	r3, [pc, #448]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f12:	4a6f      	ldr	r2, [pc, #444]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004f14:	f043 0301 	orr.w	r3, r3, #1
 8004f18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f1a:	4b6d      	ldr	r3, [pc, #436]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	60bb      	str	r3, [r7, #8]
 8004f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f26:	4b6a      	ldr	r3, [pc, #424]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f2a:	4a69      	ldr	r2, [pc, #420]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004f2c:	f043 0302 	orr.w	r3, r3, #2
 8004f30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f32:	4b67      	ldr	r3, [pc, #412]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	607b      	str	r3, [r7, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8004f44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004f48:	f008 fa68 	bl	800d41c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f52:	4860      	ldr	r0, [pc, #384]	@ (80050d4 <MX_GPIO_Init+0x20c>)
 8004f54:	f008 fa62 	bl	800d41c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004f58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f5e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004f68:	f107 0314 	add.w	r3, r7, #20
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4859      	ldr	r0, [pc, #356]	@ (80050d4 <MX_GPIO_Init+0x20c>)
 8004f70:	f008 f8ba 	bl	800d0e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8004f74:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8004f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f82:	2300      	movs	r3, #0
 8004f84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f86:	f107 0314 	add.w	r3, r7, #20
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004f90:	f008 f8aa 	bl	800d0e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin;
 8004f94:	f241 0301 	movw	r3, #4097	@ 0x1001
 8004f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f9a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fa4:	f107 0314 	add.w	r3, r7, #20
 8004fa8:	4619      	mov	r1, r3
 8004faa:	484b      	ldr	r0, [pc, #300]	@ (80050d8 <MX_GPIO_Init+0x210>)
 8004fac:	f008 f89c 	bl	800d0e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 8004fb0:	2306      	movs	r3, #6
 8004fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fbc:	f107 0314 	add.w	r3, r7, #20
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4845      	ldr	r0, [pc, #276]	@ (80050d8 <MX_GPIO_Init+0x210>)
 8004fc4:	f008 f890 	bl	800d0e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004fc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fda:	f107 0314 	add.w	r3, r7, #20
 8004fde:	4619      	mov	r1, r3
 8004fe0:	483c      	ldr	r0, [pc, #240]	@ (80050d4 <MX_GPIO_Init+0x20c>)
 8004fe2:	f008 f881 	bl	800d0e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : upperphoto_Pin */
  GPIO_InitStruct.Pin = upperphoto_Pin;
 8004fe6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(upperphoto_GPIO_Port, &GPIO_InitStruct);
 8004ff6:	f107 0314 	add.w	r3, r7, #20
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005000:	f008 f872 	bl	800d0e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin;
 8005004:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800500a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800500e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005010:	2302      	movs	r3, #2
 8005012:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005014:	f107 0314 	add.w	r3, r7, #20
 8005018:	4619      	mov	r1, r3
 800501a:	482e      	ldr	r0, [pc, #184]	@ (80050d4 <MX_GPIO_Init+0x20c>)
 800501c:	f008 f864 	bl	800d0e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : J2_Pin */
  GPIO_InitStruct.Pin = J2_Pin;
 8005020:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005026:	2300      	movs	r3, #0
 8005028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800502a:	2302      	movs	r3, #2
 800502c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J2_GPIO_Port, &GPIO_InitStruct);
 800502e:	f107 0314 	add.w	r3, r7, #20
 8005032:	4619      	mov	r1, r3
 8005034:	4827      	ldr	r0, [pc, #156]	@ (80050d4 <MX_GPIO_Init+0x20c>)
 8005036:	f008 f857 	bl	800d0e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EMER_Pin */
  GPIO_InitStruct.Pin = EMER_Pin;
 800503a:	2310      	movs	r3, #16
 800503c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800503e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8005042:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005044:	2300      	movs	r3, #0
 8005046:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_GPIO_Port, &GPIO_InitStruct);
 8005048:	f107 0314 	add.w	r3, r7, #20
 800504c:	4619      	mov	r1, r3
 800504e:	4822      	ldr	r0, [pc, #136]	@ (80050d8 <MX_GPIO_Init+0x210>)
 8005050:	f008 f84a 	bl	800d0e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : prox_Pin PROX_Pin */
  GPIO_InitStruct.Pin = prox_Pin|PROX_Pin;
 8005054:	2360      	movs	r3, #96	@ 0x60
 8005056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005058:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800505c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800505e:	2301      	movs	r3, #1
 8005060:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005062:	f107 0314 	add.w	r3, r7, #20
 8005066:	4619      	mov	r1, r3
 8005068:	481b      	ldr	r0, [pc, #108]	@ (80050d8 <MX_GPIO_Init+0x210>)
 800506a:	f008 f83d 	bl	800d0e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : J1_Pin */
  GPIO_InitStruct.Pin = J1_Pin;
 800506e:	2380      	movs	r3, #128	@ 0x80
 8005070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005072:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005078:	2302      	movs	r3, #2
 800507a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J1_GPIO_Port, &GPIO_InitStruct);
 800507c:	f107 0314 	add.w	r3, r7, #20
 8005080:	4619      	mov	r1, r3
 8005082:	4815      	ldr	r0, [pc, #84]	@ (80050d8 <MX_GPIO_Init+0x210>)
 8005084:	f008 f830 	bl	800d0e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005088:	2200      	movs	r2, #0
 800508a:	2100      	movs	r1, #0
 800508c:	2006      	movs	r0, #6
 800508e:	f007 fcc4 	bl	800ca1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005092:	2006      	movs	r0, #6
 8005094:	f007 fcdb 	bl	800ca4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005098:	2200      	movs	r2, #0
 800509a:	2100      	movs	r1, #0
 800509c:	200a      	movs	r0, #10
 800509e:	f007 fcbc 	bl	800ca1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80050a2:	200a      	movs	r0, #10
 80050a4:	f007 fcd3 	bl	800ca4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80050a8:	2200      	movs	r2, #0
 80050aa:	2100      	movs	r1, #0
 80050ac:	2017      	movs	r0, #23
 80050ae:	f007 fcb4 	bl	800ca1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80050b2:	2017      	movs	r0, #23
 80050b4:	f007 fccb 	bl	800ca4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80050b8:	2200      	movs	r2, #0
 80050ba:	2100      	movs	r1, #0
 80050bc:	2028      	movs	r0, #40	@ 0x28
 80050be:	f007 fcac 	bl	800ca1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80050c2:	2028      	movs	r0, #40	@ 0x28
 80050c4:	f007 fcc3 	bl	800ca4e <HAL_NVIC_EnableIRQ>

}
 80050c8:	bf00      	nop
 80050ca:	3728      	adds	r7, #40	@ 0x28
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	40021000 	.word	0x40021000
 80050d4:	48000800 	.word	0x48000800
 80050d8:	48000400 	.word	0x48000400

080050dc <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 80050dc:	b580      	push	{r7, lr}
 80050de:	b096      	sub	sp, #88	@ 0x58
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80050e8:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 80050f2:	1d3b      	adds	r3, r7, #4
 80050f4:	2201      	movs	r2, #1
 80050f6:	2101      	movs	r1, #1
 80050f8:	f00d fa3d 	bl	8012576 <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8005108:	4619      	mov	r1, r3
 800510a:	4610      	mov	r0, r2
 800510c:	f00d fead 	bl	8012e6a <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f00d fea3 	bl	8012e6a <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8005130:	4619      	mov	r1, r3
 8005132:	4610      	mov	r0, r2
 8005134:	f00d fe99 	bl	8012e6a <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8005144:	4619      	mov	r1, r3
 8005146:	ed97 0a02 	vldr	s0, [r7, #8]
 800514a:	4610      	mov	r0, r2
 800514c:	f00d fe1c 	bl	8012d88 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8005162:	461a      	mov	r2, r3
 8005164:	f00d fd96 	bl	8012c94 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 800517a:	461a      	mov	r2, r3
 800517c:	f00d f9c0 	bl	8012500 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8005192:	461a      	mov	r2, r3
 8005194:	f00d fd7e 	bl	8012c94 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80051aa:	461a      	mov	r2, r3
 80051ac:	f00d fd72 	bl	8012c94 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 80051c2:	461a      	mov	r2, r3
 80051c4:	f00d fd66 	bl	8012c94 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80051da:	4619      	mov	r1, r3
 80051dc:	eeb0 0a67 	vmov.f32	s0, s15
 80051e0:	4610      	mov	r0, r2
 80051e2:	f00d fdd1 	bl	8012d88 <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80051f8:	461a      	mov	r2, r3
 80051fa:	f00d f981 	bl	8012500 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8005210:	461a      	mov	r2, r3
 8005212:	f00d fd3f 	bl	8012c94 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8005228:	461a      	mov	r2, r3
 800522a:	f00d fd33 	bl	8012c94 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8005240:	461a      	mov	r2, r3
 8005242:	f00d f95d 	bl	8012500 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8005252:	4619      	mov	r1, r3
 8005254:	4610      	mov	r0, r2
 8005256:	f00d f9a6 	bl	80125a6 <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 800526c:	461a      	mov	r2, r3
 800526e:	f00d fd11 	bl	8012c94 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8005284:	461a      	mov	r2, r3
 8005286:	f00d fd05 	bl	8012c94 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 800529c:	461a      	mov	r2, r3
 800529e:	f00d fcf9 	bl	8012c94 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 80052b4:	461a      	mov	r2, r3
 80052b6:	f00d fd9d 	bl	8012df4 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 80052cc:	461a      	mov	r2, r3
 80052ce:	f00d fce1 	bl	8012c94 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80052e4:	461a      	mov	r2, r3
 80052e6:	f00d f90b 	bl	8012500 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 80052fc:	461a      	mov	r2, r3
 80052fe:	f00d fcc9 	bl	8012c94 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 8005302:	f107 0310 	add.w	r3, r7, #16
 8005306:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 800530a:	2204      	movs	r2, #4
 800530c:	2104      	movs	r1, #4
 800530e:	f00d f932 	bl	8012576 <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 800531e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8005322:	4619      	mov	r1, r3
 8005324:	f00d fcb6 	bl	8012c94 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800532e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8005332:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8005336:	4618      	mov	r0, r3
 8005338:	f00d fd5c 	bl	8012df4 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8005348:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800534c:	4618      	mov	r0, r3
 800534e:	f00d fca1 	bl	8012c94 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005362:	ee07 3a90 	vmov	s15, r3
}
 8005366:	eeb0 0a67 	vmov.f32	s0, s15
 800536a:	3758      	adds	r7, #88	@ 0x58
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8005370:	b5b0      	push	{r4, r5, r7, lr}
 8005372:	b0a4      	sub	sp, #144	@ 0x90
 8005374:	af00      	add	r7, sp, #0
 8005376:	6178      	str	r0, [r7, #20]
 8005378:	6139      	str	r1, [r7, #16]
 800537a:	60fa      	str	r2, [r7, #12]
 800537c:	ed87 0a02 	vstr	s0, [r7, #8]
 8005380:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8005394:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005398:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800539a:	f04f 0300 	mov.w	r3, #0
 800539e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 80053b2:	f04f 0300 	mov.w	r3, #0
 80053b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053b8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80053bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80053c4:	f04f 0300 	mov.w	r3, #0
 80053c8:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 80053ca:	4bc6      	ldr	r3, [pc, #792]	@ (80056e4 <Kalman_Start+0x374>)
 80053cc:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80053d0:	461d      	mov	r5, r3
 80053d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80053e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 80053e6:	f107 031c 	add.w	r3, r7, #28
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	605a      	str	r2, [r3, #4]
 80053f0:	609a      	str	r2, [r3, #8]
 80053f2:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f04f 0200 	mov.w	r2, #0
 80053fa:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 80053fe:	2300      	movs	r3, #0
 8005400:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005404:	e028      	b.n	8005458 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8005406:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	4413      	add	r3, r2
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	6979      	ldr	r1, [r7, #20]
 8005414:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005418:	3314      	adds	r3, #20
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	440b      	add	r3, r1
 800541e:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8005420:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	3390      	adds	r3, #144	@ 0x90
 8005428:	443b      	add	r3, r7
 800542a:	3b64      	subs	r3, #100	@ 0x64
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	6979      	ldr	r1, [r7, #20]
 8005430:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005434:	3398      	adds	r3, #152	@ 0x98
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005442:	3304      	adds	r3, #4
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	f04f 0200 	mov.w	r2, #0
 800544c:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 800544e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005452:	3301      	adds	r3, #1
 8005454:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005458:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800545c:	2b0f      	cmp	r3, #15
 800545e:	ddd2      	ble.n	8005406 <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8005460:	2300      	movs	r3, #0
 8005462:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005466:	e03a      	b.n	80054de <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8005468:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	3390      	adds	r3, #144	@ 0x90
 8005470:	443b      	add	r3, r7
 8005472:	3b74      	subs	r3, #116	@ 0x74
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	6979      	ldr	r1, [r7, #20]
 8005478:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	440b      	add	r3, r1
 8005480:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8005482:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	6979      	ldr	r1, [r7, #20]
 8005490:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005494:	3324      	adds	r3, #36	@ 0x24
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	440b      	add	r3, r1
 800549a:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 800549c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	3390      	adds	r3, #144	@ 0x90
 80054a4:	443b      	add	r3, r7
 80054a6:	3b14      	subs	r3, #20
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	6979      	ldr	r1, [r7, #20]
 80054ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054b0:	3328      	adds	r3, #40	@ 0x28
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	440b      	add	r3, r1
 80054b6:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 80054b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	3390      	adds	r3, #144	@ 0x90
 80054c0:	443b      	add	r3, r7
 80054c2:	3b24      	subs	r3, #36	@ 0x24
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	6979      	ldr	r1, [r7, #20]
 80054c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054cc:	332c      	adds	r3, #44	@ 0x2c
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	440b      	add	r3, r1
 80054d2:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 80054d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054d8:	3301      	adds	r3, #1
 80054da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80054de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	ddc0      	ble.n	8005468 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2201      	movs	r2, #1
 80054f0:	2104      	movs	r1, #4
 80054f2:	f00d f840 	bl	8012576 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	3310      	adds	r3, #16
 8005500:	2204      	movs	r2, #4
 8005502:	2104      	movs	r1, #4
 8005504:	f00d f837 	bl	8012576 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	3350      	adds	r3, #80	@ 0x50
 8005512:	2204      	movs	r2, #4
 8005514:	2104      	movs	r1, #4
 8005516:	f00d f82e 	bl	8012576 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	3390      	adds	r3, #144	@ 0x90
 8005524:	2201      	movs	r2, #1
 8005526:	2104      	movs	r1, #4
 8005528:	f00d f825 	bl	8012576 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	33a0      	adds	r3, #160	@ 0xa0
 8005536:	2204      	movs	r2, #4
 8005538:	2101      	movs	r1, #1
 800553a:	f00d f81c 	bl	8012576 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	33b0      	adds	r3, #176	@ 0xb0
 8005548:	2201      	movs	r2, #1
 800554a:	2104      	movs	r1, #4
 800554c:	f00d f813 	bl	8012576 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	33c8      	adds	r3, #200	@ 0xc8
 800555a:	2204      	movs	r2, #4
 800555c:	2104      	movs	r1, #4
 800555e:	f00d f80a 	bl	8012576 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800556e:	2201      	movs	r2, #1
 8005570:	2104      	movs	r1, #4
 8005572:	f00d f800 	bl	8012576 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8005582:	2204      	movs	r2, #4
 8005584:	2101      	movs	r1, #1
 8005586:	f00c fff6 	bl	8012576 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8005596:	2204      	movs	r2, #4
 8005598:	2104      	movs	r1, #4
 800559a:	f00c ffec 	bl	8012576 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80055aa:	2204      	movs	r2, #4
 80055ac:	2104      	movs	r1, #4
 80055ae:	f00c ffe2 	bl	8012576 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80055be:	2201      	movs	r2, #1
 80055c0:	2104      	movs	r1, #4
 80055c2:	f00c ffd8 	bl	8012576 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80055d2:	2201      	movs	r2, #1
 80055d4:	2104      	movs	r1, #4
 80055d6:	f00c ffce 	bl	8012576 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80055e6:	2204      	movs	r2, #4
 80055e8:	2101      	movs	r1, #1
 80055ea:	f00c ffc4 	bl	8012576 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80055fa:	2201      	movs	r2, #1
 80055fc:	2101      	movs	r1, #1
 80055fe:	f00c ffba 	bl	8012576 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800560e:	2201      	movs	r2, #1
 8005610:	2101      	movs	r1, #1
 8005612:	f00c ffb0 	bl	8012576 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8005622:	2201      	movs	r2, #1
 8005624:	2104      	movs	r1, #4
 8005626:	f00c ffa6 	bl	8012576 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005636:	2201      	movs	r2, #1
 8005638:	2104      	movs	r1, #4
 800563a:	f00c ff9c 	bl	8012576 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800564a:	2201      	movs	r2, #1
 800564c:	2101      	movs	r1, #1
 800564e:	f00c ff92 	bl	8012576 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800565e:	2201      	movs	r2, #1
 8005660:	2101      	movs	r1, #1
 8005662:	f00c ff88 	bl	8012576 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005672:	2201      	movs	r2, #1
 8005674:	2101      	movs	r1, #1
 8005676:	f00c ff7e 	bl	8012576 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005686:	2201      	movs	r2, #1
 8005688:	2104      	movs	r1, #4
 800568a:	f00c ff74 	bl	8012576 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800569a:	2201      	movs	r2, #1
 800569c:	2101      	movs	r1, #1
 800569e:	f00c ff6a 	bl	8012576 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80056ae:	2204      	movs	r2, #4
 80056b0:	2104      	movs	r1, #4
 80056b2:	f00c ff60 	bl	8012576 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	33c4      	adds	r3, #196	@ 0xc4
 80056c0:	2201      	movs	r2, #1
 80056c2:	2101      	movs	r1, #1
 80056c4:	f00c ff57 	bl	8012576 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80056d4:	2201      	movs	r2, #1
 80056d6:	2101      	movs	r1, #1
 80056d8:	f00c ff4d 	bl	8012576 <arm_mat_init_f32>
}
 80056dc:	bf00      	nop
 80056de:	3790      	adds	r7, #144	@ 0x90
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bdb0      	pop	{r4, r5, r7, pc}
 80056e4:	08014f28 	.word	0x08014f28

080056e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80056ec:	f3bf 8f4f 	dsb	sy
}
 80056f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80056f2:	4b06      	ldr	r3, [pc, #24]	@ (800570c <__NVIC_SystemReset+0x24>)
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80056fa:	4904      	ldr	r1, [pc, #16]	@ (800570c <__NVIC_SystemReset+0x24>)
 80056fc:	4b04      	ldr	r3, [pc, #16]	@ (8005710 <__NVIC_SystemReset+0x28>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005702:	f3bf 8f4f 	dsb	sy
}
 8005706:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005708:	bf00      	nop
 800570a:	e7fd      	b.n	8005708 <__NVIC_SystemReset+0x20>
 800570c:	e000ed00 	.word	0xe000ed00
 8005710:	05fa0004 	.word	0x05fa0004

08005714 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800571a:	f005 fbba 	bl	800ae92 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800571e:	f000 f891 	bl	8005844 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005722:	f7ff fbd1 	bl	8004ec8 <MX_GPIO_Init>
	MX_DMA_Init();
 8005726:	f7ff fb85 	bl	8004e34 <MX_DMA_Init>
	MX_ADC1_Init();
 800572a:	f7ff fa77 	bl	8004c1c <MX_ADC1_Init>
	MX_TIM2_Init();
 800572e:	f004 fdc5 	bl	800a2bc <MX_TIM2_Init>
	MX_TIM3_Init();
 8005732:	f004 fe11 	bl	800a358 <MX_TIM3_Init>
	MX_TIM4_Init();
 8005736:	f004 fe65 	bl	800a404 <MX_TIM4_Init>
	MX_TIM5_Init();
 800573a:	f004 feb9 	bl	800a4b0 <MX_TIM5_Init>
	MX_TIM8_Init();
 800573e:	f004 ff0d 	bl	800a55c <MX_TIM8_Init>
	MX_USART2_UART_Init();
 8005742:	f005 f9cf 	bl	800aae4 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8005746:	f004 ffc7 	bl	800a6d8 <MX_TIM16_Init>
	MX_TIM1_Init();
 800574a:	f004 fd23 	bl	800a194 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 800574e:	f005 f97f 	bl	800aa50 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 8005752:	f003 fe65 	bl	8009420 <plotter_begin>

	plotter_pen_up();
 8005756:	f004 fb01 	bl	8009d5c <plotter_pen_up>

	prismatic_axis.position = prismatic_encoder.mm;
 800575a:	4b29      	ldr	r3, [pc, #164]	@ (8005800 <main+0xec>)
 800575c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800575e:	4a29      	ldr	r2, [pc, #164]	@ (8005804 <main+0xf0>)
 8005760:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8005762:	4b29      	ldr	r3, [pc, #164]	@ (8005808 <main+0xf4>)
 8005764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005766:	4a29      	ldr	r2, [pc, #164]	@ (800580c <main+0xf8>)
 8005768:	6013      	str	r3, [r2, #0]

	safety_state = SAFETY_NORMAL;
 800576a:	4b29      	ldr	r3, [pc, #164]	@ (8005810 <main+0xfc>)
 800576c:	2200      	movs	r2, #0
 800576e:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 8005770:	4b28      	ldr	r3, [pc, #160]	@ (8005814 <main+0x100>)
 8005772:	2200      	movs	r2, #0
 8005774:	701a      	strb	r2, [r3, #0]
	pilot_light_state = false;
 8005776:	4b28      	ldr	r3, [pc, #160]	@ (8005818 <main+0x104>)
 8005778:	2200      	movs	r2, #0
 800577a:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 800577c:	4b27      	ldr	r3, [pc, #156]	@ (800581c <main+0x108>)
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
	position_control_tick = 0;
 8005782:	4b27      	ldr	r3, [pc, #156]	@ (8005820 <main+0x10c>)
 8005784:	2200      	movs	r2, #0
 8005786:	601a      	str	r2, [r3, #0]

	if (first_startup) {
 8005788:	4b26      	ldr	r3, [pc, #152]	@ (8005824 <main+0x110>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d034      	beq.n	80057fa <main+0xe6>
		// Check if already at home position
		bool up_photo_detected = HAL_GPIO_ReadPin(upperphoto_GPIO_Port,
 8005790:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005794:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005798:	f007 fe28 	bl	800d3ec <HAL_GPIO_ReadPin>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bf14      	ite	ne
 80057a2:	2301      	movne	r3, #1
 80057a4:	2300      	moveq	r3, #0
 80057a6:	71fb      	strb	r3, [r7, #7]
		upperphoto_Pin);
		bool prox_detected = HAL_GPIO_ReadPin(prox_GPIO_Port, prox_Pin);
 80057a8:	2120      	movs	r1, #32
 80057aa:	481f      	ldr	r0, [pc, #124]	@ (8005828 <main+0x114>)
 80057ac:	f007 fe1e 	bl	800d3ec <HAL_GPIO_ReadPin>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	bf14      	ite	ne
 80057b6:	2301      	movne	r3, #1
 80057b8:	2300      	moveq	r3, #0
 80057ba:	71bb      	strb	r3, [r7, #6]

		if (up_photo_detected && prox_detected) {
 80057bc:	79fb      	ldrb	r3, [r7, #7]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d018      	beq.n	80057f4 <main+0xe0>
 80057c2:	79bb      	ldrb	r3, [r7, #6]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d015      	beq.n	80057f4 <main+0xe0>
			// Already at home position - no need to home
			first_startup = false;
 80057c8:	4b16      	ldr	r3, [pc, #88]	@ (8005824 <main+0x110>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	701a      	strb	r2, [r3, #0]
			homing_active = false;
 80057ce:	4b17      	ldr	r3, [pc, #92]	@ (800582c <main+0x118>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 80057d4:	4b16      	ldr	r3, [pc, #88]	@ (8005830 <main+0x11c>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	701a      	strb	r2, [r3, #0]

			// Clear any sensor flags
			up_photo = false;
 80057da:	4b16      	ldr	r3, [pc, #88]	@ (8005834 <main+0x120>)
 80057dc:	2200      	movs	r2, #0
 80057de:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80057e0:	4b15      	ldr	r3, [pc, #84]	@ (8005838 <main+0x124>)
 80057e2:	2200      	movs	r2, #0
 80057e4:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80057e6:	4b15      	ldr	r3, [pc, #84]	@ (800583c <main+0x128>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 80057ec:	4b14      	ldr	r3, [pc, #80]	@ (8005840 <main+0x12c>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	701a      	strb	r2, [r3, #0]
 80057f2:	e002      	b.n	80057fa <main+0xe6>

		} else {
			start_homing_sequence(true);
 80057f4:	2001      	movs	r0, #1
 80057f6:	f000 f871 	bl	80058dc <start_homing_sequence>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		handle_b2_button_polling();
 80057fa:	f002 ffbd 	bl	8008778 <handle_b2_button_polling>
 80057fe:	e7fc      	b.n	80057fa <main+0xe6>
 8005800:	20000994 	.word	0x20000994
 8005804:	20000708 	.word	0x20000708
 8005808:	200009f0 	.word	0x200009f0
 800580c:	2000074c 	.word	0x2000074c
 8005810:	200007f0 	.word	0x200007f0
 8005814:	200007f9 	.word	0x200007f9
 8005818:	200007f8 	.word	0x200007f8
 800581c:	200007f4 	.word	0x200007f4
 8005820:	200007fc 	.word	0x200007fc
 8005824:	20000333 	.word	0x20000333
 8005828:	48000400 	.word	0x48000400
 800582c:	200007ef 	.word	0x200007ef
 8005830:	200007ee 	.word	0x200007ee
 8005834:	200007ec 	.word	0x200007ec
 8005838:	200007ed 	.word	0x200007ed
 800583c:	200007e8 	.word	0x200007e8
 8005840:	20000790 	.word	0x20000790

08005844 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8005844:	b580      	push	{r7, lr}
 8005846:	b094      	sub	sp, #80	@ 0x50
 8005848:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800584a:	f107 0318 	add.w	r3, r7, #24
 800584e:	2238      	movs	r2, #56	@ 0x38
 8005850:	2100      	movs	r1, #0
 8005852:	4618      	mov	r0, r3
 8005854:	f00d fc00 	bl	8013058 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8005858:	1d3b      	adds	r3, r7, #4
 800585a:	2200      	movs	r2, #0
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	605a      	str	r2, [r3, #4]
 8005860:	609a      	str	r2, [r3, #8]
 8005862:	60da      	str	r2, [r3, #12]
 8005864:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8005866:	2000      	movs	r0, #0
 8005868:	f007 fe22 	bl	800d4b0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800586c:	2302      	movs	r3, #2
 800586e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005870:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005874:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005876:	2340      	movs	r3, #64	@ 0x40
 8005878:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800587a:	2302      	movs	r3, #2
 800587c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800587e:	2302      	movs	r3, #2
 8005880:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8005882:	2304      	movs	r3, #4
 8005884:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8005886:	2355      	movs	r3, #85	@ 0x55
 8005888:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800588a:	2302      	movs	r3, #2
 800588c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800588e:	2302      	movs	r3, #2
 8005890:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005892:	2302      	movs	r3, #2
 8005894:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005896:	f107 0318 	add.w	r3, r7, #24
 800589a:	4618      	mov	r0, r3
 800589c:	f007 febc 	bl	800d618 <HAL_RCC_OscConfig>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <SystemClock_Config+0x66>
		Error_Handler();
 80058a6:	f003 fdb5 	bl	8009414 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80058aa:	230f      	movs	r3, #15
 80058ac:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80058ae:	2303      	movs	r3, #3
 80058b0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80058b2:	2300      	movs	r3, #0
 80058b4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80058b6:	2300      	movs	r3, #0
 80058b8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80058ba:	2300      	movs	r3, #0
 80058bc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80058be:	1d3b      	adds	r3, r7, #4
 80058c0:	2104      	movs	r1, #4
 80058c2:	4618      	mov	r0, r3
 80058c4:	f008 f9ba 	bl	800dc3c <HAL_RCC_ClockConfig>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <SystemClock_Config+0x8e>
		Error_Handler();
 80058ce:	f003 fda1 	bl	8009414 <Error_Handler>
	}
}
 80058d2:	bf00      	nop
 80058d4:	3750      	adds	r7, #80	@ 0x50
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <start_homing_sequence>:

/* USER CODE BEGIN 4 */
void start_homing_sequence(bool is_startup) {
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	4603      	mov	r3, r0
 80058e4:	71fb      	strb	r3, [r7, #7]
	//modbus set home state
	registerFrame[R_Theta_Status].U16 = 1;
 80058e6:	4b53      	ldr	r3, [pc, #332]	@ (8005a34 <start_homing_sequence+0x158>)
 80058e8:	2201      	movs	r2, #1
 80058ea:	841a      	strh	r2, [r3, #32]
	if (homing_active)
 80058ec:	4b52      	ldr	r3, [pc, #328]	@ (8005a38 <start_homing_sequence+0x15c>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f040 809a 	bne.w	8005a2a <start_homing_sequence+0x14e>
		return;

	// Check current sensor states
	bool up_photo_detected = HAL_GPIO_ReadPin(upperphoto_GPIO_Port,
 80058f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80058fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80058fe:	f007 fd75 	bl	800d3ec <HAL_GPIO_ReadPin>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	bf14      	ite	ne
 8005908:	2301      	movne	r3, #1
 800590a:	2300      	moveq	r3, #0
 800590c:	73fb      	strb	r3, [r7, #15]
	upperphoto_Pin);
	bool prox_detected = HAL_GPIO_ReadPin(prox_GPIO_Port, prox_Pin);
 800590e:	2120      	movs	r1, #32
 8005910:	484a      	ldr	r0, [pc, #296]	@ (8005a3c <start_homing_sequence+0x160>)
 8005912:	f007 fd6b 	bl	800d3ec <HAL_GPIO_ReadPin>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	bf14      	ite	ne
 800591c:	2301      	movne	r3, #1
 800591e:	2300      	moveq	r3, #0
 8005920:	73bb      	strb	r3, [r7, #14]

	// Different logic for startup vs manual homing
	if (is_startup || first_startup) {
 8005922:	79fb      	ldrb	r3, [r7, #7]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d103      	bne.n	8005930 <start_homing_sequence+0x54>
 8005928:	4b45      	ldr	r3, [pc, #276]	@ (8005a40 <start_homing_sequence+0x164>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d02e      	beq.n	800598e <start_homing_sequence+0xb2>
		// STARTUP LOGIC: Skip homing if already at home position
		if (up_photo_detected && prox_detected) {
 8005930:	7bfb      	ldrb	r3, [r7, #15]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d018      	beq.n	8005968 <start_homing_sequence+0x8c>
 8005936:	7bbb      	ldrb	r3, [r7, #14]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d015      	beq.n	8005968 <start_homing_sequence+0x8c>
			// Already at home position - no need to home
			homing_active = false;
 800593c:	4b3e      	ldr	r3, [pc, #248]	@ (8005a38 <start_homing_sequence+0x15c>)
 800593e:	2200      	movs	r2, #0
 8005940:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 8005942:	4b40      	ldr	r3, [pc, #256]	@ (8005a44 <start_homing_sequence+0x168>)
 8005944:	2200      	movs	r2, #0
 8005946:	701a      	strb	r2, [r3, #0]
			first_startup = false;
 8005948:	4b3d      	ldr	r3, [pc, #244]	@ (8005a40 <start_homing_sequence+0x164>)
 800594a:	2200      	movs	r2, #0
 800594c:	701a      	strb	r2, [r3, #0]

			// Clear sensor flags
			up_photo = false;
 800594e:	4b3e      	ldr	r3, [pc, #248]	@ (8005a48 <start_homing_sequence+0x16c>)
 8005950:	2200      	movs	r2, #0
 8005952:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005954:	4b3d      	ldr	r3, [pc, #244]	@ (8005a4c <start_homing_sequence+0x170>)
 8005956:	2200      	movs	r2, #0
 8005958:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 800595a:	4b3d      	ldr	r3, [pc, #244]	@ (8005a50 <start_homing_sequence+0x174>)
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 8005960:	4b3c      	ldr	r3, [pc, #240]	@ (8005a54 <start_homing_sequence+0x178>)
 8005962:	2200      	movs	r2, #0
 8005964:	701a      	strb	r2, [r3, #0]
			return;
 8005966:	e061      	b.n	8005a2c <start_homing_sequence+0x150>
		}

		// Not at home - start startup homing sequence (skip zero degrees)
		homing_active = true;
 8005968:	4b33      	ldr	r3, [pc, #204]	@ (8005a38 <start_homing_sequence+0x15c>)
 800596a:	2201      	movs	r2, #1
 800596c:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 800596e:	4b39      	ldr	r3, [pc, #228]	@ (8005a54 <start_homing_sequence+0x178>)
 8005970:	2200      	movs	r2, #0
 8005972:	701a      	strb	r2, [r3, #0]
		prox_count = 0;
 8005974:	4b36      	ldr	r3, [pc, #216]	@ (8005a50 <start_homing_sequence+0x174>)
 8005976:	2200      	movs	r2, #0
 8005978:	601a      	str	r2, [r3, #0]
		up_photo = false;
 800597a:	4b33      	ldr	r3, [pc, #204]	@ (8005a48 <start_homing_sequence+0x16c>)
 800597c:	2200      	movs	r2, #0
 800597e:	701a      	strb	r2, [r3, #0]
		low_photo = false;
 8005980:	4b32      	ldr	r3, [pc, #200]	@ (8005a4c <start_homing_sequence+0x170>)
 8005982:	2200      	movs	r2, #0
 8005984:	701a      	strb	r2, [r3, #0]
		homing_state = HOMING_PEN_UP;
 8005986:	4b2f      	ldr	r3, [pc, #188]	@ (8005a44 <start_homing_sequence+0x168>)
 8005988:	2201      	movs	r2, #1
 800598a:	701a      	strb	r2, [r3, #0]
 800598c:	e04e      	b.n	8005a2c <start_homing_sequence+0x150>

	} else {
		// MANUAL HOMING LOGIC: More sophisticated behavior
		if (up_photo_detected && prox_detected) {
 800598e:	7bfb      	ldrb	r3, [r7, #15]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d018      	beq.n	80059c6 <start_homing_sequence+0xea>
 8005994:	7bbb      	ldrb	r3, [r7, #14]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d015      	beq.n	80059c6 <start_homing_sequence+0xea>
			// Already perfectly homed - skip homing completely
			homing_active = false;
 800599a:	4b27      	ldr	r3, [pc, #156]	@ (8005a38 <start_homing_sequence+0x15c>)
 800599c:	2200      	movs	r2, #0
 800599e:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 80059a0:	4b28      	ldr	r3, [pc, #160]	@ (8005a44 <start_homing_sequence+0x168>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	701a      	strb	r2, [r3, #0]
			first_startup = false;  // ← ADDED THIS LINE
 80059a6:	4b26      	ldr	r3, [pc, #152]	@ (8005a40 <start_homing_sequence+0x164>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	701a      	strb	r2, [r3, #0]
			up_photo = false;
 80059ac:	4b26      	ldr	r3, [pc, #152]	@ (8005a48 <start_homing_sequence+0x16c>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80059b2:	4b26      	ldr	r3, [pc, #152]	@ (8005a4c <start_homing_sequence+0x170>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80059b8:	4b25      	ldr	r3, [pc, #148]	@ (8005a50 <start_homing_sequence+0x174>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 80059be:	4b25      	ldr	r3, [pc, #148]	@ (8005a54 <start_homing_sequence+0x178>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	701a      	strb	r2, [r3, #0]
			return;
 80059c4:	e032      	b.n	8005a2c <start_homing_sequence+0x150>
			 up_photo = false;
			 low_photo = false;
			 homing_state = HOMING_REV_TO_ZERO_DEG;
			 rev_to_zero_trajectory_started = false;
			 */
		} else if (up_photo_detected && !prox_detected) {
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d01b      	beq.n	8005a04 <start_homing_sequence+0x128>
 80059cc:	7bbb      	ldrb	r3, [r7, #14]
 80059ce:	f083 0301 	eor.w	r3, r3, #1
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d015      	beq.n	8005a04 <start_homing_sequence+0x128>
			// At up photo but not at prox - go to zero degrees first
			homing_active = true;
 80059d8:	4b17      	ldr	r3, [pc, #92]	@ (8005a38 <start_homing_sequence+0x15c>)
 80059da:	2201      	movs	r2, #1
 80059dc:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 80059de:	4b1d      	ldr	r3, [pc, #116]	@ (8005a54 <start_homing_sequence+0x178>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80059e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005a50 <start_homing_sequence+0x174>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	601a      	str	r2, [r3, #0]
			up_photo = false;
 80059ea:	4b17      	ldr	r3, [pc, #92]	@ (8005a48 <start_homing_sequence+0x16c>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80059f0:	4b16      	ldr	r3, [pc, #88]	@ (8005a4c <start_homing_sequence+0x170>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_REV_TO_ZERO_DEG;
 80059f6:	4b13      	ldr	r3, [pc, #76]	@ (8005a44 <start_homing_sequence+0x168>)
 80059f8:	2207      	movs	r2, #7
 80059fa:	701a      	strb	r2, [r3, #0]
			rev_to_zero_trajectory_started = false;
 80059fc:	4b16      	ldr	r3, [pc, #88]	@ (8005a58 <start_homing_sequence+0x17c>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	701a      	strb	r2, [r3, #0]
 8005a02:	e013      	b.n	8005a2c <start_homing_sequence+0x150>
		} else {
			// Not at up photo - start full homing sequence
			homing_active = true;
 8005a04:	4b0c      	ldr	r3, [pc, #48]	@ (8005a38 <start_homing_sequence+0x15c>)
 8005a06:	2201      	movs	r2, #1
 8005a08:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 8005a0a:	4b12      	ldr	r3, [pc, #72]	@ (8005a54 <start_homing_sequence+0x178>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005a10:	4b0f      	ldr	r3, [pc, #60]	@ (8005a50 <start_homing_sequence+0x174>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]
			up_photo = false;
 8005a16:	4b0c      	ldr	r3, [pc, #48]	@ (8005a48 <start_homing_sequence+0x16c>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a4c <start_homing_sequence+0x170>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_PEN_UP;
 8005a22:	4b08      	ldr	r3, [pc, #32]	@ (8005a44 <start_homing_sequence+0x168>)
 8005a24:	2201      	movs	r2, #1
 8005a26:	701a      	strb	r2, [r3, #0]
 8005a28:	e000      	b.n	8005a2c <start_homing_sequence+0x150>
		return;
 8005a2a:	bf00      	nop
		}
	}
}
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	200015b0 	.word	0x200015b0
 8005a38:	200007ef 	.word	0x200007ef
 8005a3c:	48000400 	.word	0x48000400
 8005a40:	20000333 	.word	0x20000333
 8005a44:	200007ee 	.word	0x200007ee
 8005a48:	200007ec 	.word	0x200007ec
 8005a4c:	200007ed 	.word	0x200007ed
 8005a50:	200007e8 	.word	0x200007e8
 8005a54:	20000790 	.word	0x20000790
 8005a58:	200007fa 	.word	0x200007fa

08005a5c <update_homing_sequence>:

void update_homing_sequence(void) {
 8005a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a60:	ed2d 8b02 	vpush	{d8}
 8005a64:	b08b      	sub	sp, #44	@ 0x2c
 8005a66:	af00      	add	r7, sp, #0
	if (!homing_active)
 8005a68:	4b9e      	ldr	r3, [pc, #632]	@ (8005ce4 <update_homing_sequence+0x288>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	f083 0301 	eor.w	r3, r3, #1
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f040 8375 	bne.w	8006162 <update_homing_sequence+0x706>
		return;

	if (is_emergency_active()) {
 8005a78:	f002 f804 	bl	8007a84 <is_emergency_active>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00e      	beq.n	8005aa0 <update_homing_sequence+0x44>
		homing_active = false;
 8005a82:	4b98      	ldr	r3, [pc, #608]	@ (8005ce4 <update_homing_sequence+0x288>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	701a      	strb	r2, [r3, #0]
		homing_state = HOMING_IDLE;
 8005a88:	4b97      	ldr	r3, [pc, #604]	@ (8005ce8 <update_homing_sequence+0x28c>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	701a      	strb	r2, [r3, #0]
		prismatic_axis.command_pos = 0.0f;
 8005a8e:	4b97      	ldr	r3, [pc, #604]	@ (8005cec <update_homing_sequence+0x290>)
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005a96:	4b96      	ldr	r3, [pc, #600]	@ (8005cf0 <update_homing_sequence+0x294>)
 8005a98:	f04f 0200 	mov.w	r2, #0
 8005a9c:	625a      	str	r2, [r3, #36]	@ 0x24
		return;
 8005a9e:	e375      	b.n	800618c <update_homing_sequence+0x730>
	}

	switch (homing_state) {
 8005aa0:	4b91      	ldr	r3, [pc, #580]	@ (8005ce8 <update_homing_sequence+0x28c>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	2b0a      	cmp	r3, #10
 8005aa8:	f200 835d 	bhi.w	8006166 <update_homing_sequence+0x70a>
 8005aac:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab4 <update_homing_sequence+0x58>)
 8005aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab2:	bf00      	nop
 8005ab4:	08005ae1 	.word	0x08005ae1
 8005ab8:	08005b03 	.word	0x08005b03
 8005abc:	08005b6d 	.word	0x08005b6d
 8005ac0:	08005cb9 	.word	0x08005cb9
 8005ac4:	08005d29 	.word	0x08005d29
 8005ac8:	08005e6d 	.word	0x08005e6d
 8005acc:	08005ee3 	.word	0x08005ee3
 8005ad0:	08005f75 	.word	0x08005f75
 8005ad4:	08006025 	.word	0x08006025
 8005ad8:	0800612b 	.word	0x0800612b
 8005adc:	08006155 	.word	0x08006155
	case HOMING_PEN_UP:
		// Ensure pen is up
		plotter_pen_up();
 8005ae0:	f004 f93c 	bl	8009d5c <plotter_pen_up>
		prismatic_axis.command_pos = 0.0f;
 8005ae4:	4b81      	ldr	r3, [pc, #516]	@ (8005cec <update_homing_sequence+0x290>)
 8005ae6:	f04f 0200 	mov.w	r2, #0
 8005aea:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005aec:	4b80      	ldr	r3, [pc, #512]	@ (8005cf0 <update_homing_sequence+0x294>)
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer = 0;
 8005af4:	4b7f      	ldr	r3, [pc, #508]	@ (8005cf4 <update_homing_sequence+0x298>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]
		homing_state = HOMING_DELAY_AFTER_PEN_UP;
 8005afa:	4b7b      	ldr	r3, [pc, #492]	@ (8005ce8 <update_homing_sequence+0x28c>)
 8005afc:	2202      	movs	r2, #2
 8005afe:	701a      	strb	r2, [r3, #0]
		break;
 8005b00:	e344      	b.n	800618c <update_homing_sequence+0x730>

	case HOMING_DELAY_AFTER_PEN_UP:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005b02:	4b7a      	ldr	r3, [pc, #488]	@ (8005cec <update_homing_sequence+0x290>)
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005b0a:	4b79      	ldr	r3, [pc, #484]	@ (8005cf0 <update_homing_sequence+0x294>)
 8005b0c:	f04f 0200 	mov.w	r2, #0
 8005b10:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005b12:	4b78      	ldr	r3, [pc, #480]	@ (8005cf4 <update_homing_sequence+0x298>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	3301      	adds	r3, #1
 8005b18:	4a76      	ldr	r2, [pc, #472]	@ (8005cf4 <update_homing_sequence+0x298>)
 8005b1a:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 150) {
 8005b1c:	4b75      	ldr	r3, [pc, #468]	@ (8005cf4 <update_homing_sequence+0x298>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b95      	cmp	r3, #149	@ 0x95
 8005b22:	f240 8322 	bls.w	800616a <update_homing_sequence+0x70e>
			// Check if already at low photo sensor
			low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 8005b26:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005b2a:	4873      	ldr	r0, [pc, #460]	@ (8005cf8 <update_homing_sequence+0x29c>)
 8005b2c:	f007 fc5e 	bl	800d3ec <HAL_GPIO_ReadPin>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	bf14      	ite	ne
 8005b36:	2301      	movne	r3, #1
 8005b38:	2300      	moveq	r3, #0
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	4b6f      	ldr	r3, [pc, #444]	@ (8005cfc <update_homing_sequence+0x2a0>)
 8005b3e:	701a      	strb	r2, [r3, #0]
			LOWER_PHOTO_Pin);

			if (low_photo) {
 8005b40:	4b6e      	ldr	r3, [pc, #440]	@ (8005cfc <update_homing_sequence+0x2a0>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00c      	beq.n	8005b64 <update_homing_sequence+0x108>
				// Already at low photo, skip moving down and go directly to delay
				motion_delay_timer = 0;
 8005b4a:	4b6a      	ldr	r3, [pc, #424]	@ (8005cf4 <update_homing_sequence+0x298>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 8005b50:	4b65      	ldr	r3, [pc, #404]	@ (8005ce8 <update_homing_sequence+0x28c>)
 8005b52:	2204      	movs	r2, #4
 8005b54:	701a      	strb	r2, [r3, #0]
				low_photo = false; // Reset flag
 8005b56:	4b69      	ldr	r3, [pc, #420]	@ (8005cfc <update_homing_sequence+0x2a0>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	701a      	strb	r2, [r3, #0]
				up_photo = false;  // Reset for next detection
 8005b5c:	4b68      	ldr	r3, [pc, #416]	@ (8005d00 <update_homing_sequence+0x2a4>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	701a      	strb	r2, [r3, #0]
			} else {
				// Not at low photo, need to move down
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
			}
		}
		break;
 8005b62:	e302      	b.n	800616a <update_homing_sequence+0x70e>
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
 8005b64:	4b60      	ldr	r3, [pc, #384]	@ (8005ce8 <update_homing_sequence+0x28c>)
 8005b66:	2203      	movs	r2, #3
 8005b68:	701a      	strb	r2, [r3, #0]
		break;
 8005b6a:	e2fe      	b.n	800616a <update_homing_sequence+0x70e>

	case HOMING_PRIS_DOWN_TO_LOW_PHOTO:
		// Move prismatic down at constant velocity
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 8005b6c:	4b5f      	ldr	r3, [pc, #380]	@ (8005cec <update_homing_sequence+0x290>)
 8005b6e:	edd3 7a07 	vldr	s15, [r3, #28]
 8005b72:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8005d04 <update_homing_sequence+0x2a8>
 8005b76:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
 8005b7a:	4b5c      	ldr	r3, [pc, #368]	@ (8005cec <update_homing_sequence+0x290>)
 8005b7c:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8005b80:	4b5a      	ldr	r3, [pc, #360]	@ (8005cec <update_homing_sequence+0x290>)
 8005b82:	edd3 7a06 	vldr	s15, [r3, #24]
 8005b86:	eeb0 0a67 	vmov.f32	s0, s15
 8005b8a:	485f      	ldr	r0, [pc, #380]	@ (8005d08 <update_homing_sequence+0x2ac>)
 8005b8c:	f7fb fb44 	bl	8001218 <PID_CONTROLLER_Compute>
 8005b90:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005b94:	4b5d      	ldr	r3, [pc, #372]	@ (8005d0c <update_homing_sequence+0x2b0>)
 8005b96:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	f7fa ff91 	bl	8000ac4 <__aeabi_d2iz>
 8005ba2:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005ba4:	4b59      	ldr	r3, [pc, #356]	@ (8005d0c <update_homing_sequence+0x2b0>)
 8005ba6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005baa:	613a      	str	r2, [r7, #16]
 8005bac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005bb0:	617b      	str	r3, [r7, #20]
		prismatic_axis.command_pos = PWM_Satuation(
 8005bb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005bb6:	f7fa ff85 	bl	8000ac4 <__aeabi_d2iz>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	eeb0 0a48 	vmov.f32	s0, s16
 8005bc4:	f7fb fac6 	bl	8001154 <PWM_Satuation>
 8005bc8:	ee07 0a90 	vmov	s15, r0
 8005bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bd0:	4b46      	ldr	r3, [pc, #280]	@ (8005cec <update_homing_sequence+0x290>)
 8005bd2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005bd6:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8005bda:	484d      	ldr	r0, [pc, #308]	@ (8005d10 <update_homing_sequence+0x2b4>)
 8005bdc:	f7fb fe38 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 8005be0:	eef0 7a40 	vmov.f32	s15, s0
 8005be4:	4b41      	ldr	r3, [pc, #260]	@ (8005cec <update_homing_sequence+0x290>)
 8005be6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005bea:	4b4a      	ldr	r3, [pc, #296]	@ (8005d14 <update_homing_sequence+0x2b8>)
 8005bec:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005bf0:	4b49      	ldr	r3, [pc, #292]	@ (8005d18 <update_homing_sequence+0x2bc>)
 8005bf2:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005bf6:	ed9f 6a49 	vldr	s12, [pc, #292]	@ 8005d1c <update_homing_sequence+0x2c0>
 8005bfa:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005bfe:	eeb0 1a66 	vmov.f32	s2, s13
 8005c02:	eddf 0a47 	vldr	s1, [pc, #284]	@ 8005d20 <update_homing_sequence+0x2c4>
 8005c06:	eeb0 0a47 	vmov.f32	s0, s14
 8005c0a:	4846      	ldr	r0, [pc, #280]	@ (8005d24 <update_homing_sequence+0x2c8>)
 8005c0c:	f7fb fec8 	bl	80019a0 <PRISMATIC_MOTOR_DFD_Compute>
 8005c10:	eef0 7a40 	vmov.f32	s15, s0
 8005c14:	4b35      	ldr	r3, [pc, #212]	@ (8005cec <update_homing_sequence+0x290>)
 8005c16:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005c1a:	4b34      	ldr	r3, [pc, #208]	@ (8005cec <update_homing_sequence+0x290>)
 8005c1c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005c20:	4b32      	ldr	r3, [pc, #200]	@ (8005cec <update_homing_sequence+0x290>)
 8005c22:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005c26:	4b31      	ldr	r3, [pc, #196]	@ (8005cec <update_homing_sequence+0x290>)
 8005c28:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005c2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c34:	4b2d      	ldr	r3, [pc, #180]	@ (8005cec <update_homing_sequence+0x290>)
 8005c36:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8005cec <update_homing_sequence+0x290>)
 8005c3c:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 8005c40:	4b32      	ldr	r3, [pc, #200]	@ (8005d0c <update_homing_sequence+0x2b0>)
 8005c42:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005c46:	4610      	mov	r0, r2
 8005c48:	4619      	mov	r1, r3
 8005c4a:	f7fa ff3b 	bl	8000ac4 <__aeabi_d2iz>
 8005c4e:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005c50:	4b2e      	ldr	r3, [pc, #184]	@ (8005d0c <update_homing_sequence+0x2b0>)
 8005c52:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005c56:	60ba      	str	r2, [r7, #8]
 8005c58:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005c5c:	60fb      	str	r3, [r7, #12]
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005c5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c62:	f7fa ff2f 	bl	8000ac4 <__aeabi_d2iz>
 8005c66:	4603      	mov	r3, r0
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	eeb0 0a48 	vmov.f32	s0, s16
 8005c70:	f7fb fa70 	bl	8001154 <PWM_Satuation>
 8005c74:	ee07 0a90 	vmov	s15, r0
 8005c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005cec <update_homing_sequence+0x290>)
 8005c7e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (low_photo) {
 8005c82:	4b1e      	ldr	r3, [pc, #120]	@ (8005cfc <update_homing_sequence+0x2a0>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 8270 	beq.w	800616e <update_homing_sequence+0x712>
			// Found low photo, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 8005c8e:	4b17      	ldr	r3, [pc, #92]	@ (8005cec <update_homing_sequence+0x290>)
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005c96:	4b16      	ldr	r3, [pc, #88]	@ (8005cf0 <update_homing_sequence+0x294>)
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005c9e:	4b15      	ldr	r3, [pc, #84]	@ (8005cf4 <update_homing_sequence+0x298>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 8005ca4:	4b10      	ldr	r3, [pc, #64]	@ (8005ce8 <update_homing_sequence+0x28c>)
 8005ca6:	2204      	movs	r2, #4
 8005ca8:	701a      	strb	r2, [r3, #0]
			low_photo = false; // Reset flag after use
 8005caa:	4b14      	ldr	r3, [pc, #80]	@ (8005cfc <update_homing_sequence+0x2a0>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	701a      	strb	r2, [r3, #0]
			up_photo = false;  // Reset for next detection
 8005cb0:	4b13      	ldr	r3, [pc, #76]	@ (8005d00 <update_homing_sequence+0x2a4>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005cb6:	e25a      	b.n	800616e <update_homing_sequence+0x712>

	case HOMING_DELAY_AFTER_LOW_PHOTO:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8005cec <update_homing_sequence+0x290>)
 8005cba:	f04f 0200 	mov.w	r2, #0
 8005cbe:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf0 <update_homing_sequence+0x294>)
 8005cc2:	f04f 0200 	mov.w	r2, #0
 8005cc6:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf4 <update_homing_sequence+0x298>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	4a09      	ldr	r2, [pc, #36]	@ (8005cf4 <update_homing_sequence+0x298>)
 8005cd0:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 150) {
 8005cd2:	4b08      	ldr	r3, [pc, #32]	@ (8005cf4 <update_homing_sequence+0x298>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b95      	cmp	r3, #149	@ 0x95
 8005cd8:	f240 824b 	bls.w	8006172 <update_homing_sequence+0x716>
			homing_state = HOMING_PRIS_UP_TO_UP_PHOTO;
 8005cdc:	4b02      	ldr	r3, [pc, #8]	@ (8005ce8 <update_homing_sequence+0x28c>)
 8005cde:	2205      	movs	r2, #5
 8005ce0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005ce2:	e246      	b.n	8006172 <update_homing_sequence+0x716>
 8005ce4:	200007ef 	.word	0x200007ef
 8005ce8:	200007ee 	.word	0x200007ee
 8005cec:	20000708 	.word	0x20000708
 8005cf0:	2000074c 	.word	0x2000074c
 8005cf4:	200007e4 	.word	0x200007e4
 8005cf8:	48000400 	.word	0x48000400
 8005cfc:	200007ed 	.word	0x200007ed
 8005d00:	200007ec 	.word	0x200007ec
 8005d04:	437a0000 	.word	0x437a0000
 8005d08:	20000a74 	.word	0x20000a74
 8005d0c:	20000080 	.word	0x20000080
 8005d10:	20000b14 	.word	0x20000b14
 8005d14:	200009f0 	.word	0x200009f0
 8005d18:	20000994 	.word	0x20000994
 8005d1c:	447a0000 	.word	0x447a0000
 8005d20:	00000000 	.word	0x00000000
 8005d24:	20000b18 	.word	0x20000b18

	case HOMING_PRIS_UP_TO_UP_PHOTO:
		// Move prismatic up at constant velocity
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 8005d28:	4ba7      	ldr	r3, [pc, #668]	@ (8005fc8 <update_homing_sequence+0x56c>)
 8005d2a:	edd3 7a07 	vldr	s15, [r3, #28]
 8005d2e:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8005fcc <update_homing_sequence+0x570>
 8005d32:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
 8005d36:	4ba4      	ldr	r3, [pc, #656]	@ (8005fc8 <update_homing_sequence+0x56c>)
 8005d38:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8005d3c:	4ba2      	ldr	r3, [pc, #648]	@ (8005fc8 <update_homing_sequence+0x56c>)
 8005d3e:	edd3 7a06 	vldr	s15, [r3, #24]
 8005d42:	eeb0 0a67 	vmov.f32	s0, s15
 8005d46:	48a2      	ldr	r0, [pc, #648]	@ (8005fd0 <update_homing_sequence+0x574>)
 8005d48:	f7fb fa66 	bl	8001218 <PID_CONTROLLER_Compute>
 8005d4c:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005d50:	4ba0      	ldr	r3, [pc, #640]	@ (8005fd4 <update_homing_sequence+0x578>)
 8005d52:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005d56:	4610      	mov	r0, r2
 8005d58:	4619      	mov	r1, r3
 8005d5a:	f7fa feb3 	bl	8000ac4 <__aeabi_d2iz>
 8005d5e:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005d60:	4b9c      	ldr	r3, [pc, #624]	@ (8005fd4 <update_homing_sequence+0x578>)
 8005d62:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005d66:	603a      	str	r2, [r7, #0]
 8005d68:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005d6c:	607b      	str	r3, [r7, #4]
		prismatic_axis.command_pos = PWM_Satuation(
 8005d6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d72:	f7fa fea7 	bl	8000ac4 <__aeabi_d2iz>
 8005d76:	4603      	mov	r3, r0
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	eeb0 0a48 	vmov.f32	s0, s16
 8005d80:	f7fb f9e8 	bl	8001154 <PWM_Satuation>
 8005d84:	ee07 0a90 	vmov	s15, r0
 8005d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d8c:	4b8e      	ldr	r3, [pc, #568]	@ (8005fc8 <update_homing_sequence+0x56c>)
 8005d8e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005d92:	eebd 0a00 	vmov.f32	s0, #208	@ 0xbe800000 -0.250
 8005d96:	4890      	ldr	r0, [pc, #576]	@ (8005fd8 <update_homing_sequence+0x57c>)
 8005d98:	f7fb fd5a 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 8005d9c:	eef0 7a40 	vmov.f32	s15, s0
 8005da0:	4b89      	ldr	r3, [pc, #548]	@ (8005fc8 <update_homing_sequence+0x56c>)
 8005da2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005da6:	4b8d      	ldr	r3, [pc, #564]	@ (8005fdc <update_homing_sequence+0x580>)
 8005da8:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005dac:	4b8c      	ldr	r3, [pc, #560]	@ (8005fe0 <update_homing_sequence+0x584>)
 8005dae:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005db2:	ed9f 6a8c 	vldr	s12, [pc, #560]	@ 8005fe4 <update_homing_sequence+0x588>
 8005db6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005dba:	eeb0 1a66 	vmov.f32	s2, s13
 8005dbe:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 8005fe8 <update_homing_sequence+0x58c>
 8005dc2:	eeb0 0a47 	vmov.f32	s0, s14
 8005dc6:	4889      	ldr	r0, [pc, #548]	@ (8005fec <update_homing_sequence+0x590>)
 8005dc8:	f7fb fdea 	bl	80019a0 <PRISMATIC_MOTOR_DFD_Compute>
 8005dcc:	eef0 7a40 	vmov.f32	s15, s0
 8005dd0:	4b7d      	ldr	r3, [pc, #500]	@ (8005fc8 <update_homing_sequence+0x56c>)
 8005dd2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005dd6:	4b7c      	ldr	r3, [pc, #496]	@ (8005fc8 <update_homing_sequence+0x56c>)
 8005dd8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005ddc:	4b7a      	ldr	r3, [pc, #488]	@ (8005fc8 <update_homing_sequence+0x56c>)
 8005dde:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005de2:	4b79      	ldr	r3, [pc, #484]	@ (8005fc8 <update_homing_sequence+0x56c>)
 8005de4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005de8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005df0:	4b75      	ldr	r3, [pc, #468]	@ (8005fc8 <update_homing_sequence+0x56c>)
 8005df2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005df6:	4b74      	ldr	r3, [pc, #464]	@ (8005fc8 <update_homing_sequence+0x56c>)
 8005df8:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 8005dfc:	4b75      	ldr	r3, [pc, #468]	@ (8005fd4 <update_homing_sequence+0x578>)
 8005dfe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005e02:	4610      	mov	r0, r2
 8005e04:	4619      	mov	r1, r3
 8005e06:	f7fa fe5d 	bl	8000ac4 <__aeabi_d2iz>
 8005e0a:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005e0c:	4b71      	ldr	r3, [pc, #452]	@ (8005fd4 <update_homing_sequence+0x578>)
 8005e0e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005e12:	4615      	mov	r5, r2
 8005e14:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005e18:	4628      	mov	r0, r5
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	f7fa fe52 	bl	8000ac4 <__aeabi_d2iz>
 8005e20:	4603      	mov	r3, r0
 8005e22:	4619      	mov	r1, r3
 8005e24:	4620      	mov	r0, r4
 8005e26:	eeb0 0a48 	vmov.f32	s0, s16
 8005e2a:	f7fb f993 	bl	8001154 <PWM_Satuation>
 8005e2e:	ee07 0a90 	vmov	s15, r0
 8005e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e36:	4b64      	ldr	r3, [pc, #400]	@ (8005fc8 <update_homing_sequence+0x56c>)
 8005e38:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (up_photo) {
 8005e3c:	4b6c      	ldr	r3, [pc, #432]	@ (8005ff0 <update_homing_sequence+0x594>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 8197 	beq.w	8006176 <update_homing_sequence+0x71a>
			// Found up photo, stop and start delay before backup
			prismatic_axis.command_pos = 0.0f;
 8005e48:	4b5f      	ldr	r3, [pc, #380]	@ (8005fc8 <update_homing_sequence+0x56c>)
 8005e4a:	f04f 0200 	mov.w	r2, #0
 8005e4e:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005e50:	4b68      	ldr	r3, [pc, #416]	@ (8005ff4 <update_homing_sequence+0x598>)
 8005e52:	f04f 0200 	mov.w	r2, #0
 8005e56:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005e58:	4b67      	ldr	r3, [pc, #412]	@ (8005ff8 <update_homing_sequence+0x59c>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_UP_PHOTO;
 8005e5e:	4b67      	ldr	r3, [pc, #412]	@ (8005ffc <update_homing_sequence+0x5a0>)
 8005e60:	2206      	movs	r2, #6
 8005e62:	701a      	strb	r2, [r3, #0]
			up_photo = false; // Reset flag after use
 8005e64:	4b62      	ldr	r3, [pc, #392]	@ (8005ff0 <update_homing_sequence+0x594>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005e6a:	e184      	b.n	8006176 <update_homing_sequence+0x71a>

	case HOMING_DELAY_AFTER_UP_PHOTO:
		// Stop motors and wait before starting backup procedure
		prismatic_axis.command_pos = 0.0f;
 8005e6c:	4b56      	ldr	r3, [pc, #344]	@ (8005fc8 <update_homing_sequence+0x56c>)
 8005e6e:	f04f 0200 	mov.w	r2, #0
 8005e72:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005e74:	4b5f      	ldr	r3, [pc, #380]	@ (8005ff4 <update_homing_sequence+0x598>)
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005e7c:	4b5e      	ldr	r3, [pc, #376]	@ (8005ff8 <update_homing_sequence+0x59c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3301      	adds	r3, #1
 8005e82:	4a5d      	ldr	r2, [pc, #372]	@ (8005ff8 <update_homing_sequence+0x59c>)
 8005e84:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 150) {
 8005e86:	4b5c      	ldr	r3, [pc, #368]	@ (8005ff8 <update_homing_sequence+0x59c>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b95      	cmp	r3, #149	@ 0x95
 8005e8c:	f240 8175 	bls.w	800617a <update_homing_sequence+0x71e>
			if (first_startup) {
 8005e90:	4b5b      	ldr	r3, [pc, #364]	@ (8006000 <update_homing_sequence+0x5a4>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d01d      	beq.n	8005ed4 <update_homing_sequence+0x478>
				// STARTUP: Check if prox is already detected before searching
				bool prox_detected = HAL_GPIO_ReadPin(prox_GPIO_Port, prox_Pin);
 8005e98:	2120      	movs	r1, #32
 8005e9a:	485a      	ldr	r0, [pc, #360]	@ (8006004 <update_homing_sequence+0x5a8>)
 8005e9c:	f007 faa6 	bl	800d3ec <HAL_GPIO_ReadPin>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	bf14      	ite	ne
 8005ea6:	2301      	movne	r3, #1
 8005ea8:	2300      	moveq	r3, #0
 8005eaa:	76fb      	strb	r3, [r7, #27]

				if (prox_detected) {
 8005eac:	7efb      	ldrb	r3, [r7, #27]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d009      	beq.n	8005ec6 <update_homing_sequence+0x46a>
					// Already at prox - skip search and go to completion
					motion_delay_timer = 0;
 8005eb2:	4b51      	ldr	r3, [pc, #324]	@ (8005ff8 <update_homing_sequence+0x59c>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]
					homing_state = HOMING_DELAY_AFTER_PROX;
 8005eb8:	4b50      	ldr	r3, [pc, #320]	@ (8005ffc <update_homing_sequence+0x5a0>)
 8005eba:	220a      	movs	r2, #10
 8005ebc:	701a      	strb	r2, [r3, #0]
					prox_count = 1; // Set count to indicate prox found
 8005ebe:	4b52      	ldr	r3, [pc, #328]	@ (8006008 <update_homing_sequence+0x5ac>)
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_REV_TO_ZERO_DEG;
				// Initialize trajectory variables for zero degree movement
				rev_to_zero_trajectory_started = false;
			}
		}
		break;
 8005ec4:	e159      	b.n	800617a <update_homing_sequence+0x71e>
					homing_state = HOMING_REV_CW_TO_PROX1;
 8005ec6:	4b4d      	ldr	r3, [pc, #308]	@ (8005ffc <update_homing_sequence+0x5a0>)
 8005ec8:	2209      	movs	r2, #9
 8005eca:	701a      	strb	r2, [r3, #0]
					prox_count = 0; // Reset prox counter
 8005ecc:	4b4e      	ldr	r3, [pc, #312]	@ (8006008 <update_homing_sequence+0x5ac>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	601a      	str	r2, [r3, #0]
		break;
 8005ed2:	e152      	b.n	800617a <update_homing_sequence+0x71e>
				homing_state = HOMING_REV_TO_ZERO_DEG;
 8005ed4:	4b49      	ldr	r3, [pc, #292]	@ (8005ffc <update_homing_sequence+0x5a0>)
 8005ed6:	2207      	movs	r2, #7
 8005ed8:	701a      	strb	r2, [r3, #0]
				rev_to_zero_trajectory_started = false;
 8005eda:	4b4c      	ldr	r3, [pc, #304]	@ (800600c <update_homing_sequence+0x5b0>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	701a      	strb	r2, [r3, #0]
		break;
 8005ee0:	e14b      	b.n	800617a <update_homing_sequence+0x71e>

	case HOMING_REV_TO_ZERO_DEG:
		if (!rev_to_zero_trajectory_started) {
 8005ee2:	4b4a      	ldr	r3, [pc, #296]	@ (800600c <update_homing_sequence+0x5b0>)
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	f083 0301 	eor.w	r3, r3, #1
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d02f      	beq.n	8005f50 <update_homing_sequence+0x4f4>
			// Get current prismatic position (keep it where it is)
			float current_pris_pos = prismatic_encoder.mm;
 8005ef0:	4b3b      	ldr	r3, [pc, #236]	@ (8005fe0 <update_homing_sequence+0x584>)
 8005ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ef4:	623b      	str	r3, [r7, #32]
			float current_rev_deg = normalize_angle(revolute_encoder.rads)
 8005ef6:	4b39      	ldr	r3, [pc, #228]	@ (8005fdc <update_homing_sequence+0x580>)
 8005ef8:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005efc:	eeb0 0a67 	vmov.f32	s0, s15
 8005f00:	f000 f95c 	bl	80061bc <normalize_angle>
 8005f04:	eef0 7a40 	vmov.f32	s15, s0
					* 180.0f / PI;
 8005f08:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8006010 <update_homing_sequence+0x5b4>
 8005f0c:	ee27 7a87 	vmul.f32	s14, s15, s14
			float current_rev_deg = normalize_angle(revolute_encoder.rads)
 8005f10:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8006014 <update_homing_sequence+0x5b8>
 8005f14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f18:	edc7 7a07 	vstr	s15, [r7, #28]

			check[0] = (int) current_rev_deg;
 8005f1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8005f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f24:	ee17 2a90 	vmov	r2, s15
 8005f28:	4b3b      	ldr	r3, [pc, #236]	@ (8006018 <update_homing_sequence+0x5bc>)
 8005f2a:	601a      	str	r2, [r3, #0]
			check[1] = (int) movement_deg;
 8005f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800601c <update_homing_sequence+0x5c0>)
 8005f2e:	edd3 7a00 	vldr	s15, [r3]
 8005f32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f36:	ee17 2a90 	vmov	r2, s15
 8005f3a:	4b37      	ldr	r3, [pc, #220]	@ (8006018 <update_homing_sequence+0x5bc>)
 8005f3c:	605a      	str	r2, [r3, #4]

			// Start combined trajectory to move revolute to 0° while keeping prismatic position
			start_combined_trajectory(0.0, 0.0);
 8005f3e:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8005fe8 <update_homing_sequence+0x58c>
 8005f42:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8005fe8 <update_homing_sequence+0x58c>
 8005f46:	f000 faad 	bl	80064a4 <start_combined_trajectory>

			rev_to_zero_trajectory_started = true;
 8005f4a:	4b30      	ldr	r3, [pc, #192]	@ (800600c <update_homing_sequence+0x5b0>)
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	701a      	strb	r2, [r3, #0]
		}

		// Wait for trajectory to complete
		if (motion_sequence_state == MOTION_IDLE) {
 8005f50:	4b33      	ldr	r3, [pc, #204]	@ (8006020 <update_homing_sequence+0x5c4>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f040 8112 	bne.w	800617e <update_homing_sequence+0x722>
			// Trajectory completed, move to next homing state
			motion_delay_timer = 0;
 8005f5a:	4b27      	ldr	r3, [pc, #156]	@ (8005ff8 <update_homing_sequence+0x59c>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_ZERO_DEG;
 8005f60:	4b26      	ldr	r3, [pc, #152]	@ (8005ffc <update_homing_sequence+0x5a0>)
 8005f62:	2208      	movs	r2, #8
 8005f64:	701a      	strb	r2, [r3, #0]
			prox_count = 0; // Reset prox counter for next stage
 8005f66:	4b28      	ldr	r3, [pc, #160]	@ (8006008 <update_homing_sequence+0x5ac>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]
			rev_to_zero_trajectory_started = false; // Reset for next time
 8005f6c:	4b27      	ldr	r3, [pc, #156]	@ (800600c <update_homing_sequence+0x5b0>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005f72:	e104      	b.n	800617e <update_homing_sequence+0x722>

	case HOMING_DELAY_AFTER_ZERO_DEG:
		// Stop motors and wait - let normal control handle this
		motion_delay_timer++;
 8005f74:	4b20      	ldr	r3, [pc, #128]	@ (8005ff8 <update_homing_sequence+0x59c>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ff8 <update_homing_sequence+0x59c>)
 8005f7c:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 150) {
 8005f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ff8 <update_homing_sequence+0x59c>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b95      	cmp	r3, #149	@ 0x95
 8005f84:	f240 80fd 	bls.w	8006182 <update_homing_sequence+0x726>
			// CHECK IF PROX IS ALREADY DETECTED BEFORE STARTING SEARCH
			bool prox_detected = HAL_GPIO_ReadPin(prox_GPIO_Port, prox_Pin);
 8005f88:	2120      	movs	r1, #32
 8005f8a:	481e      	ldr	r0, [pc, #120]	@ (8006004 <update_homing_sequence+0x5a8>)
 8005f8c:	f007 fa2e 	bl	800d3ec <HAL_GPIO_ReadPin>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	bf14      	ite	ne
 8005f96:	2301      	movne	r3, #1
 8005f98:	2300      	moveq	r3, #0
 8005f9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			if (prox_detected) {
 8005f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d009      	beq.n	8005fba <update_homing_sequence+0x55e>
				// Already at proximity sensor - skip search and go directly to completion
				motion_delay_timer = 0;
 8005fa6:	4b14      	ldr	r3, [pc, #80]	@ (8005ff8 <update_homing_sequence+0x59c>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_PROX;
 8005fac:	4b13      	ldr	r3, [pc, #76]	@ (8005ffc <update_homing_sequence+0x5a0>)
 8005fae:	220a      	movs	r2, #10
 8005fb0:	701a      	strb	r2, [r3, #0]
				prox_count = 1; // Set count to indicate prox found
 8005fb2:	4b15      	ldr	r3, [pc, #84]	@ (8006008 <update_homing_sequence+0x5ac>)
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]
				// Not at prox - need to search for it
				homing_state = HOMING_REV_CW_TO_PROX1;
				prox_count = 0; // Reset counter for search
			}
		}
		break;
 8005fb8:	e0e3      	b.n	8006182 <update_homing_sequence+0x726>
				homing_state = HOMING_REV_CW_TO_PROX1;
 8005fba:	4b10      	ldr	r3, [pc, #64]	@ (8005ffc <update_homing_sequence+0x5a0>)
 8005fbc:	2209      	movs	r2, #9
 8005fbe:	701a      	strb	r2, [r3, #0]
				prox_count = 0; // Reset counter for search
 8005fc0:	4b11      	ldr	r3, [pc, #68]	@ (8006008 <update_homing_sequence+0x5ac>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	601a      	str	r2, [r3, #0]
		break;
 8005fc6:	e0dc      	b.n	8006182 <update_homing_sequence+0x726>
 8005fc8:	20000708 	.word	0x20000708
 8005fcc:	c37a0000 	.word	0xc37a0000
 8005fd0:	20000a74 	.word	0x20000a74
 8005fd4:	20000080 	.word	0x20000080
 8005fd8:	20000b14 	.word	0x20000b14
 8005fdc:	200009f0 	.word	0x200009f0
 8005fe0:	20000994 	.word	0x20000994
 8005fe4:	447a0000 	.word	0x447a0000
 8005fe8:	00000000 	.word	0x00000000
 8005fec:	20000b18 	.word	0x20000b18
 8005ff0:	200007ec 	.word	0x200007ec
 8005ff4:	2000074c 	.word	0x2000074c
 8005ff8:	200007e4 	.word	0x200007e4
 8005ffc:	200007ee 	.word	0x200007ee
 8006000:	20000333 	.word	0x20000333
 8006004:	48000400 	.word	0x48000400
 8006008:	200007e8 	.word	0x200007e8
 800600c:	200007fa 	.word	0x200007fa
 8006010:	43340000 	.word	0x43340000
 8006014:	40490fdb 	.word	0x40490fdb
 8006018:	20000870 	.word	0x20000870
 800601c:	20000804 	.word	0x20000804
 8006020:	20000790 	.word	0x20000790

	case HOMING_REV_CW_TO_PROX1:
		// Move revolute clockwise with velocity control until prox count = 1
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
				- revolute_axis.kalman_velocity;
 8006024:	4b5c      	ldr	r3, [pc, #368]	@ (8006198 <update_homing_sequence+0x73c>)
 8006026:	edd3 7a07 	vldr	s15, [r3, #28]
 800602a:	eebf 7a08 	vmov.f32	s14, #248	@ 0xbfc00000 -1.5
 800602e:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
 8006032:	4b59      	ldr	r3, [pc, #356]	@ (8006198 <update_homing_sequence+0x73c>)
 8006034:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 8006038:	4b57      	ldr	r3, [pc, #348]	@ (8006198 <update_homing_sequence+0x73c>)
 800603a:	edd3 7a06 	vldr	s15, [r3, #24]
 800603e:	eeb0 0a67 	vmov.f32	s0, s15
 8006042:	4856      	ldr	r0, [pc, #344]	@ (800619c <update_homing_sequence+0x740>)
 8006044:	f7fb f8e8 	bl	8001218 <PID_CONTROLLER_Compute>
 8006048:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 800604c:	4b54      	ldr	r3, [pc, #336]	@ (80061a0 <update_homing_sequence+0x744>)
 800604e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 8006052:	4610      	mov	r0, r2
 8006054:	4619      	mov	r1, r3
 8006056:	f7fa fd35 	bl	8000ac4 <__aeabi_d2iz>
 800605a:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 800605c:	4b50      	ldr	r3, [pc, #320]	@ (80061a0 <update_homing_sequence+0x744>)
 800605e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006062:	4692      	mov	sl, r2
 8006064:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(
 8006068:	4650      	mov	r0, sl
 800606a:	4659      	mov	r1, fp
 800606c:	f7fa fd2a 	bl	8000ac4 <__aeabi_d2iz>
 8006070:	4603      	mov	r3, r0
 8006072:	4619      	mov	r1, r3
 8006074:	4620      	mov	r0, r4
 8006076:	eeb0 0a48 	vmov.f32	s0, s16
 800607a:	f7fb f86b 	bl	8001154 <PWM_Satuation>
 800607e:	ee07 0a90 	vmov	s15, r0
 8006082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006086:	4b44      	ldr	r3, [pc, #272]	@ (8006198 <update_homing_sequence+0x73c>)
 8006088:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 800608c:	eebf 0a08 	vmov.f32	s0, #248	@ 0xbfc00000 -1.5
 8006090:	4844      	ldr	r0, [pc, #272]	@ (80061a4 <update_homing_sequence+0x748>)
 8006092:	f7fb fa5f 	bl	8001554 <REVOLUTE_MOTOR_FFD_Compute>
 8006096:	eef0 7a40 	vmov.f32	s15, s0
 800609a:	4b3f      	ldr	r3, [pc, #252]	@ (8006198 <update_homing_sequence+0x73c>)
 800609c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_REV_VELOCITY);
		revolute_axis.dfd = 0.0;
 80060a0:	4b3d      	ldr	r3, [pc, #244]	@ (8006198 <update_homing_sequence+0x73c>)
 80060a2:	f04f 0200 	mov.w	r2, #0
 80060a6:	62da      	str	r2, [r3, #44]	@ 0x2c

		revolute_axis.command_pos += revolute_axis.ffd;
 80060a8:	4b3b      	ldr	r3, [pc, #236]	@ (8006198 <update_homing_sequence+0x73c>)
 80060aa:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80060ae:	4b3a      	ldr	r3, [pc, #232]	@ (8006198 <update_homing_sequence+0x73c>)
 80060b0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80060b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060b8:	4b37      	ldr	r3, [pc, #220]	@ (8006198 <update_homing_sequence+0x73c>)
 80060ba:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80060be:	4b36      	ldr	r3, [pc, #216]	@ (8006198 <update_homing_sequence+0x73c>)
 80060c0:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_150RPM_Constant.U_max,
 80060c4:	4b36      	ldr	r3, [pc, #216]	@ (80061a0 <update_homing_sequence+0x744>)
 80060c6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80060ca:	4610      	mov	r0, r2
 80060cc:	4619      	mov	r1, r3
 80060ce:	f7fa fcf9 	bl	8000ac4 <__aeabi_d2iz>
 80060d2:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 80060d4:	4b32      	ldr	r3, [pc, #200]	@ (80061a0 <update_homing_sequence+0x744>)
 80060d6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80060da:	4690      	mov	r8, r2
 80060dc:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80060e0:	4640      	mov	r0, r8
 80060e2:	4649      	mov	r1, r9
 80060e4:	f7fa fcee 	bl	8000ac4 <__aeabi_d2iz>
 80060e8:	4603      	mov	r3, r0
 80060ea:	4619      	mov	r1, r3
 80060ec:	4620      	mov	r0, r4
 80060ee:	eeb0 0a48 	vmov.f32	s0, s16
 80060f2:	f7fb f82f 	bl	8001154 <PWM_Satuation>
 80060f6:	ee07 0a90 	vmov	s15, r0
 80060fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060fe:	4b26      	ldr	r3, [pc, #152]	@ (8006198 <update_homing_sequence+0x73c>)
 8006100:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (prox_count >= 1) {
 8006104:	4b28      	ldr	r3, [pc, #160]	@ (80061a8 <update_homing_sequence+0x74c>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d03c      	beq.n	8006186 <update_homing_sequence+0x72a>
			// Found prox sensor, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 800610c:	4b27      	ldr	r3, [pc, #156]	@ (80061ac <update_homing_sequence+0x750>)
 800610e:	f04f 0200 	mov.w	r2, #0
 8006112:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8006114:	4b20      	ldr	r3, [pc, #128]	@ (8006198 <update_homing_sequence+0x73c>)
 8006116:	f04f 0200 	mov.w	r2, #0
 800611a:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 800611c:	4b24      	ldr	r3, [pc, #144]	@ (80061b0 <update_homing_sequence+0x754>)
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_PROX;
 8006122:	4b24      	ldr	r3, [pc, #144]	@ (80061b4 <update_homing_sequence+0x758>)
 8006124:	220a      	movs	r2, #10
 8006126:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006128:	e02d      	b.n	8006186 <update_homing_sequence+0x72a>

	case HOMING_DELAY_AFTER_PROX:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 800612a:	4b20      	ldr	r3, [pc, #128]	@ (80061ac <update_homing_sequence+0x750>)
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8006132:	4b19      	ldr	r3, [pc, #100]	@ (8006198 <update_homing_sequence+0x73c>)
 8006134:	f04f 0200 	mov.w	r2, #0
 8006138:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 800613a:	4b1d      	ldr	r3, [pc, #116]	@ (80061b0 <update_homing_sequence+0x754>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3301      	adds	r3, #1
 8006140:	4a1b      	ldr	r2, [pc, #108]	@ (80061b0 <update_homing_sequence+0x754>)
 8006142:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 150) {
 8006144:	4b1a      	ldr	r3, [pc, #104]	@ (80061b0 <update_homing_sequence+0x754>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b95      	cmp	r3, #149	@ 0x95
 800614a:	d91e      	bls.n	800618a <update_homing_sequence+0x72e>
			homing_state = HOMING_COMPLETE;
 800614c:	4b19      	ldr	r3, [pc, #100]	@ (80061b4 <update_homing_sequence+0x758>)
 800614e:	220b      	movs	r2, #11
 8006150:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006152:	e01a      	b.n	800618a <update_homing_sequence+0x72e>

	case HOMING_COMPLETE:
		check[5]++;
 8006154:	4b18      	ldr	r3, [pc, #96]	@ (80061b8 <update_homing_sequence+0x75c>)
 8006156:	695b      	ldr	r3, [r3, #20]
 8006158:	3301      	adds	r3, #1
 800615a:	4a17      	ldr	r2, [pc, #92]	@ (80061b8 <update_homing_sequence+0x75c>)
 800615c:	6153      	str	r3, [r2, #20]
		NVIC_SystemReset();
 800615e:	f7ff fac3 	bl	80056e8 <__NVIC_SystemReset>
		return;
 8006162:	bf00      	nop
 8006164:	e012      	b.n	800618c <update_homing_sequence+0x730>
		break;

	case HOMING_IDLE:
	default:
		break;
 8006166:	bf00      	nop
 8006168:	e010      	b.n	800618c <update_homing_sequence+0x730>
		break;
 800616a:	bf00      	nop
 800616c:	e00e      	b.n	800618c <update_homing_sequence+0x730>
		break;
 800616e:	bf00      	nop
 8006170:	e00c      	b.n	800618c <update_homing_sequence+0x730>
		break;
 8006172:	bf00      	nop
 8006174:	e00a      	b.n	800618c <update_homing_sequence+0x730>
		break;
 8006176:	bf00      	nop
 8006178:	e008      	b.n	800618c <update_homing_sequence+0x730>
		break;
 800617a:	bf00      	nop
 800617c:	e006      	b.n	800618c <update_homing_sequence+0x730>
		break;
 800617e:	bf00      	nop
 8006180:	e004      	b.n	800618c <update_homing_sequence+0x730>
		break;
 8006182:	bf00      	nop
 8006184:	e002      	b.n	800618c <update_homing_sequence+0x730>
		break;
 8006186:	bf00      	nop
 8006188:	e000      	b.n	800618c <update_homing_sequence+0x730>
		break;
 800618a:	bf00      	nop
	}
}
 800618c:	372c      	adds	r7, #44	@ 0x2c
 800618e:	46bd      	mov	sp, r7
 8006190:	ecbd 8b02 	vpop	{d8}
 8006194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006198:	2000074c 	.word	0x2000074c
 800619c:	20000ac4 	.word	0x20000ac4
 80061a0:	20000000 	.word	0x20000000
 80061a4:	20000b20 	.word	0x20000b20
 80061a8:	200007e8 	.word	0x200007e8
 80061ac:	20000708 	.word	0x20000708
 80061b0:	200007e4 	.word	0x200007e4
 80061b4:	200007ee 	.word	0x200007ee
 80061b8:	20000870 	.word	0x20000870

080061bc <normalize_angle>:

float normalize_angle(float angle_rad) {
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	ed87 0a01 	vstr	s0, [r7, #4]
	float result = fmodf(angle_rad, 2.0f * PI);
 80061c6:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8006204 <normalize_angle+0x48>
 80061ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80061ce:	f00d f83f 	bl	8013250 <fmodf>
 80061d2:	ed87 0a03 	vstr	s0, [r7, #12]
	if (result < 0.0f) {
 80061d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80061da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e2:	d507      	bpl.n	80061f4 <normalize_angle+0x38>
		result += 2.0f * PI;
 80061e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80061e8:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8006204 <normalize_angle+0x48>
 80061ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061f0:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return result;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	ee07 3a90 	vmov	s15, r3
}
 80061fa:	eeb0 0a67 	vmov.f32	s0, s15
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	40c90fdb 	.word	0x40c90fdb

08006208 <calculate_movement_deg>:

float calculate_movement_deg(float current_deg, float target_deg) {
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	ed87 0a01 	vstr	s0, [r7, #4]
 8006212:	edc7 0a00 	vstr	s1, [r7]
	float movement = 0.0f;
 8006216:	f04f 0300 	mov.w	r3, #0
 800621a:	60fb      	str	r3, [r7, #12]

	// Validate inputs
	if (!isfinite(current_deg) || !isfinite(target_deg)) {
 800621c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006220:	eef0 7ae7 	vabs.f32	s15, s15
 8006224:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8006484 <calculate_movement_deg+0x27c>
 8006228:	eef4 7a47 	vcmp.f32	s15, s14
 800622c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006230:	d80a      	bhi.n	8006248 <calculate_movement_deg+0x40>
 8006232:	edd7 7a00 	vldr	s15, [r7]
 8006236:	eef0 7ae7 	vabs.f32	s15, s15
 800623a:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 8006484 <calculate_movement_deg+0x27c>
 800623e:	eef4 7a47 	vcmp.f32	s15, s14
 8006242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006246:	d902      	bls.n	800624e <calculate_movement_deg+0x46>
		return 0.0f;
 8006248:	f04f 0300 	mov.w	r3, #0
 800624c:	e111      	b.n	8006472 <calculate_movement_deg+0x26a>
	}

	// Normalize angles to 0-360 range
	while (current_deg < 0.0f)
 800624e:	e007      	b.n	8006260 <calculate_movement_deg+0x58>
		current_deg += 360.0f;
 8006250:	edd7 7a01 	vldr	s15, [r7, #4]
 8006254:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8006488 <calculate_movement_deg+0x280>
 8006258:	ee77 7a87 	vadd.f32	s15, s15, s14
 800625c:	edc7 7a01 	vstr	s15, [r7, #4]
	while (current_deg < 0.0f)
 8006260:	edd7 7a01 	vldr	s15, [r7, #4]
 8006264:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800626c:	d4f0      	bmi.n	8006250 <calculate_movement_deg+0x48>
	while (current_deg >= 360.0f)
 800626e:	e007      	b.n	8006280 <calculate_movement_deg+0x78>
		current_deg -= 360.0f;
 8006270:	edd7 7a01 	vldr	s15, [r7, #4]
 8006274:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8006488 <calculate_movement_deg+0x280>
 8006278:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800627c:	edc7 7a01 	vstr	s15, [r7, #4]
	while (current_deg >= 360.0f)
 8006280:	edd7 7a01 	vldr	s15, [r7, #4]
 8006284:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8006488 <calculate_movement_deg+0x280>
 8006288:	eef4 7ac7 	vcmpe.f32	s15, s14
 800628c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006290:	daee      	bge.n	8006270 <calculate_movement_deg+0x68>
	while (target_deg < 0.0f)
 8006292:	e007      	b.n	80062a4 <calculate_movement_deg+0x9c>
		target_deg += 360.0f;
 8006294:	edd7 7a00 	vldr	s15, [r7]
 8006298:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8006488 <calculate_movement_deg+0x280>
 800629c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062a0:	edc7 7a00 	vstr	s15, [r7]
	while (target_deg < 0.0f)
 80062a4:	edd7 7a00 	vldr	s15, [r7]
 80062a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80062ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062b0:	d4f0      	bmi.n	8006294 <calculate_movement_deg+0x8c>
	while (target_deg >= 360.0f)
 80062b2:	e007      	b.n	80062c4 <calculate_movement_deg+0xbc>
		target_deg -= 360.0f;
 80062b4:	edd7 7a00 	vldr	s15, [r7]
 80062b8:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8006488 <calculate_movement_deg+0x280>
 80062bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80062c0:	edc7 7a00 	vstr	s15, [r7]
	while (target_deg >= 360.0f)
 80062c4:	edd7 7a00 	vldr	s15, [r7]
 80062c8:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8006488 <calculate_movement_deg+0x280>
 80062cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d4:	daee      	bge.n	80062b4 <calculate_movement_deg+0xac>

	// If both angles are on the same side of 180°
	if ((current_deg < 180.0f && target_deg < 180.0f)
 80062d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80062da:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 800648c <calculate_movement_deg+0x284>
 80062de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062e6:	d508      	bpl.n	80062fa <calculate_movement_deg+0xf2>
 80062e8:	edd7 7a00 	vldr	s15, [r7]
 80062ec:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 800648c <calculate_movement_deg+0x284>
 80062f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062f8:	d411      	bmi.n	800631e <calculate_movement_deg+0x116>
			|| (current_deg >= 180.0f && target_deg >= 180.0f)) {
 80062fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80062fe:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 800648c <calculate_movement_deg+0x284>
 8006302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800630a:	db33      	blt.n	8006374 <calculate_movement_deg+0x16c>
 800630c:	edd7 7a00 	vldr	s15, [r7]
 8006310:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 800648c <calculate_movement_deg+0x284>
 8006314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800631c:	db2a      	blt.n	8006374 <calculate_movement_deg+0x16c>
		// Simple case - take shortest path
		movement = target_deg - current_deg;
 800631e:	ed97 7a00 	vldr	s14, [r7]
 8006322:	edd7 7a01 	vldr	s15, [r7, #4]
 8006326:	ee77 7a67 	vsub.f32	s15, s14, s15
 800632a:	edc7 7a03 	vstr	s15, [r7, #12]

		// Ensure shortest path
		if (movement > 180.0f)
 800632e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006332:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 800648c <calculate_movement_deg+0x284>
 8006336:	eef4 7ac7 	vcmpe.f32	s15, s14
 800633a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800633e:	dd07      	ble.n	8006350 <calculate_movement_deg+0x148>
			movement -= 360.0f;
 8006340:	edd7 7a03 	vldr	s15, [r7, #12]
 8006344:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8006488 <calculate_movement_deg+0x280>
 8006348:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800634c:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8006350:	edd7 7a03 	vldr	s15, [r7, #12]
 8006354:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8006490 <calculate_movement_deg+0x288>
 8006358:	eef4 7ac7 	vcmpe.f32	s15, s14
 800635c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006360:	d562      	bpl.n	8006428 <calculate_movement_deg+0x220>
			movement += 360.0f;
 8006362:	edd7 7a03 	vldr	s15, [r7, #12]
 8006366:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8006488 <calculate_movement_deg+0x280>
 800636a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800636e:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8006372:	e059      	b.n	8006428 <calculate_movement_deg+0x220>
	}
	// If we need to cross the 180° boundary
	else {
		// If we need to cross the 180° boundary
		if (current_deg < 180.0f) {
 8006374:	edd7 7a01 	vldr	s15, [r7, #4]
 8006378:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800648c <calculate_movement_deg+0x284>
 800637c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006384:	d52a      	bpl.n	80063dc <calculate_movement_deg+0x1d4>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180.0f) {
 8006386:	edd7 7a00 	vldr	s15, [r7]
 800638a:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 800648c <calculate_movement_deg+0x284>
 800638e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006392:	ed97 7a01 	vldr	s14, [r7, #4]
 8006396:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800639a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800639e:	d50e      	bpl.n	80063be <calculate_movement_deg+0x1b6>
				movement = -(current_deg + (360.0f - target_deg)); // Negative = clockwise
 80063a0:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8006488 <calculate_movement_deg+0x280>
 80063a4:	edd7 7a00 	vldr	s15, [r7]
 80063a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80063ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80063b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063b4:	eef1 7a67 	vneg.f32	s15, s15
 80063b8:	edc7 7a03 	vstr	s15, [r7, #12]
 80063bc:	e034      	b.n	8006428 <calculate_movement_deg+0x220>
			} else {
				movement = -(current_deg - target_deg + 360.0f); // Negative = clockwise
 80063be:	ed97 7a01 	vldr	s14, [r7, #4]
 80063c2:	edd7 7a00 	vldr	s15, [r7]
 80063c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063ca:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8006488 <calculate_movement_deg+0x280>
 80063ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063d2:	eef1 7a67 	vneg.f32	s15, s15
 80063d6:	edc7 7a03 	vstr	s15, [r7, #12]
 80063da:	e025      	b.n	8006428 <calculate_movement_deg+0x220>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180.0f) {
 80063dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80063e0:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800648c <calculate_movement_deg+0x284>
 80063e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80063e8:	ed97 7a00 	vldr	s14, [r7]
 80063ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063f4:	d50c      	bpl.n	8006410 <calculate_movement_deg+0x208>
				movement = 360.0f - current_deg + target_deg; // Positive = counterclockwise
 80063f6:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8006488 <calculate_movement_deg+0x280>
 80063fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80063fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006402:	ed97 7a00 	vldr	s14, [r7]
 8006406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800640a:	edc7 7a03 	vstr	s15, [r7, #12]
 800640e:	e00b      	b.n	8006428 <calculate_movement_deg+0x220>
			} else {
				movement = target_deg - current_deg + 360.0f; // Positive = counterclockwise
 8006410:	ed97 7a00 	vldr	s14, [r7]
 8006414:	edd7 7a01 	vldr	s15, [r7, #4]
 8006418:	ee77 7a67 	vsub.f32	s15, s14, s15
 800641c:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8006488 <calculate_movement_deg+0x280>
 8006420:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006424:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}

	// Final validation
	if (!isfinite(movement)) {
 8006428:	edd7 7a03 	vldr	s15, [r7, #12]
 800642c:	eef0 7ae7 	vabs.f32	s15, s15
 8006430:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8006484 <calculate_movement_deg+0x27c>
 8006434:	eef4 7a47 	vcmp.f32	s15, s14
 8006438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800643c:	d902      	bls.n	8006444 <calculate_movement_deg+0x23c>
		movement = 0.0f;
 800643e:	f04f 0300 	mov.w	r3, #0
 8006442:	60fb      	str	r3, [r7, #12]
	}

	// Clamp to reasonable range
	if (movement > 359.0f)
 8006444:	edd7 7a03 	vldr	s15, [r7, #12]
 8006448:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8006494 <calculate_movement_deg+0x28c>
 800644c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006454:	dd01      	ble.n	800645a <calculate_movement_deg+0x252>
		movement = 359.0f;
 8006456:	4b10      	ldr	r3, [pc, #64]	@ (8006498 <calculate_movement_deg+0x290>)
 8006458:	60fb      	str	r3, [r7, #12]
	if (movement < -359.0f)
 800645a:	edd7 7a03 	vldr	s15, [r7, #12]
 800645e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800649c <calculate_movement_deg+0x294>
 8006462:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800646a:	d501      	bpl.n	8006470 <calculate_movement_deg+0x268>
		movement = -359.0f;
 800646c:	4b0c      	ldr	r3, [pc, #48]	@ (80064a0 <calculate_movement_deg+0x298>)
 800646e:	60fb      	str	r3, [r7, #12]

	return movement;
 8006470:	68fb      	ldr	r3, [r7, #12]
}
 8006472:	ee07 3a90 	vmov	s15, r3
 8006476:	eeb0 0a67 	vmov.f32	s0, s15
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	7f7fffff 	.word	0x7f7fffff
 8006488:	43b40000 	.word	0x43b40000
 800648c:	43340000 	.word	0x43340000
 8006490:	c3340000 	.word	0xc3340000
 8006494:	43b38000 	.word	0x43b38000
 8006498:	43b38000 	.word	0x43b38000
 800649c:	c3b38000 	.word	0xc3b38000
 80064a0:	c3b38000 	.word	0xc3b38000

080064a4 <start_combined_trajectory>:

void start_combined_trajectory(float prismatic_target_mm,
		float revolute_target_deg) {
 80064a4:	b590      	push	{r4, r7, lr}
 80064a6:	ed2d 8b02 	vpush	{d8}
 80064aa:	b091      	sub	sp, #68	@ 0x44
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80064b2:	edc7 0a00 	vstr	s1, [r7]
	bool allow_during_homing = (homing_active
 80064b6:	4bb5      	ldr	r3, [pc, #724]	@ (800678c <start_combined_trajectory+0x2e8>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
			&& homing_state == HOMING_REV_TO_ZERO_DEG);
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d005      	beq.n	80064ca <start_combined_trajectory+0x26>
 80064be:	4bb4      	ldr	r3, [pc, #720]	@ (8006790 <start_combined_trajectory+0x2ec>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b07      	cmp	r3, #7
 80064c4:	d101      	bne.n	80064ca <start_combined_trajectory+0x26>
 80064c6:	2301      	movs	r3, #1
 80064c8:	e000      	b.n	80064cc <start_combined_trajectory+0x28>
 80064ca:	2300      	movs	r3, #0
	bool allow_during_homing = (homing_active
 80064cc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80064d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (is_emergency_active() || (homing_active && !allow_during_homing)) {
 80064dc:	f001 fad2 	bl	8007a84 <is_emergency_active>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f040 8258 	bne.w	8006998 <start_combined_trajectory+0x4f4>
 80064e8:	4ba8      	ldr	r3, [pc, #672]	@ (800678c <start_combined_trajectory+0x2e8>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d007      	beq.n	8006500 <start_combined_trajectory+0x5c>
 80064f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80064f4:	f083 0301 	eor.w	r3, r3, #1
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f040 824c 	bne.w	8006998 <start_combined_trajectory+0x4f4>
		return;
	}

	// Check if motion is already active
	if (motion_sequence_state != MOTION_IDLE) {
 8006500:	4ba4      	ldr	r3, [pc, #656]	@ (8006794 <start_combined_trajectory+0x2f0>)
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	f040 8249 	bne.w	800699c <start_combined_trajectory+0x4f8>
		return; // Don't start new trajectory if one is active
	}

	float pris_current = prismatic_encoder.mm;
 800650a:	4ba3      	ldr	r3, [pc, #652]	@ (8006798 <start_combined_trajectory+0x2f4>)
 800650c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800650e:	633b      	str	r3, [r7, #48]	@ 0x30
	float rev_current = revolute_encoder.rads;
 8006510:	4ba2      	ldr	r3, [pc, #648]	@ (800679c <start_combined_trajectory+0x2f8>)
 8006512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006514:	62fb      	str	r3, [r7, #44]	@ 0x2c

	// Reset trajectory structures completely
	memset(&prisEva, 0, sizeof(prisEva));
 8006516:	2214      	movs	r2, #20
 8006518:	2100      	movs	r1, #0
 800651a:	48a1      	ldr	r0, [pc, #644]	@ (80067a0 <start_combined_trajectory+0x2fc>)
 800651c:	f00c fd9c 	bl	8013058 <memset>
	memset(&revEva, 0, sizeof(revEva));
 8006520:	2214      	movs	r2, #20
 8006522:	2100      	movs	r1, #0
 8006524:	489f      	ldr	r0, [pc, #636]	@ (80067a4 <start_combined_trajectory+0x300>)
 8006526:	f00c fd97 	bl	8013058 <memset>
	memset(&prisGen, 0, sizeof(prisGen));
 800652a:	2214      	movs	r2, #20
 800652c:	2100      	movs	r1, #0
 800652e:	489e      	ldr	r0, [pc, #632]	@ (80067a8 <start_combined_trajectory+0x304>)
 8006530:	f00c fd92 	bl	8013058 <memset>
	memset(&revGen, 0, sizeof(revGen));
 8006534:	2214      	movs	r2, #20
 8006536:	2100      	movs	r1, #0
 8006538:	489c      	ldr	r0, [pc, #624]	@ (80067ac <start_combined_trajectory+0x308>)
 800653a:	f00c fd8d 	bl	8013058 <memset>

	prisEva.t = 0.0f;
 800653e:	4b98      	ldr	r3, [pc, #608]	@ (80067a0 <start_combined_trajectory+0x2fc>)
 8006540:	f04f 0200 	mov.w	r2, #0
 8006544:	60da      	str	r2, [r3, #12]
	prisEva.isFinised = false;
 8006546:	4b96      	ldr	r3, [pc, #600]	@ (80067a0 <start_combined_trajectory+0x2fc>)
 8006548:	2200      	movs	r2, #0
 800654a:	741a      	strb	r2, [r3, #16]
	revEva.t = 0.0f;
 800654c:	4b95      	ldr	r3, [pc, #596]	@ (80067a4 <start_combined_trajectory+0x300>)
 800654e:	f04f 0200 	mov.w	r2, #0
 8006552:	60da      	str	r2, [r3, #12]
	revEva.isFinised = false;
 8006554:	4b93      	ldr	r3, [pc, #588]	@ (80067a4 <start_combined_trajectory+0x300>)
 8006556:	2200      	movs	r2, #0
 8006558:	741a      	strb	r2, [r3, #16]

	prismatic_axis.initial_pos = pris_current;
 800655a:	4a95      	ldr	r2, [pc, #596]	@ (80067b0 <start_combined_trajectory+0x30c>)
 800655c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655e:	60d3      	str	r3, [r2, #12]
	revolute_axis.initial_pos = rev_current;
 8006560:	4a94      	ldr	r2, [pc, #592]	@ (80067b4 <start_combined_trajectory+0x310>)
 8006562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006564:	60d3      	str	r3, [r2, #12]

	prismatic_axis.target_pos = fminf(
 8006566:	eddf 0a94 	vldr	s1, [pc, #592]	@ 80067b8 <start_combined_trajectory+0x314>
 800656a:	ed97 0a01 	vldr	s0, [r7, #4]
 800656e:	f00c ff37 	bl	80133e0 <fmaxf>
 8006572:	eef0 7a40 	vmov.f32	s15, s0
 8006576:	eddf 0a91 	vldr	s1, [pc, #580]	@ 80067bc <start_combined_trajectory+0x318>
 800657a:	eeb0 0a67 	vmov.f32	s0, s15
 800657e:	f00c ff4c 	bl	801341a <fminf>
 8006582:	eef0 7a40 	vmov.f32	s15, s0
 8006586:	4b8a      	ldr	r3, [pc, #552]	@ (80067b0 <start_combined_trajectory+0x30c>)
 8006588:	edc3 7a04 	vstr	s15, [r3, #16]
			fmaxf(prismatic_target_mm, PRISMATIC_MIN_POS), PRISMATIC_MAX_POS);

	// Check for NaN/infinity
	if (!isfinite(prismatic_axis.target_pos)) {
 800658c:	4b88      	ldr	r3, [pc, #544]	@ (80067b0 <start_combined_trajectory+0x30c>)
 800658e:	edd3 7a04 	vldr	s15, [r3, #16]
 8006592:	eef0 7ae7 	vabs.f32	s15, s15
 8006596:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 80067c0 <start_combined_trajectory+0x31c>
 800659a:	eef4 7a47 	vcmp.f32	s15, s14
 800659e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a2:	d903      	bls.n	80065ac <start_combined_trajectory+0x108>
		prismatic_axis.target_pos = prismatic_axis.initial_pos;
 80065a4:	4b82      	ldr	r3, [pc, #520]	@ (80067b0 <start_combined_trajectory+0x30c>)
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	4a81      	ldr	r2, [pc, #516]	@ (80067b0 <start_combined_trajectory+0x30c>)
 80065aa:	6113      	str	r3, [r2, #16]
	}

	float normalized_current = normalize_angle(rev_current);
 80065ac:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 80065b0:	f7ff fe04 	bl	80061bc <normalize_angle>
 80065b4:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
	float current_deg = normalized_current * 180.0f / PI;
 80065b8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80065bc:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 80067c4 <start_combined_trajectory+0x320>
 80065c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80065c4:	eddf 6a80 	vldr	s13, [pc, #512]	@ 80067c8 <start_combined_trajectory+0x324>
 80065c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065cc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	movement_deg = calculate_movement_deg(current_deg, revolute_target_deg);
 80065d0:	edd7 0a00 	vldr	s1, [r7]
 80065d4:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80065d8:	f7ff fe16 	bl	8006208 <calculate_movement_deg>
 80065dc:	eef0 7a40 	vmov.f32	s15, s0
 80065e0:	4b7a      	ldr	r3, [pc, #488]	@ (80067cc <start_combined_trajectory+0x328>)
 80065e2:	edc3 7a00 	vstr	s15, [r3]

	// Validate movement_deg
	if (!isfinite(movement_deg)) {
 80065e6:	4b79      	ldr	r3, [pc, #484]	@ (80067cc <start_combined_trajectory+0x328>)
 80065e8:	edd3 7a00 	vldr	s15, [r3]
 80065ec:	eef0 7ae7 	vabs.f32	s15, s15
 80065f0:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 80067c0 <start_combined_trajectory+0x31c>
 80065f4:	eef4 7a47 	vcmp.f32	s15, s14
 80065f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065fc:	d903      	bls.n	8006606 <start_combined_trajectory+0x162>
		movement_deg = 0.0f;
 80065fe:	4b73      	ldr	r3, [pc, #460]	@ (80067cc <start_combined_trajectory+0x328>)
 8006600:	f04f 0200 	mov.w	r2, #0
 8006604:	601a      	str	r2, [r3, #0]
	}

	float movement_rad = movement_deg * PI / 180.0f;
 8006606:	4b71      	ldr	r3, [pc, #452]	@ (80067cc <start_combined_trajectory+0x328>)
 8006608:	edd3 7a00 	vldr	s15, [r3]
 800660c:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 80067c8 <start_combined_trajectory+0x324>
 8006610:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006614:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 80067c4 <start_combined_trajectory+0x320>
 8006618:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800661c:	edc7 7a08 	vstr	s15, [r7, #32]
	revolute_axis.target_pos = revolute_axis.initial_pos + movement_rad;
 8006620:	4b64      	ldr	r3, [pc, #400]	@ (80067b4 <start_combined_trajectory+0x310>)
 8006622:	ed93 7a03 	vldr	s14, [r3, #12]
 8006626:	edd7 7a08 	vldr	s15, [r7, #32]
 800662a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800662e:	4b61      	ldr	r3, [pc, #388]	@ (80067b4 <start_combined_trajectory+0x310>)
 8006630:	edc3 7a04 	vstr	s15, [r3, #16]

	// Check if we're in HOMING_REV_TO_ZERO_DEG mode
	bool is_homing_zero_deg = (homing_active
 8006634:	4b55      	ldr	r3, [pc, #340]	@ (800678c <start_combined_trajectory+0x2e8>)
 8006636:	781b      	ldrb	r3, [r3, #0]
			&& homing_state == HOMING_REV_TO_ZERO_DEG);
 8006638:	2b00      	cmp	r3, #0
 800663a:	d005      	beq.n	8006648 <start_combined_trajectory+0x1a4>
 800663c:	4b54      	ldr	r3, [pc, #336]	@ (8006790 <start_combined_trajectory+0x2ec>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b07      	cmp	r3, #7
 8006642:	d101      	bne.n	8006648 <start_combined_trajectory+0x1a4>
 8006644:	2301      	movs	r3, #1
 8006646:	e000      	b.n	800664a <start_combined_trajectory+0x1a6>
 8006648:	2300      	movs	r3, #0
	bool is_homing_zero_deg = (homing_active
 800664a:	77fb      	strb	r3, [r7, #31]
 800664c:	7ffb      	ldrb	r3, [r7, #31]
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	77fb      	strb	r3, [r7, #31]

	if (is_homing_zero_deg) {
 8006654:	7ffb      	ldrb	r3, [r7, #31]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d047      	beq.n	80066ea <start_combined_trajectory+0x246>
		// HOMING_REV_TO_ZERO_DEG: Only generate revolute trajectory

		check[2]++;
 800665a:	4b5d      	ldr	r3, [pc, #372]	@ (80067d0 <start_combined_trajectory+0x32c>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	3301      	adds	r3, #1
 8006660:	4a5b      	ldr	r2, [pc, #364]	@ (80067d0 <start_combined_trajectory+0x32c>)
 8006662:	6093      	str	r3, [r2, #8]

		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006664:	4b53      	ldr	r3, [pc, #332]	@ (80067b4 <start_combined_trajectory+0x310>)
 8006666:	ed93 8a03 	vldr	s16, [r3, #12]
 800666a:	4b52      	ldr	r3, [pc, #328]	@ (80067b4 <start_combined_trajectory+0x310>)
 800666c:	edd3 8a04 	vldr	s17, [r3, #16]
				revolute_axis.target_pos,
				ZGX45RGG_150RPM_Constant.traject_qd_max,
 8006670:	4b58      	ldr	r3, [pc, #352]	@ (80067d4 <start_combined_trajectory+0x330>)
 8006672:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006676:	4610      	mov	r0, r2
 8006678:	4619      	mov	r1, r3
 800667a:	f7fa fa6b 	bl	8000b54 <__aeabi_d2f>
 800667e:	4604      	mov	r4, r0
				ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8006680:	4b54      	ldr	r3, [pc, #336]	@ (80067d4 <start_combined_trajectory+0x330>)
 8006682:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006686:	4610      	mov	r0, r2
 8006688:	4619      	mov	r1, r3
 800668a:	f7fa fa63 	bl	8000b54 <__aeabi_d2f>
 800668e:	4603      	mov	r3, r0
 8006690:	ee01 3a90 	vmov	s3, r3
 8006694:	ee01 4a10 	vmov	s2, r4
 8006698:	eef0 0a68 	vmov.f32	s1, s17
 800669c:	eeb0 0a48 	vmov.f32	s0, s16
 80066a0:	4842      	ldr	r0, [pc, #264]	@ (80067ac <start_combined_trajectory+0x308>)
 80066a2:	f7fd fe37 	bl	8004314 <Trapezoidal_Generator>

		sync_motion_active = false;
 80066a6:	4b4c      	ldr	r3, [pc, #304]	@ (80067d8 <start_combined_trajectory+0x334>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	701a      	strb	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 80066ac:	4b40      	ldr	r3, [pc, #256]	@ (80067b0 <start_combined_trajectory+0x30c>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		prismatic_axis.position = pris_current;
 80066b4:	4a3e      	ldr	r2, [pc, #248]	@ (80067b0 <start_combined_trajectory+0x30c>)
 80066b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b8:	6013      	str	r3, [r2, #0]
		prismatic_axis.velocity = 0.0f;
 80066ba:	4b3d      	ldr	r3, [pc, #244]	@ (80067b0 <start_combined_trajectory+0x30c>)
 80066bc:	f04f 0200 	mov.w	r2, #0
 80066c0:	605a      	str	r2, [r3, #4]

		revolute_axis.trajectory_active = true;
 80066c2:	4b3c      	ldr	r3, [pc, #240]	@ (80067b4 <start_combined_trajectory+0x310>)
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		if (!current_drawing_sequence.sequence_active) {
 80066ca:	4b44      	ldr	r3, [pc, #272]	@ (80067dc <start_combined_trajectory+0x338>)
 80066cc:	799b      	ldrb	r3, [r3, #6]
 80066ce:	f083 0301 	eor.w	r3, r3, #1
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <start_combined_trajectory+0x238>
			plotter_pen_up();
 80066d8:	f003 fb40 	bl	8009d5c <plotter_pen_up>
		}

		motion_delay_timer = 0;
 80066dc:	4b40      	ldr	r3, [pc, #256]	@ (80067e0 <start_combined_trajectory+0x33c>)
 80066de:	2200      	movs	r2, #0
 80066e0:	601a      	str	r2, [r3, #0]
		motion_sequence_state = MOTION_PEN_UP_DELAY;
 80066e2:	4b2c      	ldr	r3, [pc, #176]	@ (8006794 <start_combined_trajectory+0x2f0>)
 80066e4:	2201      	movs	r2, #1
 80066e6:	701a      	strb	r2, [r3, #0]
 80066e8:	e159      	b.n	800699e <start_combined_trajectory+0x4fa>

	} else {
		// NORMAL TRAJECTORY: Check if this is for drawing or regular motion
		check[3]++;
 80066ea:	4b39      	ldr	r3, [pc, #228]	@ (80067d0 <start_combined_trajectory+0x32c>)
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	4a37      	ldr	r2, [pc, #220]	@ (80067d0 <start_combined_trajectory+0x32c>)
 80066f2:	60d3      	str	r3, [r2, #12]

		// Generate trajectories
		Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 80066f4:	4b2e      	ldr	r3, [pc, #184]	@ (80067b0 <start_combined_trajectory+0x30c>)
 80066f6:	ed93 8a03 	vldr	s16, [r3, #12]
 80066fa:	4b2d      	ldr	r3, [pc, #180]	@ (80067b0 <start_combined_trajectory+0x30c>)
 80066fc:	edd3 8a04 	vldr	s17, [r3, #16]
				prismatic_axis.target_pos,
				ZGX45RGG_400RPM_Constant.traject_sd_max,
 8006700:	4b38      	ldr	r3, [pc, #224]	@ (80067e4 <start_combined_trajectory+0x340>)
 8006702:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
		Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8006706:	4610      	mov	r0, r2
 8006708:	4619      	mov	r1, r3
 800670a:	f7fa fa23 	bl	8000b54 <__aeabi_d2f>
 800670e:	4604      	mov	r4, r0
				ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8006710:	4b34      	ldr	r3, [pc, #208]	@ (80067e4 <start_combined_trajectory+0x340>)
 8006712:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
		Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8006716:	4610      	mov	r0, r2
 8006718:	4619      	mov	r1, r3
 800671a:	f7fa fa1b 	bl	8000b54 <__aeabi_d2f>
 800671e:	4603      	mov	r3, r0
 8006720:	ee01 3a90 	vmov	s3, r3
 8006724:	ee01 4a10 	vmov	s2, r4
 8006728:	eef0 0a68 	vmov.f32	s1, s17
 800672c:	eeb0 0a48 	vmov.f32	s0, s16
 8006730:	481d      	ldr	r0, [pc, #116]	@ (80067a8 <start_combined_trajectory+0x304>)
 8006732:	f7fd fdef 	bl	8004314 <Trapezoidal_Generator>

		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006736:	4b1f      	ldr	r3, [pc, #124]	@ (80067b4 <start_combined_trajectory+0x310>)
 8006738:	ed93 8a03 	vldr	s16, [r3, #12]
 800673c:	4b1d      	ldr	r3, [pc, #116]	@ (80067b4 <start_combined_trajectory+0x310>)
 800673e:	edd3 8a04 	vldr	s17, [r3, #16]
				revolute_axis.target_pos,
				ZGX45RGG_150RPM_Constant.traject_qd_max,
 8006742:	4b24      	ldr	r3, [pc, #144]	@ (80067d4 <start_combined_trajectory+0x330>)
 8006744:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006748:	4610      	mov	r0, r2
 800674a:	4619      	mov	r1, r3
 800674c:	f7fa fa02 	bl	8000b54 <__aeabi_d2f>
 8006750:	4604      	mov	r4, r0
				ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8006752:	4b20      	ldr	r3, [pc, #128]	@ (80067d4 <start_combined_trajectory+0x330>)
 8006754:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006758:	4610      	mov	r0, r2
 800675a:	4619      	mov	r1, r3
 800675c:	f7fa f9fa 	bl	8000b54 <__aeabi_d2f>
 8006760:	4603      	mov	r3, r0
 8006762:	ee01 3a90 	vmov	s3, r3
 8006766:	ee01 4a10 	vmov	s2, r4
 800676a:	eef0 0a68 	vmov.f32	s1, s17
 800676e:	eeb0 0a48 	vmov.f32	s0, s16
 8006772:	480e      	ldr	r0, [pc, #56]	@ (80067ac <start_combined_trajectory+0x308>)
 8006774:	f7fd fdce 	bl	8004314 <Trapezoidal_Generator>

		// Determine if this is a drawing operation
		bool is_drawing_operation = current_drawing_sequence.sequence_active
 8006778:	4b18      	ldr	r3, [pc, #96]	@ (80067dc <start_combined_trajectory+0x338>)
 800677a:	799b      	ldrb	r3, [r3, #6]
				|| word_drawing_active;
 800677c:	2b00      	cmp	r3, #0
 800677e:	d103      	bne.n	8006788 <start_combined_trajectory+0x2e4>
 8006780:	4b19      	ldr	r3, [pc, #100]	@ (80067e8 <start_combined_trajectory+0x344>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d031      	beq.n	80067ec <start_combined_trajectory+0x348>
 8006788:	2301      	movs	r3, #1
 800678a:	e030      	b.n	80067ee <start_combined_trajectory+0x34a>
 800678c:	200007ef 	.word	0x200007ef
 8006790:	200007ee 	.word	0x200007ee
 8006794:	20000790 	.word	0x20000790
 8006798:	20000994 	.word	0x20000994
 800679c:	200009f0 	.word	0x200009f0
 80067a0:	200007bc 	.word	0x200007bc
 80067a4:	200007d0 	.word	0x200007d0
 80067a8:	20000794 	.word	0x20000794
 80067ac:	200007a8 	.word	0x200007a8
 80067b0:	20000708 	.word	0x20000708
 80067b4:	2000074c 	.word	0x2000074c
 80067b8:	00000000 	.word	0x00000000
 80067bc:	43960000 	.word	0x43960000
 80067c0:	7f7fffff 	.word	0x7f7fffff
 80067c4:	43340000 	.word	0x43340000
 80067c8:	40490fdb 	.word	0x40490fdb
 80067cc:	20000804 	.word	0x20000804
 80067d0:	20000870 	.word	0x20000870
 80067d4:	20000000 	.word	0x20000000
 80067d8:	200008b0 	.word	0x200008b0
 80067dc:	200008b4 	.word	0x200008b4
 80067e0:	200007e4 	.word	0x200007e4
 80067e4:	20000080 	.word	0x20000080
 80067e8:	200008c8 	.word	0x200008c8
 80067ec:	2300      	movs	r3, #0
		bool is_drawing_operation = current_drawing_sequence.sequence_active
 80067ee:	77bb      	strb	r3, [r7, #30]
 80067f0:	7fbb      	ldrb	r3, [r7, #30]
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	77bb      	strb	r3, [r7, #30]

		if (is_drawing_operation) {
 80067f8:	7fbb      	ldrb	r3, [r7, #30]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f000 808b 	beq.w	8006916 <start_combined_trajectory+0x472>
			// DRAWING MODE: Use synchronized motion
			// Calculate distances
			float pris_distance = fabsf(
					prismatic_axis.target_pos - prismatic_axis.initial_pos);
 8006800:	4b69      	ldr	r3, [pc, #420]	@ (80069a8 <start_combined_trajectory+0x504>)
 8006802:	ed93 7a04 	vldr	s14, [r3, #16]
 8006806:	4b68      	ldr	r3, [pc, #416]	@ (80069a8 <start_combined_trajectory+0x504>)
 8006808:	edd3 7a03 	vldr	s15, [r3, #12]
 800680c:	ee77 7a67 	vsub.f32	s15, s14, s15
			float pris_distance = fabsf(
 8006810:	eef0 7ae7 	vabs.f32	s15, s15
 8006814:	edc7 7a06 	vstr	s15, [r7, #24]
			float rev_distance = fabsf(
					revolute_axis.target_pos - revolute_axis.initial_pos);
 8006818:	4b64      	ldr	r3, [pc, #400]	@ (80069ac <start_combined_trajectory+0x508>)
 800681a:	ed93 7a04 	vldr	s14, [r3, #16]
 800681e:	4b63      	ldr	r3, [pc, #396]	@ (80069ac <start_combined_trajectory+0x508>)
 8006820:	edd3 7a03 	vldr	s15, [r3, #12]
 8006824:	ee77 7a67 	vsub.f32	s15, s14, s15
			float rev_distance = fabsf(
 8006828:	eef0 7ae7 	vabs.f32	s15, s15
 800682c:	edc7 7a05 	vstr	s15, [r7, #20]

			// Calculate time needed for each axis at their max speeds
			float pris_time_needed = 0.0f;
 8006830:	f04f 0300 	mov.w	r3, #0
 8006834:	63fb      	str	r3, [r7, #60]	@ 0x3c
			float rev_time_needed = 0.0f;
 8006836:	f04f 0300 	mov.w	r3, #0
 800683a:	63bb      	str	r3, [r7, #56]	@ 0x38

			if (pris_distance > 0.1f) {
 800683c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006840:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80069b0 <start_combined_trajectory+0x50c>
 8006844:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800684c:	dd18      	ble.n	8006880 <start_combined_trajectory+0x3dc>
				// Time = distance / max_velocity, factor in acceleration/deceleration
				pris_time_needed = (pris_distance
						/ ZGX45RGG_400RPM_Constant.traject_sd_max) * 2.5f;
 800684e:	69b8      	ldr	r0, [r7, #24]
 8006850:	f7f9 fe46 	bl	80004e0 <__aeabi_f2d>
 8006854:	4b57      	ldr	r3, [pc, #348]	@ (80069b4 <start_combined_trajectory+0x510>)
 8006856:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800685a:	f7f9 ffc3 	bl	80007e4 <__aeabi_ddiv>
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	4610      	mov	r0, r2
 8006864:	4619      	mov	r1, r3
 8006866:	f04f 0200 	mov.w	r2, #0
 800686a:	4b53      	ldr	r3, [pc, #332]	@ (80069b8 <start_combined_trajectory+0x514>)
 800686c:	f7f9 fe90 	bl	8000590 <__aeabi_dmul>
 8006870:	4602      	mov	r2, r0
 8006872:	460b      	mov	r3, r1
				pris_time_needed = (pris_distance
 8006874:	4610      	mov	r0, r2
 8006876:	4619      	mov	r1, r3
 8006878:	f7fa f96c 	bl	8000b54 <__aeabi_d2f>
 800687c:	4603      	mov	r3, r0
 800687e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			}

			if (rev_distance > 0.01f) {
 8006880:	edd7 7a05 	vldr	s15, [r7, #20]
 8006884:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80069bc <start_combined_trajectory+0x518>
 8006888:	eef4 7ac7 	vcmpe.f32	s15, s14
 800688c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006890:	dd18      	ble.n	80068c4 <start_combined_trajectory+0x420>
				rev_time_needed = (rev_distance
						/ ZGX45RGG_150RPM_Constant.traject_qd_max) * 2.5f;
 8006892:	6978      	ldr	r0, [r7, #20]
 8006894:	f7f9 fe24 	bl	80004e0 <__aeabi_f2d>
 8006898:	4b49      	ldr	r3, [pc, #292]	@ (80069c0 <start_combined_trajectory+0x51c>)
 800689a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800689e:	f7f9 ffa1 	bl	80007e4 <__aeabi_ddiv>
 80068a2:	4602      	mov	r2, r0
 80068a4:	460b      	mov	r3, r1
 80068a6:	4610      	mov	r0, r2
 80068a8:	4619      	mov	r1, r3
 80068aa:	f04f 0200 	mov.w	r2, #0
 80068ae:	4b42      	ldr	r3, [pc, #264]	@ (80069b8 <start_combined_trajectory+0x514>)
 80068b0:	f7f9 fe6e 	bl	8000590 <__aeabi_dmul>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
				rev_time_needed = (rev_distance
 80068b8:	4610      	mov	r0, r2
 80068ba:	4619      	mov	r1, r3
 80068bc:	f7fa f94a 	bl	8000b54 <__aeabi_d2f>
 80068c0:	4603      	mov	r3, r0
 80068c2:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			// Use the longer time, with minimum time
			sync_total_time = fmaxf(pris_time_needed, rev_time_needed);
 80068c4:	edd7 0a0e 	vldr	s1, [r7, #56]	@ 0x38
 80068c8:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80068cc:	f00c fd88 	bl	80133e0 <fmaxf>
 80068d0:	eef0 7a40 	vmov.f32	s15, s0
 80068d4:	4b3b      	ldr	r3, [pc, #236]	@ (80069c4 <start_combined_trajectory+0x520>)
 80068d6:	edc3 7a00 	vstr	s15, [r3]
			if (sync_total_time < 1.0f)
 80068da:	4b3a      	ldr	r3, [pc, #232]	@ (80069c4 <start_combined_trajectory+0x520>)
 80068dc:	edd3 7a00 	vldr	s15, [r3]
 80068e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ec:	d503      	bpl.n	80068f6 <start_combined_trajectory+0x452>
				sync_total_time = 1.0f; // Minimum 1 second
 80068ee:	4b35      	ldr	r3, [pc, #212]	@ (80069c4 <start_combined_trajectory+0x520>)
 80068f0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80068f4:	601a      	str	r2, [r3, #0]

			// Initialize synchronized motion for drawing
			sync_motion_active = true;
 80068f6:	4b34      	ldr	r3, [pc, #208]	@ (80069c8 <start_combined_trajectory+0x524>)
 80068f8:	2201      	movs	r2, #1
 80068fa:	701a      	strb	r2, [r3, #0]
			sync_start_time = 0.0f;
 80068fc:	4b33      	ldr	r3, [pc, #204]	@ (80069cc <start_combined_trajectory+0x528>)
 80068fe:	f04f 0200 	mov.w	r2, #0
 8006902:	601a      	str	r2, [r3, #0]
			prismatic_axis.trajectory_active = false;
 8006904:	4b28      	ldr	r3, [pc, #160]	@ (80069a8 <start_combined_trajectory+0x504>)
 8006906:	2200      	movs	r2, #0
 8006908:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			revolute_axis.trajectory_active = false;
 800690c:	4b27      	ldr	r3, [pc, #156]	@ (80069ac <start_combined_trajectory+0x508>)
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8006914:	e00e      	b.n	8006934 <start_combined_trajectory+0x490>
		} else {
			// NORMAL MODE: Use independent trajectories
			sync_motion_active = false;
 8006916:	4b2c      	ldr	r3, [pc, #176]	@ (80069c8 <start_combined_trajectory+0x524>)
 8006918:	2200      	movs	r2, #0
 800691a:	701a      	strb	r2, [r3, #0]
			sync_start_time = 0.0f;
 800691c:	4b2b      	ldr	r3, [pc, #172]	@ (80069cc <start_combined_trajectory+0x528>)
 800691e:	f04f 0200 	mov.w	r2, #0
 8006922:	601a      	str	r2, [r3, #0]
			prismatic_axis.trajectory_active = true;
 8006924:	4b20      	ldr	r3, [pc, #128]	@ (80069a8 <start_combined_trajectory+0x504>)
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			revolute_axis.trajectory_active = true;
 800692c:	4b1f      	ldr	r3, [pc, #124]	@ (80069ac <start_combined_trajectory+0x508>)
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		}

		// Handle pen up/down
		if (current_drawing_sequence.sequence_active
 8006934:	4b26      	ldr	r3, [pc, #152]	@ (80069d0 <start_combined_trajectory+0x52c>)
 8006936:	799b      	ldrb	r3, [r3, #6]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d01c      	beq.n	8006976 <start_combined_trajectory+0x4d2>
				&& current_drawing_sequence.current_point > 0) {
 800693c:	4b24      	ldr	r3, [pc, #144]	@ (80069d0 <start_combined_trajectory+0x52c>)
 800693e:	795b      	ldrb	r3, [r3, #5]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d018      	beq.n	8006976 <start_combined_trajectory+0x4d2>
			// ดูว่าจุดปัจจุบันต้องการวางปากกาหรือไม่
			DrawingPoint_t current =
					current_drawing_sequence.points[current_drawing_sequence.current_point
 8006944:	4b22      	ldr	r3, [pc, #136]	@ (80069d0 <start_combined_trajectory+0x52c>)
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	4b21      	ldr	r3, [pc, #132]	@ (80069d0 <start_combined_trajectory+0x52c>)
 800694a:	795b      	ldrb	r3, [r3, #5]
 800694c:	4619      	mov	r1, r3
 800694e:	460b      	mov	r3, r1
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	440b      	add	r3, r1
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	3b0c      	subs	r3, #12
 8006958:	441a      	add	r2, r3
			DrawingPoint_t current =
 800695a:	f107 0308 	add.w	r3, r7, #8
 800695e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006960:	e883 0007 	stmia.w	r3, {r0, r1, r2}
							- 1];

			// ถ้าต้องการวางปากกา ก็ไม่ต้องยกขึ้น
			if (!current.pen_down) {
 8006964:	7c3b      	ldrb	r3, [r7, #16]
 8006966:	f083 0301 	eor.w	r3, r3, #1
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d005      	beq.n	800697c <start_combined_trajectory+0x4d8>
				plotter_pen_up();
 8006970:	f003 f9f4 	bl	8009d5c <plotter_pen_up>
				&& current_drawing_sequence.current_point > 0) {
 8006974:	e002      	b.n	800697c <start_combined_trajectory+0x4d8>
			}
		} else {
			// ไม่ได้วาดตัวอักษร - ยกปากกาตามปกติ
			plotter_pen_up();
 8006976:	f003 f9f1 	bl	8009d5c <plotter_pen_up>
 800697a:	e000      	b.n	800697e <start_combined_trajectory+0x4da>
				&& current_drawing_sequence.current_point > 0) {
 800697c:	bf00      	nop
		}

		motion_delay_timer = 0;
 800697e:	4b15      	ldr	r3, [pc, #84]	@ (80069d4 <start_combined_trajectory+0x530>)
 8006980:	2200      	movs	r2, #0
 8006982:	601a      	str	r2, [r3, #0]
		motion_sequence_state = MOTION_PEN_UP_DELAY;
 8006984:	4b14      	ldr	r3, [pc, #80]	@ (80069d8 <start_combined_trajectory+0x534>)
 8006986:	2201      	movs	r2, #1
 8006988:	701a      	strb	r2, [r3, #0]

		//modbus reset state
		registerFrame[BaseSystem_Status].U16 = 0;
 800698a:	4b14      	ldr	r3, [pc, #80]	@ (80069dc <start_combined_trajectory+0x538>)
 800698c:	2200      	movs	r2, #0
 800698e:	805a      	strh	r2, [r3, #2]
		registerFrame[R_Theta_Status].U16 = 0;
 8006990:	4b12      	ldr	r3, [pc, #72]	@ (80069dc <start_combined_trajectory+0x538>)
 8006992:	2200      	movs	r2, #0
 8006994:	841a      	strh	r2, [r3, #32]
 8006996:	e002      	b.n	800699e <start_combined_trajectory+0x4fa>
		return;
 8006998:	bf00      	nop
 800699a:	e000      	b.n	800699e <start_combined_trajectory+0x4fa>
		return; // Don't start new trajectory if one is active
 800699c:	bf00      	nop
	}
}
 800699e:	3744      	adds	r7, #68	@ 0x44
 80069a0:	46bd      	mov	sp, r7
 80069a2:	ecbd 8b02 	vpop	{d8}
 80069a6:	bd90      	pop	{r4, r7, pc}
 80069a8:	20000708 	.word	0x20000708
 80069ac:	2000074c 	.word	0x2000074c
 80069b0:	3dcccccd 	.word	0x3dcccccd
 80069b4:	20000080 	.word	0x20000080
 80069b8:	40040000 	.word	0x40040000
 80069bc:	3c23d70a 	.word	0x3c23d70a
 80069c0:	20000000 	.word	0x20000000
 80069c4:	200008ac 	.word	0x200008ac
 80069c8:	200008b0 	.word	0x200008b0
 80069cc:	200008a8 	.word	0x200008a8
 80069d0:	200008b4 	.word	0x200008b4
 80069d4:	200007e4 	.word	0x200007e4
 80069d8:	20000790 	.word	0x20000790
 80069dc:	200015b0 	.word	0x200015b0

080069e0 <update_position_control>:

void update_position_control(void) {
 80069e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80069e4:	ed2d 8b02 	vpush	{d8}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
	prismatic_axis.pos_error = prismatic_axis.position - prismatic_encoder.mm;
 80069ec:	4b50      	ldr	r3, [pc, #320]	@ (8006b30 <update_position_control+0x150>)
 80069ee:	ed93 7a00 	vldr	s14, [r3]
 80069f2:	4b50      	ldr	r3, [pc, #320]	@ (8006b34 <update_position_control+0x154>)
 80069f4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80069f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069fc:	4b4c      	ldr	r3, [pc, #304]	@ (8006b30 <update_position_control+0x150>)
 80069fe:	edc3 7a05 	vstr	s15, [r3, #20]
	prismatic_axis.command_vel = PWM_Satuation(
 8006a02:	4b4b      	ldr	r3, [pc, #300]	@ (8006b30 <update_position_control+0x150>)
 8006a04:	edd3 7a05 	vldr	s15, [r3, #20]
 8006a08:	eeb0 0a67 	vmov.f32	s0, s15
 8006a0c:	484a      	ldr	r0, [pc, #296]	@ (8006b38 <update_position_control+0x158>)
 8006a0e:	f7fa fc03 	bl	8001218 <PID_CONTROLLER_Compute>
 8006a12:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid,
					prismatic_axis.pos_error), ZGX45RGG_400RPM_Constant.sd_max,
 8006a16:	4b49      	ldr	r3, [pc, #292]	@ (8006b3c <update_position_control+0x15c>)
 8006a18:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	prismatic_axis.command_vel = PWM_Satuation(
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	4619      	mov	r1, r3
 8006a20:	f7fa f850 	bl	8000ac4 <__aeabi_d2iz>
 8006a24:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.sd_max);
 8006a26:	4b45      	ldr	r3, [pc, #276]	@ (8006b3c <update_position_control+0x15c>)
 8006a28:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8006a2c:	4690      	mov	r8, r2
 8006a2e:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_vel = PWM_Satuation(
 8006a32:	4640      	mov	r0, r8
 8006a34:	4649      	mov	r1, r9
 8006a36:	f7fa f845 	bl	8000ac4 <__aeabi_d2iz>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	4630      	mov	r0, r6
 8006a40:	eeb0 0a48 	vmov.f32	s0, s16
 8006a44:	f7fa fb86 	bl	8001154 <PWM_Satuation>
 8006a48:	ee07 0a90 	vmov	s15, r0
 8006a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a50:	4b37      	ldr	r3, [pc, #220]	@ (8006b30 <update_position_control+0x150>)
 8006a52:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	float normalized_position = normalize_angle(revolute_encoder.rads);
 8006a56:	4b3a      	ldr	r3, [pc, #232]	@ (8006b40 <update_position_control+0x160>)
 8006a58:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8006a60:	f7ff fbac 	bl	80061bc <normalize_angle>
 8006a64:	ed87 0a01 	vstr	s0, [r7, #4]
	revolute_axis.pos_error = revolute_axis.position - normalized_position;
 8006a68:	4b36      	ldr	r3, [pc, #216]	@ (8006b44 <update_position_control+0x164>)
 8006a6a:	ed93 7a00 	vldr	s14, [r3]
 8006a6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a76:	4b33      	ldr	r3, [pc, #204]	@ (8006b44 <update_position_control+0x164>)
 8006a78:	edc3 7a05 	vstr	s15, [r3, #20]

	if (revolute_axis.pos_error > PI)
 8006a7c:	4b31      	ldr	r3, [pc, #196]	@ (8006b44 <update_position_control+0x164>)
 8006a7e:	edd3 7a05 	vldr	s15, [r3, #20]
 8006a82:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006b48 <update_position_control+0x168>
 8006a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a8e:	dd09      	ble.n	8006aa4 <update_position_control+0xc4>
		revolute_axis.pos_error -= 2.0f * PI;
 8006a90:	4b2c      	ldr	r3, [pc, #176]	@ (8006b44 <update_position_control+0x164>)
 8006a92:	edd3 7a05 	vldr	s15, [r3, #20]
 8006a96:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8006b4c <update_position_control+0x16c>
 8006a9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a9e:	4b29      	ldr	r3, [pc, #164]	@ (8006b44 <update_position_control+0x164>)
 8006aa0:	edc3 7a05 	vstr	s15, [r3, #20]
	if (revolute_axis.pos_error < -PI)
 8006aa4:	4b27      	ldr	r3, [pc, #156]	@ (8006b44 <update_position_control+0x164>)
 8006aa6:	edd3 7a05 	vldr	s15, [r3, #20]
 8006aaa:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8006b50 <update_position_control+0x170>
 8006aae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab6:	d509      	bpl.n	8006acc <update_position_control+0xec>
		revolute_axis.pos_error += 2.0f * PI;
 8006ab8:	4b22      	ldr	r3, [pc, #136]	@ (8006b44 <update_position_control+0x164>)
 8006aba:	edd3 7a05 	vldr	s15, [r3, #20]
 8006abe:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8006b4c <update_position_control+0x16c>
 8006ac2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8006b44 <update_position_control+0x164>)
 8006ac8:	edc3 7a05 	vstr	s15, [r3, #20]

	revolute_axis.command_vel = PWM_Satuation(
 8006acc:	4b1d      	ldr	r3, [pc, #116]	@ (8006b44 <update_position_control+0x164>)
 8006ace:	edd3 7a05 	vldr	s15, [r3, #20]
 8006ad2:	eeb0 0a67 	vmov.f32	s0, s15
 8006ad6:	481f      	ldr	r0, [pc, #124]	@ (8006b54 <update_position_control+0x174>)
 8006ad8:	f7fa fb9e 	bl	8001218 <PID_CONTROLLER_Compute>
 8006adc:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid,
					revolute_axis.pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 8006ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8006b58 <update_position_control+0x178>)
 8006ae2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 8006ae6:	4610      	mov	r0, r2
 8006ae8:	4619      	mov	r1, r3
 8006aea:	f7f9 ffeb 	bl	8000ac4 <__aeabi_d2iz>
 8006aee:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 8006af0:	4b19      	ldr	r3, [pc, #100]	@ (8006b58 <update_position_control+0x178>)
 8006af2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006af6:	4614      	mov	r4, r2
 8006af8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_vel = PWM_Satuation(
 8006afc:	4620      	mov	r0, r4
 8006afe:	4629      	mov	r1, r5
 8006b00:	f7f9 ffe0 	bl	8000ac4 <__aeabi_d2iz>
 8006b04:	4603      	mov	r3, r0
 8006b06:	4619      	mov	r1, r3
 8006b08:	4630      	mov	r0, r6
 8006b0a:	eeb0 0a48 	vmov.f32	s0, s16
 8006b0e:	f7fa fb21 	bl	8001154 <PWM_Satuation>
 8006b12:	ee07 0a90 	vmov	s15, r0
 8006b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006b44 <update_position_control+0x164>)
 8006b1c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	ecbd 8b02 	vpop	{d8}
 8006b2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b2e:	bf00      	nop
 8006b30:	20000708 	.word	0x20000708
 8006b34:	20000994 	.word	0x20000994
 8006b38:	20000a4c 	.word	0x20000a4c
 8006b3c:	20000080 	.word	0x20000080
 8006b40:	200009f0 	.word	0x200009f0
 8006b44:	2000074c 	.word	0x2000074c
 8006b48:	40490fdb 	.word	0x40490fdb
 8006b4c:	40c90fdb 	.word	0x40c90fdb
 8006b50:	c0490fdb 	.word	0xc0490fdb
 8006b54:	20000a9c 	.word	0x20000a9c
 8006b58:	20000000 	.word	0x20000000
 8006b5c:	00000000 	.word	0x00000000

08006b60 <update_velocity_control>:

void update_velocity_control(void) {
 8006b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b64:	ed2d 8b02 	vpush	{d8}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0

	if (prismatic_axis.trajectory_active) {
 8006b6c:	4b96      	ldr	r3, [pc, #600]	@ (8006dc8 <update_velocity_control+0x268>)
 8006b6e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d010      	beq.n	8006b98 <update_velocity_control+0x38>
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006b76:	4b94      	ldr	r3, [pc, #592]	@ (8006dc8 <update_velocity_control+0x268>)
 8006b78:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ prismatic_axis.velocity - prismatic_axis.kalman_velocity;
 8006b7c:	4b92      	ldr	r3, [pc, #584]	@ (8006dc8 <update_velocity_control+0x268>)
 8006b7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006b82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b86:	4b90      	ldr	r3, [pc, #576]	@ (8006dc8 <update_velocity_control+0x268>)
 8006b88:	edd3 7a07 	vldr	s15, [r3, #28]
 8006b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006b90:	4b8d      	ldr	r3, [pc, #564]	@ (8006dc8 <update_velocity_control+0x268>)
 8006b92:	edc3 7a06 	vstr	s15, [r3, #24]
 8006b96:	e00a      	b.n	8006bae <update_velocity_control+0x4e>
	} else {
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006b98:	4b8b      	ldr	r3, [pc, #556]	@ (8006dc8 <update_velocity_control+0x268>)
 8006b9a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 8006b9e:	4b8a      	ldr	r3, [pc, #552]	@ (8006dc8 <update_velocity_control+0x268>)
 8006ba0:	edd3 7a07 	vldr	s15, [r3, #28]
 8006ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006ba8:	4b87      	ldr	r3, [pc, #540]	@ (8006dc8 <update_velocity_control+0x268>)
 8006baa:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	prismatic_axis.command_pos = PWM_Satuation(
 8006bae:	4b86      	ldr	r3, [pc, #536]	@ (8006dc8 <update_velocity_control+0x268>)
 8006bb0:	edd3 7a06 	vldr	s15, [r3, #24]
 8006bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8006bb8:	4884      	ldr	r0, [pc, #528]	@ (8006dcc <update_velocity_control+0x26c>)
 8006bba:	f7fa fb2d 	bl	8001218 <PID_CONTROLLER_Compute>
 8006bbe:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid,
					prismatic_axis.vel_error), ZGX45RGG_400RPM_Constant.U_max,
 8006bc2:	4b83      	ldr	r3, [pc, #524]	@ (8006dd0 <update_velocity_control+0x270>)
 8006bc4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(
 8006bc8:	4610      	mov	r0, r2
 8006bca:	4619      	mov	r1, r3
 8006bcc:	f7f9 ff7a 	bl	8000ac4 <__aeabi_d2iz>
 8006bd0:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.U_max);
 8006bd2:	4b7f      	ldr	r3, [pc, #508]	@ (8006dd0 <update_velocity_control+0x270>)
 8006bd4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006bd8:	603a      	str	r2, [r7, #0]
 8006bda:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8006bde:	607b      	str	r3, [r7, #4]
	prismatic_axis.command_pos = PWM_Satuation(
 8006be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006be4:	f7f9 ff6e 	bl	8000ac4 <__aeabi_d2iz>
 8006be8:	4603      	mov	r3, r0
 8006bea:	4619      	mov	r1, r3
 8006bec:	4630      	mov	r0, r6
 8006bee:	eeb0 0a48 	vmov.f32	s0, s16
 8006bf2:	f7fa faaf 	bl	8001154 <PWM_Satuation>
 8006bf6:	ee07 0a90 	vmov	s15, r0
 8006bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bfe:	4b72      	ldr	r3, [pc, #456]	@ (8006dc8 <update_velocity_control+0x268>)
 8006c00:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (prismatic_axis.trajectory_active) {
 8006c04:	4b70      	ldr	r3, [pc, #448]	@ (8006dc8 <update_velocity_control+0x268>)
 8006c06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d02c      	beq.n	8006c68 <update_velocity_control+0x108>
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
				prismatic_axis.velocity / 1000.0f);
 8006c0e:	4b6e      	ldr	r3, [pc, #440]	@ (8006dc8 <update_velocity_control+0x268>)
 8006c10:	edd3 7a01 	vldr	s15, [r3, #4]
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8006c14:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006dd4 <update_velocity_control+0x274>
 8006c18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006c1c:	eeb0 0a47 	vmov.f32	s0, s14
 8006c20:	486d      	ldr	r0, [pc, #436]	@ (8006dd8 <update_velocity_control+0x278>)
 8006c22:	f7fa fe15 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 8006c26:	eef0 7a40 	vmov.f32	s15, s0
 8006c2a:	4b67      	ldr	r3, [pc, #412]	@ (8006dc8 <update_velocity_control+0x268>)
 8006c2c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8006c30:	4b6a      	ldr	r3, [pc, #424]	@ (8006ddc <update_velocity_control+0x27c>)
 8006c32:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8006c36:	4b6a      	ldr	r3, [pc, #424]	@ (8006de0 <update_velocity_control+0x280>)
 8006c38:	edd3 6a01 	vldr	s13, [r3, #4]
				revolute_encoder.rads, revolute_axis.velocity,
				prismatic_encoder.mm / 1000.0f);
 8006c3c:	4b69      	ldr	r3, [pc, #420]	@ (8006de4 <update_velocity_control+0x284>)
 8006c3e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8006c42:	eddf 5a64 	vldr	s11, [pc, #400]	@ 8006dd4 <update_velocity_control+0x274>
 8006c46:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8006c4a:	eeb0 1a46 	vmov.f32	s2, s12
 8006c4e:	eef0 0a66 	vmov.f32	s1, s13
 8006c52:	eeb0 0a47 	vmov.f32	s0, s14
 8006c56:	4864      	ldr	r0, [pc, #400]	@ (8006de8 <update_velocity_control+0x288>)
 8006c58:	f7fa fea2 	bl	80019a0 <PRISMATIC_MOTOR_DFD_Compute>
 8006c5c:	eef0 7a40 	vmov.f32	s15, s0
 8006c60:	4b59      	ldr	r3, [pc, #356]	@ (8006dc8 <update_velocity_control+0x268>)
 8006c62:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8006c66:	e007      	b.n	8006c78 <update_velocity_control+0x118>
	} else {
		prismatic_axis.ffd = 0.0f;
 8006c68:	4b57      	ldr	r3, [pc, #348]	@ (8006dc8 <update_velocity_control+0x268>)
 8006c6a:	f04f 0200 	mov.w	r2, #0
 8006c6e:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 8006c70:	4b55      	ldr	r3, [pc, #340]	@ (8006dc8 <update_velocity_control+0x268>)
 8006c72:	f04f 0200 	mov.w	r2, #0
 8006c76:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8006c78:	4b53      	ldr	r3, [pc, #332]	@ (8006dc8 <update_velocity_control+0x268>)
 8006c7a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8006c7e:	4b52      	ldr	r3, [pc, #328]	@ (8006dc8 <update_velocity_control+0x268>)
 8006c80:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8006c84:	4b50      	ldr	r3, [pc, #320]	@ (8006dc8 <update_velocity_control+0x268>)
 8006c86:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c92:	4b4d      	ldr	r3, [pc, #308]	@ (8006dc8 <update_velocity_control+0x268>)
 8006c94:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006c98:	4b4b      	ldr	r3, [pc, #300]	@ (8006dc8 <update_velocity_control+0x268>)
 8006c9a:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8006c9e:	4b4c      	ldr	r3, [pc, #304]	@ (8006dd0 <update_velocity_control+0x270>)
 8006ca0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006ca4:	4610      	mov	r0, r2
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	f7f9 ff0c 	bl	8000ac4 <__aeabi_d2iz>
 8006cac:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8006cae:	4b48      	ldr	r3, [pc, #288]	@ (8006dd0 <update_velocity_control+0x270>)
 8006cb0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006cb4:	4692      	mov	sl, r2
 8006cb6:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006cba:	4650      	mov	r0, sl
 8006cbc:	4659      	mov	r1, fp
 8006cbe:	f7f9 ff01 	bl	8000ac4 <__aeabi_d2iz>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	eeb0 0a48 	vmov.f32	s0, s16
 8006ccc:	f7fa fa42 	bl	8001154 <PWM_Satuation>
 8006cd0:	ee07 0a90 	vmov	s15, r0
 8006cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8006dc8 <update_velocity_control+0x268>)
 8006cda:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 8006cde:	4b40      	ldr	r3, [pc, #256]	@ (8006de0 <update_velocity_control+0x280>)
 8006ce0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d010      	beq.n	8006d0a <update_velocity_control+0x1aa>
		revolute_axis.vel_error = revolute_axis.command_vel
 8006ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8006de0 <update_velocity_control+0x280>)
 8006cea:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 8006cee:	4b3c      	ldr	r3, [pc, #240]	@ (8006de0 <update_velocity_control+0x280>)
 8006cf0:	edd3 7a01 	vldr	s15, [r3, #4]
 8006cf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006cf8:	4b39      	ldr	r3, [pc, #228]	@ (8006de0 <update_velocity_control+0x280>)
 8006cfa:	edd3 7a07 	vldr	s15, [r3, #28]
 8006cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8006d02:	4b37      	ldr	r3, [pc, #220]	@ (8006de0 <update_velocity_control+0x280>)
 8006d04:	edc3 7a06 	vstr	s15, [r3, #24]
 8006d08:	e00a      	b.n	8006d20 <update_velocity_control+0x1c0>
	} else {
		revolute_axis.vel_error = revolute_axis.command_vel
 8006d0a:	4b35      	ldr	r3, [pc, #212]	@ (8006de0 <update_velocity_control+0x280>)
 8006d0c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 8006d10:	4b33      	ldr	r3, [pc, #204]	@ (8006de0 <update_velocity_control+0x280>)
 8006d12:	edd3 7a07 	vldr	s15, [r3, #28]
 8006d16:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8006d1a:	4b31      	ldr	r3, [pc, #196]	@ (8006de0 <update_velocity_control+0x280>)
 8006d1c:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	revolute_axis.command_pos = PWM_Satuation(
 8006d20:	4b2f      	ldr	r3, [pc, #188]	@ (8006de0 <update_velocity_control+0x280>)
 8006d22:	edd3 7a06 	vldr	s15, [r3, #24]
 8006d26:	eeb0 0a67 	vmov.f32	s0, s15
 8006d2a:	4830      	ldr	r0, [pc, #192]	@ (8006dec <update_velocity_control+0x28c>)
 8006d2c:	f7fa fa74 	bl	8001218 <PID_CONTROLLER_Compute>
 8006d30:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid,
					revolute_axis.vel_error), ZGX45RGG_150RPM_Constant.U_max,
 8006d34:	4b2e      	ldr	r3, [pc, #184]	@ (8006df0 <update_velocity_control+0x290>)
 8006d36:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	f7f9 fec1 	bl	8000ac4 <__aeabi_d2iz>
 8006d42:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 8006d44:	4b2a      	ldr	r3, [pc, #168]	@ (8006df0 <update_velocity_control+0x290>)
 8006d46:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006d4a:	4690      	mov	r8, r2
 8006d4c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(
 8006d50:	4640      	mov	r0, r8
 8006d52:	4649      	mov	r1, r9
 8006d54:	f7f9 feb6 	bl	8000ac4 <__aeabi_d2iz>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	eeb0 0a48 	vmov.f32	s0, s16
 8006d62:	f7fa f9f7 	bl	8001154 <PWM_Satuation>
 8006d66:	ee07 0a90 	vmov	s15, r0
 8006d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8006de0 <update_velocity_control+0x280>)
 8006d70:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 8006d74:	4b1a      	ldr	r3, [pc, #104]	@ (8006de0 <update_velocity_control+0x280>)
 8006d76:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d03e      	beq.n	8006dfc <update_velocity_control+0x29c>
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8006d7e:	4b18      	ldr	r3, [pc, #96]	@ (8006de0 <update_velocity_control+0x280>)
 8006d80:	edd3 7a01 	vldr	s15, [r3, #4]
 8006d84:	eeb0 0a67 	vmov.f32	s0, s15
 8006d88:	481a      	ldr	r0, [pc, #104]	@ (8006df4 <update_velocity_control+0x294>)
 8006d8a:	f7fa fbe3 	bl	8001554 <REVOLUTE_MOTOR_FFD_Compute>
 8006d8e:	eef0 7a40 	vmov.f32	s15, s0
 8006d92:	4b13      	ldr	r3, [pc, #76]	@ (8006de0 <update_velocity_control+0x280>)
 8006d94:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				revolute_axis.velocity);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006d98:	4b10      	ldr	r3, [pc, #64]	@ (8006ddc <update_velocity_control+0x27c>)
 8006d9a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8006d9e:	4b11      	ldr	r3, [pc, #68]	@ (8006de4 <update_velocity_control+0x284>)
 8006da0:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006da4:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8006dd4 <update_velocity_control+0x274>
 8006da8:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006dac:	eef0 0a66 	vmov.f32	s1, s13
 8006db0:	eeb0 0a47 	vmov.f32	s0, s14
 8006db4:	4810      	ldr	r0, [pc, #64]	@ (8006df8 <update_velocity_control+0x298>)
 8006db6:	f7fa fc60 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 8006dba:	eef0 7a40 	vmov.f32	s15, s0
 8006dbe:	4b08      	ldr	r3, [pc, #32]	@ (8006de0 <update_velocity_control+0x280>)
 8006dc0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8006dc4:	e034      	b.n	8006e30 <update_velocity_control+0x2d0>
 8006dc6:	bf00      	nop
 8006dc8:	20000708 	.word	0x20000708
 8006dcc:	20000a74 	.word	0x20000a74
 8006dd0:	20000080 	.word	0x20000080
 8006dd4:	447a0000 	.word	0x447a0000
 8006dd8:	20000b14 	.word	0x20000b14
 8006ddc:	200009f0 	.word	0x200009f0
 8006de0:	2000074c 	.word	0x2000074c
 8006de4:	20000994 	.word	0x20000994
 8006de8:	20000b18 	.word	0x20000b18
 8006dec:	20000ac4 	.word	0x20000ac4
 8006df0:	20000000 	.word	0x20000000
 8006df4:	20000b20 	.word	0x20000b20
 8006df8:	20000b24 	.word	0x20000b24
	} else {
		revolute_axis.ffd = 0.0f;
 8006dfc:	4b54      	ldr	r3, [pc, #336]	@ (8006f50 <update_velocity_control+0x3f0>)
 8006dfe:	f04f 0200 	mov.w	r2, #0
 8006e02:	631a      	str	r2, [r3, #48]	@ 0x30
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006e04:	4b53      	ldr	r3, [pc, #332]	@ (8006f54 <update_velocity_control+0x3f4>)
 8006e06:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8006e0a:	4b53      	ldr	r3, [pc, #332]	@ (8006f58 <update_velocity_control+0x3f8>)
 8006e0c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006e10:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8006f5c <update_velocity_control+0x3fc>
 8006e14:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006e18:	eef0 0a66 	vmov.f32	s1, s13
 8006e1c:	eeb0 0a47 	vmov.f32	s0, s14
 8006e20:	484f      	ldr	r0, [pc, #316]	@ (8006f60 <update_velocity_control+0x400>)
 8006e22:	f7fa fc2a 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 8006e26:	eef0 7a40 	vmov.f32	s15, s0
 8006e2a:	4b49      	ldr	r3, [pc, #292]	@ (8006f50 <update_velocity_control+0x3f0>)
 8006e2c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	static float ffd_filtered = 0.0f;
	static float dfd_filtered = 0.0f;

	ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 8006e30:	4b4c      	ldr	r3, [pc, #304]	@ (8006f64 <update_velocity_control+0x404>)
 8006e32:	edd3 7a00 	vldr	s15, [r3]
 8006e36:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8006f68 <update_velocity_control+0x408>
 8006e3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006e3e:	4b44      	ldr	r3, [pc, #272]	@ (8006f50 <update_velocity_control+0x3f0>)
 8006e40:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8006e44:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8006f6c <update_velocity_control+0x40c>
 8006e48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e50:	4b44      	ldr	r3, [pc, #272]	@ (8006f64 <update_velocity_control+0x404>)
 8006e52:	edc3 7a00 	vstr	s15, [r3]
	dfd_filtered = 0.8f * dfd_filtered + 0.175f * revolute_axis.dfd; //dfd 0.175
 8006e56:	4b46      	ldr	r3, [pc, #280]	@ (8006f70 <update_velocity_control+0x410>)
 8006e58:	edd3 7a00 	vldr	s15, [r3]
 8006e5c:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006f68 <update_velocity_control+0x408>
 8006e60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006e64:	4b3a      	ldr	r3, [pc, #232]	@ (8006f50 <update_velocity_control+0x3f0>)
 8006e66:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006e6a:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8006f74 <update_velocity_control+0x414>
 8006e6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e76:	4b3e      	ldr	r3, [pc, #248]	@ (8006f70 <update_velocity_control+0x410>)
 8006e78:	edc3 7a00 	vstr	s15, [r3]

	revolute_axis.command_pos += 0.01 * (dfd_filtered + ffd_filtered);
 8006e7c:	4b34      	ldr	r3, [pc, #208]	@ (8006f50 <update_velocity_control+0x3f0>)
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7f9 fb2d 	bl	80004e0 <__aeabi_f2d>
 8006e86:	4680      	mov	r8, r0
 8006e88:	4689      	mov	r9, r1
 8006e8a:	4b39      	ldr	r3, [pc, #228]	@ (8006f70 <update_velocity_control+0x410>)
 8006e8c:	ed93 7a00 	vldr	s14, [r3]
 8006e90:	4b34      	ldr	r3, [pc, #208]	@ (8006f64 <update_velocity_control+0x404>)
 8006e92:	edd3 7a00 	vldr	s15, [r3]
 8006e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e9a:	ee17 0a90 	vmov	r0, s15
 8006e9e:	f7f9 fb1f 	bl	80004e0 <__aeabi_f2d>
 8006ea2:	a329      	add	r3, pc, #164	@ (adr r3, 8006f48 <update_velocity_control+0x3e8>)
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	f7f9 fb72 	bl	8000590 <__aeabi_dmul>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4640      	mov	r0, r8
 8006eb2:	4649      	mov	r1, r9
 8006eb4:	f7f9 f9b6 	bl	8000224 <__adddf3>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	f7f9 fe48 	bl	8000b54 <__aeabi_d2f>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	4a22      	ldr	r2, [pc, #136]	@ (8006f50 <update_velocity_control+0x3f0>)
 8006ec8:	6253      	str	r3, [r2, #36]	@ 0x24

	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006eca:	4b21      	ldr	r3, [pc, #132]	@ (8006f50 <update_velocity_control+0x3f0>)
 8006ecc:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006ed0:	4b29      	ldr	r3, [pc, #164]	@ (8006f78 <update_velocity_control+0x418>)
 8006ed2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006ed6:	4610      	mov	r0, r2
 8006ed8:	4619      	mov	r1, r3
 8006eda:	f7f9 fdf3 	bl	8000ac4 <__aeabi_d2iz>
 8006ede:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006ee0:	4b25      	ldr	r3, [pc, #148]	@ (8006f78 <update_velocity_control+0x418>)
 8006ee2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006ee6:	4614      	mov	r4, r2
 8006ee8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006eec:	4620      	mov	r0, r4
 8006eee:	4629      	mov	r1, r5
 8006ef0:	f7f9 fde8 	bl	8000ac4 <__aeabi_d2iz>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	4630      	mov	r0, r6
 8006efa:	eeb0 0a48 	vmov.f32	s0, s16
 8006efe:	f7fa f929 	bl	8001154 <PWM_Satuation>
 8006f02:	ee07 0a90 	vmov	s15, r0
 8006f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f0a:	4b11      	ldr	r3, [pc, #68]	@ (8006f50 <update_velocity_control+0x3f0>)
 8006f0c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006f10:	4b1a      	ldr	r3, [pc, #104]	@ (8006f7c <update_velocity_control+0x41c>)
 8006f12:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006f16:	eef0 0a67 	vmov.f32	s1, s15
 8006f1a:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8006f80 <update_velocity_control+0x420>
 8006f1e:	4819      	ldr	r0, [pc, #100]	@ (8006f84 <update_velocity_control+0x424>)
 8006f20:	f7fa fa30 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006f24:	4b0a      	ldr	r3, [pc, #40]	@ (8006f50 <update_velocity_control+0x3f0>)
 8006f26:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006f2a:	eef0 0a67 	vmov.f32	s1, s15
 8006f2e:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8006f80 <update_velocity_control+0x420>
 8006f32:	4815      	ldr	r0, [pc, #84]	@ (8006f88 <update_velocity_control+0x428>)
 8006f34:	f7fa fa26 	bl	8001384 <MDXX_set_range>
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	ecbd 8b02 	vpop	{d8}
 8006f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f46:	bf00      	nop
 8006f48:	47ae147b 	.word	0x47ae147b
 8006f4c:	3f847ae1 	.word	0x3f847ae1
 8006f50:	2000074c 	.word	0x2000074c
 8006f54:	200009f0 	.word	0x200009f0
 8006f58:	20000994 	.word	0x20000994
 8006f5c:	447a0000 	.word	0x447a0000
 8006f60:	20000b24 	.word	0x20000b24
 8006f64:	200008cc 	.word	0x200008cc
 8006f68:	3f4ccccd 	.word	0x3f4ccccd
 8006f6c:	3e4ccccd 	.word	0x3e4ccccd
 8006f70:	200008d0 	.word	0x200008d0
 8006f74:	3e333333 	.word	0x3e333333
 8006f78:	20000000 	.word	0x20000000
 8006f7c:	20000708 	.word	0x20000708
 8006f80:	44fa0000 	.word	0x44fa0000
 8006f84:	200008fc 	.word	0x200008fc
 8006f88:	20000948 	.word	0x20000948

08006f8c <update_control_loops>:

void update_control_loops(void) {
 8006f8c:	b590      	push	{r4, r7, lr}
 8006f8e:	ed2d 8b02 	vpush	{d8}
 8006f92:	b089      	sub	sp, #36	@ 0x24
 8006f94:	af00      	add	r7, sp, #0
	normalized_position = normalize_angle(revolute_encoder.rads);
 8006f96:	4b81      	ldr	r3, [pc, #516]	@ (800719c <update_control_loops+0x210>)
 8006f98:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8006fa0:	f7ff f90c 	bl	80061bc <normalize_angle>
 8006fa4:	eef0 7a40 	vmov.f32	s15, s0
 8006fa8:	4b7d      	ldr	r3, [pc, #500]	@ (80071a0 <update_control_loops+0x214>)
 8006faa:	edc3 7a00 	vstr	s15, [r3]

	if (is_emergency_active()) {
 8006fae:	f000 fd69 	bl	8007a84 <is_emergency_active>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d015      	beq.n	8006fe4 <update_control_loops+0x58>
		emergency_stop_all_motors();
 8006fb8:	f000 fcb4 	bl	8007924 <emergency_stop_all_motors>
		prismatic_axis.mm = prismatic_encoder.mm;
 8006fbc:	4b79      	ldr	r3, [pc, #484]	@ (80071a4 <update_control_loops+0x218>)
 8006fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fc0:	4a79      	ldr	r2, [pc, #484]	@ (80071a8 <update_control_loops+0x21c>)
 8006fc2:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006fc4:	4b76      	ldr	r3, [pc, #472]	@ (80071a0 <update_control_loops+0x214>)
 8006fc6:	edd3 7a00 	vldr	s15, [r3]
 8006fca:	220e      	movs	r2, #14
 8006fcc:	210f      	movs	r1, #15
 8006fce:	eeb0 0a67 	vmov.f32	s0, s15
 8006fd2:	4876      	ldr	r0, [pc, #472]	@ (80071ac <update_control_loops+0x220>)
 8006fd4:	f7fd fdf8 	bl	8004bc8 <UnitConverter_angle>
 8006fd8:	eef0 7a40 	vmov.f32	s15, s0
 8006fdc:	4b74      	ldr	r3, [pc, #464]	@ (80071b0 <update_control_loops+0x224>)
 8006fde:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 8006fe2:	e2f7      	b.n	80075d4 <update_control_loops+0x648>
	}

	// Handle all homing states except HOMING_REV_TO_ZERO_DEG with direct motor control
	if (homing_active && homing_state != HOMING_REV_TO_ZERO_DEG) {
 8006fe4:	4b73      	ldr	r3, [pc, #460]	@ (80071b4 <update_control_loops+0x228>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d02d      	beq.n	8007048 <update_control_loops+0xbc>
 8006fec:	4b72      	ldr	r3, [pc, #456]	@ (80071b8 <update_control_loops+0x22c>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	2b07      	cmp	r3, #7
 8006ff2:	d029      	beq.n	8007048 <update_control_loops+0xbc>
		update_homing_sequence();
 8006ff4:	f7fe fd32 	bl	8005a5c <update_homing_sequence>
		MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006ff8:	4b6b      	ldr	r3, [pc, #428]	@ (80071a8 <update_control_loops+0x21c>)
 8006ffa:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006ffe:	eef0 0a67 	vmov.f32	s1, s15
 8007002:	ed9f 0a6e 	vldr	s0, [pc, #440]	@ 80071bc <update_control_loops+0x230>
 8007006:	486e      	ldr	r0, [pc, #440]	@ (80071c0 <update_control_loops+0x234>)
 8007008:	f7fa f9bc 	bl	8001384 <MDXX_set_range>
		MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 800700c:	4b68      	ldr	r3, [pc, #416]	@ (80071b0 <update_control_loops+0x224>)
 800700e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007012:	eef0 0a67 	vmov.f32	s1, s15
 8007016:	ed9f 0a69 	vldr	s0, [pc, #420]	@ 80071bc <update_control_loops+0x230>
 800701a:	486a      	ldr	r0, [pc, #424]	@ (80071c4 <update_control_loops+0x238>)
 800701c:	f7fa f9b2 	bl	8001384 <MDXX_set_range>
		prismatic_axis.mm = prismatic_encoder.mm;
 8007020:	4b60      	ldr	r3, [pc, #384]	@ (80071a4 <update_control_loops+0x218>)
 8007022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007024:	4a60      	ldr	r2, [pc, #384]	@ (80071a8 <update_control_loops+0x21c>)
 8007026:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 8007028:	4b5d      	ldr	r3, [pc, #372]	@ (80071a0 <update_control_loops+0x214>)
 800702a:	edd3 7a00 	vldr	s15, [r3]
 800702e:	220e      	movs	r2, #14
 8007030:	210f      	movs	r1, #15
 8007032:	eeb0 0a67 	vmov.f32	s0, s15
 8007036:	485d      	ldr	r0, [pc, #372]	@ (80071ac <update_control_loops+0x220>)
 8007038:	f7fd fdc6 	bl	8004bc8 <UnitConverter_angle>
 800703c:	eef0 7a40 	vmov.f32	s15, s0
 8007040:	4b5b      	ldr	r3, [pc, #364]	@ (80071b0 <update_control_loops+0x224>)
 8007042:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 8007046:	e2c5      	b.n	80075d4 <update_control_loops+0x648>
	}

	// Handle HOMING_REV_TO_ZERO_DEG: use trajectory system + check completion
	if (homing_active && homing_state == HOMING_REV_TO_ZERO_DEG) {
 8007048:	4b5a      	ldr	r3, [pc, #360]	@ (80071b4 <update_control_loops+0x228>)
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d01d      	beq.n	800708c <update_control_loops+0x100>
 8007050:	4b59      	ldr	r3, [pc, #356]	@ (80071b8 <update_control_loops+0x22c>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	2b07      	cmp	r3, #7
 8007056:	d119      	bne.n	800708c <update_control_loops+0x100>
		// First, update the homing sequence to handle trajectory start/completion
		update_homing_sequence();
 8007058:	f7fe fd00 	bl	8005a5c <update_homing_sequence>

		// If still in HOMING_REV_TO_ZERO_DEG after update, continue with trajectory control
		if (homing_state == HOMING_REV_TO_ZERO_DEG) {
 800705c:	4b56      	ldr	r3, [pc, #344]	@ (80071b8 <update_control_loops+0x22c>)
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	2b07      	cmp	r3, #7
 8007062:	d013      	beq.n	800708c <update_control_loops+0x100>
			// Let the trajectory system handle the motion
			// Fall through to the switch statement below
		} else {
			// Homing sequence advanced to next state, return
			prismatic_axis.mm = prismatic_encoder.mm;
 8007064:	4b4f      	ldr	r3, [pc, #316]	@ (80071a4 <update_control_loops+0x218>)
 8007066:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007068:	4a4f      	ldr	r2, [pc, #316]	@ (80071a8 <update_control_loops+0x21c>)
 800706a:	6393      	str	r3, [r2, #56]	@ 0x38
			revolute_axis.deg = UnitConverter_angle(&converter_system,
 800706c:	4b4c      	ldr	r3, [pc, #304]	@ (80071a0 <update_control_loops+0x214>)
 800706e:	edd3 7a00 	vldr	s15, [r3]
 8007072:	220e      	movs	r2, #14
 8007074:	210f      	movs	r1, #15
 8007076:	eeb0 0a67 	vmov.f32	s0, s15
 800707a:	484c      	ldr	r0, [pc, #304]	@ (80071ac <update_control_loops+0x220>)
 800707c:	f7fd fda4 	bl	8004bc8 <UnitConverter_angle>
 8007080:	eef0 7a40 	vmov.f32	s15, s0
 8007084:	4b4a      	ldr	r3, [pc, #296]	@ (80071b0 <update_control_loops+0x224>)
 8007086:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
					normalized_position, UNIT_RADIAN, UNIT_DEGREE);
			return;
 800708a:	e2a3      	b.n	80075d4 <update_control_loops+0x648>
	//100 point
	// Add a new state variable at the top with other J1 variables
	static bool j1_pen_down_complete = false;

	// Modify the J1 update logic in update_control_loops():
	if (j1_active && motion_sequence_state == MOTION_IDLE) {
 800708c:	4b4e      	ldr	r3, [pc, #312]	@ (80071c8 <update_control_loops+0x23c>)
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d048      	beq.n	8007126 <update_control_loops+0x19a>
 8007094:	4b4d      	ldr	r3, [pc, #308]	@ (80071cc <update_control_loops+0x240>)
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d144      	bne.n	8007126 <update_control_loops+0x19a>
		if (j1_going_to_target) {
 800709c:	4b4c      	ldr	r3, [pc, #304]	@ (80071d0 <update_control_loops+0x244>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d01f      	beq.n	80070e4 <update_control_loops+0x158>
			if (!j1_pen_down_complete) {
 80070a4:	4b4b      	ldr	r3, [pc, #300]	@ (80071d4 <update_control_loops+0x248>)
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	f083 0301 	eor.w	r3, r3, #1
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d039      	beq.n	8007126 <update_control_loops+0x19a>
				// Wait a bit for pen to be down
				static uint32_t j1_pen_delay = 0;
				j1_pen_delay++;
 80070b2:	4b49      	ldr	r3, [pc, #292]	@ (80071d8 <update_control_loops+0x24c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	3301      	adds	r3, #1
 80070b8:	4a47      	ldr	r2, [pc, #284]	@ (80071d8 <update_control_loops+0x24c>)
 80070ba:	6013      	str	r3, [r2, #0]

				if (j1_pen_delay >= 250) { // 250 ms delay after reaching target
 80070bc:	4b46      	ldr	r3, [pc, #280]	@ (80071d8 <update_control_loops+0x24c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2bf9      	cmp	r3, #249	@ 0xf9
 80070c2:	d930      	bls.n	8007126 <update_control_loops+0x19a>
					j1_pen_delay = 0;
 80070c4:	4b44      	ldr	r3, [pc, #272]	@ (80071d8 <update_control_loops+0x24c>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	601a      	str	r2, [r3, #0]
					j1_pen_down_complete = true;
 80070ca:	4b42      	ldr	r3, [pc, #264]	@ (80071d4 <update_control_loops+0x248>)
 80070cc:	2201      	movs	r2, #1
 80070ce:	701a      	strb	r2, [r3, #0]
					j1_going_to_target = false;
 80070d0:	4b3f      	ldr	r3, [pc, #252]	@ (80071d0 <update_control_loops+0x244>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	701a      	strb	r2, [r3, #0]
					start_combined_trajectory(0.0f, 0.0f); // Now go back to 0,0
 80070d6:	eddf 0a41 	vldr	s1, [pc, #260]	@ 80071dc <update_control_loops+0x250>
 80070da:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 80071dc <update_control_loops+0x250>
 80070de:	f7ff f9e1 	bl	80064a4 <start_combined_trajectory>
 80070e2:	e020      	b.n	8007126 <update_control_loops+0x19a>
				}
			}
		} else {
			// Reset flag for next cycle
			j1_pen_down_complete = false;
 80070e4:	4b3b      	ldr	r3, [pc, #236]	@ (80071d4 <update_control_loops+0x248>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	701a      	strb	r2, [r3, #0]

			j1_cycle_count++;
 80070ea:	4b3d      	ldr	r3, [pc, #244]	@ (80071e0 <update_control_loops+0x254>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	3301      	adds	r3, #1
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	4b3b      	ldr	r3, [pc, #236]	@ (80071e0 <update_control_loops+0x254>)
 80070f4:	701a      	strb	r2, [r3, #0]
			if (j1_cycle_count >= 10) {
 80070f6:	4b3a      	ldr	r3, [pc, #232]	@ (80071e0 <update_control_loops+0x254>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	2b09      	cmp	r3, #9
 80070fc:	d906      	bls.n	800710c <update_control_loops+0x180>
				// finish 100
				j1_active = false;
 80070fe:	4b32      	ldr	r3, [pc, #200]	@ (80071c8 <update_control_loops+0x23c>)
 8007100:	2200      	movs	r2, #0
 8007102:	701a      	strb	r2, [r3, #0]
				j1_cycle_count = 0;
 8007104:	4b36      	ldr	r3, [pc, #216]	@ (80071e0 <update_control_loops+0x254>)
 8007106:	2200      	movs	r2, #0
 8007108:	701a      	strb	r2, [r3, #0]
 800710a:	e00c      	b.n	8007126 <update_control_loops+0x19a>
			} else {
				// start again
				j1_going_to_target = true;
 800710c:	4b30      	ldr	r3, [pc, #192]	@ (80071d0 <update_control_loops+0x244>)
 800710e:	2201      	movs	r2, #1
 8007110:	701a      	strb	r2, [r3, #0]
				start_combined_trajectory(J1_TARGET_PRIS, J1_TARGET_REV);
 8007112:	eddf 7a34 	vldr	s15, [pc, #208]	@ 80071e4 <update_control_loops+0x258>
 8007116:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80071e8 <update_control_loops+0x25c>
 800711a:	eef0 0a47 	vmov.f32	s1, s14
 800711e:	eeb0 0a67 	vmov.f32	s0, s15
 8007122:	f7ff f9bf 	bl	80064a4 <start_combined_trajectory>
			}
		}
	}

	// Motion sequence handling
	switch (motion_sequence_state) {
 8007126:	4b29      	ldr	r3, [pc, #164]	@ (80071cc <update_control_loops+0x240>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	3b01      	subs	r3, #1
 800712c:	2b05      	cmp	r3, #5
 800712e:	f200 8239 	bhi.w	80075a4 <update_control_loops+0x618>
 8007132:	a201      	add	r2, pc, #4	@ (adr r2, 8007138 <update_control_loops+0x1ac>)
 8007134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007138:	08007151 	.word	0x08007151
 800713c:	080075a5 	.word	0x080075a5
 8007140:	080075a5 	.word	0x080075a5
 8007144:	080071fd 	.word	0x080071fd
 8007148:	08007541 	.word	0x08007541
 800714c:	0800759d 	.word	0x0800759d
	case MOTION_PEN_UP_DELAY:
		if (++motion_delay_timer >= 500) {
 8007150:	4b26      	ldr	r3, [pc, #152]	@ (80071ec <update_control_loops+0x260>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3301      	adds	r3, #1
 8007156:	4a25      	ldr	r2, [pc, #148]	@ (80071ec <update_control_loops+0x260>)
 8007158:	6013      	str	r3, [r2, #0]
 800715a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800715e:	f0c0 8223 	bcc.w	80075a8 <update_control_loops+0x61c>
			// ใช้ sync motion สำหรับทุกกรณี รวมถึง homing
			if (current_drawing_sequence.sequence_active && drawing_pen_state) {
 8007162:	4b23      	ldr	r3, [pc, #140]	@ (80071f0 <update_control_loops+0x264>)
 8007164:	799b      	ldrb	r3, [r3, #6]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d005      	beq.n	8007176 <update_control_loops+0x1ea>
 800716a:	4b22      	ldr	r3, [pc, #136]	@ (80071f4 <update_control_loops+0x268>)
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <update_control_loops+0x1ea>
				plotter_pen_down();
 8007172:	f002 fe03 	bl	8009d7c <plotter_pen_down>
			}
			if (!sync_motion_active) {
 8007176:	4b20      	ldr	r3, [pc, #128]	@ (80071f8 <update_control_loops+0x26c>)
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	f083 0301 	eor.w	r3, r3, #1
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b00      	cmp	r3, #0
 8007182:	d007      	beq.n	8007194 <update_control_loops+0x208>
				prismatic_axis.trajectory_active = true;
 8007184:	4b08      	ldr	r3, [pc, #32]	@ (80071a8 <update_control_loops+0x21c>)
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				revolute_axis.trajectory_active = true;
 800718c:	4b08      	ldr	r3, [pc, #32]	@ (80071b0 <update_control_loops+0x224>)
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			}
			motion_sequence_state = MOTION_BOTH_AXES_ACTIVE;
 8007194:	4b0d      	ldr	r3, [pc, #52]	@ (80071cc <update_control_loops+0x240>)
 8007196:	2204      	movs	r2, #4
 8007198:	701a      	strb	r2, [r3, #0]
		}
		break;
 800719a:	e205      	b.n	80075a8 <update_control_loops+0x61c>
 800719c:	200009f0 	.word	0x200009f0
 80071a0:	20000800 	.word	0x20000800
 80071a4:	20000994 	.word	0x20000994
 80071a8:	20000708 	.word	0x20000708
 80071ac:	20000d88 	.word	0x20000d88
 80071b0:	2000074c 	.word	0x2000074c
 80071b4:	200007ef 	.word	0x200007ef
 80071b8:	200007ee 	.word	0x200007ee
 80071bc:	44fa0000 	.word	0x44fa0000
 80071c0:	200008fc 	.word	0x200008fc
 80071c4:	20000948 	.word	0x20000948
 80071c8:	20000899 	.word	0x20000899
 80071cc:	20000790 	.word	0x20000790
 80071d0:	20000335 	.word	0x20000335
 80071d4:	200008d4 	.word	0x200008d4
 80071d8:	200008d8 	.word	0x200008d8
 80071dc:	00000000 	.word	0x00000000
 80071e0:	20000898 	.word	0x20000898
 80071e4:	43480000 	.word	0x43480000
 80071e8:	42b40000 	.word	0x42b40000
 80071ec:	200007e4 	.word	0x200007e4
 80071f0:	200008b4 	.word	0x200008b4
 80071f4:	200008c0 	.word	0x200008c0
 80071f8:	200008b0 	.word	0x200008b0

	case MOTION_BOTH_AXES_ACTIVE: {
		bool motion_finished = false;
 80071fc:	2300      	movs	r3, #0
 80071fe:	77fb      	strb	r3, [r7, #31]

		static float last_pris_pos_sync = -999999.0f;
		static float last_rev_pos_sync = -999999.0f;
		static bool last_sync_active = false;

		if (sync_motion_active) {
 8007200:	4b65      	ldr	r3, [pc, #404]	@ (8007398 <update_control_loops+0x40c>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 80e9 	beq.w	80073dc <update_control_loops+0x450>
			// Time-synchronized motion
			sync_start_time += 0.001f; // Assuming 1ms control loop
 800720a:	4b64      	ldr	r3, [pc, #400]	@ (800739c <update_control_loops+0x410>)
 800720c:	edd3 7a00 	vldr	s15, [r3]
 8007210:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 80073a0 <update_control_loops+0x414>
 8007214:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007218:	4b60      	ldr	r3, [pc, #384]	@ (800739c <update_control_loops+0x410>)
 800721a:	edc3 7a00 	vstr	s15, [r3]

			float progress = sync_start_time / sync_total_time;
 800721e:	4b5f      	ldr	r3, [pc, #380]	@ (800739c <update_control_loops+0x410>)
 8007220:	edd3 6a00 	vldr	s13, [r3]
 8007224:	4b5f      	ldr	r3, [pc, #380]	@ (80073a4 <update_control_loops+0x418>)
 8007226:	ed93 7a00 	vldr	s14, [r3]
 800722a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800722e:	edc7 7a06 	vstr	s15, [r7, #24]
			if (progress >= 1.0f) {
 8007232:	edd7 7a06 	vldr	s15, [r7, #24]
 8007236:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800723a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800723e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007242:	db04      	blt.n	800724e <update_control_loops+0x2c2>
				progress = 1.0f;
 8007244:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8007248:	61bb      	str	r3, [r7, #24]
				motion_finished = true;
 800724a:	2301      	movs	r3, #1
 800724c:	77fb      	strb	r3, [r7, #31]
			}

			// Apply smooth S-curve to progress for better motion profile
			float smooth_progress = progress * progress
 800724e:	edd7 7a06 	vldr	s15, [r7, #24]
 8007252:	ee27 7aa7 	vmul.f32	s14, s15, s15
					* (3.0f - 2.0f * progress); // Smoothstep function
 8007256:	edd7 7a06 	vldr	s15, [r7, #24]
 800725a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800725e:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8007262:	ee76 7ae7 	vsub.f32	s15, s13, s15
			float smooth_progress = progress * progress
 8007266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726a:	edc7 7a04 	vstr	s15, [r7, #16]

			// Calculate synchronized positions
			if (!(homing_active && homing_state == HOMING_REV_TO_ZERO_DEG)) {
 800726e:	4b4e      	ldr	r3, [pc, #312]	@ (80073a8 <update_control_loops+0x41c>)
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	f083 0301 	eor.w	r3, r3, #1
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b00      	cmp	r3, #0
 800727a:	d103      	bne.n	8007284 <update_control_loops+0x2f8>
 800727c:	4b4b      	ldr	r3, [pc, #300]	@ (80073ac <update_control_loops+0x420>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	2b07      	cmp	r3, #7
 8007282:	d035      	beq.n	80072f0 <update_control_loops+0x364>
				// Prismatic axis synchronized position
				prismatic_axis.position = prismatic_axis.initial_pos
 8007284:	4b4a      	ldr	r3, [pc, #296]	@ (80073b0 <update_control_loops+0x424>)
 8007286:	ed93 7a03 	vldr	s14, [r3, #12]
						+ (prismatic_axis.target_pos
 800728a:	4b49      	ldr	r3, [pc, #292]	@ (80073b0 <update_control_loops+0x424>)
 800728c:	edd3 6a04 	vldr	s13, [r3, #16]
								- prismatic_axis.initial_pos) * smooth_progress;
 8007290:	4b47      	ldr	r3, [pc, #284]	@ (80073b0 <update_control_loops+0x424>)
 8007292:	edd3 7a03 	vldr	s15, [r3, #12]
 8007296:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800729a:	edd7 7a04 	vldr	s15, [r7, #16]
 800729e:	ee66 7aa7 	vmul.f32	s15, s13, s15
						+ (prismatic_axis.target_pos
 80072a2:	ee77 7a27 	vadd.f32	s15, s14, s15
				prismatic_axis.position = prismatic_axis.initial_pos
 80072a6:	4b42      	ldr	r3, [pc, #264]	@ (80073b0 <update_control_loops+0x424>)
 80072a8:	edc3 7a00 	vstr	s15, [r3]

				// Calculate velocity (derivative of position)
				// FIX: Use instance-specific variables instead of static
				if (!last_sync_active) {
 80072ac:	4b41      	ldr	r3, [pc, #260]	@ (80073b4 <update_control_loops+0x428>)
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	f083 0301 	eor.w	r3, r3, #1
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d007      	beq.n	80072ca <update_control_loops+0x33e>
					last_pris_pos_sync = prismatic_axis.position;
 80072ba:	4b3d      	ldr	r3, [pc, #244]	@ (80073b0 <update_control_loops+0x424>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a3e      	ldr	r2, [pc, #248]	@ (80073b8 <update_control_loops+0x42c>)
 80072c0:	6013      	str	r3, [r2, #0]
					last_rev_pos_sync = revolute_axis.position;
 80072c2:	4b3e      	ldr	r3, [pc, #248]	@ (80073bc <update_control_loops+0x430>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a3e      	ldr	r2, [pc, #248]	@ (80073c0 <update_control_loops+0x434>)
 80072c8:	6013      	str	r3, [r2, #0]
				}
				prismatic_axis.velocity = (prismatic_axis.position
 80072ca:	4b39      	ldr	r3, [pc, #228]	@ (80073b0 <update_control_loops+0x424>)
 80072cc:	ed93 7a00 	vldr	s14, [r3]
						- last_pris_pos_sync) / 0.001f; // mm/s
 80072d0:	4b39      	ldr	r3, [pc, #228]	@ (80073b8 <update_control_loops+0x42c>)
 80072d2:	edd3 7a00 	vldr	s15, [r3]
 80072d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80072da:	eddf 6a31 	vldr	s13, [pc, #196]	@ 80073a0 <update_control_loops+0x414>
 80072de:	eec7 7a26 	vdiv.f32	s15, s14, s13
				prismatic_axis.velocity = (prismatic_axis.position
 80072e2:	4b33      	ldr	r3, [pc, #204]	@ (80073b0 <update_control_loops+0x424>)
 80072e4:	edc3 7a01 	vstr	s15, [r3, #4]
				last_pris_pos_sync = prismatic_axis.position;
 80072e8:	4b31      	ldr	r3, [pc, #196]	@ (80073b0 <update_control_loops+0x424>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a32      	ldr	r2, [pc, #200]	@ (80073b8 <update_control_loops+0x42c>)
 80072ee:	6013      	str	r3, [r2, #0]
			}

			// Revolute axis synchronized position
			revolute_axis.position = revolute_axis.initial_pos
 80072f0:	4b32      	ldr	r3, [pc, #200]	@ (80073bc <update_control_loops+0x430>)
 80072f2:	ed93 7a03 	vldr	s14, [r3, #12]
					+ (revolute_axis.target_pos - revolute_axis.initial_pos)
 80072f6:	4b31      	ldr	r3, [pc, #196]	@ (80073bc <update_control_loops+0x430>)
 80072f8:	edd3 6a04 	vldr	s13, [r3, #16]
 80072fc:	4b2f      	ldr	r3, [pc, #188]	@ (80073bc <update_control_loops+0x430>)
 80072fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8007302:	ee76 6ae7 	vsub.f32	s13, s13, s15
							* smooth_progress;
 8007306:	edd7 7a04 	vldr	s15, [r7, #16]
 800730a:	ee66 7aa7 	vmul.f32	s15, s13, s15
					+ (revolute_axis.target_pos - revolute_axis.initial_pos)
 800730e:	ee77 7a27 	vadd.f32	s15, s14, s15
			revolute_axis.position = revolute_axis.initial_pos
 8007312:	4b2a      	ldr	r3, [pc, #168]	@ (80073bc <update_control_loops+0x430>)
 8007314:	edc3 7a00 	vstr	s15, [r3]

			// Calculate velocity (derivative of position)
			static float last_rev_pos_sync = -999999.0f; // Initialize to impossible value
			if (last_rev_pos_sync == -999999.0f) {
 8007318:	4b2a      	ldr	r3, [pc, #168]	@ (80073c4 <update_control_loops+0x438>)
 800731a:	edd3 7a00 	vldr	s15, [r3]
 800731e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80073c8 <update_control_loops+0x43c>
 8007322:	eef4 7a47 	vcmp.f32	s15, s14
 8007326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800732a:	d103      	bne.n	8007334 <update_control_loops+0x3a8>
				last_rev_pos_sync = revolute_axis.position;
 800732c:	4b23      	ldr	r3, [pc, #140]	@ (80073bc <update_control_loops+0x430>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a24      	ldr	r2, [pc, #144]	@ (80073c4 <update_control_loops+0x438>)
 8007332:	6013      	str	r3, [r2, #0]
			}
			revolute_axis.velocity =
					(revolute_axis.position - last_rev_pos_sync) / 0.001f; // rad/s
 8007334:	4b21      	ldr	r3, [pc, #132]	@ (80073bc <update_control_loops+0x430>)
 8007336:	ed93 7a00 	vldr	s14, [r3]
 800733a:	4b22      	ldr	r3, [pc, #136]	@ (80073c4 <update_control_loops+0x438>)
 800733c:	edd3 7a00 	vldr	s15, [r3]
 8007340:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007344:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80073a0 <update_control_loops+0x414>
 8007348:	eec7 7a26 	vdiv.f32	s15, s14, s13
			revolute_axis.velocity =
 800734c:	4b1b      	ldr	r3, [pc, #108]	@ (80073bc <update_control_loops+0x430>)
 800734e:	edc3 7a01 	vstr	s15, [r3, #4]
			last_rev_pos_sync = revolute_axis.position;
 8007352:	4b1a      	ldr	r3, [pc, #104]	@ (80073bc <update_control_loops+0x430>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a1b      	ldr	r2, [pc, #108]	@ (80073c4 <update_control_loops+0x438>)
 8007358:	6013      	str	r3, [r2, #0]

			if (motion_finished) {
 800735a:	7ffb      	ldrb	r3, [r7, #31]
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 80ea 	beq.w	8007536 <update_control_loops+0x5aa>
				// Motion completed
				prismatic_axis.position = prismatic_encoder.mm;
 8007362:	4b1a      	ldr	r3, [pc, #104]	@ (80073cc <update_control_loops+0x440>)
 8007364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007366:	4a12      	ldr	r2, [pc, #72]	@ (80073b0 <update_control_loops+0x424>)
 8007368:	6013      	str	r3, [r2, #0]
				revolute_axis.position = revolute_encoder.rads;
 800736a:	4b19      	ldr	r3, [pc, #100]	@ (80073d0 <update_control_loops+0x444>)
 800736c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736e:	4a13      	ldr	r2, [pc, #76]	@ (80073bc <update_control_loops+0x430>)
 8007370:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = 0.0f;
 8007372:	4b0f      	ldr	r3, [pc, #60]	@ (80073b0 <update_control_loops+0x424>)
 8007374:	f04f 0200 	mov.w	r2, #0
 8007378:	605a      	str	r2, [r3, #4]
				revolute_axis.velocity = 0.0f;
 800737a:	4b10      	ldr	r3, [pc, #64]	@ (80073bc <update_control_loops+0x430>)
 800737c:	f04f 0200 	mov.w	r2, #0
 8007380:	605a      	str	r2, [r3, #4]

				sync_motion_active = false;
 8007382:	4b05      	ldr	r3, [pc, #20]	@ (8007398 <update_control_loops+0x40c>)
 8007384:	2200      	movs	r2, #0
 8007386:	701a      	strb	r2, [r3, #0]
				motion_delay_timer = 0;
 8007388:	4b12      	ldr	r3, [pc, #72]	@ (80073d4 <update_control_loops+0x448>)
 800738a:	2200      	movs	r2, #0
 800738c:	601a      	str	r2, [r3, #0]
				motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 800738e:	4b12      	ldr	r3, [pc, #72]	@ (80073d8 <update_control_loops+0x44c>)
 8007390:	2205      	movs	r2, #5
 8007392:	701a      	strb	r2, [r3, #0]
 8007394:	e0cf      	b.n	8007536 <update_control_loops+0x5aa>
 8007396:	bf00      	nop
 8007398:	200008b0 	.word	0x200008b0
 800739c:	200008a8 	.word	0x200008a8
 80073a0:	3a83126f 	.word	0x3a83126f
 80073a4:	200008ac 	.word	0x200008ac
 80073a8:	200007ef 	.word	0x200007ef
 80073ac:	200007ee 	.word	0x200007ee
 80073b0:	20000708 	.word	0x20000708
 80073b4:	200008dc 	.word	0x200008dc
 80073b8:	200005b4 	.word	0x200005b4
 80073bc:	2000074c 	.word	0x2000074c
 80073c0:	200005b8 	.word	0x200005b8
 80073c4:	200005bc 	.word	0x200005bc
 80073c8:	c97423f0 	.word	0xc97423f0
 80073cc:	20000994 	.word	0x20000994
 80073d0:	200009f0 	.word	0x200009f0
 80073d4:	200007e4 	.word	0x200007e4
 80073d8:	20000790 	.word	0x20000790
			}

		} else {
			// Original trapezoidal motion (for homing)
			bool pris_finished = true;  // Default to true for homing case
 80073dc:	2301      	movs	r3, #1
 80073de:	75fb      	strb	r3, [r7, #23]
			bool rev_finished = false;
 80073e0:	2300      	movs	r3, #0
 80073e2:	75bb      	strb	r3, [r7, #22]

			// Handle prismatic axis (skip if in homing mode)
			if (!(homing_active && homing_state == HOMING_REV_TO_ZERO_DEG)) {
 80073e4:	4b7e      	ldr	r3, [pc, #504]	@ (80075e0 <update_control_loops+0x654>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	f083 0301 	eor.w	r3, r3, #1
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d103      	bne.n	80073fa <update_control_loops+0x46e>
 80073f2:	4b7c      	ldr	r3, [pc, #496]	@ (80075e4 <update_control_loops+0x658>)
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	2b07      	cmp	r3, #7
 80073f8:	d048      	beq.n	800748c <update_control_loops+0x500>
				if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 80073fa:	4b7b      	ldr	r3, [pc, #492]	@ (80075e8 <update_control_loops+0x65c>)
 80073fc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007400:	2b00      	cmp	r3, #0
 8007402:	d043      	beq.n	800748c <update_control_loops+0x500>
 8007404:	4b79      	ldr	r3, [pc, #484]	@ (80075ec <update_control_loops+0x660>)
 8007406:	7c1b      	ldrb	r3, [r3, #16]
 8007408:	f083 0301 	eor.w	r3, r3, #1
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d03c      	beq.n	800748c <update_control_loops+0x500>
					Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007412:	4b75      	ldr	r3, [pc, #468]	@ (80075e8 <update_control_loops+0x65c>)
 8007414:	ed93 8a03 	vldr	s16, [r3, #12]
 8007418:	4b73      	ldr	r3, [pc, #460]	@ (80075e8 <update_control_loops+0x65c>)
 800741a:	edd3 8a04 	vldr	s17, [r3, #16]
							prismatic_axis.initial_pos,
							prismatic_axis.target_pos,
							ZGX45RGG_400RPM_Constant.traject_sd_max,
 800741e:	4b74      	ldr	r3, [pc, #464]	@ (80075f0 <update_control_loops+0x664>)
 8007420:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
					Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007424:	4610      	mov	r0, r2
 8007426:	4619      	mov	r1, r3
 8007428:	f7f9 fb94 	bl	8000b54 <__aeabi_d2f>
 800742c:	4604      	mov	r4, r0
							ZGX45RGG_400RPM_Constant.traject_sdd_max);
 800742e:	4b70      	ldr	r3, [pc, #448]	@ (80075f0 <update_control_loops+0x664>)
 8007430:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
					Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007434:	4610      	mov	r0, r2
 8007436:	4619      	mov	r1, r3
 8007438:	f7f9 fb8c 	bl	8000b54 <__aeabi_d2f>
 800743c:	4603      	mov	r3, r0
 800743e:	ee01 3a90 	vmov	s3, r3
 8007442:	ee01 4a10 	vmov	s2, r4
 8007446:	eef0 0a68 	vmov.f32	s1, s17
 800744a:	eeb0 0a48 	vmov.f32	s0, s16
 800744e:	4967      	ldr	r1, [pc, #412]	@ (80075ec <update_control_loops+0x660>)
 8007450:	4868      	ldr	r0, [pc, #416]	@ (80075f4 <update_control_loops+0x668>)
 8007452:	f7fd f821 	bl	8004498 <Trapezoidal_Evaluated>

					prismatic_axis.position = prisEva.setposition;
 8007456:	4b65      	ldr	r3, [pc, #404]	@ (80075ec <update_control_loops+0x660>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a63      	ldr	r2, [pc, #396]	@ (80075e8 <update_control_loops+0x65c>)
 800745c:	6013      	str	r3, [r2, #0]
					prismatic_axis.velocity = prisEva.setvelocity;
 800745e:	4b63      	ldr	r3, [pc, #396]	@ (80075ec <update_control_loops+0x660>)
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	4a61      	ldr	r2, [pc, #388]	@ (80075e8 <update_control_loops+0x65c>)
 8007464:	6053      	str	r3, [r2, #4]
					pris_finished = prisEva.isFinised;
 8007466:	4b61      	ldr	r3, [pc, #388]	@ (80075ec <update_control_loops+0x660>)
 8007468:	7c1b      	ldrb	r3, [r3, #16]
 800746a:	75fb      	strb	r3, [r7, #23]

					if (prisEva.isFinised) {
 800746c:	4b5f      	ldr	r3, [pc, #380]	@ (80075ec <update_control_loops+0x660>)
 800746e:	7c1b      	ldrb	r3, [r3, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00b      	beq.n	800748c <update_control_loops+0x500>
						prismatic_axis.trajectory_active = false;
 8007474:	4b5c      	ldr	r3, [pc, #368]	@ (80075e8 <update_control_loops+0x65c>)
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
//						prismatic_axis.position = prisEva.setposition;
						prismatic_axis.position = prismatic_encoder.mm;
 800747c:	4b5e      	ldr	r3, [pc, #376]	@ (80075f8 <update_control_loops+0x66c>)
 800747e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007480:	4a59      	ldr	r2, [pc, #356]	@ (80075e8 <update_control_loops+0x65c>)
 8007482:	6013      	str	r3, [r2, #0]
						prismatic_axis.velocity = 0.0f;
 8007484:	4b58      	ldr	r3, [pc, #352]	@ (80075e8 <update_control_loops+0x65c>)
 8007486:	f04f 0200 	mov.w	r2, #0
 800748a:	605a      	str	r2, [r3, #4]
					}
				}
			}

			// Handle revolute axis
			if (revolute_axis.trajectory_active && !revEva.isFinised) {
 800748c:	4b5b      	ldr	r3, [pc, #364]	@ (80075fc <update_control_loops+0x670>)
 800748e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007492:	2b00      	cmp	r3, #0
 8007494:	d043      	beq.n	800751e <update_control_loops+0x592>
 8007496:	4b5a      	ldr	r3, [pc, #360]	@ (8007600 <update_control_loops+0x674>)
 8007498:	7c1b      	ldrb	r3, [r3, #16]
 800749a:	f083 0301 	eor.w	r3, r3, #1
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d03c      	beq.n	800751e <update_control_loops+0x592>
				Trapezoidal_Evaluated(&revGen, &revEva,
 80074a4:	4b55      	ldr	r3, [pc, #340]	@ (80075fc <update_control_loops+0x670>)
 80074a6:	ed93 8a03 	vldr	s16, [r3, #12]
 80074aa:	4b54      	ldr	r3, [pc, #336]	@ (80075fc <update_control_loops+0x670>)
 80074ac:	edd3 8a04 	vldr	s17, [r3, #16]
						revolute_axis.initial_pos, revolute_axis.target_pos,
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 80074b0:	4b54      	ldr	r3, [pc, #336]	@ (8007604 <update_control_loops+0x678>)
 80074b2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Evaluated(&revGen, &revEva,
 80074b6:	4610      	mov	r0, r2
 80074b8:	4619      	mov	r1, r3
 80074ba:	f7f9 fb4b 	bl	8000b54 <__aeabi_d2f>
 80074be:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80074c0:	4b50      	ldr	r3, [pc, #320]	@ (8007604 <update_control_loops+0x678>)
 80074c2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Evaluated(&revGen, &revEva,
 80074c6:	4610      	mov	r0, r2
 80074c8:	4619      	mov	r1, r3
 80074ca:	f7f9 fb43 	bl	8000b54 <__aeabi_d2f>
 80074ce:	4603      	mov	r3, r0
 80074d0:	ee01 3a90 	vmov	s3, r3
 80074d4:	ee01 4a10 	vmov	s2, r4
 80074d8:	eef0 0a68 	vmov.f32	s1, s17
 80074dc:	eeb0 0a48 	vmov.f32	s0, s16
 80074e0:	4947      	ldr	r1, [pc, #284]	@ (8007600 <update_control_loops+0x674>)
 80074e2:	4849      	ldr	r0, [pc, #292]	@ (8007608 <update_control_loops+0x67c>)
 80074e4:	f7fc ffd8 	bl	8004498 <Trapezoidal_Evaluated>

				revolute_axis.position = revEva.setposition;
 80074e8:	4b45      	ldr	r3, [pc, #276]	@ (8007600 <update_control_loops+0x674>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a43      	ldr	r2, [pc, #268]	@ (80075fc <update_control_loops+0x670>)
 80074ee:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = revEva.setvelocity;
 80074f0:	4b43      	ldr	r3, [pc, #268]	@ (8007600 <update_control_loops+0x674>)
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	4a41      	ldr	r2, [pc, #260]	@ (80075fc <update_control_loops+0x670>)
 80074f6:	6053      	str	r3, [r2, #4]
				rev_finished = revEva.isFinised;
 80074f8:	4b41      	ldr	r3, [pc, #260]	@ (8007600 <update_control_loops+0x674>)
 80074fa:	7c1b      	ldrb	r3, [r3, #16]
 80074fc:	75bb      	strb	r3, [r7, #22]

				if (revEva.isFinised) {
 80074fe:	4b40      	ldr	r3, [pc, #256]	@ (8007600 <update_control_loops+0x674>)
 8007500:	7c1b      	ldrb	r3, [r3, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00b      	beq.n	800751e <update_control_loops+0x592>
					revolute_axis.trajectory_active = false;
 8007506:	4b3d      	ldr	r3, [pc, #244]	@ (80075fc <update_control_loops+0x670>)
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
//					revolute_axis.position = revEva.setposition;
					revolute_axis.position = revolute_encoder.rads;
 800750e:	4b3f      	ldr	r3, [pc, #252]	@ (800760c <update_control_loops+0x680>)
 8007510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007512:	4a3a      	ldr	r2, [pc, #232]	@ (80075fc <update_control_loops+0x670>)
 8007514:	6013      	str	r3, [r2, #0]
					revolute_axis.velocity = 0.0f;
 8007516:	4b39      	ldr	r3, [pc, #228]	@ (80075fc <update_control_loops+0x670>)
 8007518:	f04f 0200 	mov.w	r2, #0
 800751c:	605a      	str	r2, [r3, #4]
				}
			}

			// Check if BOTH axes are finished (or only revolute for homing)
			if (pris_finished && rev_finished) {
 800751e:	7dfb      	ldrb	r3, [r7, #23]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d008      	beq.n	8007536 <update_control_loops+0x5aa>
 8007524:	7dbb      	ldrb	r3, [r7, #22]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d005      	beq.n	8007536 <update_control_loops+0x5aa>
				motion_delay_timer = 0;
 800752a:	4b39      	ldr	r3, [pc, #228]	@ (8007610 <update_control_loops+0x684>)
 800752c:	2200      	movs	r2, #0
 800752e:	601a      	str	r2, [r3, #0]
				motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 8007530:	4b38      	ldr	r3, [pc, #224]	@ (8007614 <update_control_loops+0x688>)
 8007532:	2205      	movs	r2, #5
 8007534:	701a      	strb	r2, [r3, #0]
			}
		}
		last_sync_active = sync_motion_active;
 8007536:	4b38      	ldr	r3, [pc, #224]	@ (8007618 <update_control_loops+0x68c>)
 8007538:	781a      	ldrb	r2, [r3, #0]
 800753a:	4b38      	ldr	r3, [pc, #224]	@ (800761c <update_control_loops+0x690>)
 800753c:	701a      	strb	r2, [r3, #0]
	}
		break;
 800753e:	e036      	b.n	80075ae <update_control_loops+0x622>

	case MOTION_PEN_DOWN_DELAY:
		if (++motion_delay_timer >= 500) {
 8007540:	4b33      	ldr	r3, [pc, #204]	@ (8007610 <update_control_loops+0x684>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	3301      	adds	r3, #1
 8007546:	4a32      	ldr	r2, [pc, #200]	@ (8007610 <update_control_loops+0x684>)
 8007548:	6013      	str	r3, [r2, #0]
 800754a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800754e:	d32d      	bcc.n	80075ac <update_control_loops+0x620>
			if (current_drawing_sequence.sequence_active
 8007550:	4b33      	ldr	r3, [pc, #204]	@ (8007620 <update_control_loops+0x694>)
 8007552:	799b      	ldrb	r3, [r3, #6]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d01b      	beq.n	8007590 <update_control_loops+0x604>
					&& current_drawing_sequence.current_point > 0) {
 8007558:	4b31      	ldr	r3, [pc, #196]	@ (8007620 <update_control_loops+0x694>)
 800755a:	795b      	ldrb	r3, [r3, #5]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d017      	beq.n	8007590 <update_control_loops+0x604>
				// ดูสถานะปากกาจากจุดปัจจุบัน
				DrawingPoint_t current =
						current_drawing_sequence.points[current_drawing_sequence.current_point
 8007560:	4b2f      	ldr	r3, [pc, #188]	@ (8007620 <update_control_loops+0x694>)
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	4b2e      	ldr	r3, [pc, #184]	@ (8007620 <update_control_loops+0x694>)
 8007566:	795b      	ldrb	r3, [r3, #5]
 8007568:	4619      	mov	r1, r3
 800756a:	460b      	mov	r3, r1
 800756c:	005b      	lsls	r3, r3, #1
 800756e:	440b      	add	r3, r1
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	3b0c      	subs	r3, #12
 8007574:	441a      	add	r2, r3
				DrawingPoint_t current =
 8007576:	1d3b      	adds	r3, r7, #4
 8007578:	ca07      	ldmia	r2, {r0, r1, r2}
 800757a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
								- 1];

				if (current.pen_down) {
 800757e:	7b3b      	ldrb	r3, [r7, #12]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d002      	beq.n	800758a <update_control_loops+0x5fe>
					plotter_pen_down();
 8007584:	f002 fbfa 	bl	8009d7c <plotter_pen_down>
					&& current_drawing_sequence.current_point > 0) {
 8007588:	e004      	b.n	8007594 <update_control_loops+0x608>
				} else {
					plotter_pen_up();
 800758a:	f002 fbe7 	bl	8009d5c <plotter_pen_up>
					&& current_drawing_sequence.current_point > 0) {
 800758e:	e001      	b.n	8007594 <update_control_loops+0x608>
				}
			} else {
				// ไม่ได้วาดตัวอักษร - วางปากกาตามปกติ
				plotter_pen_down();
 8007590:	f002 fbf4 	bl	8009d7c <plotter_pen_down>
			}
			motion_sequence_state = MOTION_COMPLETE;
 8007594:	4b1f      	ldr	r3, [pc, #124]	@ (8007614 <update_control_loops+0x688>)
 8007596:	2206      	movs	r2, #6
 8007598:	701a      	strb	r2, [r3, #0]
		}
		break;
 800759a:	e007      	b.n	80075ac <update_control_loops+0x620>

	case MOTION_COMPLETE:
		motion_sequence_state = MOTION_IDLE;
 800759c:	4b1d      	ldr	r3, [pc, #116]	@ (8007614 <update_control_loops+0x688>)
 800759e:	2200      	movs	r2, #0
 80075a0:	701a      	strb	r2, [r3, #0]
		break;
 80075a2:	e004      	b.n	80075ae <update_control_loops+0x622>

	default:
		break;
 80075a4:	bf00      	nop
 80075a6:	e002      	b.n	80075ae <update_control_loops+0x622>
		break;
 80075a8:	bf00      	nop
 80075aa:	e000      	b.n	80075ae <update_control_loops+0x622>
		break;
 80075ac:	bf00      	nop
	}

	prismatic_axis.mm = prismatic_encoder.mm;
 80075ae:	4b12      	ldr	r3, [pc, #72]	@ (80075f8 <update_control_loops+0x66c>)
 80075b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075b2:	4a0d      	ldr	r2, [pc, #52]	@ (80075e8 <update_control_loops+0x65c>)
 80075b4:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 80075b6:	4b1b      	ldr	r3, [pc, #108]	@ (8007624 <update_control_loops+0x698>)
 80075b8:	edd3 7a00 	vldr	s15, [r3]
 80075bc:	220e      	movs	r2, #14
 80075be:	210f      	movs	r1, #15
 80075c0:	eeb0 0a67 	vmov.f32	s0, s15
 80075c4:	4818      	ldr	r0, [pc, #96]	@ (8007628 <update_control_loops+0x69c>)
 80075c6:	f7fd faff 	bl	8004bc8 <UnitConverter_angle>
 80075ca:	eef0 7a40 	vmov.f32	s15, s0
 80075ce:	4b0b      	ldr	r3, [pc, #44]	@ (80075fc <update_control_loops+0x670>)
 80075d0:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);
}
 80075d4:	3724      	adds	r7, #36	@ 0x24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	ecbd 8b02 	vpop	{d8}
 80075dc:	bd90      	pop	{r4, r7, pc}
 80075de:	bf00      	nop
 80075e0:	200007ef 	.word	0x200007ef
 80075e4:	200007ee 	.word	0x200007ee
 80075e8:	20000708 	.word	0x20000708
 80075ec:	200007bc 	.word	0x200007bc
 80075f0:	20000080 	.word	0x20000080
 80075f4:	20000794 	.word	0x20000794
 80075f8:	20000994 	.word	0x20000994
 80075fc:	2000074c 	.word	0x2000074c
 8007600:	200007d0 	.word	0x200007d0
 8007604:	20000000 	.word	0x20000000
 8007608:	200007a8 	.word	0x200007a8
 800760c:	200009f0 	.word	0x200009f0
 8007610:	200007e4 	.word	0x200007e4
 8007614:	20000790 	.word	0x20000790
 8007618:	200008b0 	.word	0x200008b0
 800761c:	200008dc 	.word	0x200008dc
 8007620:	200008b4 	.word	0x200008b4
 8007624:	20000800 	.word	0x20000800
 8007628:	20000d88 	.word	0x20000d88

0800762c <check_emergency_button>:

void check_emergency_button(void) {
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
	static uint32_t emer_debounce_counter = 0;
	const uint32_t EMER_DEBOUNCE_TIME = 50; // 50ms
 8007632:	2332      	movs	r3, #50	@ 0x32
 8007634:	607b      	str	r3, [r7, #4]

	bool current_state = (HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin)
 8007636:	2110      	movs	r1, #16
 8007638:	4813      	ldr	r0, [pc, #76]	@ (8007688 <check_emergency_button+0x5c>)
 800763a:	f005 fed7 	bl	800d3ec <HAL_GPIO_ReadPin>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	bf0c      	ite	eq
 8007644:	2301      	moveq	r3, #1
 8007646:	2300      	movne	r3, #0
 8007648:	70fb      	strb	r3, [r7, #3]
			== GPIO_PIN_RESET);

	if (current_state) {
 800764a:	78fb      	ldrb	r3, [r7, #3]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d013      	beq.n	8007678 <check_emergency_button+0x4c>
		emer_debounce_counter++;
 8007650:	4b0e      	ldr	r3, [pc, #56]	@ (800768c <check_emergency_button+0x60>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3301      	adds	r3, #1
 8007656:	4a0d      	ldr	r2, [pc, #52]	@ (800768c <check_emergency_button+0x60>)
 8007658:	6013      	str	r3, [r2, #0]
		if (emer_debounce_counter >= EMER_DEBOUNCE_TIME) {
 800765a:	4b0c      	ldr	r3, [pc, #48]	@ (800768c <check_emergency_button+0x60>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	429a      	cmp	r2, r3
 8007662:	d80c      	bhi.n	800767e <check_emergency_button+0x52>
			if (safety_state != SAFETY_HARDWARE_EMERGENCY) {
 8007664:	4b0a      	ldr	r3, [pc, #40]	@ (8007690 <check_emergency_button+0x64>)
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	2b02      	cmp	r3, #2
 800766a:	d001      	beq.n	8007670 <check_emergency_button+0x44>
				trigger_hardware_emergency();
 800766c:	f000 f880 	bl	8007770 <trigger_hardware_emergency>
			}
			emer_debounce_counter = EMER_DEBOUNCE_TIME; // Prevent overflow
 8007670:	4a06      	ldr	r2, [pc, #24]	@ (800768c <check_emergency_button+0x60>)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6013      	str	r3, [r2, #0]
		}
	} else {
		emer_debounce_counter = 0;
	}
}
 8007676:	e002      	b.n	800767e <check_emergency_button+0x52>
		emer_debounce_counter = 0;
 8007678:	4b04      	ldr	r3, [pc, #16]	@ (800768c <check_emergency_button+0x60>)
 800767a:	2200      	movs	r2, #0
 800767c:	601a      	str	r2, [r3, #0]
}
 800767e:	bf00      	nop
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	48000400 	.word	0x48000400
 800768c:	200008e0 	.word	0x200008e0
 8007690:	200007f0 	.word	0x200007f0

08007694 <check_safety_conditions>:
//	 }
//	 }
//	 */
//}

void check_safety_conditions(void) {
 8007694:	b580      	push	{r7, lr}
 8007696:	af00      	add	r7, sp, #0
	if (tuning_mode || safety_state != SAFETY_NORMAL || homing_active)
 8007698:	4b16      	ldr	r3, [pc, #88]	@ (80076f4 <check_safety_conditions+0x60>)
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d127      	bne.n	80076f0 <check_safety_conditions+0x5c>
 80076a0:	4b15      	ldr	r3, [pc, #84]	@ (80076f8 <check_safety_conditions+0x64>)
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d123      	bne.n	80076f0 <check_safety_conditions+0x5c>
 80076a8:	4b14      	ldr	r3, [pc, #80]	@ (80076fc <check_safety_conditions+0x68>)
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d11f      	bne.n	80076f0 <check_safety_conditions+0x5c>
		return;

	if (up_photo && prismatic_axis.command_pos < 0.0f) {
 80076b0:	4b13      	ldr	r3, [pc, #76]	@ (8007700 <check_safety_conditions+0x6c>)
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00a      	beq.n	80076d0 <check_safety_conditions+0x3c>
 80076ba:	4b12      	ldr	r3, [pc, #72]	@ (8007704 <check_safety_conditions+0x70>)
 80076bc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80076c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80076c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c8:	d502      	bpl.n	80076d0 <check_safety_conditions+0x3c>
		trigger_software_emergency();
 80076ca:	f000 f81f 	bl	800770c <trigger_software_emergency>
		return;
 80076ce:	e010      	b.n	80076f2 <check_safety_conditions+0x5e>
	}

	if (low_photo && prismatic_axis.command_pos > 0.0f) {
 80076d0:	4b0d      	ldr	r3, [pc, #52]	@ (8007708 <check_safety_conditions+0x74>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00b      	beq.n	80076f2 <check_safety_conditions+0x5e>
 80076da:	4b0a      	ldr	r3, [pc, #40]	@ (8007704 <check_safety_conditions+0x70>)
 80076dc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80076e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80076e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e8:	dd03      	ble.n	80076f2 <check_safety_conditions+0x5e>
		trigger_software_emergency();
 80076ea:	f000 f80f 	bl	800770c <trigger_software_emergency>
		return;
 80076ee:	e000      	b.n	80076f2 <check_safety_conditions+0x5e>
		return;
 80076f0:	bf00      	nop
	}
}
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	20000334 	.word	0x20000334
 80076f8:	200007f0 	.word	0x200007f0
 80076fc:	200007ef 	.word	0x200007ef
 8007700:	200007ec 	.word	0x200007ec
 8007704:	20000708 	.word	0x20000708
 8007708:	200007ed 	.word	0x200007ed

0800770c <trigger_software_emergency>:

void trigger_software_emergency(void) {
 800770c:	b580      	push	{r7, lr}
 800770e:	af00      	add	r7, sp, #0
	if (safety_state == SAFETY_NORMAL) {
 8007710:	4b10      	ldr	r3, [pc, #64]	@ (8007754 <trigger_software_emergency+0x48>)
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d11b      	bne.n	8007750 <trigger_software_emergency+0x44>
		safety_state = SAFETY_SOFTWARE_EMERGENCY;
 8007718:	4b0e      	ldr	r3, [pc, #56]	@ (8007754 <trigger_software_emergency+0x48>)
 800771a:	2201      	movs	r2, #1
 800771c:	701a      	strb	r2, [r3, #0]
		emergency_stop_all_motors();
 800771e:	f000 f901 	bl	8007924 <emergency_stop_all_motors>
		safety_toggle_timer = 0;
 8007722:	4b0d      	ldr	r3, [pc, #52]	@ (8007758 <trigger_software_emergency+0x4c>)
 8007724:	2200      	movs	r2, #0
 8007726:	601a      	str	r2, [r3, #0]
		pilot_light_state = false;
 8007728:	4b0c      	ldr	r3, [pc, #48]	@ (800775c <trigger_software_emergency+0x50>)
 800772a:	2200      	movs	r2, #0
 800772c:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 800772e:	4b0c      	ldr	r3, [pc, #48]	@ (8007760 <trigger_software_emergency+0x54>)
 8007730:	2200      	movs	r2, #0
 8007732:	701a      	strb	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 8007734:	4b0b      	ldr	r3, [pc, #44]	@ (8007764 <trigger_software_emergency+0x58>)
 8007736:	2200      	movs	r2, #0
 8007738:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		revolute_axis.trajectory_active = false;
 800773c:	4b0a      	ldr	r3, [pc, #40]	@ (8007768 <trigger_software_emergency+0x5c>)
 800773e:	2200      	movs	r2, #0
 8007740:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		// Exit joy mode if active
		if (joy_mode_active) {
 8007744:	4b09      	ldr	r3, [pc, #36]	@ (800776c <trigger_software_emergency+0x60>)
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <trigger_software_emergency+0x44>
			exit_joy_mode();
 800774c:	f000 fa0a 	bl	8007b64 <exit_joy_mode>
		}
	}
}
 8007750:	bf00      	nop
 8007752:	bd80      	pop	{r7, pc}
 8007754:	200007f0 	.word	0x200007f0
 8007758:	200007f4 	.word	0x200007f4
 800775c:	200007f8 	.word	0x200007f8
 8007760:	20000790 	.word	0x20000790
 8007764:	20000708 	.word	0x20000708
 8007768:	2000074c 	.word	0x2000074c
 800776c:	20000809 	.word	0x20000809

08007770 <trigger_hardware_emergency>:
//	// Exit joy mode if active
//	if (joy_mode_active) {
//		exit_joy_mode();
//	}
//}
void trigger_hardware_emergency(void) {
 8007770:	b580      	push	{r7, lr}
 8007772:	af00      	add	r7, sp, #0
	safety_state = SAFETY_HARDWARE_EMERGENCY;
 8007774:	4b16      	ldr	r3, [pc, #88]	@ (80077d0 <trigger_hardware_emergency+0x60>)
 8007776:	2202      	movs	r2, #2
 8007778:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = true;
 800777a:	4b16      	ldr	r3, [pc, #88]	@ (80077d4 <trigger_hardware_emergency+0x64>)
 800777c:	2201      	movs	r2, #1
 800777e:	701a      	strb	r2, [r3, #0]
	emergency_stop_all_motors();
 8007780:	f000 f8d0 	bl	8007924 <emergency_stop_all_motors>
	safety_toggle_timer = 0;
 8007784:	4b14      	ldr	r3, [pc, #80]	@ (80077d8 <trigger_hardware_emergency+0x68>)
 8007786:	2200      	movs	r2, #0
 8007788:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 800778a:	4b14      	ldr	r3, [pc, #80]	@ (80077dc <trigger_hardware_emergency+0x6c>)
 800778c:	2200      	movs	r2, #0
 800778e:	701a      	strb	r2, [r3, #0]

	// Ensure motion is completely stopped
	ensure_motion_idle();
 8007790:	f001 fe02 	bl	8009398 <ensure_motion_idle>

	// Reset trajectory structures
	memset(&prisEva, 0, sizeof(prisEva));
 8007794:	2214      	movs	r2, #20
 8007796:	2100      	movs	r1, #0
 8007798:	4811      	ldr	r0, [pc, #68]	@ (80077e0 <trigger_hardware_emergency+0x70>)
 800779a:	f00b fc5d 	bl	8013058 <memset>
	memset(&revEva, 0, sizeof(revEva));
 800779e:	2214      	movs	r2, #20
 80077a0:	2100      	movs	r1, #0
 80077a2:	4810      	ldr	r0, [pc, #64]	@ (80077e4 <trigger_hardware_emergency+0x74>)
 80077a4:	f00b fc58 	bl	8013058 <memset>
	prisEva.isFinised = true;
 80077a8:	4b0d      	ldr	r3, [pc, #52]	@ (80077e0 <trigger_hardware_emergency+0x70>)
 80077aa:	2201      	movs	r2, #1
 80077ac:	741a      	strb	r2, [r3, #16]
	revEva.isFinised = true;
 80077ae:	4b0d      	ldr	r3, [pc, #52]	@ (80077e4 <trigger_hardware_emergency+0x74>)
 80077b0:	2201      	movs	r2, #1
 80077b2:	741a      	strb	r2, [r3, #16]

	homing_active = false;
 80077b4:	4b0c      	ldr	r3, [pc, #48]	@ (80077e8 <trigger_hardware_emergency+0x78>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	701a      	strb	r2, [r3, #0]
	homing_state = HOMING_IDLE;
 80077ba:	4b0c      	ldr	r3, [pc, #48]	@ (80077ec <trigger_hardware_emergency+0x7c>)
 80077bc:	2200      	movs	r2, #0
 80077be:	701a      	strb	r2, [r3, #0]

	// Exit joy mode if active
	if (joy_mode_active) {
 80077c0:	4b0b      	ldr	r3, [pc, #44]	@ (80077f0 <trigger_hardware_emergency+0x80>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <trigger_hardware_emergency+0x5c>
		exit_joy_mode();
 80077c8:	f000 f9cc 	bl	8007b64 <exit_joy_mode>
	}
}
 80077cc:	bf00      	nop
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	200007f0 	.word	0x200007f0
 80077d4:	200007f9 	.word	0x200007f9
 80077d8:	200007f4 	.word	0x200007f4
 80077dc:	200007f8 	.word	0x200007f8
 80077e0:	200007bc 	.word	0x200007bc
 80077e4:	200007d0 	.word	0x200007d0
 80077e8:	200007ef 	.word	0x200007ef
 80077ec:	200007ee 	.word	0x200007ee
 80077f0:	20000809 	.word	0x20000809

080077f4 <clear_emergency_state>:
//    // Keep DFD for revolute axis (gravity compensation)
//    revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
//            revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
//}

void clear_emergency_state(void) {
 80077f4:	b580      	push	{r7, lr}
 80077f6:	af00      	add	r7, sp, #0
	// First ensure everything is stopped
	ensure_motion_idle();
 80077f8:	f001 fdce 	bl	8009398 <ensure_motion_idle>
	emergency_stop_all_motors();
 80077fc:	f000 f892 	bl	8007924 <emergency_stop_all_motors>

	// Reset trajectory structures completely
	memset(&prisEva, 0, sizeof(prisEva));
 8007800:	2214      	movs	r2, #20
 8007802:	2100      	movs	r1, #0
 8007804:	4839      	ldr	r0, [pc, #228]	@ (80078ec <clear_emergency_state+0xf8>)
 8007806:	f00b fc27 	bl	8013058 <memset>
	memset(&revEva, 0, sizeof(revEva));
 800780a:	2214      	movs	r2, #20
 800780c:	2100      	movs	r1, #0
 800780e:	4838      	ldr	r0, [pc, #224]	@ (80078f0 <clear_emergency_state+0xfc>)
 8007810:	f00b fc22 	bl	8013058 <memset>
	prisEva.isFinised = true;
 8007814:	4b35      	ldr	r3, [pc, #212]	@ (80078ec <clear_emergency_state+0xf8>)
 8007816:	2201      	movs	r2, #1
 8007818:	741a      	strb	r2, [r3, #16]
	revEva.isFinised = true;
 800781a:	4b35      	ldr	r3, [pc, #212]	@ (80078f0 <clear_emergency_state+0xfc>)
 800781c:	2201      	movs	r2, #1
 800781e:	741a      	strb	r2, [r3, #16]

	// Set positions for holding
	prismatic_axis.position = prismatic_encoder.mm;
 8007820:	4b34      	ldr	r3, [pc, #208]	@ (80078f4 <clear_emergency_state+0x100>)
 8007822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007824:	4a34      	ldr	r2, [pc, #208]	@ (80078f8 <clear_emergency_state+0x104>)
 8007826:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8007828:	4b34      	ldr	r3, [pc, #208]	@ (80078fc <clear_emergency_state+0x108>)
 800782a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800782c:	4a34      	ldr	r2, [pc, #208]	@ (8007900 <clear_emergency_state+0x10c>)
 800782e:	6013      	str	r3, [r2, #0]
	prismatic_axis.target_pos = prismatic_axis.position;
 8007830:	4b31      	ldr	r3, [pc, #196]	@ (80078f8 <clear_emergency_state+0x104>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a30      	ldr	r2, [pc, #192]	@ (80078f8 <clear_emergency_state+0x104>)
 8007836:	6113      	str	r3, [r2, #16]
	revolute_axis.target_pos = revolute_axis.position;
 8007838:	4b31      	ldr	r3, [pc, #196]	@ (8007900 <clear_emergency_state+0x10c>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a30      	ldr	r2, [pc, #192]	@ (8007900 <clear_emergency_state+0x10c>)
 800783e:	6113      	str	r3, [r2, #16]

	// Clear all velocities and commands
	prismatic_axis.command_vel = 0.0f;
 8007840:	4b2d      	ldr	r3, [pc, #180]	@ (80078f8 <clear_emergency_state+0x104>)
 8007842:	f04f 0200 	mov.w	r2, #0
 8007846:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8007848:	4b2d      	ldr	r3, [pc, #180]	@ (8007900 <clear_emergency_state+0x10c>)
 800784a:	f04f 0200 	mov.w	r2, #0
 800784e:	629a      	str	r2, [r3, #40]	@ 0x28
	prismatic_axis.velocity = 0.0f;
 8007850:	4b29      	ldr	r3, [pc, #164]	@ (80078f8 <clear_emergency_state+0x104>)
 8007852:	f04f 0200 	mov.w	r2, #0
 8007856:	605a      	str	r2, [r3, #4]
	revolute_axis.velocity = 0.0f;
 8007858:	4b29      	ldr	r3, [pc, #164]	@ (8007900 <clear_emergency_state+0x10c>)
 800785a:	f04f 0200 	mov.w	r2, #0
 800785e:	605a      	str	r2, [r3, #4]
	prismatic_axis.command_pos = 0.0f;
 8007860:	4b25      	ldr	r3, [pc, #148]	@ (80078f8 <clear_emergency_state+0x104>)
 8007862:	f04f 0200 	mov.w	r2, #0
 8007866:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 8007868:	4b25      	ldr	r3, [pc, #148]	@ (8007900 <clear_emergency_state+0x10c>)
 800786a:	f04f 0200 	mov.w	r2, #0
 800786e:	625a      	str	r2, [r3, #36]	@ 0x24

	// Clear feedforward
	prismatic_axis.ffd = 0.0f;
 8007870:	4b21      	ldr	r3, [pc, #132]	@ (80078f8 <clear_emergency_state+0x104>)
 8007872:	f04f 0200 	mov.w	r2, #0
 8007876:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_axis.dfd = 0.0f;
 8007878:	4b1f      	ldr	r3, [pc, #124]	@ (80078f8 <clear_emergency_state+0x104>)
 800787a:	f04f 0200 	mov.w	r2, #0
 800787e:	62da      	str	r2, [r3, #44]	@ 0x2c
	revolute_axis.ffd = 0.0f;
 8007880:	4b1f      	ldr	r3, [pc, #124]	@ (8007900 <clear_emergency_state+0x10c>)
 8007882:	f04f 0200 	mov.w	r2, #0
 8007886:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007888:	4b1c      	ldr	r3, [pc, #112]	@ (80078fc <clear_emergency_state+0x108>)
 800788a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 800788e:	4b19      	ldr	r3, [pc, #100]	@ (80078f4 <clear_emergency_state+0x100>)
 8007890:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007894:	ed9f 6a1b 	vldr	s12, [pc, #108]	@ 8007904 <clear_emergency_state+0x110>
 8007898:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800789c:	eef0 0a66 	vmov.f32	s1, s13
 80078a0:	eeb0 0a47 	vmov.f32	s0, s14
 80078a4:	4818      	ldr	r0, [pc, #96]	@ (8007908 <clear_emergency_state+0x114>)
 80078a6:	f7f9 fee8 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 80078aa:	eef0 7a40 	vmov.f32	s15, s0
 80078ae:	4b14      	ldr	r3, [pc, #80]	@ (8007900 <clear_emergency_state+0x10c>)
 80078b0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// Clear emergency state
	safety_state = SAFETY_NORMAL;
 80078b4:	4b15      	ldr	r3, [pc, #84]	@ (800790c <clear_emergency_state+0x118>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 80078ba:	4b15      	ldr	r3, [pc, #84]	@ (8007910 <clear_emergency_state+0x11c>)
 80078bc:	2200      	movs	r2, #0
 80078be:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 80078c0:	4b14      	ldr	r3, [pc, #80]	@ (8007914 <clear_emergency_state+0x120>)
 80078c2:	2200      	movs	r2, #0
 80078c4:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 80078c6:	4b14      	ldr	r3, [pc, #80]	@ (8007918 <clear_emergency_state+0x124>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 80078cc:	2200      	movs	r2, #0
 80078ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80078d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80078d6:	f005 fda1 	bl	800d41c <HAL_GPIO_WritePin>
	up_photo = false;
 80078da:	4b10      	ldr	r3, [pc, #64]	@ (800791c <clear_emergency_state+0x128>)
 80078dc:	2200      	movs	r2, #0
 80078de:	701a      	strb	r2, [r3, #0]
	low_photo = false;
 80078e0:	4b0f      	ldr	r3, [pc, #60]	@ (8007920 <clear_emergency_state+0x12c>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	701a      	strb	r2, [r3, #0]
}
 80078e6:	bf00      	nop
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	200007bc 	.word	0x200007bc
 80078f0:	200007d0 	.word	0x200007d0
 80078f4:	20000994 	.word	0x20000994
 80078f8:	20000708 	.word	0x20000708
 80078fc:	200009f0 	.word	0x200009f0
 8007900:	2000074c 	.word	0x2000074c
 8007904:	447a0000 	.word	0x447a0000
 8007908:	20000b24 	.word	0x20000b24
 800790c:	200007f0 	.word	0x200007f0
 8007910:	200007f9 	.word	0x200007f9
 8007914:	200007f4 	.word	0x200007f4
 8007918:	200007f8 	.word	0x200007f8
 800791c:	200007ec 	.word	0x200007ec
 8007920:	200007ed 	.word	0x200007ed

08007924 <emergency_stop_all_motors>:

void emergency_stop_all_motors(void) {
 8007924:	b580      	push	{r7, lr}
 8007926:	af00      	add	r7, sp, #0
	MDXX_set_range(&prismatic_motor, 2000, 0);
 8007928:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8007968 <emergency_stop_all_motors+0x44>
 800792c:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 800796c <emergency_stop_all_motors+0x48>
 8007930:	480f      	ldr	r0, [pc, #60]	@ (8007970 <emergency_stop_all_motors+0x4c>)
 8007932:	f7f9 fd27 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8007936:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8007968 <emergency_stop_all_motors+0x44>
 800793a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800796c <emergency_stop_all_motors+0x48>
 800793e:	480d      	ldr	r0, [pc, #52]	@ (8007974 <emergency_stop_all_motors+0x50>)
 8007940:	f7f9 fd20 	bl	8001384 <MDXX_set_range>

	prismatic_axis.command_pos = 0.0f;
 8007944:	4b0c      	ldr	r3, [pc, #48]	@ (8007978 <emergency_stop_all_motors+0x54>)
 8007946:	f04f 0200 	mov.w	r2, #0
 800794a:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 800794c:	4b0b      	ldr	r3, [pc, #44]	@ (800797c <emergency_stop_all_motors+0x58>)
 800794e:	f04f 0200 	mov.w	r2, #0
 8007952:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 8007954:	4b08      	ldr	r3, [pc, #32]	@ (8007978 <emergency_stop_all_motors+0x54>)
 8007956:	f04f 0200 	mov.w	r2, #0
 800795a:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 800795c:	4b07      	ldr	r3, [pc, #28]	@ (800797c <emergency_stop_all_motors+0x58>)
 800795e:	f04f 0200 	mov.w	r2, #0
 8007962:	629a      	str	r2, [r3, #40]	@ 0x28
//	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
//	PID_CONTROLLER_Reset(&revolute_position_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);

}
 8007964:	bf00      	nop
 8007966:	bd80      	pop	{r7, pc}
 8007968:	00000000 	.word	0x00000000
 800796c:	44fa0000 	.word	0x44fa0000
 8007970:	200008fc 	.word	0x200008fc
 8007974:	20000948 	.word	0x20000948
 8007978:	20000708 	.word	0x20000708
 800797c:	2000074c 	.word	0x2000074c

08007980 <update_safety_system>:

void update_safety_system(void) {
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
	// Don't control pilot light if joy mode is active
	if (joy_mode_active) {
 8007984:	4b3a      	ldr	r3, [pc, #232]	@ (8007a70 <update_safety_system+0xf0>)
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d16e      	bne.n	8007a6a <update_safety_system+0xea>
		return; // Let joy mode handle pilot light
	}

	if (safety_state == SAFETY_SOFTWARE_EMERGENCY) {
 800798c:	4b39      	ldr	r3, [pc, #228]	@ (8007a74 <update_safety_system+0xf4>)
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d11f      	bne.n	80079d4 <update_safety_system+0x54>
		if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 8007994:	4b38      	ldr	r3, [pc, #224]	@ (8007a78 <update_safety_system+0xf8>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3301      	adds	r3, #1
 800799a:	4a37      	ldr	r2, [pc, #220]	@ (8007a78 <update_safety_system+0xf8>)
 800799c:	6013      	str	r3, [r2, #0]
 800799e:	2bf9      	cmp	r3, #249	@ 0xf9
 80079a0:	d918      	bls.n	80079d4 <update_safety_system+0x54>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 80079a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80079a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80079aa:	f005 fd4f 	bl	800d44c <HAL_GPIO_TogglePin>
			pilot_light_state = !pilot_light_state;
 80079ae:	4b33      	ldr	r3, [pc, #204]	@ (8007a7c <update_safety_system+0xfc>)
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	bf14      	ite	ne
 80079b8:	2301      	movne	r3, #1
 80079ba:	2300      	moveq	r3, #0
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	f083 0301 	eor.w	r3, r3, #1
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	f003 0301 	and.w	r3, r3, #1
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	4b2c      	ldr	r3, [pc, #176]	@ (8007a7c <update_safety_system+0xfc>)
 80079cc:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 80079ce:	4b2a      	ldr	r3, [pc, #168]	@ (8007a78 <update_safety_system+0xf8>)
 80079d0:	2200      	movs	r2, #0
 80079d2:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_HARDWARE_EMERGENCY) {
 80079d4:	4b27      	ldr	r3, [pc, #156]	@ (8007a74 <update_safety_system+0xf4>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d134      	bne.n	8007a46 <update_safety_system+0xc6>
		if (HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin) == GPIO_PIN_SET) {
 80079dc:	2110      	movs	r1, #16
 80079de:	4828      	ldr	r0, [pc, #160]	@ (8007a80 <update_safety_system+0x100>)
 80079e0:	f005 fd04 	bl	800d3ec <HAL_GPIO_ReadPin>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d120      	bne.n	8007a2c <update_safety_system+0xac>
			if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 80079ea:	4b23      	ldr	r3, [pc, #140]	@ (8007a78 <update_safety_system+0xf8>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3301      	adds	r3, #1
 80079f0:	4a21      	ldr	r2, [pc, #132]	@ (8007a78 <update_safety_system+0xf8>)
 80079f2:	6013      	str	r3, [r2, #0]
 80079f4:	2bf9      	cmp	r3, #249	@ 0xf9
 80079f6:	d926      	bls.n	8007a46 <update_safety_system+0xc6>
				HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 80079f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80079fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007a00:	f005 fd24 	bl	800d44c <HAL_GPIO_TogglePin>
				pilot_light_state = !pilot_light_state;
 8007a04:	4b1d      	ldr	r3, [pc, #116]	@ (8007a7c <update_safety_system+0xfc>)
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	bf14      	ite	ne
 8007a0e:	2301      	movne	r3, #1
 8007a10:	2300      	moveq	r3, #0
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	f083 0301 	eor.w	r3, r3, #1
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	4b16      	ldr	r3, [pc, #88]	@ (8007a7c <update_safety_system+0xfc>)
 8007a22:	701a      	strb	r2, [r3, #0]
				safety_toggle_timer = 0;
 8007a24:	4b14      	ldr	r3, [pc, #80]	@ (8007a78 <update_safety_system+0xf8>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	601a      	str	r2, [r3, #0]
 8007a2a:	e00c      	b.n	8007a46 <update_safety_system+0xc6>
			}
		} else {
			HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007a32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007a36:	f005 fcf1 	bl	800d41c <HAL_GPIO_WritePin>
			pilot_light_state = false;
 8007a3a:	4b10      	ldr	r3, [pc, #64]	@ (8007a7c <update_safety_system+0xfc>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 8007a40:	4b0d      	ldr	r3, [pc, #52]	@ (8007a78 <update_safety_system+0xf8>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_NORMAL) {
 8007a46:	4b0b      	ldr	r3, [pc, #44]	@ (8007a74 <update_safety_system+0xf4>)
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10e      	bne.n	8007a6c <update_safety_system+0xec>
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007a54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007a58:	f005 fce0 	bl	800d41c <HAL_GPIO_WritePin>
		pilot_light_state = false;
 8007a5c:	4b07      	ldr	r3, [pc, #28]	@ (8007a7c <update_safety_system+0xfc>)
 8007a5e:	2200      	movs	r2, #0
 8007a60:	701a      	strb	r2, [r3, #0]
		safety_toggle_timer = 0;
 8007a62:	4b05      	ldr	r3, [pc, #20]	@ (8007a78 <update_safety_system+0xf8>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	601a      	str	r2, [r3, #0]
 8007a68:	e000      	b.n	8007a6c <update_safety_system+0xec>
		return; // Let joy mode handle pilot light
 8007a6a:	bf00      	nop
	}
}
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	20000809 	.word	0x20000809
 8007a74:	200007f0 	.word	0x200007f0
 8007a78:	200007f4 	.word	0x200007f4
 8007a7c:	200007f8 	.word	0x200007f8
 8007a80:	48000400 	.word	0x48000400

08007a84 <is_emergency_active>:

bool is_emergency_active(void) {
 8007a84:	b480      	push	{r7}
 8007a86:	af00      	add	r7, sp, #0
	return (safety_state != SAFETY_NORMAL);
 8007a88:	4b05      	ldr	r3, [pc, #20]	@ (8007aa0 <is_emergency_active+0x1c>)
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	bf14      	ite	ne
 8007a90:	2301      	movne	r3, #1
 8007a92:	2300      	moveq	r3, #0
 8007a94:	b2db      	uxtb	r3, r3
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr
 8007aa0:	200007f0 	.word	0x200007f0

08007aa4 <enter_joy_mode>:

void enter_joy_mode(void) {
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	af00      	add	r7, sp, #0
	if (is_emergency_active() || homing_active || joy_mode_active) {
 8007aa8:	f7ff ffec 	bl	8007a84 <is_emergency_active>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d142      	bne.n	8007b38 <enter_joy_mode+0x94>
 8007ab2:	4b22      	ldr	r3, [pc, #136]	@ (8007b3c <enter_joy_mode+0x98>)
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d13e      	bne.n	8007b38 <enter_joy_mode+0x94>
 8007aba:	4b21      	ldr	r3, [pc, #132]	@ (8007b40 <enter_joy_mode+0x9c>)
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d13a      	bne.n	8007b38 <enter_joy_mode+0x94>
		return;
	}

	ensure_motion_idle();
 8007ac2:	f001 fc69 	bl	8009398 <ensure_motion_idle>

	joy_mode_active = true;
 8007ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8007b40 <enter_joy_mode+0x9c>)
 8007ac8:	2201      	movs	r2, #1
 8007aca:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_INITIAL_CONTROL; // Start in initial control state
 8007acc:	4b1d      	ldr	r3, [pc, #116]	@ (8007b44 <enter_joy_mode+0xa0>)
 8007ace:	2201      	movs	r2, #1
 8007ad0:	701a      	strb	r2, [r3, #0]

	// Reset all joy mode data
	reset_joy_mode_data();
 8007ad2:	f000 f9b9 	bl	8007e48 <reset_joy_mode_data>

	// Turn on pilot light to indicate joy mode
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007adc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007ae0:	f005 fc9c 	bl	800d41c <HAL_GPIO_WritePin>
	joy_mode_pilot_state = true;
 8007ae4:	4b18      	ldr	r3, [pc, #96]	@ (8007b48 <enter_joy_mode+0xa4>)
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 8007aea:	4b18      	ldr	r3, [pc, #96]	@ (8007b4c <enter_joy_mode+0xa8>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	601a      	str	r2, [r3, #0]

	// Stop any current motion
	motion_sequence_state = MOTION_IDLE;
 8007af0:	4b17      	ldr	r3, [pc, #92]	@ (8007b50 <enter_joy_mode+0xac>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 8007af6:	4b17      	ldr	r3, [pc, #92]	@ (8007b54 <enter_joy_mode+0xb0>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8007afe:	4b16      	ldr	r3, [pc, #88]	@ (8007b58 <enter_joy_mode+0xb4>)
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Initialize position holding at current positions
	prismatic_axis.position = prismatic_encoder.mm;
 8007b06:	4b15      	ldr	r3, [pc, #84]	@ (8007b5c <enter_joy_mode+0xb8>)
 8007b08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b0a:	4a12      	ldr	r2, [pc, #72]	@ (8007b54 <enter_joy_mode+0xb0>)
 8007b0c:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8007b0e:	4b14      	ldr	r3, [pc, #80]	@ (8007b60 <enter_joy_mode+0xbc>)
 8007b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b12:	4a11      	ldr	r2, [pc, #68]	@ (8007b58 <enter_joy_mode+0xb4>)
 8007b14:	6013      	str	r3, [r2, #0]

	// Reset motor commands
	prismatic_axis.command_pos = 0.0f;
 8007b16:	4b0f      	ldr	r3, [pc, #60]	@ (8007b54 <enter_joy_mode+0xb0>)
 8007b18:	f04f 0200 	mov.w	r2, #0
 8007b1c:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 8007b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8007b58 <enter_joy_mode+0xb4>)
 8007b20:	f04f 0200 	mov.w	r2, #0
 8007b24:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 8007b26:	4b0b      	ldr	r3, [pc, #44]	@ (8007b54 <enter_joy_mode+0xb0>)
 8007b28:	f04f 0200 	mov.w	r2, #0
 8007b2c:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8007b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8007b58 <enter_joy_mode+0xb4>)
 8007b30:	f04f 0200 	mov.w	r2, #0
 8007b34:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b36:	e000      	b.n	8007b3a <enter_joy_mode+0x96>
		return;
 8007b38:	bf00      	nop
	// Reset PID controllers
//	PID_CONTROLLER_Reset(&prismatic_position_pid);
//	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
//	PID_CONTROLLER_Reset(&revolute_position_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);
}
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	200007ef 	.word	0x200007ef
 8007b40:	20000809 	.word	0x20000809
 8007b44:	20000808 	.word	0x20000808
 8007b48:	20000864 	.word	0x20000864
 8007b4c:	20000860 	.word	0x20000860
 8007b50:	20000790 	.word	0x20000790
 8007b54:	20000708 	.word	0x20000708
 8007b58:	2000074c 	.word	0x2000074c
 8007b5c:	20000994 	.word	0x20000994
 8007b60:	200009f0 	.word	0x200009f0

08007b64 <exit_joy_mode>:

/* Updated exit joy mode to handle cleanup properly */
void exit_joy_mode(void) {
 8007b64:	b580      	push	{r7, lr}
 8007b66:	af00      	add	r7, sp, #0
	joy_mode_active = false;
 8007b68:	4b2c      	ldr	r3, [pc, #176]	@ (8007c1c <exit_joy_mode+0xb8>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_IDLE;
 8007b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8007c20 <exit_joy_mode+0xbc>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	701a      	strb	r2, [r3, #0]

	// Reset all data
	reset_joy_mode_data();
 8007b74:	f000 f968 	bl	8007e48 <reset_joy_mode_data>

	// Turn off pilot light
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007b7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007b82:	f005 fc4b 	bl	800d41c <HAL_GPIO_WritePin>
	joy_mode_pilot_state = false;
 8007b86:	4b27      	ldr	r3, [pc, #156]	@ (8007c24 <exit_joy_mode+0xc0>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 8007b8c:	4b26      	ldr	r3, [pc, #152]	@ (8007c28 <exit_joy_mode+0xc4>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	601a      	str	r2, [r3, #0]

	// DON'T stop motors - hold current position
	// Set current positions as target positions for holding
	prismatic_axis.position = prismatic_encoder.mm;
 8007b92:	4b26      	ldr	r3, [pc, #152]	@ (8007c2c <exit_joy_mode+0xc8>)
 8007b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b96:	4a26      	ldr	r2, [pc, #152]	@ (8007c30 <exit_joy_mode+0xcc>)
 8007b98:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8007b9a:	4b26      	ldr	r3, [pc, #152]	@ (8007c34 <exit_joy_mode+0xd0>)
 8007b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b9e:	4a26      	ldr	r2, [pc, #152]	@ (8007c38 <exit_joy_mode+0xd4>)
 8007ba0:	6013      	str	r3, [r2, #0]

	// Reset velocities and feedforward terms
	prismatic_axis.command_vel = 0.0f;
 8007ba2:	4b23      	ldr	r3, [pc, #140]	@ (8007c30 <exit_joy_mode+0xcc>)
 8007ba4:	f04f 0200 	mov.w	r2, #0
 8007ba8:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8007baa:	4b23      	ldr	r3, [pc, #140]	@ (8007c38 <exit_joy_mode+0xd4>)
 8007bac:	f04f 0200 	mov.w	r2, #0
 8007bb0:	629a      	str	r2, [r3, #40]	@ 0x28
	prismatic_axis.ffd = 0.0f;
 8007bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8007c30 <exit_joy_mode+0xcc>)
 8007bb4:	f04f 0200 	mov.w	r2, #0
 8007bb8:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_axis.dfd = 0.0f;
 8007bba:	4b1d      	ldr	r3, [pc, #116]	@ (8007c30 <exit_joy_mode+0xcc>)
 8007bbc:	f04f 0200 	mov.w	r2, #0
 8007bc0:	62da      	str	r2, [r3, #44]	@ 0x2c
	revolute_axis.ffd = 0.0f;
 8007bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8007c38 <exit_joy_mode+0xd4>)
 8007bc4:	f04f 0200 	mov.w	r2, #0
 8007bc8:	631a      	str	r2, [r3, #48]	@ 0x30

	// Keep DFD for revolute axis (gravity compensation)
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007bca:	4b1a      	ldr	r3, [pc, #104]	@ (8007c34 <exit_joy_mode+0xd0>)
 8007bcc:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8007bd0:	4b16      	ldr	r3, [pc, #88]	@ (8007c2c <exit_joy_mode+0xc8>)
 8007bd2:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007bd6:	ed9f 6a19 	vldr	s12, [pc, #100]	@ 8007c3c <exit_joy_mode+0xd8>
 8007bda:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007bde:	eef0 0a66 	vmov.f32	s1, s13
 8007be2:	eeb0 0a47 	vmov.f32	s0, s14
 8007be6:	4816      	ldr	r0, [pc, #88]	@ (8007c40 <exit_joy_mode+0xdc>)
 8007be8:	f7f9 fd47 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 8007bec:	eef0 7a40 	vmov.f32	s15, s0
 8007bf0:	4b11      	ldr	r3, [pc, #68]	@ (8007c38 <exit_joy_mode+0xd4>)
 8007bf2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
//	PID_CONTROLLER_Reset(&revolute_position_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);

	// Reset motion state
	motion_sequence_state = MOTION_IDLE;
 8007bf6:	4b13      	ldr	r3, [pc, #76]	@ (8007c44 <exit_joy_mode+0xe0>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 8007bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8007c30 <exit_joy_mode+0xcc>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8007c04:	4b0c      	ldr	r3, [pc, #48]	@ (8007c38 <exit_joy_mode+0xd4>)
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	//modbus reset state
	registerFrame[BaseSystem_Status].U16 = 0;
 8007c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8007c48 <exit_joy_mode+0xe4>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	805a      	strh	r2, [r3, #2]
	registerFrame[R_Theta_Status].U16 = 0;
 8007c12:	4b0d      	ldr	r3, [pc, #52]	@ (8007c48 <exit_joy_mode+0xe4>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	841a      	strh	r2, [r3, #32]
}
 8007c18:	bf00      	nop
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	20000809 	.word	0x20000809
 8007c20:	20000808 	.word	0x20000808
 8007c24:	20000864 	.word	0x20000864
 8007c28:	20000860 	.word	0x20000860
 8007c2c:	20000994 	.word	0x20000994
 8007c30:	20000708 	.word	0x20000708
 8007c34:	200009f0 	.word	0x200009f0
 8007c38:	2000074c 	.word	0x2000074c
 8007c3c:	447a0000 	.word	0x447a0000
 8007c40:	20000b24 	.word	0x20000b24
 8007c44:	20000790 	.word	0x20000790
 8007c48:	200015b0 	.word	0x200015b0

08007c4c <save_current_position>:

void save_current_position(void) {
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b088      	sub	sp, #32
 8007c50:	af00      	add	r7, sp, #0
	if (saved_position_count < JOY_MODE_MAX_POSITIONS) {
 8007c52:	4b50      	ldr	r3, [pc, #320]	@ (8007d94 <save_current_position+0x148>)
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	2b09      	cmp	r3, #9
 8007c58:	f200 8098 	bhi.w	8007d8c <save_current_position+0x140>
		float current_pris = prismatic_encoder.mm;
 8007c5c:	4b4e      	ldr	r3, [pc, #312]	@ (8007d98 <save_current_position+0x14c>)
 8007c5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c60:	61fb      	str	r3, [r7, #28]
		float current_rev = revolute_encoder.rads;
 8007c62:	4b4e      	ldr	r3, [pc, #312]	@ (8007d9c <save_current_position+0x150>)
 8007c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c66:	61bb      	str	r3, [r7, #24]

		bool too_similar = false;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	75fb      	strb	r3, [r7, #23]
		if (saved_position_count > 0) {
 8007c6c:	4b49      	ldr	r3, [pc, #292]	@ (8007d94 <save_current_position+0x148>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d031      	beq.n	8007cd8 <save_current_position+0x8c>
			float last_pris =
					saved_positions[saved_position_count - 1].prismatic_pos;
 8007c74:	4b47      	ldr	r3, [pc, #284]	@ (8007d94 <save_current_position+0x148>)
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	3b01      	subs	r3, #1
			float last_pris =
 8007c7a:	4a49      	ldr	r2, [pc, #292]	@ (8007da0 <save_current_position+0x154>)
 8007c7c:	00db      	lsls	r3, r3, #3
 8007c7e:	4413      	add	r3, r2
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	613b      	str	r3, [r7, #16]
			float last_rev =
					saved_positions[saved_position_count - 1].revolute_pos;
 8007c84:	4b43      	ldr	r3, [pc, #268]	@ (8007d94 <save_current_position+0x148>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	3b01      	subs	r3, #1
			float last_rev =
 8007c8a:	4a45      	ldr	r2, [pc, #276]	@ (8007da0 <save_current_position+0x154>)
 8007c8c:	00db      	lsls	r3, r3, #3
 8007c8e:	4413      	add	r3, r2
 8007c90:	3304      	adds	r3, #4
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	60fb      	str	r3, [r7, #12]

			if (fabsf(current_pris - last_pris) < 5.0f
 8007c96:	ed97 7a07 	vldr	s14, [r7, #28]
 8007c9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8007c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ca2:	eef0 7ae7 	vabs.f32	s15, s15
 8007ca6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8007caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cb2:	d511      	bpl.n	8007cd8 <save_current_position+0x8c>
					&& fabsf(current_rev - last_rev) < 0.1f) {
 8007cb4:	ed97 7a06 	vldr	s14, [r7, #24]
 8007cb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8007cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cc0:	eef0 7ae7 	vabs.f32	s15, s15
 8007cc4:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8007da4 <save_current_position+0x158>
 8007cc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cd0:	d502      	bpl.n	8007cd8 <save_current_position+0x8c>
				too_similar = true;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	75fb      	strb	r3, [r7, #23]
				// DEBUG: Position too similar, not saving
				return;// Exit early if too similar
 8007cd6:	e059      	b.n	8007d8c <save_current_position+0x140>
			}
		}

		// Only reach here if position should be saved
		saved_positions[saved_position_count].prismatic_pos = current_pris;
 8007cd8:	4b2e      	ldr	r3, [pc, #184]	@ (8007d94 <save_current_position+0x148>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	4a30      	ldr	r2, [pc, #192]	@ (8007da0 <save_current_position+0x154>)
 8007cde:	00db      	lsls	r3, r3, #3
 8007ce0:	4413      	add	r3, r2
 8007ce2:	69fa      	ldr	r2, [r7, #28]
 8007ce4:	601a      	str	r2, [r3, #0]
		saved_positions[saved_position_count].revolute_pos = current_rev;
 8007ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8007d94 <save_current_position+0x148>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	4a2d      	ldr	r2, [pc, #180]	@ (8007da0 <save_current_position+0x154>)
 8007cec:	00db      	lsls	r3, r3, #3
 8007cee:	4413      	add	r3, r2
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	69ba      	ldr	r2, [r7, #24]
 8007cf4:	601a      	str	r2, [r3, #0]

		uint8_t r_addr = 0x20 + saved_position_count * 2;
 8007cf6:	4b27      	ldr	r3, [pc, #156]	@ (8007d94 <save_current_position+0x148>)
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	3310      	adds	r3, #16
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	005b      	lsls	r3, r3, #1
 8007d00:	72fb      	strb	r3, [r7, #11]
		uint8_t t_addr = r_addr + 1;
 8007d02:	7afb      	ldrb	r3, [r7, #11]
 8007d04:	3301      	adds	r3, #1
 8007d06:	72bb      	strb	r3, [r7, #10]

		if (r_addr <= 0x38 && t_addr <= 0x39) {
 8007d08:	7afb      	ldrb	r3, [r7, #11]
 8007d0a:	2b38      	cmp	r3, #56	@ 0x38
 8007d0c:	d82e      	bhi.n	8007d6c <save_current_position+0x120>
 8007d0e:	7abb      	ldrb	r3, [r7, #10]
 8007d10:	2b39      	cmp	r3, #57	@ 0x39
 8007d12:	d82b      	bhi.n	8007d6c <save_current_position+0x120>
			int16_t r_mm_fixed = (int16_t) (current_pris * 10.0);
 8007d14:	69f8      	ldr	r0, [r7, #28]
 8007d16:	f7f8 fbe3 	bl	80004e0 <__aeabi_f2d>
 8007d1a:	f04f 0200 	mov.w	r2, #0
 8007d1e:	4b22      	ldr	r3, [pc, #136]	@ (8007da8 <save_current_position+0x15c>)
 8007d20:	f7f8 fc36 	bl	8000590 <__aeabi_dmul>
 8007d24:	4602      	mov	r2, r0
 8007d26:	460b      	mov	r3, r1
 8007d28:	4610      	mov	r0, r2
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	f7f8 feca 	bl	8000ac4 <__aeabi_d2iz>
 8007d30:	4603      	mov	r3, r0
 8007d32:	813b      	strh	r3, [r7, #8]
			int16_t t_deg_fixed = (int16_t) (revolute_axis.deg * 10.0);
 8007d34:	4b1d      	ldr	r3, [pc, #116]	@ (8007dac <save_current_position+0x160>)
 8007d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7f8 fbd1 	bl	80004e0 <__aeabi_f2d>
 8007d3e:	f04f 0200 	mov.w	r2, #0
 8007d42:	4b19      	ldr	r3, [pc, #100]	@ (8007da8 <save_current_position+0x15c>)
 8007d44:	f7f8 fc24 	bl	8000590 <__aeabi_dmul>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	4619      	mov	r1, r3
 8007d50:	f7f8 feb8 	bl	8000ac4 <__aeabi_d2iz>
 8007d54:	4603      	mov	r3, r0
 8007d56:	80fb      	strh	r3, [r7, #6]

			registerFrame[r_addr].U16 = r_mm_fixed;
 8007d58:	7afb      	ldrb	r3, [r7, #11]
 8007d5a:	8939      	ldrh	r1, [r7, #8]
 8007d5c:	4a14      	ldr	r2, [pc, #80]	@ (8007db0 <save_current_position+0x164>)
 8007d5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			registerFrame[t_addr].U16 = t_deg_fixed;
 8007d62:	7abb      	ldrb	r3, [r7, #10]
 8007d64:	88f9      	ldrh	r1, [r7, #6]
 8007d66:	4a12      	ldr	r2, [pc, #72]	@ (8007db0 <save_current_position+0x164>)
 8007d68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		saved_position_count++;
 8007d6c:	4b09      	ldr	r3, [pc, #36]	@ (8007d94 <save_current_position+0x148>)
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	3301      	adds	r3, #1
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	4b07      	ldr	r3, [pc, #28]	@ (8007d94 <save_current_position+0x148>)
 8007d76:	701a      	strb	r2, [r3, #0]

		if (saved_position_count >= JOY_MODE_MAX_POSITIONS) {
 8007d78:	4b06      	ldr	r3, [pc, #24]	@ (8007d94 <save_current_position+0x148>)
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	2b09      	cmp	r3, #9
 8007d7e:	d905      	bls.n	8007d8c <save_current_position+0x140>
			joy_mode_state = JOY_MODE_POSITION_SAVED;
 8007d80:	4b0c      	ldr	r3, [pc, #48]	@ (8007db4 <save_current_position+0x168>)
 8007d82:	2203      	movs	r2, #3
 8007d84:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 8007d86:	4b0c      	ldr	r3, [pc, #48]	@ (8007db8 <save_current_position+0x16c>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8007d8c:	3720      	adds	r7, #32
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	2000085c 	.word	0x2000085c
 8007d98:	20000994 	.word	0x20000994
 8007d9c:	200009f0 	.word	0x200009f0
 8007da0:	2000080c 	.word	0x2000080c
 8007da4:	3dcccccd 	.word	0x3dcccccd
 8007da8:	40240000 	.word	0x40240000
 8007dac:	2000074c 	.word	0x2000074c
 8007db0:	200015b0 	.word	0x200015b0
 8007db4:	20000808 	.word	0x20000808
 8007db8:	20000860 	.word	0x20000860

08007dbc <start_position_playback>:

void start_position_playback(void) {
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0

	if (saved_position_count > 0) {
 8007dc2:	4b19      	ldr	r3, [pc, #100]	@ (8007e28 <start_position_playback+0x6c>)
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d02a      	beq.n	8007e20 <start_position_playback+0x64>
		playback_position_index = 0;
 8007dca:	4b18      	ldr	r3, [pc, #96]	@ (8007e2c <start_position_playback+0x70>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	701a      	strb	r2, [r3, #0]
		joy_mode_playback_timer = 0;
 8007dd0:	4b17      	ldr	r3, [pc, #92]	@ (8007e30 <start_position_playback+0x74>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	601a      	str	r2, [r3, #0]
		joy_mode_state = JOY_MODE_PLAYBACK;
 8007dd6:	4b17      	ldr	r3, [pc, #92]	@ (8007e34 <start_position_playback+0x78>)
 8007dd8:	2204      	movs	r2, #4
 8007dda:	701a      	strb	r2, [r3, #0]
		// Keep pilot light ON during playback (don't turn it off)
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007de2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007de6:	f005 fb19 	bl	800d41c <HAL_GPIO_WritePin>
		joy_mode_pilot_state = true;
 8007dea:	4b13      	ldr	r3, [pc, #76]	@ (8007e38 <start_position_playback+0x7c>)
 8007dec:	2201      	movs	r2, #1
 8007dee:	701a      	strb	r2, [r3, #0]

		// Start first trajectory
		float target_pris = saved_positions[0].prismatic_pos;
 8007df0:	4b12      	ldr	r3, [pc, #72]	@ (8007e3c <start_position_playback+0x80>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	60fb      	str	r3, [r7, #12]
		float target_rev_rad = saved_positions[0].revolute_pos;
 8007df6:	4b11      	ldr	r3, [pc, #68]	@ (8007e3c <start_position_playback+0x80>)
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	60bb      	str	r3, [r7, #8]
		float target_rev_deg = target_rev_rad * 180.0f / PI;
 8007dfc:	edd7 7a02 	vldr	s15, [r7, #8]
 8007e00:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007e40 <start_position_playback+0x84>
 8007e04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007e08:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8007e44 <start_position_playback+0x88>
 8007e0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007e10:	edc7 7a01 	vstr	s15, [r7, #4]

		start_combined_trajectory(target_pris, target_rev_deg);
 8007e14:	edd7 0a01 	vldr	s1, [r7, #4]
 8007e18:	ed97 0a03 	vldr	s0, [r7, #12]
 8007e1c:	f7fe fb42 	bl	80064a4 <start_combined_trajectory>

	}
}
 8007e20:	bf00      	nop
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	2000085c 	.word	0x2000085c
 8007e2c:	2000085d 	.word	0x2000085d
 8007e30:	20000868 	.word	0x20000868
 8007e34:	20000808 	.word	0x20000808
 8007e38:	20000864 	.word	0x20000864
 8007e3c:	2000080c 	.word	0x2000080c
 8007e40:	43340000 	.word	0x43340000
 8007e44:	40490fdb 	.word	0x40490fdb

08007e48 <reset_joy_mode_data>:

void reset_joy_mode_data(void) {
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
	// Reset saved position count
	saved_position_count = 0;
 8007e4e:	4b19      	ldr	r3, [pc, #100]	@ (8007eb4 <reset_joy_mode_data+0x6c>)
 8007e50:	2200      	movs	r2, #0
 8007e52:	701a      	strb	r2, [r3, #0]

	// Reset playback index
	playback_position_index = 0;
 8007e54:	4b18      	ldr	r3, [pc, #96]	@ (8007eb8 <reset_joy_mode_data+0x70>)
 8007e56:	2200      	movs	r2, #0
 8007e58:	701a      	strb	r2, [r3, #0]

	// Clear all saved positions
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	607b      	str	r3, [r7, #4]
 8007e5e:	e011      	b.n	8007e84 <reset_joy_mode_data+0x3c>
		saved_positions[i].prismatic_pos = 0.0f;
 8007e60:	4a16      	ldr	r2, [pc, #88]	@ (8007ebc <reset_joy_mode_data+0x74>)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	00db      	lsls	r3, r3, #3
 8007e66:	4413      	add	r3, r2
 8007e68:	f04f 0200 	mov.w	r2, #0
 8007e6c:	601a      	str	r2, [r3, #0]
		saved_positions[i].revolute_pos = 0.0f;
 8007e6e:	4a13      	ldr	r2, [pc, #76]	@ (8007ebc <reset_joy_mode_data+0x74>)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	00db      	lsls	r3, r3, #3
 8007e74:	4413      	add	r3, r2
 8007e76:	3304      	adds	r3, #4
 8007e78:	f04f 0200 	mov.w	r2, #0
 8007e7c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	3301      	adds	r3, #1
 8007e82:	607b      	str	r3, [r7, #4]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b09      	cmp	r3, #9
 8007e88:	ddea      	ble.n	8007e60 <reset_joy_mode_data+0x18>
	}

	// Reset pilot light timers
	joy_mode_pilot_timer = 0;
 8007e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ec0 <reset_joy_mode_data+0x78>)
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	601a      	str	r2, [r3, #0]
	joy_mode_pilot_state = false;
 8007e90:	4b0c      	ldr	r3, [pc, #48]	@ (8007ec4 <reset_joy_mode_data+0x7c>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	701a      	strb	r2, [r3, #0]

	// Reset playback timer
	joy_mode_playback_timer = 0;
 8007e96:	4b0c      	ldr	r3, [pc, #48]	@ (8007ec8 <reset_joy_mode_data+0x80>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	601a      	str	r2, [r3, #0]

	// Reset button states
	joy_mode_b2_pressed = false;
 8007e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007ecc <reset_joy_mode_data+0x84>)
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	701a      	strb	r2, [r3, #0]
	joy_mode_b2_last_state = false;
 8007ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8007ed0 <reset_joy_mode_data+0x88>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	701a      	strb	r2, [r3, #0]
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr
 8007eb4:	2000085c 	.word	0x2000085c
 8007eb8:	2000085d 	.word	0x2000085d
 8007ebc:	2000080c 	.word	0x2000080c
 8007ec0:	20000860 	.word	0x20000860
 8007ec4:	20000864 	.word	0x20000864
 8007ec8:	20000868 	.word	0x20000868
 8007ecc:	2000086c 	.word	0x2000086c
 8007ed0:	2000086d 	.word	0x2000086d
 8007ed4:	00000000 	.word	0x00000000

08007ed8 <update_joy_mode_velocity_control>:

void update_joy_mode_velocity_control(void) {
 8007ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007edc:	ed2d 8b02 	vpush	{d8}
 8007ee0:	b08d      	sub	sp, #52	@ 0x34
 8007ee2:	af00      	add	r7, sp, #0
	// Read current photo sensor states directly
	bool up_photo_detected = HAL_GPIO_ReadPin(upperphoto_GPIO_Port,
 8007ee4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007ee8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007eec:	f005 fa7e 	bl	800d3ec <HAL_GPIO_ReadPin>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	bf14      	ite	ne
 8007ef6:	2301      	movne	r3, #1
 8007ef8:	2300      	moveq	r3, #0
 8007efa:	76fb      	strb	r3, [r7, #27]
	upperphoto_Pin);
	bool low_photo_detected = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 8007efc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007f00:	48a1      	ldr	r0, [pc, #644]	@ (8008188 <update_joy_mode_velocity_control+0x2b0>)
 8007f02:	f005 fa73 	bl	800d3ec <HAL_GPIO_ReadPin>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	bf14      	ite	ne
 8007f0c:	2301      	movne	r3, #1
 8007f0e:	2300      	moveq	r3, #0
 8007f10:	76bb      	strb	r3, [r7, #26]
	LOWER_PHOTO_Pin);

	// Prismatic axis control based on joystick_x
	float pris_command_vel = 0.0f;
 8007f12:	f04f 0300 	mov.w	r3, #0
 8007f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
	bool pris_moving = false;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	static bool pris_was_moving = false; // Track previous moving state

	// Process prismatic axis joystick control (FIXED LOGIC)
	if (up_photo_detected && joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 8007f1e:	7efb      	ldrb	r3, [r7, #27]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00d      	beq.n	8007f40 <update_joy_mode_velocity_control+0x68>
 8007f24:	4b99      	ldr	r3, [pc, #612]	@ (800818c <update_joy_mode_velocity_control+0x2b4>)
 8007f26:	edd3 7a00 	vldr	s15, [r3]
 8007f2a:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8008190 <update_joy_mode_velocity_control+0x2b8>
 8007f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f36:	dd03      	ble.n	8007f40 <update_joy_mode_velocity_control+0x68>
		// At up photo and trying to go up (negative direction) - block movement
		pris_command_vel = 0.0f;
 8007f38:	f04f 0300 	mov.w	r3, #0
 8007f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f3e:	e048      	b.n	8007fd2 <update_joy_mode_velocity_control+0xfa>
	} else if (low_photo_detected && joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 8007f40:	7ebb      	ldrb	r3, [r7, #26]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00d      	beq.n	8007f62 <update_joy_mode_velocity_control+0x8a>
 8007f46:	4b91      	ldr	r3, [pc, #580]	@ (800818c <update_joy_mode_velocity_control+0x2b4>)
 8007f48:	edd3 7a00 	vldr	s15, [r3]
 8007f4c:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8008194 <update_joy_mode_velocity_control+0x2bc>
 8007f50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f58:	d503      	bpl.n	8007f62 <update_joy_mode_velocity_control+0x8a>
		// At low photo and trying to go down (positive direction) - block movement
		pris_command_vel = 0.0f;
 8007f5a:	f04f 0300 	mov.w	r3, #0
 8007f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f60:	e037      	b.n	8007fd2 <update_joy_mode_velocity_control+0xfa>
	} else if (joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 8007f62:	4b8a      	ldr	r3, [pc, #552]	@ (800818c <update_joy_mode_velocity_control+0x2b4>)
 8007f64:	edd3 7a00 	vldr	s15, [r3]
 8007f68:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8008194 <update_joy_mode_velocity_control+0x2bc>
 8007f6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f74:	d50e      	bpl.n	8007f94 <update_joy_mode_velocity_control+0xbc>
		// Moving down (positive direction)
		pris_command_vel = JOY_MODE_CONSTANT_VELOCITY_PRIS;
 8007f76:	4b88      	ldr	r3, [pc, #544]	@ (8008198 <update_joy_mode_velocity_control+0x2c0>)
 8007f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = true;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		// Clear flags when moving away from sensors
		if (!low_photo_detected) {
 8007f80:	7ebb      	ldrb	r3, [r7, #26]
 8007f82:	f083 0301 	eor.w	r3, r3, #1
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d022      	beq.n	8007fd2 <update_joy_mode_velocity_control+0xfa>
			up_photo = false;
 8007f8c:	4b83      	ldr	r3, [pc, #524]	@ (800819c <update_joy_mode_velocity_control+0x2c4>)
 8007f8e:	2200      	movs	r2, #0
 8007f90:	701a      	strb	r2, [r3, #0]
 8007f92:	e01e      	b.n	8007fd2 <update_joy_mode_velocity_control+0xfa>
		}
	} else if (joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 8007f94:	4b7d      	ldr	r3, [pc, #500]	@ (800818c <update_joy_mode_velocity_control+0x2b4>)
 8007f96:	edd3 7a00 	vldr	s15, [r3]
 8007f9a:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8008190 <update_joy_mode_velocity_control+0x2b8>
 8007f9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fa6:	dd0e      	ble.n	8007fc6 <update_joy_mode_velocity_control+0xee>
		// Moving up (negative direction)
		pris_command_vel = -JOY_MODE_CONSTANT_VELOCITY_PRIS;
 8007fa8:	4b7d      	ldr	r3, [pc, #500]	@ (80081a0 <update_joy_mode_velocity_control+0x2c8>)
 8007faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = true;
 8007fac:	2301      	movs	r3, #1
 8007fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		// Clear flags when moving away from sensors
		if (!up_photo_detected) {
 8007fb2:	7efb      	ldrb	r3, [r7, #27]
 8007fb4:	f083 0301 	eor.w	r3, r3, #1
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d009      	beq.n	8007fd2 <update_joy_mode_velocity_control+0xfa>
			low_photo = false;
 8007fbe:	4b79      	ldr	r3, [pc, #484]	@ (80081a4 <update_joy_mode_velocity_control+0x2cc>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	701a      	strb	r2, [r3, #0]
 8007fc4:	e005      	b.n	8007fd2 <update_joy_mode_velocity_control+0xfa>
		}
	} else {
		// Joystick in deadband - hold position
		pris_command_vel = 0.0f;
 8007fc6:	f04f 0300 	mov.w	r3, #0
 8007fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = false;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	}

	// Revolute axis control based on joystick_y
	float rev_command_vel = 0.0f;
 8007fd2:	f04f 0300 	mov.w	r3, #0
 8007fd6:	627b      	str	r3, [r7, #36]	@ 0x24
	bool rev_moving = false;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	// Get current revolute position in degrees for limit checking
	float revolute_deg = UnitConverter_angle(&converter_system,
 8007fde:	4b72      	ldr	r3, [pc, #456]	@ (80081a8 <update_joy_mode_velocity_control+0x2d0>)
 8007fe0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8007fe4:	220e      	movs	r2, #14
 8007fe6:	210f      	movs	r1, #15
 8007fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8007fec:	486f      	ldr	r0, [pc, #444]	@ (80081ac <update_joy_mode_velocity_control+0x2d4>)
 8007fee:	f7fc fdeb 	bl	8004bc8 <UnitConverter_angle>
 8007ff2:	ed87 0a05 	vstr	s0, [r7, #20]
			revolute_encoder.rads, UNIT_RADIAN, UNIT_DEGREE);

	// Process revolute axis joystick control with limits
	if ((revolute_deg > 175.0f && joystick_y > JOY_MODE_VELOCITY_THRESHOLD)
 8007ff6:	edd7 7a05 	vldr	s15, [r7, #20]
 8007ffa:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 80081b0 <update_joy_mode_velocity_control+0x2d8>
 8007ffe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008006:	dd09      	ble.n	800801c <update_joy_mode_velocity_control+0x144>
 8008008:	4b6a      	ldr	r3, [pc, #424]	@ (80081b4 <update_joy_mode_velocity_control+0x2dc>)
 800800a:	edd3 7a00 	vldr	s15, [r3]
 800800e:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8008190 <update_joy_mode_velocity_control+0x2b8>
 8008012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800801a:	dc12      	bgt.n	8008042 <update_joy_mode_velocity_control+0x16a>
			|| (revolute_deg < -175.0f
 800801c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008020:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80081b8 <update_joy_mode_velocity_control+0x2e0>
 8008024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800802c:	d510      	bpl.n	8008050 <update_joy_mode_velocity_control+0x178>
					&& joystick_y < -JOY_MODE_VELOCITY_THRESHOLD)) {
 800802e:	4b61      	ldr	r3, [pc, #388]	@ (80081b4 <update_joy_mode_velocity_control+0x2dc>)
 8008030:	edd3 7a00 	vldr	s15, [r3]
 8008034:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8008194 <update_joy_mode_velocity_control+0x2bc>
 8008038:	eef4 7ac7 	vcmpe.f32	s15, s14
 800803c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008040:	d506      	bpl.n	8008050 <update_joy_mode_velocity_control+0x178>
		// At revolute limits - block movement
		rev_command_vel = 0.0f;
 8008042:	f04f 0300 	mov.w	r3, #0
 8008046:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = false;
 8008048:	2300      	movs	r3, #0
 800804a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800804e:	e025      	b.n	800809c <update_joy_mode_velocity_control+0x1c4>
	} else if (joystick_y > JOY_MODE_VELOCITY_THRESHOLD) {
 8008050:	4b58      	ldr	r3, [pc, #352]	@ (80081b4 <update_joy_mode_velocity_control+0x2dc>)
 8008052:	edd3 7a00 	vldr	s15, [r3]
 8008056:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8008190 <update_joy_mode_velocity_control+0x2b8>
 800805a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800805e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008062:	dd05      	ble.n	8008070 <update_joy_mode_velocity_control+0x198>
		rev_command_vel = JOY_MODE_CONSTANT_VELOCITY_REV;
 8008064:	4b55      	ldr	r3, [pc, #340]	@ (80081bc <update_joy_mode_velocity_control+0x2e4>)
 8008066:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = true;
 8008068:	2301      	movs	r3, #1
 800806a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800806e:	e015      	b.n	800809c <update_joy_mode_velocity_control+0x1c4>
	} else if (joystick_y < -JOY_MODE_VELOCITY_THRESHOLD) {
 8008070:	4b50      	ldr	r3, [pc, #320]	@ (80081b4 <update_joy_mode_velocity_control+0x2dc>)
 8008072:	edd3 7a00 	vldr	s15, [r3]
 8008076:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8008194 <update_joy_mode_velocity_control+0x2bc>
 800807a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800807e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008082:	d505      	bpl.n	8008090 <update_joy_mode_velocity_control+0x1b8>
		rev_command_vel = -JOY_MODE_CONSTANT_VELOCITY_REV;
 8008084:	4b4e      	ldr	r3, [pc, #312]	@ (80081c0 <update_joy_mode_velocity_control+0x2e8>)
 8008086:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = true;
 8008088:	2301      	movs	r3, #1
 800808a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800808e:	e005      	b.n	800809c <update_joy_mode_velocity_control+0x1c4>
	} else {
		// Joystick in deadband - hold position
		rev_command_vel = 0.0f;
 8008090:	f04f 0300 	mov.w	r3, #0
 8008094:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = false;
 8008096:	2300      	movs	r3, #0
 8008098:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	}

	/* PRISMATIC AXIS CONTROL - Keep existing PID-based control */
	// Detect transition from moving to stopped
	if (pris_was_moving && !pris_moving) {
 800809c:	4b49      	ldr	r3, [pc, #292]	@ (80081c4 <update_joy_mode_velocity_control+0x2ec>)
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00a      	beq.n	80080ba <update_joy_mode_velocity_control+0x1e2>
 80080a4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80080a8:	f083 0301 	eor.w	r3, r3, #1
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <update_joy_mode_velocity_control+0x1e2>
		// Just stopped moving - capture current position as target
		prismatic_axis.position = prismatic_encoder.mm;
 80080b2:	4b45      	ldr	r3, [pc, #276]	@ (80081c8 <update_joy_mode_velocity_control+0x2f0>)
 80080b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080b6:	4a45      	ldr	r2, [pc, #276]	@ (80081cc <update_joy_mode_velocity_control+0x2f4>)
 80080b8:	6013      	str	r3, [r2, #0]
	}

	if (pris_moving) {
 80080ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f000 8092 	beq.w	80081e8 <update_joy_mode_velocity_control+0x310>
		// Moving - use velocity control
		prismatic_axis.vel_error = pris_command_vel
				- prismatic_axis.kalman_velocity;
 80080c4:	4b41      	ldr	r3, [pc, #260]	@ (80081cc <update_joy_mode_velocity_control+0x2f4>)
 80080c6:	edd3 7a07 	vldr	s15, [r3, #28]
 80080ca:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80080ce:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = pris_command_vel
 80080d2:	4b3e      	ldr	r3, [pc, #248]	@ (80081cc <update_joy_mode_velocity_control+0x2f4>)
 80080d4:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 80080d8:	4b3c      	ldr	r3, [pc, #240]	@ (80081cc <update_joy_mode_velocity_control+0x2f4>)
 80080da:	edd3 7a06 	vldr	s15, [r3, #24]
 80080de:	eeb0 0a67 	vmov.f32	s0, s15
 80080e2:	483b      	ldr	r0, [pc, #236]	@ (80081d0 <update_joy_mode_velocity_control+0x2f8>)
 80080e4:	f7f9 f898 	bl	8001218 <PID_CONTROLLER_Compute>
 80080e8:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 80080ec:	4b39      	ldr	r3, [pc, #228]	@ (80081d4 <update_joy_mode_velocity_control+0x2fc>)
 80080ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 80080f2:	4610      	mov	r0, r2
 80080f4:	4619      	mov	r1, r3
 80080f6:	f7f8 fce5 	bl	8000ac4 <__aeabi_d2iz>
 80080fa:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 80080fc:	4b35      	ldr	r3, [pc, #212]	@ (80081d4 <update_joy_mode_velocity_control+0x2fc>)
 80080fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008102:	60ba      	str	r2, [r7, #8]
 8008104:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8008108:	60fb      	str	r3, [r7, #12]
		prismatic_axis.command_pos = PWM_Satuation(
 800810a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800810e:	f7f8 fcd9 	bl	8000ac4 <__aeabi_d2iz>
 8008112:	4603      	mov	r3, r0
 8008114:	4619      	mov	r1, r3
 8008116:	4620      	mov	r0, r4
 8008118:	eeb0 0a48 	vmov.f32	s0, s16
 800811c:	f7f9 f81a 	bl	8001154 <PWM_Satuation>
 8008120:	ee07 0a90 	vmov	s15, r0
 8008124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008128:	4b28      	ldr	r3, [pc, #160]	@ (80081cc <update_joy_mode_velocity_control+0x2f4>)
 800812a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward for moving
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 800812e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8008132:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80081d8 <update_joy_mode_velocity_control+0x300>
 8008136:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800813a:	eeb0 0a47 	vmov.f32	s0, s14
 800813e:	4827      	ldr	r0, [pc, #156]	@ (80081dc <update_joy_mode_velocity_control+0x304>)
 8008140:	f7f9 fb86 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 8008144:	eef0 7a40 	vmov.f32	s15, s0
 8008148:	4b20      	ldr	r3, [pc, #128]	@ (80081cc <update_joy_mode_velocity_control+0x2f4>)
 800814a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				pris_command_vel / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 800814e:	4b16      	ldr	r3, [pc, #88]	@ (80081a8 <update_joy_mode_velocity_control+0x2d0>)
 8008150:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8008154:	4b1c      	ldr	r3, [pc, #112]	@ (80081c8 <update_joy_mode_velocity_control+0x2f0>)
 8008156:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 800815a:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 80081d8 <update_joy_mode_velocity_control+0x300>
 800815e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8008162:	eeb0 1a66 	vmov.f32	s2, s13
 8008166:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 80081e0 <update_joy_mode_velocity_control+0x308>
 800816a:	eeb0 0a47 	vmov.f32	s0, s14
 800816e:	481d      	ldr	r0, [pc, #116]	@ (80081e4 <update_joy_mode_velocity_control+0x30c>)
 8008170:	f7f9 fc16 	bl	80019a0 <PRISMATIC_MOTOR_DFD_Compute>
 8008174:	eef0 7a40 	vmov.f32	s15, s0
 8008178:	4b14      	ldr	r3, [pc, #80]	@ (80081cc <update_joy_mode_velocity_control+0x2f4>)
 800817a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

		// Continuously update target position while moving
		prismatic_axis.position = prismatic_encoder.mm;
 800817e:	4b12      	ldr	r3, [pc, #72]	@ (80081c8 <update_joy_mode_velocity_control+0x2f0>)
 8008180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008182:	4a12      	ldr	r2, [pc, #72]	@ (80081cc <update_joy_mode_velocity_control+0x2f4>)
 8008184:	6013      	str	r3, [r2, #0]
 8008186:	e0a2      	b.n	80082ce <update_joy_mode_velocity_control+0x3f6>
 8008188:	48000400 	.word	0x48000400
 800818c:	20001e7c 	.word	0x20001e7c
 8008190:	42200000 	.word	0x42200000
 8008194:	c2200000 	.word	0xc2200000
 8008198:	43160000 	.word	0x43160000
 800819c:	200007ec 	.word	0x200007ec
 80081a0:	c3160000 	.word	0xc3160000
 80081a4:	200007ed 	.word	0x200007ed
 80081a8:	200009f0 	.word	0x200009f0
 80081ac:	20000d88 	.word	0x20000d88
 80081b0:	432f0000 	.word	0x432f0000
 80081b4:	20001e80 	.word	0x20001e80
 80081b8:	c32f0000 	.word	0xc32f0000
 80081bc:	40400000 	.word	0x40400000
 80081c0:	c0400000 	.word	0xc0400000
 80081c4:	200008e4 	.word	0x200008e4
 80081c8:	20000994 	.word	0x20000994
 80081cc:	20000708 	.word	0x20000708
 80081d0:	20000a74 	.word	0x20000a74
 80081d4:	20000080 	.word	0x20000080
 80081d8:	447a0000 	.word	0x447a0000
 80081dc:	20000b14 	.word	0x20000b14
 80081e0:	00000000 	.word	0x00000000
 80081e4:	20000b18 	.word	0x20000b18
	} else {
		// Not moving - hold target position with position control
		prismatic_axis.pos_error = prismatic_axis.position
 80081e8:	4b8d      	ldr	r3, [pc, #564]	@ (8008420 <update_joy_mode_velocity_control+0x548>)
 80081ea:	ed93 7a00 	vldr	s14, [r3]
				- prismatic_encoder.mm;
 80081ee:	4b8d      	ldr	r3, [pc, #564]	@ (8008424 <update_joy_mode_velocity_control+0x54c>)
 80081f0:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80081f4:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.pos_error = prismatic_axis.position
 80081f8:	4b89      	ldr	r3, [pc, #548]	@ (8008420 <update_joy_mode_velocity_control+0x548>)
 80081fa:	edc3 7a05 	vstr	s15, [r3, #20]
		prismatic_axis.command_vel = PWM_Satuation(
 80081fe:	4b88      	ldr	r3, [pc, #544]	@ (8008420 <update_joy_mode_velocity_control+0x548>)
 8008200:	edd3 7a05 	vldr	s15, [r3, #20]
 8008204:	eeb0 0a67 	vmov.f32	s0, s15
 8008208:	4887      	ldr	r0, [pc, #540]	@ (8008428 <update_joy_mode_velocity_control+0x550>)
 800820a:	f7f9 f805 	bl	8001218 <PID_CONTROLLER_Compute>
 800820e:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_position_pid,
						prismatic_axis.pos_error),
				ZGX45RGG_400RPM_Constant.sd_max,
 8008212:	4b86      	ldr	r3, [pc, #536]	@ (800842c <update_joy_mode_velocity_control+0x554>)
 8008214:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
		prismatic_axis.command_vel = PWM_Satuation(
 8008218:	4610      	mov	r0, r2
 800821a:	4619      	mov	r1, r3
 800821c:	f7f8 fc52 	bl	8000ac4 <__aeabi_d2iz>
 8008220:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.sd_max);
 8008222:	4b82      	ldr	r3, [pc, #520]	@ (800842c <update_joy_mode_velocity_control+0x554>)
 8008224:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8008228:	603a      	str	r2, [r7, #0]
 800822a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800822e:	607b      	str	r3, [r7, #4]
		prismatic_axis.command_vel = PWM_Satuation(
 8008230:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008234:	f7f8 fc46 	bl	8000ac4 <__aeabi_d2iz>
 8008238:	4603      	mov	r3, r0
 800823a:	4619      	mov	r1, r3
 800823c:	4620      	mov	r0, r4
 800823e:	eeb0 0a48 	vmov.f32	s0, s16
 8008242:	f7f8 ff87 	bl	8001154 <PWM_Satuation>
 8008246:	ee07 0a90 	vmov	s15, r0
 800824a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800824e:	4b74      	ldr	r3, [pc, #464]	@ (8008420 <update_joy_mode_velocity_control+0x548>)
 8008250:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

		prismatic_axis.vel_error = prismatic_axis.command_vel
 8008254:	4b72      	ldr	r3, [pc, #456]	@ (8008420 <update_joy_mode_velocity_control+0x548>)
 8008256:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 800825a:	4b71      	ldr	r3, [pc, #452]	@ (8008420 <update_joy_mode_velocity_control+0x548>)
 800825c:	edd3 7a07 	vldr	s15, [r3, #28]
 8008260:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8008264:	4b6e      	ldr	r3, [pc, #440]	@ (8008420 <update_joy_mode_velocity_control+0x548>)
 8008266:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 800826a:	4b6d      	ldr	r3, [pc, #436]	@ (8008420 <update_joy_mode_velocity_control+0x548>)
 800826c:	edd3 7a06 	vldr	s15, [r3, #24]
 8008270:	eeb0 0a67 	vmov.f32	s0, s15
 8008274:	486e      	ldr	r0, [pc, #440]	@ (8008430 <update_joy_mode_velocity_control+0x558>)
 8008276:	f7f8 ffcf 	bl	8001218 <PID_CONTROLLER_Compute>
 800827a:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 800827e:	4b6b      	ldr	r3, [pc, #428]	@ (800842c <update_joy_mode_velocity_control+0x554>)
 8008280:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8008284:	4610      	mov	r0, r2
 8008286:	4619      	mov	r1, r3
 8008288:	f7f8 fc1c 	bl	8000ac4 <__aeabi_d2iz>
 800828c:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 800828e:	4b67      	ldr	r3, [pc, #412]	@ (800842c <update_joy_mode_velocity_control+0x554>)
 8008290:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008294:	4615      	mov	r5, r2
 8008296:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(
 800829a:	4628      	mov	r0, r5
 800829c:	4631      	mov	r1, r6
 800829e:	f7f8 fc11 	bl	8000ac4 <__aeabi_d2iz>
 80082a2:	4603      	mov	r3, r0
 80082a4:	4619      	mov	r1, r3
 80082a6:	4620      	mov	r0, r4
 80082a8:	eeb0 0a48 	vmov.f32	s0, s16
 80082ac:	f7f8 ff52 	bl	8001154 <PWM_Satuation>
 80082b0:	ee07 0a90 	vmov	s15, r0
 80082b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082b8:	4b59      	ldr	r3, [pc, #356]	@ (8008420 <update_joy_mode_velocity_control+0x548>)
 80082ba:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// No feedforward when holding position
		prismatic_axis.ffd = 0.0f;
 80082be:	4b58      	ldr	r3, [pc, #352]	@ (8008420 <update_joy_mode_velocity_control+0x548>)
 80082c0:	f04f 0200 	mov.w	r2, #0
 80082c4:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 80082c6:	4b56      	ldr	r3, [pc, #344]	@ (8008420 <update_joy_mode_velocity_control+0x548>)
 80082c8:	f04f 0200 	mov.w	r2, #0
 80082cc:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	// Update previous state for next iteration
	pris_was_moving = pris_moving;
 80082ce:	4a59      	ldr	r2, [pc, #356]	@ (8008434 <update_joy_mode_velocity_control+0x55c>)
 80082d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80082d4:	7013      	strb	r3, [r2, #0]

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 80082d6:	4b52      	ldr	r3, [pc, #328]	@ (8008420 <update_joy_mode_velocity_control+0x548>)
 80082d8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80082dc:	4b50      	ldr	r3, [pc, #320]	@ (8008420 <update_joy_mode_velocity_control+0x548>)
 80082de:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80082e2:	4b4f      	ldr	r3, [pc, #316]	@ (8008420 <update_joy_mode_velocity_control+0x548>)
 80082e4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80082e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082f0:	4b4b      	ldr	r3, [pc, #300]	@ (8008420 <update_joy_mode_velocity_control+0x548>)
 80082f2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80082f6:	4b4a      	ldr	r3, [pc, #296]	@ (8008420 <update_joy_mode_velocity_control+0x548>)
 80082f8:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 80082fc:	4b4b      	ldr	r3, [pc, #300]	@ (800842c <update_joy_mode_velocity_control+0x554>)
 80082fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8008302:	4610      	mov	r0, r2
 8008304:	4619      	mov	r1, r3
 8008306:	f7f8 fbdd 	bl	8000ac4 <__aeabi_d2iz>
 800830a:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 800830c:	4b47      	ldr	r3, [pc, #284]	@ (800842c <update_joy_mode_velocity_control+0x554>)
 800830e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008312:	4692      	mov	sl, r2
 8008314:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8008318:	4650      	mov	r0, sl
 800831a:	4659      	mov	r1, fp
 800831c:	f7f8 fbd2 	bl	8000ac4 <__aeabi_d2iz>
 8008320:	4603      	mov	r3, r0
 8008322:	4619      	mov	r1, r3
 8008324:	4620      	mov	r0, r4
 8008326:	eeb0 0a48 	vmov.f32	s0, s16
 800832a:	f7f8 ff13 	bl	8001154 <PWM_Satuation>
 800832e:	ee07 0a90 	vmov	s15, r0
 8008332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008336:	4b3a      	ldr	r3, [pc, #232]	@ (8008420 <update_joy_mode_velocity_control+0x548>)
 8008338:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	/* REVOLUTE AXIS CONTROL - SIMPLIFIED PURE PWM WITH FFD + DFD */
	float base_pwm = 0.0f;
 800833c:	f04f 0300 	mov.w	r3, #0
 8008340:	61fb      	str	r3, [r7, #28]

	if (rev_moving) {
 8008342:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008346:	2b00      	cmp	r3, #0
 8008348:	d02e      	beq.n	80083a8 <update_joy_mode_velocity_control+0x4d0>
		// Calculate base PWM proportional to joystick input
		// Scale joystick input (-50 to +50) to PWM range
		float joystick_normalized = joystick_y / 50.0f; // -1.0 to +1.0
 800834a:	4b3b      	ldr	r3, [pc, #236]	@ (8008438 <update_joy_mode_velocity_control+0x560>)
 800834c:	ed93 7a00 	vldr	s14, [r3]
 8008350:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 800843c <update_joy_mode_velocity_control+0x564>
 8008354:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008358:	edc7 7a04 	vstr	s15, [r7, #16]
		base_pwm = joystick_normalized
				* (ZGX45RGG_150RPM_Constant.U_max * 0.3f); // Limit to 30% max PWM for safety
 800835c:	6938      	ldr	r0, [r7, #16]
 800835e:	f7f8 f8bf 	bl	80004e0 <__aeabi_f2d>
 8008362:	4604      	mov	r4, r0
 8008364:	460d      	mov	r5, r1
 8008366:	4b36      	ldr	r3, [pc, #216]	@ (8008440 <update_joy_mode_velocity_control+0x568>)
 8008368:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800836c:	a32a      	add	r3, pc, #168	@ (adr r3, 8008418 <update_joy_mode_velocity_control+0x540>)
 800836e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008372:	f7f8 f90d 	bl	8000590 <__aeabi_dmul>
 8008376:	4602      	mov	r2, r0
 8008378:	460b      	mov	r3, r1
 800837a:	4620      	mov	r0, r4
 800837c:	4629      	mov	r1, r5
 800837e:	f7f8 f907 	bl	8000590 <__aeabi_dmul>
 8008382:	4602      	mov	r2, r0
 8008384:	460b      	mov	r3, r1
		base_pwm = joystick_normalized
 8008386:	4610      	mov	r0, r2
 8008388:	4619      	mov	r1, r3
 800838a:	f7f8 fbe3 	bl	8000b54 <__aeabi_d2f>
 800838e:	4603      	mov	r3, r0
 8008390:	61fb      	str	r3, [r7, #28]

		// Add velocity feedforward
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8008392:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8008396:	482b      	ldr	r0, [pc, #172]	@ (8008444 <update_joy_mode_velocity_control+0x56c>)
 8008398:	f7f9 f8dc 	bl	8001554 <REVOLUTE_MOTOR_FFD_Compute>
 800839c:	eef0 7a40 	vmov.f32	s15, s0
 80083a0:	4b29      	ldr	r3, [pc, #164]	@ (8008448 <update_joy_mode_velocity_control+0x570>)
 80083a2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 80083a6:	e006      	b.n	80083b6 <update_joy_mode_velocity_control+0x4de>
				rev_command_vel);
	} else {
		// Joystick released - no base PWM, only compensation
		base_pwm = 0.0f;
 80083a8:	f04f 0300 	mov.w	r3, #0
 80083ac:	61fb      	str	r3, [r7, #28]
		revolute_axis.ffd = 0.0f;
 80083ae:	4b26      	ldr	r3, [pc, #152]	@ (8008448 <update_joy_mode_velocity_control+0x570>)
 80083b0:	f04f 0200 	mov.w	r2, #0
 80083b4:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	if (prismatic_encoder.mm < 100.0) {
 80083b6:	4b1b      	ldr	r3, [pc, #108]	@ (8008424 <update_joy_mode_velocity_control+0x54c>)
 80083b8:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80083bc:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 800844c <update_joy_mode_velocity_control+0x574>
 80083c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083c8:	d54a      	bpl.n	8008460 <update_joy_mode_velocity_control+0x588>

		// Always add gravity/disturbance compensation
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80083ca:	4b21      	ldr	r3, [pc, #132]	@ (8008450 <update_joy_mode_velocity_control+0x578>)
 80083cc:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f) * 2.5;
 80083d0:	4b14      	ldr	r3, [pc, #80]	@ (8008424 <update_joy_mode_velocity_control+0x54c>)
 80083d2:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80083d6:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 8008454 <update_joy_mode_velocity_control+0x57c>
 80083da:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80083de:	eef0 0a66 	vmov.f32	s1, s13
 80083e2:	eeb0 0a47 	vmov.f32	s0, s14
 80083e6:	481c      	ldr	r0, [pc, #112]	@ (8008458 <update_joy_mode_velocity_control+0x580>)
 80083e8:	f7f9 f947 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 80083ec:	ee10 3a10 	vmov	r3, s0
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7f8 f875 	bl	80004e0 <__aeabi_f2d>
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f) * 2.5;
 80083f6:	f04f 0200 	mov.w	r2, #0
 80083fa:	4b18      	ldr	r3, [pc, #96]	@ (800845c <update_joy_mode_velocity_control+0x584>)
 80083fc:	f7f8 f8c8 	bl	8000590 <__aeabi_dmul>
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	4610      	mov	r0, r2
 8008406:	4619      	mov	r1, r3
 8008408:	f7f8 fba4 	bl	8000b54 <__aeabi_d2f>
 800840c:	4603      	mov	r3, r0
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 800840e:	4a0e      	ldr	r2, [pc, #56]	@ (8008448 <update_joy_mode_velocity_control+0x570>)
 8008410:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008412:	e03b      	b.n	800848c <update_joy_mode_velocity_control+0x5b4>
 8008414:	f3af 8000 	nop.w
 8008418:	40000000 	.word	0x40000000
 800841c:	3fd33333 	.word	0x3fd33333
 8008420:	20000708 	.word	0x20000708
 8008424:	20000994 	.word	0x20000994
 8008428:	20000a4c 	.word	0x20000a4c
 800842c:	20000080 	.word	0x20000080
 8008430:	20000a74 	.word	0x20000a74
 8008434:	200008e4 	.word	0x200008e4
 8008438:	20001e80 	.word	0x20001e80
 800843c:	42480000 	.word	0x42480000
 8008440:	20000000 	.word	0x20000000
 8008444:	20000b20 	.word	0x20000b20
 8008448:	2000074c 	.word	0x2000074c
 800844c:	42c80000 	.word	0x42c80000
 8008450:	200009f0 	.word	0x200009f0
 8008454:	447a0000 	.word	0x447a0000
 8008458:	20000b24 	.word	0x20000b24
 800845c:	40040000 	.word	0x40040000
	} else {

		// Always add gravity/disturbance compensation
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8008460:	4b46      	ldr	r3, [pc, #280]	@ (800857c <update_joy_mode_velocity_control+0x6a4>)
 8008462:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8008466:	4b46      	ldr	r3, [pc, #280]	@ (8008580 <update_joy_mode_velocity_control+0x6a8>)
 8008468:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 800846c:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8008584 <update_joy_mode_velocity_control+0x6ac>
 8008470:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8008474:	eef0 0a66 	vmov.f32	s1, s13
 8008478:	eeb0 0a47 	vmov.f32	s0, s14
 800847c:	4842      	ldr	r0, [pc, #264]	@ (8008588 <update_joy_mode_velocity_control+0x6b0>)
 800847e:	f7f9 f8fc 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 8008482:	eef0 7a40 	vmov.f32	s15, s0
 8008486:	4b41      	ldr	r3, [pc, #260]	@ (800858c <update_joy_mode_velocity_control+0x6b4>)
 8008488:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// Apply filtering to feedforward terms for stability
	static float ffd_filtered = 0.0f;
	static float dfd_filtered = 0.0f;

	ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 800848c:	4b40      	ldr	r3, [pc, #256]	@ (8008590 <update_joy_mode_velocity_control+0x6b8>)
 800848e:	edd3 7a00 	vldr	s15, [r3]
 8008492:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8008594 <update_joy_mode_velocity_control+0x6bc>
 8008496:	ee27 7a87 	vmul.f32	s14, s15, s14
 800849a:	4b3c      	ldr	r3, [pc, #240]	@ (800858c <update_joy_mode_velocity_control+0x6b4>)
 800849c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80084a0:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008598 <update_joy_mode_velocity_control+0x6c0>
 80084a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80084a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084ac:	4b38      	ldr	r3, [pc, #224]	@ (8008590 <update_joy_mode_velocity_control+0x6b8>)
 80084ae:	edc3 7a00 	vstr	s15, [r3]
	dfd_filtered = 0.2f * dfd_filtered + 0.8f * revolute_axis.dfd;
 80084b2:	4b3a      	ldr	r3, [pc, #232]	@ (800859c <update_joy_mode_velocity_control+0x6c4>)
 80084b4:	edd3 7a00 	vldr	s15, [r3]
 80084b8:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8008598 <update_joy_mode_velocity_control+0x6c0>
 80084bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80084c0:	4b32      	ldr	r3, [pc, #200]	@ (800858c <update_joy_mode_velocity_control+0x6b4>)
 80084c2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80084c6:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8008594 <update_joy_mode_velocity_control+0x6bc>
 80084ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80084ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084d2:	4b32      	ldr	r3, [pc, #200]	@ (800859c <update_joy_mode_velocity_control+0x6c4>)
 80084d4:	edc3 7a00 	vstr	s15, [r3]

	// Combine base PWM with feedforward compensation
	revolute_axis.command_pos = base_pwm
			+ 0.01f * (ffd_filtered + dfd_filtered);
 80084d8:	4b2d      	ldr	r3, [pc, #180]	@ (8008590 <update_joy_mode_velocity_control+0x6b8>)
 80084da:	ed93 7a00 	vldr	s14, [r3]
 80084de:	4b2f      	ldr	r3, [pc, #188]	@ (800859c <update_joy_mode_velocity_control+0x6c4>)
 80084e0:	edd3 7a00 	vldr	s15, [r3]
 80084e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084e8:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80085a0 <update_joy_mode_velocity_control+0x6c8>
 80084ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80084f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80084f4:	ee77 7a27 	vadd.f32	s15, s14, s15
	revolute_axis.command_pos = base_pwm
 80084f8:	4b24      	ldr	r3, [pc, #144]	@ (800858c <update_joy_mode_velocity_control+0x6b4>)
 80084fa:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Saturate final command
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80084fe:	4b23      	ldr	r3, [pc, #140]	@ (800858c <update_joy_mode_velocity_control+0x6b4>)
 8008500:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8008504:	4b27      	ldr	r3, [pc, #156]	@ (80085a4 <update_joy_mode_velocity_control+0x6cc>)
 8008506:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 800850a:	4610      	mov	r0, r2
 800850c:	4619      	mov	r1, r3
 800850e:	f7f8 fad9 	bl	8000ac4 <__aeabi_d2iz>
 8008512:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8008514:	4b23      	ldr	r3, [pc, #140]	@ (80085a4 <update_joy_mode_velocity_control+0x6cc>)
 8008516:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800851a:	4690      	mov	r8, r2
 800851c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8008520:	4640      	mov	r0, r8
 8008522:	4649      	mov	r1, r9
 8008524:	f7f8 face 	bl	8000ac4 <__aeabi_d2iz>
 8008528:	4603      	mov	r3, r0
 800852a:	4619      	mov	r1, r3
 800852c:	4620      	mov	r0, r4
 800852e:	eeb0 0a48 	vmov.f32	s0, s16
 8008532:	f7f8 fe0f 	bl	8001154 <PWM_Satuation>
 8008536:	ee07 0a90 	vmov	s15, r0
 800853a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800853e:	4b13      	ldr	r3, [pc, #76]	@ (800858c <update_joy_mode_velocity_control+0x6b4>)
 8008540:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Apply motor commands
	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8008544:	4b18      	ldr	r3, [pc, #96]	@ (80085a8 <update_joy_mode_velocity_control+0x6d0>)
 8008546:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800854a:	eef0 0a67 	vmov.f32	s1, s15
 800854e:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 80085ac <update_joy_mode_velocity_control+0x6d4>
 8008552:	4817      	ldr	r0, [pc, #92]	@ (80085b0 <update_joy_mode_velocity_control+0x6d8>)
 8008554:	f7f8 ff16 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8008558:	4b0c      	ldr	r3, [pc, #48]	@ (800858c <update_joy_mode_velocity_control+0x6b4>)
 800855a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800855e:	eef0 0a67 	vmov.f32	s1, s15
 8008562:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 80085ac <update_joy_mode_velocity_control+0x6d4>
 8008566:	4813      	ldr	r0, [pc, #76]	@ (80085b4 <update_joy_mode_velocity_control+0x6dc>)
 8008568:	f7f8 ff0c 	bl	8001384 <MDXX_set_range>
}
 800856c:	bf00      	nop
 800856e:	3734      	adds	r7, #52	@ 0x34
 8008570:	46bd      	mov	sp, r7
 8008572:	ecbd 8b02 	vpop	{d8}
 8008576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800857a:	bf00      	nop
 800857c:	200009f0 	.word	0x200009f0
 8008580:	20000994 	.word	0x20000994
 8008584:	447a0000 	.word	0x447a0000
 8008588:	20000b24 	.word	0x20000b24
 800858c:	2000074c 	.word	0x2000074c
 8008590:	200008e8 	.word	0x200008e8
 8008594:	3f4ccccd 	.word	0x3f4ccccd
 8008598:	3e4ccccd 	.word	0x3e4ccccd
 800859c:	200008ec 	.word	0x200008ec
 80085a0:	3c23d70a 	.word	0x3c23d70a
 80085a4:	20000000 	.word	0x20000000
 80085a8:	20000708 	.word	0x20000708
 80085ac:	44fa0000 	.word	0x44fa0000
 80085b0:	200008fc 	.word	0x200008fc
 80085b4:	20000948 	.word	0x20000948

080085b8 <update_joy_mode_pilot_light>:

void update_joy_mode_pilot_light(void) {
 80085b8:	b580      	push	{r7, lr}
 80085ba:	af00      	add	r7, sp, #0
	if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 80085bc:	4b14      	ldr	r3, [pc, #80]	@ (8008610 <update_joy_mode_pilot_light+0x58>)
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	2b03      	cmp	r3, #3
 80085c2:	d122      	bne.n	800860a <update_joy_mode_pilot_light+0x52>
		// Toggle pilot light every 1 second when 10 positions are saved
		joy_mode_pilot_timer++;
 80085c4:	4b13      	ldr	r3, [pc, #76]	@ (8008614 <update_joy_mode_pilot_light+0x5c>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	3301      	adds	r3, #1
 80085ca:	4a12      	ldr	r2, [pc, #72]	@ (8008614 <update_joy_mode_pilot_light+0x5c>)
 80085cc:	6013      	str	r3, [r2, #0]
		if (joy_mode_pilot_timer >= JOY_MODE_PILOT_TOGGLE_PERIOD) {
 80085ce:	4b11      	ldr	r3, [pc, #68]	@ (8008614 <update_joy_mode_pilot_light+0x5c>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80085d6:	d318      	bcc.n	800860a <update_joy_mode_pilot_light+0x52>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 80085d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80085dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80085e0:	f004 ff34 	bl	800d44c <HAL_GPIO_TogglePin>
			joy_mode_pilot_state = !joy_mode_pilot_state;
 80085e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008618 <update_joy_mode_pilot_light+0x60>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	bf14      	ite	ne
 80085ee:	2301      	movne	r3, #1
 80085f0:	2300      	moveq	r3, #0
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	f083 0301 	eor.w	r3, r3, #1
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	4b05      	ldr	r3, [pc, #20]	@ (8008618 <update_joy_mode_pilot_light+0x60>)
 8008602:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 8008604:	4b03      	ldr	r3, [pc, #12]	@ (8008614 <update_joy_mode_pilot_light+0x5c>)
 8008606:	2200      	movs	r2, #0
 8008608:	601a      	str	r2, [r3, #0]
		}
	}
}
 800860a:	bf00      	nop
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	20000808 	.word	0x20000808
 8008614:	20000860 	.word	0x20000860
 8008618:	20000864 	.word	0x20000864

0800861c <update_joy_mode>:

void update_joy_mode(void) {
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
	if (!joy_mode_active) {
 8008622:	4b46      	ldr	r3, [pc, #280]	@ (800873c <update_joy_mode+0x120>)
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	f083 0301 	eor.w	r3, r3, #1
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b00      	cmp	r3, #0
 800862e:	d17e      	bne.n	800872e <update_joy_mode+0x112>
		return;
	}

	// ALWAYS update position display values when in joy mode
	normalized_position = normalize_angle(revolute_encoder.rads);
 8008630:	4b43      	ldr	r3, [pc, #268]	@ (8008740 <update_joy_mode+0x124>)
 8008632:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8008636:	eeb0 0a67 	vmov.f32	s0, s15
 800863a:	f7fd fdbf 	bl	80061bc <normalize_angle>
 800863e:	eef0 7a40 	vmov.f32	s15, s0
 8008642:	4b40      	ldr	r3, [pc, #256]	@ (8008744 <update_joy_mode+0x128>)
 8008644:	edc3 7a00 	vstr	s15, [r3]
	prismatic_axis.mm = prismatic_encoder.mm;
 8008648:	4b3f      	ldr	r3, [pc, #252]	@ (8008748 <update_joy_mode+0x12c>)
 800864a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800864c:	4a3f      	ldr	r2, [pc, #252]	@ (800874c <update_joy_mode+0x130>)
 800864e:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 8008650:	4b3c      	ldr	r3, [pc, #240]	@ (8008744 <update_joy_mode+0x128>)
 8008652:	edd3 7a00 	vldr	s15, [r3]
 8008656:	220e      	movs	r2, #14
 8008658:	210f      	movs	r1, #15
 800865a:	eeb0 0a67 	vmov.f32	s0, s15
 800865e:	483c      	ldr	r0, [pc, #240]	@ (8008750 <update_joy_mode+0x134>)
 8008660:	f7fc fab2 	bl	8004bc8 <UnitConverter_angle>
 8008664:	eef0 7a40 	vmov.f32	s15, s0
 8008668:	4b3a      	ldr	r3, [pc, #232]	@ (8008754 <update_joy_mode+0x138>)
 800866a:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);

	switch (joy_mode_state) {
 800866e:	4b3a      	ldr	r3, [pc, #232]	@ (8008758 <update_joy_mode+0x13c>)
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	3b01      	subs	r3, #1
 8008674:	2b03      	cmp	r3, #3
 8008676:	d85d      	bhi.n	8008734 <update_joy_mode+0x118>
 8008678:	a201      	add	r2, pc, #4	@ (adr r2, 8008680 <update_joy_mode+0x64>)
 800867a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867e:	bf00      	nop
 8008680:	08008691 	.word	0x08008691
 8008684:	08008697 	.word	0x08008697
 8008688:	0800869d 	.word	0x0800869d
 800868c:	080086ab 	.word	0x080086ab
	case JOY_MODE_INITIAL_CONTROL:
		// Initial manual joystick control - no position saving yet
		update_joy_mode_velocity_control();
 8008690:	f7ff fc22 	bl	8007ed8 <update_joy_mode_velocity_control>
		break;
 8008694:	e04e      	b.n	8008734 <update_joy_mode+0x118>

	case JOY_MODE_MANUAL_CONTROL:
		// Manual joystick control with position saving enabled
		update_joy_mode_velocity_control();
 8008696:	f7ff fc1f 	bl	8007ed8 <update_joy_mode_velocity_control>
		break;
 800869a:	e04b      	b.n	8008734 <update_joy_mode+0x118>

	case JOY_MODE_POSITION_SAVED:
		revolute_axis.position = revolute_encoder.rads;
 800869c:	4b28      	ldr	r3, [pc, #160]	@ (8008740 <update_joy_mode+0x124>)
 800869e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086a0:	4a2c      	ldr	r2, [pc, #176]	@ (8008754 <update_joy_mode+0x138>)
 80086a2:	6013      	str	r3, [r2, #0]
		// 10 positions saved, pilot light toggling, waiting for B2 to start playback
		update_joy_mode_pilot_light();
 80086a4:	f7ff ff88 	bl	80085b8 <update_joy_mode_pilot_light>
		break;
 80086a8:	e044      	b.n	8008734 <update_joy_mode+0x118>

	case JOY_MODE_PLAYBACK:
		// Playing back saved positions - let update_control_loops handle trajectory

		// Check if current trajectory is complete
		if (motion_sequence_state == MOTION_IDLE) {
 80086aa:	4b2c      	ldr	r3, [pc, #176]	@ (800875c <update_joy_mode+0x140>)
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d13f      	bne.n	8008732 <update_joy_mode+0x116>
			// Current trajectory finished, wait before starting next
			joy_mode_playback_timer++;
 80086b2:	4b2b      	ldr	r3, [pc, #172]	@ (8008760 <update_joy_mode+0x144>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	3301      	adds	r3, #1
 80086b8:	4a29      	ldr	r2, [pc, #164]	@ (8008760 <update_joy_mode+0x144>)
 80086ba:	6013      	str	r3, [r2, #0]

			if (joy_mode_playback_timer >= JOY_MODE_PLAYBACK_DELAY) {
 80086bc:	4b28      	ldr	r3, [pc, #160]	@ (8008760 <update_joy_mode+0x144>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80086c4:	d335      	bcc.n	8008732 <update_joy_mode+0x116>
				playback_position_index++;
 80086c6:	4b27      	ldr	r3, [pc, #156]	@ (8008764 <update_joy_mode+0x148>)
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	3301      	adds	r3, #1
 80086cc:	b2da      	uxtb	r2, r3
 80086ce:	4b25      	ldr	r3, [pc, #148]	@ (8008764 <update_joy_mode+0x148>)
 80086d0:	701a      	strb	r2, [r3, #0]

				if (playback_position_index < saved_position_count) {
 80086d2:	4b24      	ldr	r3, [pc, #144]	@ (8008764 <update_joy_mode+0x148>)
 80086d4:	781a      	ldrb	r2, [r3, #0]
 80086d6:	4b24      	ldr	r3, [pc, #144]	@ (8008768 <update_joy_mode+0x14c>)
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d224      	bcs.n	8008728 <update_joy_mode+0x10c>
					// Start next trajectory
					float target_pris =
							saved_positions[playback_position_index].prismatic_pos;
 80086de:	4b21      	ldr	r3, [pc, #132]	@ (8008764 <update_joy_mode+0x148>)
 80086e0:	781b      	ldrb	r3, [r3, #0]
					float target_pris =
 80086e2:	4a22      	ldr	r2, [pc, #136]	@ (800876c <update_joy_mode+0x150>)
 80086e4:	00db      	lsls	r3, r3, #3
 80086e6:	4413      	add	r3, r2
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	60fb      	str	r3, [r7, #12]
					float target_rev_rad =
							saved_positions[playback_position_index].revolute_pos;
 80086ec:	4b1d      	ldr	r3, [pc, #116]	@ (8008764 <update_joy_mode+0x148>)
 80086ee:	781b      	ldrb	r3, [r3, #0]
					float target_rev_rad =
 80086f0:	4a1e      	ldr	r2, [pc, #120]	@ (800876c <update_joy_mode+0x150>)
 80086f2:	00db      	lsls	r3, r3, #3
 80086f4:	4413      	add	r3, r2
 80086f6:	3304      	adds	r3, #4
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	60bb      	str	r3, [r7, #8]
					float target_rev_deg = target_rev_rad * 180.0f / PI;
 80086fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8008700:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8008770 <update_joy_mode+0x154>
 8008704:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008708:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8008774 <update_joy_mode+0x158>
 800870c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008710:	edc7 7a01 	vstr	s15, [r7, #4]

					start_combined_trajectory(target_pris, target_rev_deg);
 8008714:	edd7 0a01 	vldr	s1, [r7, #4]
 8008718:	ed97 0a03 	vldr	s0, [r7, #12]
 800871c:	f7fd fec2 	bl	80064a4 <start_combined_trajectory>
					joy_mode_playback_timer = 0;
 8008720:	4b0f      	ldr	r3, [pc, #60]	@ (8008760 <update_joy_mode+0x144>)
 8008722:	2200      	movs	r2, #0
 8008724:	601a      	str	r2, [r3, #0]
			}
		}

		// Let update_control_loops handle the actual motion control
		// No need to handle motion states here anymore
		break;
 8008726:	e004      	b.n	8008732 <update_joy_mode+0x116>
					exit_joy_mode();
 8008728:	f7ff fa1c 	bl	8007b64 <exit_joy_mode>
		break;
 800872c:	e001      	b.n	8008732 <update_joy_mode+0x116>
		return;
 800872e:	bf00      	nop
 8008730:	e000      	b.n	8008734 <update_joy_mode+0x118>
		break;
 8008732:	bf00      	nop

	}
}
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	20000809 	.word	0x20000809
 8008740:	200009f0 	.word	0x200009f0
 8008744:	20000800 	.word	0x20000800
 8008748:	20000994 	.word	0x20000994
 800874c:	20000708 	.word	0x20000708
 8008750:	20000d88 	.word	0x20000d88
 8008754:	2000074c 	.word	0x2000074c
 8008758:	20000808 	.word	0x20000808
 800875c:	20000790 	.word	0x20000790
 8008760:	20000868 	.word	0x20000868
 8008764:	2000085d 	.word	0x2000085d
 8008768:	2000085c 	.word	0x2000085c
 800876c:	2000080c 	.word	0x2000080c
 8008770:	43340000 	.word	0x43340000
 8008774:	40490fdb 	.word	0x40490fdb

08008778 <handle_b2_button_polling>:

void handle_b2_button_polling(void) {
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
	// Read current B2 button state (assuming active low like other buttons)
	bool b2_current_state = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 800877e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008782:	485a      	ldr	r0, [pc, #360]	@ (80088ec <handle_b2_button_polling+0x174>)
 8008784:	f004 fe32 	bl	800d3ec <HAL_GPIO_ReadPin>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	bf0c      	ite	eq
 800878e:	2301      	moveq	r3, #1
 8008790:	2300      	movne	r3, #0
 8008792:	73fb      	strb	r3, [r7, #15]

//	b2S[0] = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
	static uint32_t last_press_time = 0;
	static uint32_t press_counter = 0;
	const uint32_t DEBOUNCE_TIME = 200; // 200ms debounce time
 8008794:	23c8      	movs	r3, #200	@ 0xc8
 8008796:	60bb      	str	r3, [r7, #8]
	const uint32_t DEBOUNCE_SAMPLES = 10;
 8008798:	230a      	movs	r3, #10
 800879a:	607b      	str	r3, [r7, #4]

	press_counter++; // Increment every timer tick (assuming 1ms timer)
 800879c:	4b54      	ldr	r3, [pc, #336]	@ (80088f0 <handle_b2_button_polling+0x178>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	3301      	adds	r3, #1
 80087a2:	4a53      	ldr	r2, [pc, #332]	@ (80088f0 <handle_b2_button_polling+0x178>)
 80087a4:	6013      	str	r3, [r2, #0]
	static bool stable_state = false;
	static bool last_stable_state = false;
//	 Edge detection with debouncing
	if (b2_current_state == stable_state) {
 80087a6:	4b53      	ldr	r3, [pc, #332]	@ (80088f4 <handle_b2_button_polling+0x17c>)
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	7bfa      	ldrb	r2, [r7, #15]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d110      	bne.n	80087d2 <handle_b2_button_polling+0x5a>
		debounce_counter++;
 80087b0:	4b51      	ldr	r3, [pc, #324]	@ (80088f8 <handle_b2_button_polling+0x180>)
 80087b2:	881b      	ldrh	r3, [r3, #0]
 80087b4:	3301      	adds	r3, #1
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	4b4f      	ldr	r3, [pc, #316]	@ (80088f8 <handle_b2_button_polling+0x180>)
 80087ba:	801a      	strh	r2, [r3, #0]
		if (debounce_counter >= DEBOUNCE_SAMPLES) {
 80087bc:	4b4e      	ldr	r3, [pc, #312]	@ (80088f8 <handle_b2_button_polling+0x180>)
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	461a      	mov	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d80a      	bhi.n	80087de <handle_b2_button_polling+0x66>
			// สถานะคงที่แล้ว
			debounce_counter = DEBOUNCE_SAMPLES;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	4b4a      	ldr	r3, [pc, #296]	@ (80088f8 <handle_b2_button_polling+0x180>)
 80087ce:	801a      	strh	r2, [r3, #0]
 80087d0:	e005      	b.n	80087de <handle_b2_button_polling+0x66>
		}
	} else {
		// สถานะเปลี่ยน - เริ่มนับใหม่
		stable_state = b2_current_state;
 80087d2:	4a48      	ldr	r2, [pc, #288]	@ (80088f4 <handle_b2_button_polling+0x17c>)
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
 80087d6:	7013      	strb	r3, [r2, #0]
		debounce_counter = 0;
 80087d8:	4b47      	ldr	r3, [pc, #284]	@ (80088f8 <handle_b2_button_polling+0x180>)
 80087da:	2200      	movs	r2, #0
 80087dc:	801a      	strh	r2, [r3, #0]
	}

	// ใช้สถานะที่คงที่เท่านั้น
	if (debounce_counter >= DEBOUNCE_SAMPLES) {
 80087de:	4b46      	ldr	r3, [pc, #280]	@ (80088f8 <handle_b2_button_polling+0x180>)
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	461a      	mov	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d871      	bhi.n	80088ce <handle_b2_button_polling+0x156>
		// Edge detection with stable state
		if (stable_state && !last_stable_state) {
 80087ea:	4b42      	ldr	r3, [pc, #264]	@ (80088f4 <handle_b2_button_polling+0x17c>)
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d069      	beq.n	80088c6 <handle_b2_button_polling+0x14e>
 80087f2:	4b42      	ldr	r3, [pc, #264]	@ (80088fc <handle_b2_button_polling+0x184>)
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	f083 0301 	eor.w	r3, r3, #1
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d062      	beq.n	80088c6 <handle_b2_button_polling+0x14e>
			// Button just pressed with stable reading
			if ((press_counter - last_press_time) >= DEBOUNCE_TIME) {
 8008800:	4b3b      	ldr	r3, [pc, #236]	@ (80088f0 <handle_b2_button_polling+0x178>)
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	4b3e      	ldr	r3, [pc, #248]	@ (8008900 <handle_b2_button_polling+0x188>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	429a      	cmp	r2, r3
 800880e:	d85a      	bhi.n	80088c6 <handle_b2_button_polling+0x14e>
				// เพิ่มการตรวจสอบ state machine ให้รัดกุมขึ้น
				if (!is_emergency_active() && !homing_active
 8008810:	f7ff f938 	bl	8007a84 <is_emergency_active>
 8008814:	4603      	mov	r3, r0
 8008816:	f083 0301 	eor.w	r3, r3, #1
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b00      	cmp	r3, #0
 800881e:	d04b      	beq.n	80088b8 <handle_b2_button_polling+0x140>
 8008820:	4b38      	ldr	r3, [pc, #224]	@ (8008904 <handle_b2_button_polling+0x18c>)
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	f083 0301 	eor.w	r3, r3, #1
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d044      	beq.n	80088b8 <handle_b2_button_polling+0x140>
						&& motion_sequence_state == MOTION_IDLE
 800882e:	4b36      	ldr	r3, [pc, #216]	@ (8008908 <handle_b2_button_polling+0x190>)
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d140      	bne.n	80088b8 <handle_b2_button_polling+0x140>
						&& !is_drawing_active() &&  // เพิ่มการตรวจสอบนี้
 8008836:	f000 fce5 	bl	8009204 <is_drawing_active>
 800883a:	4603      	mov	r3, r0
 800883c:	f083 0301 	eor.w	r3, r3, #1
 8008840:	b2db      	uxtb	r3, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	d038      	beq.n	80088b8 <handle_b2_button_polling+0x140>
						!word_drawing_active) {   // เพิ่มการตรวจสอบนี้
 8008846:	4b31      	ldr	r3, [pc, #196]	@ (800890c <handle_b2_button_polling+0x194>)
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	f083 0301 	eor.w	r3, r3, #1
 800884e:	b2db      	uxtb	r3, r3
						&& !is_drawing_active() &&  // เพิ่มการตรวจสอบนี้
 8008850:	2b00      	cmp	r3, #0
 8008852:	d031      	beq.n	80088b8 <handle_b2_button_polling+0x140>

					if (!joy_mode_active) {
 8008854:	4b2e      	ldr	r3, [pc, #184]	@ (8008910 <handle_b2_button_polling+0x198>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	f083 0301 	eor.w	r3, r3, #1
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d002      	beq.n	8008868 <handle_b2_button_polling+0xf0>
						// Enter joy mode
						enter_joy_mode();
 8008862:	f7ff f91f 	bl	8007aa4 <enter_joy_mode>
 8008866:	e027      	b.n	80088b8 <handle_b2_button_polling+0x140>
					} else {
						// Joy mode is active, handle based on state
						switch (joy_mode_state) {
 8008868:	4b2a      	ldr	r3, [pc, #168]	@ (8008914 <handle_b2_button_polling+0x19c>)
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	3b01      	subs	r3, #1
 800886e:	2b03      	cmp	r3, #3
 8008870:	d822      	bhi.n	80088b8 <handle_b2_button_polling+0x140>
 8008872:	a201      	add	r2, pc, #4	@ (adr r2, 8008878 <handle_b2_button_polling+0x100>)
 8008874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008878:	08008889 	.word	0x08008889
 800887c:	08008891 	.word	0x08008891
 8008880:	080088b3 	.word	0x080088b3
 8008884:	080088b9 	.word	0x080088b9
						case JOY_MODE_INITIAL_CONTROL:
							joy_mode_state = JOY_MODE_MANUAL_CONTROL;
 8008888:	4b22      	ldr	r3, [pc, #136]	@ (8008914 <handle_b2_button_polling+0x19c>)
 800888a:	2202      	movs	r2, #2
 800888c:	701a      	strb	r2, [r3, #0]
							break;
 800888e:	e013      	b.n	80088b8 <handle_b2_button_polling+0x140>

						case JOY_MODE_MANUAL_CONTROL:
							HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8008890:	2200      	movs	r2, #0
 8008892:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008896:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800889a:	f004 fdbf 	bl	800d41c <HAL_GPIO_WritePin>
							save_current_position();
 800889e:	f7ff f9d5 	bl	8007c4c <save_current_position>
							HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 80088a2:	2201      	movs	r2, #1
 80088a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80088a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80088ac:	f004 fdb6 	bl	800d41c <HAL_GPIO_WritePin>
							break;
 80088b0:	e002      	b.n	80088b8 <handle_b2_button_polling+0x140>

						case JOY_MODE_POSITION_SAVED:
							start_position_playback();
 80088b2:	f7ff fa83 	bl	8007dbc <start_position_playback>
							break;
 80088b6:	bf00      	nop
							break;
						}
					}
				}

				joy_mode_b2_pressed = true;
 80088b8:	4b17      	ldr	r3, [pc, #92]	@ (8008918 <handle_b2_button_polling+0x1a0>)
 80088ba:	2201      	movs	r2, #1
 80088bc:	701a      	strb	r2, [r3, #0]
				last_press_time = press_counter;
 80088be:	4b0c      	ldr	r3, [pc, #48]	@ (80088f0 <handle_b2_button_polling+0x178>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a0f      	ldr	r2, [pc, #60]	@ (8008900 <handle_b2_button_polling+0x188>)
 80088c4:	6013      	str	r3, [r2, #0]
			}
		}

		last_stable_state = stable_state;
 80088c6:	4b0b      	ldr	r3, [pc, #44]	@ (80088f4 <handle_b2_button_polling+0x17c>)
 80088c8:	781a      	ldrb	r2, [r3, #0]
 80088ca:	4b0c      	ldr	r3, [pc, #48]	@ (80088fc <handle_b2_button_polling+0x184>)
 80088cc:	701a      	strb	r2, [r3, #0]
	}

	// Reset pressed flag when button is released
	if (!stable_state) {
 80088ce:	4b09      	ldr	r3, [pc, #36]	@ (80088f4 <handle_b2_button_polling+0x17c>)
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	f083 0301 	eor.w	r3, r3, #1
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d002      	beq.n	80088e2 <handle_b2_button_polling+0x16a>
		joy_mode_b2_pressed = false;
 80088dc:	4b0e      	ldr	r3, [pc, #56]	@ (8008918 <handle_b2_button_polling+0x1a0>)
 80088de:	2200      	movs	r2, #0
 80088e0:	701a      	strb	r2, [r3, #0]
	}
}
 80088e2:	bf00      	nop
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	48000800 	.word	0x48000800
 80088f0:	200008f0 	.word	0x200008f0
 80088f4:	200008f4 	.word	0x200008f4
 80088f8:	200008b2 	.word	0x200008b2
 80088fc:	200008f5 	.word	0x200008f5
 8008900:	200008f8 	.word	0x200008f8
 8008904:	200007ef 	.word	0x200007ef
 8008908:	20000790 	.word	0x20000790
 800890c:	200008c8 	.word	0x200008c8
 8008910:	20000809 	.word	0x20000809
 8008914:	20000808 	.word	0x20000808
 8008918:	2000086c 	.word	0x2000086c

0800891c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	4603      	mov	r3, r0
 8008924:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == prox_Pin) {
 8008926:	88fb      	ldrh	r3, [r7, #6]
 8008928:	2b20      	cmp	r3, #32
 800892a:	d105      	bne.n	8008938 <HAL_GPIO_EXTI_Callback+0x1c>
		prox_count++;
 800892c:	4b61      	ldr	r3, [pc, #388]	@ (8008ab4 <HAL_GPIO_EXTI_Callback+0x198>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3301      	adds	r3, #1
 8008932:	4a60      	ldr	r2, [pc, #384]	@ (8008ab4 <HAL_GPIO_EXTI_Callback+0x198>)
 8008934:	6013      	str	r3, [r2, #0]
		return;
 8008936:	e0b9      	b.n	8008aac <HAL_GPIO_EXTI_Callback+0x190>
	}

	if (GPIO_Pin == upperphoto_Pin) {
 8008938:	88fb      	ldrh	r3, [r7, #6]
 800893a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800893e:	d103      	bne.n	8008948 <HAL_GPIO_EXTI_Callback+0x2c>
		up_photo = true;
 8008940:	4b5d      	ldr	r3, [pc, #372]	@ (8008ab8 <HAL_GPIO_EXTI_Callback+0x19c>)
 8008942:	2201      	movs	r2, #1
 8008944:	701a      	strb	r2, [r3, #0]
		return;
 8008946:	e0b1      	b.n	8008aac <HAL_GPIO_EXTI_Callback+0x190>
	}

	if (GPIO_Pin == LOWER_PHOTO_Pin) {
 8008948:	88fb      	ldrh	r3, [r7, #6]
 800894a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800894e:	d103      	bne.n	8008958 <HAL_GPIO_EXTI_Callback+0x3c>
		low_photo = true;
 8008950:	4b5a      	ldr	r3, [pc, #360]	@ (8008abc <HAL_GPIO_EXTI_Callback+0x1a0>)
 8008952:	2201      	movs	r2, #1
 8008954:	701a      	strb	r2, [r3, #0]
		return;
 8008956:	e0a9      	b.n	8008aac <HAL_GPIO_EXTI_Callback+0x190>
	}

	if (GPIO_Pin == EMER_Pin) {
 8008958:	88fb      	ldrh	r3, [r7, #6]
 800895a:	2b10      	cmp	r3, #16
 800895c:	d102      	bne.n	8008964 <HAL_GPIO_EXTI_Callback+0x48>
		trigger_hardware_emergency();
 800895e:	f7fe ff07 	bl	8007770 <trigger_hardware_emergency>
		return;
 8008962:	e0a3      	b.n	8008aac <HAL_GPIO_EXTI_Callback+0x190>
	}

	if (GPIO_Pin == J1_Pin) {
 8008964:	88fb      	ldrh	r3, [r7, #6]
 8008966:	2b80      	cmp	r3, #128	@ 0x80
 8008968:	d14a      	bne.n	8008a00 <HAL_GPIO_EXTI_Callback+0xe4>

		uint32_t current_time = HAL_GetTick();
 800896a:	f002 faf7 	bl	800af5c <HAL_GetTick>
 800896e:	60f8      	str	r0, [r7, #12]
		if ((current_time - j1_interrupt_last_time) < 200) {
 8008970:	4b53      	ldr	r3, [pc, #332]	@ (8008ac0 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	1ad3      	subs	r3, r2, r3
 8008978:	2bc7      	cmp	r3, #199	@ 0xc7
 800897a:	f240 8092 	bls.w	8008aa2 <HAL_GPIO_EXTI_Callback+0x186>
			return; // ignore ถ้ายังไม่ครบ 200ms
		}
		j1_interrupt_last_time = current_time;
 800897e:	4a50      	ldr	r2, [pc, #320]	@ (8008ac0 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6013      	str	r3, [r2, #0]

		if (!is_emergency_active() && !homing_active && !joy_mode_active
 8008984:	f7ff f87e 	bl	8007a84 <is_emergency_active>
 8008988:	4603      	mov	r3, r0
 800898a:	f083 0301 	eor.w	r3, r3, #1
 800898e:	b2db      	uxtb	r3, r3
 8008990:	2b00      	cmp	r3, #0
 8008992:	d035      	beq.n	8008a00 <HAL_GPIO_EXTI_Callback+0xe4>
 8008994:	4b4b      	ldr	r3, [pc, #300]	@ (8008ac4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	f083 0301 	eor.w	r3, r3, #1
 800899c:	b2db      	uxtb	r3, r3
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d02e      	beq.n	8008a00 <HAL_GPIO_EXTI_Callback+0xe4>
 80089a2:	4b49      	ldr	r3, [pc, #292]	@ (8008ac8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	f083 0301 	eor.w	r3, r3, #1
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d027      	beq.n	8008a00 <HAL_GPIO_EXTI_Callback+0xe4>
				&& !first_startup) {
 80089b0:	4b46      	ldr	r3, [pc, #280]	@ (8008acc <HAL_GPIO_EXTI_Callback+0x1b0>)
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	f083 0301 	eor.w	r3, r3, #1
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d020      	beq.n	8008a00 <HAL_GPIO_EXTI_Callback+0xe4>
			if (!j1_active) {
 80089be:	4b44      	ldr	r3, [pc, #272]	@ (8008ad0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	f083 0301 	eor.w	r3, r3, #1
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d013      	beq.n	80089f4 <HAL_GPIO_EXTI_Callback+0xd8>
				// start Again
				j1_active = true;
 80089cc:	4b40      	ldr	r3, [pc, #256]	@ (8008ad0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80089ce:	2201      	movs	r2, #1
 80089d0:	701a      	strb	r2, [r3, #0]
				j1_cycle_count = 0;
 80089d2:	4b40      	ldr	r3, [pc, #256]	@ (8008ad4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	701a      	strb	r2, [r3, #0]
				j1_going_to_target = true;
 80089d8:	4b3f      	ldr	r3, [pc, #252]	@ (8008ad8 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80089da:	2201      	movs	r2, #1
 80089dc:	701a      	strb	r2, [r3, #0]

				// go to target
				start_combined_trajectory(J1_TARGET_PRIS, J1_TARGET_REV);
 80089de:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8008adc <HAL_GPIO_EXTI_Callback+0x1c0>
 80089e2:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8008ae0 <HAL_GPIO_EXTI_Callback+0x1c4>
 80089e6:	eef0 0a47 	vmov.f32	s1, s14
 80089ea:	eeb0 0a67 	vmov.f32	s0, s15
 80089ee:	f7fd fd59 	bl	80064a4 <start_combined_trajectory>
 80089f2:	e005      	b.n	8008a00 <HAL_GPIO_EXTI_Callback+0xe4>
			} else {
				// stop

				j1_active = false;
 80089f4:	4b36      	ldr	r3, [pc, #216]	@ (8008ad0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80089f6:	2200      	movs	r2, #0
 80089f8:	701a      	strb	r2, [r3, #0]
				j1_cycle_count = 0;
 80089fa:	4b36      	ldr	r3, [pc, #216]	@ (8008ad4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	701a      	strb	r2, [r3, #0]
			}
		}
	}
// J2 is NOT handled here anymore - it's polled in the main loop

	if (GPIO_Pin == J3_Pin) {
 8008a00:	88fb      	ldrh	r3, [r7, #6]
 8008a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a06:	d139      	bne.n	8008a7c <HAL_GPIO_EXTI_Callback+0x160>
		uint32_t current_time = HAL_GetTick();
 8008a08:	f002 faa8 	bl	800af5c <HAL_GetTick>
 8008a0c:	60b8      	str	r0, [r7, #8]

		// Reset counter if timeout exceeded
		if ((current_time - j3_last_press_time) > J3_PRESS_TIMEOUT) {
 8008a0e:	4b35      	ldr	r3, [pc, #212]	@ (8008ae4 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	2296      	movs	r2, #150	@ 0x96
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d902      	bls.n	8008a22 <HAL_GPIO_EXTI_Callback+0x106>
			j3_press_count = 0;
 8008a1c:	4b32      	ldr	r3, [pc, #200]	@ (8008ae8 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	701a      	strb	r2, [r3, #0]
		}

		j3_last_press_time = current_time;
 8008a22:	4a30      	ldr	r2, [pc, #192]	@ (8008ae4 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	6013      	str	r3, [r2, #0]
		j3_press_count++;
 8008a28:	4b2f      	ldr	r3, [pc, #188]	@ (8008ae8 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	b2da      	uxtb	r2, r3
 8008a30:	4b2d      	ldr	r3, [pc, #180]	@ (8008ae8 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8008a32:	701a      	strb	r2, [r3, #0]

		if (!is_emergency_active() && !joy_mode_active
 8008a34:	f7ff f826 	bl	8007a84 <is_emergency_active>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	f083 0301 	eor.w	r3, r3, #1
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d030      	beq.n	8008aa6 <HAL_GPIO_EXTI_Callback+0x18a>
 8008a44:	4b20      	ldr	r3, [pc, #128]	@ (8008ac8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	f083 0301 	eor.w	r3, r3, #1
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d029      	beq.n	8008aa6 <HAL_GPIO_EXTI_Callback+0x18a>
				&& motion_sequence_state == MOTION_IDLE) {
 8008a52:	4b26      	ldr	r3, [pc, #152]	@ (8008aec <HAL_GPIO_EXTI_Callback+0x1d0>)
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d125      	bne.n	8008aa6 <HAL_GPIO_EXTI_Callback+0x18a>
			switch (j3_press_count) {
 8008a5a:	4b23      	ldr	r3, [pc, #140]	@ (8008ae8 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d105      	bne.n	8008a6e <HAL_GPIO_EXTI_Callback+0x152>
			case 1:
				// กดครั้งแรก: วาดคำ FIBO_G01
				start_word_FIBO_G01();
 8008a62:	f000 fbdb 	bl	800921c <start_word_FIBO_G01>
				j3_press_count = 0; // Reset counter
 8008a66:	4b20      	ldr	r3, [pc, #128]	@ (8008ae8 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8008a68:	2200      	movs	r2, #0
 8008a6a:	701a      	strb	r2, [r3, #0]
				break;
 8008a6c:	e005      	b.n	8008a7a <HAL_GPIO_EXTI_Callback+0x15e>

			default:
				// Reset if pressed too many times
				stop_character_drawing();
 8008a6e:	f000 fbab 	bl	80091c8 <stop_character_drawing>
				j3_press_count = 0;
 8008a72:	4b1d      	ldr	r3, [pc, #116]	@ (8008ae8 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	701a      	strb	r2, [r3, #0]
				break;
 8008a78:	bf00      	nop
			}
		}
		return;
 8008a7a:	e014      	b.n	8008aa6 <HAL_GPIO_EXTI_Callback+0x18a>

	}

// Modified J4 button handler for joy mode exit
	if (GPIO_Pin == J4_Pin) {
 8008a7c:	88fb      	ldrh	r3, [r7, #6]
 8008a7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a82:	d113      	bne.n	8008aac <HAL_GPIO_EXTI_Callback+0x190>
		if (joy_mode_active) {
 8008a84:	4b10      	ldr	r3, [pc, #64]	@ (8008ac8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d002      	beq.n	8008a92 <HAL_GPIO_EXTI_Callback+0x176>
			// Exit joy mode and hold current position (don't move)
			exit_joy_mode();
 8008a8c:	f7ff f86a 	bl	8007b64 <exit_joy_mode>
		} else if (is_emergency_active()) {
			clear_emergency_state();
		}
		return;
 8008a90:	e00b      	b.n	8008aaa <HAL_GPIO_EXTI_Callback+0x18e>
		} else if (is_emergency_active()) {
 8008a92:	f7fe fff7 	bl	8007a84 <is_emergency_active>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d006      	beq.n	8008aaa <HAL_GPIO_EXTI_Callback+0x18e>
			clear_emergency_state();
 8008a9c:	f7fe feaa 	bl	80077f4 <clear_emergency_state>
		return;
 8008aa0:	e003      	b.n	8008aaa <HAL_GPIO_EXTI_Callback+0x18e>
			return; // ignore ถ้ายังไม่ครบ 200ms
 8008aa2:	bf00      	nop
 8008aa4:	e002      	b.n	8008aac <HAL_GPIO_EXTI_Callback+0x190>
		return;
 8008aa6:	bf00      	nop
 8008aa8:	e000      	b.n	8008aac <HAL_GPIO_EXTI_Callback+0x190>
		return;
 8008aaa:	bf00      	nop
	}
}
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	200007e8 	.word	0x200007e8
 8008ab8:	200007ec 	.word	0x200007ec
 8008abc:	200007ed 	.word	0x200007ed
 8008ac0:	2000089c 	.word	0x2000089c
 8008ac4:	200007ef 	.word	0x200007ef
 8008ac8:	20000809 	.word	0x20000809
 8008acc:	20000333 	.word	0x20000333
 8008ad0:	20000899 	.word	0x20000899
 8008ad4:	20000898 	.word	0x20000898
 8008ad8:	20000335 	.word	0x20000335
 8008adc:	43480000 	.word	0x43480000
 8008ae0:	42b40000 	.word	0x42b40000
 8008ae4:	200008a4 	.word	0x200008a4
 8008ae8:	200008a0 	.word	0x200008a0
 8008aec:	20000790 	.word	0x20000790

08008af0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a9e      	ldr	r2, [pc, #632]	@ (8008d74 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	f040 8135 	bne.w	8008d6c <HAL_TIM_PeriodElapsedCallback+0x27c>
		Modbus_Protocal_Worker();
 8008b02:	f7f9 faa5 	bl	8002050 <Modbus_Protocal_Worker>
		modbus_working();
 8008b06:	f000 f95d 	bl	8008dc4 <modbus_working>

		plotter_update_sensors();
 8008b0a:	f001 f87f 	bl	8009c0c <plotter_update_sensors>
		check_emergency_button();
 8008b0e:	f7fe fd8d 	bl	800762c <check_emergency_button>

		QEI_get_diff_count(&prismatic_encoder);
 8008b12:	4899      	ldr	r0, [pc, #612]	@ (8008d78 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8008b14:	f7fb f9b8 	bl	8003e88 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 8008b18:	4897      	ldr	r0, [pc, #604]	@ (8008d78 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8008b1a:	f7fb faa1 	bl	8004060 <QEI_compute_data>
		QEI_get_diff_count(&revolute_encoder);
 8008b1e:	4897      	ldr	r0, [pc, #604]	@ (8008d7c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008b20:	f7fb f9b2 	bl	8003e88 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 8008b24:	4895      	ldr	r0, [pc, #596]	@ (8008d7c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008b26:	f7fb fa9b 	bl	8004060 <QEI_compute_data>

		revolute_axis.input_voltage = mapf(revolute_axis.command_pos, -65535.0f,
 8008b2a:	4b95      	ldr	r3, [pc, #596]	@ (8008d80 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8008b2c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008b30:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8008b34:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8008b38:	ed9f 1a92 	vldr	s2, [pc, #584]	@ 8008d84 <HAL_TIM_PeriodElapsedCallback+0x294>
 8008b3c:	eddf 0a92 	vldr	s1, [pc, #584]	@ 8008d88 <HAL_TIM_PeriodElapsedCallback+0x298>
 8008b40:	eeb0 0a67 	vmov.f32	s0, s15
 8008b44:	f7f9 f96d 	bl	8001e22 <mapf>
 8008b48:	eef0 7a40 	vmov.f32	s15, s0
 8008b4c:	4b8c      	ldr	r3, [pc, #560]	@ (8008d80 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8008b4e:	edc3 7a08 	vstr	s15, [r3, #32]
				65535.0f, -12.0f, 12.0f);
		revolute_axis.kalman_velocity = SteadyStateKalmanFilter(
 8008b52:	4b8b      	ldr	r3, [pc, #556]	@ (8008d80 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8008b54:	edd3 7a08 	vldr	s15, [r3, #32]
 8008b58:	4b88      	ldr	r3, [pc, #544]	@ (8008d7c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008b5a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8008b5e:	eef0 0a47 	vmov.f32	s1, s14
 8008b62:	eeb0 0a67 	vmov.f32	s0, s15
 8008b66:	4889      	ldr	r0, [pc, #548]	@ (8008d8c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8008b68:	f7fc fab8 	bl	80050dc <SteadyStateKalmanFilter>
 8008b6c:	eef0 7a40 	vmov.f32	s15, s0
 8008b70:	4b83      	ldr	r3, [pc, #524]	@ (8008d80 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8008b72:	edc3 7a07 	vstr	s15, [r3, #28]
				&revolute_kalman, revolute_axis.input_voltage,
				revolute_encoder.rads);
//		revolute_axis.kalman_velocity = FIR_process(&revolute_lp, revolute_encoder.radps);

		if (isnan(revolute_axis.kalman_velocity)) {
 8008b76:	4b82      	ldr	r3, [pc, #520]	@ (8008d80 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8008b78:	edd3 7a07 	vldr	s15, [r3, #28]
 8008b7c:	eef4 7a67 	vcmp.f32	s15, s15
 8008b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b84:	d703      	bvc.n	8008b8e <HAL_TIM_PeriodElapsedCallback+0x9e>
			revolute_axis.kalman_velocity = 0.0f;
 8008b86:	4b7e      	ldr	r3, [pc, #504]	@ (8008d80 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8008b88:	f04f 0200 	mov.w	r2, #0
 8008b8c:	61da      	str	r2, [r3, #28]
		}

		prismatic_axis.input_voltage = mapf(prismatic_axis.command_pos,
 8008b8e:	4b80      	ldr	r3, [pc, #512]	@ (8008d90 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8008b90:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008b94:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8008b98:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8008b9c:	ed9f 1a79 	vldr	s2, [pc, #484]	@ 8008d84 <HAL_TIM_PeriodElapsedCallback+0x294>
 8008ba0:	eddf 0a79 	vldr	s1, [pc, #484]	@ 8008d88 <HAL_TIM_PeriodElapsedCallback+0x298>
 8008ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8008ba8:	f7f9 f93b 	bl	8001e22 <mapf>
 8008bac:	eef0 7a40 	vmov.f32	s15, s0
 8008bb0:	4b77      	ldr	r3, [pc, #476]	@ (8008d90 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8008bb2:	edc3 7a08 	vstr	s15, [r3, #32]
				-65535.0f, 65535.0f, -12.0f, 12.0f);
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8008bb6:	4b76      	ldr	r3, [pc, #472]	@ (8008d90 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8008bb8:	edd3 7a08 	vldr	s15, [r3, #32]
 8008bbc:	4b6e      	ldr	r3, [pc, #440]	@ (8008d78 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8008bbe:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8008bc2:	eef0 0a47 	vmov.f32	s1, s14
 8008bc6:	eeb0 0a67 	vmov.f32	s0, s15
 8008bca:	4872      	ldr	r0, [pc, #456]	@ (8008d94 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008bcc:	f7fa fb96 	bl	80032fc <MotorKalman_Estimate>
 8008bd0:	eeb0 7a40 	vmov.f32	s14, s0
				prismatic_axis.input_voltage, prismatic_encoder.rads)
				* Disturbance_Constant.prismatic_pulley_radius * 1000.0f;
 8008bd4:	4b70      	ldr	r3, [pc, #448]	@ (8008d98 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8008bd6:	edd3 7a04 	vldr	s15, [r3, #16]
 8008bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bde:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8008d9c <HAL_TIM_PeriodElapsedCallback+0x2ac>
 8008be2:	ee67 7a87 	vmul.f32	s15, s15, s14
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8008be6:	4b6a      	ldr	r3, [pc, #424]	@ (8008d90 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8008be8:	edc3 7a07 	vstr	s15, [r3, #28]
//		prismatic_axis.kalman_velocity = FIR_process(&prismatic_lp, prismatic_encoder.radps) * Disturbance_Constant.prismatic_pulley_radius * 1000.0f;

		if (isnan(prismatic_axis.kalman_velocity)) {
 8008bec:	4b68      	ldr	r3, [pc, #416]	@ (8008d90 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8008bee:	edd3 7a07 	vldr	s15, [r3, #28]
 8008bf2:	eef4 7a67 	vcmp.f32	s15, s15
 8008bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bfa:	d703      	bvc.n	8008c04 <HAL_TIM_PeriodElapsedCallback+0x114>
			prismatic_axis.kalman_velocity = 0.0f;
 8008bfc:	4b64      	ldr	r3, [pc, #400]	@ (8008d90 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8008bfe:	f04f 0200 	mov.w	r2, #0
 8008c02:	61da      	str	r2, [r3, #28]
		}

		// Position control update - Allow during HOMING_REV_TO_ZERO_DEG
		if (++position_control_tick >= POSITION_CONTROL_DIVIDER) {
 8008c04:	4b66      	ldr	r3, [pc, #408]	@ (8008da0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	4a65      	ldr	r2, [pc, #404]	@ (8008da0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8008c0c:	6013      	str	r3, [r2, #0]
 8008c0e:	2b09      	cmp	r3, #9
 8008c10:	d922      	bls.n	8008c58 <HAL_TIM_PeriodElapsedCallback+0x168>
			position_control_tick = 0;
 8008c12:	4b63      	ldr	r3, [pc, #396]	@ (8008da0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	601a      	str	r2, [r3, #0]

			if ((!homing_active || homing_state == HOMING_REV_TO_ZERO_DEG) // ← FIXED
 8008c18:	4b62      	ldr	r3, [pc, #392]	@ (8008da4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	f083 0301 	eor.w	r3, r3, #1
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d103      	bne.n	8008c2e <HAL_TIM_PeriodElapsedCallback+0x13e>
 8008c26:	4b60      	ldr	r3, [pc, #384]	@ (8008da8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	2b07      	cmp	r3, #7
 8008c2c:	d114      	bne.n	8008c58 <HAL_TIM_PeriodElapsedCallback+0x168>
			&& (!joy_mode_active || joy_mode_state == JOY_MODE_PLAYBACK)
 8008c2e:	4b5f      	ldr	r3, [pc, #380]	@ (8008dac <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	f083 0301 	eor.w	r3, r3, #1
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d103      	bne.n	8008c44 <HAL_TIM_PeriodElapsedCallback+0x154>
 8008c3c:	4b5c      	ldr	r3, [pc, #368]	@ (8008db0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	2b04      	cmp	r3, #4
 8008c42:	d109      	bne.n	8008c58 <HAL_TIM_PeriodElapsedCallback+0x168>
					&& (!is_emergency_active())) {
 8008c44:	f7fe ff1e 	bl	8007a84 <is_emergency_active>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	f083 0301 	eor.w	r3, r3, #1
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d001      	beq.n	8008c58 <HAL_TIM_PeriodElapsedCallback+0x168>
				update_position_control();
 8008c54:	f7fd fec4 	bl	80069e0 <update_position_control>
			}
		}

		// Velocity control update - Allow during HOMING_REV_TO_ZERO_DEG
		if ((!homing_active || homing_state == HOMING_REV_TO_ZERO_DEG) // ← FIXED
 8008c58:	4b52      	ldr	r3, [pc, #328]	@ (8008da4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	f083 0301 	eor.w	r3, r3, #1
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d103      	bne.n	8008c6e <HAL_TIM_PeriodElapsedCallback+0x17e>
 8008c66:	4b50      	ldr	r3, [pc, #320]	@ (8008da8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	2b07      	cmp	r3, #7
 8008c6c:	d114      	bne.n	8008c98 <HAL_TIM_PeriodElapsedCallback+0x1a8>
		&& (!joy_mode_active || joy_mode_state == JOY_MODE_PLAYBACK)
 8008c6e:	4b4f      	ldr	r3, [pc, #316]	@ (8008dac <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	f083 0301 	eor.w	r3, r3, #1
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d103      	bne.n	8008c84 <HAL_TIM_PeriodElapsedCallback+0x194>
 8008c7c:	4b4c      	ldr	r3, [pc, #304]	@ (8008db0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	2b04      	cmp	r3, #4
 8008c82:	d109      	bne.n	8008c98 <HAL_TIM_PeriodElapsedCallback+0x1a8>
				&& (!is_emergency_active())) {
 8008c84:	f7fe fefe 	bl	8007a84 <is_emergency_active>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	f083 0301 	eor.w	r3, r3, #1
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d001      	beq.n	8008c98 <HAL_TIM_PeriodElapsedCallback+0x1a8>
			update_velocity_control();
 8008c94:	f7fd ff64 	bl	8006b60 <update_velocity_control>
		}

		update_safety_system();
 8008c98:	f7fe fe72 	bl	8007980 <update_safety_system>

		if (!is_emergency_active()) {
 8008c9c:	f7fe fef2 	bl	8007a84 <is_emergency_active>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	f083 0301 	eor.w	r3, r3, #1
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <HAL_TIM_PeriodElapsedCallback+0x1c0>
			check_safety_conditions();
 8008cac:	f7fe fcf2 	bl	8007694 <check_safety_conditions>
		}

		// Control loops - joy mode handles its own control
		if (!joy_mode_active || joy_mode_state == JOY_MODE_PLAYBACK) {
 8008cb0:	4b3e      	ldr	r3, [pc, #248]	@ (8008dac <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	f083 0301 	eor.w	r3, r3, #1
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d103      	bne.n	8008cc6 <HAL_TIM_PeriodElapsedCallback+0x1d6>
 8008cbe:	4b3c      	ldr	r3, [pc, #240]	@ (8008db0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	2b04      	cmp	r3, #4
 8008cc4:	d102      	bne.n	8008ccc <HAL_TIM_PeriodElapsedCallback+0x1dc>
			update_control_loops();
 8008cc6:	f7fe f961 	bl	8006f8c <update_control_loops>
 8008cca:	e001      	b.n	8008cd0 <HAL_TIM_PeriodElapsedCallback+0x1e0>
		} else {
			update_joy_mode();
 8008ccc:	f7ff fca6 	bl	800861c <update_joy_mode>
		}

		if (joy_mode_active && joy_mode_state == JOY_MODE_PLAYBACK) {
 8008cd0:	4b36      	ldr	r3, [pc, #216]	@ (8008dac <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d005      	beq.n	8008ce4 <HAL_TIM_PeriodElapsedCallback+0x1f4>
 8008cd8:	4b35      	ldr	r3, [pc, #212]	@ (8008db0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	2b04      	cmp	r3, #4
 8008cde:	d101      	bne.n	8008ce4 <HAL_TIM_PeriodElapsedCallback+0x1f4>
			update_joy_mode();
 8008ce0:	f7ff fc9c 	bl	800861c <update_joy_mode>
		}
		// ALWAYS update display values
		if (!joy_mode_active) {
 8008ce4:	4b31      	ldr	r3, [pc, #196]	@ (8008dac <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	f083 0301 	eor.w	r3, r3, #1
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d01e      	beq.n	8008d30 <HAL_TIM_PeriodElapsedCallback+0x240>
			// Update display values for normal operation
			normalized_position = normalize_angle(revolute_encoder.rads);
 8008cf2:	4b22      	ldr	r3, [pc, #136]	@ (8008d7c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008cf4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8008cf8:	eeb0 0a67 	vmov.f32	s0, s15
 8008cfc:	f7fd fa5e 	bl	80061bc <normalize_angle>
 8008d00:	eef0 7a40 	vmov.f32	s15, s0
 8008d04:	4b2b      	ldr	r3, [pc, #172]	@ (8008db4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8008d06:	edc3 7a00 	vstr	s15, [r3]
			prismatic_axis.mm = prismatic_encoder.mm;
 8008d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8008d78 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8008d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d0e:	4a20      	ldr	r2, [pc, #128]	@ (8008d90 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8008d10:	6393      	str	r3, [r2, #56]	@ 0x38
			revolute_axis.deg = UnitConverter_angle(&converter_system,
 8008d12:	4b28      	ldr	r3, [pc, #160]	@ (8008db4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8008d14:	edd3 7a00 	vldr	s15, [r3]
 8008d18:	220e      	movs	r2, #14
 8008d1a:	210f      	movs	r1, #15
 8008d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8008d20:	4825      	ldr	r0, [pc, #148]	@ (8008db8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8008d22:	f7fb ff51 	bl	8004bc8 <UnitConverter_angle>
 8008d26:	eef0 7a40 	vmov.f32	s15, s0
 8008d2a:	4b15      	ldr	r3, [pc, #84]	@ (8008d80 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8008d2c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
					normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		}
		// Note: joy mode updates its own display values in update_joy_mode()

		prismatic_axis.accel_show = FIR_process(&prismatic_lp_accel,
 8008d30:	4b11      	ldr	r3, [pc, #68]	@ (8008d78 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8008d32:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8008d36:	eeb0 0a67 	vmov.f32	s0, s15
 8008d3a:	4820      	ldr	r0, [pc, #128]	@ (8008dbc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8008d3c:	f7f9 f818 	bl	8001d70 <FIR_process>
 8008d40:	eef0 7a40 	vmov.f32	s15, s0
 8008d44:	4b12      	ldr	r3, [pc, #72]	@ (8008d90 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8008d46:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				prismatic_encoder.mmpss);
		revolute_axis.accel_show = FIR_process(&revolute_lp_accel,
 8008d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8008d7c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008d4c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8008d50:	eeb0 0a67 	vmov.f32	s0, s15
 8008d54:	481a      	ldr	r0, [pc, #104]	@ (8008dc0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8008d56:	f7f9 f80b 	bl	8001d70 <FIR_process>
 8008d5a:	eef0 7a40 	vmov.f32	s15, s0
 8008d5e:	4b08      	ldr	r3, [pc, #32]	@ (8008d80 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8008d60:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				revolute_encoder.radpss);

		update_character_drawing();
 8008d64:	f000 f9ae 	bl	80090c4 <update_character_drawing>
		draw_word_FIBO_G01();
 8008d68:	f000 fa7e 	bl	8009268 <draw_word_FIBO_G01>
	}
}
 8008d6c:	bf00      	nop
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	20001f6c 	.word	0x20001f6c
 8008d78:	20000994 	.word	0x20000994
 8008d7c:	200009f0 	.word	0x200009f0
 8008d80:	2000074c 	.word	0x2000074c
 8008d84:	477fff00 	.word	0x477fff00
 8008d88:	c77fff00 	.word	0xc77fff00
 8008d8c:	20001aac 	.word	0x20001aac
 8008d90:	20000708 	.word	0x20000708
 8008d94:	20001740 	.word	0x20001740
 8008d98:	20000100 	.word	0x20000100
 8008d9c:	447a0000 	.word	0x447a0000
 8008da0:	200007fc 	.word	0x200007fc
 8008da4:	200007ef 	.word	0x200007ef
 8008da8:	200007ee 	.word	0x200007ee
 8008dac:	20000809 	.word	0x20000809
 8008db0:	20000808 	.word	0x20000808
 8008db4:	20000800 	.word	0x20000800
 8008db8:	20000d88 	.word	0x20000d88
 8008dbc:	20000fe0 	.word	0x20000fe0
 8008dc0:	20000fec 	.word	0x20000fec

08008dc4 <modbus_working>:

//modbus
void modbus_working(void) {
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b086      	sub	sp, #24
 8008dc8:	af00      	add	r7, sp, #0

	uint16_t limit_switch_status = 0;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	82fb      	strh	r3, [r7, #22]
//heartbeat
	registerFrame[Heartbeat_Protocol].U16 = 22881;
 8008dce:	4b74      	ldr	r3, [pc, #464]	@ (8008fa0 <modbus_working+0x1dc>)
 8008dd0:	f645 1261 	movw	r2, #22881	@ 0x5961
 8008dd4:	801a      	strh	r2, [r3, #0]
//servo write
	if (registerFrame[Servo_UP].U16 == 1) {
 8008dd6:	4b72      	ldr	r3, [pc, #456]	@ (8008fa0 <modbus_working+0x1dc>)
 8008dd8:	891b      	ldrh	r3, [r3, #8]
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d102      	bne.n	8008de4 <modbus_working+0x20>
		plotter_pen_up();
 8008dde:	f000 ffbd 	bl	8009d5c <plotter_pen_up>
 8008de2:	e005      	b.n	8008df0 <modbus_working+0x2c>
	} else if (registerFrame[Servo_Down].U16 == 1) {
 8008de4:	4b6e      	ldr	r3, [pc, #440]	@ (8008fa0 <modbus_working+0x1dc>)
 8008de6:	895b      	ldrh	r3, [r3, #10]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d101      	bne.n	8008df0 <modbus_working+0x2c>
		plotter_pen_down();
 8008dec:	f000 ffc6 	bl	8009d7c <plotter_pen_down>
	}

//limitSW
	if (up_lim == 1) {
 8008df0:	4b6c      	ldr	r3, [pc, #432]	@ (8008fa4 <modbus_working+0x1e0>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d103      	bne.n	8008e00 <modbus_working+0x3c>
		limit_switch_status |= 0x02;  // Bit 1 = Limit UP
 8008df8:	8afb      	ldrh	r3, [r7, #22]
 8008dfa:	f043 0302 	orr.w	r3, r3, #2
 8008dfe:	82fb      	strh	r3, [r7, #22]
	}
	if (low_lim == 1) {
 8008e00:	4b69      	ldr	r3, [pc, #420]	@ (8008fa8 <modbus_working+0x1e4>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d103      	bne.n	8008e10 <modbus_working+0x4c>
		limit_switch_status |= 0x01;  // Bit 0 = Limit DOWN
 8008e08:	8afb      	ldrh	r3, [r7, #22]
 8008e0a:	f043 0301 	orr.w	r3, r3, #1
 8008e0e:	82fb      	strh	r3, [r7, #22]
	}
	registerFrame[LimitSwitch_Status].U16 = limit_switch_status;
 8008e10:	4a63      	ldr	r2, [pc, #396]	@ (8008fa0 <modbus_working+0x1dc>)
 8008e12:	8afb      	ldrh	r3, [r7, #22]
 8008e14:	80d3      	strh	r3, [r2, #6]

	if (registerFrame[BaseSystem_Status].U16 == 1) {
 8008e16:	4b62      	ldr	r3, [pc, #392]	@ (8008fa0 <modbus_working+0x1dc>)
 8008e18:	885b      	ldrh	r3, [r3, #2]
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d10b      	bne.n	8008e36 <modbus_working+0x72>
		exit_joy_mode();
 8008e1e:	f7fe fea1 	bl	8007b64 <exit_joy_mode>

		registerFrame[R_Theta_Status].U16 = 1;
 8008e22:	4b5f      	ldr	r3, [pc, #380]	@ (8008fa0 <modbus_working+0x1dc>)
 8008e24:	2201      	movs	r2, #1
 8008e26:	841a      	strh	r2, [r3, #32]
		start_combined_trajectory(0.0, 0.0);
 8008e28:	eddf 0a60 	vldr	s1, [pc, #384]	@ 8008fac <modbus_working+0x1e8>
 8008e2c:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 8008fac <modbus_working+0x1e8>
 8008e30:	f7fd fb38 	bl	80064a4 <start_combined_trajectory>
 8008e34:	e03d      	b.n	8008eb2 <modbus_working+0xee>
//		PID_CONTROLLER_Reset(&prismatic_velocity_pid);
//		PID_CONTROLLER_Reset(&revolute_position_pid);
//		PID_CONTROLLER_Reset(&revolute_velocity_pid);
//		PID_CONTROLLER_Reset(&revolute_velocity_pid);

	} else if (registerFrame[BaseSystem_Status].U16 == 2) {
 8008e36:	4b5a      	ldr	r3, [pc, #360]	@ (8008fa0 <modbus_working+0x1dc>)
 8008e38:	885b      	ldrh	r3, [r3, #2]
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d107      	bne.n	8008e4e <modbus_working+0x8a>
		registerFrame[R_Theta_Status].U16 = 2;
 8008e3e:	4b58      	ldr	r3, [pc, #352]	@ (8008fa0 <modbus_working+0x1dc>)
 8008e40:	2202      	movs	r2, #2
 8008e42:	841a      	strh	r2, [r3, #32]
		plotter_pen_up();
 8008e44:	f000 ff8a 	bl	8009d5c <plotter_pen_up>
		enter_joy_mode();
 8008e48:	f7fe fe2c 	bl	8007aa4 <enter_joy_mode>
 8008e4c:	e031      	b.n	8008eb2 <modbus_working+0xee>
	} else if (registerFrame[BaseSystem_Status].U16 == 4) {
 8008e4e:	4b54      	ldr	r3, [pc, #336]	@ (8008fa0 <modbus_working+0x1dc>)
 8008e50:	885b      	ldrh	r3, [r3, #2]
 8008e52:	2b04      	cmp	r3, #4
 8008e54:	d102      	bne.n	8008e5c <modbus_working+0x98>
		exit_joy_mode();
 8008e56:	f7fe fe85 	bl	8007b64 <exit_joy_mode>
 8008e5a:	e02a      	b.n	8008eb2 <modbus_working+0xee>
	} else if (registerFrame[BaseSystem_Status].U16 == 8) {
 8008e5c:	4b50      	ldr	r3, [pc, #320]	@ (8008fa0 <modbus_working+0x1dc>)
 8008e5e:	885b      	ldrh	r3, [r3, #2]
 8008e60:	2b08      	cmp	r3, #8
 8008e62:	d126      	bne.n	8008eb2 <modbus_working+0xee>
		registerFrame[R_Theta_Status].U16 = 8;
 8008e64:	4b4e      	ldr	r3, [pc, #312]	@ (8008fa0 <modbus_working+0x1dc>)
 8008e66:	2208      	movs	r2, #8
 8008e68:	841a      	strh	r2, [r3, #32]
		exit_joy_mode();
 8008e6a:	f7fe fe7b 	bl	8007b64 <exit_joy_mode>
		float goal_r_mm = (float) (int16_t) registerFrame[Goal_R].U16 / 10.0;
 8008e6e:	4b4c      	ldr	r3, [pc, #304]	@ (8008fa0 <modbus_working+0x1dc>)
 8008e70:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8008e74:	b21b      	sxth	r3, r3
 8008e76:	ee07 3a90 	vmov	s15, r3
 8008e7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008e7e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8008e82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008e86:	edc7 7a04 	vstr	s15, [r7, #16]
		float goal_theta_deg = (float) (int16_t) registerFrame[Goal_Theta].U16
 8008e8a:	4b45      	ldr	r3, [pc, #276]	@ (8008fa0 <modbus_working+0x1dc>)
 8008e8c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8008e90:	b21b      	sxth	r3, r3
 8008e92:	ee07 3a90 	vmov	s15, r3
 8008e96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008e9a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8008e9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008ea2:	edc7 7a03 	vstr	s15, [r7, #12]
				/ 10.0;

		start_combined_trajectory(goal_r_mm, goal_theta_deg);
 8008ea6:	edd7 0a03 	vldr	s1, [r7, #12]
 8008eaa:	ed97 0a04 	vldr	s0, [r7, #16]
 8008eae:	f7fd faf9 	bl	80064a4 <start_combined_trajectory>
	}

	registerFrame[R_Axis_Actual_Position].U16 = prismatic_encoder.mm * 10.0f;
 8008eb2:	4b3f      	ldr	r3, [pc, #252]	@ (8008fb0 <modbus_working+0x1ec>)
 8008eb4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8008eb8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ec4:	ee17 3a90 	vmov	r3, s15
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	4b35      	ldr	r3, [pc, #212]	@ (8008fa0 <modbus_working+0x1dc>)
 8008ecc:	845a      	strh	r2, [r3, #34]	@ 0x22
	registerFrame[R_Axis_Actual_Speed].U16 = prismatic_axis.kalman_velocity
 8008ece:	4b39      	ldr	r3, [pc, #228]	@ (8008fb4 <modbus_working+0x1f0>)
 8008ed0:	edd3 7a07 	vldr	s15, [r3, #28]
			* 10.0f;
 8008ed4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008ed8:	ee67 7a87 	vmul.f32	s15, s15, s14
	registerFrame[R_Axis_Actual_Speed].U16 = prismatic_axis.kalman_velocity
 8008edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ee0:	ee17 3a90 	vmov	r3, s15
 8008ee4:	b29a      	uxth	r2, r3
 8008ee6:	4b2e      	ldr	r3, [pc, #184]	@ (8008fa0 <modbus_working+0x1dc>)
 8008ee8:	84da      	strh	r2, [r3, #38]	@ 0x26

	float pris_accel = FIR_process(&prismatic_lp_accel,
 8008eea:	4b31      	ldr	r3, [pc, #196]	@ (8008fb0 <modbus_working+0x1ec>)
 8008eec:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8008ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8008ef4:	4830      	ldr	r0, [pc, #192]	@ (8008fb8 <modbus_working+0x1f4>)
 8008ef6:	f7f8 ff3b 	bl	8001d70 <FIR_process>
 8008efa:	ed87 0a02 	vstr	s0, [r7, #8]
			prismatic_encoder.mmpss);
	registerFrame[R_Axis_Acceleration].U16 = pris_accel * 10.0f;
 8008efe:	edd7 7a02 	vldr	s15, [r7, #8]
 8008f02:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f0e:	ee17 3a90 	vmov	r3, s15
 8008f12:	b29a      	uxth	r2, r3
 8008f14:	4b22      	ldr	r3, [pc, #136]	@ (8008fa0 <modbus_working+0x1dc>)
 8008f16:	855a      	strh	r2, [r3, #42]	@ 0x2a

	registerFrame[Theta_Axis_Actual_Position].U16 = revolute_axis.deg * 10.0f;
 8008f18:	4b28      	ldr	r3, [pc, #160]	@ (8008fbc <modbus_working+0x1f8>)
 8008f1a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8008f1e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f2a:	ee17 3a90 	vmov	r3, s15
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	4b1b      	ldr	r3, [pc, #108]	@ (8008fa0 <modbus_working+0x1dc>)
 8008f32:	849a      	strh	r2, [r3, #36]	@ 0x24

	float rev_theta_vel = UnitConverter_angle(&converter_system,
 8008f34:	4b21      	ldr	r3, [pc, #132]	@ (8008fbc <modbus_working+0x1f8>)
 8008f36:	edd3 7a07 	vldr	s15, [r3, #28]
 8008f3a:	220e      	movs	r2, #14
 8008f3c:	210f      	movs	r1, #15
 8008f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8008f42:	481f      	ldr	r0, [pc, #124]	@ (8008fc0 <modbus_working+0x1fc>)
 8008f44:	f7fb fe40 	bl	8004bc8 <UnitConverter_angle>
 8008f48:	ed87 0a01 	vstr	s0, [r7, #4]
			revolute_axis.kalman_velocity, UNIT_RADIAN, UNIT_DEGREE);
	registerFrame[Theta_Axis_Actual_Speed].U16 = rev_theta_vel * 10.0f;
 8008f4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8008f50:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f5c:	ee17 3a90 	vmov	r3, s15
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	4b0f      	ldr	r3, [pc, #60]	@ (8008fa0 <modbus_working+0x1dc>)
 8008f64:	851a      	strh	r2, [r3, #40]	@ 0x28

	float rev_theta_accel = UnitConverter_angle(&converter_system,
 8008f66:	4b17      	ldr	r3, [pc, #92]	@ (8008fc4 <modbus_working+0x200>)
 8008f68:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8008f6c:	220e      	movs	r2, #14
 8008f6e:	210f      	movs	r1, #15
 8008f70:	eeb0 0a67 	vmov.f32	s0, s15
 8008f74:	4812      	ldr	r0, [pc, #72]	@ (8008fc0 <modbus_working+0x1fc>)
 8008f76:	f7fb fe27 	bl	8004bc8 <UnitConverter_angle>
 8008f7a:	ed87 0a00 	vstr	s0, [r7]
			revolute_encoder.radpss, UNIT_RADIAN, UNIT_DEGREE);
	registerFrame[Theta_Axis_Acceleration].U16 = rev_theta_accel * 10.0f;
 8008f7e:	edd7 7a00 	vldr	s15, [r7]
 8008f82:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008f86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f8e:	ee17 3a90 	vmov	r3, s15
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	4b02      	ldr	r3, [pc, #8]	@ (8008fa0 <modbus_working+0x1dc>)
 8008f96:	859a      	strh	r2, [r3, #44]	@ 0x2c

}
 8008f98:	bf00      	nop
 8008f9a:	3718      	adds	r7, #24
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	200015b0 	.word	0x200015b0
 8008fa4:	20001e84 	.word	0x20001e84
 8008fa8:	20001e88 	.word	0x20001e88
 8008fac:	00000000 	.word	0x00000000
 8008fb0:	20000994 	.word	0x20000994
 8008fb4:	20000708 	.word	0x20000708
 8008fb8:	20000fe0 	.word	0x20000fe0
 8008fbc:	2000074c 	.word	0x2000074c
 8008fc0:	20000d88 	.word	0x20000d88
 8008fc4:	200009f0 	.word	0x200009f0

08008fc8 <start_character_drawing>:

void start_character_drawing(DrawingPoint_t *points, uint8_t num_points,
		const char *character_name) {
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	607a      	str	r2, [r7, #4]
 8008fd4:	72fb      	strb	r3, [r7, #11]
	if (is_emergency_active() || homing_active || joy_mode_active) {
 8008fd6:	f7fe fd55 	bl	8007a84 <is_emergency_active>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d120      	bne.n	8009022 <start_character_drawing+0x5a>
 8008fe0:	4b12      	ldr	r3, [pc, #72]	@ (800902c <start_character_drawing+0x64>)
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d11c      	bne.n	8009022 <start_character_drawing+0x5a>
 8008fe8:	4b11      	ldr	r3, [pc, #68]	@ (8009030 <start_character_drawing+0x68>)
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d118      	bne.n	8009022 <start_character_drawing+0x5a>
		return;
	}

	// หยุดการวาดปัจจุบัน (ถ้ามี)
	current_drawing_sequence.sequence_active = false;
 8008ff0:	4b10      	ldr	r3, [pc, #64]	@ (8009034 <start_character_drawing+0x6c>)
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	719a      	strb	r2, [r3, #6]

	// ตั้งค่าลำดับการวาดใหม่
	current_drawing_sequence.points = points;
 8008ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8009034 <start_character_drawing+0x6c>)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6013      	str	r3, [r2, #0]
	current_drawing_sequence.num_points = num_points;
 8008ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8009034 <start_character_drawing+0x6c>)
 8008ffe:	7afb      	ldrb	r3, [r7, #11]
 8009000:	7113      	strb	r3, [r2, #4]
	current_drawing_sequence.current_point = 0;
 8009002:	4b0c      	ldr	r3, [pc, #48]	@ (8009034 <start_character_drawing+0x6c>)
 8009004:	2200      	movs	r2, #0
 8009006:	715a      	strb	r2, [r3, #5]
	current_drawing_sequence.sequence_active = true;
 8009008:	4b0a      	ldr	r3, [pc, #40]	@ (8009034 <start_character_drawing+0x6c>)
 800900a:	2201      	movs	r2, #1
 800900c:	719a      	strb	r2, [r3, #6]
	current_drawing_sequence.character_name = character_name;
 800900e:	4a09      	ldr	r2, [pc, #36]	@ (8009034 <start_character_drawing+0x6c>)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6093      	str	r3, [r2, #8]

	// รอให้ motion หยุดก่อนเริ่มใหม่
	if (motion_sequence_state == MOTION_IDLE) {
 8009014:	4b08      	ldr	r3, [pc, #32]	@ (8009038 <start_character_drawing+0x70>)
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d103      	bne.n	8009024 <start_character_drawing+0x5c>
		execute_next_drawing_point();
 800901c:	f000 f80e 	bl	800903c <execute_next_drawing_point>
 8009020:	e000      	b.n	8009024 <start_character_drawing+0x5c>
		return;
 8009022:	bf00      	nop
	}
}
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	200007ef 	.word	0x200007ef
 8009030:	20000809 	.word	0x20000809
 8009034:	200008b4 	.word	0x200008b4
 8009038:	20000790 	.word	0x20000790

0800903c <execute_next_drawing_point>:

void execute_next_drawing_point(void) {
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
	if (!current_drawing_sequence.sequence_active) {
 8009042:	4b1e      	ldr	r3, [pc, #120]	@ (80090bc <execute_next_drawing_point+0x80>)
 8009044:	799b      	ldrb	r3, [r3, #6]
 8009046:	f083 0301 	eor.w	r3, r3, #1
 800904a:	b2db      	uxtb	r3, r3
 800904c:	2b00      	cmp	r3, #0
 800904e:	d130      	bne.n	80090b2 <execute_next_drawing_point+0x76>
		return;
	}

	if (current_drawing_sequence.current_point
 8009050:	4b1a      	ldr	r3, [pc, #104]	@ (80090bc <execute_next_drawing_point+0x80>)
 8009052:	795a      	ldrb	r2, [r3, #5]
			< current_drawing_sequence.num_points) {
 8009054:	4b19      	ldr	r3, [pc, #100]	@ (80090bc <execute_next_drawing_point+0x80>)
 8009056:	791b      	ldrb	r3, [r3, #4]
	if (current_drawing_sequence.current_point
 8009058:	429a      	cmp	r2, r3
 800905a:	d221      	bcs.n	80090a0 <execute_next_drawing_point+0x64>
		DrawingPoint_t current_point =
				current_drawing_sequence.points[current_drawing_sequence.current_point];
 800905c:	4b17      	ldr	r3, [pc, #92]	@ (80090bc <execute_next_drawing_point+0x80>)
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	4b16      	ldr	r3, [pc, #88]	@ (80090bc <execute_next_drawing_point+0x80>)
 8009062:	795b      	ldrb	r3, [r3, #5]
 8009064:	4619      	mov	r1, r3
 8009066:	460b      	mov	r3, r1
 8009068:	005b      	lsls	r3, r3, #1
 800906a:	440b      	add	r3, r1
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	441a      	add	r2, r3
		DrawingPoint_t current_point =
 8009070:	1d3b      	adds	r3, r7, #4
 8009072:	ca07      	ldmia	r2, {r0, r1, r2}
 8009074:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		// ตั้งค่าปากกาก่อนเคลื่อนที่
		drawing_pen_state = current_point.pen_down;
 8009078:	7b3a      	ldrb	r2, [r7, #12]
 800907a:	4b11      	ldr	r3, [pc, #68]	@ (80090c0 <execute_next_drawing_point+0x84>)
 800907c:	701a      	strb	r2, [r3, #0]
		// เริ่มการเคลื่อนที่ไปจุดถัดไป
		start_combined_trajectory(current_point.r_mm, current_point.theta_deg);
 800907e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009082:	ed97 7a02 	vldr	s14, [r7, #8]
 8009086:	eef0 0a47 	vmov.f32	s1, s14
 800908a:	eeb0 0a67 	vmov.f32	s0, s15
 800908e:	f7fd fa09 	bl	80064a4 <start_combined_trajectory>
		current_drawing_sequence.current_point++;
 8009092:	4b0a      	ldr	r3, [pc, #40]	@ (80090bc <execute_next_drawing_point+0x80>)
 8009094:	795b      	ldrb	r3, [r3, #5]
 8009096:	3301      	adds	r3, #1
 8009098:	b2da      	uxtb	r2, r3
 800909a:	4b08      	ldr	r3, [pc, #32]	@ (80090bc <execute_next_drawing_point+0x80>)
 800909c:	715a      	strb	r2, [r3, #5]
 800909e:	e009      	b.n	80090b4 <execute_next_drawing_point+0x78>

	} else {
		// เสร็จสิ้นการวาดตัวอักษรนี้
		current_drawing_sequence.sequence_active = false;
 80090a0:	4b06      	ldr	r3, [pc, #24]	@ (80090bc <execute_next_drawing_point+0x80>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	719a      	strb	r2, [r3, #6]
		current_drawing_sequence.current_point = 0;
 80090a6:	4b05      	ldr	r3, [pc, #20]	@ (80090bc <execute_next_drawing_point+0x80>)
 80090a8:	2200      	movs	r2, #0
 80090aa:	715a      	strb	r2, [r3, #5]

		// ยกปากกาเมื่อเสร็จ
		plotter_pen_up();
 80090ac:	f000 fe56 	bl	8009d5c <plotter_pen_up>
 80090b0:	e000      	b.n	80090b4 <execute_next_drawing_point+0x78>
		return;
 80090b2:	bf00      	nop
	}
}
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	200008b4 	.word	0x200008b4
 80090c0:	200008c0 	.word	0x200008c0

080090c4 <update_character_drawing>:

void update_character_drawing(void) {
 80090c4:	b580      	push	{r7, lr}
 80090c6:	af00      	add	r7, sp, #0
	// ถ้ามีลำดับการวาดที่กำลังทำงานและ motion เสร็จแล้ว
	if (current_drawing_sequence.sequence_active
 80090c8:	4b05      	ldr	r3, [pc, #20]	@ (80090e0 <update_character_drawing+0x1c>)
 80090ca:	799b      	ldrb	r3, [r3, #6]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d005      	beq.n	80090dc <update_character_drawing+0x18>
			&& motion_sequence_state == MOTION_IDLE) {
 80090d0:	4b04      	ldr	r3, [pc, #16]	@ (80090e4 <update_character_drawing+0x20>)
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <update_character_drawing+0x18>
		execute_next_drawing_point();
 80090d8:	f7ff ffb0 	bl	800903c <execute_next_drawing_point>
	}
}
 80090dc:	bf00      	nop
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	200008b4 	.word	0x200008b4
 80090e4:	20000790 	.word	0x20000790

080090e8 <draw_letter_F>:

void draw_letter_F(void) {
 80090e8:	b580      	push	{r7, lr}
 80090ea:	af00      	add	r7, sp, #0
	start_character_drawing(letter_F, sizeof(letter_F) / sizeof(DrawingPoint_t),
 80090ec:	4a03      	ldr	r2, [pc, #12]	@ (80090fc <draw_letter_F+0x14>)
 80090ee:	2108      	movs	r1, #8
 80090f0:	4803      	ldr	r0, [pc, #12]	@ (8009100 <draw_letter_F+0x18>)
 80090f2:	f7ff ff69 	bl	8008fc8 <start_character_drawing>
			"F");
}
 80090f6:	bf00      	nop
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	08014f68 	.word	0x08014f68
 8009100:	20000338 	.word	0x20000338

08009104 <draw_letter_I>:

void draw_letter_I(void) {
 8009104:	b580      	push	{r7, lr}
 8009106:	af00      	add	r7, sp, #0
	start_character_drawing(letter_I, sizeof(letter_I) / sizeof(DrawingPoint_t),
 8009108:	4a03      	ldr	r2, [pc, #12]	@ (8009118 <draw_letter_I+0x14>)
 800910a:	2104      	movs	r1, #4
 800910c:	4803      	ldr	r0, [pc, #12]	@ (800911c <draw_letter_I+0x18>)
 800910e:	f7ff ff5b 	bl	8008fc8 <start_character_drawing>
			"I");
}
 8009112:	bf00      	nop
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	08014f6c 	.word	0x08014f6c
 800911c:	20000398 	.word	0x20000398

08009120 <draw_letter_B>:

void draw_letter_B(void) {
 8009120:	b580      	push	{r7, lr}
 8009122:	af00      	add	r7, sp, #0
	start_character_drawing(letter_B, sizeof(letter_B) / sizeof(DrawingPoint_t),
 8009124:	4a03      	ldr	r2, [pc, #12]	@ (8009134 <draw_letter_B+0x14>)
 8009126:	210a      	movs	r1, #10
 8009128:	4803      	ldr	r0, [pc, #12]	@ (8009138 <draw_letter_B+0x18>)
 800912a:	f7ff ff4d 	bl	8008fc8 <start_character_drawing>
			"B");
}
 800912e:	bf00      	nop
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	08014f70 	.word	0x08014f70
 8009138:	200003c8 	.word	0x200003c8

0800913c <draw_letter_O>:

void draw_letter_O(void) {
 800913c:	b580      	push	{r7, lr}
 800913e:	af00      	add	r7, sp, #0
	start_character_drawing(letter_O, sizeof(letter_O) / sizeof(DrawingPoint_t),
 8009140:	4a03      	ldr	r2, [pc, #12]	@ (8009150 <draw_letter_O+0x14>)
 8009142:	2107      	movs	r1, #7
 8009144:	4803      	ldr	r0, [pc, #12]	@ (8009154 <draw_letter_O+0x18>)
 8009146:	f7ff ff3f 	bl	8008fc8 <start_character_drawing>
			"O");
}
 800914a:	bf00      	nop
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	08014f74 	.word	0x08014f74
 8009154:	20000440 	.word	0x20000440

08009158 <draw_underscore>:

void draw_underscore(void) {
 8009158:	b580      	push	{r7, lr}
 800915a:	af00      	add	r7, sp, #0
	start_character_drawing(letter_underscore,
 800915c:	4a03      	ldr	r2, [pc, #12]	@ (800916c <draw_underscore+0x14>)
 800915e:	2104      	movs	r1, #4
 8009160:	4803      	ldr	r0, [pc, #12]	@ (8009170 <draw_underscore+0x18>)
 8009162:	f7ff ff31 	bl	8008fc8 <start_character_drawing>
			sizeof(letter_underscore) / sizeof(DrawingPoint_t), "_");
}
 8009166:	bf00      	nop
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	08014f78 	.word	0x08014f78
 8009170:	20000494 	.word	0x20000494

08009174 <draw_letter_G>:

void draw_letter_G(void) {
 8009174:	b580      	push	{r7, lr}
 8009176:	af00      	add	r7, sp, #0
	start_character_drawing(letter_G, sizeof(letter_G) / sizeof(DrawingPoint_t),
 8009178:	4a03      	ldr	r2, [pc, #12]	@ (8009188 <draw_letter_G+0x14>)
 800917a:	2108      	movs	r1, #8
 800917c:	4803      	ldr	r0, [pc, #12]	@ (800918c <draw_letter_G+0x18>)
 800917e:	f7ff ff23 	bl	8008fc8 <start_character_drawing>
			"G");
}
 8009182:	bf00      	nop
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	08014f7c 	.word	0x08014f7c
 800918c:	200004c4 	.word	0x200004c4

08009190 <draw_number_0>:

void draw_number_0(void) {
 8009190:	b580      	push	{r7, lr}
 8009192:	af00      	add	r7, sp, #0
	start_character_drawing(number_0, sizeof(number_0) / sizeof(DrawingPoint_t),
 8009194:	4a03      	ldr	r2, [pc, #12]	@ (80091a4 <draw_number_0+0x14>)
 8009196:	2107      	movs	r1, #7
 8009198:	4803      	ldr	r0, [pc, #12]	@ (80091a8 <draw_number_0+0x18>)
 800919a:	f7ff ff15 	bl	8008fc8 <start_character_drawing>
			"0");
}
 800919e:	bf00      	nop
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	08014f80 	.word	0x08014f80
 80091a8:	20000524 	.word	0x20000524

080091ac <draw_number_1>:

void draw_number_1(void) {
 80091ac:	b580      	push	{r7, lr}
 80091ae:	af00      	add	r7, sp, #0
	start_character_drawing(number_1, sizeof(number_1) / sizeof(DrawingPoint_t),
 80091b0:	4a03      	ldr	r2, [pc, #12]	@ (80091c0 <draw_number_1+0x14>)
 80091b2:	2105      	movs	r1, #5
 80091b4:	4803      	ldr	r0, [pc, #12]	@ (80091c4 <draw_number_1+0x18>)
 80091b6:	f7ff ff07 	bl	8008fc8 <start_character_drawing>
			"1");
}
 80091ba:	bf00      	nop
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	08014f84 	.word	0x08014f84
 80091c4:	20000578 	.word	0x20000578

080091c8 <stop_character_drawing>:

void stop_character_drawing(void) {
 80091c8:	b580      	push	{r7, lr}
 80091ca:	af00      	add	r7, sp, #0
	current_drawing_sequence.sequence_active = false;
 80091cc:	4b09      	ldr	r3, [pc, #36]	@ (80091f4 <stop_character_drawing+0x2c>)
 80091ce:	2200      	movs	r2, #0
 80091d0:	719a      	strb	r2, [r3, #6]
	current_drawing_sequence.current_point = 0;
 80091d2:	4b08      	ldr	r3, [pc, #32]	@ (80091f4 <stop_character_drawing+0x2c>)
 80091d4:	2200      	movs	r2, #0
 80091d6:	715a      	strb	r2, [r3, #5]
	word_drawing_active = false;
 80091d8:	4b07      	ldr	r3, [pc, #28]	@ (80091f8 <stop_character_drawing+0x30>)
 80091da:	2200      	movs	r2, #0
 80091dc:	701a      	strb	r2, [r3, #0]
	word_progress = 0;
 80091de:	4b07      	ldr	r3, [pc, #28]	@ (80091fc <stop_character_drawing+0x34>)
 80091e0:	2200      	movs	r2, #0
 80091e2:	701a      	strb	r2, [r3, #0]
	drawing_pen_state = false;
 80091e4:	4b06      	ldr	r3, [pc, #24]	@ (8009200 <stop_character_drawing+0x38>)
 80091e6:	2200      	movs	r2, #0
 80091e8:	701a      	strb	r2, [r3, #0]
	plotter_pen_up();
 80091ea:	f000 fdb7 	bl	8009d5c <plotter_pen_up>
}
 80091ee:	bf00      	nop
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	200008b4 	.word	0x200008b4
 80091f8:	200008c8 	.word	0x200008c8
 80091fc:	200008c1 	.word	0x200008c1
 8009200:	200008c0 	.word	0x200008c0

08009204 <is_drawing_active>:

bool is_drawing_active(void) {
 8009204:	b480      	push	{r7}
 8009206:	af00      	add	r7, sp, #0
	return current_drawing_sequence.sequence_active;
 8009208:	4b03      	ldr	r3, [pc, #12]	@ (8009218 <is_drawing_active+0x14>)
 800920a:	799b      	ldrb	r3, [r3, #6]
}
 800920c:	4618      	mov	r0, r3
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	200008b4 	.word	0x200008b4

0800921c <start_word_FIBO_G01>:

void start_word_FIBO_G01(void) {
 800921c:	b580      	push	{r7, lr}
 800921e:	af00      	add	r7, sp, #0
	if (is_emergency_active() || homing_active || joy_mode_active) {
 8009220:	f7fe fc30 	bl	8007a84 <is_emergency_active>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d111      	bne.n	800924e <start_word_FIBO_G01+0x32>
 800922a:	4b0a      	ldr	r3, [pc, #40]	@ (8009254 <start_word_FIBO_G01+0x38>)
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d10d      	bne.n	800924e <start_word_FIBO_G01+0x32>
 8009232:	4b09      	ldr	r3, [pc, #36]	@ (8009258 <start_word_FIBO_G01+0x3c>)
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d109      	bne.n	800924e <start_word_FIBO_G01+0x32>
		return;
	}

//	stop_character_drawing();
//
	word_drawing_active = true;
 800923a:	4b08      	ldr	r3, [pc, #32]	@ (800925c <start_word_FIBO_G01+0x40>)
 800923c:	2201      	movs	r2, #1
 800923e:	701a      	strb	r2, [r3, #0]
	word_progress = 0;
 8009240:	4b07      	ldr	r3, [pc, #28]	@ (8009260 <start_word_FIBO_G01+0x44>)
 8009242:	2200      	movs	r2, #0
 8009244:	701a      	strb	r2, [r3, #0]
	word_delay_timer = 0;
 8009246:	4b07      	ldr	r3, [pc, #28]	@ (8009264 <start_word_FIBO_G01+0x48>)
 8009248:	2200      	movs	r2, #0
 800924a:	601a      	str	r2, [r3, #0]
 800924c:	e000      	b.n	8009250 <start_word_FIBO_G01+0x34>
		return;
 800924e:	bf00      	nop

}
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	200007ef 	.word	0x200007ef
 8009258:	20000809 	.word	0x20000809
 800925c:	200008c8 	.word	0x200008c8
 8009260:	200008c1 	.word	0x200008c1
 8009264:	200008c4 	.word	0x200008c4

08009268 <draw_word_FIBO_G01>:

void draw_word_FIBO_G01(void) {
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
	const uint32_t LETTER_DELAY = 1; // หน่วงเวลา 3 วินาทีระหว่างตัวอักษร
 800926e:	2301      	movs	r3, #1
 8009270:	607b      	str	r3, [r7, #4]

	if (!word_drawing_active) {
 8009272:	4b45      	ldr	r3, [pc, #276]	@ (8009388 <draw_word_FIBO_G01+0x120>)
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	f083 0301 	eor.w	r3, r3, #1
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b00      	cmp	r3, #0
 800927e:	d17e      	bne.n	800937e <draw_word_FIBO_G01+0x116>
		return;
	}

	if (!is_drawing_active() && motion_sequence_state == MOTION_IDLE) {
 8009280:	f7ff ffc0 	bl	8009204 <is_drawing_active>
 8009284:	4603      	mov	r3, r0
 8009286:	f083 0301 	eor.w	r3, r3, #1
 800928a:	b2db      	uxtb	r3, r3
 800928c:	2b00      	cmp	r3, #0
 800928e:	d077      	beq.n	8009380 <draw_word_FIBO_G01+0x118>
 8009290:	4b3e      	ldr	r3, [pc, #248]	@ (800938c <draw_word_FIBO_G01+0x124>)
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d173      	bne.n	8009380 <draw_word_FIBO_G01+0x118>
		word_delay_timer++;
 8009298:	4b3d      	ldr	r3, [pc, #244]	@ (8009390 <draw_word_FIBO_G01+0x128>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	3301      	adds	r3, #1
 800929e:	4a3c      	ldr	r2, [pc, #240]	@ (8009390 <draw_word_FIBO_G01+0x128>)
 80092a0:	6013      	str	r3, [r2, #0]

		if (word_delay_timer >= LETTER_DELAY) {
 80092a2:	4b3b      	ldr	r3, [pc, #236]	@ (8009390 <draw_word_FIBO_G01+0x128>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d869      	bhi.n	8009380 <draw_word_FIBO_G01+0x118>
			word_delay_timer = 0;
 80092ac:	4b38      	ldr	r3, [pc, #224]	@ (8009390 <draw_word_FIBO_G01+0x128>)
 80092ae:	2200      	movs	r2, #0
 80092b0:	601a      	str	r2, [r3, #0]

			switch (word_progress) {
 80092b2:	4b38      	ldr	r3, [pc, #224]	@ (8009394 <draw_word_FIBO_G01+0x12c>)
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	2b07      	cmp	r3, #7
 80092b8:	d85a      	bhi.n	8009370 <draw_word_FIBO_G01+0x108>
 80092ba:	a201      	add	r2, pc, #4	@ (adr r2, 80092c0 <draw_word_FIBO_G01+0x58>)
 80092bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c0:	080092e1 	.word	0x080092e1
 80092c4:	080092f3 	.word	0x080092f3
 80092c8:	08009305 	.word	0x08009305
 80092cc:	08009317 	.word	0x08009317
 80092d0:	08009329 	.word	0x08009329
 80092d4:	0800933b 	.word	0x0800933b
 80092d8:	0800934d 	.word	0x0800934d
 80092dc:	0800935f 	.word	0x0800935f
			case 0:
				draw_letter_F();
 80092e0:	f7ff ff02 	bl	80090e8 <draw_letter_F>
				word_progress++;
 80092e4:	4b2b      	ldr	r3, [pc, #172]	@ (8009394 <draw_word_FIBO_G01+0x12c>)
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	3301      	adds	r3, #1
 80092ea:	b2da      	uxtb	r2, r3
 80092ec:	4b29      	ldr	r3, [pc, #164]	@ (8009394 <draw_word_FIBO_G01+0x12c>)
 80092ee:	701a      	strb	r2, [r3, #0]
				break;
 80092f0:	e046      	b.n	8009380 <draw_word_FIBO_G01+0x118>
			case 1:
				draw_letter_I();
 80092f2:	f7ff ff07 	bl	8009104 <draw_letter_I>
				word_progress++;
 80092f6:	4b27      	ldr	r3, [pc, #156]	@ (8009394 <draw_word_FIBO_G01+0x12c>)
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	3301      	adds	r3, #1
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	4b25      	ldr	r3, [pc, #148]	@ (8009394 <draw_word_FIBO_G01+0x12c>)
 8009300:	701a      	strb	r2, [r3, #0]
				break;
 8009302:	e03d      	b.n	8009380 <draw_word_FIBO_G01+0x118>
			case 2:
				draw_letter_B();
 8009304:	f7ff ff0c 	bl	8009120 <draw_letter_B>
				word_progress++;
 8009308:	4b22      	ldr	r3, [pc, #136]	@ (8009394 <draw_word_FIBO_G01+0x12c>)
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	3301      	adds	r3, #1
 800930e:	b2da      	uxtb	r2, r3
 8009310:	4b20      	ldr	r3, [pc, #128]	@ (8009394 <draw_word_FIBO_G01+0x12c>)
 8009312:	701a      	strb	r2, [r3, #0]
				break;
 8009314:	e034      	b.n	8009380 <draw_word_FIBO_G01+0x118>
			case 3:
				draw_letter_O();
 8009316:	f7ff ff11 	bl	800913c <draw_letter_O>
				word_progress++;
 800931a:	4b1e      	ldr	r3, [pc, #120]	@ (8009394 <draw_word_FIBO_G01+0x12c>)
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	3301      	adds	r3, #1
 8009320:	b2da      	uxtb	r2, r3
 8009322:	4b1c      	ldr	r3, [pc, #112]	@ (8009394 <draw_word_FIBO_G01+0x12c>)
 8009324:	701a      	strb	r2, [r3, #0]
				break;
 8009326:	e02b      	b.n	8009380 <draw_word_FIBO_G01+0x118>
			case 4:
				draw_underscore();
 8009328:	f7ff ff16 	bl	8009158 <draw_underscore>
				word_progress++;
 800932c:	4b19      	ldr	r3, [pc, #100]	@ (8009394 <draw_word_FIBO_G01+0x12c>)
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	3301      	adds	r3, #1
 8009332:	b2da      	uxtb	r2, r3
 8009334:	4b17      	ldr	r3, [pc, #92]	@ (8009394 <draw_word_FIBO_G01+0x12c>)
 8009336:	701a      	strb	r2, [r3, #0]
				break;
 8009338:	e022      	b.n	8009380 <draw_word_FIBO_G01+0x118>
			case 5:
				draw_letter_G();
 800933a:	f7ff ff1b 	bl	8009174 <draw_letter_G>
				word_progress++;
 800933e:	4b15      	ldr	r3, [pc, #84]	@ (8009394 <draw_word_FIBO_G01+0x12c>)
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	3301      	adds	r3, #1
 8009344:	b2da      	uxtb	r2, r3
 8009346:	4b13      	ldr	r3, [pc, #76]	@ (8009394 <draw_word_FIBO_G01+0x12c>)
 8009348:	701a      	strb	r2, [r3, #0]
				break;
 800934a:	e019      	b.n	8009380 <draw_word_FIBO_G01+0x118>
			case 6:
				draw_number_0();
 800934c:	f7ff ff20 	bl	8009190 <draw_number_0>
				word_progress++;
 8009350:	4b10      	ldr	r3, [pc, #64]	@ (8009394 <draw_word_FIBO_G01+0x12c>)
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	3301      	adds	r3, #1
 8009356:	b2da      	uxtb	r2, r3
 8009358:	4b0e      	ldr	r3, [pc, #56]	@ (8009394 <draw_word_FIBO_G01+0x12c>)
 800935a:	701a      	strb	r2, [r3, #0]
				break;
 800935c:	e010      	b.n	8009380 <draw_word_FIBO_G01+0x118>
			case 7:
				draw_number_1();
 800935e:	f7ff ff25 	bl	80091ac <draw_number_1>
				word_progress++;
 8009362:	4b0c      	ldr	r3, [pc, #48]	@ (8009394 <draw_word_FIBO_G01+0x12c>)
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	3301      	adds	r3, #1
 8009368:	b2da      	uxtb	r2, r3
 800936a:	4b0a      	ldr	r3, [pc, #40]	@ (8009394 <draw_word_FIBO_G01+0x12c>)
 800936c:	701a      	strb	r2, [r3, #0]
				break;
 800936e:	e007      	b.n	8009380 <draw_word_FIBO_G01+0x118>
			default:
				// เสร็จสิ้นการวาดคำทั้งหมด
				word_drawing_active = false;
 8009370:	4b05      	ldr	r3, [pc, #20]	@ (8009388 <draw_word_FIBO_G01+0x120>)
 8009372:	2200      	movs	r2, #0
 8009374:	701a      	strb	r2, [r3, #0]
				word_progress = 0;
 8009376:	4b07      	ldr	r3, [pc, #28]	@ (8009394 <draw_word_FIBO_G01+0x12c>)
 8009378:	2200      	movs	r2, #0
 800937a:	701a      	strb	r2, [r3, #0]
				break;
 800937c:	e000      	b.n	8009380 <draw_word_FIBO_G01+0x118>
		return;
 800937e:	bf00      	nop
			}
		}
	}
}
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	200008c8 	.word	0x200008c8
 800938c:	20000790 	.word	0x20000790
 8009390:	200008c4 	.word	0x200008c4
 8009394:	200008c1 	.word	0x200008c1

08009398 <ensure_motion_idle>:

void ensure_motion_idle(void) {
 8009398:	b480      	push	{r7}
 800939a:	af00      	add	r7, sp, #0
	// Force motion to idle state
	motion_sequence_state = MOTION_IDLE;
 800939c:	4b16      	ldr	r3, [pc, #88]	@ (80093f8 <ensure_motion_idle+0x60>)
 800939e:	2200      	movs	r2, #0
 80093a0:	701a      	strb	r2, [r3, #0]
	motion_delay_timer = 0;
 80093a2:	4b16      	ldr	r3, [pc, #88]	@ (80093fc <ensure_motion_idle+0x64>)
 80093a4:	2200      	movs	r2, #0
 80093a6:	601a      	str	r2, [r3, #0]

	// Stop all trajectories
	prismatic_axis.trajectory_active = false;
 80093a8:	4b15      	ldr	r3, [pc, #84]	@ (8009400 <ensure_motion_idle+0x68>)
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 80093b0:	4b14      	ldr	r3, [pc, #80]	@ (8009404 <ensure_motion_idle+0x6c>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	sync_motion_active = false;
 80093b8:	4b13      	ldr	r3, [pc, #76]	@ (8009408 <ensure_motion_idle+0x70>)
 80093ba:	2200      	movs	r2, #0
 80093bc:	701a      	strb	r2, [r3, #0]

	// Reset velocities
	prismatic_axis.velocity = 0.0f;
 80093be:	4b10      	ldr	r3, [pc, #64]	@ (8009400 <ensure_motion_idle+0x68>)
 80093c0:	f04f 0200 	mov.w	r2, #0
 80093c4:	605a      	str	r2, [r3, #4]
	revolute_axis.velocity = 0.0f;
 80093c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009404 <ensure_motion_idle+0x6c>)
 80093c8:	f04f 0200 	mov.w	r2, #0
 80093cc:	605a      	str	r2, [r3, #4]
	prismatic_axis.command_vel = 0.0f;
 80093ce:	4b0c      	ldr	r3, [pc, #48]	@ (8009400 <ensure_motion_idle+0x68>)
 80093d0:	f04f 0200 	mov.w	r2, #0
 80093d4:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 80093d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009404 <ensure_motion_idle+0x6c>)
 80093d8:	f04f 0200 	mov.w	r2, #0
 80093dc:	629a      	str	r2, [r3, #40]	@ 0x28

	// Hold current positions
	prismatic_axis.position = prismatic_encoder.mm;
 80093de:	4b0b      	ldr	r3, [pc, #44]	@ (800940c <ensure_motion_idle+0x74>)
 80093e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093e2:	4a07      	ldr	r2, [pc, #28]	@ (8009400 <ensure_motion_idle+0x68>)
 80093e4:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 80093e6:	4b0a      	ldr	r3, [pc, #40]	@ (8009410 <ensure_motion_idle+0x78>)
 80093e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ea:	4a06      	ldr	r2, [pc, #24]	@ (8009404 <ensure_motion_idle+0x6c>)
 80093ec:	6013      	str	r3, [r2, #0]
}
 80093ee:	bf00      	nop
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	20000790 	.word	0x20000790
 80093fc:	200007e4 	.word	0x200007e4
 8009400:	20000708 	.word	0x20000708
 8009404:	2000074c 	.word	0x2000074c
 8009408:	200008b0 	.word	0x200008b0
 800940c:	20000994 	.word	0x20000994
 8009410:	200009f0 	.word	0x200009f0

08009414 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8009414:	b480      	push	{r7}
 8009416:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009418:	b672      	cpsid	i
}
 800941a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800941c:	bf00      	nop
 800941e:	e7fd      	b.n	800941c <Error_Handler+0x8>

08009420 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 8009420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009424:	ed2d 8b02 	vpush	{d8}
 8009428:	b083      	sub	sp, #12
 800942a:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 800942c:	4bc4      	ldr	r3, [pc, #784]	@ (8009740 <plotter_begin+0x320>)
 800942e:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius * 1000;
 8009432:	4bc4      	ldr	r3, [pc, #784]	@ (8009744 <plotter_begin+0x324>)
 8009434:	691b      	ldr	r3, [r3, #16]
 8009436:	4618      	mov	r0, r3
 8009438:	f7f7 f852 	bl	80004e0 <__aeabi_f2d>
 800943c:	4602      	mov	r2, r0
 800943e:	460b      	mov	r3, r1
 8009440:	4620      	mov	r0, r4
 8009442:	4629      	mov	r1, r5
 8009444:	f7f7 f8a4 	bl	8000590 <__aeabi_dmul>
 8009448:	4602      	mov	r2, r0
 800944a:	460b      	mov	r3, r1
 800944c:	4610      	mov	r0, r2
 800944e:	4619      	mov	r1, r3
 8009450:	f04f 0200 	mov.w	r2, #0
 8009454:	4bbc      	ldr	r3, [pc, #752]	@ (8009748 <plotter_begin+0x328>)
 8009456:	f7f7 f89b 	bl	8000590 <__aeabi_dmul>
 800945a:	4602      	mov	r2, r0
 800945c:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 800945e:	49b8      	ldr	r1, [pc, #736]	@ (8009740 <plotter_begin+0x320>)
 8009460:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 2;
 8009464:	4bb6      	ldr	r3, [pc, #728]	@ (8009740 <plotter_begin+0x320>)
 8009466:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800946a:	4602      	mov	r2, r0
 800946c:	460b      	mov	r3, r1
 800946e:	f7f6 fed9 	bl	8000224 <__adddf3>
 8009472:	4602      	mov	r2, r0
 8009474:	460b      	mov	r3, r1
 8009476:	49b2      	ldr	r1, [pc, #712]	@ (8009740 <plotter_begin+0x320>)
 8009478:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_400RPM_Constant.traject_sd_max = 500.0;
 800947c:	49b0      	ldr	r1, [pc, #704]	@ (8009740 <plotter_begin+0x320>)
 800947e:	f04f 0200 	mov.w	r2, #0
 8009482:	4bb2      	ldr	r3, [pc, #712]	@ (800974c <plotter_begin+0x32c>)
 8009484:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	ZGX45RGG_400RPM_Constant.traject_sdd_max = 1000.0;
 8009488:	49ad      	ldr	r1, [pc, #692]	@ (8009740 <plotter_begin+0x320>)
 800948a:	f04f 0200 	mov.w	r2, #0
 800948e:	4bae      	ldr	r3, [pc, #696]	@ (8009748 <plotter_begin+0x328>)
 8009490:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8009494:	4bae      	ldr	r3, [pc, #696]	@ (8009750 <plotter_begin+0x330>)
 8009496:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* (24.0 / 36.0);
 800949a:	a3a7      	add	r3, pc, #668	@ (adr r3, 8009738 <plotter_begin+0x318>)
 800949c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a0:	f7f7 f876 	bl	8000590 <__aeabi_dmul>
 80094a4:	4602      	mov	r2, r0
 80094a6:	460b      	mov	r3, r1
	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 80094a8:	49a9      	ldr	r1, [pc, #676]	@ (8009750 <plotter_begin+0x330>)
 80094aa:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	ZGX45RGG_150RPM_Constant.traject_qd_max = 4.0;
 80094ae:	49a8      	ldr	r1, [pc, #672]	@ (8009750 <plotter_begin+0x330>)
 80094b0:	f04f 0200 	mov.w	r2, #0
 80094b4:	4ba7      	ldr	r3, [pc, #668]	@ (8009754 <plotter_begin+0x334>)
 80094b6:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	ZGX45RGG_150RPM_Constant.traject_qdd_max = 2.5;
 80094ba:	49a5      	ldr	r1, [pc, #660]	@ (8009750 <plotter_begin+0x330>)
 80094bc:	f04f 0200 	mov.w	r2, #0
 80094c0:	4ba5      	ldr	r3, [pc, #660]	@ (8009758 <plotter_begin+0x338>)
 80094c2:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 80094c6:	2100      	movs	r1, #0
 80094c8:	48a4      	ldr	r0, [pc, #656]	@ (800975c <plotter_begin+0x33c>)
 80094ca:	f000 fc67 	bl	8009d9c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 80094ce:	eddf 2aa4 	vldr	s5, [pc, #656]	@ 8009760 <plotter_begin+0x340>
 80094d2:	ed9f 2aa4 	vldr	s4, [pc, #656]	@ 8009764 <plotter_begin+0x344>
 80094d6:	eddf 1ab1 	vldr	s3, [pc, #708]	@ 800979c <plotter_begin+0x37c>
 80094da:	ed9f 1ab0 	vldr	s2, [pc, #704]	@ 800979c <plotter_begin+0x37c>
 80094de:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 8009768 <plotter_begin+0x348>
 80094e2:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 8009760 <plotter_begin+0x340>
 80094e6:	489d      	ldr	r0, [pc, #628]	@ (800975c <plotter_begin+0x33c>)
 80094e8:	f000 fcb6 	bl	8009e58 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 80094ec:	2102      	movs	r1, #2
 80094ee:	489f      	ldr	r0, [pc, #636]	@ (800976c <plotter_begin+0x34c>)
 80094f0:	f000 fc54 	bl	8009d9c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 80094f4:	ed9f 3a9a 	vldr	s6, [pc, #616]	@ 8009760 <plotter_begin+0x340>
 80094f8:	eddf 2a9a 	vldr	s5, [pc, #616]	@ 8009764 <plotter_begin+0x344>
 80094fc:	ed9f 2aa7 	vldr	s4, [pc, #668]	@ 800979c <plotter_begin+0x37c>
 8009500:	eddf 1aa6 	vldr	s3, [pc, #664]	@ 800979c <plotter_begin+0x37c>
 8009504:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8009508:	eddf 0a97 	vldr	s1, [pc, #604]	@ 8009768 <plotter_begin+0x348>
 800950c:	ed9f 0a94 	vldr	s0, [pc, #592]	@ 8009760 <plotter_begin+0x340>
 8009510:	4896      	ldr	r0, [pc, #600]	@ (800976c <plotter_begin+0x34c>)
 8009512:	f000 fccc 	bl	8009eae <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8009516:	2100      	movs	r1, #0
 8009518:	4895      	ldr	r0, [pc, #596]	@ (8009770 <plotter_begin+0x350>)
 800951a:	f000 fc3f 	bl	8009d9c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 800951e:	eddf 2a95 	vldr	s5, [pc, #596]	@ 8009774 <plotter_begin+0x354>
 8009522:	ed9f 2a95 	vldr	s4, [pc, #596]	@ 8009778 <plotter_begin+0x358>
 8009526:	eddf 1a9d 	vldr	s3, [pc, #628]	@ 800979c <plotter_begin+0x37c>
 800952a:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 800979c <plotter_begin+0x37c>
 800952e:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 8009768 <plotter_begin+0x348>
 8009532:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 8009774 <plotter_begin+0x354>
 8009536:	488e      	ldr	r0, [pc, #568]	@ (8009770 <plotter_begin+0x350>)
 8009538:	f000 fc8e 	bl	8009e58 <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 800953c:	2102      	movs	r1, #2
 800953e:	488f      	ldr	r0, [pc, #572]	@ (800977c <plotter_begin+0x35c>)
 8009540:	f000 fc2c 	bl	8009d9c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 8009544:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 8009548:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 800954c:	ed9f 2a93 	vldr	s4, [pc, #588]	@ 800979c <plotter_begin+0x37c>
 8009550:	eddf 1a92 	vldr	s3, [pc, #584]	@ 800979c <plotter_begin+0x37c>
 8009554:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8009558:	eddf 0a83 	vldr	s1, [pc, #524]	@ 8009768 <plotter_begin+0x348>
 800955c:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8009560:	4886      	ldr	r0, [pc, #536]	@ (800977c <plotter_begin+0x35c>)
 8009562:	f000 fca4 	bl	8009eae <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 8009566:	2100      	movs	r1, #0
 8009568:	4885      	ldr	r0, [pc, #532]	@ (8009780 <plotter_begin+0x360>)
 800956a:	f000 fc17 	bl	8009d9c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800956e:	4b74      	ldr	r3, [pc, #464]	@ (8009740 <plotter_begin+0x320>)
 8009570:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8009574:	4610      	mov	r0, r2
 8009576:	4619      	mov	r1, r3
 8009578:	f7f7 faec 	bl	8000b54 <__aeabi_d2f>
 800957c:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 800957e:	4b70      	ldr	r3, [pc, #448]	@ (8009740 <plotter_begin+0x320>)
 8009580:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8009584:	4610      	mov	r0, r2
 8009586:	4619      	mov	r1, r3
 8009588:	f7f7 fae4 	bl	8000b54 <__aeabi_d2f>
 800958c:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800958e:	ee07 3a90 	vmov	s15, r3
 8009592:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 8009596:	4b6a      	ldr	r3, [pc, #424]	@ (8009740 <plotter_begin+0x320>)
 8009598:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800959c:	4610      	mov	r0, r2
 800959e:	4619      	mov	r1, r3
 80095a0:	f7f7 fad8 	bl	8000b54 <__aeabi_d2f>
 80095a4:	4603      	mov	r3, r0
 80095a6:	ee02 3a90 	vmov	s5, r3
 80095aa:	eeb0 2a48 	vmov.f32	s4, s16
 80095ae:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 800979c <plotter_begin+0x37c>
 80095b2:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 800979c <plotter_begin+0x37c>
 80095b6:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 8009768 <plotter_begin+0x348>
 80095ba:	ee00 4a10 	vmov	s0, r4
 80095be:	4870      	ldr	r0, [pc, #448]	@ (8009780 <plotter_begin+0x360>)
 80095c0:	f000 fc4a 	bl	8009e58 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 80095c4:	2102      	movs	r1, #2
 80095c6:	486f      	ldr	r0, [pc, #444]	@ (8009784 <plotter_begin+0x364>)
 80095c8:	f000 fbe8 	bl	8009d9c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80095cc:	4b5c      	ldr	r3, [pc, #368]	@ (8009740 <plotter_begin+0x320>)
 80095ce:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80095d2:	4610      	mov	r0, r2
 80095d4:	4619      	mov	r1, r3
 80095d6:	f7f7 fabd 	bl	8000b54 <__aeabi_d2f>
 80095da:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 80095dc:	4b58      	ldr	r3, [pc, #352]	@ (8009740 <plotter_begin+0x320>)
 80095de:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80095e2:	4610      	mov	r0, r2
 80095e4:	4619      	mov	r1, r3
 80095e6:	f7f7 fab5 	bl	8000b54 <__aeabi_d2f>
 80095ea:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80095ec:	ee07 3a90 	vmov	s15, r3
 80095f0:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 80095f4:	4b52      	ldr	r3, [pc, #328]	@ (8009740 <plotter_begin+0x320>)
 80095f6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80095fa:	4610      	mov	r0, r2
 80095fc:	4619      	mov	r1, r3
 80095fe:	f7f7 faa9 	bl	8000b54 <__aeabi_d2f>
 8009602:	4603      	mov	r3, r0
 8009604:	ee03 3a10 	vmov	s6, r3
 8009608:	eef0 2a48 	vmov.f32	s5, s16
 800960c:	ed9f 2a63 	vldr	s4, [pc, #396]	@ 800979c <plotter_begin+0x37c>
 8009610:	eddf 1a62 	vldr	s3, [pc, #392]	@ 800979c <plotter_begin+0x37c>
 8009614:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8009618:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8009768 <plotter_begin+0x348>
 800961c:	ee00 4a10 	vmov	s0, r4
 8009620:	4858      	ldr	r0, [pc, #352]	@ (8009784 <plotter_begin+0x364>)
 8009622:	f000 fc44 	bl	8009eae <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 8009626:	2100      	movs	r1, #0
 8009628:	4857      	ldr	r0, [pc, #348]	@ (8009788 <plotter_begin+0x368>)
 800962a:	f000 fbb7 	bl	8009d9c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800962e:	4b48      	ldr	r3, [pc, #288]	@ (8009750 <plotter_begin+0x330>)
 8009630:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8009634:	4610      	mov	r0, r2
 8009636:	4619      	mov	r1, r3
 8009638:	f7f7 fa8c 	bl	8000b54 <__aeabi_d2f>
 800963c:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 800963e:	4b44      	ldr	r3, [pc, #272]	@ (8009750 <plotter_begin+0x330>)
 8009640:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8009644:	4610      	mov	r0, r2
 8009646:	4619      	mov	r1, r3
 8009648:	f7f7 fa84 	bl	8000b54 <__aeabi_d2f>
 800964c:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800964e:	ee07 3a90 	vmov	s15, r3
 8009652:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 8009656:	4b3e      	ldr	r3, [pc, #248]	@ (8009750 <plotter_begin+0x330>)
 8009658:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800965c:	4610      	mov	r0, r2
 800965e:	4619      	mov	r1, r3
 8009660:	f7f7 fa78 	bl	8000b54 <__aeabi_d2f>
 8009664:	4603      	mov	r3, r0
 8009666:	ee02 3a90 	vmov	s5, r3
 800966a:	eeb0 2a48 	vmov.f32	s4, s16
 800966e:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 800979c <plotter_begin+0x37c>
 8009672:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 800979c <plotter_begin+0x37c>
 8009676:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8009768 <plotter_begin+0x348>
 800967a:	ee00 4a10 	vmov	s0, r4
 800967e:	4842      	ldr	r0, [pc, #264]	@ (8009788 <plotter_begin+0x368>)
 8009680:	f000 fbea 	bl	8009e58 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 8009684:	2102      	movs	r1, #2
 8009686:	4841      	ldr	r0, [pc, #260]	@ (800978c <plotter_begin+0x36c>)
 8009688:	f000 fb88 	bl	8009d9c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800968c:	4b30      	ldr	r3, [pc, #192]	@ (8009750 <plotter_begin+0x330>)
 800968e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8009692:	4610      	mov	r0, r2
 8009694:	4619      	mov	r1, r3
 8009696:	f7f7 fa5d 	bl	8000b54 <__aeabi_d2f>
 800969a:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 800969c:	4b2c      	ldr	r3, [pc, #176]	@ (8009750 <plotter_begin+0x330>)
 800969e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80096a2:	4610      	mov	r0, r2
 80096a4:	4619      	mov	r1, r3
 80096a6:	f7f7 fa55 	bl	8000b54 <__aeabi_d2f>
 80096aa:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80096ac:	ee07 3a90 	vmov	s15, r3
 80096b0:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 80096b4:	4b26      	ldr	r3, [pc, #152]	@ (8009750 <plotter_begin+0x330>)
 80096b6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80096ba:	4610      	mov	r0, r2
 80096bc:	4619      	mov	r1, r3
 80096be:	f7f7 fa49 	bl	8000b54 <__aeabi_d2f>
 80096c2:	4603      	mov	r3, r0
 80096c4:	ee03 3a10 	vmov	s6, r3
 80096c8:	eef0 2a48 	vmov.f32	s5, s16
 80096cc:	ed9f 2a33 	vldr	s4, [pc, #204]	@ 800979c <plotter_begin+0x37c>
 80096d0:	eddf 1a32 	vldr	s3, [pc, #200]	@ 800979c <plotter_begin+0x37c>
 80096d4:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80096d8:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8009768 <plotter_begin+0x348>
 80096dc:	ee00 4a10 	vmov	s0, r4
 80096e0:	482a      	ldr	r0, [pc, #168]	@ (800978c <plotter_begin+0x36c>)
 80096e2:	f000 fbe4 	bl	8009eae <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 80096e6:	482a      	ldr	r0, [pc, #168]	@ (8009790 <plotter_begin+0x370>)
 80096e8:	f7fb f9d8 	bl	8004a9c <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 80096ec:	4b15      	ldr	r3, [pc, #84]	@ (8009744 <plotter_begin+0x324>)
 80096ee:	691b      	ldr	r3, [r3, #16]
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7f6 fef5 	bl	80004e0 <__aeabi_f2d>
 80096f6:	4602      	mov	r2, r0
 80096f8:	460b      	mov	r3, r1
 80096fa:	f7f6 fd93 	bl	8000224 <__adddf3>
 80096fe:	4602      	mov	r2, r0
 8009700:	460b      	mov	r3, r1
 8009702:	4610      	mov	r0, r2
 8009704:	4619      	mov	r1, r3
 8009706:	f04f 0200 	mov.w	r2, #0
 800970a:	4b0f      	ldr	r3, [pc, #60]	@ (8009748 <plotter_begin+0x328>)
 800970c:	f7f6 ff40 	bl	8000590 <__aeabi_dmul>
 8009710:	4602      	mov	r2, r0
 8009712:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 8009714:	4610      	mov	r0, r2
 8009716:	4619      	mov	r1, r3
 8009718:	f7f7 fa1c 	bl	8000b54 <__aeabi_d2f>
 800971c:	4603      	mov	r3, r0
 800971e:	ee00 3a90 	vmov	s1, r3
 8009722:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009726:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800972a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800972e:	4919      	ldr	r1, [pc, #100]	@ (8009794 <plotter_begin+0x374>)
 8009730:	4819      	ldr	r0, [pc, #100]	@ (8009798 <plotter_begin+0x378>)
 8009732:	f7fa fb37 	bl	8003da4 <QEI_init>
 8009736:	e033      	b.n	80097a0 <plotter_begin+0x380>
 8009738:	55555555 	.word	0x55555555
 800973c:	3fe55555 	.word	0x3fe55555
 8009740:	20000080 	.word	0x20000080
 8009744:	20000100 	.word	0x20000100
 8009748:	408f4000 	.word	0x408f4000
 800974c:	407f4000 	.word	0x407f4000
 8009750:	20000000 	.word	0x20000000
 8009754:	40100000 	.word	0x40100000
 8009758:	40040000 	.word	0x40040000
 800975c:	20000b68 	.word	0x20000b68
 8009760:	477fff00 	.word	0x477fff00
 8009764:	c77fff00 	.word	0xc77fff00
 8009768:	3dcccccd 	.word	0x3dcccccd
 800976c:	20000bac 	.word	0x20000bac
 8009770:	20000bf0 	.word	0x20000bf0
 8009774:	43480000 	.word	0x43480000
 8009778:	c3480000 	.word	0xc3480000
 800977c:	20000c34 	.word	0x20000c34
 8009780:	20000c78 	.word	0x20000c78
 8009784:	20000cbc 	.word	0x20000cbc
 8009788:	20000d00 	.word	0x20000d00
 800978c:	20000d44 	.word	0x20000d44
 8009790:	20000d88 	.word	0x20000d88
 8009794:	20002038 	.word	0x20002038
 8009798:	20000994 	.word	0x20000994
 800979c:	00000000 	.word	0x00000000
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 80097a0:	ed5f 0a02 	vldr	s1, [pc, #-8]	@ 800979c <plotter_begin+0x37c>
 80097a4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80097a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80097ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80097b0:	49c1      	ldr	r1, [pc, #772]	@ (8009ab8 <plotter_begin+0x698>)
 80097b2:	48c2      	ldr	r0, [pc, #776]	@ (8009abc <plotter_begin+0x69c>)
 80097b4:	f7fa faf6 	bl	8003da4 <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 80097b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80097c2:	2204      	movs	r2, #4
 80097c4:	49be      	ldr	r1, [pc, #760]	@ (8009ac0 <plotter_begin+0x6a0>)
 80097c6:	48bf      	ldr	r0, [pc, #764]	@ (8009ac4 <plotter_begin+0x6a4>)
 80097c8:	f7f7 fdb8 	bl	800133c <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 80097cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80097d0:	9300      	str	r3, [sp, #0]
 80097d2:	4bbd      	ldr	r3, [pc, #756]	@ (8009ac8 <plotter_begin+0x6a8>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	49ba      	ldr	r1, [pc, #744]	@ (8009ac0 <plotter_begin+0x6a0>)
 80097d8:	48bc      	ldr	r0, [pc, #752]	@ (8009acc <plotter_begin+0x6ac>)
 80097da:	f7f7 fdaf 	bl	800133c <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 80097de:	220c      	movs	r2, #12
 80097e0:	49bb      	ldr	r1, [pc, #748]	@ (8009ad0 <plotter_begin+0x6b0>)
 80097e2:	48bc      	ldr	r0, [pc, #752]	@ (8009ad4 <plotter_begin+0x6b4>)
 80097e4:	f7fa f8b0 	bl	8003948 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 80097e8:	eddf 0abb 	vldr	s1, [pc, #748]	@ 8009ad8 <plotter_begin+0x6b8>
 80097ec:	ed9f 0abb 	vldr	s0, [pc, #748]	@ 8009adc <plotter_begin+0x6bc>
 80097f0:	48b4      	ldr	r0, [pc, #720]	@ (8009ac4 <plotter_begin+0x6a4>)
 80097f2:	f7f7 fdc7 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 80097f6:	eddf 0ab8 	vldr	s1, [pc, #736]	@ 8009ad8 <plotter_begin+0x6b8>
 80097fa:	ed9f 0ab8 	vldr	s0, [pc, #736]	@ 8009adc <plotter_begin+0x6bc>
 80097fe:	48b3      	ldr	r0, [pc, #716]	@ (8009acc <plotter_begin+0x6ac>)
 8009800:	f7f7 fdc0 	bl	8001384 <MDXX_set_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 103, //103 (D)
			ZGX45RGG_400RPM_Constant.sd_max);
 8009804:	4bb6      	ldr	r3, [pc, #728]	@ (8009ae0 <plotter_begin+0x6c0>)
 8009806:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 103, //103 (D)
 800980a:	4610      	mov	r0, r2
 800980c:	4619      	mov	r1, r3
 800980e:	f7f7 f9a1 	bl	8000b54 <__aeabi_d2f>
 8009812:	4603      	mov	r3, r0
 8009814:	ee01 3a90 	vmov	s3, r3
 8009818:	ed9f 1ab2 	vldr	s2, [pc, #712]	@ 8009ae4 <plotter_begin+0x6c4>
 800981c:	eddf 0ab2 	vldr	s1, [pc, #712]	@ 8009ae8 <plotter_begin+0x6c8>
 8009820:	ed9f 0ab2 	vldr	s0, [pc, #712]	@ 8009aec <plotter_begin+0x6cc>
 8009824:	48b2      	ldr	r0, [pc, #712]	@ (8009af0 <plotter_begin+0x6d0>)
 8009826:	f7f7 fcc4 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0, //150 (P)
			ZGX45RGG_400RPM_Constant.U_max);
 800982a:	4bad      	ldr	r3, [pc, #692]	@ (8009ae0 <plotter_begin+0x6c0>)
 800982c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0, //150 (P)
 8009830:	4610      	mov	r0, r2
 8009832:	4619      	mov	r1, r3
 8009834:	f7f7 f98e 	bl	8000b54 <__aeabi_d2f>
 8009838:	4603      	mov	r3, r0
 800983a:	ee01 3a90 	vmov	s3, r3
 800983e:	ed9f 1aa6 	vldr	s2, [pc, #664]	@ 8009ad8 <plotter_begin+0x6b8>
 8009842:	eddf 0aac 	vldr	s1, [pc, #688]	@ 8009af4 <plotter_begin+0x6d4>
 8009846:	ed9f 0aac 	vldr	s0, [pc, #688]	@ 8009af8 <plotter_begin+0x6d8>
 800984a:	48ac      	ldr	r0, [pc, #688]	@ (8009afc <plotter_begin+0x6dc>)
 800984c:	f7f7 fcb1 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 250, 0.001, 700,
			ZGX45RGG_150RPM_Constant.qd_max);
 8009850:	4bab      	ldr	r3, [pc, #684]	@ (8009b00 <plotter_begin+0x6e0>)
 8009852:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 250, 0.001, 700,
 8009856:	4610      	mov	r0, r2
 8009858:	4619      	mov	r1, r3
 800985a:	f7f7 f97b 	bl	8000b54 <__aeabi_d2f>
 800985e:	4603      	mov	r3, r0
 8009860:	ee01 3a90 	vmov	s3, r3
 8009864:	ed9f 1aa7 	vldr	s2, [pc, #668]	@ 8009b04 <plotter_begin+0x6e4>
 8009868:	eddf 0aa7 	vldr	s1, [pc, #668]	@ 8009b08 <plotter_begin+0x6e8>
 800986c:	ed9f 0aa7 	vldr	s0, [pc, #668]	@ 8009b0c <plotter_begin+0x6ec>
 8009870:	48a7      	ldr	r0, [pc, #668]	@ (8009b10 <plotter_begin+0x6f0>)
 8009872:	f7f7 fc9e 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2275, 30.5, 2996, //2280->2275 (P), 25->30 (I), 3000 -> 2996 (D)
			ZGX45RGG_150RPM_Constant.U_max);
 8009876:	4ba2      	ldr	r3, [pc, #648]	@ (8009b00 <plotter_begin+0x6e0>)
 8009878:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2275, 30.5, 2996, //2280->2275 (P), 25->30 (I), 3000 -> 2996 (D)
 800987c:	4610      	mov	r0, r2
 800987e:	4619      	mov	r1, r3
 8009880:	f7f7 f968 	bl	8000b54 <__aeabi_d2f>
 8009884:	4603      	mov	r3, r0
 8009886:	ee01 3a90 	vmov	s3, r3
 800988a:	ed9f 1aa2 	vldr	s2, [pc, #648]	@ 8009b14 <plotter_begin+0x6f4>
 800988e:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 8009b18 <plotter_begin+0x6f8>
 8009892:	ed9f 0aa2 	vldr	s0, [pc, #648]	@ 8009b1c <plotter_begin+0x6fc>
 8009896:	48a2      	ldr	r0, [pc, #648]	@ (8009b20 <plotter_begin+0x700>)
 8009898:	f7f7 fc8b 	bl	80011b2 <PID_CONTROLLER_Init>
//			ZGX45RGG_150RPM_Constant.qd_max);
//	PID_CONTROLLER_Init(&revolute_velocity_pid, 2275, 25, 3000,
//			ZGX45RGG_150RPM_Constant.U_max);

	PID_CONTROLLER_Init(&revolute_joy_pid, 7500, 100, 2000,
			ZGX45RGG_150RPM_Constant.U_max);
 800989c:	4b98      	ldr	r3, [pc, #608]	@ (8009b00 <plotter_begin+0x6e0>)
 800989e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_joy_pid, 7500, 100, 2000,
 80098a2:	4610      	mov	r0, r2
 80098a4:	4619      	mov	r1, r3
 80098a6:	f7f7 f955 	bl	8000b54 <__aeabi_d2f>
 80098aa:	4603      	mov	r3, r0
 80098ac:	ee01 3a90 	vmov	s3, r3
 80098b0:	ed9f 1a8a 	vldr	s2, [pc, #552]	@ 8009adc <plotter_begin+0x6bc>
 80098b4:	eddf 0a9b 	vldr	s1, [pc, #620]	@ 8009b24 <plotter_begin+0x704>
 80098b8:	ed9f 0a9b 	vldr	s0, [pc, #620]	@ 8009b28 <plotter_begin+0x708>
 80098bc:	489b      	ldr	r0, [pc, #620]	@ (8009b2c <plotter_begin+0x70c>)
 80098be:	f7f7 fc78 	bl	80011b2 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 80098c2:	498f      	ldr	r1, [pc, #572]	@ (8009b00 <plotter_begin+0x6e0>)
 80098c4:	489a      	ldr	r0, [pc, #616]	@ (8009b30 <plotter_begin+0x710>)
 80098c6:	f7f7 fe37 	bl	8001538 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 80098ca:	4985      	ldr	r1, [pc, #532]	@ (8009ae0 <plotter_begin+0x6c0>)
 80098cc:	4899      	ldr	r0, [pc, #612]	@ (8009b34 <plotter_begin+0x714>)
 80098ce:	f7f7 ffb1 	bl	8001834 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 80098d2:	4a99      	ldr	r2, [pc, #612]	@ (8009b38 <plotter_begin+0x718>)
 80098d4:	498a      	ldr	r1, [pc, #552]	@ (8009b00 <plotter_begin+0x6e0>)
 80098d6:	4899      	ldr	r0, [pc, #612]	@ (8009b3c <plotter_begin+0x71c>)
 80098d8:	f7f7 febd 	bl	8001656 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 80098dc:	4a96      	ldr	r2, [pc, #600]	@ (8009b38 <plotter_begin+0x718>)
 80098de:	4980      	ldr	r1, [pc, #512]	@ (8009ae0 <plotter_begin+0x6c0>)
 80098e0:	4897      	ldr	r0, [pc, #604]	@ (8009b40 <plotter_begin+0x720>)
 80098e2:	f7f8 f849 	bl	8001978 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 80098e6:	2302      	movs	r3, #2
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	eddf 0a96 	vldr	s1, [pc, #600]	@ 8009b44 <plotter_begin+0x724>
 80098ee:	ed9f 0a96 	vldr	s0, [pc, #600]	@ 8009b48 <plotter_begin+0x728>
 80098f2:	2364      	movs	r3, #100	@ 0x64
 80098f4:	4a95      	ldr	r2, [pc, #596]	@ (8009b4c <plotter_begin+0x72c>)
 80098f6:	4996      	ldr	r1, [pc, #600]	@ (8009b50 <plotter_begin+0x730>)
 80098f8:	4896      	ldr	r0, [pc, #600]	@ (8009b54 <plotter_begin+0x734>)
 80098fa:	f7f7 fb11 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 80098fe:	2105      	movs	r1, #5
 8009900:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 8009b58 <plotter_begin+0x738>
 8009904:	4893      	ldr	r0, [pc, #588]	@ (8009b54 <plotter_begin+0x734>)
 8009906:	f7f7 fbbd 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 800990a:	4892      	ldr	r0, [pc, #584]	@ (8009b54 <plotter_begin+0x734>)
 800990c:	f7f7 fb60 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8009910:	eddf 0a92 	vldr	s1, [pc, #584]	@ 8009b5c <plotter_begin+0x73c>
 8009914:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8009918:	211f      	movs	r1, #31
 800991a:	4891      	ldr	r0, [pc, #580]	@ (8009b60 <plotter_begin+0x740>)
 800991c:	f7f8 f908 	bl	8001b30 <FIR_init>
	FIR_init(&revolute_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8009920:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 8009b5c <plotter_begin+0x73c>
 8009924:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8009928:	211f      	movs	r1, #31
 800992a:	488e      	ldr	r0, [pc, #568]	@ (8009b64 <plotter_begin+0x744>)
 800992c:	f7f8 f900 	bl	8001b30 <FIR_init>

	FIR_init(&prismatic_lp, NUM_TAPS, 25, SAMPLE_RATE);
 8009930:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 8009b5c <plotter_begin+0x73c>
 8009934:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8009938:	211f      	movs	r1, #31
 800993a:	488b      	ldr	r0, [pc, #556]	@ (8009b68 <plotter_begin+0x748>)
 800993c:	f7f8 f8f8 	bl	8001b30 <FIR_init>
	FIR_init(&revolute_lp, NUM_TAPS, 25, SAMPLE_RATE);
 8009940:	eddf 0a86 	vldr	s1, [pc, #536]	@ 8009b5c <plotter_begin+0x73c>
 8009944:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8009948:	211f      	movs	r1, #31
 800994a:	4888      	ldr	r0, [pc, #544]	@ (8009b6c <plotter_begin+0x74c>)
 800994c:	f7f8 f8f0 	bl	8001b30 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8009950:	4b63      	ldr	r3, [pc, #396]	@ (8009ae0 <plotter_begin+0x6c0>)
 8009952:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009956:	4610      	mov	r0, r2
 8009958:	4619      	mov	r1, r3
 800995a:	f7f7 f8fb 	bl	8000b54 <__aeabi_d2f>
 800995e:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 8009960:	4b5f      	ldr	r3, [pc, #380]	@ (8009ae0 <plotter_begin+0x6c0>)
 8009962:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8009966:	4610      	mov	r0, r2
 8009968:	4619      	mov	r1, r3
 800996a:	f7f7 f8f3 	bl	8000b54 <__aeabi_d2f>
 800996e:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 8009970:	4b5b      	ldr	r3, [pc, #364]	@ (8009ae0 <plotter_begin+0x6c0>)
 8009972:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8009976:	4610      	mov	r0, r2
 8009978:	4619      	mov	r1, r3
 800997a:	f7f7 f8eb 	bl	8000b54 <__aeabi_d2f>
 800997e:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 8009980:	4b57      	ldr	r3, [pc, #348]	@ (8009ae0 <plotter_begin+0x6c0>)
 8009982:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8009986:	4610      	mov	r0, r2
 8009988:	4619      	mov	r1, r3
 800998a:	f7f7 f8e3 	bl	8000b54 <__aeabi_d2f>
 800998e:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 8009990:	4b53      	ldr	r3, [pc, #332]	@ (8009ae0 <plotter_begin+0x6c0>)
 8009992:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8009996:	4610      	mov	r0, r2
 8009998:	4619      	mov	r1, r3
 800999a:	f7f7 f8db 	bl	8000b54 <__aeabi_d2f>
 800999e:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 80099a0:	4b4f      	ldr	r3, [pc, #316]	@ (8009ae0 <plotter_begin+0x6c0>)
 80099a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80099a6:	4610      	mov	r0, r2
 80099a8:	4619      	mov	r1, r3
 80099aa:	f7f7 f8d3 	bl	8000b54 <__aeabi_d2f>
 80099ae:	4603      	mov	r3, r0
 80099b0:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 80099b4:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 80099b8:	ee03 3a10 	vmov	s6, r3
 80099bc:	ee02 9a90 	vmov	s5, r9
 80099c0:	ee02 8a10 	vmov	s4, r8
 80099c4:	ee01 6a90 	vmov	s3, r6
 80099c8:	ee01 5a10 	vmov	s2, r5
 80099cc:	ee00 4a90 	vmov	s1, r4
 80099d0:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8009b08 <plotter_begin+0x6e8>
 80099d4:	4866      	ldr	r0, [pc, #408]	@ (8009b70 <plotter_begin+0x750>)
 80099d6:	f7f8 fda3 	bl	8002520 <MotorKalman_Init>

	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80099da:	4b49      	ldr	r3, [pc, #292]	@ (8009b00 <plotter_begin+0x6e0>)
 80099dc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80099e0:	4610      	mov	r0, r2
 80099e2:	4619      	mov	r1, r3
 80099e4:	f7f7 f8b6 	bl	8000b54 <__aeabi_d2f>
 80099e8:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 80099ea:	4b45      	ldr	r3, [pc, #276]	@ (8009b00 <plotter_begin+0x6e0>)
 80099ec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80099f0:	4610      	mov	r0, r2
 80099f2:	4619      	mov	r1, r3
 80099f4:	f7f7 f8ae 	bl	8000b54 <__aeabi_d2f>
 80099f8:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 80099fa:	4b41      	ldr	r3, [pc, #260]	@ (8009b00 <plotter_begin+0x6e0>)
 80099fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009a00:	4610      	mov	r0, r2
 8009a02:	4619      	mov	r1, r3
 8009a04:	f7f7 f8a6 	bl	8000b54 <__aeabi_d2f>
 8009a08:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 8009a0a:	4b3d      	ldr	r3, [pc, #244]	@ (8009b00 <plotter_begin+0x6e0>)
 8009a0c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8009a10:	a327      	add	r3, pc, #156	@ (adr r3, 8009ab0 <plotter_begin+0x690>)
 8009a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a16:	f7f6 fdbb 	bl	8000590 <__aeabi_dmul>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009a1e:	4610      	mov	r0, r2
 8009a20:	4619      	mov	r1, r3
 8009a22:	f7f7 f897 	bl	8000b54 <__aeabi_d2f>
 8009a26:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 8009a28:	4b35      	ldr	r3, [pc, #212]	@ (8009b00 <plotter_begin+0x6e0>)
 8009a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009a2e:	4610      	mov	r0, r2
 8009a30:	4619      	mov	r1, r3
 8009a32:	f7f7 f88f 	bl	8000b54 <__aeabi_d2f>
 8009a36:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.Kt, 0.001, &revolute_A, &revolute_B);
 8009a38:	4b31      	ldr	r3, [pc, #196]	@ (8009b00 <plotter_begin+0x6e0>)
 8009a3a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009a3e:	4610      	mov	r0, r2
 8009a40:	4619      	mov	r1, r3
 8009a42:	f7f7 f887 	bl	8000b54 <__aeabi_d2f>
 8009a46:	4603      	mov	r3, r0
 8009a48:	494a      	ldr	r1, [pc, #296]	@ (8009b74 <plotter_begin+0x754>)
 8009a4a:	484b      	ldr	r0, [pc, #300]	@ (8009b78 <plotter_begin+0x758>)
 8009a4c:	ed9f 3a2e 	vldr	s6, [pc, #184]	@ 8009b08 <plotter_begin+0x6e8>
 8009a50:	ee02 3a90 	vmov	s5, r3
 8009a54:	ee02 9a10 	vmov	s4, r9
 8009a58:	ee01 8a90 	vmov	s3, r8
 8009a5c:	ee01 6a10 	vmov	s2, r6
 8009a60:	ee00 5a90 	vmov	s1, r5
 8009a64:	ee00 4a10 	vmov	s0, r4
 8009a68:	f7f9 ff06 	bl	8003878 <GenerateMotorMatrices>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 8009a6c:	eddf 0a43 	vldr	s1, [pc, #268]	@ 8009b7c <plotter_begin+0x75c>
 8009a70:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009a74:	4a3f      	ldr	r2, [pc, #252]	@ (8009b74 <plotter_begin+0x754>)
 8009a76:	4940      	ldr	r1, [pc, #256]	@ (8009b78 <plotter_begin+0x758>)
 8009a78:	4841      	ldr	r0, [pc, #260]	@ (8009b80 <plotter_begin+0x760>)
 8009a7a:	f7fb fc79 	bl	8005370 <Kalman_Start>
	REVOLUTE_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 8009a7e:	23c8      	movs	r3, #200	@ 0xc8
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	2315      	movs	r3, #21
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	4b3f      	ldr	r3, [pc, #252]	@ (8009b84 <plotter_begin+0x764>)
 8009a88:	4a3f      	ldr	r2, [pc, #252]	@ (8009b88 <plotter_begin+0x768>)
 8009a8a:	4940      	ldr	r1, [pc, #256]	@ (8009b8c <plotter_begin+0x76c>)
 8009a8c:	4840      	ldr	r0, [pc, #256]	@ (8009b90 <plotter_begin+0x770>)
 8009a8e:	f7f8 fa3f 	bl	8001f10 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8009a92:	4840      	ldr	r0, [pc, #256]	@ (8009b94 <plotter_begin+0x774>)
 8009a94:	f004 fe10 	bl	800e6b8 <HAL_TIM_Base_Start_IT>

	plotter_reset();
 8009a98:	f000 f87e 	bl	8009b98 <plotter_reset>
}
 8009a9c:	bf00      	nop
 8009a9e:	3704      	adds	r7, #4
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	ecbd 8b02 	vpop	{d8}
 8009aa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009aaa:	bf00      	nop
 8009aac:	f3af 8000 	nop.w
 8009ab0:	9999999a 	.word	0x9999999a
 8009ab4:	40019999 	.word	0x40019999
 8009ab8:	20002104 	.word	0x20002104
 8009abc:	200009f0 	.word	0x200009f0
 8009ac0:	2000229c 	.word	0x2000229c
 8009ac4:	200008fc 	.word	0x200008fc
 8009ac8:	48000800 	.word	0x48000800
 8009acc:	20000948 	.word	0x20000948
 8009ad0:	20001ea0 	.word	0x20001ea0
 8009ad4:	20000b2c 	.word	0x20000b2c
 8009ad8:	00000000 	.word	0x00000000
 8009adc:	44fa0000 	.word	0x44fa0000
 8009ae0:	20000080 	.word	0x20000080
 8009ae4:	42ce0000 	.word	0x42ce0000
 8009ae8:	2edbe6ff 	.word	0x2edbe6ff
 8009aec:	42960000 	.word	0x42960000
 8009af0:	20000a4c 	.word	0x20000a4c
 8009af4:	3727c5ac 	.word	0x3727c5ac
 8009af8:	43160000 	.word	0x43160000
 8009afc:	20000a74 	.word	0x20000a74
 8009b00:	20000000 	.word	0x20000000
 8009b04:	442f0000 	.word	0x442f0000
 8009b08:	3a83126f 	.word	0x3a83126f
 8009b0c:	437a0000 	.word	0x437a0000
 8009b10:	20000a9c 	.word	0x20000a9c
 8009b14:	453b4000 	.word	0x453b4000
 8009b18:	41f40000 	.word	0x41f40000
 8009b1c:	450e3000 	.word	0x450e3000
 8009b20:	20000ac4 	.word	0x20000ac4
 8009b24:	42c80000 	.word	0x42c80000
 8009b28:	45ea6000 	.word	0x45ea6000
 8009b2c:	20000aec 	.word	0x20000aec
 8009b30:	20000b20 	.word	0x20000b20
 8009b34:	20000b14 	.word	0x20000b14
 8009b38:	20000100 	.word	0x20000100
 8009b3c:	20000b24 	.word	0x20000b24
 8009b40:	20000b18 	.word	0x20000b18
 8009b44:	457ff000 	.word	0x457ff000
 8009b48:	40533333 	.word	0x40533333
 8009b4c:	20001010 	.word	0x20001010
 8009b50:	2000063c 	.word	0x2000063c
 8009b54:	20000b44 	.word	0x20000b44
 8009b58:	45000000 	.word	0x45000000
 8009b5c:	447a0000 	.word	0x447a0000
 8009b60:	20000fe0 	.word	0x20000fe0
 8009b64:	20000fec 	.word	0x20000fec
 8009b68:	20000ff8 	.word	0x20000ff8
 8009b6c:	20001004 	.word	0x20001004
 8009b70:	20001740 	.word	0x20001740
 8009b74:	20001e6c 	.word	0x20001e6c
 8009b78:	20001e2c 	.word	0x20001e2c
 8009b7c:	3d4ccccd 	.word	0x3d4ccccd
 8009b80:	20001aac 	.word	0x20001aac
 8009b84:	200015b0 	.word	0x200015b0
 8009b88:	20002368 	.word	0x20002368
 8009b8c:	20002500 	.word	0x20002500
 8009b90:	200010d8 	.word	0x200010d8
 8009b94:	20001f6c 	.word	0x20001f6c

08009b98 <plotter_reset>:

void plotter_reset() {
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	af00      	add	r7, sp, #0
	QEI_reset(&prismatic_encoder);
 8009b9c:	4819      	ldr	r0, [pc, #100]	@ (8009c04 <plotter_reset+0x6c>)
 8009b9e:	f7fa fb83 	bl	80042a8 <QEI_reset>
	QEI_reset(&prismatic_encoder);
 8009ba2:	4818      	ldr	r0, [pc, #96]	@ (8009c04 <plotter_reset+0x6c>)
 8009ba4:	f7fa fb80 	bl	80042a8 <QEI_reset>

	prismatic_encoder.diff_counts = 0;
 8009ba8:	4b16      	ldr	r3, [pc, #88]	@ (8009c04 <plotter_reset+0x6c>)
 8009baa:	2200      	movs	r2, #0
 8009bac:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_encoder.rpm = 0;
 8009bae:	4b15      	ldr	r3, [pc, #84]	@ (8009c04 <plotter_reset+0x6c>)
 8009bb0:	f04f 0200 	mov.w	r2, #0
 8009bb4:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_encoder.pulses = 0;
 8009bb6:	4b13      	ldr	r3, [pc, #76]	@ (8009c04 <plotter_reset+0x6c>)
 8009bb8:	2200      	movs	r2, #0
 8009bba:	639a      	str	r2, [r3, #56]	@ 0x38
	prismatic_encoder.revs = 0;
 8009bbc:	4b11      	ldr	r3, [pc, #68]	@ (8009c04 <plotter_reset+0x6c>)
 8009bbe:	f04f 0200 	mov.w	r2, #0
 8009bc2:	63da      	str	r2, [r3, #60]	@ 0x3c
	prismatic_encoder.rads = 0;
 8009bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8009c04 <plotter_reset+0x6c>)
 8009bc6:	f04f 0200 	mov.w	r2, #0
 8009bca:	641a      	str	r2, [r3, #64]	@ 0x40
	prismatic_encoder.mm = 0;
 8009bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8009c04 <plotter_reset+0x6c>)
 8009bce:	f04f 0200 	mov.w	r2, #0
 8009bd2:	649a      	str	r2, [r3, #72]	@ 0x48

	revolute_encoder.diff_counts = 0;
 8009bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8009c08 <plotter_reset+0x70>)
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_encoder.rpm = 0;
 8009bda:	4b0b      	ldr	r3, [pc, #44]	@ (8009c08 <plotter_reset+0x70>)
 8009bdc:	f04f 0200 	mov.w	r2, #0
 8009be0:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_encoder.pulses = 0;
 8009be2:	4b09      	ldr	r3, [pc, #36]	@ (8009c08 <plotter_reset+0x70>)
 8009be4:	2200      	movs	r2, #0
 8009be6:	639a      	str	r2, [r3, #56]	@ 0x38
	revolute_encoder.revs = 0;
 8009be8:	4b07      	ldr	r3, [pc, #28]	@ (8009c08 <plotter_reset+0x70>)
 8009bea:	f04f 0200 	mov.w	r2, #0
 8009bee:	63da      	str	r2, [r3, #60]	@ 0x3c
	revolute_encoder.rads = 0;
 8009bf0:	4b05      	ldr	r3, [pc, #20]	@ (8009c08 <plotter_reset+0x70>)
 8009bf2:	f04f 0200 	mov.w	r2, #0
 8009bf6:	641a      	str	r2, [r3, #64]	@ 0x40
	revolute_encoder.mm = 0;
 8009bf8:	4b03      	ldr	r3, [pc, #12]	@ (8009c08 <plotter_reset+0x70>)
 8009bfa:	f04f 0200 	mov.w	r2, #0
 8009bfe:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8009c00:	bf00      	nop
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	20000994 	.word	0x20000994
 8009c08:	200009f0 	.word	0x200009f0

08009c0c <plotter_update_sensors>:

void plotter_update_sensors() {
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50,
 8009c10:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8009d1c <plotter_update_sensors+0x110>
 8009c14:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 8009d20 <plotter_update_sensors+0x114>
 8009c18:	2106      	movs	r1, #6
 8009c1a:	4842      	ldr	r0, [pc, #264]	@ (8009d24 <plotter_update_sensors+0x118>)
 8009c1c:	f7f7 fa5c 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8009c20:	eef0 7a40 	vmov.f32	s15, s0
 8009c24:	4b40      	ldr	r3, [pc, #256]	@ (8009d28 <plotter_update_sensors+0x11c>)
 8009c26:	edc3 7a00 	vstr	s15, [r3]
			50);
	joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50,
 8009c2a:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8009d1c <plotter_update_sensors+0x110>
 8009c2e:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8009d20 <plotter_update_sensors+0x114>
 8009c32:	2107      	movs	r1, #7
 8009c34:	483b      	ldr	r0, [pc, #236]	@ (8009d24 <plotter_update_sensors+0x118>)
 8009c36:	f7f7 fa4f 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8009c3a:	eef0 7a40 	vmov.f32	s15, s0
 8009c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8009d2c <plotter_update_sensors+0x120>)
 8009c40:	edc3 7a00 	vstr	s15, [r3]
			50);

	b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 8009c44:	2180      	movs	r1, #128	@ 0x80
 8009c46:	483a      	ldr	r0, [pc, #232]	@ (8009d30 <plotter_update_sensors+0x124>)
 8009c48:	f003 fbd0 	bl	800d3ec <HAL_GPIO_ReadPin>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	bf0c      	ite	eq
 8009c52:	2301      	moveq	r3, #1
 8009c54:	2300      	movne	r3, #0
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	461a      	mov	r2, r3
 8009c5a:	4b36      	ldr	r3, [pc, #216]	@ (8009d34 <plotter_update_sensors+0x128>)
 8009c5c:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8009c5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009c62:	4835      	ldr	r0, [pc, #212]	@ (8009d38 <plotter_update_sensors+0x12c>)
 8009c64:	f003 fbc2 	bl	800d3ec <HAL_GPIO_ReadPin>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	bf0c      	ite	eq
 8009c6e:	2301      	moveq	r3, #1
 8009c70:	2300      	movne	r3, #0
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	461a      	mov	r2, r3
 8009c76:	4b31      	ldr	r3, [pc, #196]	@ (8009d3c <plotter_update_sensors+0x130>)
 8009c78:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 8009c7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009c7e:	482e      	ldr	r0, [pc, #184]	@ (8009d38 <plotter_update_sensors+0x12c>)
 8009c80:	f003 fbb4 	bl	800d3ec <HAL_GPIO_ReadPin>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	bf0c      	ite	eq
 8009c8a:	2301      	moveq	r3, #1
 8009c8c:	2300      	movne	r3, #0
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	461a      	mov	r2, r3
 8009c92:	4b2b      	ldr	r3, [pc, #172]	@ (8009d40 <plotter_update_sensors+0x134>)
 8009c94:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 8009c96:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009c9a:	4827      	ldr	r0, [pc, #156]	@ (8009d38 <plotter_update_sensors+0x12c>)
 8009c9c:	f003 fba6 	bl	800d3ec <HAL_GPIO_ReadPin>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	bf0c      	ite	eq
 8009ca6:	2301      	moveq	r3, #1
 8009ca8:	2300      	movne	r3, #0
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	461a      	mov	r2, r3
 8009cae:	4b25      	ldr	r3, [pc, #148]	@ (8009d44 <plotter_update_sensors+0x138>)
 8009cb0:	601a      	str	r2, [r3, #0]

	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 8009cb2:	2104      	movs	r1, #4
 8009cb4:	481e      	ldr	r0, [pc, #120]	@ (8009d30 <plotter_update_sensors+0x124>)
 8009cb6:	f003 fb99 	bl	800d3ec <HAL_GPIO_ReadPin>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	4b22      	ldr	r3, [pc, #136]	@ (8009d48 <plotter_update_sensors+0x13c>)
 8009cc0:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 8009cc2:	2102      	movs	r1, #2
 8009cc4:	481a      	ldr	r0, [pc, #104]	@ (8009d30 <plotter_update_sensors+0x124>)
 8009cc6:	f003 fb91 	bl	800d3ec <HAL_GPIO_ReadPin>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	461a      	mov	r2, r3
 8009cce:	4b1f      	ldr	r3, [pc, #124]	@ (8009d4c <plotter_update_sensors+0x140>)
 8009cd0:	601a      	str	r2, [r3, #0]

	extern bool homing_active;
	if (!homing_active) {
 8009cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8009d50 <plotter_update_sensors+0x144>)
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	f083 0301 	eor.w	r3, r3, #1
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d01a      	beq.n	8009d16 <plotter_update_sensors+0x10a>
		extern volatile bool up_photo, low_photo;
		up_photo = HAL_GPIO_ReadPin(upperphoto_GPIO_Port, upperphoto_Pin);
 8009ce0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009ce4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009ce8:	f003 fb80 	bl	800d3ec <HAL_GPIO_ReadPin>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	bf14      	ite	ne
 8009cf2:	2301      	movne	r3, #1
 8009cf4:	2300      	moveq	r3, #0
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	4b16      	ldr	r3, [pc, #88]	@ (8009d54 <plotter_update_sensors+0x148>)
 8009cfa:	701a      	strb	r2, [r3, #0]
		low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 8009cfc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009d00:	480b      	ldr	r0, [pc, #44]	@ (8009d30 <plotter_update_sensors+0x124>)
 8009d02:	f003 fb73 	bl	800d3ec <HAL_GPIO_ReadPin>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	bf14      	ite	ne
 8009d0c:	2301      	movne	r3, #1
 8009d0e:	2300      	moveq	r3, #0
 8009d10:	b2da      	uxtb	r2, r3
 8009d12:	4b11      	ldr	r3, [pc, #68]	@ (8009d58 <plotter_update_sensors+0x14c>)
 8009d14:	701a      	strb	r2, [r3, #0]
	}
}
 8009d16:	bf00      	nop
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	42480000 	.word	0x42480000
 8009d20:	c2480000 	.word	0xc2480000
 8009d24:	20000b44 	.word	0x20000b44
 8009d28:	20001e7c 	.word	0x20001e7c
 8009d2c:	20001e80 	.word	0x20001e80
 8009d30:	48000400 	.word	0x48000400
 8009d34:	20001e8c 	.word	0x20001e8c
 8009d38:	48000800 	.word	0x48000800
 8009d3c:	20001e90 	.word	0x20001e90
 8009d40:	20001e94 	.word	0x20001e94
 8009d44:	20001e98 	.word	0x20001e98
 8009d48:	20001e84 	.word	0x20001e84
 8009d4c:	20001e88 	.word	0x20001e88
 8009d50:	200007ef 	.word	0x200007ef
 8009d54:	200007ec 	.word	0x200007ec
 8009d58:	200007ed 	.word	0x200007ed

08009d5c <plotter_pen_up>:

void plotter_pen_up() {
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8009d60:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8009d64:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8009d74 <plotter_pen_up+0x18>
 8009d68:	4803      	ldr	r0, [pc, #12]	@ (8009d78 <plotter_pen_up+0x1c>)
 8009d6a:	f7f9 fe0f 	bl	800398c <PWM_write_duty>
}
 8009d6e:	bf00      	nop
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	42480000 	.word	0x42480000
 8009d78:	20000b2c 	.word	0x20000b2c

08009d7c <plotter_pen_down>:

void plotter_pen_down() {
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 10);
 8009d80:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8009d84:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8009d94 <plotter_pen_down+0x18>
 8009d88:	4803      	ldr	r0, [pc, #12]	@ (8009d98 <plotter_pen_down+0x1c>)
 8009d8a:	f7f9 fdff 	bl	800398c <PWM_write_duty>
}
 8009d8e:	bf00      	nop
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	42480000 	.word	0x42480000
 8009d98:	20000b2c 	.word	0x20000b2c

08009d9c <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	460b      	mov	r3, r1
 8009da6:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	78fa      	ldrb	r2, [r7, #3]
 8009dac:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009db4:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009dbc:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f04f 0200 	mov.w	r2, #0
 8009dc4:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f04f 0200 	mov.w	r2, #0
 8009dcc:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f04f 0200 	mov.w	r2, #0
 8009dd4:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f04f 0200 	mov.w	r2, #0
 8009ddc:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4a1b      	ldr	r2, [pc, #108]	@ (8009e50 <SIGNAL_init+0xb4>)
 8009de2:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009dea:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8009dec:	78fb      	ldrb	r3, [r7, #3]
 8009dee:	2b03      	cmp	r3, #3
 8009df0:	d828      	bhi.n	8009e44 <SIGNAL_init+0xa8>
 8009df2:	a201      	add	r2, pc, #4	@ (adr r2, 8009df8 <SIGNAL_init+0x5c>)
 8009df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df8:	08009e43 	.word	0x08009e43
 8009dfc:	08009e09 	.word	0x08009e09
 8009e00:	08009e27 	.word	0x08009e27
 8009e04:	08009e31 	.word	0x08009e31
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009e14:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4a0e      	ldr	r2, [pc, #56]	@ (8009e54 <SIGNAL_init+0xb8>)
 8009e1a:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009e22:	621a      	str	r2, [r3, #32]
            break;
 8009e24:	e00e      	b.n	8009e44 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8009e2c:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8009e2e:	e009      	b.n	8009e44 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f04f 0200 	mov.w	r2, #0
 8009e36:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009e3e:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8009e40:	e000      	b.n	8009e44 <SIGNAL_init+0xa8>
            break;
 8009e42:	bf00      	nop
    }
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr
 8009e50:	bf800000 	.word	0xbf800000
 8009e54:	41200000 	.word	0x41200000

08009e58 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8009e58:	b480      	push	{r7}
 8009e5a:	b089      	sub	sp, #36	@ 0x24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	61f8      	str	r0, [r7, #28]
 8009e60:	ed87 0a06 	vstr	s0, [r7, #24]
 8009e64:	edc7 0a05 	vstr	s1, [r7, #20]
 8009e68:	ed87 1a04 	vstr	s2, [r7, #16]
 8009e6c:	edc7 1a03 	vstr	s3, [r7, #12]
 8009e70:	ed87 2a02 	vstr	s4, [r7, #8]
 8009e74:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	69ba      	ldr	r2, [r7, #24]
 8009e82:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	693a      	ldr	r2, [r7, #16]
 8009e8e:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	68ba      	ldr	r2, [r7, #8]
 8009e9a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8009ea2:	bf00      	nop
 8009ea4:	3724      	adds	r7, #36	@ 0x24
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8009eae:	b480      	push	{r7}
 8009eb0:	b089      	sub	sp, #36	@ 0x24
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	61f8      	str	r0, [r7, #28]
 8009eb6:	ed87 0a06 	vstr	s0, [r7, #24]
 8009eba:	edc7 0a05 	vstr	s1, [r7, #20]
 8009ebe:	ed87 1a04 	vstr	s2, [r7, #16]
 8009ec2:	edc7 1a03 	vstr	s3, [r7, #12]
 8009ec6:	ed87 2a02 	vstr	s4, [r7, #8]
 8009eca:	edc7 2a01 	vstr	s5, [r7, #4]
 8009ece:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	2202      	movs	r2, #2
 8009ed6:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	69ba      	ldr	r2, [r7, #24]
 8009edc:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	697a      	ldr	r2, [r7, #20]
 8009ee2:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	693a      	ldr	r2, [r7, #16]
 8009ee8:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8009eea:	69fb      	ldr	r3, [r7, #28]
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	683a      	ldr	r2, [r7, #0]
 8009f00:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8009f02:	bf00      	nop
 8009f04:	3724      	adds	r7, #36	@ 0x24
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
	...

08009f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009f16:	4b0f      	ldr	r3, [pc, #60]	@ (8009f54 <HAL_MspInit+0x44>)
 8009f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f1a:	4a0e      	ldr	r2, [pc, #56]	@ (8009f54 <HAL_MspInit+0x44>)
 8009f1c:	f043 0301 	orr.w	r3, r3, #1
 8009f20:	6613      	str	r3, [r2, #96]	@ 0x60
 8009f22:	4b0c      	ldr	r3, [pc, #48]	@ (8009f54 <HAL_MspInit+0x44>)
 8009f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f26:	f003 0301 	and.w	r3, r3, #1
 8009f2a:	607b      	str	r3, [r7, #4]
 8009f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009f2e:	4b09      	ldr	r3, [pc, #36]	@ (8009f54 <HAL_MspInit+0x44>)
 8009f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f32:	4a08      	ldr	r2, [pc, #32]	@ (8009f54 <HAL_MspInit+0x44>)
 8009f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f38:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f3a:	4b06      	ldr	r3, [pc, #24]	@ (8009f54 <HAL_MspInit+0x44>)
 8009f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f42:	603b      	str	r3, [r7, #0]
 8009f44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8009f46:	f003 fb57 	bl	800d5f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009f4a:	bf00      	nop
 8009f4c:	3708      	adds	r7, #8
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	40021000 	.word	0x40021000

08009f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009f5c:	bf00      	nop
 8009f5e:	e7fd      	b.n	8009f5c <NMI_Handler+0x4>

08009f60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009f60:	b480      	push	{r7}
 8009f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009f64:	bf00      	nop
 8009f66:	e7fd      	b.n	8009f64 <HardFault_Handler+0x4>

08009f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009f6c:	bf00      	nop
 8009f6e:	e7fd      	b.n	8009f6c <MemManage_Handler+0x4>

08009f70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009f70:	b480      	push	{r7}
 8009f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009f74:	bf00      	nop
 8009f76:	e7fd      	b.n	8009f74 <BusFault_Handler+0x4>

08009f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009f7c:	bf00      	nop
 8009f7e:	e7fd      	b.n	8009f7c <UsageFault_Handler+0x4>

08009f80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009f80:	b480      	push	{r7}
 8009f82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009f84:	bf00      	nop
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr

08009f8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009f8e:	b480      	push	{r7}
 8009f90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009f92:	bf00      	nop
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009fa0:	bf00      	nop
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr

08009faa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009fae:	f000 ffc3 	bl	800af38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009fb2:	bf00      	nop
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UPPER_PHOTO_Pin);
 8009fba:	2001      	movs	r0, #1
 8009fbc:	f003 fa60 	bl	800d480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8009fc0:	bf00      	nop
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 8009fc8:	2010      	movs	r0, #16
 8009fca:	f003 fa59 	bl	800d480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8009fce:	bf00      	nop
 8009fd0:	bd80      	pop	{r7, pc}
	...

08009fd4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009fd8:	4802      	ldr	r0, [pc, #8]	@ (8009fe4 <DMA1_Channel1_IRQHandler+0x10>)
 8009fda:	f002 ff36 	bl	800ce4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8009fde:	bf00      	nop
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	200006a8 	.word	0x200006a8

08009fe8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8009fec:	4802      	ldr	r0, [pc, #8]	@ (8009ff8 <DMA1_Channel2_IRQHandler+0x10>)
 8009fee:	f002 ff2c 	bl	800ce4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8009ff2:	bf00      	nop
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	2000268c 	.word	0x2000268c

08009ffc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800a000:	4802      	ldr	r0, [pc, #8]	@ (800a00c <DMA1_Channel3_IRQHandler+0x10>)
 800a002:	f002 ff22 	bl	800ce4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800a006:	bf00      	nop
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	200026ec 	.word	0x200026ec

0800a010 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800a014:	4802      	ldr	r0, [pc, #8]	@ (800a020 <DMA1_Channel4_IRQHandler+0x10>)
 800a016:	f002 ff18 	bl	800ce4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800a01a:	bf00      	nop
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	200025cc 	.word	0x200025cc

0800a024 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800a028:	4802      	ldr	r0, [pc, #8]	@ (800a034 <DMA1_Channel5_IRQHandler+0x10>)
 800a02a:	f002 ff0e 	bl	800ce4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800a02e:	bf00      	nop
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	2000262c 	.word	0x2000262c

0800a038 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(prox_Pin);
 800a03c:	2020      	movs	r0, #32
 800a03e:	f003 fa1f 	bl	800d480 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 800a042:	2040      	movs	r0, #64	@ 0x40
 800a044:	f003 fa1c 	bl	800d480 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J1_Pin);
 800a048:	2080      	movs	r0, #128	@ 0x80
 800a04a:	f003 fa19 	bl	800d480 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(upperphoto_Pin);
 800a04e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a052:	f003 fa15 	bl	800d480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800a056:	bf00      	nop
 800a058:	bd80      	pop	{r7, pc}
	...

0800a05c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a060:	4803      	ldr	r0, [pc, #12]	@ (800a070 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800a062:	f004 ff4f 	bl	800ef04 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800a066:	4803      	ldr	r0, [pc, #12]	@ (800a074 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800a068:	f004 ff4c 	bl	800ef04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800a06c:	bf00      	nop
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	20001ea0 	.word	0x20001ea0
 800a074:	20002368 	.word	0x20002368

0800a078 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a07c:	4802      	ldr	r0, [pc, #8]	@ (800a088 <TIM2_IRQHandler+0x10>)
 800a07e:	f004 ff41 	bl	800ef04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800a082:	bf00      	nop
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	20001f6c 	.word	0x20001f6c

0800a08c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800a090:	4802      	ldr	r0, [pc, #8]	@ (800a09c <TIM3_IRQHandler+0x10>)
 800a092:	f004 ff37 	bl	800ef04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800a096:	bf00      	nop
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	20002038 	.word	0x20002038

0800a0a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800a0a4:	4802      	ldr	r0, [pc, #8]	@ (800a0b0 <TIM4_IRQHandler+0x10>)
 800a0a6:	f004 ff2d 	bl	800ef04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800a0aa:	bf00      	nop
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	20002104 	.word	0x20002104

0800a0b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a0b8:	4802      	ldr	r0, [pc, #8]	@ (800a0c4 <USART2_IRQHandler+0x10>)
 800a0ba:	f006 fcf7 	bl	8010aac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800a0be:	bf00      	nop
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	20002500 	.word	0x20002500

0800a0c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(J3_Pin);
 800a0cc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800a0d0:	f003 f9d6 	bl	800d480 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J4_Pin);
 800a0d4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a0d8:	f003 f9d2 	bl	800d480 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LOWER_PHOTO_Pin);
 800a0dc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a0e0:	f003 f9ce 	bl	800d480 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800a0e4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800a0e8:	f003 f9ca 	bl	800d480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a0ec:	bf00      	nop
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800a0f4:	4802      	ldr	r0, [pc, #8]	@ (800a100 <LPUART1_IRQHandler+0x10>)
 800a0f6:	f006 fcd9 	bl	8010aac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800a0fa:	bf00      	nop
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	20002434 	.word	0x20002434

0800a104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b086      	sub	sp, #24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a10c:	4a14      	ldr	r2, [pc, #80]	@ (800a160 <_sbrk+0x5c>)
 800a10e:	4b15      	ldr	r3, [pc, #84]	@ (800a164 <_sbrk+0x60>)
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a118:	4b13      	ldr	r3, [pc, #76]	@ (800a168 <_sbrk+0x64>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d102      	bne.n	800a126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a120:	4b11      	ldr	r3, [pc, #68]	@ (800a168 <_sbrk+0x64>)
 800a122:	4a12      	ldr	r2, [pc, #72]	@ (800a16c <_sbrk+0x68>)
 800a124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a126:	4b10      	ldr	r3, [pc, #64]	@ (800a168 <_sbrk+0x64>)
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4413      	add	r3, r2
 800a12e:	693a      	ldr	r2, [r7, #16]
 800a130:	429a      	cmp	r2, r3
 800a132:	d207      	bcs.n	800a144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a134:	f008 ffa8 	bl	8013088 <__errno>
 800a138:	4603      	mov	r3, r0
 800a13a:	220c      	movs	r2, #12
 800a13c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a13e:	f04f 33ff 	mov.w	r3, #4294967295
 800a142:	e009      	b.n	800a158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a144:	4b08      	ldr	r3, [pc, #32]	@ (800a168 <_sbrk+0x64>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a14a:	4b07      	ldr	r3, [pc, #28]	@ (800a168 <_sbrk+0x64>)
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4413      	add	r3, r2
 800a152:	4a05      	ldr	r2, [pc, #20]	@ (800a168 <_sbrk+0x64>)
 800a154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a156:	68fb      	ldr	r3, [r7, #12]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3718      	adds	r7, #24
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	20020000 	.word	0x20020000
 800a164:	00000400 	.word	0x00000400
 800a168:	20001e9c 	.word	0x20001e9c
 800a16c:	20002898 	.word	0x20002898

0800a170 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800a170:	b480      	push	{r7}
 800a172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800a174:	4b06      	ldr	r3, [pc, #24]	@ (800a190 <SystemInit+0x20>)
 800a176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a17a:	4a05      	ldr	r2, [pc, #20]	@ (800a190 <SystemInit+0x20>)
 800a17c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a180:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a184:	bf00      	nop
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr
 800a18e:	bf00      	nop
 800a190:	e000ed00 	.word	0xe000ed00

0800a194 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b098      	sub	sp, #96	@ 0x60
 800a198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a19a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a19e:	2200      	movs	r2, #0
 800a1a0:	601a      	str	r2, [r3, #0]
 800a1a2:	605a      	str	r2, [r3, #4]
 800a1a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a1a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	601a      	str	r2, [r3, #0]
 800a1ae:	605a      	str	r2, [r3, #4]
 800a1b0:	609a      	str	r2, [r3, #8]
 800a1b2:	60da      	str	r2, [r3, #12]
 800a1b4:	611a      	str	r2, [r3, #16]
 800a1b6:	615a      	str	r2, [r3, #20]
 800a1b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a1ba:	1d3b      	adds	r3, r7, #4
 800a1bc:	2234      	movs	r2, #52	@ 0x34
 800a1be:	2100      	movs	r1, #0
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f008 ff49 	bl	8013058 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a1c6:	4b3b      	ldr	r3, [pc, #236]	@ (800a2b4 <MX_TIM1_Init+0x120>)
 800a1c8:	4a3b      	ldr	r2, [pc, #236]	@ (800a2b8 <MX_TIM1_Init+0x124>)
 800a1ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800a1cc:	4b39      	ldr	r3, [pc, #228]	@ (800a2b4 <MX_TIM1_Init+0x120>)
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a1d2:	4b38      	ldr	r3, [pc, #224]	@ (800a2b4 <MX_TIM1_Init+0x120>)
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800a1d8:	4b36      	ldr	r3, [pc, #216]	@ (800a2b4 <MX_TIM1_Init+0x120>)
 800a1da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a1de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a1e0:	4b34      	ldr	r3, [pc, #208]	@ (800a2b4 <MX_TIM1_Init+0x120>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a1e6:	4b33      	ldr	r3, [pc, #204]	@ (800a2b4 <MX_TIM1_Init+0x120>)
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a1ec:	4b31      	ldr	r3, [pc, #196]	@ (800a2b4 <MX_TIM1_Init+0x120>)
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800a1f2:	4830      	ldr	r0, [pc, #192]	@ (800a2b4 <MX_TIM1_Init+0x120>)
 800a1f4:	f004 fad8 	bl	800e7a8 <HAL_TIM_PWM_Init>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d001      	beq.n	800a202 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800a1fe:	f7ff f909 	bl	8009414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a202:	2300      	movs	r3, #0
 800a204:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a206:	2300      	movs	r3, #0
 800a208:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a20a:	2300      	movs	r3, #0
 800a20c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a20e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a212:	4619      	mov	r1, r3
 800a214:	4827      	ldr	r0, [pc, #156]	@ (800a2b4 <MX_TIM1_Init+0x120>)
 800a216:	f006 f8e9 	bl	80103ec <HAL_TIMEx_MasterConfigSynchronization>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d001      	beq.n	800a224 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800a220:	f7ff f8f8 	bl	8009414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a224:	2360      	movs	r3, #96	@ 0x60
 800a226:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800a228:	2300      	movs	r3, #0
 800a22a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a22c:	2300      	movs	r3, #0
 800a22e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a230:	2300      	movs	r3, #0
 800a232:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a234:	2300      	movs	r3, #0
 800a236:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a238:	2300      	movs	r3, #0
 800a23a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a23c:	2300      	movs	r3, #0
 800a23e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a240:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a244:	220c      	movs	r2, #12
 800a246:	4619      	mov	r1, r3
 800a248:	481a      	ldr	r0, [pc, #104]	@ (800a2b4 <MX_TIM1_Init+0x120>)
 800a24a:	f004 ffd5 	bl	800f1f8 <HAL_TIM_PWM_ConfigChannel>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d001      	beq.n	800a258 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800a254:	f7ff f8de 	bl	8009414 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a258:	2300      	movs	r3, #0
 800a25a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a25c:	2300      	movs	r3, #0
 800a25e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a260:	2300      	movs	r3, #0
 800a262:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a264:	2300      	movs	r3, #0
 800a266:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a268:	2300      	movs	r3, #0
 800a26a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a26c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a270:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800a272:	2300      	movs	r3, #0
 800a274:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800a276:	2300      	movs	r3, #0
 800a278:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a27a:	2300      	movs	r3, #0
 800a27c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a27e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a282:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800a284:	2300      	movs	r3, #0
 800a286:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800a288:	2300      	movs	r3, #0
 800a28a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a28c:	2300      	movs	r3, #0
 800a28e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800a290:	1d3b      	adds	r3, r7, #4
 800a292:	4619      	mov	r1, r3
 800a294:	4807      	ldr	r0, [pc, #28]	@ (800a2b4 <MX_TIM1_Init+0x120>)
 800a296:	f006 f93f 	bl	8010518 <HAL_TIMEx_ConfigBreakDeadTime>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d001      	beq.n	800a2a4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800a2a0:	f7ff f8b8 	bl	8009414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800a2a4:	4803      	ldr	r0, [pc, #12]	@ (800a2b4 <MX_TIM1_Init+0x120>)
 800a2a6:	f000 fb77 	bl	800a998 <HAL_TIM_MspPostInit>

}
 800a2aa:	bf00      	nop
 800a2ac:	3760      	adds	r7, #96	@ 0x60
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	20001ea0 	.word	0x20001ea0
 800a2b8:	40012c00 	.word	0x40012c00

0800a2bc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b088      	sub	sp, #32
 800a2c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a2c2:	f107 0310 	add.w	r3, r7, #16
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	601a      	str	r2, [r3, #0]
 800a2ca:	605a      	str	r2, [r3, #4]
 800a2cc:	609a      	str	r2, [r3, #8]
 800a2ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a2d0:	1d3b      	adds	r3, r7, #4
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	601a      	str	r2, [r3, #0]
 800a2d6:	605a      	str	r2, [r3, #4]
 800a2d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a2da:	4b1e      	ldr	r3, [pc, #120]	@ (800a354 <MX_TIM2_Init+0x98>)
 800a2dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800a2e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800a2e2:	4b1c      	ldr	r3, [pc, #112]	@ (800a354 <MX_TIM2_Init+0x98>)
 800a2e4:	22a9      	movs	r2, #169	@ 0xa9
 800a2e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a2e8:	4b1a      	ldr	r3, [pc, #104]	@ (800a354 <MX_TIM2_Init+0x98>)
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800a2ee:	4b19      	ldr	r3, [pc, #100]	@ (800a354 <MX_TIM2_Init+0x98>)
 800a2f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800a2f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a2f6:	4b17      	ldr	r3, [pc, #92]	@ (800a354 <MX_TIM2_Init+0x98>)
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a2fc:	4b15      	ldr	r3, [pc, #84]	@ (800a354 <MX_TIM2_Init+0x98>)
 800a2fe:	2200      	movs	r2, #0
 800a300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a302:	4814      	ldr	r0, [pc, #80]	@ (800a354 <MX_TIM2_Init+0x98>)
 800a304:	f004 f904 	bl	800e510 <HAL_TIM_Base_Init>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800a30e:	f7ff f881 	bl	8009414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a312:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a316:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a318:	f107 0310 	add.w	r3, r7, #16
 800a31c:	4619      	mov	r1, r3
 800a31e:	480d      	ldr	r0, [pc, #52]	@ (800a354 <MX_TIM2_Init+0x98>)
 800a320:	f005 f87e 	bl	800f420 <HAL_TIM_ConfigClockSource>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d001      	beq.n	800a32e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800a32a:	f7ff f873 	bl	8009414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a32e:	2300      	movs	r3, #0
 800a330:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a332:	2300      	movs	r3, #0
 800a334:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a336:	1d3b      	adds	r3, r7, #4
 800a338:	4619      	mov	r1, r3
 800a33a:	4806      	ldr	r0, [pc, #24]	@ (800a354 <MX_TIM2_Init+0x98>)
 800a33c:	f006 f856 	bl	80103ec <HAL_TIMEx_MasterConfigSynchronization>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d001      	beq.n	800a34a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800a346:	f7ff f865 	bl	8009414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a34a:	bf00      	nop
 800a34c:	3720      	adds	r7, #32
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	20001f6c 	.word	0x20001f6c

0800a358 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b08c      	sub	sp, #48	@ 0x30
 800a35c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a35e:	f107 030c 	add.w	r3, r7, #12
 800a362:	2224      	movs	r2, #36	@ 0x24
 800a364:	2100      	movs	r1, #0
 800a366:	4618      	mov	r0, r3
 800a368:	f008 fe76 	bl	8013058 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a36c:	463b      	mov	r3, r7
 800a36e:	2200      	movs	r2, #0
 800a370:	601a      	str	r2, [r3, #0]
 800a372:	605a      	str	r2, [r3, #4]
 800a374:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a376:	4b21      	ldr	r3, [pc, #132]	@ (800a3fc <MX_TIM3_Init+0xa4>)
 800a378:	4a21      	ldr	r2, [pc, #132]	@ (800a400 <MX_TIM3_Init+0xa8>)
 800a37a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800a37c:	4b1f      	ldr	r3, [pc, #124]	@ (800a3fc <MX_TIM3_Init+0xa4>)
 800a37e:	2200      	movs	r2, #0
 800a380:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a382:	4b1e      	ldr	r3, [pc, #120]	@ (800a3fc <MX_TIM3_Init+0xa4>)
 800a384:	2200      	movs	r2, #0
 800a386:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800a388:	4b1c      	ldr	r3, [pc, #112]	@ (800a3fc <MX_TIM3_Init+0xa4>)
 800a38a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a38e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a390:	4b1a      	ldr	r3, [pc, #104]	@ (800a3fc <MX_TIM3_Init+0xa4>)
 800a392:	2200      	movs	r2, #0
 800a394:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a396:	4b19      	ldr	r3, [pc, #100]	@ (800a3fc <MX_TIM3_Init+0xa4>)
 800a398:	2200      	movs	r2, #0
 800a39a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a39c:	2303      	movs	r3, #3
 800a39e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800a3c0:	f107 030c 	add.w	r3, r7, #12
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	480d      	ldr	r0, [pc, #52]	@ (800a3fc <MX_TIM3_Init+0xa4>)
 800a3c8:	f004 fc5a 	bl	800ec80 <HAL_TIM_Encoder_Init>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d001      	beq.n	800a3d6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800a3d2:	f7ff f81f 	bl	8009414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a3de:	463b      	mov	r3, r7
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	4806      	ldr	r0, [pc, #24]	@ (800a3fc <MX_TIM3_Init+0xa4>)
 800a3e4:	f006 f802 	bl	80103ec <HAL_TIMEx_MasterConfigSynchronization>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d001      	beq.n	800a3f2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800a3ee:	f7ff f811 	bl	8009414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800a3f2:	bf00      	nop
 800a3f4:	3730      	adds	r7, #48	@ 0x30
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	20002038 	.word	0x20002038
 800a400:	40000400 	.word	0x40000400

0800a404 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b08c      	sub	sp, #48	@ 0x30
 800a408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a40a:	f107 030c 	add.w	r3, r7, #12
 800a40e:	2224      	movs	r2, #36	@ 0x24
 800a410:	2100      	movs	r1, #0
 800a412:	4618      	mov	r0, r3
 800a414:	f008 fe20 	bl	8013058 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a418:	463b      	mov	r3, r7
 800a41a:	2200      	movs	r2, #0
 800a41c:	601a      	str	r2, [r3, #0]
 800a41e:	605a      	str	r2, [r3, #4]
 800a420:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800a422:	4b21      	ldr	r3, [pc, #132]	@ (800a4a8 <MX_TIM4_Init+0xa4>)
 800a424:	4a21      	ldr	r2, [pc, #132]	@ (800a4ac <MX_TIM4_Init+0xa8>)
 800a426:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800a428:	4b1f      	ldr	r3, [pc, #124]	@ (800a4a8 <MX_TIM4_Init+0xa4>)
 800a42a:	2200      	movs	r2, #0
 800a42c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a42e:	4b1e      	ldr	r3, [pc, #120]	@ (800a4a8 <MX_TIM4_Init+0xa4>)
 800a430:	2200      	movs	r2, #0
 800a432:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800a434:	4b1c      	ldr	r3, [pc, #112]	@ (800a4a8 <MX_TIM4_Init+0xa4>)
 800a436:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a43a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a43c:	4b1a      	ldr	r3, [pc, #104]	@ (800a4a8 <MX_TIM4_Init+0xa4>)
 800a43e:	2200      	movs	r2, #0
 800a440:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a442:	4b19      	ldr	r3, [pc, #100]	@ (800a4a8 <MX_TIM4_Init+0xa4>)
 800a444:	2200      	movs	r2, #0
 800a446:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a448:	2303      	movs	r3, #3
 800a44a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a44c:	2300      	movs	r3, #0
 800a44e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a450:	2301      	movs	r3, #1
 800a452:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a454:	2300      	movs	r3, #0
 800a456:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a458:	2300      	movs	r3, #0
 800a45a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a45c:	2300      	movs	r3, #0
 800a45e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a460:	2301      	movs	r3, #1
 800a462:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a464:	2300      	movs	r3, #0
 800a466:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800a468:	2300      	movs	r3, #0
 800a46a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800a46c:	f107 030c 	add.w	r3, r7, #12
 800a470:	4619      	mov	r1, r3
 800a472:	480d      	ldr	r0, [pc, #52]	@ (800a4a8 <MX_TIM4_Init+0xa4>)
 800a474:	f004 fc04 	bl	800ec80 <HAL_TIM_Encoder_Init>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d001      	beq.n	800a482 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800a47e:	f7fe ffc9 	bl	8009414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a482:	2300      	movs	r3, #0
 800a484:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a486:	2300      	movs	r3, #0
 800a488:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a48a:	463b      	mov	r3, r7
 800a48c:	4619      	mov	r1, r3
 800a48e:	4806      	ldr	r0, [pc, #24]	@ (800a4a8 <MX_TIM4_Init+0xa4>)
 800a490:	f005 ffac 	bl	80103ec <HAL_TIMEx_MasterConfigSynchronization>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d001      	beq.n	800a49e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800a49a:	f7fe ffbb 	bl	8009414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800a49e:	bf00      	nop
 800a4a0:	3730      	adds	r7, #48	@ 0x30
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	20002104 	.word	0x20002104
 800a4ac:	40000800 	.word	0x40000800

0800a4b0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b08c      	sub	sp, #48	@ 0x30
 800a4b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a4b6:	f107 030c 	add.w	r3, r7, #12
 800a4ba:	2224      	movs	r2, #36	@ 0x24
 800a4bc:	2100      	movs	r1, #0
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f008 fdca 	bl	8013058 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a4c4:	463b      	mov	r3, r7
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	601a      	str	r2, [r3, #0]
 800a4ca:	605a      	str	r2, [r3, #4]
 800a4cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800a4ce:	4b21      	ldr	r3, [pc, #132]	@ (800a554 <MX_TIM5_Init+0xa4>)
 800a4d0:	4a21      	ldr	r2, [pc, #132]	@ (800a558 <MX_TIM5_Init+0xa8>)
 800a4d2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800a4d4:	4b1f      	ldr	r3, [pc, #124]	@ (800a554 <MX_TIM5_Init+0xa4>)
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a4da:	4b1e      	ldr	r3, [pc, #120]	@ (800a554 <MX_TIM5_Init+0xa4>)
 800a4dc:	2200      	movs	r2, #0
 800a4de:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800a4e0:	4b1c      	ldr	r3, [pc, #112]	@ (800a554 <MX_TIM5_Init+0xa4>)
 800a4e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a4e6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a4e8:	4b1a      	ldr	r3, [pc, #104]	@ (800a554 <MX_TIM5_Init+0xa4>)
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a4ee:	4b19      	ldr	r3, [pc, #100]	@ (800a554 <MX_TIM5_Init+0xa4>)
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a500:	2300      	movs	r3, #0
 800a502:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a504:	2300      	movs	r3, #0
 800a506:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a508:	2300      	movs	r3, #0
 800a50a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a50c:	2301      	movs	r3, #1
 800a50e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a510:	2300      	movs	r3, #0
 800a512:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800a514:	2300      	movs	r3, #0
 800a516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800a518:	f107 030c 	add.w	r3, r7, #12
 800a51c:	4619      	mov	r1, r3
 800a51e:	480d      	ldr	r0, [pc, #52]	@ (800a554 <MX_TIM5_Init+0xa4>)
 800a520:	f004 fbae 	bl	800ec80 <HAL_TIM_Encoder_Init>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d001      	beq.n	800a52e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800a52a:	f7fe ff73 	bl	8009414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a52e:	2300      	movs	r3, #0
 800a530:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a532:	2300      	movs	r3, #0
 800a534:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800a536:	463b      	mov	r3, r7
 800a538:	4619      	mov	r1, r3
 800a53a:	4806      	ldr	r0, [pc, #24]	@ (800a554 <MX_TIM5_Init+0xa4>)
 800a53c:	f005 ff56 	bl	80103ec <HAL_TIMEx_MasterConfigSynchronization>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d001      	beq.n	800a54a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800a546:	f7fe ff65 	bl	8009414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800a54a:	bf00      	nop
 800a54c:	3730      	adds	r7, #48	@ 0x30
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	200021d0 	.word	0x200021d0
 800a558:	40000c00 	.word	0x40000c00

0800a55c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b09c      	sub	sp, #112	@ 0x70
 800a560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a562:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800a566:	2200      	movs	r2, #0
 800a568:	601a      	str	r2, [r3, #0]
 800a56a:	605a      	str	r2, [r3, #4]
 800a56c:	609a      	str	r2, [r3, #8]
 800a56e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a570:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a574:	2200      	movs	r2, #0
 800a576:	601a      	str	r2, [r3, #0]
 800a578:	605a      	str	r2, [r3, #4]
 800a57a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a57c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a580:	2200      	movs	r2, #0
 800a582:	601a      	str	r2, [r3, #0]
 800a584:	605a      	str	r2, [r3, #4]
 800a586:	609a      	str	r2, [r3, #8]
 800a588:	60da      	str	r2, [r3, #12]
 800a58a:	611a      	str	r2, [r3, #16]
 800a58c:	615a      	str	r2, [r3, #20]
 800a58e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a590:	1d3b      	adds	r3, r7, #4
 800a592:	2234      	movs	r2, #52	@ 0x34
 800a594:	2100      	movs	r1, #0
 800a596:	4618      	mov	r0, r3
 800a598:	f008 fd5e 	bl	8013058 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a59c:	4b4c      	ldr	r3, [pc, #304]	@ (800a6d0 <MX_TIM8_Init+0x174>)
 800a59e:	4a4d      	ldr	r2, [pc, #308]	@ (800a6d4 <MX_TIM8_Init+0x178>)
 800a5a0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800a5a2:	4b4b      	ldr	r3, [pc, #300]	@ (800a6d0 <MX_TIM8_Init+0x174>)
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a5a8:	4b49      	ldr	r3, [pc, #292]	@ (800a6d0 <MX_TIM8_Init+0x174>)
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800a5ae:	4b48      	ldr	r3, [pc, #288]	@ (800a6d0 <MX_TIM8_Init+0x174>)
 800a5b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a5b4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800a5b6:	4b46      	ldr	r3, [pc, #280]	@ (800a6d0 <MX_TIM8_Init+0x174>)
 800a5b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a5bc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a5be:	4b44      	ldr	r3, [pc, #272]	@ (800a6d0 <MX_TIM8_Init+0x174>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a5c4:	4b42      	ldr	r3, [pc, #264]	@ (800a6d0 <MX_TIM8_Init+0x174>)
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800a5ca:	4841      	ldr	r0, [pc, #260]	@ (800a6d0 <MX_TIM8_Init+0x174>)
 800a5cc:	f003 ffa0 	bl	800e510 <HAL_TIM_Base_Init>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d001      	beq.n	800a5da <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 800a5d6:	f7fe ff1d 	bl	8009414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a5da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a5de:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800a5e0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	483a      	ldr	r0, [pc, #232]	@ (800a6d0 <MX_TIM8_Init+0x174>)
 800a5e8:	f004 ff1a 	bl	800f420 <HAL_TIM_ConfigClockSource>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d001      	beq.n	800a5f6 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 800a5f2:	f7fe ff0f 	bl	8009414 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800a5f6:	4836      	ldr	r0, [pc, #216]	@ (800a6d0 <MX_TIM8_Init+0x174>)
 800a5f8:	f004 f8d6 	bl	800e7a8 <HAL_TIM_PWM_Init>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d001      	beq.n	800a606 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 800a602:	f7fe ff07 	bl	8009414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a606:	2300      	movs	r3, #0
 800a608:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a60a:	2300      	movs	r3, #0
 800a60c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a60e:	2300      	movs	r3, #0
 800a610:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a612:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a616:	4619      	mov	r1, r3
 800a618:	482d      	ldr	r0, [pc, #180]	@ (800a6d0 <MX_TIM8_Init+0x174>)
 800a61a:	f005 fee7 	bl	80103ec <HAL_TIMEx_MasterConfigSynchronization>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d001      	beq.n	800a628 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 800a624:	f7fe fef6 	bl	8009414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a628:	2360      	movs	r3, #96	@ 0x60
 800a62a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800a62c:	2300      	movs	r3, #0
 800a62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a630:	2300      	movs	r3, #0
 800a632:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a634:	2300      	movs	r3, #0
 800a636:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a638:	2300      	movs	r3, #0
 800a63a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a63c:	2300      	movs	r3, #0
 800a63e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a640:	2300      	movs	r3, #0
 800a642:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a644:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a648:	2200      	movs	r2, #0
 800a64a:	4619      	mov	r1, r3
 800a64c:	4820      	ldr	r0, [pc, #128]	@ (800a6d0 <MX_TIM8_Init+0x174>)
 800a64e:	f004 fdd3 	bl	800f1f8 <HAL_TIM_PWM_ConfigChannel>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d001      	beq.n	800a65c <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 800a658:	f7fe fedc 	bl	8009414 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a65c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a660:	2204      	movs	r2, #4
 800a662:	4619      	mov	r1, r3
 800a664:	481a      	ldr	r0, [pc, #104]	@ (800a6d0 <MX_TIM8_Init+0x174>)
 800a666:	f004 fdc7 	bl	800f1f8 <HAL_TIM_PWM_ConfigChannel>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d001      	beq.n	800a674 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 800a670:	f7fe fed0 	bl	8009414 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a674:	2300      	movs	r3, #0
 800a676:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a678:	2300      	movs	r3, #0
 800a67a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a67c:	2300      	movs	r3, #0
 800a67e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a680:	2300      	movs	r3, #0
 800a682:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a684:	2300      	movs	r3, #0
 800a686:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a688:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a68c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800a68e:	2300      	movs	r3, #0
 800a690:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800a692:	2300      	movs	r3, #0
 800a694:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a696:	2300      	movs	r3, #0
 800a698:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a69a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a69e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800a6ac:	1d3b      	adds	r3, r7, #4
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	4807      	ldr	r0, [pc, #28]	@ (800a6d0 <MX_TIM8_Init+0x174>)
 800a6b2:	f005 ff31 	bl	8010518 <HAL_TIMEx_ConfigBreakDeadTime>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d001      	beq.n	800a6c0 <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 800a6bc:	f7fe feaa 	bl	8009414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800a6c0:	4803      	ldr	r0, [pc, #12]	@ (800a6d0 <MX_TIM8_Init+0x174>)
 800a6c2:	f000 f969 	bl	800a998 <HAL_TIM_MspPostInit>

}
 800a6c6:	bf00      	nop
 800a6c8:	3770      	adds	r7, #112	@ 0x70
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	2000229c 	.word	0x2000229c
 800a6d4:	40013400 	.word	0x40013400

0800a6d8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800a6dc:	4b14      	ldr	r3, [pc, #80]	@ (800a730 <MX_TIM16_Init+0x58>)
 800a6de:	4a15      	ldr	r2, [pc, #84]	@ (800a734 <MX_TIM16_Init+0x5c>)
 800a6e0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800a6e2:	4b13      	ldr	r3, [pc, #76]	@ (800a730 <MX_TIM16_Init+0x58>)
 800a6e4:	22a9      	movs	r2, #169	@ 0xa9
 800a6e6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a6e8:	4b11      	ldr	r3, [pc, #68]	@ (800a730 <MX_TIM16_Init+0x58>)
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800a6ee:	4b10      	ldr	r3, [pc, #64]	@ (800a730 <MX_TIM16_Init+0x58>)
 800a6f0:	f240 4279 	movw	r2, #1145	@ 0x479
 800a6f4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a6f6:	4b0e      	ldr	r3, [pc, #56]	@ (800a730 <MX_TIM16_Init+0x58>)
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800a6fc:	4b0c      	ldr	r3, [pc, #48]	@ (800a730 <MX_TIM16_Init+0x58>)
 800a6fe:	2200      	movs	r2, #0
 800a700:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a702:	4b0b      	ldr	r3, [pc, #44]	@ (800a730 <MX_TIM16_Init+0x58>)
 800a704:	2200      	movs	r2, #0
 800a706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800a708:	4809      	ldr	r0, [pc, #36]	@ (800a730 <MX_TIM16_Init+0x58>)
 800a70a:	f003 ff01 	bl	800e510 <HAL_TIM_Base_Init>
 800a70e:	4603      	mov	r3, r0
 800a710:	2b00      	cmp	r3, #0
 800a712:	d001      	beq.n	800a718 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800a714:	f7fe fe7e 	bl	8009414 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 800a718:	2108      	movs	r1, #8
 800a71a:	4805      	ldr	r0, [pc, #20]	@ (800a730 <MX_TIM16_Init+0x58>)
 800a71c:	f004 f9ba 	bl	800ea94 <HAL_TIM_OnePulse_Init>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d001      	beq.n	800a72a <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800a726:	f7fe fe75 	bl	8009414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800a72a:	bf00      	nop
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	20002368 	.word	0x20002368
 800a734:	40014400 	.word	0x40014400

0800a738 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a0d      	ldr	r2, [pc, #52]	@ (800a77c <HAL_TIM_PWM_MspInit+0x44>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d113      	bne.n	800a772 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a74a:	4b0d      	ldr	r3, [pc, #52]	@ (800a780 <HAL_TIM_PWM_MspInit+0x48>)
 800a74c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a74e:	4a0c      	ldr	r2, [pc, #48]	@ (800a780 <HAL_TIM_PWM_MspInit+0x48>)
 800a750:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a754:	6613      	str	r3, [r2, #96]	@ 0x60
 800a756:	4b0a      	ldr	r3, [pc, #40]	@ (800a780 <HAL_TIM_PWM_MspInit+0x48>)
 800a758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a75a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a75e:	60fb      	str	r3, [r7, #12]
 800a760:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800a762:	2200      	movs	r2, #0
 800a764:	2100      	movs	r1, #0
 800a766:	2019      	movs	r0, #25
 800a768:	f002 f957 	bl	800ca1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800a76c:	2019      	movs	r0, #25
 800a76e:	f002 f96e 	bl	800ca4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800a772:	bf00      	nop
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	40012c00 	.word	0x40012c00
 800a780:	40021000 	.word	0x40021000

0800a784 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b086      	sub	sp, #24
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a794:	d114      	bne.n	800a7c0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a796:	4b22      	ldr	r3, [pc, #136]	@ (800a820 <HAL_TIM_Base_MspInit+0x9c>)
 800a798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a79a:	4a21      	ldr	r2, [pc, #132]	@ (800a820 <HAL_TIM_Base_MspInit+0x9c>)
 800a79c:	f043 0301 	orr.w	r3, r3, #1
 800a7a0:	6593      	str	r3, [r2, #88]	@ 0x58
 800a7a2:	4b1f      	ldr	r3, [pc, #124]	@ (800a820 <HAL_TIM_Base_MspInit+0x9c>)
 800a7a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7a6:	f003 0301 	and.w	r3, r3, #1
 800a7aa:	617b      	str	r3, [r7, #20]
 800a7ac:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	201c      	movs	r0, #28
 800a7b4:	f002 f931 	bl	800ca1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a7b8:	201c      	movs	r0, #28
 800a7ba:	f002 f948 	bl	800ca4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800a7be:	e02a      	b.n	800a816 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a17      	ldr	r2, [pc, #92]	@ (800a824 <HAL_TIM_Base_MspInit+0xa0>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d10c      	bne.n	800a7e4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a7ca:	4b15      	ldr	r3, [pc, #84]	@ (800a820 <HAL_TIM_Base_MspInit+0x9c>)
 800a7cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7ce:	4a14      	ldr	r2, [pc, #80]	@ (800a820 <HAL_TIM_Base_MspInit+0x9c>)
 800a7d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a7d4:	6613      	str	r3, [r2, #96]	@ 0x60
 800a7d6:	4b12      	ldr	r3, [pc, #72]	@ (800a820 <HAL_TIM_Base_MspInit+0x9c>)
 800a7d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a7de:	613b      	str	r3, [r7, #16]
 800a7e0:	693b      	ldr	r3, [r7, #16]
}
 800a7e2:	e018      	b.n	800a816 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a0f      	ldr	r2, [pc, #60]	@ (800a828 <HAL_TIM_Base_MspInit+0xa4>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d113      	bne.n	800a816 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800a7ee:	4b0c      	ldr	r3, [pc, #48]	@ (800a820 <HAL_TIM_Base_MspInit+0x9c>)
 800a7f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7f2:	4a0b      	ldr	r2, [pc, #44]	@ (800a820 <HAL_TIM_Base_MspInit+0x9c>)
 800a7f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a7f8:	6613      	str	r3, [r2, #96]	@ 0x60
 800a7fa:	4b09      	ldr	r3, [pc, #36]	@ (800a820 <HAL_TIM_Base_MspInit+0x9c>)
 800a7fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a802:	60fb      	str	r3, [r7, #12]
 800a804:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800a806:	2200      	movs	r2, #0
 800a808:	2100      	movs	r1, #0
 800a80a:	2019      	movs	r0, #25
 800a80c:	f002 f905 	bl	800ca1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800a810:	2019      	movs	r0, #25
 800a812:	f002 f91c 	bl	800ca4e <HAL_NVIC_EnableIRQ>
}
 800a816:	bf00      	nop
 800a818:	3718      	adds	r7, #24
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	40021000 	.word	0x40021000
 800a824:	40013400 	.word	0x40013400
 800a828:	40014400 	.word	0x40014400

0800a82c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b08e      	sub	sp, #56	@ 0x38
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a838:	2200      	movs	r2, #0
 800a83a:	601a      	str	r2, [r3, #0]
 800a83c:	605a      	str	r2, [r3, #4]
 800a83e:	609a      	str	r2, [r3, #8]
 800a840:	60da      	str	r2, [r3, #12]
 800a842:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a4f      	ldr	r2, [pc, #316]	@ (800a988 <HAL_TIM_Encoder_MspInit+0x15c>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d131      	bne.n	800a8b2 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a84e:	4b4f      	ldr	r3, [pc, #316]	@ (800a98c <HAL_TIM_Encoder_MspInit+0x160>)
 800a850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a852:	4a4e      	ldr	r2, [pc, #312]	@ (800a98c <HAL_TIM_Encoder_MspInit+0x160>)
 800a854:	f043 0302 	orr.w	r3, r3, #2
 800a858:	6593      	str	r3, [r2, #88]	@ 0x58
 800a85a:	4b4c      	ldr	r3, [pc, #304]	@ (800a98c <HAL_TIM_Encoder_MspInit+0x160>)
 800a85c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a85e:	f003 0302 	and.w	r3, r3, #2
 800a862:	623b      	str	r3, [r7, #32]
 800a864:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a866:	4b49      	ldr	r3, [pc, #292]	@ (800a98c <HAL_TIM_Encoder_MspInit+0x160>)
 800a868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a86a:	4a48      	ldr	r2, [pc, #288]	@ (800a98c <HAL_TIM_Encoder_MspInit+0x160>)
 800a86c:	f043 0301 	orr.w	r3, r3, #1
 800a870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a872:	4b46      	ldr	r3, [pc, #280]	@ (800a98c <HAL_TIM_Encoder_MspInit+0x160>)
 800a874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a876:	f003 0301 	and.w	r3, r3, #1
 800a87a:	61fb      	str	r3, [r7, #28]
 800a87c:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a87e:	23c0      	movs	r3, #192	@ 0xc0
 800a880:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a882:	2302      	movs	r3, #2
 800a884:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a886:	2300      	movs	r3, #0
 800a888:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a88a:	2300      	movs	r3, #0
 800a88c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a88e:	2302      	movs	r3, #2
 800a890:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a896:	4619      	mov	r1, r3
 800a898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a89c:	f002 fc24 	bl	800d0e8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	201d      	movs	r0, #29
 800a8a6:	f002 f8b8 	bl	800ca1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a8aa:	201d      	movs	r0, #29
 800a8ac:	f002 f8cf 	bl	800ca4e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800a8b0:	e065      	b.n	800a97e <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a36      	ldr	r2, [pc, #216]	@ (800a990 <HAL_TIM_Encoder_MspInit+0x164>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d132      	bne.n	800a922 <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a8bc:	4b33      	ldr	r3, [pc, #204]	@ (800a98c <HAL_TIM_Encoder_MspInit+0x160>)
 800a8be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8c0:	4a32      	ldr	r2, [pc, #200]	@ (800a98c <HAL_TIM_Encoder_MspInit+0x160>)
 800a8c2:	f043 0304 	orr.w	r3, r3, #4
 800a8c6:	6593      	str	r3, [r2, #88]	@ 0x58
 800a8c8:	4b30      	ldr	r3, [pc, #192]	@ (800a98c <HAL_TIM_Encoder_MspInit+0x160>)
 800a8ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8cc:	f003 0304 	and.w	r3, r3, #4
 800a8d0:	61bb      	str	r3, [r7, #24]
 800a8d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a8d4:	4b2d      	ldr	r3, [pc, #180]	@ (800a98c <HAL_TIM_Encoder_MspInit+0x160>)
 800a8d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8d8:	4a2c      	ldr	r2, [pc, #176]	@ (800a98c <HAL_TIM_Encoder_MspInit+0x160>)
 800a8da:	f043 0301 	orr.w	r3, r3, #1
 800a8de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a8e0:	4b2a      	ldr	r3, [pc, #168]	@ (800a98c <HAL_TIM_Encoder_MspInit+0x160>)
 800a8e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8e4:	f003 0301 	and.w	r3, r3, #1
 800a8e8:	617b      	str	r3, [r7, #20]
 800a8ea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a8ec:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a8f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8f2:	2302      	movs	r3, #2
 800a8f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800a8fe:	230a      	movs	r3, #10
 800a900:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a906:	4619      	mov	r1, r3
 800a908:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a90c:	f002 fbec 	bl	800d0e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800a910:	2200      	movs	r2, #0
 800a912:	2100      	movs	r1, #0
 800a914:	201e      	movs	r0, #30
 800a916:	f002 f880 	bl	800ca1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800a91a:	201e      	movs	r0, #30
 800a91c:	f002 f897 	bl	800ca4e <HAL_NVIC_EnableIRQ>
}
 800a920:	e02d      	b.n	800a97e <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a1b      	ldr	r2, [pc, #108]	@ (800a994 <HAL_TIM_Encoder_MspInit+0x168>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d128      	bne.n	800a97e <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800a92c:	4b17      	ldr	r3, [pc, #92]	@ (800a98c <HAL_TIM_Encoder_MspInit+0x160>)
 800a92e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a930:	4a16      	ldr	r2, [pc, #88]	@ (800a98c <HAL_TIM_Encoder_MspInit+0x160>)
 800a932:	f043 0308 	orr.w	r3, r3, #8
 800a936:	6593      	str	r3, [r2, #88]	@ 0x58
 800a938:	4b14      	ldr	r3, [pc, #80]	@ (800a98c <HAL_TIM_Encoder_MspInit+0x160>)
 800a93a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a93c:	f003 0308 	and.w	r3, r3, #8
 800a940:	613b      	str	r3, [r7, #16]
 800a942:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a944:	4b11      	ldr	r3, [pc, #68]	@ (800a98c <HAL_TIM_Encoder_MspInit+0x160>)
 800a946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a948:	4a10      	ldr	r2, [pc, #64]	@ (800a98c <HAL_TIM_Encoder_MspInit+0x160>)
 800a94a:	f043 0301 	orr.w	r3, r3, #1
 800a94e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a950:	4b0e      	ldr	r3, [pc, #56]	@ (800a98c <HAL_TIM_Encoder_MspInit+0x160>)
 800a952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a954:	f003 0301 	and.w	r3, r3, #1
 800a958:	60fb      	str	r3, [r7, #12]
 800a95a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800a95c:	2303      	movs	r3, #3
 800a95e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a960:	2302      	movs	r3, #2
 800a962:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a964:	2300      	movs	r3, #0
 800a966:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a968:	2300      	movs	r3, #0
 800a96a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800a96c:	2302      	movs	r3, #2
 800a96e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a970:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a974:	4619      	mov	r1, r3
 800a976:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a97a:	f002 fbb5 	bl	800d0e8 <HAL_GPIO_Init>
}
 800a97e:	bf00      	nop
 800a980:	3738      	adds	r7, #56	@ 0x38
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	40000400 	.word	0x40000400
 800a98c:	40021000 	.word	0x40021000
 800a990:	40000800 	.word	0x40000800
 800a994:	40000c00 	.word	0x40000c00

0800a998 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b08a      	sub	sp, #40	@ 0x28
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9a0:	f107 0314 	add.w	r3, r7, #20
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	601a      	str	r2, [r3, #0]
 800a9a8:	605a      	str	r2, [r3, #4]
 800a9aa:	609a      	str	r2, [r3, #8]
 800a9ac:	60da      	str	r2, [r3, #12]
 800a9ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a22      	ldr	r2, [pc, #136]	@ (800aa40 <HAL_TIM_MspPostInit+0xa8>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d11c      	bne.n	800a9f4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a9ba:	4b22      	ldr	r3, [pc, #136]	@ (800aa44 <HAL_TIM_MspPostInit+0xac>)
 800a9bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9be:	4a21      	ldr	r2, [pc, #132]	@ (800aa44 <HAL_TIM_MspPostInit+0xac>)
 800a9c0:	f043 0304 	orr.w	r3, r3, #4
 800a9c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a9c6:	4b1f      	ldr	r3, [pc, #124]	@ (800aa44 <HAL_TIM_MspPostInit+0xac>)
 800a9c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9ca:	f003 0304 	and.w	r3, r3, #4
 800a9ce:	613b      	str	r3, [r7, #16]
 800a9d0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a9d2:	2308      	movs	r3, #8
 800a9d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9d6:	2302      	movs	r3, #2
 800a9d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800a9e2:	2302      	movs	r3, #2
 800a9e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a9e6:	f107 0314 	add.w	r3, r7, #20
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	4816      	ldr	r0, [pc, #88]	@ (800aa48 <HAL_TIM_MspPostInit+0xb0>)
 800a9ee:	f002 fb7b 	bl	800d0e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800a9f2:	e020      	b.n	800aa36 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a14      	ldr	r2, [pc, #80]	@ (800aa4c <HAL_TIM_MspPostInit+0xb4>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d11b      	bne.n	800aa36 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a9fe:	4b11      	ldr	r3, [pc, #68]	@ (800aa44 <HAL_TIM_MspPostInit+0xac>)
 800aa00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa02:	4a10      	ldr	r2, [pc, #64]	@ (800aa44 <HAL_TIM_MspPostInit+0xac>)
 800aa04:	f043 0304 	orr.w	r3, r3, #4
 800aa08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800aa0a:	4b0e      	ldr	r3, [pc, #56]	@ (800aa44 <HAL_TIM_MspPostInit+0xac>)
 800aa0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa0e:	f003 0304 	and.w	r3, r3, #4
 800aa12:	60fb      	str	r3, [r7, #12]
 800aa14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800aa16:	23c0      	movs	r3, #192	@ 0xc0
 800aa18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa1a:	2302      	movs	r3, #2
 800aa1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa22:	2300      	movs	r3, #0
 800aa24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800aa26:	2304      	movs	r3, #4
 800aa28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aa2a:	f107 0314 	add.w	r3, r7, #20
 800aa2e:	4619      	mov	r1, r3
 800aa30:	4805      	ldr	r0, [pc, #20]	@ (800aa48 <HAL_TIM_MspPostInit+0xb0>)
 800aa32:	f002 fb59 	bl	800d0e8 <HAL_GPIO_Init>
}
 800aa36:	bf00      	nop
 800aa38:	3728      	adds	r7, #40	@ 0x28
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	40012c00 	.word	0x40012c00
 800aa44:	40021000 	.word	0x40021000
 800aa48:	48000800 	.word	0x48000800
 800aa4c:	40013400 	.word	0x40013400

0800aa50 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800aa54:	4b20      	ldr	r3, [pc, #128]	@ (800aad8 <MX_LPUART1_UART_Init+0x88>)
 800aa56:	4a21      	ldr	r2, [pc, #132]	@ (800aadc <MX_LPUART1_UART_Init+0x8c>)
 800aa58:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 800aa5a:	4b1f      	ldr	r3, [pc, #124]	@ (800aad8 <MX_LPUART1_UART_Init+0x88>)
 800aa5c:	4a20      	ldr	r2, [pc, #128]	@ (800aae0 <MX_LPUART1_UART_Init+0x90>)
 800aa5e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800aa60:	4b1d      	ldr	r3, [pc, #116]	@ (800aad8 <MX_LPUART1_UART_Init+0x88>)
 800aa62:	2200      	movs	r2, #0
 800aa64:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800aa66:	4b1c      	ldr	r3, [pc, #112]	@ (800aad8 <MX_LPUART1_UART_Init+0x88>)
 800aa68:	2200      	movs	r2, #0
 800aa6a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800aa6c:	4b1a      	ldr	r3, [pc, #104]	@ (800aad8 <MX_LPUART1_UART_Init+0x88>)
 800aa6e:	2200      	movs	r2, #0
 800aa70:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800aa72:	4b19      	ldr	r3, [pc, #100]	@ (800aad8 <MX_LPUART1_UART_Init+0x88>)
 800aa74:	220c      	movs	r2, #12
 800aa76:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aa78:	4b17      	ldr	r3, [pc, #92]	@ (800aad8 <MX_LPUART1_UART_Init+0x88>)
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800aa7e:	4b16      	ldr	r3, [pc, #88]	@ (800aad8 <MX_LPUART1_UART_Init+0x88>)
 800aa80:	2200      	movs	r2, #0
 800aa82:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800aa84:	4b14      	ldr	r3, [pc, #80]	@ (800aad8 <MX_LPUART1_UART_Init+0x88>)
 800aa86:	2200      	movs	r2, #0
 800aa88:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800aa8a:	4b13      	ldr	r3, [pc, #76]	@ (800aad8 <MX_LPUART1_UART_Init+0x88>)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800aa90:	4811      	ldr	r0, [pc, #68]	@ (800aad8 <MX_LPUART1_UART_Init+0x88>)
 800aa92:	f005 fe25 	bl	80106e0 <HAL_UART_Init>
 800aa96:	4603      	mov	r3, r0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d001      	beq.n	800aaa0 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800aa9c:	f7fe fcba 	bl	8009414 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	480d      	ldr	r0, [pc, #52]	@ (800aad8 <MX_LPUART1_UART_Init+0x88>)
 800aaa4:	f007 fc61 	bl	801236a <HAL_UARTEx_SetTxFifoThreshold>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d001      	beq.n	800aab2 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800aaae:	f7fe fcb1 	bl	8009414 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800aab2:	2100      	movs	r1, #0
 800aab4:	4808      	ldr	r0, [pc, #32]	@ (800aad8 <MX_LPUART1_UART_Init+0x88>)
 800aab6:	f007 fc96 	bl	80123e6 <HAL_UARTEx_SetRxFifoThreshold>
 800aaba:	4603      	mov	r3, r0
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d001      	beq.n	800aac4 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800aac0:	f7fe fca8 	bl	8009414 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800aac4:	4804      	ldr	r0, [pc, #16]	@ (800aad8 <MX_LPUART1_UART_Init+0x88>)
 800aac6:	f007 fc17 	bl	80122f8 <HAL_UARTEx_DisableFifoMode>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d001      	beq.n	800aad4 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800aad0:	f7fe fca0 	bl	8009414 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800aad4:	bf00      	nop
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	20002434 	.word	0x20002434
 800aadc:	40008000 	.word	0x40008000
 800aae0:	001e8480 	.word	0x001e8480

0800aae4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800aae8:	4b23      	ldr	r3, [pc, #140]	@ (800ab78 <MX_USART2_UART_Init+0x94>)
 800aaea:	4a24      	ldr	r2, [pc, #144]	@ (800ab7c <MX_USART2_UART_Init+0x98>)
 800aaec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800aaee:	4b22      	ldr	r3, [pc, #136]	@ (800ab78 <MX_USART2_UART_Init+0x94>)
 800aaf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800aaf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800aaf6:	4b20      	ldr	r3, [pc, #128]	@ (800ab78 <MX_USART2_UART_Init+0x94>)
 800aaf8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800aafc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800aafe:	4b1e      	ldr	r3, [pc, #120]	@ (800ab78 <MX_USART2_UART_Init+0x94>)
 800ab00:	2200      	movs	r2, #0
 800ab02:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800ab04:	4b1c      	ldr	r3, [pc, #112]	@ (800ab78 <MX_USART2_UART_Init+0x94>)
 800ab06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ab0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800ab0c:	4b1a      	ldr	r3, [pc, #104]	@ (800ab78 <MX_USART2_UART_Init+0x94>)
 800ab0e:	220c      	movs	r2, #12
 800ab10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ab12:	4b19      	ldr	r3, [pc, #100]	@ (800ab78 <MX_USART2_UART_Init+0x94>)
 800ab14:	2200      	movs	r2, #0
 800ab16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800ab18:	4b17      	ldr	r3, [pc, #92]	@ (800ab78 <MX_USART2_UART_Init+0x94>)
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ab1e:	4b16      	ldr	r3, [pc, #88]	@ (800ab78 <MX_USART2_UART_Init+0x94>)
 800ab20:	2200      	movs	r2, #0
 800ab22:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800ab24:	4b14      	ldr	r3, [pc, #80]	@ (800ab78 <MX_USART2_UART_Init+0x94>)
 800ab26:	2200      	movs	r2, #0
 800ab28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ab2a:	4b13      	ldr	r3, [pc, #76]	@ (800ab78 <MX_USART2_UART_Init+0x94>)
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800ab30:	4811      	ldr	r0, [pc, #68]	@ (800ab78 <MX_USART2_UART_Init+0x94>)
 800ab32:	f005 fdd5 	bl	80106e0 <HAL_UART_Init>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d001      	beq.n	800ab40 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800ab3c:	f7fe fc6a 	bl	8009414 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ab40:	2100      	movs	r1, #0
 800ab42:	480d      	ldr	r0, [pc, #52]	@ (800ab78 <MX_USART2_UART_Init+0x94>)
 800ab44:	f007 fc11 	bl	801236a <HAL_UARTEx_SetTxFifoThreshold>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d001      	beq.n	800ab52 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800ab4e:	f7fe fc61 	bl	8009414 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ab52:	2100      	movs	r1, #0
 800ab54:	4808      	ldr	r0, [pc, #32]	@ (800ab78 <MX_USART2_UART_Init+0x94>)
 800ab56:	f007 fc46 	bl	80123e6 <HAL_UARTEx_SetRxFifoThreshold>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d001      	beq.n	800ab64 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 800ab60:	f7fe fc58 	bl	8009414 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800ab64:	4804      	ldr	r0, [pc, #16]	@ (800ab78 <MX_USART2_UART_Init+0x94>)
 800ab66:	f007 fbc7 	bl	80122f8 <HAL_UARTEx_DisableFifoMode>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d001      	beq.n	800ab74 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800ab70:	f7fe fc50 	bl	8009414 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800ab74:	bf00      	nop
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	20002500 	.word	0x20002500
 800ab7c:	40004400 	.word	0x40004400

0800ab80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b0a0      	sub	sp, #128	@ 0x80
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab88:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	601a      	str	r2, [r3, #0]
 800ab90:	605a      	str	r2, [r3, #4]
 800ab92:	609a      	str	r2, [r3, #8]
 800ab94:	60da      	str	r2, [r3, #12]
 800ab96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ab98:	f107 0318 	add.w	r3, r7, #24
 800ab9c:	2254      	movs	r2, #84	@ 0x54
 800ab9e:	2100      	movs	r1, #0
 800aba0:	4618      	mov	r0, r3
 800aba2:	f008 fa59 	bl	8013058 <memset>
  if(uartHandle->Instance==LPUART1)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a99      	ldr	r2, [pc, #612]	@ (800ae10 <HAL_UART_MspInit+0x290>)
 800abac:	4293      	cmp	r3, r2
 800abae:	f040 8093 	bne.w	800acd8 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800abb2:	2320      	movs	r3, #32
 800abb4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800abb6:	2300      	movs	r3, #0
 800abb8:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800abba:	f107 0318 	add.w	r3, r7, #24
 800abbe:	4618      	mov	r0, r3
 800abc0:	f003 fa58 	bl	800e074 <HAL_RCCEx_PeriphCLKConfig>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d001      	beq.n	800abce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800abca:	f7fe fc23 	bl	8009414 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800abce:	4b91      	ldr	r3, [pc, #580]	@ (800ae14 <HAL_UART_MspInit+0x294>)
 800abd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abd2:	4a90      	ldr	r2, [pc, #576]	@ (800ae14 <HAL_UART_MspInit+0x294>)
 800abd4:	f043 0301 	orr.w	r3, r3, #1
 800abd8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800abda:	4b8e      	ldr	r3, [pc, #568]	@ (800ae14 <HAL_UART_MspInit+0x294>)
 800abdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abde:	f003 0301 	and.w	r3, r3, #1
 800abe2:	617b      	str	r3, [r7, #20]
 800abe4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800abe6:	4b8b      	ldr	r3, [pc, #556]	@ (800ae14 <HAL_UART_MspInit+0x294>)
 800abe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abea:	4a8a      	ldr	r2, [pc, #552]	@ (800ae14 <HAL_UART_MspInit+0x294>)
 800abec:	f043 0302 	orr.w	r3, r3, #2
 800abf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800abf2:	4b88      	ldr	r3, [pc, #544]	@ (800ae14 <HAL_UART_MspInit+0x294>)
 800abf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abf6:	f003 0302 	and.w	r3, r3, #2
 800abfa:	613b      	str	r3, [r7, #16]
 800abfc:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800abfe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800ac02:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac04:	2302      	movs	r3, #2
 800ac06:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800ac10:	2308      	movs	r3, #8
 800ac12:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ac14:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800ac18:	4619      	mov	r1, r3
 800ac1a:	487f      	ldr	r0, [pc, #508]	@ (800ae18 <HAL_UART_MspInit+0x298>)
 800ac1c:	f002 fa64 	bl	800d0e8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 800ac20:	4b7e      	ldr	r3, [pc, #504]	@ (800ae1c <HAL_UART_MspInit+0x29c>)
 800ac22:	4a7f      	ldr	r2, [pc, #508]	@ (800ae20 <HAL_UART_MspInit+0x2a0>)
 800ac24:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800ac26:	4b7d      	ldr	r3, [pc, #500]	@ (800ae1c <HAL_UART_MspInit+0x29c>)
 800ac28:	2222      	movs	r2, #34	@ 0x22
 800ac2a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ac2c:	4b7b      	ldr	r3, [pc, #492]	@ (800ae1c <HAL_UART_MspInit+0x29c>)
 800ac2e:	2200      	movs	r2, #0
 800ac30:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ac32:	4b7a      	ldr	r3, [pc, #488]	@ (800ae1c <HAL_UART_MspInit+0x29c>)
 800ac34:	2200      	movs	r2, #0
 800ac36:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ac38:	4b78      	ldr	r3, [pc, #480]	@ (800ae1c <HAL_UART_MspInit+0x29c>)
 800ac3a:	2280      	movs	r2, #128	@ 0x80
 800ac3c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ac3e:	4b77      	ldr	r3, [pc, #476]	@ (800ae1c <HAL_UART_MspInit+0x29c>)
 800ac40:	2200      	movs	r2, #0
 800ac42:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ac44:	4b75      	ldr	r3, [pc, #468]	@ (800ae1c <HAL_UART_MspInit+0x29c>)
 800ac46:	2200      	movs	r2, #0
 800ac48:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 800ac4a:	4b74      	ldr	r3, [pc, #464]	@ (800ae1c <HAL_UART_MspInit+0x29c>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ac50:	4b72      	ldr	r3, [pc, #456]	@ (800ae1c <HAL_UART_MspInit+0x29c>)
 800ac52:	2200      	movs	r2, #0
 800ac54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800ac56:	4871      	ldr	r0, [pc, #452]	@ (800ae1c <HAL_UART_MspInit+0x29c>)
 800ac58:	f001 ff14 	bl	800ca84 <HAL_DMA_Init>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d001      	beq.n	800ac66 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800ac62:	f7fe fbd7 	bl	8009414 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4a6c      	ldr	r2, [pc, #432]	@ (800ae1c <HAL_UART_MspInit+0x29c>)
 800ac6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800ac6e:	4a6b      	ldr	r2, [pc, #428]	@ (800ae1c <HAL_UART_MspInit+0x29c>)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 800ac74:	4b6b      	ldr	r3, [pc, #428]	@ (800ae24 <HAL_UART_MspInit+0x2a4>)
 800ac76:	4a6c      	ldr	r2, [pc, #432]	@ (800ae28 <HAL_UART_MspInit+0x2a8>)
 800ac78:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800ac7a:	4b6a      	ldr	r3, [pc, #424]	@ (800ae24 <HAL_UART_MspInit+0x2a4>)
 800ac7c:	2223      	movs	r2, #35	@ 0x23
 800ac7e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ac80:	4b68      	ldr	r3, [pc, #416]	@ (800ae24 <HAL_UART_MspInit+0x2a4>)
 800ac82:	2210      	movs	r2, #16
 800ac84:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ac86:	4b67      	ldr	r3, [pc, #412]	@ (800ae24 <HAL_UART_MspInit+0x2a4>)
 800ac88:	2200      	movs	r2, #0
 800ac8a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ac8c:	4b65      	ldr	r3, [pc, #404]	@ (800ae24 <HAL_UART_MspInit+0x2a4>)
 800ac8e:	2280      	movs	r2, #128	@ 0x80
 800ac90:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ac92:	4b64      	ldr	r3, [pc, #400]	@ (800ae24 <HAL_UART_MspInit+0x2a4>)
 800ac94:	2200      	movs	r2, #0
 800ac96:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ac98:	4b62      	ldr	r3, [pc, #392]	@ (800ae24 <HAL_UART_MspInit+0x2a4>)
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800ac9e:	4b61      	ldr	r3, [pc, #388]	@ (800ae24 <HAL_UART_MspInit+0x2a4>)
 800aca0:	2200      	movs	r2, #0
 800aca2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800aca4:	4b5f      	ldr	r3, [pc, #380]	@ (800ae24 <HAL_UART_MspInit+0x2a4>)
 800aca6:	2200      	movs	r2, #0
 800aca8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800acaa:	485e      	ldr	r0, [pc, #376]	@ (800ae24 <HAL_UART_MspInit+0x2a4>)
 800acac:	f001 feea 	bl	800ca84 <HAL_DMA_Init>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d001      	beq.n	800acba <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800acb6:	f7fe fbad 	bl	8009414 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a59      	ldr	r2, [pc, #356]	@ (800ae24 <HAL_UART_MspInit+0x2a4>)
 800acbe:	67da      	str	r2, [r3, #124]	@ 0x7c
 800acc0:	4a58      	ldr	r2, [pc, #352]	@ (800ae24 <HAL_UART_MspInit+0x2a4>)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800acc6:	2200      	movs	r2, #0
 800acc8:	2100      	movs	r1, #0
 800acca:	205b      	movs	r0, #91	@ 0x5b
 800accc:	f001 fea5 	bl	800ca1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800acd0:	205b      	movs	r0, #91	@ 0x5b
 800acd2:	f001 febc 	bl	800ca4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800acd6:	e097      	b.n	800ae08 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a53      	ldr	r2, [pc, #332]	@ (800ae2c <HAL_UART_MspInit+0x2ac>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	f040 8092 	bne.w	800ae08 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800ace4:	2302      	movs	r3, #2
 800ace6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800ace8:	2300      	movs	r3, #0
 800acea:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800acec:	f107 0318 	add.w	r3, r7, #24
 800acf0:	4618      	mov	r0, r3
 800acf2:	f003 f9bf 	bl	800e074 <HAL_RCCEx_PeriphCLKConfig>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d001      	beq.n	800ad00 <HAL_UART_MspInit+0x180>
      Error_Handler();
 800acfc:	f7fe fb8a 	bl	8009414 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800ad00:	4b44      	ldr	r3, [pc, #272]	@ (800ae14 <HAL_UART_MspInit+0x294>)
 800ad02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad04:	4a43      	ldr	r2, [pc, #268]	@ (800ae14 <HAL_UART_MspInit+0x294>)
 800ad06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad0a:	6593      	str	r3, [r2, #88]	@ 0x58
 800ad0c:	4b41      	ldr	r3, [pc, #260]	@ (800ae14 <HAL_UART_MspInit+0x294>)
 800ad0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad14:	60fb      	str	r3, [r7, #12]
 800ad16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad18:	4b3e      	ldr	r3, [pc, #248]	@ (800ae14 <HAL_UART_MspInit+0x294>)
 800ad1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad1c:	4a3d      	ldr	r2, [pc, #244]	@ (800ae14 <HAL_UART_MspInit+0x294>)
 800ad1e:	f043 0301 	orr.w	r3, r3, #1
 800ad22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ad24:	4b3b      	ldr	r3, [pc, #236]	@ (800ae14 <HAL_UART_MspInit+0x294>)
 800ad26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad28:	f003 0301 	and.w	r3, r3, #1
 800ad2c:	60bb      	str	r3, [r7, #8]
 800ad2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800ad30:	230c      	movs	r3, #12
 800ad32:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad34:	2302      	movs	r3, #2
 800ad36:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800ad40:	2307      	movs	r3, #7
 800ad42:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad44:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800ad48:	4619      	mov	r1, r3
 800ad4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ad4e:	f002 f9cb 	bl	800d0e8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800ad52:	4b37      	ldr	r3, [pc, #220]	@ (800ae30 <HAL_UART_MspInit+0x2b0>)
 800ad54:	4a37      	ldr	r2, [pc, #220]	@ (800ae34 <HAL_UART_MspInit+0x2b4>)
 800ad56:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800ad58:	4b35      	ldr	r3, [pc, #212]	@ (800ae30 <HAL_UART_MspInit+0x2b0>)
 800ad5a:	221a      	movs	r2, #26
 800ad5c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ad5e:	4b34      	ldr	r3, [pc, #208]	@ (800ae30 <HAL_UART_MspInit+0x2b0>)
 800ad60:	2200      	movs	r2, #0
 800ad62:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ad64:	4b32      	ldr	r3, [pc, #200]	@ (800ae30 <HAL_UART_MspInit+0x2b0>)
 800ad66:	2200      	movs	r2, #0
 800ad68:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ad6a:	4b31      	ldr	r3, [pc, #196]	@ (800ae30 <HAL_UART_MspInit+0x2b0>)
 800ad6c:	2280      	movs	r2, #128	@ 0x80
 800ad6e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ad70:	4b2f      	ldr	r3, [pc, #188]	@ (800ae30 <HAL_UART_MspInit+0x2b0>)
 800ad72:	2200      	movs	r2, #0
 800ad74:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ad76:	4b2e      	ldr	r3, [pc, #184]	@ (800ae30 <HAL_UART_MspInit+0x2b0>)
 800ad78:	2200      	movs	r2, #0
 800ad7a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800ad7c:	4b2c      	ldr	r3, [pc, #176]	@ (800ae30 <HAL_UART_MspInit+0x2b0>)
 800ad7e:	2200      	movs	r2, #0
 800ad80:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ad82:	4b2b      	ldr	r3, [pc, #172]	@ (800ae30 <HAL_UART_MspInit+0x2b0>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800ad88:	4829      	ldr	r0, [pc, #164]	@ (800ae30 <HAL_UART_MspInit+0x2b0>)
 800ad8a:	f001 fe7b 	bl	800ca84 <HAL_DMA_Init>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d001      	beq.n	800ad98 <HAL_UART_MspInit+0x218>
      Error_Handler();
 800ad94:	f7fe fb3e 	bl	8009414 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4a25      	ldr	r2, [pc, #148]	@ (800ae30 <HAL_UART_MspInit+0x2b0>)
 800ad9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800ada0:	4a23      	ldr	r2, [pc, #140]	@ (800ae30 <HAL_UART_MspInit+0x2b0>)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 800ada6:	4b24      	ldr	r3, [pc, #144]	@ (800ae38 <HAL_UART_MspInit+0x2b8>)
 800ada8:	4a24      	ldr	r2, [pc, #144]	@ (800ae3c <HAL_UART_MspInit+0x2bc>)
 800adaa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800adac:	4b22      	ldr	r3, [pc, #136]	@ (800ae38 <HAL_UART_MspInit+0x2b8>)
 800adae:	221b      	movs	r2, #27
 800adb0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800adb2:	4b21      	ldr	r3, [pc, #132]	@ (800ae38 <HAL_UART_MspInit+0x2b8>)
 800adb4:	2210      	movs	r2, #16
 800adb6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800adb8:	4b1f      	ldr	r3, [pc, #124]	@ (800ae38 <HAL_UART_MspInit+0x2b8>)
 800adba:	2200      	movs	r2, #0
 800adbc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800adbe:	4b1e      	ldr	r3, [pc, #120]	@ (800ae38 <HAL_UART_MspInit+0x2b8>)
 800adc0:	2280      	movs	r2, #128	@ 0x80
 800adc2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800adc4:	4b1c      	ldr	r3, [pc, #112]	@ (800ae38 <HAL_UART_MspInit+0x2b8>)
 800adc6:	2200      	movs	r2, #0
 800adc8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800adca:	4b1b      	ldr	r3, [pc, #108]	@ (800ae38 <HAL_UART_MspInit+0x2b8>)
 800adcc:	2200      	movs	r2, #0
 800adce:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800add0:	4b19      	ldr	r3, [pc, #100]	@ (800ae38 <HAL_UART_MspInit+0x2b8>)
 800add2:	2200      	movs	r2, #0
 800add4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800add6:	4b18      	ldr	r3, [pc, #96]	@ (800ae38 <HAL_UART_MspInit+0x2b8>)
 800add8:	2200      	movs	r2, #0
 800adda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800addc:	4816      	ldr	r0, [pc, #88]	@ (800ae38 <HAL_UART_MspInit+0x2b8>)
 800adde:	f001 fe51 	bl	800ca84 <HAL_DMA_Init>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d001      	beq.n	800adec <HAL_UART_MspInit+0x26c>
      Error_Handler();
 800ade8:	f7fe fb14 	bl	8009414 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	4a12      	ldr	r2, [pc, #72]	@ (800ae38 <HAL_UART_MspInit+0x2b8>)
 800adf0:	67da      	str	r2, [r3, #124]	@ 0x7c
 800adf2:	4a11      	ldr	r2, [pc, #68]	@ (800ae38 <HAL_UART_MspInit+0x2b8>)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800adf8:	2200      	movs	r2, #0
 800adfa:	2100      	movs	r1, #0
 800adfc:	2026      	movs	r0, #38	@ 0x26
 800adfe:	f001 fe0c 	bl	800ca1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800ae02:	2026      	movs	r0, #38	@ 0x26
 800ae04:	f001 fe23 	bl	800ca4e <HAL_NVIC_EnableIRQ>
}
 800ae08:	bf00      	nop
 800ae0a:	3780      	adds	r7, #128	@ 0x80
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	40008000 	.word	0x40008000
 800ae14:	40021000 	.word	0x40021000
 800ae18:	48000400 	.word	0x48000400
 800ae1c:	200025cc 	.word	0x200025cc
 800ae20:	40020044 	.word	0x40020044
 800ae24:	2000262c 	.word	0x2000262c
 800ae28:	40020058 	.word	0x40020058
 800ae2c:	40004400 	.word	0x40004400
 800ae30:	2000268c 	.word	0x2000268c
 800ae34:	4002001c 	.word	0x4002001c
 800ae38:	200026ec 	.word	0x200026ec
 800ae3c:	40020030 	.word	0x40020030

0800ae40 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
	Reset_Handler:  ldr   r0, =_estack
 800ae40:	480d      	ldr	r0, [pc, #52]	@ (800ae78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800ae42:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/

    bl  SystemInit
 800ae44:	f7ff f994 	bl	800a170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ae48:	480c      	ldr	r0, [pc, #48]	@ (800ae7c <LoopForever+0x6>)
  ldr r1, =_edata
 800ae4a:	490d      	ldr	r1, [pc, #52]	@ (800ae80 <LoopForever+0xa>)
  ldr r2, =_sidata
 800ae4c:	4a0d      	ldr	r2, [pc, #52]	@ (800ae84 <LoopForever+0xe>)
  movs r3, #0
 800ae4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800ae50:	e002      	b.n	800ae58 <LoopCopyDataInit>

0800ae52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ae52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ae54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ae56:	3304      	adds	r3, #4

0800ae58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ae58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ae5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ae5c:	d3f9      	bcc.n	800ae52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ae5e:	4a0a      	ldr	r2, [pc, #40]	@ (800ae88 <LoopForever+0x12>)
  ldr r4, =_ebss
 800ae60:	4c0a      	ldr	r4, [pc, #40]	@ (800ae8c <LoopForever+0x16>)
  movs r3, #0
 800ae62:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ae64:	e001      	b.n	800ae6a <LoopFillZerobss>

0800ae66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ae66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ae68:	3204      	adds	r2, #4

0800ae6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ae6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ae6c:	d3fb      	bcc.n	800ae66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800ae6e:	f008 f911 	bl	8013094 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800ae72:	f7fa fc4f 	bl	8005714 <main>

0800ae76 <LoopForever>:

LoopForever:
    b LoopForever
 800ae76:	e7fe      	b.n	800ae76 <LoopForever>
	Reset_Handler:  ldr   r0, =_estack
 800ae78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ae7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ae80:	2000061c 	.word	0x2000061c
  ldr r2, =_sidata
 800ae84:	08015588 	.word	0x08015588
  ldr r2, =_sbss
 800ae88:	2000061c 	.word	0x2000061c
  ldr r4, =_ebss
 800ae8c:	20002898 	.word	0x20002898

0800ae90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800ae90:	e7fe      	b.n	800ae90 <ADC1_2_IRQHandler>

0800ae92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b082      	sub	sp, #8
 800ae96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ae9c:	2003      	movs	r0, #3
 800ae9e:	f001 fdb1 	bl	800ca04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800aea2:	2000      	movs	r0, #0
 800aea4:	f000 f80e 	bl	800aec4 <HAL_InitTick>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d002      	beq.n	800aeb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	71fb      	strb	r3, [r7, #7]
 800aeb2:	e001      	b.n	800aeb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800aeb4:	f7ff f82c 	bl	8009f10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800aeb8:	79fb      	ldrb	r3, [r7, #7]

}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3708      	adds	r7, #8
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
	...

0800aec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800aecc:	2300      	movs	r3, #0
 800aece:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800aed0:	4b16      	ldr	r3, [pc, #88]	@ (800af2c <HAL_InitTick+0x68>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d022      	beq.n	800af1e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800aed8:	4b15      	ldr	r3, [pc, #84]	@ (800af30 <HAL_InitTick+0x6c>)
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	4b13      	ldr	r3, [pc, #76]	@ (800af2c <HAL_InitTick+0x68>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800aee4:	fbb1 f3f3 	udiv	r3, r1, r3
 800aee8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeec:	4618      	mov	r0, r3
 800aeee:	f001 fdbc 	bl	800ca6a <HAL_SYSTICK_Config>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d10f      	bne.n	800af18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2b0f      	cmp	r3, #15
 800aefc:	d809      	bhi.n	800af12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800aefe:	2200      	movs	r2, #0
 800af00:	6879      	ldr	r1, [r7, #4]
 800af02:	f04f 30ff 	mov.w	r0, #4294967295
 800af06:	f001 fd88 	bl	800ca1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800af0a:	4a0a      	ldr	r2, [pc, #40]	@ (800af34 <HAL_InitTick+0x70>)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6013      	str	r3, [r2, #0]
 800af10:	e007      	b.n	800af22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800af12:	2301      	movs	r3, #1
 800af14:	73fb      	strb	r3, [r7, #15]
 800af16:	e004      	b.n	800af22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	73fb      	strb	r3, [r7, #15]
 800af1c:	e001      	b.n	800af22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800af1e:	2301      	movs	r3, #1
 800af20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800af22:	7bfb      	ldrb	r3, [r7, #15]
}
 800af24:	4618      	mov	r0, r3
 800af26:	3710      	adds	r7, #16
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	200005c8 	.word	0x200005c8
 800af30:	200005c0 	.word	0x200005c0
 800af34:	200005c4 	.word	0x200005c4

0800af38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800af38:	b480      	push	{r7}
 800af3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800af3c:	4b05      	ldr	r3, [pc, #20]	@ (800af54 <HAL_IncTick+0x1c>)
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	4b05      	ldr	r3, [pc, #20]	@ (800af58 <HAL_IncTick+0x20>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4413      	add	r3, r2
 800af46:	4a03      	ldr	r2, [pc, #12]	@ (800af54 <HAL_IncTick+0x1c>)
 800af48:	6013      	str	r3, [r2, #0]
}
 800af4a:	bf00      	nop
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr
 800af54:	2000274c 	.word	0x2000274c
 800af58:	200005c8 	.word	0x200005c8

0800af5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800af5c:	b480      	push	{r7}
 800af5e:	af00      	add	r7, sp, #0
  return uwTick;
 800af60:	4b03      	ldr	r3, [pc, #12]	@ (800af70 <HAL_GetTick+0x14>)
 800af62:	681b      	ldr	r3, [r3, #0]
}
 800af64:	4618      	mov	r0, r3
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr
 800af6e:	bf00      	nop
 800af70:	2000274c 	.word	0x2000274c

0800af74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	431a      	orrs	r2, r3
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	609a      	str	r2, [r3, #8]
}
 800af8e:	bf00      	nop
 800af90:	370c      	adds	r7, #12
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr

0800af9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800af9a:	b480      	push	{r7}
 800af9c:	b083      	sub	sp, #12
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
 800afa2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	431a      	orrs	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	609a      	str	r2, [r3, #8]
}
 800afb4:	bf00      	nop
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800afdc:	b480      	push	{r7}
 800afde:	b087      	sub	sp, #28
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	60b9      	str	r1, [r7, #8]
 800afe6:	607a      	str	r2, [r7, #4]
 800afe8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	3360      	adds	r3, #96	@ 0x60
 800afee:	461a      	mov	r2, r3
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	009b      	lsls	r3, r3, #2
 800aff4:	4413      	add	r3, r2
 800aff6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	4b08      	ldr	r3, [pc, #32]	@ (800b020 <LL_ADC_SetOffset+0x44>)
 800affe:	4013      	ands	r3, r2
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800b006:	683a      	ldr	r2, [r7, #0]
 800b008:	430a      	orrs	r2, r1
 800b00a:	4313      	orrs	r3, r2
 800b00c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800b014:	bf00      	nop
 800b016:	371c      	adds	r7, #28
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr
 800b020:	03fff000 	.word	0x03fff000

0800b024 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	3360      	adds	r3, #96	@ 0x60
 800b032:	461a      	mov	r2, r3
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	4413      	add	r3, r2
 800b03a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800b044:	4618      	mov	r0, r3
 800b046:	3714      	adds	r7, #20
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800b050:	b480      	push	{r7}
 800b052:	b087      	sub	sp, #28
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	3360      	adds	r3, #96	@ 0x60
 800b060:	461a      	mov	r2, r3
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	4413      	add	r3, r2
 800b068:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	431a      	orrs	r2, r3
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800b07a:	bf00      	nop
 800b07c:	371c      	adds	r7, #28
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr

0800b086 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800b086:	b480      	push	{r7}
 800b088:	b087      	sub	sp, #28
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	60f8      	str	r0, [r7, #12]
 800b08e:	60b9      	str	r1, [r7, #8]
 800b090:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	3360      	adds	r3, #96	@ 0x60
 800b096:	461a      	mov	r2, r3
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	4413      	add	r3, r2
 800b09e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	431a      	orrs	r2, r3
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800b0b0:	bf00      	nop
 800b0b2:	371c      	adds	r7, #28
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b087      	sub	sp, #28
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	3360      	adds	r3, #96	@ 0x60
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	4413      	add	r3, r2
 800b0d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	431a      	orrs	r2, r3
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800b0e6:	bf00      	nop
 800b0e8:	371c      	adds	r7, #28
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr

0800b0f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800b0f2:	b480      	push	{r7}
 800b0f4:	b083      	sub	sp, #12
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	695b      	ldr	r3, [r3, #20]
 800b100:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	431a      	orrs	r2, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	615a      	str	r2, [r3, #20]
}
 800b10c:	bf00      	nop
 800b10e:	370c      	adds	r7, #12
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr

0800b118 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800b118:	b480      	push	{r7}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d101      	bne.n	800b130 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800b12c:	2301      	movs	r3, #1
 800b12e:	e000      	b.n	800b132 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800b130:	2300      	movs	r3, #0
}
 800b132:	4618      	mov	r0, r3
 800b134:	370c      	adds	r7, #12
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr

0800b13e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800b13e:	b480      	push	{r7}
 800b140:	b087      	sub	sp, #28
 800b142:	af00      	add	r7, sp, #0
 800b144:	60f8      	str	r0, [r7, #12]
 800b146:	60b9      	str	r1, [r7, #8]
 800b148:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	3330      	adds	r3, #48	@ 0x30
 800b14e:	461a      	mov	r2, r3
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	0a1b      	lsrs	r3, r3, #8
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	f003 030c 	and.w	r3, r3, #12
 800b15a:	4413      	add	r3, r2
 800b15c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	f003 031f 	and.w	r3, r3, #31
 800b168:	211f      	movs	r1, #31
 800b16a:	fa01 f303 	lsl.w	r3, r1, r3
 800b16e:	43db      	mvns	r3, r3
 800b170:	401a      	ands	r2, r3
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	0e9b      	lsrs	r3, r3, #26
 800b176:	f003 011f 	and.w	r1, r3, #31
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	f003 031f 	and.w	r3, r3, #31
 800b180:	fa01 f303 	lsl.w	r3, r1, r3
 800b184:	431a      	orrs	r2, r3
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800b18a:	bf00      	nop
 800b18c:	371c      	adds	r7, #28
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr

0800b196 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800b196:	b480      	push	{r7}
 800b198:	b087      	sub	sp, #28
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	60f8      	str	r0, [r7, #12]
 800b19e:	60b9      	str	r1, [r7, #8]
 800b1a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	3314      	adds	r3, #20
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	0e5b      	lsrs	r3, r3, #25
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	f003 0304 	and.w	r3, r3, #4
 800b1b2:	4413      	add	r3, r2
 800b1b4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	0d1b      	lsrs	r3, r3, #20
 800b1be:	f003 031f 	and.w	r3, r3, #31
 800b1c2:	2107      	movs	r1, #7
 800b1c4:	fa01 f303 	lsl.w	r3, r1, r3
 800b1c8:	43db      	mvns	r3, r3
 800b1ca:	401a      	ands	r2, r3
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	0d1b      	lsrs	r3, r3, #20
 800b1d0:	f003 031f 	and.w	r3, r3, #31
 800b1d4:	6879      	ldr	r1, [r7, #4]
 800b1d6:	fa01 f303 	lsl.w	r3, r1, r3
 800b1da:	431a      	orrs	r2, r3
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800b1e0:	bf00      	nop
 800b1e2:	371c      	adds	r7, #28
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b085      	sub	sp, #20
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b204:	43db      	mvns	r3, r3
 800b206:	401a      	ands	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f003 0318 	and.w	r3, r3, #24
 800b20e:	4908      	ldr	r1, [pc, #32]	@ (800b230 <LL_ADC_SetChannelSingleDiff+0x44>)
 800b210:	40d9      	lsrs	r1, r3
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	400b      	ands	r3, r1
 800b216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b21a:	431a      	orrs	r2, r3
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800b222:	bf00      	nop
 800b224:	3714      	adds	r7, #20
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr
 800b22e:	bf00      	nop
 800b230:	0007ffff 	.word	0x0007ffff

0800b234 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	f003 031f 	and.w	r3, r3, #31
}
 800b244:	4618      	mov	r0, r3
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800b250:	b480      	push	{r7}
 800b252:	b083      	sub	sp, #12
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	689b      	ldr	r3, [r3, #8]
 800b25c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800b260:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	6093      	str	r3, [r2, #8]
}
 800b268:	bf00      	nop
 800b26a:	370c      	adds	r7, #12
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b284:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b288:	d101      	bne.n	800b28e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800b28a:	2301      	movs	r3, #1
 800b28c:	e000      	b.n	800b290 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800b28e:	2300      	movs	r3, #0
}
 800b290:	4618      	mov	r0, r3
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800b2ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b2b0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800b2b8:	bf00      	nop
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b2d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b2d8:	d101      	bne.n	800b2de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e000      	b.n	800b2e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800b2de:	2300      	movs	r3, #0
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b2fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b300:	f043 0201 	orr.w	r2, r3, #1
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800b308:	bf00      	nop
 800b30a:	370c      	adds	r7, #12
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b324:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b328:	f043 0202 	orr.w	r2, r3, #2
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800b330:	bf00      	nop
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	f003 0301 	and.w	r3, r3, #1
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d101      	bne.n	800b354 <LL_ADC_IsEnabled+0x18>
 800b350:	2301      	movs	r3, #1
 800b352:	e000      	b.n	800b356 <LL_ADC_IsEnabled+0x1a>
 800b354:	2300      	movs	r3, #0
}
 800b356:	4618      	mov	r0, r3
 800b358:	370c      	adds	r7, #12
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr

0800b362 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800b362:	b480      	push	{r7}
 800b364:	b083      	sub	sp, #12
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	f003 0302 	and.w	r3, r3, #2
 800b372:	2b02      	cmp	r3, #2
 800b374:	d101      	bne.n	800b37a <LL_ADC_IsDisableOngoing+0x18>
 800b376:	2301      	movs	r3, #1
 800b378:	e000      	b.n	800b37c <LL_ADC_IsDisableOngoing+0x1a>
 800b37a:	2300      	movs	r3, #0
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b398:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b39c:	f043 0204 	orr.w	r2, r3, #4
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800b3a4:	bf00      	nop
 800b3a6:	370c      	adds	r7, #12
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	f003 0304 	and.w	r3, r3, #4
 800b3c0:	2b04      	cmp	r3, #4
 800b3c2:	d101      	bne.n	800b3c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e000      	b.n	800b3ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b3c8:	2300      	movs	r3, #0
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	370c      	adds	r7, #12
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr

0800b3d6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b3d6:	b480      	push	{r7}
 800b3d8:	b083      	sub	sp, #12
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	f003 0308 	and.w	r3, r3, #8
 800b3e6:	2b08      	cmp	r3, #8
 800b3e8:	d101      	bne.n	800b3ee <LL_ADC_INJ_IsConversionOngoing+0x18>
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	e000      	b.n	800b3f0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800b3ee:	2300      	movs	r3, #0
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b3fc:	b590      	push	{r4, r7, lr}
 800b3fe:	b089      	sub	sp, #36	@ 0x24
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b404:	2300      	movs	r3, #0
 800b406:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800b408:	2300      	movs	r3, #0
 800b40a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d101      	bne.n	800b416 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800b412:	2301      	movs	r3, #1
 800b414:	e1a9      	b.n	800b76a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	695b      	ldr	r3, [r3, #20]
 800b41a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b420:	2b00      	cmp	r3, #0
 800b422:	d109      	bne.n	800b438 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f7f9 fc81 	bl	8004d2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2200      	movs	r2, #0
 800b42e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7ff ff19 	bl	800b274 <LL_ADC_IsDeepPowerDownEnabled>
 800b442:	4603      	mov	r3, r0
 800b444:	2b00      	cmp	r3, #0
 800b446:	d004      	beq.n	800b452 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7ff feff 	bl	800b250 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4618      	mov	r0, r3
 800b458:	f7ff ff34 	bl	800b2c4 <LL_ADC_IsInternalRegulatorEnabled>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d115      	bne.n	800b48e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4618      	mov	r0, r3
 800b468:	f7ff ff18 	bl	800b29c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b46c:	4b9c      	ldr	r3, [pc, #624]	@ (800b6e0 <HAL_ADC_Init+0x2e4>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	099b      	lsrs	r3, r3, #6
 800b472:	4a9c      	ldr	r2, [pc, #624]	@ (800b6e4 <HAL_ADC_Init+0x2e8>)
 800b474:	fba2 2303 	umull	r2, r3, r2, r3
 800b478:	099b      	lsrs	r3, r3, #6
 800b47a:	3301      	adds	r3, #1
 800b47c:	005b      	lsls	r3, r3, #1
 800b47e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b480:	e002      	b.n	800b488 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	3b01      	subs	r3, #1
 800b486:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d1f9      	bne.n	800b482 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4618      	mov	r0, r3
 800b494:	f7ff ff16 	bl	800b2c4 <LL_ADC_IsInternalRegulatorEnabled>
 800b498:	4603      	mov	r3, r0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d10d      	bne.n	800b4ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4a2:	f043 0210 	orr.w	r2, r3, #16
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b4ae:	f043 0201 	orr.w	r2, r3, #1
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7ff ff76 	bl	800b3b0 <LL_ADC_REG_IsConversionOngoing>
 800b4c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4ca:	f003 0310 	and.w	r3, r3, #16
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	f040 8142 	bne.w	800b758 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	f040 813e 	bne.w	800b758 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4e0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800b4e4:	f043 0202 	orr.w	r2, r3, #2
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7ff ff23 	bl	800b33c <LL_ADC_IsEnabled>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d141      	bne.n	800b580 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b504:	d004      	beq.n	800b510 <HAL_ADC_Init+0x114>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a77      	ldr	r2, [pc, #476]	@ (800b6e8 <HAL_ADC_Init+0x2ec>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d10f      	bne.n	800b530 <HAL_ADC_Init+0x134>
 800b510:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800b514:	f7ff ff12 	bl	800b33c <LL_ADC_IsEnabled>
 800b518:	4604      	mov	r4, r0
 800b51a:	4873      	ldr	r0, [pc, #460]	@ (800b6e8 <HAL_ADC_Init+0x2ec>)
 800b51c:	f7ff ff0e 	bl	800b33c <LL_ADC_IsEnabled>
 800b520:	4603      	mov	r3, r0
 800b522:	4323      	orrs	r3, r4
 800b524:	2b00      	cmp	r3, #0
 800b526:	bf0c      	ite	eq
 800b528:	2301      	moveq	r3, #1
 800b52a:	2300      	movne	r3, #0
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	e012      	b.n	800b556 <HAL_ADC_Init+0x15a>
 800b530:	486e      	ldr	r0, [pc, #440]	@ (800b6ec <HAL_ADC_Init+0x2f0>)
 800b532:	f7ff ff03 	bl	800b33c <LL_ADC_IsEnabled>
 800b536:	4604      	mov	r4, r0
 800b538:	486d      	ldr	r0, [pc, #436]	@ (800b6f0 <HAL_ADC_Init+0x2f4>)
 800b53a:	f7ff feff 	bl	800b33c <LL_ADC_IsEnabled>
 800b53e:	4603      	mov	r3, r0
 800b540:	431c      	orrs	r4, r3
 800b542:	486c      	ldr	r0, [pc, #432]	@ (800b6f4 <HAL_ADC_Init+0x2f8>)
 800b544:	f7ff fefa 	bl	800b33c <LL_ADC_IsEnabled>
 800b548:	4603      	mov	r3, r0
 800b54a:	4323      	orrs	r3, r4
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	bf0c      	ite	eq
 800b550:	2301      	moveq	r3, #1
 800b552:	2300      	movne	r3, #0
 800b554:	b2db      	uxtb	r3, r3
 800b556:	2b00      	cmp	r3, #0
 800b558:	d012      	beq.n	800b580 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b562:	d004      	beq.n	800b56e <HAL_ADC_Init+0x172>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a5f      	ldr	r2, [pc, #380]	@ (800b6e8 <HAL_ADC_Init+0x2ec>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d101      	bne.n	800b572 <HAL_ADC_Init+0x176>
 800b56e:	4a62      	ldr	r2, [pc, #392]	@ (800b6f8 <HAL_ADC_Init+0x2fc>)
 800b570:	e000      	b.n	800b574 <HAL_ADC_Init+0x178>
 800b572:	4a62      	ldr	r2, [pc, #392]	@ (800b6fc <HAL_ADC_Init+0x300>)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	4619      	mov	r1, r3
 800b57a:	4610      	mov	r0, r2
 800b57c:	f7ff fcfa 	bl	800af74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	7f5b      	ldrb	r3, [r3, #29]
 800b584:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b58a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800b590:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800b596:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b59e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	d106      	bne.n	800b5bc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5b2:	3b01      	subs	r3, #1
 800b5b4:	045b      	lsls	r3, r3, #17
 800b5b6:	69ba      	ldr	r2, [r7, #24]
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d009      	beq.n	800b5d8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5c8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5d0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b5d2:	69ba      	ldr	r2, [r7, #24]
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	68da      	ldr	r2, [r3, #12]
 800b5de:	4b48      	ldr	r3, [pc, #288]	@ (800b700 <HAL_ADC_Init+0x304>)
 800b5e0:	4013      	ands	r3, r2
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	6812      	ldr	r2, [r2, #0]
 800b5e6:	69b9      	ldr	r1, [r7, #24]
 800b5e8:	430b      	orrs	r3, r1
 800b5ea:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	691b      	ldr	r3, [r3, #16]
 800b5f2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	430a      	orrs	r2, r1
 800b600:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	4618      	mov	r0, r3
 800b608:	f7ff fee5 	bl	800b3d6 <LL_ADC_INJ_IsConversionOngoing>
 800b60c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d17f      	bne.n	800b714 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d17c      	bne.n	800b714 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b61e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b626:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b628:	4313      	orrs	r3, r2
 800b62a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b636:	f023 0302 	bic.w	r3, r3, #2
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	6812      	ldr	r2, [r2, #0]
 800b63e:	69b9      	ldr	r1, [r7, #24]
 800b640:	430b      	orrs	r3, r1
 800b642:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	691b      	ldr	r3, [r3, #16]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d017      	beq.n	800b67c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	691a      	ldr	r2, [r3, #16]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b65a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b664:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800b668:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	6911      	ldr	r1, [r2, #16]
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	6812      	ldr	r2, [r2, #0]
 800b674:	430b      	orrs	r3, r1
 800b676:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800b67a:	e013      	b.n	800b6a4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	691a      	ldr	r2, [r3, #16]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b68a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	6812      	ldr	r2, [r2, #0]
 800b698:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800b69c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b6a0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d12a      	bne.n	800b704 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	691b      	ldr	r3, [r3, #16]
 800b6b4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b6b8:	f023 0304 	bic.w	r3, r3, #4
 800b6bc:	687a      	ldr	r2, [r7, #4]
 800b6be:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800b6c0:	687a      	ldr	r2, [r7, #4]
 800b6c2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b6c4:	4311      	orrs	r1, r2
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800b6ca:	4311      	orrs	r1, r2
 800b6cc:	687a      	ldr	r2, [r7, #4]
 800b6ce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800b6d0:	430a      	orrs	r2, r1
 800b6d2:	431a      	orrs	r2, r3
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f042 0201 	orr.w	r2, r2, #1
 800b6dc:	611a      	str	r2, [r3, #16]
 800b6de:	e019      	b.n	800b714 <HAL_ADC_Init+0x318>
 800b6e0:	200005c0 	.word	0x200005c0
 800b6e4:	053e2d63 	.word	0x053e2d63
 800b6e8:	50000100 	.word	0x50000100
 800b6ec:	50000400 	.word	0x50000400
 800b6f0:	50000500 	.word	0x50000500
 800b6f4:	50000600 	.word	0x50000600
 800b6f8:	50000300 	.word	0x50000300
 800b6fc:	50000700 	.word	0x50000700
 800b700:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	691a      	ldr	r2, [r3, #16]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f022 0201 	bic.w	r2, r2, #1
 800b712:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	695b      	ldr	r3, [r3, #20]
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d10c      	bne.n	800b736 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b722:	f023 010f 	bic.w	r1, r3, #15
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6a1b      	ldr	r3, [r3, #32]
 800b72a:	1e5a      	subs	r2, r3, #1
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	430a      	orrs	r2, r1
 800b732:	631a      	str	r2, [r3, #48]	@ 0x30
 800b734:	e007      	b.n	800b746 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f022 020f 	bic.w	r2, r2, #15
 800b744:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b74a:	f023 0303 	bic.w	r3, r3, #3
 800b74e:	f043 0201 	orr.w	r2, r3, #1
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b756:	e007      	b.n	800b768 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b75c:	f043 0210 	orr.w	r2, r3, #16
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800b764:	2301      	movs	r3, #1
 800b766:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800b768:	7ffb      	ldrb	r3, [r7, #31]
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3724      	adds	r7, #36	@ 0x24
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd90      	pop	{r4, r7, pc}
 800b772:	bf00      	nop

0800b774 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b086      	sub	sp, #24
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b788:	d004      	beq.n	800b794 <HAL_ADC_Start_DMA+0x20>
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4a5a      	ldr	r2, [pc, #360]	@ (800b8f8 <HAL_ADC_Start_DMA+0x184>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d101      	bne.n	800b798 <HAL_ADC_Start_DMA+0x24>
 800b794:	4b59      	ldr	r3, [pc, #356]	@ (800b8fc <HAL_ADC_Start_DMA+0x188>)
 800b796:	e000      	b.n	800b79a <HAL_ADC_Start_DMA+0x26>
 800b798:	4b59      	ldr	r3, [pc, #356]	@ (800b900 <HAL_ADC_Start_DMA+0x18c>)
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7ff fd4a 	bl	800b234 <LL_ADC_GetMultimode>
 800b7a0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7ff fe02 	bl	800b3b0 <LL_ADC_REG_IsConversionOngoing>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f040 809b 	bne.w	800b8ea <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d101      	bne.n	800b7c2 <HAL_ADC_Start_DMA+0x4e>
 800b7be:	2302      	movs	r3, #2
 800b7c0:	e096      	b.n	800b8f0 <HAL_ADC_Start_DMA+0x17c>
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4a4d      	ldr	r2, [pc, #308]	@ (800b904 <HAL_ADC_Start_DMA+0x190>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d008      	beq.n	800b7e6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d005      	beq.n	800b7e6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	2b05      	cmp	r3, #5
 800b7de:	d002      	beq.n	800b7e6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	2b09      	cmp	r3, #9
 800b7e4:	d17a      	bne.n	800b8dc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800b7e6:	68f8      	ldr	r0, [r7, #12]
 800b7e8:	f000 fcf6 	bl	800c1d8 <ADC_Enable>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800b7f0:	7dfb      	ldrb	r3, [r7, #23]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d16d      	bne.n	800b8d2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7fa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b7fe:	f023 0301 	bic.w	r3, r3, #1
 800b802:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	4a3a      	ldr	r2, [pc, #232]	@ (800b8f8 <HAL_ADC_Start_DMA+0x184>)
 800b810:	4293      	cmp	r3, r2
 800b812:	d009      	beq.n	800b828 <HAL_ADC_Start_DMA+0xb4>
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a3b      	ldr	r2, [pc, #236]	@ (800b908 <HAL_ADC_Start_DMA+0x194>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d002      	beq.n	800b824 <HAL_ADC_Start_DMA+0xb0>
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	e003      	b.n	800b82c <HAL_ADC_Start_DMA+0xb8>
 800b824:	4b39      	ldr	r3, [pc, #228]	@ (800b90c <HAL_ADC_Start_DMA+0x198>)
 800b826:	e001      	b.n	800b82c <HAL_ADC_Start_DMA+0xb8>
 800b828:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	6812      	ldr	r2, [r2, #0]
 800b830:	4293      	cmp	r3, r2
 800b832:	d002      	beq.n	800b83a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d105      	bne.n	800b846 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b83e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b84a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d006      	beq.n	800b860 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b856:	f023 0206 	bic.w	r2, r3, #6
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	661a      	str	r2, [r3, #96]	@ 0x60
 800b85e:	e002      	b.n	800b866 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2200      	movs	r2, #0
 800b864:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b86a:	4a29      	ldr	r2, [pc, #164]	@ (800b910 <HAL_ADC_Start_DMA+0x19c>)
 800b86c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b872:	4a28      	ldr	r2, [pc, #160]	@ (800b914 <HAL_ADC_Start_DMA+0x1a0>)
 800b874:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b87a:	4a27      	ldr	r2, [pc, #156]	@ (800b918 <HAL_ADC_Start_DMA+0x1a4>)
 800b87c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	221c      	movs	r2, #28
 800b884:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2200      	movs	r2, #0
 800b88a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	685a      	ldr	r2, [r3, #4]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f042 0210 	orr.w	r2, r2, #16
 800b89c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	68da      	ldr	r2, [r3, #12]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f042 0201 	orr.w	r2, r2, #1
 800b8ac:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	3340      	adds	r3, #64	@ 0x40
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	68ba      	ldr	r2, [r7, #8]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f001 f989 	bl	800cbd4 <HAL_DMA_Start_IT>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7ff fd5c 	bl	800b388 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800b8d0:	e00d      	b.n	800b8ee <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800b8da:	e008      	b.n	800b8ee <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800b8e8:	e001      	b.n	800b8ee <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800b8ea:	2302      	movs	r3, #2
 800b8ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800b8ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3718      	adds	r7, #24
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}
 800b8f8:	50000100 	.word	0x50000100
 800b8fc:	50000300 	.word	0x50000300
 800b900:	50000700 	.word	0x50000700
 800b904:	50000600 	.word	0x50000600
 800b908:	50000500 	.word	0x50000500
 800b90c:	50000400 	.word	0x50000400
 800b910:	0800c3c3 	.word	0x0800c3c3
 800b914:	0800c49b 	.word	0x0800c49b
 800b918:	0800c4b7 	.word	0x0800c4b7

0800b91c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b083      	sub	sp, #12
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800b924:	bf00      	nop
 800b926:	370c      	adds	r7, #12
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b930:	b480      	push	{r7}
 800b932:	b083      	sub	sp, #12
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800b938:	bf00      	nop
 800b93a:	370c      	adds	r7, #12
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr

0800b944 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800b94c:	bf00      	nop
 800b94e:	370c      	adds	r7, #12
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr

0800b958 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b0b6      	sub	sp, #216	@ 0xd8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b962:	2300      	movs	r3, #0
 800b964:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800b968:	2300      	movs	r3, #0
 800b96a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b972:	2b01      	cmp	r3, #1
 800b974:	d102      	bne.n	800b97c <HAL_ADC_ConfigChannel+0x24>
 800b976:	2302      	movs	r3, #2
 800b978:	f000 bc13 	b.w	800c1a2 <HAL_ADC_ConfigChannel+0x84a>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2201      	movs	r2, #1
 800b980:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	4618      	mov	r0, r3
 800b98a:	f7ff fd11 	bl	800b3b0 <LL_ADC_REG_IsConversionOngoing>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	f040 83f3 	bne.w	800c17c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6818      	ldr	r0, [r3, #0]
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	6859      	ldr	r1, [r3, #4]
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	f7ff fbcb 	bl	800b13e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7ff fcff 	bl	800b3b0 <LL_ADC_REG_IsConversionOngoing>
 800b9b2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7ff fd0b 	bl	800b3d6 <LL_ADC_INJ_IsConversionOngoing>
 800b9c0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b9c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	f040 81d9 	bne.w	800bd80 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b9ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	f040 81d4 	bne.w	800bd80 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	689b      	ldr	r3, [r3, #8]
 800b9dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b9e0:	d10f      	bne.n	800ba02 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6818      	ldr	r0, [r3, #0]
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	f7ff fbd2 	bl	800b196 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7ff fb79 	bl	800b0f2 <LL_ADC_SetSamplingTimeCommonConfig>
 800ba00:	e00e      	b.n	800ba20 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6818      	ldr	r0, [r3, #0]
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	6819      	ldr	r1, [r3, #0]
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	461a      	mov	r2, r3
 800ba10:	f7ff fbc1 	bl	800b196 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2100      	movs	r1, #0
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7ff fb69 	bl	800b0f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	695a      	ldr	r2, [r3, #20]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	68db      	ldr	r3, [r3, #12]
 800ba2a:	08db      	lsrs	r3, r3, #3
 800ba2c:	f003 0303 	and.w	r3, r3, #3
 800ba30:	005b      	lsls	r3, r3, #1
 800ba32:	fa02 f303 	lsl.w	r3, r2, r3
 800ba36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	691b      	ldr	r3, [r3, #16]
 800ba3e:	2b04      	cmp	r3, #4
 800ba40:	d022      	beq.n	800ba88 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6818      	ldr	r0, [r3, #0]
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	6919      	ldr	r1, [r3, #16]
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ba52:	f7ff fac3 	bl	800afdc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6818      	ldr	r0, [r3, #0]
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	6919      	ldr	r1, [r3, #16]
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	699b      	ldr	r3, [r3, #24]
 800ba62:	461a      	mov	r2, r3
 800ba64:	f7ff fb0f 	bl	800b086 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6818      	ldr	r0, [r3, #0]
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800ba74:	2b01      	cmp	r3, #1
 800ba76:	d102      	bne.n	800ba7e <HAL_ADC_ConfigChannel+0x126>
 800ba78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ba7c:	e000      	b.n	800ba80 <HAL_ADC_ConfigChannel+0x128>
 800ba7e:	2300      	movs	r3, #0
 800ba80:	461a      	mov	r2, r3
 800ba82:	f7ff fb1b 	bl	800b0bc <LL_ADC_SetOffsetSaturation>
 800ba86:	e17b      	b.n	800bd80 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	2100      	movs	r1, #0
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7ff fac8 	bl	800b024 <LL_ADC_GetOffsetChannel>
 800ba94:	4603      	mov	r3, r0
 800ba96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d10a      	bne.n	800bab4 <HAL_ADC_ConfigChannel+0x15c>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2100      	movs	r1, #0
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7ff fabd 	bl	800b024 <LL_ADC_GetOffsetChannel>
 800baaa:	4603      	mov	r3, r0
 800baac:	0e9b      	lsrs	r3, r3, #26
 800baae:	f003 021f 	and.w	r2, r3, #31
 800bab2:	e01e      	b.n	800baf2 <HAL_ADC_ConfigChannel+0x19a>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	2100      	movs	r1, #0
 800baba:	4618      	mov	r0, r3
 800babc:	f7ff fab2 	bl	800b024 <LL_ADC_GetOffsetChannel>
 800bac0:	4603      	mov	r3, r0
 800bac2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bac6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800baca:	fa93 f3a3 	rbit	r3, r3
 800bace:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800bad2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bad6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800bada:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d101      	bne.n	800bae6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800bae2:	2320      	movs	r3, #32
 800bae4:	e004      	b.n	800baf0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800bae6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800baea:	fab3 f383 	clz	r3, r3
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d105      	bne.n	800bb0a <HAL_ADC_ConfigChannel+0x1b2>
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	0e9b      	lsrs	r3, r3, #26
 800bb04:	f003 031f 	and.w	r3, r3, #31
 800bb08:	e018      	b.n	800bb3c <HAL_ADC_ConfigChannel+0x1e4>
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bb16:	fa93 f3a3 	rbit	r3, r3
 800bb1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800bb1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800bb26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d101      	bne.n	800bb32 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800bb2e:	2320      	movs	r3, #32
 800bb30:	e004      	b.n	800bb3c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800bb32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bb36:	fab3 f383 	clz	r3, r3
 800bb3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d106      	bne.n	800bb4e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2200      	movs	r2, #0
 800bb46:	2100      	movs	r1, #0
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7ff fa81 	bl	800b050 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	2101      	movs	r1, #1
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7ff fa65 	bl	800b024 <LL_ADC_GetOffsetChannel>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d10a      	bne.n	800bb7a <HAL_ADC_ConfigChannel+0x222>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	2101      	movs	r1, #1
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7ff fa5a 	bl	800b024 <LL_ADC_GetOffsetChannel>
 800bb70:	4603      	mov	r3, r0
 800bb72:	0e9b      	lsrs	r3, r3, #26
 800bb74:	f003 021f 	and.w	r2, r3, #31
 800bb78:	e01e      	b.n	800bbb8 <HAL_ADC_ConfigChannel+0x260>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2101      	movs	r1, #1
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7ff fa4f 	bl	800b024 <LL_ADC_GetOffsetChannel>
 800bb86:	4603      	mov	r3, r0
 800bb88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bb90:	fa93 f3a3 	rbit	r3, r3
 800bb94:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800bb98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bb9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800bba0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d101      	bne.n	800bbac <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800bba8:	2320      	movs	r3, #32
 800bbaa:	e004      	b.n	800bbb6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800bbac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bbb0:	fab3 f383 	clz	r3, r3
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d105      	bne.n	800bbd0 <HAL_ADC_ConfigChannel+0x278>
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	0e9b      	lsrs	r3, r3, #26
 800bbca:	f003 031f 	and.w	r3, r3, #31
 800bbce:	e018      	b.n	800bc02 <HAL_ADC_ConfigChannel+0x2aa>
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bbd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bbdc:	fa93 f3a3 	rbit	r3, r3
 800bbe0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800bbe4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bbe8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800bbec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d101      	bne.n	800bbf8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800bbf4:	2320      	movs	r3, #32
 800bbf6:	e004      	b.n	800bc02 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800bbf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bbfc:	fab3 f383 	clz	r3, r3
 800bc00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d106      	bne.n	800bc14 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	2101      	movs	r1, #1
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7ff fa1e 	bl	800b050 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	2102      	movs	r1, #2
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7ff fa02 	bl	800b024 <LL_ADC_GetOffsetChannel>
 800bc20:	4603      	mov	r3, r0
 800bc22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10a      	bne.n	800bc40 <HAL_ADC_ConfigChannel+0x2e8>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	2102      	movs	r1, #2
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7ff f9f7 	bl	800b024 <LL_ADC_GetOffsetChannel>
 800bc36:	4603      	mov	r3, r0
 800bc38:	0e9b      	lsrs	r3, r3, #26
 800bc3a:	f003 021f 	and.w	r2, r3, #31
 800bc3e:	e01e      	b.n	800bc7e <HAL_ADC_ConfigChannel+0x326>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2102      	movs	r1, #2
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7ff f9ec 	bl	800b024 <LL_ADC_GetOffsetChannel>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bc56:	fa93 f3a3 	rbit	r3, r3
 800bc5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800bc5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bc62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800bc66:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d101      	bne.n	800bc72 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800bc6e:	2320      	movs	r3, #32
 800bc70:	e004      	b.n	800bc7c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800bc72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bc76:	fab3 f383 	clz	r3, r3
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d105      	bne.n	800bc96 <HAL_ADC_ConfigChannel+0x33e>
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	0e9b      	lsrs	r3, r3, #26
 800bc90:	f003 031f 	and.w	r3, r3, #31
 800bc94:	e016      	b.n	800bcc4 <HAL_ADC_ConfigChannel+0x36c>
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bca2:	fa93 f3a3 	rbit	r3, r3
 800bca6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800bca8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bcaa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800bcae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d101      	bne.n	800bcba <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800bcb6:	2320      	movs	r3, #32
 800bcb8:	e004      	b.n	800bcc4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800bcba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bcbe:	fab3 f383 	clz	r3, r3
 800bcc2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d106      	bne.n	800bcd6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2200      	movs	r2, #0
 800bcce:	2102      	movs	r1, #2
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7ff f9bd 	bl	800b050 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	2103      	movs	r1, #3
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7ff f9a1 	bl	800b024 <LL_ADC_GetOffsetChannel>
 800bce2:	4603      	mov	r3, r0
 800bce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d10a      	bne.n	800bd02 <HAL_ADC_ConfigChannel+0x3aa>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	2103      	movs	r1, #3
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7ff f996 	bl	800b024 <LL_ADC_GetOffsetChannel>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	0e9b      	lsrs	r3, r3, #26
 800bcfc:	f003 021f 	and.w	r2, r3, #31
 800bd00:	e017      	b.n	800bd32 <HAL_ADC_ConfigChannel+0x3da>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	2103      	movs	r1, #3
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7ff f98b 	bl	800b024 <LL_ADC_GetOffsetChannel>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd14:	fa93 f3a3 	rbit	r3, r3
 800bd18:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800bd1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bd1c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800bd1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d101      	bne.n	800bd28 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800bd24:	2320      	movs	r3, #32
 800bd26:	e003      	b.n	800bd30 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800bd28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bd2a:	fab3 f383 	clz	r3, r3
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d105      	bne.n	800bd4a <HAL_ADC_ConfigChannel+0x3f2>
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	0e9b      	lsrs	r3, r3, #26
 800bd44:	f003 031f 	and.w	r3, r3, #31
 800bd48:	e011      	b.n	800bd6e <HAL_ADC_ConfigChannel+0x416>
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bd52:	fa93 f3a3 	rbit	r3, r3
 800bd56:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800bd58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800bd5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d101      	bne.n	800bd66 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800bd62:	2320      	movs	r3, #32
 800bd64:	e003      	b.n	800bd6e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800bd66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd68:	fab3 f383 	clz	r3, r3
 800bd6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d106      	bne.n	800bd80 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	2200      	movs	r2, #0
 800bd78:	2103      	movs	r1, #3
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7ff f968 	bl	800b050 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7ff fad9 	bl	800b33c <LL_ADC_IsEnabled>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f040 813d 	bne.w	800c00c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6818      	ldr	r0, [r3, #0]
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	6819      	ldr	r1, [r3, #0]
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	68db      	ldr	r3, [r3, #12]
 800bd9e:	461a      	mov	r2, r3
 800bda0:	f7ff fa24 	bl	800b1ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	4aa2      	ldr	r2, [pc, #648]	@ (800c034 <HAL_ADC_ConfigChannel+0x6dc>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	f040 812e 	bne.w	800c00c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d10b      	bne.n	800bdd8 <HAL_ADC_ConfigChannel+0x480>
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	0e9b      	lsrs	r3, r3, #26
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	f003 031f 	and.w	r3, r3, #31
 800bdcc:	2b09      	cmp	r3, #9
 800bdce:	bf94      	ite	ls
 800bdd0:	2301      	movls	r3, #1
 800bdd2:	2300      	movhi	r3, #0
 800bdd4:	b2db      	uxtb	r3, r3
 800bdd6:	e019      	b.n	800be0c <HAL_ADC_ConfigChannel+0x4b4>
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bdde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bde0:	fa93 f3a3 	rbit	r3, r3
 800bde4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800bde6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bde8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800bdea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d101      	bne.n	800bdf4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800bdf0:	2320      	movs	r3, #32
 800bdf2:	e003      	b.n	800bdfc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800bdf4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bdf6:	fab3 f383 	clz	r3, r3
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	f003 031f 	and.w	r3, r3, #31
 800be02:	2b09      	cmp	r3, #9
 800be04:	bf94      	ite	ls
 800be06:	2301      	movls	r3, #1
 800be08:	2300      	movhi	r3, #0
 800be0a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d079      	beq.n	800bf04 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d107      	bne.n	800be2c <HAL_ADC_ConfigChannel+0x4d4>
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	0e9b      	lsrs	r3, r3, #26
 800be22:	3301      	adds	r3, #1
 800be24:	069b      	lsls	r3, r3, #26
 800be26:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800be2a:	e015      	b.n	800be58 <HAL_ADC_ConfigChannel+0x500>
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be34:	fa93 f3a3 	rbit	r3, r3
 800be38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800be3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be3c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800be3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be40:	2b00      	cmp	r3, #0
 800be42:	d101      	bne.n	800be48 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800be44:	2320      	movs	r3, #32
 800be46:	e003      	b.n	800be50 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800be48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be4a:	fab3 f383 	clz	r3, r3
 800be4e:	b2db      	uxtb	r3, r3
 800be50:	3301      	adds	r3, #1
 800be52:	069b      	lsls	r3, r3, #26
 800be54:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be60:	2b00      	cmp	r3, #0
 800be62:	d109      	bne.n	800be78 <HAL_ADC_ConfigChannel+0x520>
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	0e9b      	lsrs	r3, r3, #26
 800be6a:	3301      	adds	r3, #1
 800be6c:	f003 031f 	and.w	r3, r3, #31
 800be70:	2101      	movs	r1, #1
 800be72:	fa01 f303 	lsl.w	r3, r1, r3
 800be76:	e017      	b.n	800bea8 <HAL_ADC_ConfigChannel+0x550>
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be80:	fa93 f3a3 	rbit	r3, r3
 800be84:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800be86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be88:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800be8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d101      	bne.n	800be94 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800be90:	2320      	movs	r3, #32
 800be92:	e003      	b.n	800be9c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800be94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be96:	fab3 f383 	clz	r3, r3
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	3301      	adds	r3, #1
 800be9e:	f003 031f 	and.w	r3, r3, #31
 800bea2:	2101      	movs	r1, #1
 800bea4:	fa01 f303 	lsl.w	r3, r1, r3
 800bea8:	ea42 0103 	orr.w	r1, r2, r3
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d10a      	bne.n	800bece <HAL_ADC_ConfigChannel+0x576>
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	0e9b      	lsrs	r3, r3, #26
 800bebe:	3301      	adds	r3, #1
 800bec0:	f003 021f 	and.w	r2, r3, #31
 800bec4:	4613      	mov	r3, r2
 800bec6:	005b      	lsls	r3, r3, #1
 800bec8:	4413      	add	r3, r2
 800beca:	051b      	lsls	r3, r3, #20
 800becc:	e018      	b.n	800bf00 <HAL_ADC_ConfigChannel+0x5a8>
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bed6:	fa93 f3a3 	rbit	r3, r3
 800beda:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800bedc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bede:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800bee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d101      	bne.n	800beea <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800bee6:	2320      	movs	r3, #32
 800bee8:	e003      	b.n	800bef2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800beea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beec:	fab3 f383 	clz	r3, r3
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	3301      	adds	r3, #1
 800bef4:	f003 021f 	and.w	r2, r3, #31
 800bef8:	4613      	mov	r3, r2
 800befa:	005b      	lsls	r3, r3, #1
 800befc:	4413      	add	r3, r2
 800befe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bf00:	430b      	orrs	r3, r1
 800bf02:	e07e      	b.n	800c002 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d107      	bne.n	800bf20 <HAL_ADC_ConfigChannel+0x5c8>
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	0e9b      	lsrs	r3, r3, #26
 800bf16:	3301      	adds	r3, #1
 800bf18:	069b      	lsls	r3, r3, #26
 800bf1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bf1e:	e015      	b.n	800bf4c <HAL_ADC_ConfigChannel+0x5f4>
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf28:	fa93 f3a3 	rbit	r3, r3
 800bf2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800bf2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf30:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800bf32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d101      	bne.n	800bf3c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800bf38:	2320      	movs	r3, #32
 800bf3a:	e003      	b.n	800bf44 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800bf3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf3e:	fab3 f383 	clz	r3, r3
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	3301      	adds	r3, #1
 800bf46:	069b      	lsls	r3, r3, #26
 800bf48:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d109      	bne.n	800bf6c <HAL_ADC_ConfigChannel+0x614>
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	0e9b      	lsrs	r3, r3, #26
 800bf5e:	3301      	adds	r3, #1
 800bf60:	f003 031f 	and.w	r3, r3, #31
 800bf64:	2101      	movs	r1, #1
 800bf66:	fa01 f303 	lsl.w	r3, r1, r3
 800bf6a:	e017      	b.n	800bf9c <HAL_ADC_ConfigChannel+0x644>
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf72:	6a3b      	ldr	r3, [r7, #32]
 800bf74:	fa93 f3a3 	rbit	r3, r3
 800bf78:	61fb      	str	r3, [r7, #28]
  return result;
 800bf7a:	69fb      	ldr	r3, [r7, #28]
 800bf7c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800bf7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d101      	bne.n	800bf88 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800bf84:	2320      	movs	r3, #32
 800bf86:	e003      	b.n	800bf90 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800bf88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf8a:	fab3 f383 	clz	r3, r3
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	3301      	adds	r3, #1
 800bf92:	f003 031f 	and.w	r3, r3, #31
 800bf96:	2101      	movs	r1, #1
 800bf98:	fa01 f303 	lsl.w	r3, r1, r3
 800bf9c:	ea42 0103 	orr.w	r1, r2, r3
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d10d      	bne.n	800bfc8 <HAL_ADC_ConfigChannel+0x670>
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	0e9b      	lsrs	r3, r3, #26
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	f003 021f 	and.w	r2, r3, #31
 800bfb8:	4613      	mov	r3, r2
 800bfba:	005b      	lsls	r3, r3, #1
 800bfbc:	4413      	add	r3, r2
 800bfbe:	3b1e      	subs	r3, #30
 800bfc0:	051b      	lsls	r3, r3, #20
 800bfc2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bfc6:	e01b      	b.n	800c000 <HAL_ADC_ConfigChannel+0x6a8>
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	fa93 f3a3 	rbit	r3, r3
 800bfd4:	613b      	str	r3, [r7, #16]
  return result;
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d101      	bne.n	800bfe4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800bfe0:	2320      	movs	r3, #32
 800bfe2:	e003      	b.n	800bfec <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800bfe4:	69bb      	ldr	r3, [r7, #24]
 800bfe6:	fab3 f383 	clz	r3, r3
 800bfea:	b2db      	uxtb	r3, r3
 800bfec:	3301      	adds	r3, #1
 800bfee:	f003 021f 	and.w	r2, r3, #31
 800bff2:	4613      	mov	r3, r2
 800bff4:	005b      	lsls	r3, r3, #1
 800bff6:	4413      	add	r3, r2
 800bff8:	3b1e      	subs	r3, #30
 800bffa:	051b      	lsls	r3, r3, #20
 800bffc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c000:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800c002:	683a      	ldr	r2, [r7, #0]
 800c004:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c006:	4619      	mov	r1, r3
 800c008:	f7ff f8c5 	bl	800b196 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	4b09      	ldr	r3, [pc, #36]	@ (800c038 <HAL_ADC_ConfigChannel+0x6e0>)
 800c012:	4013      	ands	r3, r2
 800c014:	2b00      	cmp	r3, #0
 800c016:	f000 80be 	beq.w	800c196 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c022:	d004      	beq.n	800c02e <HAL_ADC_ConfigChannel+0x6d6>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4a04      	ldr	r2, [pc, #16]	@ (800c03c <HAL_ADC_ConfigChannel+0x6e4>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d10a      	bne.n	800c044 <HAL_ADC_ConfigChannel+0x6ec>
 800c02e:	4b04      	ldr	r3, [pc, #16]	@ (800c040 <HAL_ADC_ConfigChannel+0x6e8>)
 800c030:	e009      	b.n	800c046 <HAL_ADC_ConfigChannel+0x6ee>
 800c032:	bf00      	nop
 800c034:	407f0000 	.word	0x407f0000
 800c038:	80080000 	.word	0x80080000
 800c03c:	50000100 	.word	0x50000100
 800c040:	50000300 	.word	0x50000300
 800c044:	4b59      	ldr	r3, [pc, #356]	@ (800c1ac <HAL_ADC_ConfigChannel+0x854>)
 800c046:	4618      	mov	r0, r3
 800c048:	f7fe ffba 	bl	800afc0 <LL_ADC_GetCommonPathInternalCh>
 800c04c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4a56      	ldr	r2, [pc, #344]	@ (800c1b0 <HAL_ADC_ConfigChannel+0x858>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d004      	beq.n	800c064 <HAL_ADC_ConfigChannel+0x70c>
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4a55      	ldr	r2, [pc, #340]	@ (800c1b4 <HAL_ADC_ConfigChannel+0x85c>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d13a      	bne.n	800c0da <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800c064:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c068:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d134      	bne.n	800c0da <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c078:	d005      	beq.n	800c086 <HAL_ADC_ConfigChannel+0x72e>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4a4e      	ldr	r2, [pc, #312]	@ (800c1b8 <HAL_ADC_ConfigChannel+0x860>)
 800c080:	4293      	cmp	r3, r2
 800c082:	f040 8085 	bne.w	800c190 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c08e:	d004      	beq.n	800c09a <HAL_ADC_ConfigChannel+0x742>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4a49      	ldr	r2, [pc, #292]	@ (800c1bc <HAL_ADC_ConfigChannel+0x864>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d101      	bne.n	800c09e <HAL_ADC_ConfigChannel+0x746>
 800c09a:	4a49      	ldr	r2, [pc, #292]	@ (800c1c0 <HAL_ADC_ConfigChannel+0x868>)
 800c09c:	e000      	b.n	800c0a0 <HAL_ADC_ConfigChannel+0x748>
 800c09e:	4a43      	ldr	r2, [pc, #268]	@ (800c1ac <HAL_ADC_ConfigChannel+0x854>)
 800c0a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c0a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	4610      	mov	r0, r2
 800c0ac:	f7fe ff75 	bl	800af9a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c0b0:	4b44      	ldr	r3, [pc, #272]	@ (800c1c4 <HAL_ADC_ConfigChannel+0x86c>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	099b      	lsrs	r3, r3, #6
 800c0b6:	4a44      	ldr	r2, [pc, #272]	@ (800c1c8 <HAL_ADC_ConfigChannel+0x870>)
 800c0b8:	fba2 2303 	umull	r2, r3, r2, r3
 800c0bc:	099b      	lsrs	r3, r3, #6
 800c0be:	1c5a      	adds	r2, r3, #1
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	005b      	lsls	r3, r3, #1
 800c0c4:	4413      	add	r3, r2
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800c0ca:	e002      	b.n	800c0d2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	3b01      	subs	r3, #1
 800c0d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d1f9      	bne.n	800c0cc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c0d8:	e05a      	b.n	800c190 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4a3b      	ldr	r2, [pc, #236]	@ (800c1cc <HAL_ADC_ConfigChannel+0x874>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d125      	bne.n	800c130 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800c0e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c0e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d11f      	bne.n	800c130 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a31      	ldr	r2, [pc, #196]	@ (800c1bc <HAL_ADC_ConfigChannel+0x864>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d104      	bne.n	800c104 <HAL_ADC_ConfigChannel+0x7ac>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a34      	ldr	r2, [pc, #208]	@ (800c1d0 <HAL_ADC_ConfigChannel+0x878>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d047      	beq.n	800c194 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c10c:	d004      	beq.n	800c118 <HAL_ADC_ConfigChannel+0x7c0>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	4a2a      	ldr	r2, [pc, #168]	@ (800c1bc <HAL_ADC_ConfigChannel+0x864>)
 800c114:	4293      	cmp	r3, r2
 800c116:	d101      	bne.n	800c11c <HAL_ADC_ConfigChannel+0x7c4>
 800c118:	4a29      	ldr	r2, [pc, #164]	@ (800c1c0 <HAL_ADC_ConfigChannel+0x868>)
 800c11a:	e000      	b.n	800c11e <HAL_ADC_ConfigChannel+0x7c6>
 800c11c:	4a23      	ldr	r2, [pc, #140]	@ (800c1ac <HAL_ADC_ConfigChannel+0x854>)
 800c11e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c122:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c126:	4619      	mov	r1, r3
 800c128:	4610      	mov	r0, r2
 800c12a:	f7fe ff36 	bl	800af9a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c12e:	e031      	b.n	800c194 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a27      	ldr	r2, [pc, #156]	@ (800c1d4 <HAL_ADC_ConfigChannel+0x87c>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d12d      	bne.n	800c196 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800c13a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c13e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c142:	2b00      	cmp	r3, #0
 800c144:	d127      	bne.n	800c196 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4a1c      	ldr	r2, [pc, #112]	@ (800c1bc <HAL_ADC_ConfigChannel+0x864>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d022      	beq.n	800c196 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c158:	d004      	beq.n	800c164 <HAL_ADC_ConfigChannel+0x80c>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4a17      	ldr	r2, [pc, #92]	@ (800c1bc <HAL_ADC_ConfigChannel+0x864>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d101      	bne.n	800c168 <HAL_ADC_ConfigChannel+0x810>
 800c164:	4a16      	ldr	r2, [pc, #88]	@ (800c1c0 <HAL_ADC_ConfigChannel+0x868>)
 800c166:	e000      	b.n	800c16a <HAL_ADC_ConfigChannel+0x812>
 800c168:	4a10      	ldr	r2, [pc, #64]	@ (800c1ac <HAL_ADC_ConfigChannel+0x854>)
 800c16a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c16e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c172:	4619      	mov	r1, r3
 800c174:	4610      	mov	r0, r2
 800c176:	f7fe ff10 	bl	800af9a <LL_ADC_SetCommonPathInternalCh>
 800c17a:	e00c      	b.n	800c196 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c180:	f043 0220 	orr.w	r2, r3, #32
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800c188:	2301      	movs	r3, #1
 800c18a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800c18e:	e002      	b.n	800c196 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c190:	bf00      	nop
 800c192:	e000      	b.n	800c196 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c194:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800c19e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	37d8      	adds	r7, #216	@ 0xd8
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	50000700 	.word	0x50000700
 800c1b0:	c3210000 	.word	0xc3210000
 800c1b4:	90c00010 	.word	0x90c00010
 800c1b8:	50000600 	.word	0x50000600
 800c1bc:	50000100 	.word	0x50000100
 800c1c0:	50000300 	.word	0x50000300
 800c1c4:	200005c0 	.word	0x200005c0
 800c1c8:	053e2d63 	.word	0x053e2d63
 800c1cc:	c7520000 	.word	0xc7520000
 800c1d0:	50000500 	.word	0x50000500
 800c1d4:	cb840000 	.word	0xcb840000

0800c1d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7ff f8a7 	bl	800b33c <LL_ADC_IsEnabled>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d176      	bne.n	800c2e2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	689a      	ldr	r2, [r3, #8]
 800c1fa:	4b3c      	ldr	r3, [pc, #240]	@ (800c2ec <ADC_Enable+0x114>)
 800c1fc:	4013      	ands	r3, r2
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d00d      	beq.n	800c21e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c206:	f043 0210 	orr.w	r2, r3, #16
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c212:	f043 0201 	orr.w	r2, r3, #1
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800c21a:	2301      	movs	r3, #1
 800c21c:	e062      	b.n	800c2e4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	4618      	mov	r0, r3
 800c224:	f7ff f862 	bl	800b2ec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c230:	d004      	beq.n	800c23c <ADC_Enable+0x64>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	4a2e      	ldr	r2, [pc, #184]	@ (800c2f0 <ADC_Enable+0x118>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d101      	bne.n	800c240 <ADC_Enable+0x68>
 800c23c:	4b2d      	ldr	r3, [pc, #180]	@ (800c2f4 <ADC_Enable+0x11c>)
 800c23e:	e000      	b.n	800c242 <ADC_Enable+0x6a>
 800c240:	4b2d      	ldr	r3, [pc, #180]	@ (800c2f8 <ADC_Enable+0x120>)
 800c242:	4618      	mov	r0, r3
 800c244:	f7fe febc 	bl	800afc0 <LL_ADC_GetCommonPathInternalCh>
 800c248:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800c24a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d013      	beq.n	800c27a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c252:	4b2a      	ldr	r3, [pc, #168]	@ (800c2fc <ADC_Enable+0x124>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	099b      	lsrs	r3, r3, #6
 800c258:	4a29      	ldr	r2, [pc, #164]	@ (800c300 <ADC_Enable+0x128>)
 800c25a:	fba2 2303 	umull	r2, r3, r2, r3
 800c25e:	099b      	lsrs	r3, r3, #6
 800c260:	1c5a      	adds	r2, r3, #1
 800c262:	4613      	mov	r3, r2
 800c264:	005b      	lsls	r3, r3, #1
 800c266:	4413      	add	r3, r2
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800c26c:	e002      	b.n	800c274 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	3b01      	subs	r3, #1
 800c272:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d1f9      	bne.n	800c26e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800c27a:	f7fe fe6f 	bl	800af5c <HAL_GetTick>
 800c27e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c280:	e028      	b.n	800c2d4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	4618      	mov	r0, r3
 800c288:	f7ff f858 	bl	800b33c <LL_ADC_IsEnabled>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d104      	bne.n	800c29c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4618      	mov	r0, r3
 800c298:	f7ff f828 	bl	800b2ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c29c:	f7fe fe5e 	bl	800af5c <HAL_GetTick>
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	1ad3      	subs	r3, r2, r3
 800c2a6:	2b02      	cmp	r3, #2
 800c2a8:	d914      	bls.n	800c2d4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f003 0301 	and.w	r3, r3, #1
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d00d      	beq.n	800c2d4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2bc:	f043 0210 	orr.w	r2, r3, #16
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c2c8:	f043 0201 	orr.w	r2, r3, #1
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	e007      	b.n	800c2e4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f003 0301 	and.w	r3, r3, #1
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d1cf      	bne.n	800c282 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c2e2:	2300      	movs	r3, #0
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3710      	adds	r7, #16
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	8000003f 	.word	0x8000003f
 800c2f0:	50000100 	.word	0x50000100
 800c2f4:	50000300 	.word	0x50000300
 800c2f8:	50000700 	.word	0x50000700
 800c2fc:	200005c0 	.word	0x200005c0
 800c300:	053e2d63 	.word	0x053e2d63

0800c304 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b084      	sub	sp, #16
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	4618      	mov	r0, r3
 800c312:	f7ff f826 	bl	800b362 <LL_ADC_IsDisableOngoing>
 800c316:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7ff f80d 	bl	800b33c <LL_ADC_IsEnabled>
 800c322:	4603      	mov	r3, r0
 800c324:	2b00      	cmp	r3, #0
 800c326:	d047      	beq.n	800c3b8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d144      	bne.n	800c3b8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	f003 030d 	and.w	r3, r3, #13
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d10c      	bne.n	800c356 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4618      	mov	r0, r3
 800c342:	f7fe ffe7 	bl	800b314 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2203      	movs	r2, #3
 800c34c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800c34e:	f7fe fe05 	bl	800af5c <HAL_GetTick>
 800c352:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c354:	e029      	b.n	800c3aa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c35a:	f043 0210 	orr.w	r2, r3, #16
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c366:	f043 0201 	orr.w	r2, r3, #1
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800c36e:	2301      	movs	r3, #1
 800c370:	e023      	b.n	800c3ba <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800c372:	f7fe fdf3 	bl	800af5c <HAL_GetTick>
 800c376:	4602      	mov	r2, r0
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	1ad3      	subs	r3, r2, r3
 800c37c:	2b02      	cmp	r3, #2
 800c37e:	d914      	bls.n	800c3aa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	689b      	ldr	r3, [r3, #8]
 800c386:	f003 0301 	and.w	r3, r3, #1
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00d      	beq.n	800c3aa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c392:	f043 0210 	orr.w	r2, r3, #16
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c39e:	f043 0201 	orr.w	r2, r3, #1
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	e007      	b.n	800c3ba <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	f003 0301 	and.w	r3, r3, #1
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d1dc      	bne.n	800c372 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c3b8:	2300      	movs	r3, #0
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b084      	sub	sp, #16
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3ce:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d14b      	bne.n	800c474 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f003 0308 	and.w	r3, r3, #8
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d021      	beq.n	800c43a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7fe fe8c 	bl	800b118 <LL_ADC_REG_IsTriggerSourceSWStart>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d032      	beq.n	800c46c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	68db      	ldr	r3, [r3, #12]
 800c40c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c410:	2b00      	cmp	r3, #0
 800c412:	d12b      	bne.n	800c46c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c418:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c424:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d11f      	bne.n	800c46c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c430:	f043 0201 	orr.w	r2, r3, #1
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c438:	e018      	b.n	800c46c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	68db      	ldr	r3, [r3, #12]
 800c440:	f003 0302 	and.w	r3, r3, #2
 800c444:	2b00      	cmp	r3, #0
 800c446:	d111      	bne.n	800c46c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c44c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c458:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d105      	bne.n	800c46c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c464:	f043 0201 	orr.w	r2, r3, #1
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c46c:	68f8      	ldr	r0, [r7, #12]
 800c46e:	f7ff fa55 	bl	800b91c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c472:	e00e      	b.n	800c492 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c478:	f003 0310 	and.w	r3, r3, #16
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d003      	beq.n	800c488 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800c480:	68f8      	ldr	r0, [r7, #12]
 800c482:	f7ff fa5f 	bl	800b944 <HAL_ADC_ErrorCallback>
}
 800c486:	e004      	b.n	800c492 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c48c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	4798      	blx	r3
}
 800c492:	bf00      	nop
 800c494:	3710      	adds	r7, #16
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800c49a:	b580      	push	{r7, lr}
 800c49c:	b084      	sub	sp, #16
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4a6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c4a8:	68f8      	ldr	r0, [r7, #12]
 800c4aa:	f7ff fa41 	bl	800b930 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c4ae:	bf00      	nop
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b084      	sub	sp, #16
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4c2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c4d4:	f043 0204 	orr.w	r2, r3, #4
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c4dc:	68f8      	ldr	r0, [r7, #12]
 800c4de:	f7ff fa31 	bl	800b944 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c4e2:	bf00      	nop
 800c4e4:	3710      	adds	r7, #16
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <LL_ADC_IsEnabled>:
{
 800c4ea:	b480      	push	{r7}
 800c4ec:	b083      	sub	sp, #12
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	689b      	ldr	r3, [r3, #8]
 800c4f6:	f003 0301 	and.w	r3, r3, #1
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d101      	bne.n	800c502 <LL_ADC_IsEnabled+0x18>
 800c4fe:	2301      	movs	r3, #1
 800c500:	e000      	b.n	800c504 <LL_ADC_IsEnabled+0x1a>
 800c502:	2300      	movs	r3, #0
}
 800c504:	4618      	mov	r0, r3
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <LL_ADC_StartCalibration>:
{
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	689b      	ldr	r3, [r3, #8]
 800c51e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800c522:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c526:	683a      	ldr	r2, [r7, #0]
 800c528:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800c52c:	4313      	orrs	r3, r2
 800c52e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	609a      	str	r2, [r3, #8]
}
 800c536:	bf00      	nop
 800c538:	370c      	adds	r7, #12
 800c53a:	46bd      	mov	sp, r7
 800c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c540:	4770      	bx	lr

0800c542 <LL_ADC_IsCalibrationOnGoing>:
{
 800c542:	b480      	push	{r7}
 800c544:	b083      	sub	sp, #12
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c552:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c556:	d101      	bne.n	800c55c <LL_ADC_IsCalibrationOnGoing+0x1a>
 800c558:	2301      	movs	r3, #1
 800c55a:	e000      	b.n	800c55e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	370c      	adds	r7, #12
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr

0800c56a <LL_ADC_REG_IsConversionOngoing>:
{
 800c56a:	b480      	push	{r7}
 800c56c:	b083      	sub	sp, #12
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	689b      	ldr	r3, [r3, #8]
 800c576:	f003 0304 	and.w	r3, r3, #4
 800c57a:	2b04      	cmp	r3, #4
 800c57c:	d101      	bne.n	800c582 <LL_ADC_REG_IsConversionOngoing+0x18>
 800c57e:	2301      	movs	r3, #1
 800c580:	e000      	b.n	800c584 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800c582:	2300      	movs	r3, #0
}
 800c584:	4618      	mov	r0, r3
 800c586:	370c      	adds	r7, #12
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr

0800c590 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800c59a:	2300      	movs	r3, #0
 800c59c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d101      	bne.n	800c5ac <HAL_ADCEx_Calibration_Start+0x1c>
 800c5a8:	2302      	movs	r3, #2
 800c5aa:	e04d      	b.n	800c648 <HAL_ADCEx_Calibration_Start+0xb8>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f7ff fea5 	bl	800c304 <ADC_Disable>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800c5be:	7bfb      	ldrb	r3, [r7, #15]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d136      	bne.n	800c632 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5c8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800c5cc:	f023 0302 	bic.w	r3, r3, #2
 800c5d0:	f043 0202 	orr.w	r2, r3, #2
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	6839      	ldr	r1, [r7, #0]
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7ff ff96 	bl	800c510 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800c5e4:	e014      	b.n	800c610 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	4a18      	ldr	r2, [pc, #96]	@ (800c650 <HAL_ADCEx_Calibration_Start+0xc0>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d90d      	bls.n	800c610 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5f8:	f023 0312 	bic.w	r3, r3, #18
 800c5fc:	f043 0210 	orr.w	r2, r3, #16
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2200      	movs	r2, #0
 800c608:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800c60c:	2301      	movs	r3, #1
 800c60e:	e01b      	b.n	800c648 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	4618      	mov	r0, r3
 800c616:	f7ff ff94 	bl	800c542 <LL_ADC_IsCalibrationOnGoing>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d1e2      	bne.n	800c5e6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c624:	f023 0303 	bic.w	r3, r3, #3
 800c628:	f043 0201 	orr.w	r2, r3, #1
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c630:	e005      	b.n	800c63e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c636:	f043 0210 	orr.w	r2, r3, #16
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2200      	movs	r2, #0
 800c642:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800c646:	7bfb      	ldrb	r3, [r7, #15]
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3710      	adds	r7, #16
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	0004de01 	.word	0x0004de01

0800c654 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800c654:	b590      	push	{r4, r7, lr}
 800c656:	b0a1      	sub	sp, #132	@ 0x84
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c65e:	2300      	movs	r3, #0
 800c660:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d101      	bne.n	800c672 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800c66e:	2302      	movs	r3, #2
 800c670:	e0e7      	b.n	800c842 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2201      	movs	r2, #1
 800c676:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800c67a:	2300      	movs	r3, #0
 800c67c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800c67e:	2300      	movs	r3, #0
 800c680:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c68a:	d102      	bne.n	800c692 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800c68c:	4b6f      	ldr	r3, [pc, #444]	@ (800c84c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c68e:	60bb      	str	r3, [r7, #8]
 800c690:	e009      	b.n	800c6a6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a6e      	ldr	r2, [pc, #440]	@ (800c850 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d102      	bne.n	800c6a2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800c69c:	4b6d      	ldr	r3, [pc, #436]	@ (800c854 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800c69e:	60bb      	str	r3, [r7, #8]
 800c6a0:	e001      	b.n	800c6a6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d10b      	bne.n	800c6c4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6b0:	f043 0220 	orr.w	r2, r3, #32
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	e0be      	b.n	800c842 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7ff ff4f 	bl	800c56a <LL_ADC_REG_IsConversionOngoing>
 800c6cc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7ff ff49 	bl	800c56a <LL_ADC_REG_IsConversionOngoing>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	f040 80a0 	bne.w	800c820 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800c6e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	f040 809c 	bne.w	800c820 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c6f0:	d004      	beq.n	800c6fc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4a55      	ldr	r2, [pc, #340]	@ (800c84c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d101      	bne.n	800c700 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800c6fc:	4b56      	ldr	r3, [pc, #344]	@ (800c858 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800c6fe:	e000      	b.n	800c702 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800c700:	4b56      	ldr	r3, [pc, #344]	@ (800c85c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800c702:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d04b      	beq.n	800c7a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800c70c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c70e:	689b      	ldr	r3, [r3, #8]
 800c710:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	6859      	ldr	r1, [r3, #4]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c71e:	035b      	lsls	r3, r3, #13
 800c720:	430b      	orrs	r3, r1
 800c722:	431a      	orrs	r2, r3
 800c724:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c726:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c730:	d004      	beq.n	800c73c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4a45      	ldr	r2, [pc, #276]	@ (800c84c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d10f      	bne.n	800c75c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800c73c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800c740:	f7ff fed3 	bl	800c4ea <LL_ADC_IsEnabled>
 800c744:	4604      	mov	r4, r0
 800c746:	4841      	ldr	r0, [pc, #260]	@ (800c84c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c748:	f7ff fecf 	bl	800c4ea <LL_ADC_IsEnabled>
 800c74c:	4603      	mov	r3, r0
 800c74e:	4323      	orrs	r3, r4
 800c750:	2b00      	cmp	r3, #0
 800c752:	bf0c      	ite	eq
 800c754:	2301      	moveq	r3, #1
 800c756:	2300      	movne	r3, #0
 800c758:	b2db      	uxtb	r3, r3
 800c75a:	e012      	b.n	800c782 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800c75c:	483c      	ldr	r0, [pc, #240]	@ (800c850 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800c75e:	f7ff fec4 	bl	800c4ea <LL_ADC_IsEnabled>
 800c762:	4604      	mov	r4, r0
 800c764:	483b      	ldr	r0, [pc, #236]	@ (800c854 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800c766:	f7ff fec0 	bl	800c4ea <LL_ADC_IsEnabled>
 800c76a:	4603      	mov	r3, r0
 800c76c:	431c      	orrs	r4, r3
 800c76e:	483c      	ldr	r0, [pc, #240]	@ (800c860 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800c770:	f7ff febb 	bl	800c4ea <LL_ADC_IsEnabled>
 800c774:	4603      	mov	r3, r0
 800c776:	4323      	orrs	r3, r4
 800c778:	2b00      	cmp	r3, #0
 800c77a:	bf0c      	ite	eq
 800c77c:	2301      	moveq	r3, #1
 800c77e:	2300      	movne	r3, #0
 800c780:	b2db      	uxtb	r3, r3
 800c782:	2b00      	cmp	r3, #0
 800c784:	d056      	beq.n	800c834 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800c786:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c788:	689b      	ldr	r3, [r3, #8]
 800c78a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c78e:	f023 030f 	bic.w	r3, r3, #15
 800c792:	683a      	ldr	r2, [r7, #0]
 800c794:	6811      	ldr	r1, [r2, #0]
 800c796:	683a      	ldr	r2, [r7, #0]
 800c798:	6892      	ldr	r2, [r2, #8]
 800c79a:	430a      	orrs	r2, r1
 800c79c:	431a      	orrs	r2, r3
 800c79e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c7a0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c7a2:	e047      	b.n	800c834 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800c7a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c7a6:	689b      	ldr	r3, [r3, #8]
 800c7a8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c7ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c7ae:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c7b8:	d004      	beq.n	800c7c4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a23      	ldr	r2, [pc, #140]	@ (800c84c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d10f      	bne.n	800c7e4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800c7c4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800c7c8:	f7ff fe8f 	bl	800c4ea <LL_ADC_IsEnabled>
 800c7cc:	4604      	mov	r4, r0
 800c7ce:	481f      	ldr	r0, [pc, #124]	@ (800c84c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c7d0:	f7ff fe8b 	bl	800c4ea <LL_ADC_IsEnabled>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	4323      	orrs	r3, r4
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	bf0c      	ite	eq
 800c7dc:	2301      	moveq	r3, #1
 800c7de:	2300      	movne	r3, #0
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	e012      	b.n	800c80a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800c7e4:	481a      	ldr	r0, [pc, #104]	@ (800c850 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800c7e6:	f7ff fe80 	bl	800c4ea <LL_ADC_IsEnabled>
 800c7ea:	4604      	mov	r4, r0
 800c7ec:	4819      	ldr	r0, [pc, #100]	@ (800c854 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800c7ee:	f7ff fe7c 	bl	800c4ea <LL_ADC_IsEnabled>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	431c      	orrs	r4, r3
 800c7f6:	481a      	ldr	r0, [pc, #104]	@ (800c860 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800c7f8:	f7ff fe77 	bl	800c4ea <LL_ADC_IsEnabled>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	4323      	orrs	r3, r4
 800c800:	2b00      	cmp	r3, #0
 800c802:	bf0c      	ite	eq
 800c804:	2301      	moveq	r3, #1
 800c806:	2300      	movne	r3, #0
 800c808:	b2db      	uxtb	r3, r3
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d012      	beq.n	800c834 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800c80e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c810:	689b      	ldr	r3, [r3, #8]
 800c812:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c816:	f023 030f 	bic.w	r3, r3, #15
 800c81a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c81c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c81e:	e009      	b.n	800c834 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c824:	f043 0220 	orr.w	r2, r3, #32
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800c82c:	2301      	movs	r3, #1
 800c82e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800c832:	e000      	b.n	800c836 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c834:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2200      	movs	r2, #0
 800c83a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800c83e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800c842:	4618      	mov	r0, r3
 800c844:	3784      	adds	r7, #132	@ 0x84
 800c846:	46bd      	mov	sp, r7
 800c848:	bd90      	pop	{r4, r7, pc}
 800c84a:	bf00      	nop
 800c84c:	50000100 	.word	0x50000100
 800c850:	50000400 	.word	0x50000400
 800c854:	50000500 	.word	0x50000500
 800c858:	50000300 	.word	0x50000300
 800c85c:	50000700 	.word	0x50000700
 800c860:	50000600 	.word	0x50000600

0800c864 <__NVIC_SetPriorityGrouping>:
{
 800c864:	b480      	push	{r7}
 800c866:	b085      	sub	sp, #20
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f003 0307 	and.w	r3, r3, #7
 800c872:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c874:	4b0c      	ldr	r3, [pc, #48]	@ (800c8a8 <__NVIC_SetPriorityGrouping+0x44>)
 800c876:	68db      	ldr	r3, [r3, #12]
 800c878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c87a:	68ba      	ldr	r2, [r7, #8]
 800c87c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c880:	4013      	ands	r3, r2
 800c882:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c88c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c896:	4a04      	ldr	r2, [pc, #16]	@ (800c8a8 <__NVIC_SetPriorityGrouping+0x44>)
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	60d3      	str	r3, [r2, #12]
}
 800c89c:	bf00      	nop
 800c89e:	3714      	adds	r7, #20
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a6:	4770      	bx	lr
 800c8a8:	e000ed00 	.word	0xe000ed00

0800c8ac <__NVIC_GetPriorityGrouping>:
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c8b0:	4b04      	ldr	r3, [pc, #16]	@ (800c8c4 <__NVIC_GetPriorityGrouping+0x18>)
 800c8b2:	68db      	ldr	r3, [r3, #12]
 800c8b4:	0a1b      	lsrs	r3, r3, #8
 800c8b6:	f003 0307 	and.w	r3, r3, #7
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr
 800c8c4:	e000ed00 	.word	0xe000ed00

0800c8c8 <__NVIC_EnableIRQ>:
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c8d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	db0b      	blt.n	800c8f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c8da:	79fb      	ldrb	r3, [r7, #7]
 800c8dc:	f003 021f 	and.w	r2, r3, #31
 800c8e0:	4907      	ldr	r1, [pc, #28]	@ (800c900 <__NVIC_EnableIRQ+0x38>)
 800c8e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c8e6:	095b      	lsrs	r3, r3, #5
 800c8e8:	2001      	movs	r0, #1
 800c8ea:	fa00 f202 	lsl.w	r2, r0, r2
 800c8ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c8f2:	bf00      	nop
 800c8f4:	370c      	adds	r7, #12
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fc:	4770      	bx	lr
 800c8fe:	bf00      	nop
 800c900:	e000e100 	.word	0xe000e100

0800c904 <__NVIC_SetPriority>:
{
 800c904:	b480      	push	{r7}
 800c906:	b083      	sub	sp, #12
 800c908:	af00      	add	r7, sp, #0
 800c90a:	4603      	mov	r3, r0
 800c90c:	6039      	str	r1, [r7, #0]
 800c90e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c914:	2b00      	cmp	r3, #0
 800c916:	db0a      	blt.n	800c92e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	b2da      	uxtb	r2, r3
 800c91c:	490c      	ldr	r1, [pc, #48]	@ (800c950 <__NVIC_SetPriority+0x4c>)
 800c91e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c922:	0112      	lsls	r2, r2, #4
 800c924:	b2d2      	uxtb	r2, r2
 800c926:	440b      	add	r3, r1
 800c928:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c92c:	e00a      	b.n	800c944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	b2da      	uxtb	r2, r3
 800c932:	4908      	ldr	r1, [pc, #32]	@ (800c954 <__NVIC_SetPriority+0x50>)
 800c934:	79fb      	ldrb	r3, [r7, #7]
 800c936:	f003 030f 	and.w	r3, r3, #15
 800c93a:	3b04      	subs	r3, #4
 800c93c:	0112      	lsls	r2, r2, #4
 800c93e:	b2d2      	uxtb	r2, r2
 800c940:	440b      	add	r3, r1
 800c942:	761a      	strb	r2, [r3, #24]
}
 800c944:	bf00      	nop
 800c946:	370c      	adds	r7, #12
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr
 800c950:	e000e100 	.word	0xe000e100
 800c954:	e000ed00 	.word	0xe000ed00

0800c958 <NVIC_EncodePriority>:
{
 800c958:	b480      	push	{r7}
 800c95a:	b089      	sub	sp, #36	@ 0x24
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	60b9      	str	r1, [r7, #8]
 800c962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f003 0307 	and.w	r3, r3, #7
 800c96a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	f1c3 0307 	rsb	r3, r3, #7
 800c972:	2b04      	cmp	r3, #4
 800c974:	bf28      	it	cs
 800c976:	2304      	movcs	r3, #4
 800c978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	3304      	adds	r3, #4
 800c97e:	2b06      	cmp	r3, #6
 800c980:	d902      	bls.n	800c988 <NVIC_EncodePriority+0x30>
 800c982:	69fb      	ldr	r3, [r7, #28]
 800c984:	3b03      	subs	r3, #3
 800c986:	e000      	b.n	800c98a <NVIC_EncodePriority+0x32>
 800c988:	2300      	movs	r3, #0
 800c98a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c98c:	f04f 32ff 	mov.w	r2, #4294967295
 800c990:	69bb      	ldr	r3, [r7, #24]
 800c992:	fa02 f303 	lsl.w	r3, r2, r3
 800c996:	43da      	mvns	r2, r3
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	401a      	ands	r2, r3
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c9a0:	f04f 31ff 	mov.w	r1, #4294967295
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	fa01 f303 	lsl.w	r3, r1, r3
 800c9aa:	43d9      	mvns	r1, r3
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c9b0:	4313      	orrs	r3, r2
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3724      	adds	r7, #36	@ 0x24
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9bc:	4770      	bx	lr
	...

0800c9c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	3b01      	subs	r3, #1
 800c9cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c9d0:	d301      	bcc.n	800c9d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	e00f      	b.n	800c9f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c9d6:	4a0a      	ldr	r2, [pc, #40]	@ (800ca00 <SysTick_Config+0x40>)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c9de:	210f      	movs	r1, #15
 800c9e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9e4:	f7ff ff8e 	bl	800c904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c9e8:	4b05      	ldr	r3, [pc, #20]	@ (800ca00 <SysTick_Config+0x40>)
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c9ee:	4b04      	ldr	r3, [pc, #16]	@ (800ca00 <SysTick_Config+0x40>)
 800c9f0:	2207      	movs	r2, #7
 800c9f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c9f4:	2300      	movs	r3, #0
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3708      	adds	r7, #8
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	e000e010 	.word	0xe000e010

0800ca04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f7ff ff29 	bl	800c864 <__NVIC_SetPriorityGrouping>
}
 800ca12:	bf00      	nop
 800ca14:	3708      	adds	r7, #8
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}

0800ca1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ca1a:	b580      	push	{r7, lr}
 800ca1c:	b086      	sub	sp, #24
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	4603      	mov	r3, r0
 800ca22:	60b9      	str	r1, [r7, #8]
 800ca24:	607a      	str	r2, [r7, #4]
 800ca26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800ca28:	f7ff ff40 	bl	800c8ac <__NVIC_GetPriorityGrouping>
 800ca2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	68b9      	ldr	r1, [r7, #8]
 800ca32:	6978      	ldr	r0, [r7, #20]
 800ca34:	f7ff ff90 	bl	800c958 <NVIC_EncodePriority>
 800ca38:	4602      	mov	r2, r0
 800ca3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca3e:	4611      	mov	r1, r2
 800ca40:	4618      	mov	r0, r3
 800ca42:	f7ff ff5f 	bl	800c904 <__NVIC_SetPriority>
}
 800ca46:	bf00      	nop
 800ca48:	3718      	adds	r7, #24
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}

0800ca4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ca4e:	b580      	push	{r7, lr}
 800ca50:	b082      	sub	sp, #8
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	4603      	mov	r3, r0
 800ca56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ca58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7ff ff33 	bl	800c8c8 <__NVIC_EnableIRQ>
}
 800ca62:	bf00      	nop
 800ca64:	3708      	adds	r7, #8
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}

0800ca6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ca6a:	b580      	push	{r7, lr}
 800ca6c:	b082      	sub	sp, #8
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f7ff ffa4 	bl	800c9c0 <SysTick_Config>
 800ca78:	4603      	mov	r3, r0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3708      	adds	r7, #8
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
	...

0800ca84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d101      	bne.n	800ca96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ca92:	2301      	movs	r3, #1
 800ca94:	e08d      	b.n	800cbb2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	4b47      	ldr	r3, [pc, #284]	@ (800cbbc <HAL_DMA_Init+0x138>)
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d80f      	bhi.n	800cac2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	461a      	mov	r2, r3
 800caa8:	4b45      	ldr	r3, [pc, #276]	@ (800cbc0 <HAL_DMA_Init+0x13c>)
 800caaa:	4413      	add	r3, r2
 800caac:	4a45      	ldr	r2, [pc, #276]	@ (800cbc4 <HAL_DMA_Init+0x140>)
 800caae:	fba2 2303 	umull	r2, r3, r2, r3
 800cab2:	091b      	lsrs	r3, r3, #4
 800cab4:	009a      	lsls	r2, r3, #2
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	4a42      	ldr	r2, [pc, #264]	@ (800cbc8 <HAL_DMA_Init+0x144>)
 800cabe:	641a      	str	r2, [r3, #64]	@ 0x40
 800cac0:	e00e      	b.n	800cae0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	461a      	mov	r2, r3
 800cac8:	4b40      	ldr	r3, [pc, #256]	@ (800cbcc <HAL_DMA_Init+0x148>)
 800caca:	4413      	add	r3, r2
 800cacc:	4a3d      	ldr	r2, [pc, #244]	@ (800cbc4 <HAL_DMA_Init+0x140>)
 800cace:	fba2 2303 	umull	r2, r3, r2, r3
 800cad2:	091b      	lsrs	r3, r3, #4
 800cad4:	009a      	lsls	r2, r3, #2
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	4a3c      	ldr	r2, [pc, #240]	@ (800cbd0 <HAL_DMA_Init+0x14c>)
 800cade:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2202      	movs	r2, #2
 800cae4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800caf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cafa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800cb04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	691b      	ldr	r3, [r3, #16]
 800cb0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cb10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	699b      	ldr	r3, [r3, #24]
 800cb16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cb1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6a1b      	ldr	r3, [r3, #32]
 800cb22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800cb24:	68fa      	ldr	r2, [r7, #12]
 800cb26:	4313      	orrs	r3, r2
 800cb28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	68fa      	ldr	r2, [r7, #12]
 800cb30:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 fa76 	bl	800d024 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	689b      	ldr	r3, [r3, #8]
 800cb3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cb40:	d102      	bne.n	800cb48 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2200      	movs	r2, #0
 800cb46:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	685a      	ldr	r2, [r3, #4]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb50:	b2d2      	uxtb	r2, r2
 800cb52:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cb58:	687a      	ldr	r2, [r7, #4]
 800cb5a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800cb5c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d010      	beq.n	800cb88 <HAL_DMA_Init+0x104>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	685b      	ldr	r3, [r3, #4]
 800cb6a:	2b04      	cmp	r3, #4
 800cb6c:	d80c      	bhi.n	800cb88 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 fa96 	bl	800d0a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb78:	2200      	movs	r2, #0
 800cb7a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800cb84:	605a      	str	r2, [r3, #4]
 800cb86:	e008      	b.n	800cb9a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2200      	movs	r2, #0
 800cb92:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2200      	movs	r2, #0
 800cb98:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2201      	movs	r2, #1
 800cba4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800cbb0:	2300      	movs	r3, #0
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3710      	adds	r7, #16
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	40020407 	.word	0x40020407
 800cbc0:	bffdfff8 	.word	0xbffdfff8
 800cbc4:	cccccccd 	.word	0xcccccccd
 800cbc8:	40020000 	.word	0x40020000
 800cbcc:	bffdfbf8 	.word	0xbffdfbf8
 800cbd0:	40020400 	.word	0x40020400

0800cbd4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b086      	sub	sp, #24
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	60b9      	str	r1, [r7, #8]
 800cbde:	607a      	str	r2, [r7, #4]
 800cbe0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d101      	bne.n	800cbf4 <HAL_DMA_Start_IT+0x20>
 800cbf0:	2302      	movs	r3, #2
 800cbf2:	e066      	b.n	800ccc2 <HAL_DMA_Start_IT+0xee>
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d155      	bne.n	800ccb4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2202      	movs	r2, #2
 800cc0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2200      	movs	r2, #0
 800cc14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f022 0201 	bic.w	r2, r2, #1
 800cc24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	687a      	ldr	r2, [r7, #4]
 800cc2a:	68b9      	ldr	r1, [r7, #8]
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	f000 f9bb 	bl	800cfa8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d008      	beq.n	800cc4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	681a      	ldr	r2, [r3, #0]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f042 020e 	orr.w	r2, r2, #14
 800cc48:	601a      	str	r2, [r3, #0]
 800cc4a:	e00f      	b.n	800cc6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	681a      	ldr	r2, [r3, #0]
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f022 0204 	bic.w	r2, r2, #4
 800cc5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	681a      	ldr	r2, [r3, #0]
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f042 020a 	orr.w	r2, r2, #10
 800cc6a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d007      	beq.n	800cc8a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cc7e:	681a      	ldr	r2, [r3, #0]
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cc84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cc88:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d007      	beq.n	800cca2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc96:	681a      	ldr	r2, [r3, #0]
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cca0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	681a      	ldr	r2, [r3, #0]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f042 0201 	orr.w	r2, r2, #1
 800ccb0:	601a      	str	r2, [r3, #0]
 800ccb2:	e005      	b.n	800ccc0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800ccbc:	2302      	movs	r3, #2
 800ccbe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800ccc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3718      	adds	r7, #24
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}

0800ccca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ccca:	b480      	push	{r7}
 800cccc:	b085      	sub	sp, #20
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	2b02      	cmp	r3, #2
 800cce0:	d005      	beq.n	800ccee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2204      	movs	r2, #4
 800cce6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800cce8:	2301      	movs	r3, #1
 800ccea:	73fb      	strb	r3, [r7, #15]
 800ccec:	e037      	b.n	800cd5e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	681a      	ldr	r2, [r3, #0]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f022 020e 	bic.w	r2, r2, #14
 800ccfc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cd0c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	681a      	ldr	r2, [r3, #0]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f022 0201 	bic.w	r2, r2, #1
 800cd1c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd22:	f003 021f 	and.w	r2, r3, #31
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd2a:	2101      	movs	r1, #1
 800cd2c:	fa01 f202 	lsl.w	r2, r1, r2
 800cd30:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd36:	687a      	ldr	r2, [r7, #4]
 800cd38:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800cd3a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d00c      	beq.n	800cd5e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd48:	681a      	ldr	r2, [r3, #0]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cd52:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800cd5c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2201      	movs	r2, #1
 800cd62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800cd6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3714      	adds	r7, #20
 800cd74:	46bd      	mov	sp, r7
 800cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7a:	4770      	bx	lr

0800cd7c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd84:	2300      	movs	r3, #0
 800cd86:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800cd8e:	b2db      	uxtb	r3, r3
 800cd90:	2b02      	cmp	r3, #2
 800cd92:	d00d      	beq.n	800cdb0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2204      	movs	r2, #4
 800cd98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2200      	movs	r2, #0
 800cda6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	73fb      	strb	r3, [r7, #15]
 800cdae:	e047      	b.n	800ce40 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	681a      	ldr	r2, [r3, #0]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f022 020e 	bic.w	r2, r2, #14
 800cdbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	681a      	ldr	r2, [r3, #0]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f022 0201 	bic.w	r2, r2, #1
 800cdce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cdd4:	681a      	ldr	r2, [r3, #0]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cdda:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cdde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cde4:	f003 021f 	and.w	r2, r3, #31
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdec:	2101      	movs	r1, #1
 800cdee:	fa01 f202 	lsl.w	r2, r1, r2
 800cdf2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cdf8:	687a      	ldr	r2, [r7, #4]
 800cdfa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800cdfc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d00c      	beq.n	800ce20 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ce14:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800ce1e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2201      	movs	r2, #1
 800ce24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d003      	beq.n	800ce40 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	4798      	blx	r3
    }
  }
  return status;
 800ce40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3710      	adds	r7, #16
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}

0800ce4a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ce4a:	b580      	push	{r7, lr}
 800ce4c:	b084      	sub	sp, #16
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce66:	f003 031f 	and.w	r3, r3, #31
 800ce6a:	2204      	movs	r2, #4
 800ce6c:	409a      	lsls	r2, r3
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	4013      	ands	r3, r2
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d026      	beq.n	800cec4 <HAL_DMA_IRQHandler+0x7a>
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	f003 0304 	and.w	r3, r3, #4
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d021      	beq.n	800cec4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f003 0320 	and.w	r3, r3, #32
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d107      	bne.n	800ce9e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f022 0204 	bic.w	r2, r2, #4
 800ce9c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cea2:	f003 021f 	and.w	r2, r3, #31
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceaa:	2104      	movs	r1, #4
 800ceac:	fa01 f202 	lsl.w	r2, r1, r2
 800ceb0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d071      	beq.n	800cf9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800cec2:	e06c      	b.n	800cf9e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cec8:	f003 031f 	and.w	r3, r3, #31
 800cecc:	2202      	movs	r2, #2
 800cece:	409a      	lsls	r2, r3
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	4013      	ands	r3, r2
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d02e      	beq.n	800cf36 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	f003 0302 	and.w	r3, r3, #2
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d029      	beq.n	800cf36 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f003 0320 	and.w	r3, r3, #32
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d10b      	bne.n	800cf08 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	681a      	ldr	r2, [r3, #0]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f022 020a 	bic.w	r2, r2, #10
 800cefe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2201      	movs	r2, #1
 800cf04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf0c:	f003 021f 	and.w	r2, r3, #31
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf14:	2102      	movs	r1, #2
 800cf16:	fa01 f202 	lsl.w	r2, r1, r2
 800cf1a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d038      	beq.n	800cf9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800cf34:	e033      	b.n	800cf9e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf3a:	f003 031f 	and.w	r3, r3, #31
 800cf3e:	2208      	movs	r2, #8
 800cf40:	409a      	lsls	r2, r3
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	4013      	ands	r3, r2
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d02a      	beq.n	800cfa0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	f003 0308 	and.w	r3, r3, #8
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d025      	beq.n	800cfa0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f022 020e 	bic.w	r2, r2, #14
 800cf62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf68:	f003 021f 	and.w	r2, r3, #31
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf70:	2101      	movs	r1, #1
 800cf72:	fa01 f202 	lsl.w	r2, r1, r2
 800cf76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2201      	movs	r2, #1
 800cf82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d004      	beq.n	800cfa0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800cf9e:	bf00      	nop
 800cfa0:	bf00      	nop
}
 800cfa2:	3710      	adds	r7, #16
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b085      	sub	sp, #20
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
 800cfb4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cfba:	68fa      	ldr	r2, [r7, #12]
 800cfbc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800cfbe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d004      	beq.n	800cfd2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cfcc:	68fa      	ldr	r2, [r7, #12]
 800cfce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800cfd0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfd6:	f003 021f 	and.w	r2, r3, #31
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfde:	2101      	movs	r1, #1
 800cfe0:	fa01 f202 	lsl.w	r2, r1, r2
 800cfe4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	683a      	ldr	r2, [r7, #0]
 800cfec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	689b      	ldr	r3, [r3, #8]
 800cff2:	2b10      	cmp	r3, #16
 800cff4:	d108      	bne.n	800d008 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	687a      	ldr	r2, [r7, #4]
 800cffc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	68ba      	ldr	r2, [r7, #8]
 800d004:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800d006:	e007      	b.n	800d018 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	68ba      	ldr	r2, [r7, #8]
 800d00e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	60da      	str	r2, [r3, #12]
}
 800d018:	bf00      	nop
 800d01a:	3714      	adds	r7, #20
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr

0800d024 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800d024:	b480      	push	{r7}
 800d026:	b087      	sub	sp, #28
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	461a      	mov	r2, r3
 800d032:	4b16      	ldr	r3, [pc, #88]	@ (800d08c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800d034:	429a      	cmp	r2, r3
 800d036:	d802      	bhi.n	800d03e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800d038:	4b15      	ldr	r3, [pc, #84]	@ (800d090 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800d03a:	617b      	str	r3, [r7, #20]
 800d03c:	e001      	b.n	800d042 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800d03e:	4b15      	ldr	r3, [pc, #84]	@ (800d094 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800d040:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	3b08      	subs	r3, #8
 800d04e:	4a12      	ldr	r2, [pc, #72]	@ (800d098 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800d050:	fba2 2303 	umull	r2, r3, r2, r3
 800d054:	091b      	lsrs	r3, r3, #4
 800d056:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d05c:	089b      	lsrs	r3, r3, #2
 800d05e:	009a      	lsls	r2, r3, #2
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	4413      	add	r3, r2
 800d064:	461a      	mov	r2, r3
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	4a0b      	ldr	r2, [pc, #44]	@ (800d09c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800d06e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	f003 031f 	and.w	r3, r3, #31
 800d076:	2201      	movs	r2, #1
 800d078:	409a      	lsls	r2, r3
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800d07e:	bf00      	nop
 800d080:	371c      	adds	r7, #28
 800d082:	46bd      	mov	sp, r7
 800d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d088:	4770      	bx	lr
 800d08a:	bf00      	nop
 800d08c:	40020407 	.word	0x40020407
 800d090:	40020800 	.word	0x40020800
 800d094:	40020820 	.word	0x40020820
 800d098:	cccccccd 	.word	0xcccccccd
 800d09c:	40020880 	.word	0x40020880

0800d0a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b085      	sub	sp, #20
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	b2db      	uxtb	r3, r3
 800d0ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800d0b0:	68fa      	ldr	r2, [r7, #12]
 800d0b2:	4b0b      	ldr	r3, [pc, #44]	@ (800d0e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800d0b4:	4413      	add	r3, r2
 800d0b6:	009b      	lsls	r3, r3, #2
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	4a08      	ldr	r2, [pc, #32]	@ (800d0e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800d0c2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	3b01      	subs	r3, #1
 800d0c8:	f003 031f 	and.w	r3, r3, #31
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	409a      	lsls	r2, r3
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800d0d4:	bf00      	nop
 800d0d6:	3714      	adds	r7, #20
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr
 800d0e0:	1000823f 	.word	0x1000823f
 800d0e4:	40020940 	.word	0x40020940

0800d0e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b087      	sub	sp, #28
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800d0f6:	e15a      	b.n	800d3ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	681a      	ldr	r2, [r3, #0]
 800d0fc:	2101      	movs	r1, #1
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	fa01 f303 	lsl.w	r3, r1, r3
 800d104:	4013      	ands	r3, r2
 800d106:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	f000 814c 	beq.w	800d3a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	f003 0303 	and.w	r3, r3, #3
 800d118:	2b01      	cmp	r3, #1
 800d11a:	d005      	beq.n	800d128 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d124:	2b02      	cmp	r3, #2
 800d126:	d130      	bne.n	800d18a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	689b      	ldr	r3, [r3, #8]
 800d12c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	005b      	lsls	r3, r3, #1
 800d132:	2203      	movs	r2, #3
 800d134:	fa02 f303 	lsl.w	r3, r2, r3
 800d138:	43db      	mvns	r3, r3
 800d13a:	693a      	ldr	r2, [r7, #16]
 800d13c:	4013      	ands	r3, r2
 800d13e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	68da      	ldr	r2, [r3, #12]
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	005b      	lsls	r3, r3, #1
 800d148:	fa02 f303 	lsl.w	r3, r2, r3
 800d14c:	693a      	ldr	r2, [r7, #16]
 800d14e:	4313      	orrs	r3, r2
 800d150:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	693a      	ldr	r2, [r7, #16]
 800d156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d15e:	2201      	movs	r2, #1
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	fa02 f303 	lsl.w	r3, r2, r3
 800d166:	43db      	mvns	r3, r3
 800d168:	693a      	ldr	r2, [r7, #16]
 800d16a:	4013      	ands	r3, r2
 800d16c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	091b      	lsrs	r3, r3, #4
 800d174:	f003 0201 	and.w	r2, r3, #1
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	fa02 f303 	lsl.w	r3, r2, r3
 800d17e:	693a      	ldr	r2, [r7, #16]
 800d180:	4313      	orrs	r3, r2
 800d182:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	693a      	ldr	r2, [r7, #16]
 800d188:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	f003 0303 	and.w	r3, r3, #3
 800d192:	2b03      	cmp	r3, #3
 800d194:	d017      	beq.n	800d1c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	68db      	ldr	r3, [r3, #12]
 800d19a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	005b      	lsls	r3, r3, #1
 800d1a0:	2203      	movs	r2, #3
 800d1a2:	fa02 f303 	lsl.w	r3, r2, r3
 800d1a6:	43db      	mvns	r3, r3
 800d1a8:	693a      	ldr	r2, [r7, #16]
 800d1aa:	4013      	ands	r3, r2
 800d1ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	689a      	ldr	r2, [r3, #8]
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	005b      	lsls	r3, r3, #1
 800d1b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d1ba:	693a      	ldr	r2, [r7, #16]
 800d1bc:	4313      	orrs	r3, r2
 800d1be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	693a      	ldr	r2, [r7, #16]
 800d1c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	f003 0303 	and.w	r3, r3, #3
 800d1ce:	2b02      	cmp	r3, #2
 800d1d0:	d123      	bne.n	800d21a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	08da      	lsrs	r2, r3, #3
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	3208      	adds	r2, #8
 800d1da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	f003 0307 	and.w	r3, r3, #7
 800d1e6:	009b      	lsls	r3, r3, #2
 800d1e8:	220f      	movs	r2, #15
 800d1ea:	fa02 f303 	lsl.w	r3, r2, r3
 800d1ee:	43db      	mvns	r3, r3
 800d1f0:	693a      	ldr	r2, [r7, #16]
 800d1f2:	4013      	ands	r3, r2
 800d1f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	691a      	ldr	r2, [r3, #16]
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	f003 0307 	and.w	r3, r3, #7
 800d200:	009b      	lsls	r3, r3, #2
 800d202:	fa02 f303 	lsl.w	r3, r2, r3
 800d206:	693a      	ldr	r2, [r7, #16]
 800d208:	4313      	orrs	r3, r2
 800d20a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	08da      	lsrs	r2, r3, #3
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	3208      	adds	r2, #8
 800d214:	6939      	ldr	r1, [r7, #16]
 800d216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	005b      	lsls	r3, r3, #1
 800d224:	2203      	movs	r2, #3
 800d226:	fa02 f303 	lsl.w	r3, r2, r3
 800d22a:	43db      	mvns	r3, r3
 800d22c:	693a      	ldr	r2, [r7, #16]
 800d22e:	4013      	ands	r3, r2
 800d230:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	f003 0203 	and.w	r2, r3, #3
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	005b      	lsls	r3, r3, #1
 800d23e:	fa02 f303 	lsl.w	r3, r2, r3
 800d242:	693a      	ldr	r2, [r7, #16]
 800d244:	4313      	orrs	r3, r2
 800d246:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	693a      	ldr	r2, [r7, #16]
 800d24c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d256:	2b00      	cmp	r3, #0
 800d258:	f000 80a6 	beq.w	800d3a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d25c:	4b5b      	ldr	r3, [pc, #364]	@ (800d3cc <HAL_GPIO_Init+0x2e4>)
 800d25e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d260:	4a5a      	ldr	r2, [pc, #360]	@ (800d3cc <HAL_GPIO_Init+0x2e4>)
 800d262:	f043 0301 	orr.w	r3, r3, #1
 800d266:	6613      	str	r3, [r2, #96]	@ 0x60
 800d268:	4b58      	ldr	r3, [pc, #352]	@ (800d3cc <HAL_GPIO_Init+0x2e4>)
 800d26a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d26c:	f003 0301 	and.w	r3, r3, #1
 800d270:	60bb      	str	r3, [r7, #8]
 800d272:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d274:	4a56      	ldr	r2, [pc, #344]	@ (800d3d0 <HAL_GPIO_Init+0x2e8>)
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	089b      	lsrs	r3, r3, #2
 800d27a:	3302      	adds	r3, #2
 800d27c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d280:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	f003 0303 	and.w	r3, r3, #3
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	220f      	movs	r2, #15
 800d28c:	fa02 f303 	lsl.w	r3, r2, r3
 800d290:	43db      	mvns	r3, r3
 800d292:	693a      	ldr	r2, [r7, #16]
 800d294:	4013      	ands	r3, r2
 800d296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800d29e:	d01f      	beq.n	800d2e0 <HAL_GPIO_Init+0x1f8>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	4a4c      	ldr	r2, [pc, #304]	@ (800d3d4 <HAL_GPIO_Init+0x2ec>)
 800d2a4:	4293      	cmp	r3, r2
 800d2a6:	d019      	beq.n	800d2dc <HAL_GPIO_Init+0x1f4>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	4a4b      	ldr	r2, [pc, #300]	@ (800d3d8 <HAL_GPIO_Init+0x2f0>)
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	d013      	beq.n	800d2d8 <HAL_GPIO_Init+0x1f0>
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	4a4a      	ldr	r2, [pc, #296]	@ (800d3dc <HAL_GPIO_Init+0x2f4>)
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d00d      	beq.n	800d2d4 <HAL_GPIO_Init+0x1ec>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	4a49      	ldr	r2, [pc, #292]	@ (800d3e0 <HAL_GPIO_Init+0x2f8>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d007      	beq.n	800d2d0 <HAL_GPIO_Init+0x1e8>
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	4a48      	ldr	r2, [pc, #288]	@ (800d3e4 <HAL_GPIO_Init+0x2fc>)
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d101      	bne.n	800d2cc <HAL_GPIO_Init+0x1e4>
 800d2c8:	2305      	movs	r3, #5
 800d2ca:	e00a      	b.n	800d2e2 <HAL_GPIO_Init+0x1fa>
 800d2cc:	2306      	movs	r3, #6
 800d2ce:	e008      	b.n	800d2e2 <HAL_GPIO_Init+0x1fa>
 800d2d0:	2304      	movs	r3, #4
 800d2d2:	e006      	b.n	800d2e2 <HAL_GPIO_Init+0x1fa>
 800d2d4:	2303      	movs	r3, #3
 800d2d6:	e004      	b.n	800d2e2 <HAL_GPIO_Init+0x1fa>
 800d2d8:	2302      	movs	r3, #2
 800d2da:	e002      	b.n	800d2e2 <HAL_GPIO_Init+0x1fa>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	e000      	b.n	800d2e2 <HAL_GPIO_Init+0x1fa>
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	697a      	ldr	r2, [r7, #20]
 800d2e4:	f002 0203 	and.w	r2, r2, #3
 800d2e8:	0092      	lsls	r2, r2, #2
 800d2ea:	4093      	lsls	r3, r2
 800d2ec:	693a      	ldr	r2, [r7, #16]
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d2f2:	4937      	ldr	r1, [pc, #220]	@ (800d3d0 <HAL_GPIO_Init+0x2e8>)
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	089b      	lsrs	r3, r3, #2
 800d2f8:	3302      	adds	r3, #2
 800d2fa:	693a      	ldr	r2, [r7, #16]
 800d2fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d300:	4b39      	ldr	r3, [pc, #228]	@ (800d3e8 <HAL_GPIO_Init+0x300>)
 800d302:	689b      	ldr	r3, [r3, #8]
 800d304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	43db      	mvns	r3, r3
 800d30a:	693a      	ldr	r2, [r7, #16]
 800d30c:	4013      	ands	r3, r2
 800d30e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d003      	beq.n	800d324 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800d31c:	693a      	ldr	r2, [r7, #16]
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	4313      	orrs	r3, r2
 800d322:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800d324:	4a30      	ldr	r2, [pc, #192]	@ (800d3e8 <HAL_GPIO_Init+0x300>)
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800d32a:	4b2f      	ldr	r3, [pc, #188]	@ (800d3e8 <HAL_GPIO_Init+0x300>)
 800d32c:	68db      	ldr	r3, [r3, #12]
 800d32e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	43db      	mvns	r3, r3
 800d334:	693a      	ldr	r2, [r7, #16]
 800d336:	4013      	ands	r3, r2
 800d338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	685b      	ldr	r3, [r3, #4]
 800d33e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d342:	2b00      	cmp	r3, #0
 800d344:	d003      	beq.n	800d34e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800d346:	693a      	ldr	r2, [r7, #16]
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	4313      	orrs	r3, r2
 800d34c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800d34e:	4a26      	ldr	r2, [pc, #152]	@ (800d3e8 <HAL_GPIO_Init+0x300>)
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800d354:	4b24      	ldr	r3, [pc, #144]	@ (800d3e8 <HAL_GPIO_Init+0x300>)
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	43db      	mvns	r3, r3
 800d35e:	693a      	ldr	r2, [r7, #16]
 800d360:	4013      	ands	r3, r2
 800d362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d003      	beq.n	800d378 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800d370:	693a      	ldr	r2, [r7, #16]
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	4313      	orrs	r3, r2
 800d376:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800d378:	4a1b      	ldr	r2, [pc, #108]	@ (800d3e8 <HAL_GPIO_Init+0x300>)
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800d37e:	4b1a      	ldr	r3, [pc, #104]	@ (800d3e8 <HAL_GPIO_Init+0x300>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	43db      	mvns	r3, r3
 800d388:	693a      	ldr	r2, [r7, #16]
 800d38a:	4013      	ands	r3, r2
 800d38c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d396:	2b00      	cmp	r3, #0
 800d398:	d003      	beq.n	800d3a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800d39a:	693a      	ldr	r2, [r7, #16]
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	4313      	orrs	r3, r2
 800d3a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800d3a2:	4a11      	ldr	r2, [pc, #68]	@ (800d3e8 <HAL_GPIO_Init+0x300>)
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	681a      	ldr	r2, [r3, #0]
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	fa22 f303 	lsr.w	r3, r2, r3
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	f47f ae9d 	bne.w	800d0f8 <HAL_GPIO_Init+0x10>
  }
}
 800d3be:	bf00      	nop
 800d3c0:	bf00      	nop
 800d3c2:	371c      	adds	r7, #28
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ca:	4770      	bx	lr
 800d3cc:	40021000 	.word	0x40021000
 800d3d0:	40010000 	.word	0x40010000
 800d3d4:	48000400 	.word	0x48000400
 800d3d8:	48000800 	.word	0x48000800
 800d3dc:	48000c00 	.word	0x48000c00
 800d3e0:	48001000 	.word	0x48001000
 800d3e4:	48001400 	.word	0x48001400
 800d3e8:	40010400 	.word	0x40010400

0800d3ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b085      	sub	sp, #20
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	691a      	ldr	r2, [r3, #16]
 800d3fc:	887b      	ldrh	r3, [r7, #2]
 800d3fe:	4013      	ands	r3, r2
 800d400:	2b00      	cmp	r3, #0
 800d402:	d002      	beq.n	800d40a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d404:	2301      	movs	r3, #1
 800d406:	73fb      	strb	r3, [r7, #15]
 800d408:	e001      	b.n	800d40e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d40a:	2300      	movs	r3, #0
 800d40c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d410:	4618      	mov	r0, r3
 800d412:	3714      	adds	r7, #20
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr

0800d41c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d41c:	b480      	push	{r7}
 800d41e:	b083      	sub	sp, #12
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	460b      	mov	r3, r1
 800d426:	807b      	strh	r3, [r7, #2]
 800d428:	4613      	mov	r3, r2
 800d42a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d42c:	787b      	ldrb	r3, [r7, #1]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d003      	beq.n	800d43a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800d432:	887a      	ldrh	r2, [r7, #2]
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800d438:	e002      	b.n	800d440 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800d43a:	887a      	ldrh	r2, [r7, #2]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800d440:	bf00      	nop
 800d442:	370c      	adds	r7, #12
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr

0800d44c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d44c:	b480      	push	{r7}
 800d44e:	b085      	sub	sp, #20
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	460b      	mov	r3, r1
 800d456:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	695b      	ldr	r3, [r3, #20]
 800d45c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d45e:	887a      	ldrh	r2, [r7, #2]
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	4013      	ands	r3, r2
 800d464:	041a      	lsls	r2, r3, #16
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	43d9      	mvns	r1, r3
 800d46a:	887b      	ldrh	r3, [r7, #2]
 800d46c:	400b      	ands	r3, r1
 800d46e:	431a      	orrs	r2, r3
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	619a      	str	r2, [r3, #24]
}
 800d474:	bf00      	nop
 800d476:	3714      	adds	r7, #20
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr

0800d480 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	4603      	mov	r3, r0
 800d488:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800d48a:	4b08      	ldr	r3, [pc, #32]	@ (800d4ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d48c:	695a      	ldr	r2, [r3, #20]
 800d48e:	88fb      	ldrh	r3, [r7, #6]
 800d490:	4013      	ands	r3, r2
 800d492:	2b00      	cmp	r3, #0
 800d494:	d006      	beq.n	800d4a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d496:	4a05      	ldr	r2, [pc, #20]	@ (800d4ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d498:	88fb      	ldrh	r3, [r7, #6]
 800d49a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d49c:	88fb      	ldrh	r3, [r7, #6]
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7fb fa3c 	bl	800891c <HAL_GPIO_EXTI_Callback>
  }
}
 800d4a4:	bf00      	nop
 800d4a6:	3708      	adds	r7, #8
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}
 800d4ac:	40010400 	.word	0x40010400

0800d4b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b085      	sub	sp, #20
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d141      	bne.n	800d542 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d4be:	4b4b      	ldr	r3, [pc, #300]	@ (800d5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d4c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d4ca:	d131      	bne.n	800d530 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d4cc:	4b47      	ldr	r3, [pc, #284]	@ (800d5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d4ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d4d2:	4a46      	ldr	r2, [pc, #280]	@ (800d5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d4d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d4d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d4dc:	4b43      	ldr	r3, [pc, #268]	@ (800d5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d4e4:	4a41      	ldr	r2, [pc, #260]	@ (800d5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d4e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d4ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d4ec:	4b40      	ldr	r3, [pc, #256]	@ (800d5f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	2232      	movs	r2, #50	@ 0x32
 800d4f2:	fb02 f303 	mul.w	r3, r2, r3
 800d4f6:	4a3f      	ldr	r2, [pc, #252]	@ (800d5f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d4f8:	fba2 2303 	umull	r2, r3, r2, r3
 800d4fc:	0c9b      	lsrs	r3, r3, #18
 800d4fe:	3301      	adds	r3, #1
 800d500:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d502:	e002      	b.n	800d50a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	3b01      	subs	r3, #1
 800d508:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d50a:	4b38      	ldr	r3, [pc, #224]	@ (800d5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d50c:	695b      	ldr	r3, [r3, #20]
 800d50e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d516:	d102      	bne.n	800d51e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d1f2      	bne.n	800d504 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d51e:	4b33      	ldr	r3, [pc, #204]	@ (800d5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d520:	695b      	ldr	r3, [r3, #20]
 800d522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d52a:	d158      	bne.n	800d5de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d52c:	2303      	movs	r3, #3
 800d52e:	e057      	b.n	800d5e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d530:	4b2e      	ldr	r3, [pc, #184]	@ (800d5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d536:	4a2d      	ldr	r2, [pc, #180]	@ (800d5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d538:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d53c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800d540:	e04d      	b.n	800d5de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d548:	d141      	bne.n	800d5ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d54a:	4b28      	ldr	r3, [pc, #160]	@ (800d5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d552:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d556:	d131      	bne.n	800d5bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d558:	4b24      	ldr	r3, [pc, #144]	@ (800d5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d55a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d55e:	4a23      	ldr	r2, [pc, #140]	@ (800d5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d564:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d568:	4b20      	ldr	r3, [pc, #128]	@ (800d5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d570:	4a1e      	ldr	r2, [pc, #120]	@ (800d5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d572:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d576:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d578:	4b1d      	ldr	r3, [pc, #116]	@ (800d5f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	2232      	movs	r2, #50	@ 0x32
 800d57e:	fb02 f303 	mul.w	r3, r2, r3
 800d582:	4a1c      	ldr	r2, [pc, #112]	@ (800d5f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d584:	fba2 2303 	umull	r2, r3, r2, r3
 800d588:	0c9b      	lsrs	r3, r3, #18
 800d58a:	3301      	adds	r3, #1
 800d58c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d58e:	e002      	b.n	800d596 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	3b01      	subs	r3, #1
 800d594:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d596:	4b15      	ldr	r3, [pc, #84]	@ (800d5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d598:	695b      	ldr	r3, [r3, #20]
 800d59a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d59e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d5a2:	d102      	bne.n	800d5aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d1f2      	bne.n	800d590 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d5aa:	4b10      	ldr	r3, [pc, #64]	@ (800d5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5ac:	695b      	ldr	r3, [r3, #20]
 800d5ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d5b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d5b6:	d112      	bne.n	800d5de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d5b8:	2303      	movs	r3, #3
 800d5ba:	e011      	b.n	800d5e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d5bc:	4b0b      	ldr	r3, [pc, #44]	@ (800d5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5c2:	4a0a      	ldr	r2, [pc, #40]	@ (800d5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d5c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800d5cc:	e007      	b.n	800d5de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800d5ce:	4b07      	ldr	r3, [pc, #28]	@ (800d5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d5d6:	4a05      	ldr	r2, [pc, #20]	@ (800d5ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d5dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800d5de:	2300      	movs	r3, #0
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3714      	adds	r7, #20
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr
 800d5ec:	40007000 	.word	0x40007000
 800d5f0:	200005c0 	.word	0x200005c0
 800d5f4:	431bde83 	.word	0x431bde83

0800d5f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800d5fc:	4b05      	ldr	r3, [pc, #20]	@ (800d614 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d5fe:	689b      	ldr	r3, [r3, #8]
 800d600:	4a04      	ldr	r2, [pc, #16]	@ (800d614 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d602:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d606:	6093      	str	r3, [r2, #8]
}
 800d608:	bf00      	nop
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr
 800d612:	bf00      	nop
 800d614:	40007000 	.word	0x40007000

0800d618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b088      	sub	sp, #32
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d101      	bne.n	800d62a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d626:	2301      	movs	r3, #1
 800d628:	e2fe      	b.n	800dc28 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f003 0301 	and.w	r3, r3, #1
 800d632:	2b00      	cmp	r3, #0
 800d634:	d075      	beq.n	800d722 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d636:	4b97      	ldr	r3, [pc, #604]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d638:	689b      	ldr	r3, [r3, #8]
 800d63a:	f003 030c 	and.w	r3, r3, #12
 800d63e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d640:	4b94      	ldr	r3, [pc, #592]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d642:	68db      	ldr	r3, [r3, #12]
 800d644:	f003 0303 	and.w	r3, r3, #3
 800d648:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800d64a:	69bb      	ldr	r3, [r7, #24]
 800d64c:	2b0c      	cmp	r3, #12
 800d64e:	d102      	bne.n	800d656 <HAL_RCC_OscConfig+0x3e>
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	2b03      	cmp	r3, #3
 800d654:	d002      	beq.n	800d65c <HAL_RCC_OscConfig+0x44>
 800d656:	69bb      	ldr	r3, [r7, #24]
 800d658:	2b08      	cmp	r3, #8
 800d65a:	d10b      	bne.n	800d674 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d65c:	4b8d      	ldr	r3, [pc, #564]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d664:	2b00      	cmp	r3, #0
 800d666:	d05b      	beq.n	800d720 <HAL_RCC_OscConfig+0x108>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d157      	bne.n	800d720 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d670:	2301      	movs	r3, #1
 800d672:	e2d9      	b.n	800dc28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d67c:	d106      	bne.n	800d68c <HAL_RCC_OscConfig+0x74>
 800d67e:	4b85      	ldr	r3, [pc, #532]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	4a84      	ldr	r2, [pc, #528]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d688:	6013      	str	r3, [r2, #0]
 800d68a:	e01d      	b.n	800d6c8 <HAL_RCC_OscConfig+0xb0>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d694:	d10c      	bne.n	800d6b0 <HAL_RCC_OscConfig+0x98>
 800d696:	4b7f      	ldr	r3, [pc, #508]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4a7e      	ldr	r2, [pc, #504]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d69c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d6a0:	6013      	str	r3, [r2, #0]
 800d6a2:	4b7c      	ldr	r3, [pc, #496]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	4a7b      	ldr	r2, [pc, #492]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d6a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d6ac:	6013      	str	r3, [r2, #0]
 800d6ae:	e00b      	b.n	800d6c8 <HAL_RCC_OscConfig+0xb0>
 800d6b0:	4b78      	ldr	r3, [pc, #480]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	4a77      	ldr	r2, [pc, #476]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d6b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d6ba:	6013      	str	r3, [r2, #0]
 800d6bc:	4b75      	ldr	r3, [pc, #468]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	4a74      	ldr	r2, [pc, #464]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d6c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d6c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d013      	beq.n	800d6f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d6d0:	f7fd fc44 	bl	800af5c <HAL_GetTick>
 800d6d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d6d6:	e008      	b.n	800d6ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d6d8:	f7fd fc40 	bl	800af5c <HAL_GetTick>
 800d6dc:	4602      	mov	r2, r0
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	1ad3      	subs	r3, r2, r3
 800d6e2:	2b64      	cmp	r3, #100	@ 0x64
 800d6e4:	d901      	bls.n	800d6ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d6e6:	2303      	movs	r3, #3
 800d6e8:	e29e      	b.n	800dc28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d6ea:	4b6a      	ldr	r3, [pc, #424]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d0f0      	beq.n	800d6d8 <HAL_RCC_OscConfig+0xc0>
 800d6f6:	e014      	b.n	800d722 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d6f8:	f7fd fc30 	bl	800af5c <HAL_GetTick>
 800d6fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d6fe:	e008      	b.n	800d712 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d700:	f7fd fc2c 	bl	800af5c <HAL_GetTick>
 800d704:	4602      	mov	r2, r0
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	1ad3      	subs	r3, r2, r3
 800d70a:	2b64      	cmp	r3, #100	@ 0x64
 800d70c:	d901      	bls.n	800d712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d70e:	2303      	movs	r3, #3
 800d710:	e28a      	b.n	800dc28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d712:	4b60      	ldr	r3, [pc, #384]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d1f0      	bne.n	800d700 <HAL_RCC_OscConfig+0xe8>
 800d71e:	e000      	b.n	800d722 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f003 0302 	and.w	r3, r3, #2
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d075      	beq.n	800d81a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d72e:	4b59      	ldr	r3, [pc, #356]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d730:	689b      	ldr	r3, [r3, #8]
 800d732:	f003 030c 	and.w	r3, r3, #12
 800d736:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d738:	4b56      	ldr	r3, [pc, #344]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d73a:	68db      	ldr	r3, [r3, #12]
 800d73c:	f003 0303 	and.w	r3, r3, #3
 800d740:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800d742:	69bb      	ldr	r3, [r7, #24]
 800d744:	2b0c      	cmp	r3, #12
 800d746:	d102      	bne.n	800d74e <HAL_RCC_OscConfig+0x136>
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	2b02      	cmp	r3, #2
 800d74c:	d002      	beq.n	800d754 <HAL_RCC_OscConfig+0x13c>
 800d74e:	69bb      	ldr	r3, [r7, #24]
 800d750:	2b04      	cmp	r3, #4
 800d752:	d11f      	bne.n	800d794 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d754:	4b4f      	ldr	r3, [pc, #316]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d005      	beq.n	800d76c <HAL_RCC_OscConfig+0x154>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	68db      	ldr	r3, [r3, #12]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d101      	bne.n	800d76c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800d768:	2301      	movs	r3, #1
 800d76a:	e25d      	b.n	800dc28 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d76c:	4b49      	ldr	r3, [pc, #292]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	691b      	ldr	r3, [r3, #16]
 800d778:	061b      	lsls	r3, r3, #24
 800d77a:	4946      	ldr	r1, [pc, #280]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d77c:	4313      	orrs	r3, r2
 800d77e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d780:	4b45      	ldr	r3, [pc, #276]	@ (800d898 <HAL_RCC_OscConfig+0x280>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4618      	mov	r0, r3
 800d786:	f7fd fb9d 	bl	800aec4 <HAL_InitTick>
 800d78a:	4603      	mov	r3, r0
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d043      	beq.n	800d818 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800d790:	2301      	movs	r3, #1
 800d792:	e249      	b.n	800dc28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	68db      	ldr	r3, [r3, #12]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d023      	beq.n	800d7e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d79c:	4b3d      	ldr	r3, [pc, #244]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	4a3c      	ldr	r2, [pc, #240]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d7a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d7a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7a8:	f7fd fbd8 	bl	800af5c <HAL_GetTick>
 800d7ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d7ae:	e008      	b.n	800d7c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d7b0:	f7fd fbd4 	bl	800af5c <HAL_GetTick>
 800d7b4:	4602      	mov	r2, r0
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	1ad3      	subs	r3, r2, r3
 800d7ba:	2b02      	cmp	r3, #2
 800d7bc:	d901      	bls.n	800d7c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d7be:	2303      	movs	r3, #3
 800d7c0:	e232      	b.n	800dc28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d7c2:	4b34      	ldr	r3, [pc, #208]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d0f0      	beq.n	800d7b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d7ce:	4b31      	ldr	r3, [pc, #196]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d7d0:	685b      	ldr	r3, [r3, #4]
 800d7d2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	691b      	ldr	r3, [r3, #16]
 800d7da:	061b      	lsls	r3, r3, #24
 800d7dc:	492d      	ldr	r1, [pc, #180]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d7de:	4313      	orrs	r3, r2
 800d7e0:	604b      	str	r3, [r1, #4]
 800d7e2:	e01a      	b.n	800d81a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d7e4:	4b2b      	ldr	r3, [pc, #172]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	4a2a      	ldr	r2, [pc, #168]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d7ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d7ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7f0:	f7fd fbb4 	bl	800af5c <HAL_GetTick>
 800d7f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d7f6:	e008      	b.n	800d80a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d7f8:	f7fd fbb0 	bl	800af5c <HAL_GetTick>
 800d7fc:	4602      	mov	r2, r0
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	1ad3      	subs	r3, r2, r3
 800d802:	2b02      	cmp	r3, #2
 800d804:	d901      	bls.n	800d80a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800d806:	2303      	movs	r3, #3
 800d808:	e20e      	b.n	800dc28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d80a:	4b22      	ldr	r3, [pc, #136]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d812:	2b00      	cmp	r3, #0
 800d814:	d1f0      	bne.n	800d7f8 <HAL_RCC_OscConfig+0x1e0>
 800d816:	e000      	b.n	800d81a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d818:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f003 0308 	and.w	r3, r3, #8
 800d822:	2b00      	cmp	r3, #0
 800d824:	d041      	beq.n	800d8aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	695b      	ldr	r3, [r3, #20]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d01c      	beq.n	800d868 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d82e:	4b19      	ldr	r3, [pc, #100]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d834:	4a17      	ldr	r2, [pc, #92]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d836:	f043 0301 	orr.w	r3, r3, #1
 800d83a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d83e:	f7fd fb8d 	bl	800af5c <HAL_GetTick>
 800d842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d844:	e008      	b.n	800d858 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d846:	f7fd fb89 	bl	800af5c <HAL_GetTick>
 800d84a:	4602      	mov	r2, r0
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	1ad3      	subs	r3, r2, r3
 800d850:	2b02      	cmp	r3, #2
 800d852:	d901      	bls.n	800d858 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d854:	2303      	movs	r3, #3
 800d856:	e1e7      	b.n	800dc28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d858:	4b0e      	ldr	r3, [pc, #56]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d85a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d85e:	f003 0302 	and.w	r3, r3, #2
 800d862:	2b00      	cmp	r3, #0
 800d864:	d0ef      	beq.n	800d846 <HAL_RCC_OscConfig+0x22e>
 800d866:	e020      	b.n	800d8aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d868:	4b0a      	ldr	r3, [pc, #40]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d86a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d86e:	4a09      	ldr	r2, [pc, #36]	@ (800d894 <HAL_RCC_OscConfig+0x27c>)
 800d870:	f023 0301 	bic.w	r3, r3, #1
 800d874:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d878:	f7fd fb70 	bl	800af5c <HAL_GetTick>
 800d87c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d87e:	e00d      	b.n	800d89c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d880:	f7fd fb6c 	bl	800af5c <HAL_GetTick>
 800d884:	4602      	mov	r2, r0
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	1ad3      	subs	r3, r2, r3
 800d88a:	2b02      	cmp	r3, #2
 800d88c:	d906      	bls.n	800d89c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d88e:	2303      	movs	r3, #3
 800d890:	e1ca      	b.n	800dc28 <HAL_RCC_OscConfig+0x610>
 800d892:	bf00      	nop
 800d894:	40021000 	.word	0x40021000
 800d898:	200005c4 	.word	0x200005c4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d89c:	4b8c      	ldr	r3, [pc, #560]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800d89e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d8a2:	f003 0302 	and.w	r3, r3, #2
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d1ea      	bne.n	800d880 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f003 0304 	and.w	r3, r3, #4
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	f000 80a6 	beq.w	800da04 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d8bc:	4b84      	ldr	r3, [pc, #528]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800d8be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d8c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d101      	bne.n	800d8cc <HAL_RCC_OscConfig+0x2b4>
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	e000      	b.n	800d8ce <HAL_RCC_OscConfig+0x2b6>
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00d      	beq.n	800d8ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d8d2:	4b7f      	ldr	r3, [pc, #508]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800d8d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d8d6:	4a7e      	ldr	r2, [pc, #504]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800d8d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d8dc:	6593      	str	r3, [r2, #88]	@ 0x58
 800d8de:	4b7c      	ldr	r3, [pc, #496]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800d8e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d8e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d8e6:	60fb      	str	r3, [r7, #12]
 800d8e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d8ee:	4b79      	ldr	r3, [pc, #484]	@ (800dad4 <HAL_RCC_OscConfig+0x4bc>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d118      	bne.n	800d92c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d8fa:	4b76      	ldr	r3, [pc, #472]	@ (800dad4 <HAL_RCC_OscConfig+0x4bc>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4a75      	ldr	r2, [pc, #468]	@ (800dad4 <HAL_RCC_OscConfig+0x4bc>)
 800d900:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d906:	f7fd fb29 	bl	800af5c <HAL_GetTick>
 800d90a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d90c:	e008      	b.n	800d920 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d90e:	f7fd fb25 	bl	800af5c <HAL_GetTick>
 800d912:	4602      	mov	r2, r0
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	1ad3      	subs	r3, r2, r3
 800d918:	2b02      	cmp	r3, #2
 800d91a:	d901      	bls.n	800d920 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800d91c:	2303      	movs	r3, #3
 800d91e:	e183      	b.n	800dc28 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d920:	4b6c      	ldr	r3, [pc, #432]	@ (800dad4 <HAL_RCC_OscConfig+0x4bc>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d0f0      	beq.n	800d90e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	2b01      	cmp	r3, #1
 800d932:	d108      	bne.n	800d946 <HAL_RCC_OscConfig+0x32e>
 800d934:	4b66      	ldr	r3, [pc, #408]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800d936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d93a:	4a65      	ldr	r2, [pc, #404]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800d93c:	f043 0301 	orr.w	r3, r3, #1
 800d940:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d944:	e024      	b.n	800d990 <HAL_RCC_OscConfig+0x378>
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	689b      	ldr	r3, [r3, #8]
 800d94a:	2b05      	cmp	r3, #5
 800d94c:	d110      	bne.n	800d970 <HAL_RCC_OscConfig+0x358>
 800d94e:	4b60      	ldr	r3, [pc, #384]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800d950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d954:	4a5e      	ldr	r2, [pc, #376]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800d956:	f043 0304 	orr.w	r3, r3, #4
 800d95a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d95e:	4b5c      	ldr	r3, [pc, #368]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800d960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d964:	4a5a      	ldr	r2, [pc, #360]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800d966:	f043 0301 	orr.w	r3, r3, #1
 800d96a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d96e:	e00f      	b.n	800d990 <HAL_RCC_OscConfig+0x378>
 800d970:	4b57      	ldr	r3, [pc, #348]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800d972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d976:	4a56      	ldr	r2, [pc, #344]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800d978:	f023 0301 	bic.w	r3, r3, #1
 800d97c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d980:	4b53      	ldr	r3, [pc, #332]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800d982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d986:	4a52      	ldr	r2, [pc, #328]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800d988:	f023 0304 	bic.w	r3, r3, #4
 800d98c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	689b      	ldr	r3, [r3, #8]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d016      	beq.n	800d9c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d998:	f7fd fae0 	bl	800af5c <HAL_GetTick>
 800d99c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d99e:	e00a      	b.n	800d9b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d9a0:	f7fd fadc 	bl	800af5c <HAL_GetTick>
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	1ad3      	subs	r3, r2, r3
 800d9aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d901      	bls.n	800d9b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800d9b2:	2303      	movs	r3, #3
 800d9b4:	e138      	b.n	800dc28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d9b6:	4b46      	ldr	r3, [pc, #280]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800d9b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9bc:	f003 0302 	and.w	r3, r3, #2
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d0ed      	beq.n	800d9a0 <HAL_RCC_OscConfig+0x388>
 800d9c4:	e015      	b.n	800d9f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d9c6:	f7fd fac9 	bl	800af5c <HAL_GetTick>
 800d9ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d9cc:	e00a      	b.n	800d9e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d9ce:	f7fd fac5 	bl	800af5c <HAL_GetTick>
 800d9d2:	4602      	mov	r2, r0
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	1ad3      	subs	r3, r2, r3
 800d9d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d901      	bls.n	800d9e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800d9e0:	2303      	movs	r3, #3
 800d9e2:	e121      	b.n	800dc28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d9e4:	4b3a      	ldr	r3, [pc, #232]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800d9e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9ea:	f003 0302 	and.w	r3, r3, #2
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d1ed      	bne.n	800d9ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d9f2:	7ffb      	ldrb	r3, [r7, #31]
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d105      	bne.n	800da04 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d9f8:	4b35      	ldr	r3, [pc, #212]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800d9fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9fc:	4a34      	ldr	r2, [pc, #208]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800d9fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800da02:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	f003 0320 	and.w	r3, r3, #32
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d03c      	beq.n	800da8a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	699b      	ldr	r3, [r3, #24]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d01c      	beq.n	800da52 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800da18:	4b2d      	ldr	r3, [pc, #180]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800da1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800da1e:	4a2c      	ldr	r2, [pc, #176]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800da20:	f043 0301 	orr.w	r3, r3, #1
 800da24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da28:	f7fd fa98 	bl	800af5c <HAL_GetTick>
 800da2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800da2e:	e008      	b.n	800da42 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800da30:	f7fd fa94 	bl	800af5c <HAL_GetTick>
 800da34:	4602      	mov	r2, r0
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	1ad3      	subs	r3, r2, r3
 800da3a:	2b02      	cmp	r3, #2
 800da3c:	d901      	bls.n	800da42 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800da3e:	2303      	movs	r3, #3
 800da40:	e0f2      	b.n	800dc28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800da42:	4b23      	ldr	r3, [pc, #140]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800da44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800da48:	f003 0302 	and.w	r3, r3, #2
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d0ef      	beq.n	800da30 <HAL_RCC_OscConfig+0x418>
 800da50:	e01b      	b.n	800da8a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800da52:	4b1f      	ldr	r3, [pc, #124]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800da54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800da58:	4a1d      	ldr	r2, [pc, #116]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800da5a:	f023 0301 	bic.w	r3, r3, #1
 800da5e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da62:	f7fd fa7b 	bl	800af5c <HAL_GetTick>
 800da66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800da68:	e008      	b.n	800da7c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800da6a:	f7fd fa77 	bl	800af5c <HAL_GetTick>
 800da6e:	4602      	mov	r2, r0
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	1ad3      	subs	r3, r2, r3
 800da74:	2b02      	cmp	r3, #2
 800da76:	d901      	bls.n	800da7c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800da78:	2303      	movs	r3, #3
 800da7a:	e0d5      	b.n	800dc28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800da7c:	4b14      	ldr	r3, [pc, #80]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800da7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800da82:	f003 0302 	and.w	r3, r3, #2
 800da86:	2b00      	cmp	r3, #0
 800da88:	d1ef      	bne.n	800da6a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	69db      	ldr	r3, [r3, #28]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	f000 80c9 	beq.w	800dc26 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800da94:	4b0e      	ldr	r3, [pc, #56]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800da96:	689b      	ldr	r3, [r3, #8]
 800da98:	f003 030c 	and.w	r3, r3, #12
 800da9c:	2b0c      	cmp	r3, #12
 800da9e:	f000 8083 	beq.w	800dba8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	69db      	ldr	r3, [r3, #28]
 800daa6:	2b02      	cmp	r3, #2
 800daa8:	d15e      	bne.n	800db68 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800daaa:	4b09      	ldr	r3, [pc, #36]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	4a08      	ldr	r2, [pc, #32]	@ (800dad0 <HAL_RCC_OscConfig+0x4b8>)
 800dab0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dab6:	f7fd fa51 	bl	800af5c <HAL_GetTick>
 800daba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dabc:	e00c      	b.n	800dad8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dabe:	f7fd fa4d 	bl	800af5c <HAL_GetTick>
 800dac2:	4602      	mov	r2, r0
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	1ad3      	subs	r3, r2, r3
 800dac8:	2b02      	cmp	r3, #2
 800daca:	d905      	bls.n	800dad8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800dacc:	2303      	movs	r3, #3
 800dace:	e0ab      	b.n	800dc28 <HAL_RCC_OscConfig+0x610>
 800dad0:	40021000 	.word	0x40021000
 800dad4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dad8:	4b55      	ldr	r3, [pc, #340]	@ (800dc30 <HAL_RCC_OscConfig+0x618>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d1ec      	bne.n	800dabe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800dae4:	4b52      	ldr	r3, [pc, #328]	@ (800dc30 <HAL_RCC_OscConfig+0x618>)
 800dae6:	68da      	ldr	r2, [r3, #12]
 800dae8:	4b52      	ldr	r3, [pc, #328]	@ (800dc34 <HAL_RCC_OscConfig+0x61c>)
 800daea:	4013      	ands	r3, r2
 800daec:	687a      	ldr	r2, [r7, #4]
 800daee:	6a11      	ldr	r1, [r2, #32]
 800daf0:	687a      	ldr	r2, [r7, #4]
 800daf2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800daf4:	3a01      	subs	r2, #1
 800daf6:	0112      	lsls	r2, r2, #4
 800daf8:	4311      	orrs	r1, r2
 800dafa:	687a      	ldr	r2, [r7, #4]
 800dafc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800dafe:	0212      	lsls	r2, r2, #8
 800db00:	4311      	orrs	r1, r2
 800db02:	687a      	ldr	r2, [r7, #4]
 800db04:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800db06:	0852      	lsrs	r2, r2, #1
 800db08:	3a01      	subs	r2, #1
 800db0a:	0552      	lsls	r2, r2, #21
 800db0c:	4311      	orrs	r1, r2
 800db0e:	687a      	ldr	r2, [r7, #4]
 800db10:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800db12:	0852      	lsrs	r2, r2, #1
 800db14:	3a01      	subs	r2, #1
 800db16:	0652      	lsls	r2, r2, #25
 800db18:	4311      	orrs	r1, r2
 800db1a:	687a      	ldr	r2, [r7, #4]
 800db1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800db1e:	06d2      	lsls	r2, r2, #27
 800db20:	430a      	orrs	r2, r1
 800db22:	4943      	ldr	r1, [pc, #268]	@ (800dc30 <HAL_RCC_OscConfig+0x618>)
 800db24:	4313      	orrs	r3, r2
 800db26:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800db28:	4b41      	ldr	r3, [pc, #260]	@ (800dc30 <HAL_RCC_OscConfig+0x618>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	4a40      	ldr	r2, [pc, #256]	@ (800dc30 <HAL_RCC_OscConfig+0x618>)
 800db2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800db32:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800db34:	4b3e      	ldr	r3, [pc, #248]	@ (800dc30 <HAL_RCC_OscConfig+0x618>)
 800db36:	68db      	ldr	r3, [r3, #12]
 800db38:	4a3d      	ldr	r2, [pc, #244]	@ (800dc30 <HAL_RCC_OscConfig+0x618>)
 800db3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800db3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db40:	f7fd fa0c 	bl	800af5c <HAL_GetTick>
 800db44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800db46:	e008      	b.n	800db5a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db48:	f7fd fa08 	bl	800af5c <HAL_GetTick>
 800db4c:	4602      	mov	r2, r0
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	1ad3      	subs	r3, r2, r3
 800db52:	2b02      	cmp	r3, #2
 800db54:	d901      	bls.n	800db5a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800db56:	2303      	movs	r3, #3
 800db58:	e066      	b.n	800dc28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800db5a:	4b35      	ldr	r3, [pc, #212]	@ (800dc30 <HAL_RCC_OscConfig+0x618>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db62:	2b00      	cmp	r3, #0
 800db64:	d0f0      	beq.n	800db48 <HAL_RCC_OscConfig+0x530>
 800db66:	e05e      	b.n	800dc26 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800db68:	4b31      	ldr	r3, [pc, #196]	@ (800dc30 <HAL_RCC_OscConfig+0x618>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	4a30      	ldr	r2, [pc, #192]	@ (800dc30 <HAL_RCC_OscConfig+0x618>)
 800db6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800db72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db74:	f7fd f9f2 	bl	800af5c <HAL_GetTick>
 800db78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800db7a:	e008      	b.n	800db8e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db7c:	f7fd f9ee 	bl	800af5c <HAL_GetTick>
 800db80:	4602      	mov	r2, r0
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	1ad3      	subs	r3, r2, r3
 800db86:	2b02      	cmp	r3, #2
 800db88:	d901      	bls.n	800db8e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800db8a:	2303      	movs	r3, #3
 800db8c:	e04c      	b.n	800dc28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800db8e:	4b28      	ldr	r3, [pc, #160]	@ (800dc30 <HAL_RCC_OscConfig+0x618>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db96:	2b00      	cmp	r3, #0
 800db98:	d1f0      	bne.n	800db7c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800db9a:	4b25      	ldr	r3, [pc, #148]	@ (800dc30 <HAL_RCC_OscConfig+0x618>)
 800db9c:	68da      	ldr	r2, [r3, #12]
 800db9e:	4924      	ldr	r1, [pc, #144]	@ (800dc30 <HAL_RCC_OscConfig+0x618>)
 800dba0:	4b25      	ldr	r3, [pc, #148]	@ (800dc38 <HAL_RCC_OscConfig+0x620>)
 800dba2:	4013      	ands	r3, r2
 800dba4:	60cb      	str	r3, [r1, #12]
 800dba6:	e03e      	b.n	800dc26 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	69db      	ldr	r3, [r3, #28]
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	d101      	bne.n	800dbb4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	e039      	b.n	800dc28 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800dbb4:	4b1e      	ldr	r3, [pc, #120]	@ (800dc30 <HAL_RCC_OscConfig+0x618>)
 800dbb6:	68db      	ldr	r3, [r3, #12]
 800dbb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	f003 0203 	and.w	r2, r3, #3
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6a1b      	ldr	r3, [r3, #32]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d12c      	bne.n	800dc22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbd2:	3b01      	subs	r3, #1
 800dbd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d123      	bne.n	800dc22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbe4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d11b      	bne.n	800dc22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbf4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d113      	bne.n	800dc22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc04:	085b      	lsrs	r3, r3, #1
 800dc06:	3b01      	subs	r3, #1
 800dc08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d109      	bne.n	800dc22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc18:	085b      	lsrs	r3, r3, #1
 800dc1a:	3b01      	subs	r3, #1
 800dc1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d001      	beq.n	800dc26 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800dc22:	2301      	movs	r3, #1
 800dc24:	e000      	b.n	800dc28 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800dc26:	2300      	movs	r3, #0
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3720      	adds	r7, #32
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	40021000 	.word	0x40021000
 800dc34:	019f800c 	.word	0x019f800c
 800dc38:	feeefffc 	.word	0xfeeefffc

0800dc3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b086      	sub	sp, #24
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800dc46:	2300      	movs	r3, #0
 800dc48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d101      	bne.n	800dc54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800dc50:	2301      	movs	r3, #1
 800dc52:	e11e      	b.n	800de92 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dc54:	4b91      	ldr	r3, [pc, #580]	@ (800de9c <HAL_RCC_ClockConfig+0x260>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f003 030f 	and.w	r3, r3, #15
 800dc5c:	683a      	ldr	r2, [r7, #0]
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d910      	bls.n	800dc84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dc62:	4b8e      	ldr	r3, [pc, #568]	@ (800de9c <HAL_RCC_ClockConfig+0x260>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f023 020f 	bic.w	r2, r3, #15
 800dc6a:	498c      	ldr	r1, [pc, #560]	@ (800de9c <HAL_RCC_ClockConfig+0x260>)
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	4313      	orrs	r3, r2
 800dc70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dc72:	4b8a      	ldr	r3, [pc, #552]	@ (800de9c <HAL_RCC_ClockConfig+0x260>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	f003 030f 	and.w	r3, r3, #15
 800dc7a:	683a      	ldr	r2, [r7, #0]
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d001      	beq.n	800dc84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800dc80:	2301      	movs	r3, #1
 800dc82:	e106      	b.n	800de92 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f003 0301 	and.w	r3, r3, #1
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d073      	beq.n	800dd78 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	2b03      	cmp	r3, #3
 800dc96:	d129      	bne.n	800dcec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dc98:	4b81      	ldr	r3, [pc, #516]	@ (800dea0 <HAL_RCC_ClockConfig+0x264>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d101      	bne.n	800dca8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800dca4:	2301      	movs	r3, #1
 800dca6:	e0f4      	b.n	800de92 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800dca8:	f000 f99e 	bl	800dfe8 <RCC_GetSysClockFreqFromPLLSource>
 800dcac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	4a7c      	ldr	r2, [pc, #496]	@ (800dea4 <HAL_RCC_ClockConfig+0x268>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d93f      	bls.n	800dd36 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800dcb6:	4b7a      	ldr	r3, [pc, #488]	@ (800dea0 <HAL_RCC_ClockConfig+0x264>)
 800dcb8:	689b      	ldr	r3, [r3, #8]
 800dcba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d009      	beq.n	800dcd6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d033      	beq.n	800dd36 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d12f      	bne.n	800dd36 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800dcd6:	4b72      	ldr	r3, [pc, #456]	@ (800dea0 <HAL_RCC_ClockConfig+0x264>)
 800dcd8:	689b      	ldr	r3, [r3, #8]
 800dcda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dcde:	4a70      	ldr	r2, [pc, #448]	@ (800dea0 <HAL_RCC_ClockConfig+0x264>)
 800dce0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dce4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800dce6:	2380      	movs	r3, #128	@ 0x80
 800dce8:	617b      	str	r3, [r7, #20]
 800dcea:	e024      	b.n	800dd36 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	685b      	ldr	r3, [r3, #4]
 800dcf0:	2b02      	cmp	r3, #2
 800dcf2:	d107      	bne.n	800dd04 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800dcf4:	4b6a      	ldr	r3, [pc, #424]	@ (800dea0 <HAL_RCC_ClockConfig+0x264>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d109      	bne.n	800dd14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800dd00:	2301      	movs	r3, #1
 800dd02:	e0c6      	b.n	800de92 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800dd04:	4b66      	ldr	r3, [pc, #408]	@ (800dea0 <HAL_RCC_ClockConfig+0x264>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d101      	bne.n	800dd14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800dd10:	2301      	movs	r3, #1
 800dd12:	e0be      	b.n	800de92 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800dd14:	f000 f8ce 	bl	800deb4 <HAL_RCC_GetSysClockFreq>
 800dd18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	4a61      	ldr	r2, [pc, #388]	@ (800dea4 <HAL_RCC_ClockConfig+0x268>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d909      	bls.n	800dd36 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800dd22:	4b5f      	ldr	r3, [pc, #380]	@ (800dea0 <HAL_RCC_ClockConfig+0x264>)
 800dd24:	689b      	ldr	r3, [r3, #8]
 800dd26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dd2a:	4a5d      	ldr	r2, [pc, #372]	@ (800dea0 <HAL_RCC_ClockConfig+0x264>)
 800dd2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800dd32:	2380      	movs	r3, #128	@ 0x80
 800dd34:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800dd36:	4b5a      	ldr	r3, [pc, #360]	@ (800dea0 <HAL_RCC_ClockConfig+0x264>)
 800dd38:	689b      	ldr	r3, [r3, #8]
 800dd3a:	f023 0203 	bic.w	r2, r3, #3
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	4957      	ldr	r1, [pc, #348]	@ (800dea0 <HAL_RCC_ClockConfig+0x264>)
 800dd44:	4313      	orrs	r3, r2
 800dd46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd48:	f7fd f908 	bl	800af5c <HAL_GetTick>
 800dd4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dd4e:	e00a      	b.n	800dd66 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dd50:	f7fd f904 	bl	800af5c <HAL_GetTick>
 800dd54:	4602      	mov	r2, r0
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	1ad3      	subs	r3, r2, r3
 800dd5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	d901      	bls.n	800dd66 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800dd62:	2303      	movs	r3, #3
 800dd64:	e095      	b.n	800de92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dd66:	4b4e      	ldr	r3, [pc, #312]	@ (800dea0 <HAL_RCC_ClockConfig+0x264>)
 800dd68:	689b      	ldr	r3, [r3, #8]
 800dd6a:	f003 020c 	and.w	r2, r3, #12
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	009b      	lsls	r3, r3, #2
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d1eb      	bne.n	800dd50 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f003 0302 	and.w	r3, r3, #2
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d023      	beq.n	800ddcc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f003 0304 	and.w	r3, r3, #4
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d005      	beq.n	800dd9c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dd90:	4b43      	ldr	r3, [pc, #268]	@ (800dea0 <HAL_RCC_ClockConfig+0x264>)
 800dd92:	689b      	ldr	r3, [r3, #8]
 800dd94:	4a42      	ldr	r2, [pc, #264]	@ (800dea0 <HAL_RCC_ClockConfig+0x264>)
 800dd96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800dd9a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f003 0308 	and.w	r3, r3, #8
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d007      	beq.n	800ddb8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800dda8:	4b3d      	ldr	r3, [pc, #244]	@ (800dea0 <HAL_RCC_ClockConfig+0x264>)
 800ddaa:	689b      	ldr	r3, [r3, #8]
 800ddac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ddb0:	4a3b      	ldr	r2, [pc, #236]	@ (800dea0 <HAL_RCC_ClockConfig+0x264>)
 800ddb2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800ddb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ddb8:	4b39      	ldr	r3, [pc, #228]	@ (800dea0 <HAL_RCC_ClockConfig+0x264>)
 800ddba:	689b      	ldr	r3, [r3, #8]
 800ddbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	689b      	ldr	r3, [r3, #8]
 800ddc4:	4936      	ldr	r1, [pc, #216]	@ (800dea0 <HAL_RCC_ClockConfig+0x264>)
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	608b      	str	r3, [r1, #8]
 800ddca:	e008      	b.n	800ddde <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	2b80      	cmp	r3, #128	@ 0x80
 800ddd0:	d105      	bne.n	800ddde <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800ddd2:	4b33      	ldr	r3, [pc, #204]	@ (800dea0 <HAL_RCC_ClockConfig+0x264>)
 800ddd4:	689b      	ldr	r3, [r3, #8]
 800ddd6:	4a32      	ldr	r2, [pc, #200]	@ (800dea0 <HAL_RCC_ClockConfig+0x264>)
 800ddd8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dddc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ddde:	4b2f      	ldr	r3, [pc, #188]	@ (800de9c <HAL_RCC_ClockConfig+0x260>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f003 030f 	and.w	r3, r3, #15
 800dde6:	683a      	ldr	r2, [r7, #0]
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d21d      	bcs.n	800de28 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ddec:	4b2b      	ldr	r3, [pc, #172]	@ (800de9c <HAL_RCC_ClockConfig+0x260>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f023 020f 	bic.w	r2, r3, #15
 800ddf4:	4929      	ldr	r1, [pc, #164]	@ (800de9c <HAL_RCC_ClockConfig+0x260>)
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ddfc:	f7fd f8ae 	bl	800af5c <HAL_GetTick>
 800de00:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800de02:	e00a      	b.n	800de1a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800de04:	f7fd f8aa 	bl	800af5c <HAL_GetTick>
 800de08:	4602      	mov	r2, r0
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	1ad3      	subs	r3, r2, r3
 800de0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800de12:	4293      	cmp	r3, r2
 800de14:	d901      	bls.n	800de1a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800de16:	2303      	movs	r3, #3
 800de18:	e03b      	b.n	800de92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800de1a:	4b20      	ldr	r3, [pc, #128]	@ (800de9c <HAL_RCC_ClockConfig+0x260>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f003 030f 	and.w	r3, r3, #15
 800de22:	683a      	ldr	r2, [r7, #0]
 800de24:	429a      	cmp	r2, r3
 800de26:	d1ed      	bne.n	800de04 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	f003 0304 	and.w	r3, r3, #4
 800de30:	2b00      	cmp	r3, #0
 800de32:	d008      	beq.n	800de46 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800de34:	4b1a      	ldr	r3, [pc, #104]	@ (800dea0 <HAL_RCC_ClockConfig+0x264>)
 800de36:	689b      	ldr	r3, [r3, #8]
 800de38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	4917      	ldr	r1, [pc, #92]	@ (800dea0 <HAL_RCC_ClockConfig+0x264>)
 800de42:	4313      	orrs	r3, r2
 800de44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f003 0308 	and.w	r3, r3, #8
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d009      	beq.n	800de66 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800de52:	4b13      	ldr	r3, [pc, #76]	@ (800dea0 <HAL_RCC_ClockConfig+0x264>)
 800de54:	689b      	ldr	r3, [r3, #8]
 800de56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	691b      	ldr	r3, [r3, #16]
 800de5e:	00db      	lsls	r3, r3, #3
 800de60:	490f      	ldr	r1, [pc, #60]	@ (800dea0 <HAL_RCC_ClockConfig+0x264>)
 800de62:	4313      	orrs	r3, r2
 800de64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800de66:	f000 f825 	bl	800deb4 <HAL_RCC_GetSysClockFreq>
 800de6a:	4602      	mov	r2, r0
 800de6c:	4b0c      	ldr	r3, [pc, #48]	@ (800dea0 <HAL_RCC_ClockConfig+0x264>)
 800de6e:	689b      	ldr	r3, [r3, #8]
 800de70:	091b      	lsrs	r3, r3, #4
 800de72:	f003 030f 	and.w	r3, r3, #15
 800de76:	490c      	ldr	r1, [pc, #48]	@ (800dea8 <HAL_RCC_ClockConfig+0x26c>)
 800de78:	5ccb      	ldrb	r3, [r1, r3]
 800de7a:	f003 031f 	and.w	r3, r3, #31
 800de7e:	fa22 f303 	lsr.w	r3, r2, r3
 800de82:	4a0a      	ldr	r2, [pc, #40]	@ (800deac <HAL_RCC_ClockConfig+0x270>)
 800de84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800de86:	4b0a      	ldr	r3, [pc, #40]	@ (800deb0 <HAL_RCC_ClockConfig+0x274>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7fd f81a 	bl	800aec4 <HAL_InitTick>
 800de90:	4603      	mov	r3, r0
}
 800de92:	4618      	mov	r0, r3
 800de94:	3718      	adds	r7, #24
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	bf00      	nop
 800de9c:	40022000 	.word	0x40022000
 800dea0:	40021000 	.word	0x40021000
 800dea4:	04c4b400 	.word	0x04c4b400
 800dea8:	08014f88 	.word	0x08014f88
 800deac:	200005c0 	.word	0x200005c0
 800deb0:	200005c4 	.word	0x200005c4

0800deb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800deb4:	b480      	push	{r7}
 800deb6:	b087      	sub	sp, #28
 800deb8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800deba:	4b2c      	ldr	r3, [pc, #176]	@ (800df6c <HAL_RCC_GetSysClockFreq+0xb8>)
 800debc:	689b      	ldr	r3, [r3, #8]
 800debe:	f003 030c 	and.w	r3, r3, #12
 800dec2:	2b04      	cmp	r3, #4
 800dec4:	d102      	bne.n	800decc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800dec6:	4b2a      	ldr	r3, [pc, #168]	@ (800df70 <HAL_RCC_GetSysClockFreq+0xbc>)
 800dec8:	613b      	str	r3, [r7, #16]
 800deca:	e047      	b.n	800df5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800decc:	4b27      	ldr	r3, [pc, #156]	@ (800df6c <HAL_RCC_GetSysClockFreq+0xb8>)
 800dece:	689b      	ldr	r3, [r3, #8]
 800ded0:	f003 030c 	and.w	r3, r3, #12
 800ded4:	2b08      	cmp	r3, #8
 800ded6:	d102      	bne.n	800dede <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ded8:	4b26      	ldr	r3, [pc, #152]	@ (800df74 <HAL_RCC_GetSysClockFreq+0xc0>)
 800deda:	613b      	str	r3, [r7, #16]
 800dedc:	e03e      	b.n	800df5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800dede:	4b23      	ldr	r3, [pc, #140]	@ (800df6c <HAL_RCC_GetSysClockFreq+0xb8>)
 800dee0:	689b      	ldr	r3, [r3, #8]
 800dee2:	f003 030c 	and.w	r3, r3, #12
 800dee6:	2b0c      	cmp	r3, #12
 800dee8:	d136      	bne.n	800df58 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800deea:	4b20      	ldr	r3, [pc, #128]	@ (800df6c <HAL_RCC_GetSysClockFreq+0xb8>)
 800deec:	68db      	ldr	r3, [r3, #12]
 800deee:	f003 0303 	and.w	r3, r3, #3
 800def2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800def4:	4b1d      	ldr	r3, [pc, #116]	@ (800df6c <HAL_RCC_GetSysClockFreq+0xb8>)
 800def6:	68db      	ldr	r3, [r3, #12]
 800def8:	091b      	lsrs	r3, r3, #4
 800defa:	f003 030f 	and.w	r3, r3, #15
 800defe:	3301      	adds	r3, #1
 800df00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	2b03      	cmp	r3, #3
 800df06:	d10c      	bne.n	800df22 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800df08:	4a1a      	ldr	r2, [pc, #104]	@ (800df74 <HAL_RCC_GetSysClockFreq+0xc0>)
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800df10:	4a16      	ldr	r2, [pc, #88]	@ (800df6c <HAL_RCC_GetSysClockFreq+0xb8>)
 800df12:	68d2      	ldr	r2, [r2, #12]
 800df14:	0a12      	lsrs	r2, r2, #8
 800df16:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800df1a:	fb02 f303 	mul.w	r3, r2, r3
 800df1e:	617b      	str	r3, [r7, #20]
      break;
 800df20:	e00c      	b.n	800df3c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800df22:	4a13      	ldr	r2, [pc, #76]	@ (800df70 <HAL_RCC_GetSysClockFreq+0xbc>)
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	fbb2 f3f3 	udiv	r3, r2, r3
 800df2a:	4a10      	ldr	r2, [pc, #64]	@ (800df6c <HAL_RCC_GetSysClockFreq+0xb8>)
 800df2c:	68d2      	ldr	r2, [r2, #12]
 800df2e:	0a12      	lsrs	r2, r2, #8
 800df30:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800df34:	fb02 f303 	mul.w	r3, r2, r3
 800df38:	617b      	str	r3, [r7, #20]
      break;
 800df3a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800df3c:	4b0b      	ldr	r3, [pc, #44]	@ (800df6c <HAL_RCC_GetSysClockFreq+0xb8>)
 800df3e:	68db      	ldr	r3, [r3, #12]
 800df40:	0e5b      	lsrs	r3, r3, #25
 800df42:	f003 0303 	and.w	r3, r3, #3
 800df46:	3301      	adds	r3, #1
 800df48:	005b      	lsls	r3, r3, #1
 800df4a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800df4c:	697a      	ldr	r2, [r7, #20]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	fbb2 f3f3 	udiv	r3, r2, r3
 800df54:	613b      	str	r3, [r7, #16]
 800df56:	e001      	b.n	800df5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800df58:	2300      	movs	r3, #0
 800df5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800df5c:	693b      	ldr	r3, [r7, #16]
}
 800df5e:	4618      	mov	r0, r3
 800df60:	371c      	adds	r7, #28
 800df62:	46bd      	mov	sp, r7
 800df64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df68:	4770      	bx	lr
 800df6a:	bf00      	nop
 800df6c:	40021000 	.word	0x40021000
 800df70:	00f42400 	.word	0x00f42400
 800df74:	016e3600 	.word	0x016e3600

0800df78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800df78:	b480      	push	{r7}
 800df7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800df7c:	4b03      	ldr	r3, [pc, #12]	@ (800df8c <HAL_RCC_GetHCLKFreq+0x14>)
 800df7e:	681b      	ldr	r3, [r3, #0]
}
 800df80:	4618      	mov	r0, r3
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr
 800df8a:	bf00      	nop
 800df8c:	200005c0 	.word	0x200005c0

0800df90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800df94:	f7ff fff0 	bl	800df78 <HAL_RCC_GetHCLKFreq>
 800df98:	4602      	mov	r2, r0
 800df9a:	4b06      	ldr	r3, [pc, #24]	@ (800dfb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800df9c:	689b      	ldr	r3, [r3, #8]
 800df9e:	0a1b      	lsrs	r3, r3, #8
 800dfa0:	f003 0307 	and.w	r3, r3, #7
 800dfa4:	4904      	ldr	r1, [pc, #16]	@ (800dfb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800dfa6:	5ccb      	ldrb	r3, [r1, r3]
 800dfa8:	f003 031f 	and.w	r3, r3, #31
 800dfac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	bd80      	pop	{r7, pc}
 800dfb4:	40021000 	.word	0x40021000
 800dfb8:	08014f98 	.word	0x08014f98

0800dfbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800dfc0:	f7ff ffda 	bl	800df78 <HAL_RCC_GetHCLKFreq>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	4b06      	ldr	r3, [pc, #24]	@ (800dfe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800dfc8:	689b      	ldr	r3, [r3, #8]
 800dfca:	0adb      	lsrs	r3, r3, #11
 800dfcc:	f003 0307 	and.w	r3, r3, #7
 800dfd0:	4904      	ldr	r1, [pc, #16]	@ (800dfe4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800dfd2:	5ccb      	ldrb	r3, [r1, r3]
 800dfd4:	f003 031f 	and.w	r3, r3, #31
 800dfd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	bd80      	pop	{r7, pc}
 800dfe0:	40021000 	.word	0x40021000
 800dfe4:	08014f98 	.word	0x08014f98

0800dfe8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b087      	sub	sp, #28
 800dfec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800dfee:	4b1e      	ldr	r3, [pc, #120]	@ (800e068 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800dff0:	68db      	ldr	r3, [r3, #12]
 800dff2:	f003 0303 	and.w	r3, r3, #3
 800dff6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800dff8:	4b1b      	ldr	r3, [pc, #108]	@ (800e068 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800dffa:	68db      	ldr	r3, [r3, #12]
 800dffc:	091b      	lsrs	r3, r3, #4
 800dffe:	f003 030f 	and.w	r3, r3, #15
 800e002:	3301      	adds	r3, #1
 800e004:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	2b03      	cmp	r3, #3
 800e00a:	d10c      	bne.n	800e026 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e00c:	4a17      	ldr	r2, [pc, #92]	@ (800e06c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	fbb2 f3f3 	udiv	r3, r2, r3
 800e014:	4a14      	ldr	r2, [pc, #80]	@ (800e068 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e016:	68d2      	ldr	r2, [r2, #12]
 800e018:	0a12      	lsrs	r2, r2, #8
 800e01a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e01e:	fb02 f303 	mul.w	r3, r2, r3
 800e022:	617b      	str	r3, [r7, #20]
    break;
 800e024:	e00c      	b.n	800e040 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e026:	4a12      	ldr	r2, [pc, #72]	@ (800e070 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e02e:	4a0e      	ldr	r2, [pc, #56]	@ (800e068 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e030:	68d2      	ldr	r2, [r2, #12]
 800e032:	0a12      	lsrs	r2, r2, #8
 800e034:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e038:	fb02 f303 	mul.w	r3, r2, r3
 800e03c:	617b      	str	r3, [r7, #20]
    break;
 800e03e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800e040:	4b09      	ldr	r3, [pc, #36]	@ (800e068 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e042:	68db      	ldr	r3, [r3, #12]
 800e044:	0e5b      	lsrs	r3, r3, #25
 800e046:	f003 0303 	and.w	r3, r3, #3
 800e04a:	3301      	adds	r3, #1
 800e04c:	005b      	lsls	r3, r3, #1
 800e04e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800e050:	697a      	ldr	r2, [r7, #20]
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	fbb2 f3f3 	udiv	r3, r2, r3
 800e058:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800e05a:	687b      	ldr	r3, [r7, #4]
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	371c      	adds	r7, #28
 800e060:	46bd      	mov	sp, r7
 800e062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e066:	4770      	bx	lr
 800e068:	40021000 	.word	0x40021000
 800e06c:	016e3600 	.word	0x016e3600
 800e070:	00f42400 	.word	0x00f42400

0800e074 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b086      	sub	sp, #24
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e07c:	2300      	movs	r3, #0
 800e07e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e080:	2300      	movs	r3, #0
 800e082:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	f000 8098 	beq.w	800e1c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e092:	2300      	movs	r3, #0
 800e094:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e096:	4b43      	ldr	r3, [pc, #268]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e09a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d10d      	bne.n	800e0be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e0a2:	4b40      	ldr	r3, [pc, #256]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e0a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e0a6:	4a3f      	ldr	r2, [pc, #252]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e0a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e0ac:	6593      	str	r3, [r2, #88]	@ 0x58
 800e0ae:	4b3d      	ldr	r3, [pc, #244]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e0b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e0b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e0b6:	60bb      	str	r3, [r7, #8]
 800e0b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e0be:	4b3a      	ldr	r3, [pc, #232]	@ (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	4a39      	ldr	r2, [pc, #228]	@ (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e0c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e0c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e0ca:	f7fc ff47 	bl	800af5c <HAL_GetTick>
 800e0ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e0d0:	e009      	b.n	800e0e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e0d2:	f7fc ff43 	bl	800af5c <HAL_GetTick>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	1ad3      	subs	r3, r2, r3
 800e0dc:	2b02      	cmp	r3, #2
 800e0de:	d902      	bls.n	800e0e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800e0e0:	2303      	movs	r3, #3
 800e0e2:	74fb      	strb	r3, [r7, #19]
        break;
 800e0e4:	e005      	b.n	800e0f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e0e6:	4b30      	ldr	r3, [pc, #192]	@ (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d0ef      	beq.n	800e0d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800e0f2:	7cfb      	ldrb	r3, [r7, #19]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d159      	bne.n	800e1ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e0f8:	4b2a      	ldr	r3, [pc, #168]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e0fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e0fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e102:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d01e      	beq.n	800e148 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e10e:	697a      	ldr	r2, [r7, #20]
 800e110:	429a      	cmp	r2, r3
 800e112:	d019      	beq.n	800e148 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e114:	4b23      	ldr	r3, [pc, #140]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e11a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e11e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e120:	4b20      	ldr	r3, [pc, #128]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e126:	4a1f      	ldr	r2, [pc, #124]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e12c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e130:	4b1c      	ldr	r3, [pc, #112]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e136:	4a1b      	ldr	r2, [pc, #108]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e138:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e13c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e140:	4a18      	ldr	r2, [pc, #96]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	f003 0301 	and.w	r3, r3, #1
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d016      	beq.n	800e180 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e152:	f7fc ff03 	bl	800af5c <HAL_GetTick>
 800e156:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e158:	e00b      	b.n	800e172 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e15a:	f7fc feff 	bl	800af5c <HAL_GetTick>
 800e15e:	4602      	mov	r2, r0
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	1ad3      	subs	r3, r2, r3
 800e164:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e168:	4293      	cmp	r3, r2
 800e16a:	d902      	bls.n	800e172 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800e16c:	2303      	movs	r3, #3
 800e16e:	74fb      	strb	r3, [r7, #19]
            break;
 800e170:	e006      	b.n	800e180 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e172:	4b0c      	ldr	r3, [pc, #48]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e178:	f003 0302 	and.w	r3, r3, #2
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d0ec      	beq.n	800e15a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800e180:	7cfb      	ldrb	r3, [r7, #19]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d10b      	bne.n	800e19e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e186:	4b07      	ldr	r3, [pc, #28]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e18c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e194:	4903      	ldr	r1, [pc, #12]	@ (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e196:	4313      	orrs	r3, r2
 800e198:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800e19c:	e008      	b.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e19e:	7cfb      	ldrb	r3, [r7, #19]
 800e1a0:	74bb      	strb	r3, [r7, #18]
 800e1a2:	e005      	b.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800e1a4:	40021000 	.word	0x40021000
 800e1a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1ac:	7cfb      	ldrb	r3, [r7, #19]
 800e1ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e1b0:	7c7b      	ldrb	r3, [r7, #17]
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	d105      	bne.n	800e1c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e1b6:	4ba7      	ldr	r3, [pc, #668]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e1b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e1ba:	4aa6      	ldr	r2, [pc, #664]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e1bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e1c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f003 0301 	and.w	r3, r3, #1
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d00a      	beq.n	800e1e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e1ce:	4ba1      	ldr	r3, [pc, #644]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e1d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e1d4:	f023 0203 	bic.w	r2, r3, #3
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	499d      	ldr	r1, [pc, #628]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e1de:	4313      	orrs	r3, r2
 800e1e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	f003 0302 	and.w	r3, r3, #2
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d00a      	beq.n	800e206 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e1f0:	4b98      	ldr	r3, [pc, #608]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e1f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e1f6:	f023 020c 	bic.w	r2, r3, #12
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	689b      	ldr	r3, [r3, #8]
 800e1fe:	4995      	ldr	r1, [pc, #596]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e200:	4313      	orrs	r3, r2
 800e202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f003 0304 	and.w	r3, r3, #4
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d00a      	beq.n	800e228 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e212:	4b90      	ldr	r3, [pc, #576]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e218:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	68db      	ldr	r3, [r3, #12]
 800e220:	498c      	ldr	r1, [pc, #560]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e222:	4313      	orrs	r3, r2
 800e224:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	f003 0308 	and.w	r3, r3, #8
 800e230:	2b00      	cmp	r3, #0
 800e232:	d00a      	beq.n	800e24a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e234:	4b87      	ldr	r3, [pc, #540]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e23a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	691b      	ldr	r3, [r3, #16]
 800e242:	4984      	ldr	r1, [pc, #528]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e244:	4313      	orrs	r3, r2
 800e246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f003 0310 	and.w	r3, r3, #16
 800e252:	2b00      	cmp	r3, #0
 800e254:	d00a      	beq.n	800e26c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e256:	4b7f      	ldr	r3, [pc, #508]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e25c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	695b      	ldr	r3, [r3, #20]
 800e264:	497b      	ldr	r1, [pc, #492]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e266:	4313      	orrs	r3, r2
 800e268:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f003 0320 	and.w	r3, r3, #32
 800e274:	2b00      	cmp	r3, #0
 800e276:	d00a      	beq.n	800e28e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e278:	4b76      	ldr	r3, [pc, #472]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e27a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e27e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	699b      	ldr	r3, [r3, #24]
 800e286:	4973      	ldr	r1, [pc, #460]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e288:	4313      	orrs	r3, r2
 800e28a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e296:	2b00      	cmp	r3, #0
 800e298:	d00a      	beq.n	800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e29a:	4b6e      	ldr	r3, [pc, #440]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e29c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	69db      	ldr	r3, [r3, #28]
 800e2a8:	496a      	ldr	r1, [pc, #424]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2aa:	4313      	orrs	r3, r2
 800e2ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d00a      	beq.n	800e2d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e2bc:	4b65      	ldr	r3, [pc, #404]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6a1b      	ldr	r3, [r3, #32]
 800e2ca:	4962      	ldr	r1, [pc, #392]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2cc:	4313      	orrs	r3, r2
 800e2ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d00a      	beq.n	800e2f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e2de:	4b5d      	ldr	r3, [pc, #372]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2ec:	4959      	ldr	r1, [pc, #356]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2ee:	4313      	orrs	r3, r2
 800e2f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d00a      	beq.n	800e316 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e300:	4b54      	ldr	r3, [pc, #336]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e302:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e306:	f023 0203 	bic.w	r2, r3, #3
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e30e:	4951      	ldr	r1, [pc, #324]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e310:	4313      	orrs	r3, r2
 800e312:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d00a      	beq.n	800e338 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e322:	4b4c      	ldr	r3, [pc, #304]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e328:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e330:	4948      	ldr	r1, [pc, #288]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e332:	4313      	orrs	r3, r2
 800e334:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e340:	2b00      	cmp	r3, #0
 800e342:	d015      	beq.n	800e370 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e344:	4b43      	ldr	r3, [pc, #268]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e34a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e352:	4940      	ldr	r1, [pc, #256]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e354:	4313      	orrs	r3, r2
 800e356:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e35e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e362:	d105      	bne.n	800e370 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e364:	4b3b      	ldr	r3, [pc, #236]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e366:	68db      	ldr	r3, [r3, #12]
 800e368:	4a3a      	ldr	r2, [pc, #232]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e36a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e36e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d015      	beq.n	800e3a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e37c:	4b35      	ldr	r3, [pc, #212]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e37e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e382:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e38a:	4932      	ldr	r1, [pc, #200]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e38c:	4313      	orrs	r3, r2
 800e38e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e396:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e39a:	d105      	bne.n	800e3a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e39c:	4b2d      	ldr	r3, [pc, #180]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e39e:	68db      	ldr	r3, [r3, #12]
 800e3a0:	4a2c      	ldr	r2, [pc, #176]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e3a6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d015      	beq.n	800e3e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e3b4:	4b27      	ldr	r3, [pc, #156]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3c2:	4924      	ldr	r1, [pc, #144]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3c4:	4313      	orrs	r3, r2
 800e3c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e3d2:	d105      	bne.n	800e3e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e3d4:	4b1f      	ldr	r3, [pc, #124]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3d6:	68db      	ldr	r3, [r3, #12]
 800e3d8:	4a1e      	ldr	r2, [pc, #120]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e3de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d015      	beq.n	800e418 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e3ec:	4b19      	ldr	r3, [pc, #100]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e3fa:	4916      	ldr	r1, [pc, #88]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3fc:	4313      	orrs	r3, r2
 800e3fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e406:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e40a:	d105      	bne.n	800e418 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e40c:	4b11      	ldr	r3, [pc, #68]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e40e:	68db      	ldr	r3, [r3, #12]
 800e410:	4a10      	ldr	r2, [pc, #64]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e412:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e416:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e420:	2b00      	cmp	r3, #0
 800e422:	d019      	beq.n	800e458 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e424:	4b0b      	ldr	r3, [pc, #44]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e42a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e432:	4908      	ldr	r1, [pc, #32]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e434:	4313      	orrs	r3, r2
 800e436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e43e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e442:	d109      	bne.n	800e458 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e444:	4b03      	ldr	r3, [pc, #12]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e446:	68db      	ldr	r3, [r3, #12]
 800e448:	4a02      	ldr	r2, [pc, #8]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e44a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e44e:	60d3      	str	r3, [r2, #12]
 800e450:	e002      	b.n	800e458 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800e452:	bf00      	nop
 800e454:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e460:	2b00      	cmp	r3, #0
 800e462:	d015      	beq.n	800e490 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800e464:	4b29      	ldr	r3, [pc, #164]	@ (800e50c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e46a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e472:	4926      	ldr	r1, [pc, #152]	@ (800e50c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e474:	4313      	orrs	r3, r2
 800e476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e47e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e482:	d105      	bne.n	800e490 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e484:	4b21      	ldr	r3, [pc, #132]	@ (800e50c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	4a20      	ldr	r2, [pc, #128]	@ (800e50c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e48a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e48e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d015      	beq.n	800e4c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800e49c:	4b1b      	ldr	r3, [pc, #108]	@ (800e50c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e49e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e4a2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e4aa:	4918      	ldr	r1, [pc, #96]	@ (800e50c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e4ac:	4313      	orrs	r3, r2
 800e4ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e4b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4ba:	d105      	bne.n	800e4c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e4bc:	4b13      	ldr	r3, [pc, #76]	@ (800e50c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e4be:	68db      	ldr	r3, [r3, #12]
 800e4c0:	4a12      	ldr	r2, [pc, #72]	@ (800e50c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e4c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e4c6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d015      	beq.n	800e500 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e4d4:	4b0d      	ldr	r3, [pc, #52]	@ (800e50c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e4d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e4da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4e2:	490a      	ldr	r1, [pc, #40]	@ (800e50c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e4e4:	4313      	orrs	r3, r2
 800e4e6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e4f2:	d105      	bne.n	800e500 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e4f4:	4b05      	ldr	r3, [pc, #20]	@ (800e50c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e4f6:	68db      	ldr	r3, [r3, #12]
 800e4f8:	4a04      	ldr	r2, [pc, #16]	@ (800e50c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e4fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e4fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800e500:	7cbb      	ldrb	r3, [r7, #18]
}
 800e502:	4618      	mov	r0, r3
 800e504:	3718      	adds	r7, #24
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}
 800e50a:	bf00      	nop
 800e50c:	40021000 	.word	0x40021000

0800e510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b082      	sub	sp, #8
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d101      	bne.n	800e522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e51e:	2301      	movs	r3, #1
 800e520:	e054      	b.n	800e5cc <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d111      	bne.n	800e552 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2200      	movs	r2, #0
 800e532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f001 fee2 	bl	8010300 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e540:	2b00      	cmp	r3, #0
 800e542:	d102      	bne.n	800e54a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	4a23      	ldr	r2, [pc, #140]	@ (800e5d4 <HAL_TIM_Base_Init+0xc4>)
 800e548:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2202      	movs	r2, #2
 800e556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681a      	ldr	r2, [r3, #0]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	3304      	adds	r3, #4
 800e562:	4619      	mov	r1, r3
 800e564:	4610      	mov	r0, r2
 800e566:	f001 fa2b 	bl	800f9c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2201      	movs	r2, #1
 800e56e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2201      	movs	r2, #1
 800e576:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2201      	movs	r2, #1
 800e57e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2201      	movs	r2, #1
 800e586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2201      	movs	r2, #1
 800e58e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2201      	movs	r2, #1
 800e596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2201      	movs	r2, #1
 800e59e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2201      	movs	r2, #1
 800e5a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2201      	movs	r2, #1
 800e5ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2201      	movs	r2, #1
 800e5b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2201      	movs	r2, #1
 800e5be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2201      	movs	r2, #1
 800e5c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e5ca:	2300      	movs	r3, #0
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3708      	adds	r7, #8
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}
 800e5d4:	0800a785 	.word	0x0800a785

0800e5d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b085      	sub	sp, #20
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e5e6:	b2db      	uxtb	r3, r3
 800e5e8:	2b01      	cmp	r3, #1
 800e5ea:	d001      	beq.n	800e5f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	e04c      	b.n	800e68a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2202      	movs	r2, #2
 800e5f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	4a26      	ldr	r2, [pc, #152]	@ (800e698 <HAL_TIM_Base_Start+0xc0>)
 800e5fe:	4293      	cmp	r3, r2
 800e600:	d022      	beq.n	800e648 <HAL_TIM_Base_Start+0x70>
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e60a:	d01d      	beq.n	800e648 <HAL_TIM_Base_Start+0x70>
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	4a22      	ldr	r2, [pc, #136]	@ (800e69c <HAL_TIM_Base_Start+0xc4>)
 800e612:	4293      	cmp	r3, r2
 800e614:	d018      	beq.n	800e648 <HAL_TIM_Base_Start+0x70>
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	4a21      	ldr	r2, [pc, #132]	@ (800e6a0 <HAL_TIM_Base_Start+0xc8>)
 800e61c:	4293      	cmp	r3, r2
 800e61e:	d013      	beq.n	800e648 <HAL_TIM_Base_Start+0x70>
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	4a1f      	ldr	r2, [pc, #124]	@ (800e6a4 <HAL_TIM_Base_Start+0xcc>)
 800e626:	4293      	cmp	r3, r2
 800e628:	d00e      	beq.n	800e648 <HAL_TIM_Base_Start+0x70>
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	4a1e      	ldr	r2, [pc, #120]	@ (800e6a8 <HAL_TIM_Base_Start+0xd0>)
 800e630:	4293      	cmp	r3, r2
 800e632:	d009      	beq.n	800e648 <HAL_TIM_Base_Start+0x70>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	4a1c      	ldr	r2, [pc, #112]	@ (800e6ac <HAL_TIM_Base_Start+0xd4>)
 800e63a:	4293      	cmp	r3, r2
 800e63c:	d004      	beq.n	800e648 <HAL_TIM_Base_Start+0x70>
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	4a1b      	ldr	r2, [pc, #108]	@ (800e6b0 <HAL_TIM_Base_Start+0xd8>)
 800e644:	4293      	cmp	r3, r2
 800e646:	d115      	bne.n	800e674 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	689a      	ldr	r2, [r3, #8]
 800e64e:	4b19      	ldr	r3, [pc, #100]	@ (800e6b4 <HAL_TIM_Base_Start+0xdc>)
 800e650:	4013      	ands	r3, r2
 800e652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2b06      	cmp	r3, #6
 800e658:	d015      	beq.n	800e686 <HAL_TIM_Base_Start+0xae>
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e660:	d011      	beq.n	800e686 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	681a      	ldr	r2, [r3, #0]
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	f042 0201 	orr.w	r2, r2, #1
 800e670:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e672:	e008      	b.n	800e686 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	f042 0201 	orr.w	r2, r2, #1
 800e682:	601a      	str	r2, [r3, #0]
 800e684:	e000      	b.n	800e688 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e686:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e688:	2300      	movs	r3, #0
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3714      	adds	r7, #20
 800e68e:	46bd      	mov	sp, r7
 800e690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e694:	4770      	bx	lr
 800e696:	bf00      	nop
 800e698:	40012c00 	.word	0x40012c00
 800e69c:	40000400 	.word	0x40000400
 800e6a0:	40000800 	.word	0x40000800
 800e6a4:	40000c00 	.word	0x40000c00
 800e6a8:	40013400 	.word	0x40013400
 800e6ac:	40014000 	.word	0x40014000
 800e6b0:	40015000 	.word	0x40015000
 800e6b4:	00010007 	.word	0x00010007

0800e6b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b085      	sub	sp, #20
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e6c6:	b2db      	uxtb	r3, r3
 800e6c8:	2b01      	cmp	r3, #1
 800e6ca:	d001      	beq.n	800e6d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	e054      	b.n	800e77a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2202      	movs	r2, #2
 800e6d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	68da      	ldr	r2, [r3, #12]
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f042 0201 	orr.w	r2, r2, #1
 800e6e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	4a26      	ldr	r2, [pc, #152]	@ (800e788 <HAL_TIM_Base_Start_IT+0xd0>)
 800e6ee:	4293      	cmp	r3, r2
 800e6f0:	d022      	beq.n	800e738 <HAL_TIM_Base_Start_IT+0x80>
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e6fa:	d01d      	beq.n	800e738 <HAL_TIM_Base_Start_IT+0x80>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4a22      	ldr	r2, [pc, #136]	@ (800e78c <HAL_TIM_Base_Start_IT+0xd4>)
 800e702:	4293      	cmp	r3, r2
 800e704:	d018      	beq.n	800e738 <HAL_TIM_Base_Start_IT+0x80>
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	4a21      	ldr	r2, [pc, #132]	@ (800e790 <HAL_TIM_Base_Start_IT+0xd8>)
 800e70c:	4293      	cmp	r3, r2
 800e70e:	d013      	beq.n	800e738 <HAL_TIM_Base_Start_IT+0x80>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	4a1f      	ldr	r2, [pc, #124]	@ (800e794 <HAL_TIM_Base_Start_IT+0xdc>)
 800e716:	4293      	cmp	r3, r2
 800e718:	d00e      	beq.n	800e738 <HAL_TIM_Base_Start_IT+0x80>
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	4a1e      	ldr	r2, [pc, #120]	@ (800e798 <HAL_TIM_Base_Start_IT+0xe0>)
 800e720:	4293      	cmp	r3, r2
 800e722:	d009      	beq.n	800e738 <HAL_TIM_Base_Start_IT+0x80>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	4a1c      	ldr	r2, [pc, #112]	@ (800e79c <HAL_TIM_Base_Start_IT+0xe4>)
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d004      	beq.n	800e738 <HAL_TIM_Base_Start_IT+0x80>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	4a1b      	ldr	r2, [pc, #108]	@ (800e7a0 <HAL_TIM_Base_Start_IT+0xe8>)
 800e734:	4293      	cmp	r3, r2
 800e736:	d115      	bne.n	800e764 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	689a      	ldr	r2, [r3, #8]
 800e73e:	4b19      	ldr	r3, [pc, #100]	@ (800e7a4 <HAL_TIM_Base_Start_IT+0xec>)
 800e740:	4013      	ands	r3, r2
 800e742:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	2b06      	cmp	r3, #6
 800e748:	d015      	beq.n	800e776 <HAL_TIM_Base_Start_IT+0xbe>
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e750:	d011      	beq.n	800e776 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	681a      	ldr	r2, [r3, #0]
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	f042 0201 	orr.w	r2, r2, #1
 800e760:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e762:	e008      	b.n	800e776 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	681a      	ldr	r2, [r3, #0]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	f042 0201 	orr.w	r2, r2, #1
 800e772:	601a      	str	r2, [r3, #0]
 800e774:	e000      	b.n	800e778 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e776:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e778:	2300      	movs	r3, #0
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	3714      	adds	r7, #20
 800e77e:	46bd      	mov	sp, r7
 800e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e784:	4770      	bx	lr
 800e786:	bf00      	nop
 800e788:	40012c00 	.word	0x40012c00
 800e78c:	40000400 	.word	0x40000400
 800e790:	40000800 	.word	0x40000800
 800e794:	40000c00 	.word	0x40000c00
 800e798:	40013400 	.word	0x40013400
 800e79c:	40014000 	.word	0x40014000
 800e7a0:	40015000 	.word	0x40015000
 800e7a4:	00010007 	.word	0x00010007

0800e7a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b082      	sub	sp, #8
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d101      	bne.n	800e7ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	e054      	b.n	800e864 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e7c0:	b2db      	uxtb	r3, r3
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d111      	bne.n	800e7ea <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f001 fd96 	bl	8010300 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d102      	bne.n	800e7e2 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	4a23      	ldr	r2, [pc, #140]	@ (800e86c <HAL_TIM_PWM_Init+0xc4>)
 800e7e0:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2202      	movs	r2, #2
 800e7ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681a      	ldr	r2, [r3, #0]
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	3304      	adds	r3, #4
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	4610      	mov	r0, r2
 800e7fe:	f001 f8df 	bl	800f9c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2201      	movs	r2, #1
 800e806:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2201      	movs	r2, #1
 800e80e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2201      	movs	r2, #1
 800e816:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2201      	movs	r2, #1
 800e81e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2201      	movs	r2, #1
 800e826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2201      	movs	r2, #1
 800e82e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2201      	movs	r2, #1
 800e836:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2201      	movs	r2, #1
 800e83e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2201      	movs	r2, #1
 800e846:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2201      	movs	r2, #1
 800e84e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2201      	movs	r2, #1
 800e856:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2201      	movs	r2, #1
 800e85e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e862:	2300      	movs	r3, #0
}
 800e864:	4618      	mov	r0, r3
 800e866:	3708      	adds	r7, #8
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}
 800e86c:	0800a739 	.word	0x0800a739

0800e870 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b084      	sub	sp, #16
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d109      	bne.n	800e894 <HAL_TIM_PWM_Start+0x24>
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e886:	b2db      	uxtb	r3, r3
 800e888:	2b01      	cmp	r3, #1
 800e88a:	bf14      	ite	ne
 800e88c:	2301      	movne	r3, #1
 800e88e:	2300      	moveq	r3, #0
 800e890:	b2db      	uxtb	r3, r3
 800e892:	e03c      	b.n	800e90e <HAL_TIM_PWM_Start+0x9e>
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	2b04      	cmp	r3, #4
 800e898:	d109      	bne.n	800e8ae <HAL_TIM_PWM_Start+0x3e>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e8a0:	b2db      	uxtb	r3, r3
 800e8a2:	2b01      	cmp	r3, #1
 800e8a4:	bf14      	ite	ne
 800e8a6:	2301      	movne	r3, #1
 800e8a8:	2300      	moveq	r3, #0
 800e8aa:	b2db      	uxtb	r3, r3
 800e8ac:	e02f      	b.n	800e90e <HAL_TIM_PWM_Start+0x9e>
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	2b08      	cmp	r3, #8
 800e8b2:	d109      	bne.n	800e8c8 <HAL_TIM_PWM_Start+0x58>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e8ba:	b2db      	uxtb	r3, r3
 800e8bc:	2b01      	cmp	r3, #1
 800e8be:	bf14      	ite	ne
 800e8c0:	2301      	movne	r3, #1
 800e8c2:	2300      	moveq	r3, #0
 800e8c4:	b2db      	uxtb	r3, r3
 800e8c6:	e022      	b.n	800e90e <HAL_TIM_PWM_Start+0x9e>
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	2b0c      	cmp	r3, #12
 800e8cc:	d109      	bne.n	800e8e2 <HAL_TIM_PWM_Start+0x72>
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e8d4:	b2db      	uxtb	r3, r3
 800e8d6:	2b01      	cmp	r3, #1
 800e8d8:	bf14      	ite	ne
 800e8da:	2301      	movne	r3, #1
 800e8dc:	2300      	moveq	r3, #0
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	e015      	b.n	800e90e <HAL_TIM_PWM_Start+0x9e>
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	2b10      	cmp	r3, #16
 800e8e6:	d109      	bne.n	800e8fc <HAL_TIM_PWM_Start+0x8c>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	2b01      	cmp	r3, #1
 800e8f2:	bf14      	ite	ne
 800e8f4:	2301      	movne	r3, #1
 800e8f6:	2300      	moveq	r3, #0
 800e8f8:	b2db      	uxtb	r3, r3
 800e8fa:	e008      	b.n	800e90e <HAL_TIM_PWM_Start+0x9e>
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e902:	b2db      	uxtb	r3, r3
 800e904:	2b01      	cmp	r3, #1
 800e906:	bf14      	ite	ne
 800e908:	2301      	movne	r3, #1
 800e90a:	2300      	moveq	r3, #0
 800e90c:	b2db      	uxtb	r3, r3
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d001      	beq.n	800e916 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e912:	2301      	movs	r3, #1
 800e914:	e0a6      	b.n	800ea64 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d104      	bne.n	800e926 <HAL_TIM_PWM_Start+0xb6>
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2202      	movs	r2, #2
 800e920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e924:	e023      	b.n	800e96e <HAL_TIM_PWM_Start+0xfe>
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	2b04      	cmp	r3, #4
 800e92a:	d104      	bne.n	800e936 <HAL_TIM_PWM_Start+0xc6>
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2202      	movs	r2, #2
 800e930:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e934:	e01b      	b.n	800e96e <HAL_TIM_PWM_Start+0xfe>
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	2b08      	cmp	r3, #8
 800e93a:	d104      	bne.n	800e946 <HAL_TIM_PWM_Start+0xd6>
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2202      	movs	r2, #2
 800e940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e944:	e013      	b.n	800e96e <HAL_TIM_PWM_Start+0xfe>
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	2b0c      	cmp	r3, #12
 800e94a:	d104      	bne.n	800e956 <HAL_TIM_PWM_Start+0xe6>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2202      	movs	r2, #2
 800e950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e954:	e00b      	b.n	800e96e <HAL_TIM_PWM_Start+0xfe>
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	2b10      	cmp	r3, #16
 800e95a:	d104      	bne.n	800e966 <HAL_TIM_PWM_Start+0xf6>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2202      	movs	r2, #2
 800e960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e964:	e003      	b.n	800e96e <HAL_TIM_PWM_Start+0xfe>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2202      	movs	r2, #2
 800e96a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	2201      	movs	r2, #1
 800e974:	6839      	ldr	r1, [r7, #0]
 800e976:	4618      	mov	r0, r3
 800e978:	f001 fc9c 	bl	80102b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	4a3a      	ldr	r2, [pc, #232]	@ (800ea6c <HAL_TIM_PWM_Start+0x1fc>)
 800e982:	4293      	cmp	r3, r2
 800e984:	d018      	beq.n	800e9b8 <HAL_TIM_PWM_Start+0x148>
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	4a39      	ldr	r2, [pc, #228]	@ (800ea70 <HAL_TIM_PWM_Start+0x200>)
 800e98c:	4293      	cmp	r3, r2
 800e98e:	d013      	beq.n	800e9b8 <HAL_TIM_PWM_Start+0x148>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4a37      	ldr	r2, [pc, #220]	@ (800ea74 <HAL_TIM_PWM_Start+0x204>)
 800e996:	4293      	cmp	r3, r2
 800e998:	d00e      	beq.n	800e9b8 <HAL_TIM_PWM_Start+0x148>
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	4a36      	ldr	r2, [pc, #216]	@ (800ea78 <HAL_TIM_PWM_Start+0x208>)
 800e9a0:	4293      	cmp	r3, r2
 800e9a2:	d009      	beq.n	800e9b8 <HAL_TIM_PWM_Start+0x148>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	4a34      	ldr	r2, [pc, #208]	@ (800ea7c <HAL_TIM_PWM_Start+0x20c>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d004      	beq.n	800e9b8 <HAL_TIM_PWM_Start+0x148>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	4a33      	ldr	r2, [pc, #204]	@ (800ea80 <HAL_TIM_PWM_Start+0x210>)
 800e9b4:	4293      	cmp	r3, r2
 800e9b6:	d101      	bne.n	800e9bc <HAL_TIM_PWM_Start+0x14c>
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	e000      	b.n	800e9be <HAL_TIM_PWM_Start+0x14e>
 800e9bc:	2300      	movs	r3, #0
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d007      	beq.n	800e9d2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e9d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	4a25      	ldr	r2, [pc, #148]	@ (800ea6c <HAL_TIM_PWM_Start+0x1fc>)
 800e9d8:	4293      	cmp	r3, r2
 800e9da:	d022      	beq.n	800ea22 <HAL_TIM_PWM_Start+0x1b2>
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e9e4:	d01d      	beq.n	800ea22 <HAL_TIM_PWM_Start+0x1b2>
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	4a26      	ldr	r2, [pc, #152]	@ (800ea84 <HAL_TIM_PWM_Start+0x214>)
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	d018      	beq.n	800ea22 <HAL_TIM_PWM_Start+0x1b2>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4a24      	ldr	r2, [pc, #144]	@ (800ea88 <HAL_TIM_PWM_Start+0x218>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d013      	beq.n	800ea22 <HAL_TIM_PWM_Start+0x1b2>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	4a23      	ldr	r2, [pc, #140]	@ (800ea8c <HAL_TIM_PWM_Start+0x21c>)
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d00e      	beq.n	800ea22 <HAL_TIM_PWM_Start+0x1b2>
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	4a19      	ldr	r2, [pc, #100]	@ (800ea70 <HAL_TIM_PWM_Start+0x200>)
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d009      	beq.n	800ea22 <HAL_TIM_PWM_Start+0x1b2>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	4a18      	ldr	r2, [pc, #96]	@ (800ea74 <HAL_TIM_PWM_Start+0x204>)
 800ea14:	4293      	cmp	r3, r2
 800ea16:	d004      	beq.n	800ea22 <HAL_TIM_PWM_Start+0x1b2>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4a18      	ldr	r2, [pc, #96]	@ (800ea80 <HAL_TIM_PWM_Start+0x210>)
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	d115      	bne.n	800ea4e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	689a      	ldr	r2, [r3, #8]
 800ea28:	4b19      	ldr	r3, [pc, #100]	@ (800ea90 <HAL_TIM_PWM_Start+0x220>)
 800ea2a:	4013      	ands	r3, r2
 800ea2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	2b06      	cmp	r3, #6
 800ea32:	d015      	beq.n	800ea60 <HAL_TIM_PWM_Start+0x1f0>
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ea3a:	d011      	beq.n	800ea60 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	681a      	ldr	r2, [r3, #0]
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	f042 0201 	orr.w	r2, r2, #1
 800ea4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea4c:	e008      	b.n	800ea60 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	681a      	ldr	r2, [r3, #0]
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	f042 0201 	orr.w	r2, r2, #1
 800ea5c:	601a      	str	r2, [r3, #0]
 800ea5e:	e000      	b.n	800ea62 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ea62:	2300      	movs	r3, #0
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3710      	adds	r7, #16
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}
 800ea6c:	40012c00 	.word	0x40012c00
 800ea70:	40013400 	.word	0x40013400
 800ea74:	40014000 	.word	0x40014000
 800ea78:	40014400 	.word	0x40014400
 800ea7c:	40014800 	.word	0x40014800
 800ea80:	40015000 	.word	0x40015000
 800ea84:	40000400 	.word	0x40000400
 800ea88:	40000800 	.word	0x40000800
 800ea8c:	40000c00 	.word	0x40000c00
 800ea90:	00010007 	.word	0x00010007

0800ea94 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b082      	sub	sp, #8
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d101      	bne.n	800eaa8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	e04c      	b.n	800eb42 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eaae:	b2db      	uxtb	r3, r3
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d111      	bne.n	800ead8 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2200      	movs	r2, #0
 800eab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f001 fc1f 	bl	8010300 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d102      	bne.n	800ead0 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	4a1f      	ldr	r2, [pc, #124]	@ (800eb4c <HAL_TIM_OnePulse_Init+0xb8>)
 800eace:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2202      	movs	r2, #2
 800eadc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681a      	ldr	r2, [r3, #0]
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	3304      	adds	r3, #4
 800eae8:	4619      	mov	r1, r3
 800eaea:	4610      	mov	r0, r2
 800eaec:	f000 ff68 	bl	800f9c0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	681a      	ldr	r2, [r3, #0]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	f022 0208 	bic.w	r2, r2, #8
 800eafe:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	6819      	ldr	r1, [r3, #0]
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	683a      	ldr	r2, [r7, #0]
 800eb0c:	430a      	orrs	r2, r1
 800eb0e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2201      	movs	r2, #1
 800eb14:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2201      	movs	r2, #1
 800eb1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2201      	movs	r2, #1
 800eb24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2201      	movs	r2, #1
 800eb2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2201      	movs	r2, #1
 800eb34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800eb40:	2300      	movs	r3, #0
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3708      	adds	r7, #8
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	0800eb51 	.word	0x0800eb51

0800eb50 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800eb50:	b480      	push	{r7}
 800eb52:	b083      	sub	sp, #12
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800eb58:	bf00      	nop
 800eb5a:	370c      	adds	r7, #12
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb62:	4770      	bx	lr

0800eb64 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b084      	sub	sp, #16
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
 800eb6c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800eb74:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800eb7c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eb84:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eb8c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800eb8e:	7bfb      	ldrb	r3, [r7, #15]
 800eb90:	2b01      	cmp	r3, #1
 800eb92:	d108      	bne.n	800eba6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800eb94:	7bbb      	ldrb	r3, [r7, #14]
 800eb96:	2b01      	cmp	r3, #1
 800eb98:	d105      	bne.n	800eba6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800eb9a:	7b7b      	ldrb	r3, [r7, #13]
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d102      	bne.n	800eba6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800eba0:	7b3b      	ldrb	r3, [r7, #12]
 800eba2:	2b01      	cmp	r3, #1
 800eba4:	d001      	beq.n	800ebaa <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800eba6:	2301      	movs	r3, #1
 800eba8:	e059      	b.n	800ec5e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2202      	movs	r2, #2
 800ebae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2202      	movs	r2, #2
 800ebb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2202      	movs	r2, #2
 800ebbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2202      	movs	r2, #2
 800ebc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	68da      	ldr	r2, [r3, #12]
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	f042 0202 	orr.w	r2, r2, #2
 800ebd8:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	68da      	ldr	r2, [r3, #12]
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	f042 0204 	orr.w	r2, r2, #4
 800ebe8:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	2201      	movs	r2, #1
 800ebf0:	2100      	movs	r1, #0
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f001 fb5e 	bl	80102b4 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	2201      	movs	r2, #1
 800ebfe:	2104      	movs	r1, #4
 800ec00:	4618      	mov	r0, r3
 800ec02:	f001 fb57 	bl	80102b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	4a17      	ldr	r2, [pc, #92]	@ (800ec68 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	d018      	beq.n	800ec42 <HAL_TIM_OnePulse_Start_IT+0xde>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	4a15      	ldr	r2, [pc, #84]	@ (800ec6c <HAL_TIM_OnePulse_Start_IT+0x108>)
 800ec16:	4293      	cmp	r3, r2
 800ec18:	d013      	beq.n	800ec42 <HAL_TIM_OnePulse_Start_IT+0xde>
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	4a14      	ldr	r2, [pc, #80]	@ (800ec70 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800ec20:	4293      	cmp	r3, r2
 800ec22:	d00e      	beq.n	800ec42 <HAL_TIM_OnePulse_Start_IT+0xde>
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	4a12      	ldr	r2, [pc, #72]	@ (800ec74 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800ec2a:	4293      	cmp	r3, r2
 800ec2c:	d009      	beq.n	800ec42 <HAL_TIM_OnePulse_Start_IT+0xde>
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	4a11      	ldr	r2, [pc, #68]	@ (800ec78 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800ec34:	4293      	cmp	r3, r2
 800ec36:	d004      	beq.n	800ec42 <HAL_TIM_OnePulse_Start_IT+0xde>
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	4a0f      	ldr	r2, [pc, #60]	@ (800ec7c <HAL_TIM_OnePulse_Start_IT+0x118>)
 800ec3e:	4293      	cmp	r3, r2
 800ec40:	d101      	bne.n	800ec46 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800ec42:	2301      	movs	r3, #1
 800ec44:	e000      	b.n	800ec48 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800ec46:	2300      	movs	r3, #0
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d007      	beq.n	800ec5c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ec5a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800ec5c:	2300      	movs	r3, #0
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3710      	adds	r7, #16
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	bf00      	nop
 800ec68:	40012c00 	.word	0x40012c00
 800ec6c:	40013400 	.word	0x40013400
 800ec70:	40014000 	.word	0x40014000
 800ec74:	40014400 	.word	0x40014400
 800ec78:	40014800 	.word	0x40014800
 800ec7c:	40015000 	.word	0x40015000

0800ec80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b086      	sub	sp, #24
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d101      	bne.n	800ec94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ec90:	2301      	movs	r3, #1
 800ec92:	e0a2      	b.n	800edda <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ec9a:	b2db      	uxtb	r3, r3
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d111      	bne.n	800ecc4 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2200      	movs	r2, #0
 800eca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800eca8:	6878      	ldr	r0, [r7, #4]
 800ecaa:	f001 fb29 	bl	8010300 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d102      	bne.n	800ecbc <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	4a4a      	ldr	r2, [pc, #296]	@ (800ede4 <HAL_TIM_Encoder_Init+0x164>)
 800ecba:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2202      	movs	r2, #2
 800ecc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	689b      	ldr	r3, [r3, #8]
 800ecd2:	687a      	ldr	r2, [r7, #4]
 800ecd4:	6812      	ldr	r2, [r2, #0]
 800ecd6:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800ecda:	f023 0307 	bic.w	r3, r3, #7
 800ecde:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681a      	ldr	r2, [r3, #0]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	3304      	adds	r3, #4
 800ece8:	4619      	mov	r1, r3
 800ecea:	4610      	mov	r0, r2
 800ecec:	f000 fe68 	bl	800f9c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	689b      	ldr	r3, [r3, #8]
 800ecf6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	699b      	ldr	r3, [r3, #24]
 800ecfe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	6a1b      	ldr	r3, [r3, #32]
 800ed06:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	697a      	ldr	r2, [r7, #20]
 800ed0e:	4313      	orrs	r3, r2
 800ed10:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ed18:	f023 0303 	bic.w	r3, r3, #3
 800ed1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	689a      	ldr	r2, [r3, #8]
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	699b      	ldr	r3, [r3, #24]
 800ed26:	021b      	lsls	r3, r3, #8
 800ed28:	4313      	orrs	r3, r2
 800ed2a:	693a      	ldr	r2, [r7, #16]
 800ed2c:	4313      	orrs	r3, r2
 800ed2e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800ed36:	f023 030c 	bic.w	r3, r3, #12
 800ed3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ed3c:	693b      	ldr	r3, [r7, #16]
 800ed3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ed42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ed46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	68da      	ldr	r2, [r3, #12]
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	69db      	ldr	r3, [r3, #28]
 800ed50:	021b      	lsls	r3, r3, #8
 800ed52:	4313      	orrs	r3, r2
 800ed54:	693a      	ldr	r2, [r7, #16]
 800ed56:	4313      	orrs	r3, r2
 800ed58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	691b      	ldr	r3, [r3, #16]
 800ed5e:	011a      	lsls	r2, r3, #4
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	6a1b      	ldr	r3, [r3, #32]
 800ed64:	031b      	lsls	r3, r3, #12
 800ed66:	4313      	orrs	r3, r2
 800ed68:	693a      	ldr	r2, [r7, #16]
 800ed6a:	4313      	orrs	r3, r2
 800ed6c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800ed74:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800ed7c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	685a      	ldr	r2, [r3, #4]
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	695b      	ldr	r3, [r3, #20]
 800ed86:	011b      	lsls	r3, r3, #4
 800ed88:	4313      	orrs	r3, r2
 800ed8a:	68fa      	ldr	r2, [r7, #12]
 800ed8c:	4313      	orrs	r3, r2
 800ed8e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	697a      	ldr	r2, [r7, #20]
 800ed96:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	693a      	ldr	r2, [r7, #16]
 800ed9e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	68fa      	ldr	r2, [r7, #12]
 800eda6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2201      	movs	r2, #1
 800edac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2201      	movs	r2, #1
 800edb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2201      	movs	r2, #1
 800edbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2201      	movs	r2, #1
 800edc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2201      	movs	r2, #1
 800edcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2201      	movs	r2, #1
 800edd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800edd8:	2300      	movs	r3, #0
}
 800edda:	4618      	mov	r0, r3
 800eddc:	3718      	adds	r7, #24
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}
 800ede2:	bf00      	nop
 800ede4:	0800a82d 	.word	0x0800a82d

0800ede8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b084      	sub	sp, #16
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800edf8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ee00:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ee08:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ee10:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d110      	bne.n	800ee3a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ee18:	7bfb      	ldrb	r3, [r7, #15]
 800ee1a:	2b01      	cmp	r3, #1
 800ee1c:	d102      	bne.n	800ee24 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ee1e:	7b7b      	ldrb	r3, [r7, #13]
 800ee20:	2b01      	cmp	r3, #1
 800ee22:	d001      	beq.n	800ee28 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800ee24:	2301      	movs	r3, #1
 800ee26:	e069      	b.n	800eefc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2202      	movs	r2, #2
 800ee2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2202      	movs	r2, #2
 800ee34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ee38:	e031      	b.n	800ee9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	2b04      	cmp	r3, #4
 800ee3e:	d110      	bne.n	800ee62 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ee40:	7bbb      	ldrb	r3, [r7, #14]
 800ee42:	2b01      	cmp	r3, #1
 800ee44:	d102      	bne.n	800ee4c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ee46:	7b3b      	ldrb	r3, [r7, #12]
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	d001      	beq.n	800ee50 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	e055      	b.n	800eefc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2202      	movs	r2, #2
 800ee54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2202      	movs	r2, #2
 800ee5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ee60:	e01d      	b.n	800ee9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ee62:	7bfb      	ldrb	r3, [r7, #15]
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	d108      	bne.n	800ee7a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ee68:	7bbb      	ldrb	r3, [r7, #14]
 800ee6a:	2b01      	cmp	r3, #1
 800ee6c:	d105      	bne.n	800ee7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ee6e:	7b7b      	ldrb	r3, [r7, #13]
 800ee70:	2b01      	cmp	r3, #1
 800ee72:	d102      	bne.n	800ee7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ee74:	7b3b      	ldrb	r3, [r7, #12]
 800ee76:	2b01      	cmp	r3, #1
 800ee78:	d001      	beq.n	800ee7e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	e03e      	b.n	800eefc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2202      	movs	r2, #2
 800ee82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2202      	movs	r2, #2
 800ee8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2202      	movs	r2, #2
 800ee92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	2202      	movs	r2, #2
 800ee9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d003      	beq.n	800eeac <HAL_TIM_Encoder_Start+0xc4>
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	2b04      	cmp	r3, #4
 800eea8:	d008      	beq.n	800eebc <HAL_TIM_Encoder_Start+0xd4>
 800eeaa:	e00f      	b.n	800eecc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	2201      	movs	r2, #1
 800eeb2:	2100      	movs	r1, #0
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f001 f9fd 	bl	80102b4 <TIM_CCxChannelCmd>
      break;
 800eeba:	e016      	b.n	800eeea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	2201      	movs	r2, #1
 800eec2:	2104      	movs	r1, #4
 800eec4:	4618      	mov	r0, r3
 800eec6:	f001 f9f5 	bl	80102b4 <TIM_CCxChannelCmd>
      break;
 800eeca:	e00e      	b.n	800eeea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	2201      	movs	r2, #1
 800eed2:	2100      	movs	r1, #0
 800eed4:	4618      	mov	r0, r3
 800eed6:	f001 f9ed 	bl	80102b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	2201      	movs	r2, #1
 800eee0:	2104      	movs	r1, #4
 800eee2:	4618      	mov	r0, r3
 800eee4:	f001 f9e6 	bl	80102b4 <TIM_CCxChannelCmd>
      break;
 800eee8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	681a      	ldr	r2, [r3, #0]
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	f042 0201 	orr.w	r2, r2, #1
 800eef8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800eefa:	2300      	movs	r3, #0
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	3710      	adds	r7, #16
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b084      	sub	sp, #16
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	68db      	ldr	r3, [r3, #12]
 800ef12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	691b      	ldr	r3, [r3, #16]
 800ef1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	f003 0302 	and.w	r3, r3, #2
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d026      	beq.n	800ef74 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	f003 0302 	and.w	r3, r3, #2
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d021      	beq.n	800ef74 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	f06f 0202 	mvn.w	r2, #2
 800ef38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2201      	movs	r2, #1
 800ef3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	699b      	ldr	r3, [r3, #24]
 800ef46:	f003 0303 	and.w	r3, r3, #3
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d005      	beq.n	800ef5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	4798      	blx	r3
 800ef58:	e009      	b.n	800ef6e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2200      	movs	r2, #0
 800ef72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	f003 0304 	and.w	r3, r3, #4
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d026      	beq.n	800efcc <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	f003 0304 	and.w	r3, r3, #4
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d021      	beq.n	800efcc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	f06f 0204 	mvn.w	r2, #4
 800ef90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2202      	movs	r2, #2
 800ef96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	699b      	ldr	r3, [r3, #24]
 800ef9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d005      	beq.n	800efb2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	4798      	blx	r3
 800efb0:	e009      	b.n	800efc6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2200      	movs	r2, #0
 800efca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	f003 0308 	and.w	r3, r3, #8
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d026      	beq.n	800f024 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	f003 0308 	and.w	r3, r3, #8
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d021      	beq.n	800f024 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	f06f 0208 	mvn.w	r2, #8
 800efe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2204      	movs	r2, #4
 800efee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	69db      	ldr	r3, [r3, #28]
 800eff6:	f003 0303 	and.w	r3, r3, #3
 800effa:	2b00      	cmp	r3, #0
 800effc:	d005      	beq.n	800f00a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	4798      	blx	r3
 800f008:	e009      	b.n	800f01e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2200      	movs	r2, #0
 800f022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	f003 0310 	and.w	r3, r3, #16
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d026      	beq.n	800f07c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	f003 0310 	and.w	r3, r3, #16
 800f034:	2b00      	cmp	r3, #0
 800f036:	d021      	beq.n	800f07c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	f06f 0210 	mvn.w	r2, #16
 800f040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2208      	movs	r2, #8
 800f046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	69db      	ldr	r3, [r3, #28]
 800f04e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f052:	2b00      	cmp	r3, #0
 800f054:	d005      	beq.n	800f062 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	4798      	blx	r3
 800f060:	e009      	b.n	800f076 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f068:	6878      	ldr	r0, [r7, #4]
 800f06a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2200      	movs	r2, #0
 800f07a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	f003 0301 	and.w	r3, r3, #1
 800f082:	2b00      	cmp	r3, #0
 800f084:	d00e      	beq.n	800f0a4 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	f003 0301 	and.w	r3, r3, #1
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d009      	beq.n	800f0a4 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	f06f 0201 	mvn.w	r2, #1
 800f098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d104      	bne.n	800f0b8 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d00e      	beq.n	800f0d6 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d009      	beq.n	800f0d6 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800f0ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d00e      	beq.n	800f0fe <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d009      	beq.n	800f0fe <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f0f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f104:	2b00      	cmp	r3, #0
 800f106:	d00e      	beq.n	800f126 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d009      	beq.n	800f126 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f11a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	f003 0320 	and.w	r3, r3, #32
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d00e      	beq.n	800f14e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	f003 0320 	and.w	r3, r3, #32
 800f136:	2b00      	cmp	r3, #0
 800f138:	d009      	beq.n	800f14e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	f06f 0220 	mvn.w	r2, #32
 800f142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f154:	2b00      	cmp	r3, #0
 800f156:	d00e      	beq.n	800f176 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d009      	beq.n	800f176 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800f16a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d00e      	beq.n	800f19e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f186:	2b00      	cmp	r3, #0
 800f188:	d009      	beq.n	800f19e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800f192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d00e      	beq.n	800f1c6 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d009      	beq.n	800f1c6 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800f1ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d00e      	beq.n	800f1ee <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d009      	beq.n	800f1ee <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800f1e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f1ee:	bf00      	nop
 800f1f0:	3710      	adds	r7, #16
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}
	...

0800f1f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b086      	sub	sp, #24
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	60f8      	str	r0, [r7, #12]
 800f200:	60b9      	str	r1, [r7, #8]
 800f202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f204:	2300      	movs	r3, #0
 800f206:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f20e:	2b01      	cmp	r3, #1
 800f210:	d101      	bne.n	800f216 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f212:	2302      	movs	r3, #2
 800f214:	e0ff      	b.n	800f416 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	2201      	movs	r2, #1
 800f21a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2b14      	cmp	r3, #20
 800f222:	f200 80f0 	bhi.w	800f406 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f226:	a201      	add	r2, pc, #4	@ (adr r2, 800f22c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f22c:	0800f281 	.word	0x0800f281
 800f230:	0800f407 	.word	0x0800f407
 800f234:	0800f407 	.word	0x0800f407
 800f238:	0800f407 	.word	0x0800f407
 800f23c:	0800f2c1 	.word	0x0800f2c1
 800f240:	0800f407 	.word	0x0800f407
 800f244:	0800f407 	.word	0x0800f407
 800f248:	0800f407 	.word	0x0800f407
 800f24c:	0800f303 	.word	0x0800f303
 800f250:	0800f407 	.word	0x0800f407
 800f254:	0800f407 	.word	0x0800f407
 800f258:	0800f407 	.word	0x0800f407
 800f25c:	0800f343 	.word	0x0800f343
 800f260:	0800f407 	.word	0x0800f407
 800f264:	0800f407 	.word	0x0800f407
 800f268:	0800f407 	.word	0x0800f407
 800f26c:	0800f385 	.word	0x0800f385
 800f270:	0800f407 	.word	0x0800f407
 800f274:	0800f407 	.word	0x0800f407
 800f278:	0800f407 	.word	0x0800f407
 800f27c:	0800f3c5 	.word	0x0800f3c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	68b9      	ldr	r1, [r7, #8]
 800f286:	4618      	mov	r0, r3
 800f288:	f000 fc4e 	bl	800fb28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	699a      	ldr	r2, [r3, #24]
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	f042 0208 	orr.w	r2, r2, #8
 800f29a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	699a      	ldr	r2, [r3, #24]
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	f022 0204 	bic.w	r2, r2, #4
 800f2aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	6999      	ldr	r1, [r3, #24]
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	691a      	ldr	r2, [r3, #16]
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	430a      	orrs	r2, r1
 800f2bc:	619a      	str	r2, [r3, #24]
      break;
 800f2be:	e0a5      	b.n	800f40c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	68b9      	ldr	r1, [r7, #8]
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f000 fcc8 	bl	800fc5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	699a      	ldr	r2, [r3, #24]
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f2da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	699a      	ldr	r2, [r3, #24]
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f2ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	6999      	ldr	r1, [r3, #24]
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	691b      	ldr	r3, [r3, #16]
 800f2f6:	021a      	lsls	r2, r3, #8
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	430a      	orrs	r2, r1
 800f2fe:	619a      	str	r2, [r3, #24]
      break;
 800f300:	e084      	b.n	800f40c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	68b9      	ldr	r1, [r7, #8]
 800f308:	4618      	mov	r0, r3
 800f30a:	f000 fd3b 	bl	800fd84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	69da      	ldr	r2, [r3, #28]
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	f042 0208 	orr.w	r2, r2, #8
 800f31c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	69da      	ldr	r2, [r3, #28]
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	f022 0204 	bic.w	r2, r2, #4
 800f32c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	69d9      	ldr	r1, [r3, #28]
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	691a      	ldr	r2, [r3, #16]
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	430a      	orrs	r2, r1
 800f33e:	61da      	str	r2, [r3, #28]
      break;
 800f340:	e064      	b.n	800f40c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	68b9      	ldr	r1, [r7, #8]
 800f348:	4618      	mov	r0, r3
 800f34a:	f000 fdad 	bl	800fea8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	69da      	ldr	r2, [r3, #28]
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f35c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	69da      	ldr	r2, [r3, #28]
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f36c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	69d9      	ldr	r1, [r3, #28]
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	691b      	ldr	r3, [r3, #16]
 800f378:	021a      	lsls	r2, r3, #8
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	430a      	orrs	r2, r1
 800f380:	61da      	str	r2, [r3, #28]
      break;
 800f382:	e043      	b.n	800f40c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	68b9      	ldr	r1, [r7, #8]
 800f38a:	4618      	mov	r0, r3
 800f38c:	f000 fe20 	bl	800ffd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	f042 0208 	orr.w	r2, r2, #8
 800f39e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	f022 0204 	bic.w	r2, r2, #4
 800f3ae:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	691a      	ldr	r2, [r3, #16]
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	430a      	orrs	r2, r1
 800f3c0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f3c2:	e023      	b.n	800f40c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	68b9      	ldr	r1, [r7, #8]
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f000 fe6a 	bl	80100a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f3de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f3ee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f3f6:	68bb      	ldr	r3, [r7, #8]
 800f3f8:	691b      	ldr	r3, [r3, #16]
 800f3fa:	021a      	lsls	r2, r3, #8
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	430a      	orrs	r2, r1
 800f402:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f404:	e002      	b.n	800f40c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f406:	2301      	movs	r3, #1
 800f408:	75fb      	strb	r3, [r7, #23]
      break;
 800f40a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	2200      	movs	r2, #0
 800f410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f414:	7dfb      	ldrb	r3, [r7, #23]
}
 800f416:	4618      	mov	r0, r3
 800f418:	3718      	adds	r7, #24
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}
 800f41e:	bf00      	nop

0800f420 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b084      	sub	sp, #16
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
 800f428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f42a:	2300      	movs	r3, #0
 800f42c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f434:	2b01      	cmp	r3, #1
 800f436:	d101      	bne.n	800f43c <HAL_TIM_ConfigClockSource+0x1c>
 800f438:	2302      	movs	r3, #2
 800f43a:	e0f6      	b.n	800f62a <HAL_TIM_ConfigClockSource+0x20a>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2201      	movs	r2, #1
 800f440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2202      	movs	r2, #2
 800f448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	689b      	ldr	r3, [r3, #8]
 800f452:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800f45a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f45e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f460:	68bb      	ldr	r3, [r7, #8]
 800f462:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f466:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	68ba      	ldr	r2, [r7, #8]
 800f46e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	4a6f      	ldr	r2, [pc, #444]	@ (800f634 <HAL_TIM_ConfigClockSource+0x214>)
 800f476:	4293      	cmp	r3, r2
 800f478:	f000 80c1 	beq.w	800f5fe <HAL_TIM_ConfigClockSource+0x1de>
 800f47c:	4a6d      	ldr	r2, [pc, #436]	@ (800f634 <HAL_TIM_ConfigClockSource+0x214>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	f200 80c6 	bhi.w	800f610 <HAL_TIM_ConfigClockSource+0x1f0>
 800f484:	4a6c      	ldr	r2, [pc, #432]	@ (800f638 <HAL_TIM_ConfigClockSource+0x218>)
 800f486:	4293      	cmp	r3, r2
 800f488:	f000 80b9 	beq.w	800f5fe <HAL_TIM_ConfigClockSource+0x1de>
 800f48c:	4a6a      	ldr	r2, [pc, #424]	@ (800f638 <HAL_TIM_ConfigClockSource+0x218>)
 800f48e:	4293      	cmp	r3, r2
 800f490:	f200 80be 	bhi.w	800f610 <HAL_TIM_ConfigClockSource+0x1f0>
 800f494:	4a69      	ldr	r2, [pc, #420]	@ (800f63c <HAL_TIM_ConfigClockSource+0x21c>)
 800f496:	4293      	cmp	r3, r2
 800f498:	f000 80b1 	beq.w	800f5fe <HAL_TIM_ConfigClockSource+0x1de>
 800f49c:	4a67      	ldr	r2, [pc, #412]	@ (800f63c <HAL_TIM_ConfigClockSource+0x21c>)
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	f200 80b6 	bhi.w	800f610 <HAL_TIM_ConfigClockSource+0x1f0>
 800f4a4:	4a66      	ldr	r2, [pc, #408]	@ (800f640 <HAL_TIM_ConfigClockSource+0x220>)
 800f4a6:	4293      	cmp	r3, r2
 800f4a8:	f000 80a9 	beq.w	800f5fe <HAL_TIM_ConfigClockSource+0x1de>
 800f4ac:	4a64      	ldr	r2, [pc, #400]	@ (800f640 <HAL_TIM_ConfigClockSource+0x220>)
 800f4ae:	4293      	cmp	r3, r2
 800f4b0:	f200 80ae 	bhi.w	800f610 <HAL_TIM_ConfigClockSource+0x1f0>
 800f4b4:	4a63      	ldr	r2, [pc, #396]	@ (800f644 <HAL_TIM_ConfigClockSource+0x224>)
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	f000 80a1 	beq.w	800f5fe <HAL_TIM_ConfigClockSource+0x1de>
 800f4bc:	4a61      	ldr	r2, [pc, #388]	@ (800f644 <HAL_TIM_ConfigClockSource+0x224>)
 800f4be:	4293      	cmp	r3, r2
 800f4c0:	f200 80a6 	bhi.w	800f610 <HAL_TIM_ConfigClockSource+0x1f0>
 800f4c4:	4a60      	ldr	r2, [pc, #384]	@ (800f648 <HAL_TIM_ConfigClockSource+0x228>)
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	f000 8099 	beq.w	800f5fe <HAL_TIM_ConfigClockSource+0x1de>
 800f4cc:	4a5e      	ldr	r2, [pc, #376]	@ (800f648 <HAL_TIM_ConfigClockSource+0x228>)
 800f4ce:	4293      	cmp	r3, r2
 800f4d0:	f200 809e 	bhi.w	800f610 <HAL_TIM_ConfigClockSource+0x1f0>
 800f4d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f4d8:	f000 8091 	beq.w	800f5fe <HAL_TIM_ConfigClockSource+0x1de>
 800f4dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f4e0:	f200 8096 	bhi.w	800f610 <HAL_TIM_ConfigClockSource+0x1f0>
 800f4e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f4e8:	f000 8089 	beq.w	800f5fe <HAL_TIM_ConfigClockSource+0x1de>
 800f4ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f4f0:	f200 808e 	bhi.w	800f610 <HAL_TIM_ConfigClockSource+0x1f0>
 800f4f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f4f8:	d03e      	beq.n	800f578 <HAL_TIM_ConfigClockSource+0x158>
 800f4fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f4fe:	f200 8087 	bhi.w	800f610 <HAL_TIM_ConfigClockSource+0x1f0>
 800f502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f506:	f000 8086 	beq.w	800f616 <HAL_TIM_ConfigClockSource+0x1f6>
 800f50a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f50e:	d87f      	bhi.n	800f610 <HAL_TIM_ConfigClockSource+0x1f0>
 800f510:	2b70      	cmp	r3, #112	@ 0x70
 800f512:	d01a      	beq.n	800f54a <HAL_TIM_ConfigClockSource+0x12a>
 800f514:	2b70      	cmp	r3, #112	@ 0x70
 800f516:	d87b      	bhi.n	800f610 <HAL_TIM_ConfigClockSource+0x1f0>
 800f518:	2b60      	cmp	r3, #96	@ 0x60
 800f51a:	d050      	beq.n	800f5be <HAL_TIM_ConfigClockSource+0x19e>
 800f51c:	2b60      	cmp	r3, #96	@ 0x60
 800f51e:	d877      	bhi.n	800f610 <HAL_TIM_ConfigClockSource+0x1f0>
 800f520:	2b50      	cmp	r3, #80	@ 0x50
 800f522:	d03c      	beq.n	800f59e <HAL_TIM_ConfigClockSource+0x17e>
 800f524:	2b50      	cmp	r3, #80	@ 0x50
 800f526:	d873      	bhi.n	800f610 <HAL_TIM_ConfigClockSource+0x1f0>
 800f528:	2b40      	cmp	r3, #64	@ 0x40
 800f52a:	d058      	beq.n	800f5de <HAL_TIM_ConfigClockSource+0x1be>
 800f52c:	2b40      	cmp	r3, #64	@ 0x40
 800f52e:	d86f      	bhi.n	800f610 <HAL_TIM_ConfigClockSource+0x1f0>
 800f530:	2b30      	cmp	r3, #48	@ 0x30
 800f532:	d064      	beq.n	800f5fe <HAL_TIM_ConfigClockSource+0x1de>
 800f534:	2b30      	cmp	r3, #48	@ 0x30
 800f536:	d86b      	bhi.n	800f610 <HAL_TIM_ConfigClockSource+0x1f0>
 800f538:	2b20      	cmp	r3, #32
 800f53a:	d060      	beq.n	800f5fe <HAL_TIM_ConfigClockSource+0x1de>
 800f53c:	2b20      	cmp	r3, #32
 800f53e:	d867      	bhi.n	800f610 <HAL_TIM_ConfigClockSource+0x1f0>
 800f540:	2b00      	cmp	r3, #0
 800f542:	d05c      	beq.n	800f5fe <HAL_TIM_ConfigClockSource+0x1de>
 800f544:	2b10      	cmp	r3, #16
 800f546:	d05a      	beq.n	800f5fe <HAL_TIM_ConfigClockSource+0x1de>
 800f548:	e062      	b.n	800f610 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f55a:	f000 fe8b 	bl	8010274 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	689b      	ldr	r3, [r3, #8]
 800f564:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f56c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	68ba      	ldr	r2, [r7, #8]
 800f574:	609a      	str	r2, [r3, #8]
      break;
 800f576:	e04f      	b.n	800f618 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f588:	f000 fe74 	bl	8010274 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	689a      	ldr	r2, [r3, #8]
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f59a:	609a      	str	r2, [r3, #8]
      break;
 800f59c:	e03c      	b.n	800f618 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	f000 fde6 	bl	801017c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	2150      	movs	r1, #80	@ 0x50
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f000 fe3f 	bl	801023a <TIM_ITRx_SetConfig>
      break;
 800f5bc:	e02c      	b.n	800f618 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	f000 fe05 	bl	80101da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	2160      	movs	r1, #96	@ 0x60
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f000 fe2f 	bl	801023a <TIM_ITRx_SetConfig>
      break;
 800f5dc:	e01c      	b.n	800f618 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	f000 fdc6 	bl	801017c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	2140      	movs	r1, #64	@ 0x40
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f000 fe1f 	bl	801023a <TIM_ITRx_SetConfig>
      break;
 800f5fc:	e00c      	b.n	800f618 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681a      	ldr	r2, [r3, #0]
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	4619      	mov	r1, r3
 800f608:	4610      	mov	r0, r2
 800f60a:	f000 fe16 	bl	801023a <TIM_ITRx_SetConfig>
      break;
 800f60e:	e003      	b.n	800f618 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800f610:	2301      	movs	r3, #1
 800f612:	73fb      	strb	r3, [r7, #15]
      break;
 800f614:	e000      	b.n	800f618 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800f616:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2201      	movs	r2, #1
 800f61c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2200      	movs	r2, #0
 800f624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f628:	7bfb      	ldrb	r3, [r7, #15]
}
 800f62a:	4618      	mov	r0, r3
 800f62c:	3710      	adds	r7, #16
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
 800f632:	bf00      	nop
 800f634:	00100070 	.word	0x00100070
 800f638:	00100060 	.word	0x00100060
 800f63c:	00100050 	.word	0x00100050
 800f640:	00100040 	.word	0x00100040
 800f644:	00100030 	.word	0x00100030
 800f648:	00100020 	.word	0x00100020

0800f64c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f64c:	b480      	push	{r7}
 800f64e:	b083      	sub	sp, #12
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800f654:	bf00      	nop
 800f656:	370c      	adds	r7, #12
 800f658:	46bd      	mov	sp, r7
 800f65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65e:	4770      	bx	lr

0800f660 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f660:	b480      	push	{r7}
 800f662:	b083      	sub	sp, #12
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f668:	bf00      	nop
 800f66a:	370c      	adds	r7, #12
 800f66c:	46bd      	mov	sp, r7
 800f66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f672:	4770      	bx	lr

0800f674 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f674:	b480      	push	{r7}
 800f676:	b083      	sub	sp, #12
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f67c:	bf00      	nop
 800f67e:	370c      	adds	r7, #12
 800f680:	46bd      	mov	sp, r7
 800f682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f686:	4770      	bx	lr

0800f688 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f688:	b480      	push	{r7}
 800f68a:	b083      	sub	sp, #12
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800f690:	bf00      	nop
 800f692:	370c      	adds	r7, #12
 800f694:	46bd      	mov	sp, r7
 800f696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69a:	4770      	bx	lr

0800f69c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f69c:	b480      	push	{r7}
 800f69e:	b083      	sub	sp, #12
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f6a4:	bf00      	nop
 800f6a6:	370c      	adds	r7, #12
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ae:	4770      	bx	lr

0800f6b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	b083      	sub	sp, #12
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800f6b8:	bf00      	nop
 800f6ba:	370c      	adds	r7, #12
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c2:	4770      	bx	lr

0800f6c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b083      	sub	sp, #12
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f6cc:	bf00      	nop
 800f6ce:	370c      	adds	r7, #12
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr

0800f6d8 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b083      	sub	sp, #12
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800f6e0:	bf00      	nop
 800f6e2:	370c      	adds	r7, #12
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ea:	4770      	bx	lr

0800f6ec <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b083      	sub	sp, #12
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800f6f4:	bf00      	nop
 800f6f6:	370c      	adds	r7, #12
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fe:	4770      	bx	lr

0800f700 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800f700:	b480      	push	{r7}
 800f702:	b087      	sub	sp, #28
 800f704:	af00      	add	r7, sp, #0
 800f706:	60f8      	str	r0, [r7, #12]
 800f708:	460b      	mov	r3, r1
 800f70a:	607a      	str	r2, [r7, #4]
 800f70c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800f70e:	2300      	movs	r3, #0
 800f710:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d101      	bne.n	800f71c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800f718:	2301      	movs	r3, #1
 800f71a:	e14a      	b.n	800f9b2 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f722:	b2db      	uxtb	r3, r3
 800f724:	2b01      	cmp	r3, #1
 800f726:	f040 80dd 	bne.w	800f8e4 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800f72a:	7afb      	ldrb	r3, [r7, #11]
 800f72c:	2b1f      	cmp	r3, #31
 800f72e:	f200 80d6 	bhi.w	800f8de <HAL_TIM_RegisterCallback+0x1de>
 800f732:	a201      	add	r2, pc, #4	@ (adr r2, 800f738 <HAL_TIM_RegisterCallback+0x38>)
 800f734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f738:	0800f7b9 	.word	0x0800f7b9
 800f73c:	0800f7c1 	.word	0x0800f7c1
 800f740:	0800f7c9 	.word	0x0800f7c9
 800f744:	0800f7d1 	.word	0x0800f7d1
 800f748:	0800f7d9 	.word	0x0800f7d9
 800f74c:	0800f7e1 	.word	0x0800f7e1
 800f750:	0800f7e9 	.word	0x0800f7e9
 800f754:	0800f7f1 	.word	0x0800f7f1
 800f758:	0800f7f9 	.word	0x0800f7f9
 800f75c:	0800f801 	.word	0x0800f801
 800f760:	0800f809 	.word	0x0800f809
 800f764:	0800f811 	.word	0x0800f811
 800f768:	0800f819 	.word	0x0800f819
 800f76c:	0800f821 	.word	0x0800f821
 800f770:	0800f82b 	.word	0x0800f82b
 800f774:	0800f835 	.word	0x0800f835
 800f778:	0800f83f 	.word	0x0800f83f
 800f77c:	0800f849 	.word	0x0800f849
 800f780:	0800f853 	.word	0x0800f853
 800f784:	0800f85d 	.word	0x0800f85d
 800f788:	0800f867 	.word	0x0800f867
 800f78c:	0800f871 	.word	0x0800f871
 800f790:	0800f87b 	.word	0x0800f87b
 800f794:	0800f885 	.word	0x0800f885
 800f798:	0800f88f 	.word	0x0800f88f
 800f79c:	0800f899 	.word	0x0800f899
 800f7a0:	0800f8a3 	.word	0x0800f8a3
 800f7a4:	0800f8ad 	.word	0x0800f8ad
 800f7a8:	0800f8b7 	.word	0x0800f8b7
 800f7ac:	0800f8c1 	.word	0x0800f8c1
 800f7b0:	0800f8cb 	.word	0x0800f8cb
 800f7b4:	0800f8d5 	.word	0x0800f8d5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	687a      	ldr	r2, [r7, #4]
 800f7bc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800f7be:	e0f7      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	687a      	ldr	r2, [r7, #4]
 800f7c4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800f7c6:	e0f3      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	687a      	ldr	r2, [r7, #4]
 800f7cc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800f7ce:	e0ef      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	687a      	ldr	r2, [r7, #4]
 800f7d4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800f7d6:	e0eb      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	687a      	ldr	r2, [r7, #4]
 800f7dc:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800f7de:	e0e7      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	687a      	ldr	r2, [r7, #4]
 800f7e4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800f7e6:	e0e3      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	687a      	ldr	r2, [r7, #4]
 800f7ec:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800f7ee:	e0df      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	687a      	ldr	r2, [r7, #4]
 800f7f4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800f7f6:	e0db      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	687a      	ldr	r2, [r7, #4]
 800f7fc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800f7fe:	e0d7      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	687a      	ldr	r2, [r7, #4]
 800f804:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800f806:	e0d3      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	687a      	ldr	r2, [r7, #4]
 800f80c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800f80e:	e0cf      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	687a      	ldr	r2, [r7, #4]
 800f814:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800f816:	e0cb      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	687a      	ldr	r2, [r7, #4]
 800f81c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800f81e:	e0c7      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	687a      	ldr	r2, [r7, #4]
 800f824:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800f828:	e0c2      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	687a      	ldr	r2, [r7, #4]
 800f82e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800f832:	e0bd      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	687a      	ldr	r2, [r7, #4]
 800f838:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800f83c:	e0b8      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	687a      	ldr	r2, [r7, #4]
 800f842:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800f846:	e0b3      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	687a      	ldr	r2, [r7, #4]
 800f84c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800f850:	e0ae      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	687a      	ldr	r2, [r7, #4]
 800f856:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800f85a:	e0a9      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	687a      	ldr	r2, [r7, #4]
 800f860:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800f864:	e0a4      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	687a      	ldr	r2, [r7, #4]
 800f86a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800f86e:	e09f      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	687a      	ldr	r2, [r7, #4]
 800f874:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800f878:	e09a      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	687a      	ldr	r2, [r7, #4]
 800f87e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800f882:	e095      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	687a      	ldr	r2, [r7, #4]
 800f888:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800f88c:	e090      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	687a      	ldr	r2, [r7, #4]
 800f892:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800f896:	e08b      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	687a      	ldr	r2, [r7, #4]
 800f89c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800f8a0:	e086      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	687a      	ldr	r2, [r7, #4]
 800f8a6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800f8aa:	e081      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	687a      	ldr	r2, [r7, #4]
 800f8b0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800f8b4:	e07c      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	687a      	ldr	r2, [r7, #4]
 800f8ba:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800f8be:	e077      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	687a      	ldr	r2, [r7, #4]
 800f8c4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800f8c8:	e072      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	687a      	ldr	r2, [r7, #4]
 800f8ce:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800f8d2:	e06d      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	687a      	ldr	r2, [r7, #4]
 800f8d8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800f8dc:	e068      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800f8de:	2301      	movs	r3, #1
 800f8e0:	75fb      	strb	r3, [r7, #23]
        break;
 800f8e2:	e065      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f8ea:	b2db      	uxtb	r3, r3
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d15d      	bne.n	800f9ac <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800f8f0:	7afb      	ldrb	r3, [r7, #11]
 800f8f2:	2b0d      	cmp	r3, #13
 800f8f4:	d857      	bhi.n	800f9a6 <HAL_TIM_RegisterCallback+0x2a6>
 800f8f6:	a201      	add	r2, pc, #4	@ (adr r2, 800f8fc <HAL_TIM_RegisterCallback+0x1fc>)
 800f8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8fc:	0800f935 	.word	0x0800f935
 800f900:	0800f93d 	.word	0x0800f93d
 800f904:	0800f945 	.word	0x0800f945
 800f908:	0800f94d 	.word	0x0800f94d
 800f90c:	0800f955 	.word	0x0800f955
 800f910:	0800f95d 	.word	0x0800f95d
 800f914:	0800f965 	.word	0x0800f965
 800f918:	0800f96d 	.word	0x0800f96d
 800f91c:	0800f975 	.word	0x0800f975
 800f920:	0800f97d 	.word	0x0800f97d
 800f924:	0800f985 	.word	0x0800f985
 800f928:	0800f98d 	.word	0x0800f98d
 800f92c:	0800f995 	.word	0x0800f995
 800f930:	0800f99d 	.word	0x0800f99d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	687a      	ldr	r2, [r7, #4]
 800f938:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800f93a:	e039      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	687a      	ldr	r2, [r7, #4]
 800f940:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800f942:	e035      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	687a      	ldr	r2, [r7, #4]
 800f948:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800f94a:	e031      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	687a      	ldr	r2, [r7, #4]
 800f950:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800f952:	e02d      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800f95a:	e029      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	687a      	ldr	r2, [r7, #4]
 800f960:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800f962:	e025      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	687a      	ldr	r2, [r7, #4]
 800f968:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800f96a:	e021      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	687a      	ldr	r2, [r7, #4]
 800f970:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800f972:	e01d      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	687a      	ldr	r2, [r7, #4]
 800f978:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800f97a:	e019      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	687a      	ldr	r2, [r7, #4]
 800f980:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800f982:	e015      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	687a      	ldr	r2, [r7, #4]
 800f988:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800f98a:	e011      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	687a      	ldr	r2, [r7, #4]
 800f990:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800f992:	e00d      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	687a      	ldr	r2, [r7, #4]
 800f998:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800f99a:	e009      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	687a      	ldr	r2, [r7, #4]
 800f9a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800f9a4:	e004      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	75fb      	strb	r3, [r7, #23]
        break;
 800f9aa:	e001      	b.n	800f9b0 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800f9b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	371c      	adds	r7, #28
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9bc:	4770      	bx	lr
 800f9be:	bf00      	nop

0800f9c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f9c0:	b480      	push	{r7}
 800f9c2:	b085      	sub	sp, #20
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
 800f9c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	4a4c      	ldr	r2, [pc, #304]	@ (800fb04 <TIM_Base_SetConfig+0x144>)
 800f9d4:	4293      	cmp	r3, r2
 800f9d6:	d017      	beq.n	800fa08 <TIM_Base_SetConfig+0x48>
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f9de:	d013      	beq.n	800fa08 <TIM_Base_SetConfig+0x48>
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	4a49      	ldr	r2, [pc, #292]	@ (800fb08 <TIM_Base_SetConfig+0x148>)
 800f9e4:	4293      	cmp	r3, r2
 800f9e6:	d00f      	beq.n	800fa08 <TIM_Base_SetConfig+0x48>
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	4a48      	ldr	r2, [pc, #288]	@ (800fb0c <TIM_Base_SetConfig+0x14c>)
 800f9ec:	4293      	cmp	r3, r2
 800f9ee:	d00b      	beq.n	800fa08 <TIM_Base_SetConfig+0x48>
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	4a47      	ldr	r2, [pc, #284]	@ (800fb10 <TIM_Base_SetConfig+0x150>)
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	d007      	beq.n	800fa08 <TIM_Base_SetConfig+0x48>
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	4a46      	ldr	r2, [pc, #280]	@ (800fb14 <TIM_Base_SetConfig+0x154>)
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	d003      	beq.n	800fa08 <TIM_Base_SetConfig+0x48>
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	4a45      	ldr	r2, [pc, #276]	@ (800fb18 <TIM_Base_SetConfig+0x158>)
 800fa04:	4293      	cmp	r3, r2
 800fa06:	d108      	bne.n	800fa1a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	685b      	ldr	r3, [r3, #4]
 800fa14:	68fa      	ldr	r2, [r7, #12]
 800fa16:	4313      	orrs	r3, r2
 800fa18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	4a39      	ldr	r2, [pc, #228]	@ (800fb04 <TIM_Base_SetConfig+0x144>)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d023      	beq.n	800fa6a <TIM_Base_SetConfig+0xaa>
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa28:	d01f      	beq.n	800fa6a <TIM_Base_SetConfig+0xaa>
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	4a36      	ldr	r2, [pc, #216]	@ (800fb08 <TIM_Base_SetConfig+0x148>)
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	d01b      	beq.n	800fa6a <TIM_Base_SetConfig+0xaa>
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	4a35      	ldr	r2, [pc, #212]	@ (800fb0c <TIM_Base_SetConfig+0x14c>)
 800fa36:	4293      	cmp	r3, r2
 800fa38:	d017      	beq.n	800fa6a <TIM_Base_SetConfig+0xaa>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	4a34      	ldr	r2, [pc, #208]	@ (800fb10 <TIM_Base_SetConfig+0x150>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d013      	beq.n	800fa6a <TIM_Base_SetConfig+0xaa>
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	4a33      	ldr	r2, [pc, #204]	@ (800fb14 <TIM_Base_SetConfig+0x154>)
 800fa46:	4293      	cmp	r3, r2
 800fa48:	d00f      	beq.n	800fa6a <TIM_Base_SetConfig+0xaa>
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	4a33      	ldr	r2, [pc, #204]	@ (800fb1c <TIM_Base_SetConfig+0x15c>)
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	d00b      	beq.n	800fa6a <TIM_Base_SetConfig+0xaa>
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	4a32      	ldr	r2, [pc, #200]	@ (800fb20 <TIM_Base_SetConfig+0x160>)
 800fa56:	4293      	cmp	r3, r2
 800fa58:	d007      	beq.n	800fa6a <TIM_Base_SetConfig+0xaa>
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	4a31      	ldr	r2, [pc, #196]	@ (800fb24 <TIM_Base_SetConfig+0x164>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d003      	beq.n	800fa6a <TIM_Base_SetConfig+0xaa>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	4a2c      	ldr	r2, [pc, #176]	@ (800fb18 <TIM_Base_SetConfig+0x158>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d108      	bne.n	800fa7c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fa70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	68db      	ldr	r3, [r3, #12]
 800fa76:	68fa      	ldr	r2, [r7, #12]
 800fa78:	4313      	orrs	r3, r2
 800fa7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	695b      	ldr	r3, [r3, #20]
 800fa86:	4313      	orrs	r3, r2
 800fa88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	68fa      	ldr	r2, [r7, #12]
 800fa8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	689a      	ldr	r2, [r3, #8]
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	681a      	ldr	r2, [r3, #0]
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	4a18      	ldr	r2, [pc, #96]	@ (800fb04 <TIM_Base_SetConfig+0x144>)
 800faa4:	4293      	cmp	r3, r2
 800faa6:	d013      	beq.n	800fad0 <TIM_Base_SetConfig+0x110>
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	4a1a      	ldr	r2, [pc, #104]	@ (800fb14 <TIM_Base_SetConfig+0x154>)
 800faac:	4293      	cmp	r3, r2
 800faae:	d00f      	beq.n	800fad0 <TIM_Base_SetConfig+0x110>
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	4a1a      	ldr	r2, [pc, #104]	@ (800fb1c <TIM_Base_SetConfig+0x15c>)
 800fab4:	4293      	cmp	r3, r2
 800fab6:	d00b      	beq.n	800fad0 <TIM_Base_SetConfig+0x110>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	4a19      	ldr	r2, [pc, #100]	@ (800fb20 <TIM_Base_SetConfig+0x160>)
 800fabc:	4293      	cmp	r3, r2
 800fabe:	d007      	beq.n	800fad0 <TIM_Base_SetConfig+0x110>
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	4a18      	ldr	r2, [pc, #96]	@ (800fb24 <TIM_Base_SetConfig+0x164>)
 800fac4:	4293      	cmp	r3, r2
 800fac6:	d003      	beq.n	800fad0 <TIM_Base_SetConfig+0x110>
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	4a13      	ldr	r2, [pc, #76]	@ (800fb18 <TIM_Base_SetConfig+0x158>)
 800facc:	4293      	cmp	r3, r2
 800face:	d103      	bne.n	800fad8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	691a      	ldr	r2, [r3, #16]
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2201      	movs	r2, #1
 800fadc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	691b      	ldr	r3, [r3, #16]
 800fae2:	f003 0301 	and.w	r3, r3, #1
 800fae6:	2b01      	cmp	r3, #1
 800fae8:	d105      	bne.n	800faf6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	691b      	ldr	r3, [r3, #16]
 800faee:	f023 0201 	bic.w	r2, r3, #1
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	611a      	str	r2, [r3, #16]
  }
}
 800faf6:	bf00      	nop
 800faf8:	3714      	adds	r7, #20
 800fafa:	46bd      	mov	sp, r7
 800fafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb00:	4770      	bx	lr
 800fb02:	bf00      	nop
 800fb04:	40012c00 	.word	0x40012c00
 800fb08:	40000400 	.word	0x40000400
 800fb0c:	40000800 	.word	0x40000800
 800fb10:	40000c00 	.word	0x40000c00
 800fb14:	40013400 	.word	0x40013400
 800fb18:	40015000 	.word	0x40015000
 800fb1c:	40014000 	.word	0x40014000
 800fb20:	40014400 	.word	0x40014400
 800fb24:	40014800 	.word	0x40014800

0800fb28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fb28:	b480      	push	{r7}
 800fb2a:	b087      	sub	sp, #28
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	6a1b      	ldr	r3, [r3, #32]
 800fb36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	6a1b      	ldr	r3, [r3, #32]
 800fb3c:	f023 0201 	bic.w	r2, r3, #1
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	685b      	ldr	r3, [r3, #4]
 800fb48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	699b      	ldr	r3, [r3, #24]
 800fb4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fb56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fb5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	f023 0303 	bic.w	r3, r3, #3
 800fb62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	68fa      	ldr	r2, [r7, #12]
 800fb6a:	4313      	orrs	r3, r2
 800fb6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	f023 0302 	bic.w	r3, r3, #2
 800fb74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	689b      	ldr	r3, [r3, #8]
 800fb7a:	697a      	ldr	r2, [r7, #20]
 800fb7c:	4313      	orrs	r3, r2
 800fb7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	4a30      	ldr	r2, [pc, #192]	@ (800fc44 <TIM_OC1_SetConfig+0x11c>)
 800fb84:	4293      	cmp	r3, r2
 800fb86:	d013      	beq.n	800fbb0 <TIM_OC1_SetConfig+0x88>
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	4a2f      	ldr	r2, [pc, #188]	@ (800fc48 <TIM_OC1_SetConfig+0x120>)
 800fb8c:	4293      	cmp	r3, r2
 800fb8e:	d00f      	beq.n	800fbb0 <TIM_OC1_SetConfig+0x88>
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	4a2e      	ldr	r2, [pc, #184]	@ (800fc4c <TIM_OC1_SetConfig+0x124>)
 800fb94:	4293      	cmp	r3, r2
 800fb96:	d00b      	beq.n	800fbb0 <TIM_OC1_SetConfig+0x88>
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	4a2d      	ldr	r2, [pc, #180]	@ (800fc50 <TIM_OC1_SetConfig+0x128>)
 800fb9c:	4293      	cmp	r3, r2
 800fb9e:	d007      	beq.n	800fbb0 <TIM_OC1_SetConfig+0x88>
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	4a2c      	ldr	r2, [pc, #176]	@ (800fc54 <TIM_OC1_SetConfig+0x12c>)
 800fba4:	4293      	cmp	r3, r2
 800fba6:	d003      	beq.n	800fbb0 <TIM_OC1_SetConfig+0x88>
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	4a2b      	ldr	r2, [pc, #172]	@ (800fc58 <TIM_OC1_SetConfig+0x130>)
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d10c      	bne.n	800fbca <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fbb0:	697b      	ldr	r3, [r7, #20]
 800fbb2:	f023 0308 	bic.w	r3, r3, #8
 800fbb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	68db      	ldr	r3, [r3, #12]
 800fbbc:	697a      	ldr	r2, [r7, #20]
 800fbbe:	4313      	orrs	r3, r2
 800fbc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fbc2:	697b      	ldr	r3, [r7, #20]
 800fbc4:	f023 0304 	bic.w	r3, r3, #4
 800fbc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	4a1d      	ldr	r2, [pc, #116]	@ (800fc44 <TIM_OC1_SetConfig+0x11c>)
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d013      	beq.n	800fbfa <TIM_OC1_SetConfig+0xd2>
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	4a1c      	ldr	r2, [pc, #112]	@ (800fc48 <TIM_OC1_SetConfig+0x120>)
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	d00f      	beq.n	800fbfa <TIM_OC1_SetConfig+0xd2>
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	4a1b      	ldr	r2, [pc, #108]	@ (800fc4c <TIM_OC1_SetConfig+0x124>)
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d00b      	beq.n	800fbfa <TIM_OC1_SetConfig+0xd2>
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	4a1a      	ldr	r2, [pc, #104]	@ (800fc50 <TIM_OC1_SetConfig+0x128>)
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d007      	beq.n	800fbfa <TIM_OC1_SetConfig+0xd2>
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	4a19      	ldr	r2, [pc, #100]	@ (800fc54 <TIM_OC1_SetConfig+0x12c>)
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d003      	beq.n	800fbfa <TIM_OC1_SetConfig+0xd2>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	4a18      	ldr	r2, [pc, #96]	@ (800fc58 <TIM_OC1_SetConfig+0x130>)
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d111      	bne.n	800fc1e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fbfa:	693b      	ldr	r3, [r7, #16]
 800fbfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fc00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fc02:	693b      	ldr	r3, [r7, #16]
 800fc04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fc08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	695b      	ldr	r3, [r3, #20]
 800fc0e:	693a      	ldr	r2, [r7, #16]
 800fc10:	4313      	orrs	r3, r2
 800fc12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fc14:	683b      	ldr	r3, [r7, #0]
 800fc16:	699b      	ldr	r3, [r3, #24]
 800fc18:	693a      	ldr	r2, [r7, #16]
 800fc1a:	4313      	orrs	r3, r2
 800fc1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	693a      	ldr	r2, [r7, #16]
 800fc22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	68fa      	ldr	r2, [r7, #12]
 800fc28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	685a      	ldr	r2, [r3, #4]
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	697a      	ldr	r2, [r7, #20]
 800fc36:	621a      	str	r2, [r3, #32]
}
 800fc38:	bf00      	nop
 800fc3a:	371c      	adds	r7, #28
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr
 800fc44:	40012c00 	.word	0x40012c00
 800fc48:	40013400 	.word	0x40013400
 800fc4c:	40014000 	.word	0x40014000
 800fc50:	40014400 	.word	0x40014400
 800fc54:	40014800 	.word	0x40014800
 800fc58:	40015000 	.word	0x40015000

0800fc5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fc5c:	b480      	push	{r7}
 800fc5e:	b087      	sub	sp, #28
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6a1b      	ldr	r3, [r3, #32]
 800fc6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6a1b      	ldr	r3, [r3, #32]
 800fc70:	f023 0210 	bic.w	r2, r3, #16
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	685b      	ldr	r3, [r3, #4]
 800fc7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	699b      	ldr	r3, [r3, #24]
 800fc82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fc8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fc8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fc96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	021b      	lsls	r3, r3, #8
 800fc9e:	68fa      	ldr	r2, [r7, #12]
 800fca0:	4313      	orrs	r3, r2
 800fca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	f023 0320 	bic.w	r3, r3, #32
 800fcaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	689b      	ldr	r3, [r3, #8]
 800fcb0:	011b      	lsls	r3, r3, #4
 800fcb2:	697a      	ldr	r2, [r7, #20]
 800fcb4:	4313      	orrs	r3, r2
 800fcb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	4a2c      	ldr	r2, [pc, #176]	@ (800fd6c <TIM_OC2_SetConfig+0x110>)
 800fcbc:	4293      	cmp	r3, r2
 800fcbe:	d007      	beq.n	800fcd0 <TIM_OC2_SetConfig+0x74>
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	4a2b      	ldr	r2, [pc, #172]	@ (800fd70 <TIM_OC2_SetConfig+0x114>)
 800fcc4:	4293      	cmp	r3, r2
 800fcc6:	d003      	beq.n	800fcd0 <TIM_OC2_SetConfig+0x74>
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	4a2a      	ldr	r2, [pc, #168]	@ (800fd74 <TIM_OC2_SetConfig+0x118>)
 800fccc:	4293      	cmp	r3, r2
 800fcce:	d10d      	bne.n	800fcec <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fcd0:	697b      	ldr	r3, [r7, #20]
 800fcd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fcd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	68db      	ldr	r3, [r3, #12]
 800fcdc:	011b      	lsls	r3, r3, #4
 800fcde:	697a      	ldr	r2, [r7, #20]
 800fce0:	4313      	orrs	r3, r2
 800fce2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fcea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	4a1f      	ldr	r2, [pc, #124]	@ (800fd6c <TIM_OC2_SetConfig+0x110>)
 800fcf0:	4293      	cmp	r3, r2
 800fcf2:	d013      	beq.n	800fd1c <TIM_OC2_SetConfig+0xc0>
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	4a1e      	ldr	r2, [pc, #120]	@ (800fd70 <TIM_OC2_SetConfig+0x114>)
 800fcf8:	4293      	cmp	r3, r2
 800fcfa:	d00f      	beq.n	800fd1c <TIM_OC2_SetConfig+0xc0>
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	4a1e      	ldr	r2, [pc, #120]	@ (800fd78 <TIM_OC2_SetConfig+0x11c>)
 800fd00:	4293      	cmp	r3, r2
 800fd02:	d00b      	beq.n	800fd1c <TIM_OC2_SetConfig+0xc0>
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	4a1d      	ldr	r2, [pc, #116]	@ (800fd7c <TIM_OC2_SetConfig+0x120>)
 800fd08:	4293      	cmp	r3, r2
 800fd0a:	d007      	beq.n	800fd1c <TIM_OC2_SetConfig+0xc0>
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	4a1c      	ldr	r2, [pc, #112]	@ (800fd80 <TIM_OC2_SetConfig+0x124>)
 800fd10:	4293      	cmp	r3, r2
 800fd12:	d003      	beq.n	800fd1c <TIM_OC2_SetConfig+0xc0>
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	4a17      	ldr	r2, [pc, #92]	@ (800fd74 <TIM_OC2_SetConfig+0x118>)
 800fd18:	4293      	cmp	r3, r2
 800fd1a:	d113      	bne.n	800fd44 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fd1c:	693b      	ldr	r3, [r7, #16]
 800fd1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fd22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fd24:	693b      	ldr	r3, [r7, #16]
 800fd26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fd2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	695b      	ldr	r3, [r3, #20]
 800fd30:	009b      	lsls	r3, r3, #2
 800fd32:	693a      	ldr	r2, [r7, #16]
 800fd34:	4313      	orrs	r3, r2
 800fd36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	699b      	ldr	r3, [r3, #24]
 800fd3c:	009b      	lsls	r3, r3, #2
 800fd3e:	693a      	ldr	r2, [r7, #16]
 800fd40:	4313      	orrs	r3, r2
 800fd42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	693a      	ldr	r2, [r7, #16]
 800fd48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	68fa      	ldr	r2, [r7, #12]
 800fd4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	685a      	ldr	r2, [r3, #4]
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	697a      	ldr	r2, [r7, #20]
 800fd5c:	621a      	str	r2, [r3, #32]
}
 800fd5e:	bf00      	nop
 800fd60:	371c      	adds	r7, #28
 800fd62:	46bd      	mov	sp, r7
 800fd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd68:	4770      	bx	lr
 800fd6a:	bf00      	nop
 800fd6c:	40012c00 	.word	0x40012c00
 800fd70:	40013400 	.word	0x40013400
 800fd74:	40015000 	.word	0x40015000
 800fd78:	40014000 	.word	0x40014000
 800fd7c:	40014400 	.word	0x40014400
 800fd80:	40014800 	.word	0x40014800

0800fd84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fd84:	b480      	push	{r7}
 800fd86:	b087      	sub	sp, #28
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
 800fd8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	6a1b      	ldr	r3, [r3, #32]
 800fd92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	6a1b      	ldr	r3, [r3, #32]
 800fd98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	685b      	ldr	r3, [r3, #4]
 800fda4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	69db      	ldr	r3, [r3, #28]
 800fdaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fdb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fdb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	f023 0303 	bic.w	r3, r3, #3
 800fdbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	68fa      	ldr	r2, [r7, #12]
 800fdc6:	4313      	orrs	r3, r2
 800fdc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fdd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	689b      	ldr	r3, [r3, #8]
 800fdd6:	021b      	lsls	r3, r3, #8
 800fdd8:	697a      	ldr	r2, [r7, #20]
 800fdda:	4313      	orrs	r3, r2
 800fddc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	4a2b      	ldr	r2, [pc, #172]	@ (800fe90 <TIM_OC3_SetConfig+0x10c>)
 800fde2:	4293      	cmp	r3, r2
 800fde4:	d007      	beq.n	800fdf6 <TIM_OC3_SetConfig+0x72>
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	4a2a      	ldr	r2, [pc, #168]	@ (800fe94 <TIM_OC3_SetConfig+0x110>)
 800fdea:	4293      	cmp	r3, r2
 800fdec:	d003      	beq.n	800fdf6 <TIM_OC3_SetConfig+0x72>
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	4a29      	ldr	r2, [pc, #164]	@ (800fe98 <TIM_OC3_SetConfig+0x114>)
 800fdf2:	4293      	cmp	r3, r2
 800fdf4:	d10d      	bne.n	800fe12 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fdfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	68db      	ldr	r3, [r3, #12]
 800fe02:	021b      	lsls	r3, r3, #8
 800fe04:	697a      	ldr	r2, [r7, #20]
 800fe06:	4313      	orrs	r3, r2
 800fe08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fe10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	4a1e      	ldr	r2, [pc, #120]	@ (800fe90 <TIM_OC3_SetConfig+0x10c>)
 800fe16:	4293      	cmp	r3, r2
 800fe18:	d013      	beq.n	800fe42 <TIM_OC3_SetConfig+0xbe>
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	4a1d      	ldr	r2, [pc, #116]	@ (800fe94 <TIM_OC3_SetConfig+0x110>)
 800fe1e:	4293      	cmp	r3, r2
 800fe20:	d00f      	beq.n	800fe42 <TIM_OC3_SetConfig+0xbe>
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	4a1d      	ldr	r2, [pc, #116]	@ (800fe9c <TIM_OC3_SetConfig+0x118>)
 800fe26:	4293      	cmp	r3, r2
 800fe28:	d00b      	beq.n	800fe42 <TIM_OC3_SetConfig+0xbe>
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	4a1c      	ldr	r2, [pc, #112]	@ (800fea0 <TIM_OC3_SetConfig+0x11c>)
 800fe2e:	4293      	cmp	r3, r2
 800fe30:	d007      	beq.n	800fe42 <TIM_OC3_SetConfig+0xbe>
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	4a1b      	ldr	r2, [pc, #108]	@ (800fea4 <TIM_OC3_SetConfig+0x120>)
 800fe36:	4293      	cmp	r3, r2
 800fe38:	d003      	beq.n	800fe42 <TIM_OC3_SetConfig+0xbe>
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	4a16      	ldr	r2, [pc, #88]	@ (800fe98 <TIM_OC3_SetConfig+0x114>)
 800fe3e:	4293      	cmp	r3, r2
 800fe40:	d113      	bne.n	800fe6a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fe42:	693b      	ldr	r3, [r7, #16]
 800fe44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fe48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fe4a:	693b      	ldr	r3, [r7, #16]
 800fe4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fe50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	695b      	ldr	r3, [r3, #20]
 800fe56:	011b      	lsls	r3, r3, #4
 800fe58:	693a      	ldr	r2, [r7, #16]
 800fe5a:	4313      	orrs	r3, r2
 800fe5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	699b      	ldr	r3, [r3, #24]
 800fe62:	011b      	lsls	r3, r3, #4
 800fe64:	693a      	ldr	r2, [r7, #16]
 800fe66:	4313      	orrs	r3, r2
 800fe68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	693a      	ldr	r2, [r7, #16]
 800fe6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	68fa      	ldr	r2, [r7, #12]
 800fe74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	685a      	ldr	r2, [r3, #4]
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	697a      	ldr	r2, [r7, #20]
 800fe82:	621a      	str	r2, [r3, #32]
}
 800fe84:	bf00      	nop
 800fe86:	371c      	adds	r7, #28
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8e:	4770      	bx	lr
 800fe90:	40012c00 	.word	0x40012c00
 800fe94:	40013400 	.word	0x40013400
 800fe98:	40015000 	.word	0x40015000
 800fe9c:	40014000 	.word	0x40014000
 800fea0:	40014400 	.word	0x40014400
 800fea4:	40014800 	.word	0x40014800

0800fea8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fea8:	b480      	push	{r7}
 800feaa:	b087      	sub	sp, #28
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	6a1b      	ldr	r3, [r3, #32]
 800feb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	6a1b      	ldr	r3, [r3, #32]
 800febc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	685b      	ldr	r3, [r3, #4]
 800fec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	69db      	ldr	r3, [r3, #28]
 800fece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fed6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800feda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fee4:	683b      	ldr	r3, [r7, #0]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	021b      	lsls	r3, r3, #8
 800feea:	68fa      	ldr	r2, [r7, #12]
 800feec:	4313      	orrs	r3, r2
 800feee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fef0:	697b      	ldr	r3, [r7, #20]
 800fef2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fef6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fef8:	683b      	ldr	r3, [r7, #0]
 800fefa:	689b      	ldr	r3, [r3, #8]
 800fefc:	031b      	lsls	r3, r3, #12
 800fefe:	697a      	ldr	r2, [r7, #20]
 800ff00:	4313      	orrs	r3, r2
 800ff02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	4a2c      	ldr	r2, [pc, #176]	@ (800ffb8 <TIM_OC4_SetConfig+0x110>)
 800ff08:	4293      	cmp	r3, r2
 800ff0a:	d007      	beq.n	800ff1c <TIM_OC4_SetConfig+0x74>
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	4a2b      	ldr	r2, [pc, #172]	@ (800ffbc <TIM_OC4_SetConfig+0x114>)
 800ff10:	4293      	cmp	r3, r2
 800ff12:	d003      	beq.n	800ff1c <TIM_OC4_SetConfig+0x74>
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	4a2a      	ldr	r2, [pc, #168]	@ (800ffc0 <TIM_OC4_SetConfig+0x118>)
 800ff18:	4293      	cmp	r3, r2
 800ff1a:	d10d      	bne.n	800ff38 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ff1c:	697b      	ldr	r3, [r7, #20]
 800ff1e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ff22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	68db      	ldr	r3, [r3, #12]
 800ff28:	031b      	lsls	r3, r3, #12
 800ff2a:	697a      	ldr	r2, [r7, #20]
 800ff2c:	4313      	orrs	r3, r2
 800ff2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ff36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	4a1f      	ldr	r2, [pc, #124]	@ (800ffb8 <TIM_OC4_SetConfig+0x110>)
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	d013      	beq.n	800ff68 <TIM_OC4_SetConfig+0xc0>
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	4a1e      	ldr	r2, [pc, #120]	@ (800ffbc <TIM_OC4_SetConfig+0x114>)
 800ff44:	4293      	cmp	r3, r2
 800ff46:	d00f      	beq.n	800ff68 <TIM_OC4_SetConfig+0xc0>
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	4a1e      	ldr	r2, [pc, #120]	@ (800ffc4 <TIM_OC4_SetConfig+0x11c>)
 800ff4c:	4293      	cmp	r3, r2
 800ff4e:	d00b      	beq.n	800ff68 <TIM_OC4_SetConfig+0xc0>
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	4a1d      	ldr	r2, [pc, #116]	@ (800ffc8 <TIM_OC4_SetConfig+0x120>)
 800ff54:	4293      	cmp	r3, r2
 800ff56:	d007      	beq.n	800ff68 <TIM_OC4_SetConfig+0xc0>
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	4a1c      	ldr	r2, [pc, #112]	@ (800ffcc <TIM_OC4_SetConfig+0x124>)
 800ff5c:	4293      	cmp	r3, r2
 800ff5e:	d003      	beq.n	800ff68 <TIM_OC4_SetConfig+0xc0>
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	4a17      	ldr	r2, [pc, #92]	@ (800ffc0 <TIM_OC4_SetConfig+0x118>)
 800ff64:	4293      	cmp	r3, r2
 800ff66:	d113      	bne.n	800ff90 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ff68:	693b      	ldr	r3, [r7, #16]
 800ff6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ff6e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ff70:	693b      	ldr	r3, [r7, #16]
 800ff72:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ff76:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	695b      	ldr	r3, [r3, #20]
 800ff7c:	019b      	lsls	r3, r3, #6
 800ff7e:	693a      	ldr	r2, [r7, #16]
 800ff80:	4313      	orrs	r3, r2
 800ff82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	699b      	ldr	r3, [r3, #24]
 800ff88:	019b      	lsls	r3, r3, #6
 800ff8a:	693a      	ldr	r2, [r7, #16]
 800ff8c:	4313      	orrs	r3, r2
 800ff8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	693a      	ldr	r2, [r7, #16]
 800ff94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	68fa      	ldr	r2, [r7, #12]
 800ff9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	685a      	ldr	r2, [r3, #4]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	697a      	ldr	r2, [r7, #20]
 800ffa8:	621a      	str	r2, [r3, #32]
}
 800ffaa:	bf00      	nop
 800ffac:	371c      	adds	r7, #28
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb4:	4770      	bx	lr
 800ffb6:	bf00      	nop
 800ffb8:	40012c00 	.word	0x40012c00
 800ffbc:	40013400 	.word	0x40013400
 800ffc0:	40015000 	.word	0x40015000
 800ffc4:	40014000 	.word	0x40014000
 800ffc8:	40014400 	.word	0x40014400
 800ffcc:	40014800 	.word	0x40014800

0800ffd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ffd0:	b480      	push	{r7}
 800ffd2:	b087      	sub	sp, #28
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6a1b      	ldr	r3, [r3, #32]
 800ffde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6a1b      	ldr	r3, [r3, #32]
 800ffe4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	685b      	ldr	r3, [r3, #4]
 800fff0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	68fa      	ldr	r2, [r7, #12]
 801000a:	4313      	orrs	r3, r2
 801000c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8010014:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	689b      	ldr	r3, [r3, #8]
 801001a:	041b      	lsls	r3, r3, #16
 801001c:	693a      	ldr	r2, [r7, #16]
 801001e:	4313      	orrs	r3, r2
 8010020:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	4a19      	ldr	r2, [pc, #100]	@ (801008c <TIM_OC5_SetConfig+0xbc>)
 8010026:	4293      	cmp	r3, r2
 8010028:	d013      	beq.n	8010052 <TIM_OC5_SetConfig+0x82>
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	4a18      	ldr	r2, [pc, #96]	@ (8010090 <TIM_OC5_SetConfig+0xc0>)
 801002e:	4293      	cmp	r3, r2
 8010030:	d00f      	beq.n	8010052 <TIM_OC5_SetConfig+0x82>
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	4a17      	ldr	r2, [pc, #92]	@ (8010094 <TIM_OC5_SetConfig+0xc4>)
 8010036:	4293      	cmp	r3, r2
 8010038:	d00b      	beq.n	8010052 <TIM_OC5_SetConfig+0x82>
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	4a16      	ldr	r2, [pc, #88]	@ (8010098 <TIM_OC5_SetConfig+0xc8>)
 801003e:	4293      	cmp	r3, r2
 8010040:	d007      	beq.n	8010052 <TIM_OC5_SetConfig+0x82>
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	4a15      	ldr	r2, [pc, #84]	@ (801009c <TIM_OC5_SetConfig+0xcc>)
 8010046:	4293      	cmp	r3, r2
 8010048:	d003      	beq.n	8010052 <TIM_OC5_SetConfig+0x82>
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	4a14      	ldr	r2, [pc, #80]	@ (80100a0 <TIM_OC5_SetConfig+0xd0>)
 801004e:	4293      	cmp	r3, r2
 8010050:	d109      	bne.n	8010066 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010058:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	695b      	ldr	r3, [r3, #20]
 801005e:	021b      	lsls	r3, r3, #8
 8010060:	697a      	ldr	r2, [r7, #20]
 8010062:	4313      	orrs	r3, r2
 8010064:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	697a      	ldr	r2, [r7, #20]
 801006a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	68fa      	ldr	r2, [r7, #12]
 8010070:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	685a      	ldr	r2, [r3, #4]
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	693a      	ldr	r2, [r7, #16]
 801007e:	621a      	str	r2, [r3, #32]
}
 8010080:	bf00      	nop
 8010082:	371c      	adds	r7, #28
 8010084:	46bd      	mov	sp, r7
 8010086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008a:	4770      	bx	lr
 801008c:	40012c00 	.word	0x40012c00
 8010090:	40013400 	.word	0x40013400
 8010094:	40014000 	.word	0x40014000
 8010098:	40014400 	.word	0x40014400
 801009c:	40014800 	.word	0x40014800
 80100a0:	40015000 	.word	0x40015000

080100a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80100a4:	b480      	push	{r7}
 80100a6:	b087      	sub	sp, #28
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
 80100ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6a1b      	ldr	r3, [r3, #32]
 80100b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	6a1b      	ldr	r3, [r3, #32]
 80100b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	685b      	ldr	r3, [r3, #4]
 80100c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80100ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80100d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80100d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	021b      	lsls	r3, r3, #8
 80100de:	68fa      	ldr	r2, [r7, #12]
 80100e0:	4313      	orrs	r3, r2
 80100e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80100e4:	693b      	ldr	r3, [r7, #16]
 80100e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80100ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	689b      	ldr	r3, [r3, #8]
 80100f0:	051b      	lsls	r3, r3, #20
 80100f2:	693a      	ldr	r2, [r7, #16]
 80100f4:	4313      	orrs	r3, r2
 80100f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	4a1a      	ldr	r2, [pc, #104]	@ (8010164 <TIM_OC6_SetConfig+0xc0>)
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d013      	beq.n	8010128 <TIM_OC6_SetConfig+0x84>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	4a19      	ldr	r2, [pc, #100]	@ (8010168 <TIM_OC6_SetConfig+0xc4>)
 8010104:	4293      	cmp	r3, r2
 8010106:	d00f      	beq.n	8010128 <TIM_OC6_SetConfig+0x84>
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	4a18      	ldr	r2, [pc, #96]	@ (801016c <TIM_OC6_SetConfig+0xc8>)
 801010c:	4293      	cmp	r3, r2
 801010e:	d00b      	beq.n	8010128 <TIM_OC6_SetConfig+0x84>
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	4a17      	ldr	r2, [pc, #92]	@ (8010170 <TIM_OC6_SetConfig+0xcc>)
 8010114:	4293      	cmp	r3, r2
 8010116:	d007      	beq.n	8010128 <TIM_OC6_SetConfig+0x84>
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	4a16      	ldr	r2, [pc, #88]	@ (8010174 <TIM_OC6_SetConfig+0xd0>)
 801011c:	4293      	cmp	r3, r2
 801011e:	d003      	beq.n	8010128 <TIM_OC6_SetConfig+0x84>
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	4a15      	ldr	r2, [pc, #84]	@ (8010178 <TIM_OC6_SetConfig+0xd4>)
 8010124:	4293      	cmp	r3, r2
 8010126:	d109      	bne.n	801013c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801012e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	695b      	ldr	r3, [r3, #20]
 8010134:	029b      	lsls	r3, r3, #10
 8010136:	697a      	ldr	r2, [r7, #20]
 8010138:	4313      	orrs	r3, r2
 801013a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	697a      	ldr	r2, [r7, #20]
 8010140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	68fa      	ldr	r2, [r7, #12]
 8010146:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	685a      	ldr	r2, [r3, #4]
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	693a      	ldr	r2, [r7, #16]
 8010154:	621a      	str	r2, [r3, #32]
}
 8010156:	bf00      	nop
 8010158:	371c      	adds	r7, #28
 801015a:	46bd      	mov	sp, r7
 801015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010160:	4770      	bx	lr
 8010162:	bf00      	nop
 8010164:	40012c00 	.word	0x40012c00
 8010168:	40013400 	.word	0x40013400
 801016c:	40014000 	.word	0x40014000
 8010170:	40014400 	.word	0x40014400
 8010174:	40014800 	.word	0x40014800
 8010178:	40015000 	.word	0x40015000

0801017c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801017c:	b480      	push	{r7}
 801017e:	b087      	sub	sp, #28
 8010180:	af00      	add	r7, sp, #0
 8010182:	60f8      	str	r0, [r7, #12]
 8010184:	60b9      	str	r1, [r7, #8]
 8010186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	6a1b      	ldr	r3, [r3, #32]
 801018c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	6a1b      	ldr	r3, [r3, #32]
 8010192:	f023 0201 	bic.w	r2, r3, #1
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	699b      	ldr	r3, [r3, #24]
 801019e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80101a0:	693b      	ldr	r3, [r7, #16]
 80101a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80101a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	011b      	lsls	r3, r3, #4
 80101ac:	693a      	ldr	r2, [r7, #16]
 80101ae:	4313      	orrs	r3, r2
 80101b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	f023 030a 	bic.w	r3, r3, #10
 80101b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80101ba:	697a      	ldr	r2, [r7, #20]
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	4313      	orrs	r3, r2
 80101c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	693a      	ldr	r2, [r7, #16]
 80101c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	697a      	ldr	r2, [r7, #20]
 80101cc:	621a      	str	r2, [r3, #32]
}
 80101ce:	bf00      	nop
 80101d0:	371c      	adds	r7, #28
 80101d2:	46bd      	mov	sp, r7
 80101d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d8:	4770      	bx	lr

080101da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80101da:	b480      	push	{r7}
 80101dc:	b087      	sub	sp, #28
 80101de:	af00      	add	r7, sp, #0
 80101e0:	60f8      	str	r0, [r7, #12]
 80101e2:	60b9      	str	r1, [r7, #8]
 80101e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	6a1b      	ldr	r3, [r3, #32]
 80101ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	6a1b      	ldr	r3, [r3, #32]
 80101f0:	f023 0210 	bic.w	r2, r3, #16
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	699b      	ldr	r3, [r3, #24]
 80101fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80101fe:	693b      	ldr	r3, [r7, #16]
 8010200:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010204:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	031b      	lsls	r3, r3, #12
 801020a:	693a      	ldr	r2, [r7, #16]
 801020c:	4313      	orrs	r3, r2
 801020e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010210:	697b      	ldr	r3, [r7, #20]
 8010212:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010216:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	011b      	lsls	r3, r3, #4
 801021c:	697a      	ldr	r2, [r7, #20]
 801021e:	4313      	orrs	r3, r2
 8010220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	693a      	ldr	r2, [r7, #16]
 8010226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	697a      	ldr	r2, [r7, #20]
 801022c:	621a      	str	r2, [r3, #32]
}
 801022e:	bf00      	nop
 8010230:	371c      	adds	r7, #28
 8010232:	46bd      	mov	sp, r7
 8010234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010238:	4770      	bx	lr

0801023a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801023a:	b480      	push	{r7}
 801023c:	b085      	sub	sp, #20
 801023e:	af00      	add	r7, sp, #0
 8010240:	6078      	str	r0, [r7, #4]
 8010242:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	689b      	ldr	r3, [r3, #8]
 8010248:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8010250:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010254:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010256:	683a      	ldr	r2, [r7, #0]
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	4313      	orrs	r3, r2
 801025c:	f043 0307 	orr.w	r3, r3, #7
 8010260:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	68fa      	ldr	r2, [r7, #12]
 8010266:	609a      	str	r2, [r3, #8]
}
 8010268:	bf00      	nop
 801026a:	3714      	adds	r7, #20
 801026c:	46bd      	mov	sp, r7
 801026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010272:	4770      	bx	lr

08010274 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010274:	b480      	push	{r7}
 8010276:	b087      	sub	sp, #28
 8010278:	af00      	add	r7, sp, #0
 801027a:	60f8      	str	r0, [r7, #12]
 801027c:	60b9      	str	r1, [r7, #8]
 801027e:	607a      	str	r2, [r7, #4]
 8010280:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	689b      	ldr	r3, [r3, #8]
 8010286:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010288:	697b      	ldr	r3, [r7, #20]
 801028a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801028e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010290:	683b      	ldr	r3, [r7, #0]
 8010292:	021a      	lsls	r2, r3, #8
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	431a      	orrs	r2, r3
 8010298:	68bb      	ldr	r3, [r7, #8]
 801029a:	4313      	orrs	r3, r2
 801029c:	697a      	ldr	r2, [r7, #20]
 801029e:	4313      	orrs	r3, r2
 80102a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	697a      	ldr	r2, [r7, #20]
 80102a6:	609a      	str	r2, [r3, #8]
}
 80102a8:	bf00      	nop
 80102aa:	371c      	adds	r7, #28
 80102ac:	46bd      	mov	sp, r7
 80102ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b2:	4770      	bx	lr

080102b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80102b4:	b480      	push	{r7}
 80102b6:	b087      	sub	sp, #28
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	60f8      	str	r0, [r7, #12]
 80102bc:	60b9      	str	r1, [r7, #8]
 80102be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	f003 031f 	and.w	r3, r3, #31
 80102c6:	2201      	movs	r2, #1
 80102c8:	fa02 f303 	lsl.w	r3, r2, r3
 80102cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	6a1a      	ldr	r2, [r3, #32]
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	43db      	mvns	r3, r3
 80102d6:	401a      	ands	r2, r3
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	6a1a      	ldr	r2, [r3, #32]
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	f003 031f 	and.w	r3, r3, #31
 80102e6:	6879      	ldr	r1, [r7, #4]
 80102e8:	fa01 f303 	lsl.w	r3, r1, r3
 80102ec:	431a      	orrs	r2, r3
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	621a      	str	r2, [r3, #32]
}
 80102f2:	bf00      	nop
 80102f4:	371c      	adds	r7, #28
 80102f6:	46bd      	mov	sp, r7
 80102f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fc:	4770      	bx	lr
	...

08010300 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8010300:	b480      	push	{r7}
 8010302:	b083      	sub	sp, #12
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	4a26      	ldr	r2, [pc, #152]	@ (80103a4 <TIM_ResetCallback+0xa4>)
 801030c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	4a25      	ldr	r2, [pc, #148]	@ (80103a8 <TIM_ResetCallback+0xa8>)
 8010314:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	4a24      	ldr	r2, [pc, #144]	@ (80103ac <TIM_ResetCallback+0xac>)
 801031c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	4a23      	ldr	r2, [pc, #140]	@ (80103b0 <TIM_ResetCallback+0xb0>)
 8010324:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	4a22      	ldr	r2, [pc, #136]	@ (80103b4 <TIM_ResetCallback+0xb4>)
 801032c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	4a21      	ldr	r2, [pc, #132]	@ (80103b8 <TIM_ResetCallback+0xb8>)
 8010334:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	4a20      	ldr	r2, [pc, #128]	@ (80103bc <TIM_ResetCallback+0xbc>)
 801033c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	4a1f      	ldr	r2, [pc, #124]	@ (80103c0 <TIM_ResetCallback+0xc0>)
 8010344:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	4a1e      	ldr	r2, [pc, #120]	@ (80103c4 <TIM_ResetCallback+0xc4>)
 801034c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	4a1d      	ldr	r2, [pc, #116]	@ (80103c8 <TIM_ResetCallback+0xc8>)
 8010354:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	4a1c      	ldr	r2, [pc, #112]	@ (80103cc <TIM_ResetCallback+0xcc>)
 801035c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	4a1b      	ldr	r2, [pc, #108]	@ (80103d0 <TIM_ResetCallback+0xd0>)
 8010364:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	4a1a      	ldr	r2, [pc, #104]	@ (80103d4 <TIM_ResetCallback+0xd4>)
 801036c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	4a19      	ldr	r2, [pc, #100]	@ (80103d8 <TIM_ResetCallback+0xd8>)
 8010374:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	4a18      	ldr	r2, [pc, #96]	@ (80103dc <TIM_ResetCallback+0xdc>)
 801037c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	4a17      	ldr	r2, [pc, #92]	@ (80103e0 <TIM_ResetCallback+0xe0>)
 8010384:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	4a16      	ldr	r2, [pc, #88]	@ (80103e4 <TIM_ResetCallback+0xe4>)
 801038c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	4a15      	ldr	r2, [pc, #84]	@ (80103e8 <TIM_ResetCallback+0xe8>)
 8010394:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8010398:	bf00      	nop
 801039a:	370c      	adds	r7, #12
 801039c:	46bd      	mov	sp, r7
 801039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a2:	4770      	bx	lr
 80103a4:	08008af1 	.word	0x08008af1
 80103a8:	0800f64d 	.word	0x0800f64d
 80103ac:	0800f6c5 	.word	0x0800f6c5
 80103b0:	0800f6d9 	.word	0x0800f6d9
 80103b4:	0800f675 	.word	0x0800f675
 80103b8:	0800f689 	.word	0x0800f689
 80103bc:	0800f661 	.word	0x0800f661
 80103c0:	0800f69d 	.word	0x0800f69d
 80103c4:	0800f6b1 	.word	0x0800f6b1
 80103c8:	0800f6ed 	.word	0x0800f6ed
 80103cc:	08010641 	.word	0x08010641
 80103d0:	08010655 	.word	0x08010655
 80103d4:	08010669 	.word	0x08010669
 80103d8:	0801067d 	.word	0x0801067d
 80103dc:	08010691 	.word	0x08010691
 80103e0:	080106a5 	.word	0x080106a5
 80103e4:	080106b9 	.word	0x080106b9
 80103e8:	080106cd 	.word	0x080106cd

080103ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80103ec:	b480      	push	{r7}
 80103ee:	b085      	sub	sp, #20
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80103fc:	2b01      	cmp	r3, #1
 80103fe:	d101      	bne.n	8010404 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010400:	2302      	movs	r3, #2
 8010402:	e074      	b.n	80104ee <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2201      	movs	r2, #1
 8010408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2202      	movs	r2, #2
 8010410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	685b      	ldr	r3, [r3, #4]
 801041a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	689b      	ldr	r3, [r3, #8]
 8010422:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	4a34      	ldr	r2, [pc, #208]	@ (80104fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801042a:	4293      	cmp	r3, r2
 801042c:	d009      	beq.n	8010442 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	4a33      	ldr	r2, [pc, #204]	@ (8010500 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010434:	4293      	cmp	r3, r2
 8010436:	d004      	beq.n	8010442 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	4a31      	ldr	r2, [pc, #196]	@ (8010504 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801043e:	4293      	cmp	r3, r2
 8010440:	d108      	bne.n	8010454 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8010448:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	685b      	ldr	r3, [r3, #4]
 801044e:	68fa      	ldr	r2, [r7, #12]
 8010450:	4313      	orrs	r3, r2
 8010452:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 801045a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801045e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	68fa      	ldr	r2, [r7, #12]
 8010466:	4313      	orrs	r3, r2
 8010468:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	68fa      	ldr	r2, [r7, #12]
 8010470:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	4a21      	ldr	r2, [pc, #132]	@ (80104fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010478:	4293      	cmp	r3, r2
 801047a:	d022      	beq.n	80104c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010484:	d01d      	beq.n	80104c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	4a1f      	ldr	r2, [pc, #124]	@ (8010508 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801048c:	4293      	cmp	r3, r2
 801048e:	d018      	beq.n	80104c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	4a1d      	ldr	r2, [pc, #116]	@ (801050c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010496:	4293      	cmp	r3, r2
 8010498:	d013      	beq.n	80104c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	4a1c      	ldr	r2, [pc, #112]	@ (8010510 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80104a0:	4293      	cmp	r3, r2
 80104a2:	d00e      	beq.n	80104c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	4a15      	ldr	r2, [pc, #84]	@ (8010500 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80104aa:	4293      	cmp	r3, r2
 80104ac:	d009      	beq.n	80104c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	4a18      	ldr	r2, [pc, #96]	@ (8010514 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80104b4:	4293      	cmp	r3, r2
 80104b6:	d004      	beq.n	80104c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	4a11      	ldr	r2, [pc, #68]	@ (8010504 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80104be:	4293      	cmp	r3, r2
 80104c0:	d10c      	bne.n	80104dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80104c2:	68bb      	ldr	r3, [r7, #8]
 80104c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80104c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	689b      	ldr	r3, [r3, #8]
 80104ce:	68ba      	ldr	r2, [r7, #8]
 80104d0:	4313      	orrs	r3, r2
 80104d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	68ba      	ldr	r2, [r7, #8]
 80104da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2201      	movs	r2, #1
 80104e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2200      	movs	r2, #0
 80104e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80104ec:	2300      	movs	r3, #0
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	3714      	adds	r7, #20
 80104f2:	46bd      	mov	sp, r7
 80104f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop
 80104fc:	40012c00 	.word	0x40012c00
 8010500:	40013400 	.word	0x40013400
 8010504:	40015000 	.word	0x40015000
 8010508:	40000400 	.word	0x40000400
 801050c:	40000800 	.word	0x40000800
 8010510:	40000c00 	.word	0x40000c00
 8010514:	40014000 	.word	0x40014000

08010518 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010518:	b480      	push	{r7}
 801051a:	b085      	sub	sp, #20
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
 8010520:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010522:	2300      	movs	r3, #0
 8010524:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801052c:	2b01      	cmp	r3, #1
 801052e:	d101      	bne.n	8010534 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010530:	2302      	movs	r3, #2
 8010532:	e078      	b.n	8010626 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2201      	movs	r2, #1
 8010538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	68db      	ldr	r3, [r3, #12]
 8010546:	4313      	orrs	r3, r2
 8010548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	689b      	ldr	r3, [r3, #8]
 8010554:	4313      	orrs	r3, r2
 8010556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	685b      	ldr	r3, [r3, #4]
 8010562:	4313      	orrs	r3, r2
 8010564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	4313      	orrs	r3, r2
 8010572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801057a:	683b      	ldr	r3, [r7, #0]
 801057c:	691b      	ldr	r3, [r3, #16]
 801057e:	4313      	orrs	r3, r2
 8010580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	695b      	ldr	r3, [r3, #20]
 801058c:	4313      	orrs	r3, r2
 801058e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8010596:	683b      	ldr	r3, [r7, #0]
 8010598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801059a:	4313      	orrs	r3, r2
 801059c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	699b      	ldr	r3, [r3, #24]
 80105a8:	041b      	lsls	r3, r3, #16
 80105aa:	4313      	orrs	r3, r2
 80105ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80105b4:	683b      	ldr	r3, [r7, #0]
 80105b6:	69db      	ldr	r3, [r3, #28]
 80105b8:	4313      	orrs	r3, r2
 80105ba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	4a1c      	ldr	r2, [pc, #112]	@ (8010634 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80105c2:	4293      	cmp	r3, r2
 80105c4:	d009      	beq.n	80105da <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	4a1b      	ldr	r2, [pc, #108]	@ (8010638 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80105cc:	4293      	cmp	r3, r2
 80105ce:	d004      	beq.n	80105da <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	4a19      	ldr	r2, [pc, #100]	@ (801063c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80105d6:	4293      	cmp	r3, r2
 80105d8:	d11c      	bne.n	8010614 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105e4:	051b      	lsls	r3, r3, #20
 80105e6:	4313      	orrs	r3, r2
 80105e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	6a1b      	ldr	r3, [r3, #32]
 80105f4:	4313      	orrs	r3, r2
 80105f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010602:	4313      	orrs	r3, r2
 8010604:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010610:	4313      	orrs	r3, r2
 8010612:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	68fa      	ldr	r2, [r7, #12]
 801061a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2200      	movs	r2, #0
 8010620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010624:	2300      	movs	r3, #0
}
 8010626:	4618      	mov	r0, r3
 8010628:	3714      	adds	r7, #20
 801062a:	46bd      	mov	sp, r7
 801062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010630:	4770      	bx	lr
 8010632:	bf00      	nop
 8010634:	40012c00 	.word	0x40012c00
 8010638:	40013400 	.word	0x40013400
 801063c:	40015000 	.word	0x40015000

08010640 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010640:	b480      	push	{r7}
 8010642:	b083      	sub	sp, #12
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010648:	bf00      	nop
 801064a:	370c      	adds	r7, #12
 801064c:	46bd      	mov	sp, r7
 801064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010652:	4770      	bx	lr

08010654 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010654:	b480      	push	{r7}
 8010656:	b083      	sub	sp, #12
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 801065c:	bf00      	nop
 801065e:	370c      	adds	r7, #12
 8010660:	46bd      	mov	sp, r7
 8010662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010666:	4770      	bx	lr

08010668 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010668:	b480      	push	{r7}
 801066a:	b083      	sub	sp, #12
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010670:	bf00      	nop
 8010672:	370c      	adds	r7, #12
 8010674:	46bd      	mov	sp, r7
 8010676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067a:	4770      	bx	lr

0801067c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801067c:	b480      	push	{r7}
 801067e:	b083      	sub	sp, #12
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010684:	bf00      	nop
 8010686:	370c      	adds	r7, #12
 8010688:	46bd      	mov	sp, r7
 801068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068e:	4770      	bx	lr

08010690 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8010690:	b480      	push	{r7}
 8010692:	b083      	sub	sp, #12
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8010698:	bf00      	nop
 801069a:	370c      	adds	r7, #12
 801069c:	46bd      	mov	sp, r7
 801069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a2:	4770      	bx	lr

080106a4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80106a4:	b480      	push	{r7}
 80106a6:	b083      	sub	sp, #12
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80106ac:	bf00      	nop
 80106ae:	370c      	adds	r7, #12
 80106b0:	46bd      	mov	sp, r7
 80106b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b6:	4770      	bx	lr

080106b8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80106b8:	b480      	push	{r7}
 80106ba:	b083      	sub	sp, #12
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80106c0:	bf00      	nop
 80106c2:	370c      	adds	r7, #12
 80106c4:	46bd      	mov	sp, r7
 80106c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ca:	4770      	bx	lr

080106cc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80106cc:	b480      	push	{r7}
 80106ce:	b083      	sub	sp, #12
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80106d4:	bf00      	nop
 80106d6:	370c      	adds	r7, #12
 80106d8:	46bd      	mov	sp, r7
 80106da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106de:	4770      	bx	lr

080106e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b082      	sub	sp, #8
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d101      	bne.n	80106f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80106ee:	2301      	movs	r3, #1
 80106f0:	e050      	b.n	8010794 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d114      	bne.n	8010726 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2200      	movs	r2, #0
 8010700:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f000 fde5 	bl	80112d4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8010710:	2b00      	cmp	r3, #0
 8010712:	d103      	bne.n	801071c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	4a21      	ldr	r2, [pc, #132]	@ (801079c <HAL_UART_Init+0xbc>)
 8010718:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8010722:	6878      	ldr	r0, [r7, #4]
 8010724:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2224      	movs	r2, #36	@ 0x24
 801072a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	681a      	ldr	r2, [r3, #0]
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	f022 0201 	bic.w	r2, r2, #1
 801073c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010742:	2b00      	cmp	r3, #0
 8010744:	d002      	beq.n	801074c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8010746:	6878      	ldr	r0, [r7, #4]
 8010748:	f001 f912 	bl	8011970 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f000 fe13 	bl	8011378 <UART_SetConfig>
 8010752:	4603      	mov	r3, r0
 8010754:	2b01      	cmp	r3, #1
 8010756:	d101      	bne.n	801075c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8010758:	2301      	movs	r3, #1
 801075a:	e01b      	b.n	8010794 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	685a      	ldr	r2, [r3, #4]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801076a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	689a      	ldr	r2, [r3, #8]
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801077a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	681a      	ldr	r2, [r3, #0]
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	f042 0201 	orr.w	r2, r2, #1
 801078a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801078c:	6878      	ldr	r0, [r7, #4]
 801078e:	f001 f991 	bl	8011ab4 <UART_CheckIdleState>
 8010792:	4603      	mov	r3, r0
}
 8010794:	4618      	mov	r0, r3
 8010796:	3708      	adds	r7, #8
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}
 801079c:	0800ab81 	.word	0x0800ab81

080107a0 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80107a0:	b480      	push	{r7}
 80107a2:	b087      	sub	sp, #28
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	60f8      	str	r0, [r7, #12]
 80107a8:	460b      	mov	r3, r1
 80107aa:	607a      	str	r2, [r7, #4]
 80107ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80107ae:	2300      	movs	r3, #0
 80107b0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d109      	bne.n	80107cc <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80107be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 80107c8:	2301      	movs	r3, #1
 80107ca:	e09c      	b.n	8010906 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80107d2:	2b20      	cmp	r3, #32
 80107d4:	d16c      	bne.n	80108b0 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80107d6:	7afb      	ldrb	r3, [r7, #11]
 80107d8:	2b0c      	cmp	r3, #12
 80107da:	d85e      	bhi.n	801089a <HAL_UART_RegisterCallback+0xfa>
 80107dc:	a201      	add	r2, pc, #4	@ (adr r2, 80107e4 <HAL_UART_RegisterCallback+0x44>)
 80107de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107e2:	bf00      	nop
 80107e4:	08010819 	.word	0x08010819
 80107e8:	08010823 	.word	0x08010823
 80107ec:	0801082d 	.word	0x0801082d
 80107f0:	08010837 	.word	0x08010837
 80107f4:	08010841 	.word	0x08010841
 80107f8:	0801084b 	.word	0x0801084b
 80107fc:	08010855 	.word	0x08010855
 8010800:	0801085f 	.word	0x0801085f
 8010804:	08010869 	.word	0x08010869
 8010808:	08010873 	.word	0x08010873
 801080c:	0801087d 	.word	0x0801087d
 8010810:	08010887 	.word	0x08010887
 8010814:	08010891 	.word	0x08010891
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	687a      	ldr	r2, [r7, #4]
 801081c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8010820:	e070      	b.n	8010904 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	687a      	ldr	r2, [r7, #4]
 8010826:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 801082a:	e06b      	b.n	8010904 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	687a      	ldr	r2, [r7, #4]
 8010830:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8010834:	e066      	b.n	8010904 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	687a      	ldr	r2, [r7, #4]
 801083a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 801083e:	e061      	b.n	8010904 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	687a      	ldr	r2, [r7, #4]
 8010844:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8010848:	e05c      	b.n	8010904 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	687a      	ldr	r2, [r7, #4]
 801084e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8010852:	e057      	b.n	8010904 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	687a      	ldr	r2, [r7, #4]
 8010858:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 801085c:	e052      	b.n	8010904 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	687a      	ldr	r2, [r7, #4]
 8010862:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8010866:	e04d      	b.n	8010904 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	687a      	ldr	r2, [r7, #4]
 801086c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8010870:	e048      	b.n	8010904 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	687a      	ldr	r2, [r7, #4]
 8010876:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 801087a:	e043      	b.n	8010904 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	687a      	ldr	r2, [r7, #4]
 8010880:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8010884:	e03e      	b.n	8010904 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	687a      	ldr	r2, [r7, #4]
 801088a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 801088e:	e039      	b.n	8010904 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	687a      	ldr	r2, [r7, #4]
 8010894:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8010898:	e034      	b.n	8010904 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80108a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80108aa:	2301      	movs	r3, #1
 80108ac:	75fb      	strb	r3, [r7, #23]
        break;
 80108ae:	e029      	b.n	8010904 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d11a      	bne.n	80108f0 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80108ba:	7afb      	ldrb	r3, [r7, #11]
 80108bc:	2b0b      	cmp	r3, #11
 80108be:	d002      	beq.n	80108c6 <HAL_UART_RegisterCallback+0x126>
 80108c0:	2b0c      	cmp	r3, #12
 80108c2:	d005      	beq.n	80108d0 <HAL_UART_RegisterCallback+0x130>
 80108c4:	e009      	b.n	80108da <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	687a      	ldr	r2, [r7, #4]
 80108ca:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80108ce:	e019      	b.n	8010904 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	687a      	ldr	r2, [r7, #4]
 80108d4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80108d8:	e014      	b.n	8010904 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80108e0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80108ea:	2301      	movs	r3, #1
 80108ec:	75fb      	strb	r3, [r7, #23]
        break;
 80108ee:	e009      	b.n	8010904 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80108f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8010900:	2301      	movs	r3, #1
 8010902:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8010904:	7dfb      	ldrb	r3, [r7, #23]
}
 8010906:	4618      	mov	r0, r3
 8010908:	371c      	adds	r7, #28
 801090a:	46bd      	mov	sp, r7
 801090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010910:	4770      	bx	lr
 8010912:	bf00      	nop

08010914 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b08a      	sub	sp, #40	@ 0x28
 8010918:	af00      	add	r7, sp, #0
 801091a:	60f8      	str	r0, [r7, #12]
 801091c:	60b9      	str	r1, [r7, #8]
 801091e:	4613      	mov	r3, r2
 8010920:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010928:	2b20      	cmp	r3, #32
 801092a:	d167      	bne.n	80109fc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d002      	beq.n	8010938 <HAL_UART_Transmit_DMA+0x24>
 8010932:	88fb      	ldrh	r3, [r7, #6]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d101      	bne.n	801093c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010938:	2301      	movs	r3, #1
 801093a:	e060      	b.n	80109fe <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	68ba      	ldr	r2, [r7, #8]
 8010940:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	88fa      	ldrh	r2, [r7, #6]
 8010946:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	88fa      	ldrh	r2, [r7, #6]
 801094e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	2200      	movs	r2, #0
 8010956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	2221      	movs	r2, #33	@ 0x21
 801095e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010966:	2b00      	cmp	r3, #0
 8010968:	d028      	beq.n	80109bc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801096e:	4a26      	ldr	r2, [pc, #152]	@ (8010a08 <HAL_UART_Transmit_DMA+0xf4>)
 8010970:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010976:	4a25      	ldr	r2, [pc, #148]	@ (8010a0c <HAL_UART_Transmit_DMA+0xf8>)
 8010978:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801097e:	4a24      	ldr	r2, [pc, #144]	@ (8010a10 <HAL_UART_Transmit_DMA+0xfc>)
 8010980:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010986:	2200      	movs	r2, #0
 8010988:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010992:	4619      	mov	r1, r3
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	3328      	adds	r3, #40	@ 0x28
 801099a:	461a      	mov	r2, r3
 801099c:	88fb      	ldrh	r3, [r7, #6]
 801099e:	f7fc f919 	bl	800cbd4 <HAL_DMA_Start_IT>
 80109a2:	4603      	mov	r3, r0
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d009      	beq.n	80109bc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	2210      	movs	r2, #16
 80109ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	2220      	movs	r2, #32
 80109b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80109b8:	2301      	movs	r3, #1
 80109ba:	e020      	b.n	80109fe <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	2240      	movs	r2, #64	@ 0x40
 80109c2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	3308      	adds	r3, #8
 80109ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	e853 3f00 	ldrex	r3, [r3]
 80109d2:	613b      	str	r3, [r7, #16]
   return(result);
 80109d4:	693b      	ldr	r3, [r7, #16]
 80109d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80109da:	627b      	str	r3, [r7, #36]	@ 0x24
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	3308      	adds	r3, #8
 80109e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80109e4:	623a      	str	r2, [r7, #32]
 80109e6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109e8:	69f9      	ldr	r1, [r7, #28]
 80109ea:	6a3a      	ldr	r2, [r7, #32]
 80109ec:	e841 2300 	strex	r3, r2, [r1]
 80109f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80109f2:	69bb      	ldr	r3, [r7, #24]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d1e5      	bne.n	80109c4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80109f8:	2300      	movs	r3, #0
 80109fa:	e000      	b.n	80109fe <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80109fc:	2302      	movs	r3, #2
  }
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3728      	adds	r7, #40	@ 0x28
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}
 8010a06:	bf00      	nop
 8010a08:	08011f7f 	.word	0x08011f7f
 8010a0c:	0801201d 	.word	0x0801201d
 8010a10:	080121b7 	.word	0x080121b7

08010a14 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b08a      	sub	sp, #40	@ 0x28
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	60f8      	str	r0, [r7, #12]
 8010a1c:	60b9      	str	r1, [r7, #8]
 8010a1e:	4613      	mov	r3, r2
 8010a20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010a28:	2b20      	cmp	r3, #32
 8010a2a:	d137      	bne.n	8010a9c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d002      	beq.n	8010a38 <HAL_UART_Receive_DMA+0x24>
 8010a32:	88fb      	ldrh	r3, [r7, #6]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d101      	bne.n	8010a3c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8010a38:	2301      	movs	r3, #1
 8010a3a:	e030      	b.n	8010a9e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	2200      	movs	r2, #0
 8010a40:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	4a18      	ldr	r2, [pc, #96]	@ (8010aa8 <HAL_UART_Receive_DMA+0x94>)
 8010a48:	4293      	cmp	r3, r2
 8010a4a:	d01f      	beq.n	8010a8c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	685b      	ldr	r3, [r3, #4]
 8010a52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d018      	beq.n	8010a8c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a60:	697b      	ldr	r3, [r7, #20]
 8010a62:	e853 3f00 	ldrex	r3, [r3]
 8010a66:	613b      	str	r3, [r7, #16]
   return(result);
 8010a68:	693b      	ldr	r3, [r7, #16]
 8010a6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	461a      	mov	r2, r3
 8010a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a78:	623b      	str	r3, [r7, #32]
 8010a7a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a7c:	69f9      	ldr	r1, [r7, #28]
 8010a7e:	6a3a      	ldr	r2, [r7, #32]
 8010a80:	e841 2300 	strex	r3, r2, [r1]
 8010a84:	61bb      	str	r3, [r7, #24]
   return(result);
 8010a86:	69bb      	ldr	r3, [r7, #24]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d1e6      	bne.n	8010a5a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010a8c:	88fb      	ldrh	r3, [r7, #6]
 8010a8e:	461a      	mov	r2, r3
 8010a90:	68b9      	ldr	r1, [r7, #8]
 8010a92:	68f8      	ldr	r0, [r7, #12]
 8010a94:	f001 f926 	bl	8011ce4 <UART_Start_Receive_DMA>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	e000      	b.n	8010a9e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010a9c:	2302      	movs	r3, #2
  }
}
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	3728      	adds	r7, #40	@ 0x28
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}
 8010aa6:	bf00      	nop
 8010aa8:	40008000 	.word	0x40008000

08010aac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b0ba      	sub	sp, #232	@ 0xe8
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	69db      	ldr	r3, [r3, #28]
 8010aba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	689b      	ldr	r3, [r3, #8]
 8010ace:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010ad2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8010ad6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8010ada:	4013      	ands	r3, r2
 8010adc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010ae0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d11b      	bne.n	8010b20 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010aec:	f003 0320 	and.w	r3, r3, #32
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d015      	beq.n	8010b20 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010af8:	f003 0320 	and.w	r3, r3, #32
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d105      	bne.n	8010b0c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d009      	beq.n	8010b20 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	f000 8312 	beq.w	801113a <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	4798      	blx	r3
      }
      return;
 8010b1e:	e30c      	b.n	801113a <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010b20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	f000 8129 	beq.w	8010d7c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010b2a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010b2e:	4b90      	ldr	r3, [pc, #576]	@ (8010d70 <HAL_UART_IRQHandler+0x2c4>)
 8010b30:	4013      	ands	r3, r2
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d106      	bne.n	8010b44 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010b36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8010b3a:	4b8e      	ldr	r3, [pc, #568]	@ (8010d74 <HAL_UART_IRQHandler+0x2c8>)
 8010b3c:	4013      	ands	r3, r2
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	f000 811c 	beq.w	8010d7c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b48:	f003 0301 	and.w	r3, r3, #1
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d011      	beq.n	8010b74 <HAL_UART_IRQHandler+0xc8>
 8010b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d00b      	beq.n	8010b74 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	2201      	movs	r2, #1
 8010b62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b6a:	f043 0201 	orr.w	r2, r3, #1
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b78:	f003 0302 	and.w	r3, r3, #2
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d011      	beq.n	8010ba4 <HAL_UART_IRQHandler+0xf8>
 8010b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010b84:	f003 0301 	and.w	r3, r3, #1
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d00b      	beq.n	8010ba4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	2202      	movs	r2, #2
 8010b92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b9a:	f043 0204 	orr.w	r2, r3, #4
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ba8:	f003 0304 	and.w	r3, r3, #4
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d011      	beq.n	8010bd4 <HAL_UART_IRQHandler+0x128>
 8010bb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010bb4:	f003 0301 	and.w	r3, r3, #1
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d00b      	beq.n	8010bd4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	2204      	movs	r2, #4
 8010bc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010bca:	f043 0202 	orr.w	r2, r3, #2
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010bd8:	f003 0308 	and.w	r3, r3, #8
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d017      	beq.n	8010c10 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010be4:	f003 0320 	and.w	r3, r3, #32
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d105      	bne.n	8010bf8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010bec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010bf0:	4b5f      	ldr	r3, [pc, #380]	@ (8010d70 <HAL_UART_IRQHandler+0x2c4>)
 8010bf2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d00b      	beq.n	8010c10 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	2208      	movs	r2, #8
 8010bfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010c06:	f043 0208 	orr.w	r2, r3, #8
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010c14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d012      	beq.n	8010c42 <HAL_UART_IRQHandler+0x196>
 8010c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010c20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d00c      	beq.n	8010c42 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010c30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010c38:	f043 0220 	orr.w	r2, r3, #32
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	f000 8278 	beq.w	801113e <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010c52:	f003 0320 	and.w	r3, r3, #32
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d013      	beq.n	8010c82 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010c5e:	f003 0320 	and.w	r3, r3, #32
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d105      	bne.n	8010c72 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d007      	beq.n	8010c82 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d003      	beq.n	8010c82 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010c7e:	6878      	ldr	r0, [r7, #4]
 8010c80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010c88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	689b      	ldr	r3, [r3, #8]
 8010c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c96:	2b40      	cmp	r3, #64	@ 0x40
 8010c98:	d005      	beq.n	8010ca6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010c9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010c9e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d058      	beq.n	8010d58 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010ca6:	6878      	ldr	r0, [r7, #4]
 8010ca8:	f001 f903 	bl	8011eb2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	689b      	ldr	r3, [r3, #8]
 8010cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010cb6:	2b40      	cmp	r3, #64	@ 0x40
 8010cb8:	d148      	bne.n	8010d4c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	3308      	adds	r3, #8
 8010cc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010cc8:	e853 3f00 	ldrex	r3, [r3]
 8010ccc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010cd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010cd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010cd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	3308      	adds	r3, #8
 8010ce2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010ce6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010cea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010cf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010cf6:	e841 2300 	strex	r3, r2, [r1]
 8010cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010cfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d1d9      	bne.n	8010cba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d017      	beq.n	8010d40 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d16:	4a18      	ldr	r2, [pc, #96]	@ (8010d78 <HAL_UART_IRQHandler+0x2cc>)
 8010d18:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7fc f82b 	bl	800cd7c <HAL_DMA_Abort_IT>
 8010d26:	4603      	mov	r3, r0
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d01f      	beq.n	8010d6c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d34:	687a      	ldr	r2, [r7, #4]
 8010d36:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8010d3a:	4610      	mov	r0, r2
 8010d3c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d3e:	e015      	b.n	8010d6c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d4a:	e00f      	b.n	8010d6c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010d52:	6878      	ldr	r0, [r7, #4]
 8010d54:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d56:	e009      	b.n	8010d6c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	2200      	movs	r2, #0
 8010d66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8010d6a:	e1e8      	b.n	801113e <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d6c:	bf00      	nop
    return;
 8010d6e:	e1e6      	b.n	801113e <HAL_UART_IRQHandler+0x692>
 8010d70:	10000001 	.word	0x10000001
 8010d74:	04000120 	.word	0x04000120
 8010d78:	0801223b 	.word	0x0801223b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d80:	2b01      	cmp	r3, #1
 8010d82:	f040 8176 	bne.w	8011072 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010d8a:	f003 0310 	and.w	r3, r3, #16
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	f000 816f 	beq.w	8011072 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010d98:	f003 0310 	and.w	r3, r3, #16
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	f000 8168 	beq.w	8011072 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	2210      	movs	r2, #16
 8010da8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	689b      	ldr	r3, [r3, #8]
 8010db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010db4:	2b40      	cmp	r3, #64	@ 0x40
 8010db6:	f040 80dc 	bne.w	8010f72 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	685b      	ldr	r3, [r3, #4]
 8010dc4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010dc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	f000 80b1 	beq.w	8010f34 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010dd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	f080 80a9 	bcs.w	8010f34 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010de8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	f003 0320 	and.w	r3, r3, #32
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	f040 8087 	bne.w	8010f0e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010e0c:	e853 3f00 	ldrex	r3, [r3]
 8010e10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010e14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010e18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010e1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	461a      	mov	r2, r3
 8010e26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010e2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010e2e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010e36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010e3a:	e841 2300 	strex	r3, r2, [r1]
 8010e3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010e42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d1da      	bne.n	8010e00 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	3308      	adds	r3, #8
 8010e50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010e54:	e853 3f00 	ldrex	r3, [r3]
 8010e58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010e5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010e5c:	f023 0301 	bic.w	r3, r3, #1
 8010e60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	3308      	adds	r3, #8
 8010e6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010e6e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010e72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010e76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010e7a:	e841 2300 	strex	r3, r2, [r1]
 8010e7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010e80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d1e1      	bne.n	8010e4a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	3308      	adds	r3, #8
 8010e8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010e90:	e853 3f00 	ldrex	r3, [r3]
 8010e94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010e96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010e98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	3308      	adds	r3, #8
 8010ea6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010eaa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010eac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010eae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010eb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010eb2:	e841 2300 	strex	r3, r2, [r1]
 8010eb6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010eb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d1e3      	bne.n	8010e86 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2220      	movs	r2, #32
 8010ec2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	2200      	movs	r2, #0
 8010eca:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ed2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ed4:	e853 3f00 	ldrex	r3, [r3]
 8010ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010eda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010edc:	f023 0310 	bic.w	r3, r3, #16
 8010ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	461a      	mov	r2, r3
 8010eea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010eee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010ef0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ef2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010ef4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010ef6:	e841 2300 	strex	r3, r2, [r1]
 8010efa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010efc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d1e4      	bne.n	8010ecc <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f7fb fede 	bl	800ccca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	2202      	movs	r2, #2
 8010f12:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010f1a:	687a      	ldr	r2, [r7, #4]
 8010f1c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8010f20:	687a      	ldr	r2, [r7, #4]
 8010f22:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8010f26:	b292      	uxth	r2, r2
 8010f28:	1a8a      	subs	r2, r1, r2
 8010f2a:	b292      	uxth	r2, r2
 8010f2c:	4611      	mov	r1, r2
 8010f2e:	6878      	ldr	r0, [r7, #4]
 8010f30:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8010f32:	e106      	b.n	8011142 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010f3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010f3e:	429a      	cmp	r2, r3
 8010f40:	f040 80ff 	bne.w	8011142 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	f003 0320 	and.w	r3, r3, #32
 8010f52:	2b20      	cmp	r3, #32
 8010f54:	f040 80f5 	bne.w	8011142 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2202      	movs	r2, #2
 8010f5c:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010f64:	687a      	ldr	r2, [r7, #4]
 8010f66:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8010f6a:	4611      	mov	r1, r2
 8010f6c:	6878      	ldr	r0, [r7, #4]
 8010f6e:	4798      	blx	r3
      return;
 8010f70:	e0e7      	b.n	8011142 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010f7e:	b29b      	uxth	r3, r3
 8010f80:	1ad3      	subs	r3, r2, r3
 8010f82:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010f8c:	b29b      	uxth	r3, r3
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	f000 80d9 	beq.w	8011146 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8010f94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	f000 80d4 	beq.w	8011146 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fa6:	e853 3f00 	ldrex	r3, [r3]
 8010faa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010fb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	461a      	mov	r2, r3
 8010fbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010fc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8010fc2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010fc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010fc8:	e841 2300 	strex	r3, r2, [r1]
 8010fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d1e4      	bne.n	8010f9e <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	3308      	adds	r3, #8
 8010fda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fde:	e853 3f00 	ldrex	r3, [r3]
 8010fe2:	623b      	str	r3, [r7, #32]
   return(result);
 8010fe4:	6a3b      	ldr	r3, [r7, #32]
 8010fe6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010fea:	f023 0301 	bic.w	r3, r3, #1
 8010fee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	3308      	adds	r3, #8
 8010ff8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010ffc:	633a      	str	r2, [r7, #48]	@ 0x30
 8010ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011000:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011002:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011004:	e841 2300 	strex	r3, r2, [r1]
 8011008:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801100a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801100c:	2b00      	cmp	r3, #0
 801100e:	d1e1      	bne.n	8010fd4 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	2220      	movs	r2, #32
 8011014:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2200      	movs	r2, #0
 801101c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	2200      	movs	r2, #0
 8011022:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801102a:	693b      	ldr	r3, [r7, #16]
 801102c:	e853 3f00 	ldrex	r3, [r3]
 8011030:	60fb      	str	r3, [r7, #12]
   return(result);
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	f023 0310 	bic.w	r3, r3, #16
 8011038:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	461a      	mov	r2, r3
 8011042:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011046:	61fb      	str	r3, [r7, #28]
 8011048:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801104a:	69b9      	ldr	r1, [r7, #24]
 801104c:	69fa      	ldr	r2, [r7, #28]
 801104e:	e841 2300 	strex	r3, r2, [r1]
 8011052:	617b      	str	r3, [r7, #20]
   return(result);
 8011054:	697b      	ldr	r3, [r7, #20]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d1e4      	bne.n	8011024 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	2202      	movs	r2, #2
 801105e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8011066:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 801106a:	4611      	mov	r1, r2
 801106c:	6878      	ldr	r0, [r7, #4]
 801106e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011070:	e069      	b.n	8011146 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011076:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801107a:	2b00      	cmp	r3, #0
 801107c:	d010      	beq.n	80110a0 <HAL_UART_IRQHandler+0x5f4>
 801107e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011086:	2b00      	cmp	r3, #0
 8011088:	d00a      	beq.n	80110a0 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8011092:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801109a:	6878      	ldr	r0, [r7, #4]
 801109c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801109e:	e055      	b.n	801114c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80110a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d014      	beq.n	80110d6 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80110ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80110b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d105      	bne.n	80110c4 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80110b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80110bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d008      	beq.n	80110d6 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d03e      	beq.n	801114a <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80110d0:	6878      	ldr	r0, [r7, #4]
 80110d2:	4798      	blx	r3
    }
    return;
 80110d4:	e039      	b.n	801114a <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80110d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d009      	beq.n	80110f6 <HAL_UART_IRQHandler+0x64a>
 80110e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80110e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d003      	beq.n	80110f6 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f001 f8b7 	bl	8012262 <UART_EndTransmit_IT>
    return;
 80110f4:	e02a      	b.n	801114c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80110f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d00b      	beq.n	801111a <HAL_UART_IRQHandler+0x66e>
 8011102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011106:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801110a:	2b00      	cmp	r3, #0
 801110c:	d005      	beq.n	801111a <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8011114:	6878      	ldr	r0, [r7, #4]
 8011116:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011118:	e018      	b.n	801114c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801111a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801111e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011122:	2b00      	cmp	r3, #0
 8011124:	d012      	beq.n	801114c <HAL_UART_IRQHandler+0x6a0>
 8011126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801112a:	2b00      	cmp	r3, #0
 801112c:	da0e      	bge.n	801114c <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8011134:	6878      	ldr	r0, [r7, #4]
 8011136:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011138:	e008      	b.n	801114c <HAL_UART_IRQHandler+0x6a0>
      return;
 801113a:	bf00      	nop
 801113c:	e006      	b.n	801114c <HAL_UART_IRQHandler+0x6a0>
    return;
 801113e:	bf00      	nop
 8011140:	e004      	b.n	801114c <HAL_UART_IRQHandler+0x6a0>
      return;
 8011142:	bf00      	nop
 8011144:	e002      	b.n	801114c <HAL_UART_IRQHandler+0x6a0>
      return;
 8011146:	bf00      	nop
 8011148:	e000      	b.n	801114c <HAL_UART_IRQHandler+0x6a0>
    return;
 801114a:	bf00      	nop
  }
}
 801114c:	37e8      	adds	r7, #232	@ 0xe8
 801114e:	46bd      	mov	sp, r7
 8011150:	bd80      	pop	{r7, pc}
 8011152:	bf00      	nop

08011154 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011154:	b480      	push	{r7}
 8011156:	b083      	sub	sp, #12
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801115c:	bf00      	nop
 801115e:	370c      	adds	r7, #12
 8011160:	46bd      	mov	sp, r7
 8011162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011166:	4770      	bx	lr

08011168 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011168:	b480      	push	{r7}
 801116a:	b083      	sub	sp, #12
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8011170:	bf00      	nop
 8011172:	370c      	adds	r7, #12
 8011174:	46bd      	mov	sp, r7
 8011176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117a:	4770      	bx	lr

0801117c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801117c:	b480      	push	{r7}
 801117e:	b083      	sub	sp, #12
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8011184:	bf00      	nop
 8011186:	370c      	adds	r7, #12
 8011188:	46bd      	mov	sp, r7
 801118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118e:	4770      	bx	lr

08011190 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011190:	b480      	push	{r7}
 8011192:	b083      	sub	sp, #12
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8011198:	bf00      	nop
 801119a:	370c      	adds	r7, #12
 801119c:	46bd      	mov	sp, r7
 801119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a2:	4770      	bx	lr

080111a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80111a4:	b480      	push	{r7}
 80111a6:	b083      	sub	sp, #12
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80111ac:	bf00      	nop
 80111ae:	370c      	adds	r7, #12
 80111b0:	46bd      	mov	sp, r7
 80111b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b6:	4770      	bx	lr

080111b8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80111b8:	b480      	push	{r7}
 80111ba:	b083      	sub	sp, #12
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80111c0:	bf00      	nop
 80111c2:	370c      	adds	r7, #12
 80111c4:	46bd      	mov	sp, r7
 80111c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ca:	4770      	bx	lr

080111cc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80111cc:	b480      	push	{r7}
 80111ce:	b083      	sub	sp, #12
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80111d4:	bf00      	nop
 80111d6:	370c      	adds	r7, #12
 80111d8:	46bd      	mov	sp, r7
 80111da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111de:	4770      	bx	lr

080111e0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80111e0:	b480      	push	{r7}
 80111e2:	b083      	sub	sp, #12
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80111e8:	bf00      	nop
 80111ea:	370c      	adds	r7, #12
 80111ec:	46bd      	mov	sp, r7
 80111ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f2:	4770      	bx	lr

080111f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80111f4:	b480      	push	{r7}
 80111f6:	b083      	sub	sp, #12
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
 80111fc:	460b      	mov	r3, r1
 80111fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011200:	bf00      	nop
 8011202:	370c      	adds	r7, #12
 8011204:	46bd      	mov	sp, r7
 8011206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120a:	4770      	bx	lr

0801120c <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 801120c:	b480      	push	{r7}
 801120e:	b083      	sub	sp, #12
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
 8011214:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	4a09      	ldr	r2, [pc, #36]	@ (8011240 <HAL_UART_ReceiverTimeout_Config+0x34>)
 801121c:	4293      	cmp	r3, r2
 801121e:	d009      	beq.n	8011234 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	695b      	ldr	r3, [r3, #20]
 8011226:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	683a      	ldr	r2, [r7, #0]
 8011230:	430a      	orrs	r2, r1
 8011232:	615a      	str	r2, [r3, #20]
  }
}
 8011234:	bf00      	nop
 8011236:	370c      	adds	r7, #12
 8011238:	46bd      	mov	sp, r7
 801123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123e:	4770      	bx	lr
 8011240:	40008000 	.word	0x40008000

08011244 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8011244:	b480      	push	{r7}
 8011246:	b083      	sub	sp, #12
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	4a18      	ldr	r2, [pc, #96]	@ (80112b4 <HAL_UART_EnableReceiverTimeout+0x70>)
 8011252:	4293      	cmp	r3, r2
 8011254:	d027      	beq.n	80112a6 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801125c:	2b20      	cmp	r3, #32
 801125e:	d120      	bne.n	80112a2 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011266:	2b01      	cmp	r3, #1
 8011268:	d101      	bne.n	801126e <HAL_UART_EnableReceiverTimeout+0x2a>
 801126a:	2302      	movs	r3, #2
 801126c:	e01c      	b.n	80112a8 <HAL_UART_EnableReceiverTimeout+0x64>
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	2201      	movs	r2, #1
 8011272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	2224      	movs	r2, #36	@ 0x24
 801127a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	685a      	ldr	r2, [r3, #4]
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 801128c:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	2220      	movs	r2, #32
 8011292:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	2200      	movs	r2, #0
 801129a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 801129e:	2300      	movs	r3, #0
 80112a0:	e002      	b.n	80112a8 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 80112a2:	2302      	movs	r3, #2
 80112a4:	e000      	b.n	80112a8 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 80112a6:	2301      	movs	r3, #1
  }
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	370c      	adds	r7, #12
 80112ac:	46bd      	mov	sp, r7
 80112ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b2:	4770      	bx	lr
 80112b4:	40008000 	.word	0x40008000

080112b8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80112b8:	b480      	push	{r7}
 80112ba:	b083      	sub	sp, #12
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 80112c6:	4618      	mov	r0, r3
 80112c8:	370c      	adds	r7, #12
 80112ca:	46bd      	mov	sp, r7
 80112cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d0:	4770      	bx	lr
	...

080112d4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80112d4:	b480      	push	{r7}
 80112d6:	b083      	sub	sp, #12
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	4a1a      	ldr	r2, [pc, #104]	@ (8011348 <UART_InitCallbacksToDefault+0x74>)
 80112e0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	4a19      	ldr	r2, [pc, #100]	@ (801134c <UART_InitCallbacksToDefault+0x78>)
 80112e8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	4a18      	ldr	r2, [pc, #96]	@ (8011350 <UART_InitCallbacksToDefault+0x7c>)
 80112f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	4a17      	ldr	r2, [pc, #92]	@ (8011354 <UART_InitCallbacksToDefault+0x80>)
 80112f8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	4a16      	ldr	r2, [pc, #88]	@ (8011358 <UART_InitCallbacksToDefault+0x84>)
 8011300:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	4a15      	ldr	r2, [pc, #84]	@ (801135c <UART_InitCallbacksToDefault+0x88>)
 8011308:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	4a14      	ldr	r2, [pc, #80]	@ (8011360 <UART_InitCallbacksToDefault+0x8c>)
 8011310:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	4a13      	ldr	r2, [pc, #76]	@ (8011364 <UART_InitCallbacksToDefault+0x90>)
 8011318:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	4a12      	ldr	r2, [pc, #72]	@ (8011368 <UART_InitCallbacksToDefault+0x94>)
 8011320:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	4a11      	ldr	r2, [pc, #68]	@ (801136c <UART_InitCallbacksToDefault+0x98>)
 8011328:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	4a10      	ldr	r2, [pc, #64]	@ (8011370 <UART_InitCallbacksToDefault+0x9c>)
 8011330:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	4a0f      	ldr	r2, [pc, #60]	@ (8011374 <UART_InitCallbacksToDefault+0xa0>)
 8011338:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 801133c:	bf00      	nop
 801133e:	370c      	adds	r7, #12
 8011340:	46bd      	mov	sp, r7
 8011342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011346:	4770      	bx	lr
 8011348:	08011169 	.word	0x08011169
 801134c:	08011155 	.word	0x08011155
 8011350:	08011191 	.word	0x08011191
 8011354:	0801117d 	.word	0x0801117d
 8011358:	080111a5 	.word	0x080111a5
 801135c:	080111b9 	.word	0x080111b9
 8011360:	080111cd 	.word	0x080111cd
 8011364:	080111e1 	.word	0x080111e1
 8011368:	080122bd 	.word	0x080122bd
 801136c:	080122d1 	.word	0x080122d1
 8011370:	080122e5 	.word	0x080122e5
 8011374:	080111f5 	.word	0x080111f5

08011378 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801137c:	b08c      	sub	sp, #48	@ 0x30
 801137e:	af00      	add	r7, sp, #0
 8011380:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011382:	2300      	movs	r3, #0
 8011384:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011388:	697b      	ldr	r3, [r7, #20]
 801138a:	689a      	ldr	r2, [r3, #8]
 801138c:	697b      	ldr	r3, [r7, #20]
 801138e:	691b      	ldr	r3, [r3, #16]
 8011390:	431a      	orrs	r2, r3
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	695b      	ldr	r3, [r3, #20]
 8011396:	431a      	orrs	r2, r3
 8011398:	697b      	ldr	r3, [r7, #20]
 801139a:	69db      	ldr	r3, [r3, #28]
 801139c:	4313      	orrs	r3, r2
 801139e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80113a0:	697b      	ldr	r3, [r7, #20]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	681a      	ldr	r2, [r3, #0]
 80113a6:	4baa      	ldr	r3, [pc, #680]	@ (8011650 <UART_SetConfig+0x2d8>)
 80113a8:	4013      	ands	r3, r2
 80113aa:	697a      	ldr	r2, [r7, #20]
 80113ac:	6812      	ldr	r2, [r2, #0]
 80113ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80113b0:	430b      	orrs	r3, r1
 80113b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80113b4:	697b      	ldr	r3, [r7, #20]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	685b      	ldr	r3, [r3, #4]
 80113ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	68da      	ldr	r2, [r3, #12]
 80113c2:	697b      	ldr	r3, [r7, #20]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	430a      	orrs	r2, r1
 80113c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	699b      	ldr	r3, [r3, #24]
 80113ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80113d0:	697b      	ldr	r3, [r7, #20]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	4a9f      	ldr	r2, [pc, #636]	@ (8011654 <UART_SetConfig+0x2dc>)
 80113d6:	4293      	cmp	r3, r2
 80113d8:	d004      	beq.n	80113e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80113da:	697b      	ldr	r3, [r7, #20]
 80113dc:	6a1b      	ldr	r3, [r3, #32]
 80113de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80113e0:	4313      	orrs	r3, r2
 80113e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	689b      	ldr	r3, [r3, #8]
 80113ea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80113ee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80113f2:	697a      	ldr	r2, [r7, #20]
 80113f4:	6812      	ldr	r2, [r2, #0]
 80113f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80113f8:	430b      	orrs	r3, r1
 80113fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80113fc:	697b      	ldr	r3, [r7, #20]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011402:	f023 010f 	bic.w	r1, r3, #15
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	430a      	orrs	r2, r1
 8011410:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011412:	697b      	ldr	r3, [r7, #20]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	4a90      	ldr	r2, [pc, #576]	@ (8011658 <UART_SetConfig+0x2e0>)
 8011418:	4293      	cmp	r3, r2
 801141a:	d125      	bne.n	8011468 <UART_SetConfig+0xf0>
 801141c:	4b8f      	ldr	r3, [pc, #572]	@ (801165c <UART_SetConfig+0x2e4>)
 801141e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011422:	f003 0303 	and.w	r3, r3, #3
 8011426:	2b03      	cmp	r3, #3
 8011428:	d81a      	bhi.n	8011460 <UART_SetConfig+0xe8>
 801142a:	a201      	add	r2, pc, #4	@ (adr r2, 8011430 <UART_SetConfig+0xb8>)
 801142c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011430:	08011441 	.word	0x08011441
 8011434:	08011451 	.word	0x08011451
 8011438:	08011449 	.word	0x08011449
 801143c:	08011459 	.word	0x08011459
 8011440:	2301      	movs	r3, #1
 8011442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011446:	e116      	b.n	8011676 <UART_SetConfig+0x2fe>
 8011448:	2302      	movs	r3, #2
 801144a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801144e:	e112      	b.n	8011676 <UART_SetConfig+0x2fe>
 8011450:	2304      	movs	r3, #4
 8011452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011456:	e10e      	b.n	8011676 <UART_SetConfig+0x2fe>
 8011458:	2308      	movs	r3, #8
 801145a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801145e:	e10a      	b.n	8011676 <UART_SetConfig+0x2fe>
 8011460:	2310      	movs	r3, #16
 8011462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011466:	e106      	b.n	8011676 <UART_SetConfig+0x2fe>
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	4a7c      	ldr	r2, [pc, #496]	@ (8011660 <UART_SetConfig+0x2e8>)
 801146e:	4293      	cmp	r3, r2
 8011470:	d138      	bne.n	80114e4 <UART_SetConfig+0x16c>
 8011472:	4b7a      	ldr	r3, [pc, #488]	@ (801165c <UART_SetConfig+0x2e4>)
 8011474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011478:	f003 030c 	and.w	r3, r3, #12
 801147c:	2b0c      	cmp	r3, #12
 801147e:	d82d      	bhi.n	80114dc <UART_SetConfig+0x164>
 8011480:	a201      	add	r2, pc, #4	@ (adr r2, 8011488 <UART_SetConfig+0x110>)
 8011482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011486:	bf00      	nop
 8011488:	080114bd 	.word	0x080114bd
 801148c:	080114dd 	.word	0x080114dd
 8011490:	080114dd 	.word	0x080114dd
 8011494:	080114dd 	.word	0x080114dd
 8011498:	080114cd 	.word	0x080114cd
 801149c:	080114dd 	.word	0x080114dd
 80114a0:	080114dd 	.word	0x080114dd
 80114a4:	080114dd 	.word	0x080114dd
 80114a8:	080114c5 	.word	0x080114c5
 80114ac:	080114dd 	.word	0x080114dd
 80114b0:	080114dd 	.word	0x080114dd
 80114b4:	080114dd 	.word	0x080114dd
 80114b8:	080114d5 	.word	0x080114d5
 80114bc:	2300      	movs	r3, #0
 80114be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80114c2:	e0d8      	b.n	8011676 <UART_SetConfig+0x2fe>
 80114c4:	2302      	movs	r3, #2
 80114c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80114ca:	e0d4      	b.n	8011676 <UART_SetConfig+0x2fe>
 80114cc:	2304      	movs	r3, #4
 80114ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80114d2:	e0d0      	b.n	8011676 <UART_SetConfig+0x2fe>
 80114d4:	2308      	movs	r3, #8
 80114d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80114da:	e0cc      	b.n	8011676 <UART_SetConfig+0x2fe>
 80114dc:	2310      	movs	r3, #16
 80114de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80114e2:	e0c8      	b.n	8011676 <UART_SetConfig+0x2fe>
 80114e4:	697b      	ldr	r3, [r7, #20]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	4a5e      	ldr	r2, [pc, #376]	@ (8011664 <UART_SetConfig+0x2ec>)
 80114ea:	4293      	cmp	r3, r2
 80114ec:	d125      	bne.n	801153a <UART_SetConfig+0x1c2>
 80114ee:	4b5b      	ldr	r3, [pc, #364]	@ (801165c <UART_SetConfig+0x2e4>)
 80114f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80114f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80114f8:	2b30      	cmp	r3, #48	@ 0x30
 80114fa:	d016      	beq.n	801152a <UART_SetConfig+0x1b2>
 80114fc:	2b30      	cmp	r3, #48	@ 0x30
 80114fe:	d818      	bhi.n	8011532 <UART_SetConfig+0x1ba>
 8011500:	2b20      	cmp	r3, #32
 8011502:	d00a      	beq.n	801151a <UART_SetConfig+0x1a2>
 8011504:	2b20      	cmp	r3, #32
 8011506:	d814      	bhi.n	8011532 <UART_SetConfig+0x1ba>
 8011508:	2b00      	cmp	r3, #0
 801150a:	d002      	beq.n	8011512 <UART_SetConfig+0x19a>
 801150c:	2b10      	cmp	r3, #16
 801150e:	d008      	beq.n	8011522 <UART_SetConfig+0x1aa>
 8011510:	e00f      	b.n	8011532 <UART_SetConfig+0x1ba>
 8011512:	2300      	movs	r3, #0
 8011514:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011518:	e0ad      	b.n	8011676 <UART_SetConfig+0x2fe>
 801151a:	2302      	movs	r3, #2
 801151c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011520:	e0a9      	b.n	8011676 <UART_SetConfig+0x2fe>
 8011522:	2304      	movs	r3, #4
 8011524:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011528:	e0a5      	b.n	8011676 <UART_SetConfig+0x2fe>
 801152a:	2308      	movs	r3, #8
 801152c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011530:	e0a1      	b.n	8011676 <UART_SetConfig+0x2fe>
 8011532:	2310      	movs	r3, #16
 8011534:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011538:	e09d      	b.n	8011676 <UART_SetConfig+0x2fe>
 801153a:	697b      	ldr	r3, [r7, #20]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	4a4a      	ldr	r2, [pc, #296]	@ (8011668 <UART_SetConfig+0x2f0>)
 8011540:	4293      	cmp	r3, r2
 8011542:	d125      	bne.n	8011590 <UART_SetConfig+0x218>
 8011544:	4b45      	ldr	r3, [pc, #276]	@ (801165c <UART_SetConfig+0x2e4>)
 8011546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801154a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801154e:	2bc0      	cmp	r3, #192	@ 0xc0
 8011550:	d016      	beq.n	8011580 <UART_SetConfig+0x208>
 8011552:	2bc0      	cmp	r3, #192	@ 0xc0
 8011554:	d818      	bhi.n	8011588 <UART_SetConfig+0x210>
 8011556:	2b80      	cmp	r3, #128	@ 0x80
 8011558:	d00a      	beq.n	8011570 <UART_SetConfig+0x1f8>
 801155a:	2b80      	cmp	r3, #128	@ 0x80
 801155c:	d814      	bhi.n	8011588 <UART_SetConfig+0x210>
 801155e:	2b00      	cmp	r3, #0
 8011560:	d002      	beq.n	8011568 <UART_SetConfig+0x1f0>
 8011562:	2b40      	cmp	r3, #64	@ 0x40
 8011564:	d008      	beq.n	8011578 <UART_SetConfig+0x200>
 8011566:	e00f      	b.n	8011588 <UART_SetConfig+0x210>
 8011568:	2300      	movs	r3, #0
 801156a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801156e:	e082      	b.n	8011676 <UART_SetConfig+0x2fe>
 8011570:	2302      	movs	r3, #2
 8011572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011576:	e07e      	b.n	8011676 <UART_SetConfig+0x2fe>
 8011578:	2304      	movs	r3, #4
 801157a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801157e:	e07a      	b.n	8011676 <UART_SetConfig+0x2fe>
 8011580:	2308      	movs	r3, #8
 8011582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011586:	e076      	b.n	8011676 <UART_SetConfig+0x2fe>
 8011588:	2310      	movs	r3, #16
 801158a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801158e:	e072      	b.n	8011676 <UART_SetConfig+0x2fe>
 8011590:	697b      	ldr	r3, [r7, #20]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	4a35      	ldr	r2, [pc, #212]	@ (801166c <UART_SetConfig+0x2f4>)
 8011596:	4293      	cmp	r3, r2
 8011598:	d12a      	bne.n	80115f0 <UART_SetConfig+0x278>
 801159a:	4b30      	ldr	r3, [pc, #192]	@ (801165c <UART_SetConfig+0x2e4>)
 801159c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80115a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80115a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80115a8:	d01a      	beq.n	80115e0 <UART_SetConfig+0x268>
 80115aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80115ae:	d81b      	bhi.n	80115e8 <UART_SetConfig+0x270>
 80115b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80115b4:	d00c      	beq.n	80115d0 <UART_SetConfig+0x258>
 80115b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80115ba:	d815      	bhi.n	80115e8 <UART_SetConfig+0x270>
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d003      	beq.n	80115c8 <UART_SetConfig+0x250>
 80115c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80115c4:	d008      	beq.n	80115d8 <UART_SetConfig+0x260>
 80115c6:	e00f      	b.n	80115e8 <UART_SetConfig+0x270>
 80115c8:	2300      	movs	r3, #0
 80115ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80115ce:	e052      	b.n	8011676 <UART_SetConfig+0x2fe>
 80115d0:	2302      	movs	r3, #2
 80115d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80115d6:	e04e      	b.n	8011676 <UART_SetConfig+0x2fe>
 80115d8:	2304      	movs	r3, #4
 80115da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80115de:	e04a      	b.n	8011676 <UART_SetConfig+0x2fe>
 80115e0:	2308      	movs	r3, #8
 80115e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80115e6:	e046      	b.n	8011676 <UART_SetConfig+0x2fe>
 80115e8:	2310      	movs	r3, #16
 80115ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80115ee:	e042      	b.n	8011676 <UART_SetConfig+0x2fe>
 80115f0:	697b      	ldr	r3, [r7, #20]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	4a17      	ldr	r2, [pc, #92]	@ (8011654 <UART_SetConfig+0x2dc>)
 80115f6:	4293      	cmp	r3, r2
 80115f8:	d13a      	bne.n	8011670 <UART_SetConfig+0x2f8>
 80115fa:	4b18      	ldr	r3, [pc, #96]	@ (801165c <UART_SetConfig+0x2e4>)
 80115fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011600:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8011604:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011608:	d01a      	beq.n	8011640 <UART_SetConfig+0x2c8>
 801160a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801160e:	d81b      	bhi.n	8011648 <UART_SetConfig+0x2d0>
 8011610:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011614:	d00c      	beq.n	8011630 <UART_SetConfig+0x2b8>
 8011616:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801161a:	d815      	bhi.n	8011648 <UART_SetConfig+0x2d0>
 801161c:	2b00      	cmp	r3, #0
 801161e:	d003      	beq.n	8011628 <UART_SetConfig+0x2b0>
 8011620:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011624:	d008      	beq.n	8011638 <UART_SetConfig+0x2c0>
 8011626:	e00f      	b.n	8011648 <UART_SetConfig+0x2d0>
 8011628:	2300      	movs	r3, #0
 801162a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801162e:	e022      	b.n	8011676 <UART_SetConfig+0x2fe>
 8011630:	2302      	movs	r3, #2
 8011632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011636:	e01e      	b.n	8011676 <UART_SetConfig+0x2fe>
 8011638:	2304      	movs	r3, #4
 801163a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801163e:	e01a      	b.n	8011676 <UART_SetConfig+0x2fe>
 8011640:	2308      	movs	r3, #8
 8011642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011646:	e016      	b.n	8011676 <UART_SetConfig+0x2fe>
 8011648:	2310      	movs	r3, #16
 801164a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801164e:	e012      	b.n	8011676 <UART_SetConfig+0x2fe>
 8011650:	cfff69f3 	.word	0xcfff69f3
 8011654:	40008000 	.word	0x40008000
 8011658:	40013800 	.word	0x40013800
 801165c:	40021000 	.word	0x40021000
 8011660:	40004400 	.word	0x40004400
 8011664:	40004800 	.word	0x40004800
 8011668:	40004c00 	.word	0x40004c00
 801166c:	40005000 	.word	0x40005000
 8011670:	2310      	movs	r3, #16
 8011672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011676:	697b      	ldr	r3, [r7, #20]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	4aae      	ldr	r2, [pc, #696]	@ (8011934 <UART_SetConfig+0x5bc>)
 801167c:	4293      	cmp	r3, r2
 801167e:	f040 8097 	bne.w	80117b0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011682:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011686:	2b08      	cmp	r3, #8
 8011688:	d823      	bhi.n	80116d2 <UART_SetConfig+0x35a>
 801168a:	a201      	add	r2, pc, #4	@ (adr r2, 8011690 <UART_SetConfig+0x318>)
 801168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011690:	080116b5 	.word	0x080116b5
 8011694:	080116d3 	.word	0x080116d3
 8011698:	080116bd 	.word	0x080116bd
 801169c:	080116d3 	.word	0x080116d3
 80116a0:	080116c3 	.word	0x080116c3
 80116a4:	080116d3 	.word	0x080116d3
 80116a8:	080116d3 	.word	0x080116d3
 80116ac:	080116d3 	.word	0x080116d3
 80116b0:	080116cb 	.word	0x080116cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80116b4:	f7fc fc6c 	bl	800df90 <HAL_RCC_GetPCLK1Freq>
 80116b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80116ba:	e010      	b.n	80116de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80116bc:	4b9e      	ldr	r3, [pc, #632]	@ (8011938 <UART_SetConfig+0x5c0>)
 80116be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80116c0:	e00d      	b.n	80116de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80116c2:	f7fc fbf7 	bl	800deb4 <HAL_RCC_GetSysClockFreq>
 80116c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80116c8:	e009      	b.n	80116de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80116ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80116ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80116d0:	e005      	b.n	80116de <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80116d2:	2300      	movs	r3, #0
 80116d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80116d6:	2301      	movs	r3, #1
 80116d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80116dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80116de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	f000 8130 	beq.w	8011946 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80116e6:	697b      	ldr	r3, [r7, #20]
 80116e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116ea:	4a94      	ldr	r2, [pc, #592]	@ (801193c <UART_SetConfig+0x5c4>)
 80116ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80116f0:	461a      	mov	r2, r3
 80116f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80116f8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80116fa:	697b      	ldr	r3, [r7, #20]
 80116fc:	685a      	ldr	r2, [r3, #4]
 80116fe:	4613      	mov	r3, r2
 8011700:	005b      	lsls	r3, r3, #1
 8011702:	4413      	add	r3, r2
 8011704:	69ba      	ldr	r2, [r7, #24]
 8011706:	429a      	cmp	r2, r3
 8011708:	d305      	bcc.n	8011716 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801170a:	697b      	ldr	r3, [r7, #20]
 801170c:	685b      	ldr	r3, [r3, #4]
 801170e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011710:	69ba      	ldr	r2, [r7, #24]
 8011712:	429a      	cmp	r2, r3
 8011714:	d903      	bls.n	801171e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8011716:	2301      	movs	r3, #1
 8011718:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 801171c:	e113      	b.n	8011946 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801171e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011720:	2200      	movs	r2, #0
 8011722:	60bb      	str	r3, [r7, #8]
 8011724:	60fa      	str	r2, [r7, #12]
 8011726:	697b      	ldr	r3, [r7, #20]
 8011728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801172a:	4a84      	ldr	r2, [pc, #528]	@ (801193c <UART_SetConfig+0x5c4>)
 801172c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011730:	b29b      	uxth	r3, r3
 8011732:	2200      	movs	r2, #0
 8011734:	603b      	str	r3, [r7, #0]
 8011736:	607a      	str	r2, [r7, #4]
 8011738:	e9d7 2300 	ldrd	r2, r3, [r7]
 801173c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011740:	f7ef fa58 	bl	8000bf4 <__aeabi_uldivmod>
 8011744:	4602      	mov	r2, r0
 8011746:	460b      	mov	r3, r1
 8011748:	4610      	mov	r0, r2
 801174a:	4619      	mov	r1, r3
 801174c:	f04f 0200 	mov.w	r2, #0
 8011750:	f04f 0300 	mov.w	r3, #0
 8011754:	020b      	lsls	r3, r1, #8
 8011756:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801175a:	0202      	lsls	r2, r0, #8
 801175c:	6979      	ldr	r1, [r7, #20]
 801175e:	6849      	ldr	r1, [r1, #4]
 8011760:	0849      	lsrs	r1, r1, #1
 8011762:	2000      	movs	r0, #0
 8011764:	460c      	mov	r4, r1
 8011766:	4605      	mov	r5, r0
 8011768:	eb12 0804 	adds.w	r8, r2, r4
 801176c:	eb43 0905 	adc.w	r9, r3, r5
 8011770:	697b      	ldr	r3, [r7, #20]
 8011772:	685b      	ldr	r3, [r3, #4]
 8011774:	2200      	movs	r2, #0
 8011776:	469a      	mov	sl, r3
 8011778:	4693      	mov	fp, r2
 801177a:	4652      	mov	r2, sl
 801177c:	465b      	mov	r3, fp
 801177e:	4640      	mov	r0, r8
 8011780:	4649      	mov	r1, r9
 8011782:	f7ef fa37 	bl	8000bf4 <__aeabi_uldivmod>
 8011786:	4602      	mov	r2, r0
 8011788:	460b      	mov	r3, r1
 801178a:	4613      	mov	r3, r2
 801178c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801178e:	6a3b      	ldr	r3, [r7, #32]
 8011790:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011794:	d308      	bcc.n	80117a8 <UART_SetConfig+0x430>
 8011796:	6a3b      	ldr	r3, [r7, #32]
 8011798:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801179c:	d204      	bcs.n	80117a8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 801179e:	697b      	ldr	r3, [r7, #20]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	6a3a      	ldr	r2, [r7, #32]
 80117a4:	60da      	str	r2, [r3, #12]
 80117a6:	e0ce      	b.n	8011946 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80117a8:	2301      	movs	r3, #1
 80117aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80117ae:	e0ca      	b.n	8011946 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80117b0:	697b      	ldr	r3, [r7, #20]
 80117b2:	69db      	ldr	r3, [r3, #28]
 80117b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80117b8:	d166      	bne.n	8011888 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80117ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80117be:	2b08      	cmp	r3, #8
 80117c0:	d827      	bhi.n	8011812 <UART_SetConfig+0x49a>
 80117c2:	a201      	add	r2, pc, #4	@ (adr r2, 80117c8 <UART_SetConfig+0x450>)
 80117c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117c8:	080117ed 	.word	0x080117ed
 80117cc:	080117f5 	.word	0x080117f5
 80117d0:	080117fd 	.word	0x080117fd
 80117d4:	08011813 	.word	0x08011813
 80117d8:	08011803 	.word	0x08011803
 80117dc:	08011813 	.word	0x08011813
 80117e0:	08011813 	.word	0x08011813
 80117e4:	08011813 	.word	0x08011813
 80117e8:	0801180b 	.word	0x0801180b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80117ec:	f7fc fbd0 	bl	800df90 <HAL_RCC_GetPCLK1Freq>
 80117f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80117f2:	e014      	b.n	801181e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80117f4:	f7fc fbe2 	bl	800dfbc <HAL_RCC_GetPCLK2Freq>
 80117f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80117fa:	e010      	b.n	801181e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80117fc:	4b4e      	ldr	r3, [pc, #312]	@ (8011938 <UART_SetConfig+0x5c0>)
 80117fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011800:	e00d      	b.n	801181e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011802:	f7fc fb57 	bl	800deb4 <HAL_RCC_GetSysClockFreq>
 8011806:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011808:	e009      	b.n	801181e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801180a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801180e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011810:	e005      	b.n	801181e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8011812:	2300      	movs	r3, #0
 8011814:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8011816:	2301      	movs	r3, #1
 8011818:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 801181c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801181e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011820:	2b00      	cmp	r3, #0
 8011822:	f000 8090 	beq.w	8011946 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011826:	697b      	ldr	r3, [r7, #20]
 8011828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801182a:	4a44      	ldr	r2, [pc, #272]	@ (801193c <UART_SetConfig+0x5c4>)
 801182c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011830:	461a      	mov	r2, r3
 8011832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011834:	fbb3 f3f2 	udiv	r3, r3, r2
 8011838:	005a      	lsls	r2, r3, #1
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	685b      	ldr	r3, [r3, #4]
 801183e:	085b      	lsrs	r3, r3, #1
 8011840:	441a      	add	r2, r3
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	685b      	ldr	r3, [r3, #4]
 8011846:	fbb2 f3f3 	udiv	r3, r2, r3
 801184a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801184c:	6a3b      	ldr	r3, [r7, #32]
 801184e:	2b0f      	cmp	r3, #15
 8011850:	d916      	bls.n	8011880 <UART_SetConfig+0x508>
 8011852:	6a3b      	ldr	r3, [r7, #32]
 8011854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011858:	d212      	bcs.n	8011880 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801185a:	6a3b      	ldr	r3, [r7, #32]
 801185c:	b29b      	uxth	r3, r3
 801185e:	f023 030f 	bic.w	r3, r3, #15
 8011862:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011864:	6a3b      	ldr	r3, [r7, #32]
 8011866:	085b      	lsrs	r3, r3, #1
 8011868:	b29b      	uxth	r3, r3
 801186a:	f003 0307 	and.w	r3, r3, #7
 801186e:	b29a      	uxth	r2, r3
 8011870:	8bfb      	ldrh	r3, [r7, #30]
 8011872:	4313      	orrs	r3, r2
 8011874:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8011876:	697b      	ldr	r3, [r7, #20]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	8bfa      	ldrh	r2, [r7, #30]
 801187c:	60da      	str	r2, [r3, #12]
 801187e:	e062      	b.n	8011946 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8011880:	2301      	movs	r3, #1
 8011882:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011886:	e05e      	b.n	8011946 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011888:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801188c:	2b08      	cmp	r3, #8
 801188e:	d828      	bhi.n	80118e2 <UART_SetConfig+0x56a>
 8011890:	a201      	add	r2, pc, #4	@ (adr r2, 8011898 <UART_SetConfig+0x520>)
 8011892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011896:	bf00      	nop
 8011898:	080118bd 	.word	0x080118bd
 801189c:	080118c5 	.word	0x080118c5
 80118a0:	080118cd 	.word	0x080118cd
 80118a4:	080118e3 	.word	0x080118e3
 80118a8:	080118d3 	.word	0x080118d3
 80118ac:	080118e3 	.word	0x080118e3
 80118b0:	080118e3 	.word	0x080118e3
 80118b4:	080118e3 	.word	0x080118e3
 80118b8:	080118db 	.word	0x080118db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80118bc:	f7fc fb68 	bl	800df90 <HAL_RCC_GetPCLK1Freq>
 80118c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80118c2:	e014      	b.n	80118ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80118c4:	f7fc fb7a 	bl	800dfbc <HAL_RCC_GetPCLK2Freq>
 80118c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80118ca:	e010      	b.n	80118ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80118cc:	4b1a      	ldr	r3, [pc, #104]	@ (8011938 <UART_SetConfig+0x5c0>)
 80118ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80118d0:	e00d      	b.n	80118ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80118d2:	f7fc faef 	bl	800deb4 <HAL_RCC_GetSysClockFreq>
 80118d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80118d8:	e009      	b.n	80118ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80118da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80118de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80118e0:	e005      	b.n	80118ee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80118e2:	2300      	movs	r3, #0
 80118e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80118e6:	2301      	movs	r3, #1
 80118e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80118ec:	bf00      	nop
    }

    if (pclk != 0U)
 80118ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d028      	beq.n	8011946 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80118f4:	697b      	ldr	r3, [r7, #20]
 80118f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118f8:	4a10      	ldr	r2, [pc, #64]	@ (801193c <UART_SetConfig+0x5c4>)
 80118fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118fe:	461a      	mov	r2, r3
 8011900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011902:	fbb3 f2f2 	udiv	r2, r3, r2
 8011906:	697b      	ldr	r3, [r7, #20]
 8011908:	685b      	ldr	r3, [r3, #4]
 801190a:	085b      	lsrs	r3, r3, #1
 801190c:	441a      	add	r2, r3
 801190e:	697b      	ldr	r3, [r7, #20]
 8011910:	685b      	ldr	r3, [r3, #4]
 8011912:	fbb2 f3f3 	udiv	r3, r2, r3
 8011916:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011918:	6a3b      	ldr	r3, [r7, #32]
 801191a:	2b0f      	cmp	r3, #15
 801191c:	d910      	bls.n	8011940 <UART_SetConfig+0x5c8>
 801191e:	6a3b      	ldr	r3, [r7, #32]
 8011920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011924:	d20c      	bcs.n	8011940 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011926:	6a3b      	ldr	r3, [r7, #32]
 8011928:	b29a      	uxth	r2, r3
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	60da      	str	r2, [r3, #12]
 8011930:	e009      	b.n	8011946 <UART_SetConfig+0x5ce>
 8011932:	bf00      	nop
 8011934:	40008000 	.word	0x40008000
 8011938:	00f42400 	.word	0x00f42400
 801193c:	08014fa0 	.word	0x08014fa0
      }
      else
      {
        ret = HAL_ERROR;
 8011940:	2301      	movs	r3, #1
 8011942:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011946:	697b      	ldr	r3, [r7, #20]
 8011948:	2201      	movs	r2, #1
 801194a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	2201      	movs	r2, #1
 8011952:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011956:	697b      	ldr	r3, [r7, #20]
 8011958:	2200      	movs	r2, #0
 801195a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	2200      	movs	r2, #0
 8011960:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8011962:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8011966:	4618      	mov	r0, r3
 8011968:	3730      	adds	r7, #48	@ 0x30
 801196a:	46bd      	mov	sp, r7
 801196c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011970 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011970:	b480      	push	{r7}
 8011972:	b083      	sub	sp, #12
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801197c:	f003 0308 	and.w	r3, r3, #8
 8011980:	2b00      	cmp	r3, #0
 8011982:	d00a      	beq.n	801199a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	685b      	ldr	r3, [r3, #4]
 801198a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	430a      	orrs	r2, r1
 8011998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801199e:	f003 0301 	and.w	r3, r3, #1
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d00a      	beq.n	80119bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	685b      	ldr	r3, [r3, #4]
 80119ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	430a      	orrs	r2, r1
 80119ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119c0:	f003 0302 	and.w	r3, r3, #2
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d00a      	beq.n	80119de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	685b      	ldr	r3, [r3, #4]
 80119ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	430a      	orrs	r2, r1
 80119dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119e2:	f003 0304 	and.w	r3, r3, #4
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d00a      	beq.n	8011a00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	685b      	ldr	r3, [r3, #4]
 80119f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	430a      	orrs	r2, r1
 80119fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a04:	f003 0310 	and.w	r3, r3, #16
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d00a      	beq.n	8011a22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	689b      	ldr	r3, [r3, #8]
 8011a12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	430a      	orrs	r2, r1
 8011a20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a26:	f003 0320 	and.w	r3, r3, #32
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d00a      	beq.n	8011a44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	689b      	ldr	r3, [r3, #8]
 8011a34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	430a      	orrs	r2, r1
 8011a42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d01a      	beq.n	8011a86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	685b      	ldr	r3, [r3, #4]
 8011a56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	430a      	orrs	r2, r1
 8011a64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011a6e:	d10a      	bne.n	8011a86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	685b      	ldr	r3, [r3, #4]
 8011a76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	430a      	orrs	r2, r1
 8011a84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d00a      	beq.n	8011aa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	685b      	ldr	r3, [r3, #4]
 8011a98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	430a      	orrs	r2, r1
 8011aa6:	605a      	str	r2, [r3, #4]
  }
}
 8011aa8:	bf00      	nop
 8011aaa:	370c      	adds	r7, #12
 8011aac:	46bd      	mov	sp, r7
 8011aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab2:	4770      	bx	lr

08011ab4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b098      	sub	sp, #96	@ 0x60
 8011ab8:	af02      	add	r7, sp, #8
 8011aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	2200      	movs	r2, #0
 8011ac0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011ac4:	f7f9 fa4a 	bl	800af5c <HAL_GetTick>
 8011ac8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	f003 0308 	and.w	r3, r3, #8
 8011ad4:	2b08      	cmp	r3, #8
 8011ad6:	d12f      	bne.n	8011b38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011ad8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011adc:	9300      	str	r3, [sp, #0]
 8011ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	f000 f88e 	bl	8011c08 <UART_WaitOnFlagUntilTimeout>
 8011aec:	4603      	mov	r3, r0
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d022      	beq.n	8011b38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011afa:	e853 3f00 	ldrex	r3, [r3]
 8011afe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011b06:	653b      	str	r3, [r7, #80]	@ 0x50
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	461a      	mov	r2, r3
 8011b0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8011b12:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011b16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011b18:	e841 2300 	strex	r3, r2, [r1]
 8011b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d1e6      	bne.n	8011af2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	2220      	movs	r2, #32
 8011b28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	2200      	movs	r2, #0
 8011b30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011b34:	2303      	movs	r3, #3
 8011b36:	e063      	b.n	8011c00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	f003 0304 	and.w	r3, r3, #4
 8011b42:	2b04      	cmp	r3, #4
 8011b44:	d149      	bne.n	8011bda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011b46:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011b4a:	9300      	str	r3, [sp, #0]
 8011b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011b4e:	2200      	movs	r2, #0
 8011b50:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f000 f857 	bl	8011c08 <UART_WaitOnFlagUntilTimeout>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d03c      	beq.n	8011bda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b68:	e853 3f00 	ldrex	r3, [r3]
 8011b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8011b6e:	6a3b      	ldr	r3, [r7, #32]
 8011b70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011b74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	461a      	mov	r2, r3
 8011b7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011b80:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011b84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011b86:	e841 2300 	strex	r3, r2, [r1]
 8011b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d1e6      	bne.n	8011b60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	3308      	adds	r3, #8
 8011b98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	e853 3f00 	ldrex	r3, [r3]
 8011ba0:	60fb      	str	r3, [r7, #12]
   return(result);
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	f023 0301 	bic.w	r3, r3, #1
 8011ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	3308      	adds	r3, #8
 8011bb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011bb2:	61fa      	str	r2, [r7, #28]
 8011bb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bb6:	69b9      	ldr	r1, [r7, #24]
 8011bb8:	69fa      	ldr	r2, [r7, #28]
 8011bba:	e841 2300 	strex	r3, r2, [r1]
 8011bbe:	617b      	str	r3, [r7, #20]
   return(result);
 8011bc0:	697b      	ldr	r3, [r7, #20]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d1e5      	bne.n	8011b92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2220      	movs	r2, #32
 8011bca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011bd6:	2303      	movs	r3, #3
 8011bd8:	e012      	b.n	8011c00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	2220      	movs	r2, #32
 8011bde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	2220      	movs	r2, #32
 8011be6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2200      	movs	r2, #0
 8011bee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011bfe:	2300      	movs	r3, #0
}
 8011c00:	4618      	mov	r0, r3
 8011c02:	3758      	adds	r7, #88	@ 0x58
 8011c04:	46bd      	mov	sp, r7
 8011c06:	bd80      	pop	{r7, pc}

08011c08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b084      	sub	sp, #16
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	60f8      	str	r0, [r7, #12]
 8011c10:	60b9      	str	r1, [r7, #8]
 8011c12:	603b      	str	r3, [r7, #0]
 8011c14:	4613      	mov	r3, r2
 8011c16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c18:	e04f      	b.n	8011cba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011c1a:	69bb      	ldr	r3, [r7, #24]
 8011c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c20:	d04b      	beq.n	8011cba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011c22:	f7f9 f99b 	bl	800af5c <HAL_GetTick>
 8011c26:	4602      	mov	r2, r0
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	1ad3      	subs	r3, r2, r3
 8011c2c:	69ba      	ldr	r2, [r7, #24]
 8011c2e:	429a      	cmp	r2, r3
 8011c30:	d302      	bcc.n	8011c38 <UART_WaitOnFlagUntilTimeout+0x30>
 8011c32:	69bb      	ldr	r3, [r7, #24]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d101      	bne.n	8011c3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011c38:	2303      	movs	r3, #3
 8011c3a:	e04e      	b.n	8011cda <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	f003 0304 	and.w	r3, r3, #4
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d037      	beq.n	8011cba <UART_WaitOnFlagUntilTimeout+0xb2>
 8011c4a:	68bb      	ldr	r3, [r7, #8]
 8011c4c:	2b80      	cmp	r3, #128	@ 0x80
 8011c4e:	d034      	beq.n	8011cba <UART_WaitOnFlagUntilTimeout+0xb2>
 8011c50:	68bb      	ldr	r3, [r7, #8]
 8011c52:	2b40      	cmp	r3, #64	@ 0x40
 8011c54:	d031      	beq.n	8011cba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	69db      	ldr	r3, [r3, #28]
 8011c5c:	f003 0308 	and.w	r3, r3, #8
 8011c60:	2b08      	cmp	r3, #8
 8011c62:	d110      	bne.n	8011c86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	2208      	movs	r2, #8
 8011c6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011c6c:	68f8      	ldr	r0, [r7, #12]
 8011c6e:	f000 f920 	bl	8011eb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	2208      	movs	r2, #8
 8011c76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8011c82:	2301      	movs	r3, #1
 8011c84:	e029      	b.n	8011cda <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	69db      	ldr	r3, [r3, #28]
 8011c8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011c90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011c94:	d111      	bne.n	8011cba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011c9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011ca0:	68f8      	ldr	r0, [r7, #12]
 8011ca2:	f000 f906 	bl	8011eb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	2220      	movs	r2, #32
 8011caa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011cb6:	2303      	movs	r3, #3
 8011cb8:	e00f      	b.n	8011cda <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	69da      	ldr	r2, [r3, #28]
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	4013      	ands	r3, r2
 8011cc4:	68ba      	ldr	r2, [r7, #8]
 8011cc6:	429a      	cmp	r2, r3
 8011cc8:	bf0c      	ite	eq
 8011cca:	2301      	moveq	r3, #1
 8011ccc:	2300      	movne	r3, #0
 8011cce:	b2db      	uxtb	r3, r3
 8011cd0:	461a      	mov	r2, r3
 8011cd2:	79fb      	ldrb	r3, [r7, #7]
 8011cd4:	429a      	cmp	r2, r3
 8011cd6:	d0a0      	beq.n	8011c1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011cd8:	2300      	movs	r3, #0
}
 8011cda:	4618      	mov	r0, r3
 8011cdc:	3710      	adds	r7, #16
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	bd80      	pop	{r7, pc}
	...

08011ce4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b096      	sub	sp, #88	@ 0x58
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	60f8      	str	r0, [r7, #12]
 8011cec:	60b9      	str	r1, [r7, #8]
 8011cee:	4613      	mov	r3, r2
 8011cf0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	68ba      	ldr	r2, [r7, #8]
 8011cf6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	88fa      	ldrh	r2, [r7, #6]
 8011cfc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	2200      	movs	r2, #0
 8011d04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	2222      	movs	r2, #34	@ 0x22
 8011d0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d02d      	beq.n	8011d76 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d20:	4a40      	ldr	r2, [pc, #256]	@ (8011e24 <UART_Start_Receive_DMA+0x140>)
 8011d22:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d2a:	4a3f      	ldr	r2, [pc, #252]	@ (8011e28 <UART_Start_Receive_DMA+0x144>)
 8011d2c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d34:	4a3d      	ldr	r2, [pc, #244]	@ (8011e2c <UART_Start_Receive_DMA+0x148>)
 8011d36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d3e:	2200      	movs	r2, #0
 8011d40:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	3324      	adds	r3, #36	@ 0x24
 8011d4e:	4619      	mov	r1, r3
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011d54:	461a      	mov	r2, r3
 8011d56:	88fb      	ldrh	r3, [r7, #6]
 8011d58:	f7fa ff3c 	bl	800cbd4 <HAL_DMA_Start_IT>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d009      	beq.n	8011d76 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	2210      	movs	r2, #16
 8011d66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	2220      	movs	r2, #32
 8011d6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8011d72:	2301      	movs	r3, #1
 8011d74:	e051      	b.n	8011e1a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	691b      	ldr	r3, [r3, #16]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d018      	beq.n	8011db0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d86:	e853 3f00 	ldrex	r3, [r3]
 8011d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011d92:	657b      	str	r3, [r7, #84]	@ 0x54
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	461a      	mov	r2, r3
 8011d9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011d9e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011da0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011da2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011da4:	e841 2300 	strex	r3, r2, [r1]
 8011da8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8011daa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d1e6      	bne.n	8011d7e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	3308      	adds	r3, #8
 8011db6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dba:	e853 3f00 	ldrex	r3, [r3]
 8011dbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dc2:	f043 0301 	orr.w	r3, r3, #1
 8011dc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	3308      	adds	r3, #8
 8011dce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011dd0:	637a      	str	r2, [r7, #52]	@ 0x34
 8011dd2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dd4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011dd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011dd8:	e841 2300 	strex	r3, r2, [r1]
 8011ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8011dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d1e5      	bne.n	8011db0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	3308      	adds	r3, #8
 8011dea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dec:	697b      	ldr	r3, [r7, #20]
 8011dee:	e853 3f00 	ldrex	r3, [r3]
 8011df2:	613b      	str	r3, [r7, #16]
   return(result);
 8011df4:	693b      	ldr	r3, [r7, #16]
 8011df6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	3308      	adds	r3, #8
 8011e02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011e04:	623a      	str	r2, [r7, #32]
 8011e06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e08:	69f9      	ldr	r1, [r7, #28]
 8011e0a:	6a3a      	ldr	r2, [r7, #32]
 8011e0c:	e841 2300 	strex	r3, r2, [r1]
 8011e10:	61bb      	str	r3, [r7, #24]
   return(result);
 8011e12:	69bb      	ldr	r3, [r7, #24]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d1e5      	bne.n	8011de4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8011e18:	2300      	movs	r3, #0
}
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	3758      	adds	r7, #88	@ 0x58
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bd80      	pop	{r7, pc}
 8011e22:	bf00      	nop
 8011e24:	0801203d 	.word	0x0801203d
 8011e28:	08012171 	.word	0x08012171
 8011e2c:	080121b7 	.word	0x080121b7

08011e30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011e30:	b480      	push	{r7}
 8011e32:	b08f      	sub	sp, #60	@ 0x3c
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e3e:	6a3b      	ldr	r3, [r7, #32]
 8011e40:	e853 3f00 	ldrex	r3, [r3]
 8011e44:	61fb      	str	r3, [r7, #28]
   return(result);
 8011e46:	69fb      	ldr	r3, [r7, #28]
 8011e48:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	461a      	mov	r2, r3
 8011e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011e58:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011e5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011e5e:	e841 2300 	strex	r3, r2, [r1]
 8011e62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d1e6      	bne.n	8011e38 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	3308      	adds	r3, #8
 8011e70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	e853 3f00 	ldrex	r3, [r3]
 8011e78:	60bb      	str	r3, [r7, #8]
   return(result);
 8011e7a:	68bb      	ldr	r3, [r7, #8]
 8011e7c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8011e80:	633b      	str	r3, [r7, #48]	@ 0x30
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	3308      	adds	r3, #8
 8011e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011e8a:	61ba      	str	r2, [r7, #24]
 8011e8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e8e:	6979      	ldr	r1, [r7, #20]
 8011e90:	69ba      	ldr	r2, [r7, #24]
 8011e92:	e841 2300 	strex	r3, r2, [r1]
 8011e96:	613b      	str	r3, [r7, #16]
   return(result);
 8011e98:	693b      	ldr	r3, [r7, #16]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d1e5      	bne.n	8011e6a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	2220      	movs	r2, #32
 8011ea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8011ea6:	bf00      	nop
 8011ea8:	373c      	adds	r7, #60	@ 0x3c
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb0:	4770      	bx	lr

08011eb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011eb2:	b480      	push	{r7}
 8011eb4:	b095      	sub	sp, #84	@ 0x54
 8011eb6:	af00      	add	r7, sp, #0
 8011eb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ec2:	e853 3f00 	ldrex	r3, [r3]
 8011ec6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011eca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	461a      	mov	r2, r3
 8011ed6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ed8:	643b      	str	r3, [r7, #64]	@ 0x40
 8011eda:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011edc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011ede:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011ee0:	e841 2300 	strex	r3, r2, [r1]
 8011ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d1e6      	bne.n	8011eba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	3308      	adds	r3, #8
 8011ef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ef4:	6a3b      	ldr	r3, [r7, #32]
 8011ef6:	e853 3f00 	ldrex	r3, [r3]
 8011efa:	61fb      	str	r3, [r7, #28]
   return(result);
 8011efc:	69fb      	ldr	r3, [r7, #28]
 8011efe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011f02:	f023 0301 	bic.w	r3, r3, #1
 8011f06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	3308      	adds	r3, #8
 8011f0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011f10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011f12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011f16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f18:	e841 2300 	strex	r3, r2, [r1]
 8011f1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d1e3      	bne.n	8011eec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f28:	2b01      	cmp	r3, #1
 8011f2a:	d118      	bne.n	8011f5e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	e853 3f00 	ldrex	r3, [r3]
 8011f38:	60bb      	str	r3, [r7, #8]
   return(result);
 8011f3a:	68bb      	ldr	r3, [r7, #8]
 8011f3c:	f023 0310 	bic.w	r3, r3, #16
 8011f40:	647b      	str	r3, [r7, #68]	@ 0x44
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	461a      	mov	r2, r3
 8011f48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011f4a:	61bb      	str	r3, [r7, #24]
 8011f4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f4e:	6979      	ldr	r1, [r7, #20]
 8011f50:	69ba      	ldr	r2, [r7, #24]
 8011f52:	e841 2300 	strex	r3, r2, [r1]
 8011f56:	613b      	str	r3, [r7, #16]
   return(result);
 8011f58:	693b      	ldr	r3, [r7, #16]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d1e6      	bne.n	8011f2c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	2220      	movs	r2, #32
 8011f62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	2200      	movs	r2, #0
 8011f6a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	2200      	movs	r2, #0
 8011f70:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011f72:	bf00      	nop
 8011f74:	3754      	adds	r7, #84	@ 0x54
 8011f76:	46bd      	mov	sp, r7
 8011f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7c:	4770      	bx	lr

08011f7e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011f7e:	b580      	push	{r7, lr}
 8011f80:	b090      	sub	sp, #64	@ 0x40
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	f003 0320 	and.w	r3, r3, #32
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d137      	bne.n	801200a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8011f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	3308      	adds	r3, #8
 8011fa8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fac:	e853 3f00 	ldrex	r3, [r3]
 8011fb0:	623b      	str	r3, [r7, #32]
   return(result);
 8011fb2:	6a3b      	ldr	r3, [r7, #32]
 8011fb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	3308      	adds	r3, #8
 8011fc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011fc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8011fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011fc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011fca:	e841 2300 	strex	r3, r2, [r1]
 8011fce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d1e5      	bne.n	8011fa2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fdc:	693b      	ldr	r3, [r7, #16]
 8011fde:	e853 3f00 	ldrex	r3, [r3]
 8011fe2:	60fb      	str	r3, [r7, #12]
   return(result);
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8011fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	461a      	mov	r2, r3
 8011ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ff4:	61fb      	str	r3, [r7, #28]
 8011ff6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ff8:	69b9      	ldr	r1, [r7, #24]
 8011ffa:	69fa      	ldr	r2, [r7, #28]
 8011ffc:	e841 2300 	strex	r3, r2, [r1]
 8012000:	617b      	str	r3, [r7, #20]
   return(result);
 8012002:	697b      	ldr	r3, [r7, #20]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d1e6      	bne.n	8011fd6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012008:	e004      	b.n	8012014 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 801200a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801200c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012010:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012012:	4798      	blx	r3
}
 8012014:	bf00      	nop
 8012016:	3740      	adds	r7, #64	@ 0x40
 8012018:	46bd      	mov	sp, r7
 801201a:	bd80      	pop	{r7, pc}

0801201c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b084      	sub	sp, #16
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012028:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012030:	68f8      	ldr	r0, [r7, #12]
 8012032:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012034:	bf00      	nop
 8012036:	3710      	adds	r7, #16
 8012038:	46bd      	mov	sp, r7
 801203a:	bd80      	pop	{r7, pc}

0801203c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b09c      	sub	sp, #112	@ 0x70
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012048:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	f003 0320 	and.w	r3, r3, #32
 8012054:	2b00      	cmp	r3, #0
 8012056:	d171      	bne.n	801213c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8012058:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801205a:	2200      	movs	r2, #0
 801205c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012060:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012066:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012068:	e853 3f00 	ldrex	r3, [r3]
 801206c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801206e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012070:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012074:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012076:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	461a      	mov	r2, r3
 801207c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801207e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012080:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012082:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012084:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012086:	e841 2300 	strex	r3, r2, [r1]
 801208a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801208c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801208e:	2b00      	cmp	r3, #0
 8012090:	d1e6      	bne.n	8012060 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012092:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	3308      	adds	r3, #8
 8012098:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801209a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801209c:	e853 3f00 	ldrex	r3, [r3]
 80120a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80120a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80120a4:	f023 0301 	bic.w	r3, r3, #1
 80120a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80120aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	3308      	adds	r3, #8
 80120b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80120b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80120b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80120b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80120ba:	e841 2300 	strex	r3, r2, [r1]
 80120be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80120c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d1e5      	bne.n	8012092 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80120c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	3308      	adds	r3, #8
 80120cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120d0:	e853 3f00 	ldrex	r3, [r3]
 80120d4:	623b      	str	r3, [r7, #32]
   return(result);
 80120d6:	6a3b      	ldr	r3, [r7, #32]
 80120d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80120dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80120de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	3308      	adds	r3, #8
 80120e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80120e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80120e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80120ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80120ee:	e841 2300 	strex	r3, r2, [r1]
 80120f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80120f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d1e5      	bne.n	80120c6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80120fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80120fc:	2220      	movs	r2, #32
 80120fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012102:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012104:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012106:	2b01      	cmp	r3, #1
 8012108:	d118      	bne.n	801213c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801210a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012110:	693b      	ldr	r3, [r7, #16]
 8012112:	e853 3f00 	ldrex	r3, [r3]
 8012116:	60fb      	str	r3, [r7, #12]
   return(result);
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	f023 0310 	bic.w	r3, r3, #16
 801211e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012120:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	461a      	mov	r2, r3
 8012126:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012128:	61fb      	str	r3, [r7, #28]
 801212a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801212c:	69b9      	ldr	r1, [r7, #24]
 801212e:	69fa      	ldr	r2, [r7, #28]
 8012130:	e841 2300 	strex	r3, r2, [r1]
 8012134:	617b      	str	r3, [r7, #20]
   return(result);
 8012136:	697b      	ldr	r3, [r7, #20]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d1e6      	bne.n	801210a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801213c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801213e:	2200      	movs	r2, #0
 8012140:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012146:	2b01      	cmp	r3, #1
 8012148:	d109      	bne.n	801215e <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801214a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801214c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8012150:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012152:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8012156:	4611      	mov	r1, r2
 8012158:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801215a:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801215c:	e004      	b.n	8012168 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 801215e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012160:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012164:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8012166:	4798      	blx	r3
}
 8012168:	bf00      	nop
 801216a:	3770      	adds	r7, #112	@ 0x70
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b084      	sub	sp, #16
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801217c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	2201      	movs	r2, #1
 8012182:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012188:	2b01      	cmp	r3, #1
 801218a:	d10b      	bne.n	80121a4 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8012192:	68fa      	ldr	r2, [r7, #12]
 8012194:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8012198:	0852      	lsrs	r2, r2, #1
 801219a:	b292      	uxth	r2, r2
 801219c:	4611      	mov	r1, r2
 801219e:	68f8      	ldr	r0, [r7, #12]
 80121a0:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80121a2:	e004      	b.n	80121ae <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80121aa:	68f8      	ldr	r0, [r7, #12]
 80121ac:	4798      	blx	r3
}
 80121ae:	bf00      	nop
 80121b0:	3710      	adds	r7, #16
 80121b2:	46bd      	mov	sp, r7
 80121b4:	bd80      	pop	{r7, pc}

080121b6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80121b6:	b580      	push	{r7, lr}
 80121b8:	b086      	sub	sp, #24
 80121ba:	af00      	add	r7, sp, #0
 80121bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121c2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80121c4:	697b      	ldr	r3, [r7, #20]
 80121c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80121ca:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80121cc:	697b      	ldr	r3, [r7, #20]
 80121ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80121d2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	689b      	ldr	r3, [r3, #8]
 80121da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80121de:	2b80      	cmp	r3, #128	@ 0x80
 80121e0:	d109      	bne.n	80121f6 <UART_DMAError+0x40>
 80121e2:	693b      	ldr	r3, [r7, #16]
 80121e4:	2b21      	cmp	r3, #33	@ 0x21
 80121e6:	d106      	bne.n	80121f6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80121e8:	697b      	ldr	r3, [r7, #20]
 80121ea:	2200      	movs	r2, #0
 80121ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80121f0:	6978      	ldr	r0, [r7, #20]
 80121f2:	f7ff fe1d 	bl	8011e30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80121f6:	697b      	ldr	r3, [r7, #20]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	689b      	ldr	r3, [r3, #8]
 80121fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012200:	2b40      	cmp	r3, #64	@ 0x40
 8012202:	d109      	bne.n	8012218 <UART_DMAError+0x62>
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	2b22      	cmp	r3, #34	@ 0x22
 8012208:	d106      	bne.n	8012218 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801220a:	697b      	ldr	r3, [r7, #20]
 801220c:	2200      	movs	r2, #0
 801220e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8012212:	6978      	ldr	r0, [r7, #20]
 8012214:	f7ff fe4d 	bl	8011eb2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012218:	697b      	ldr	r3, [r7, #20]
 801221a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801221e:	f043 0210 	orr.w	r2, r3, #16
 8012222:	697b      	ldr	r3, [r7, #20]
 8012224:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8012228:	697b      	ldr	r3, [r7, #20]
 801222a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801222e:	6978      	ldr	r0, [r7, #20]
 8012230:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012232:	bf00      	nop
 8012234:	3718      	adds	r7, #24
 8012236:	46bd      	mov	sp, r7
 8012238:	bd80      	pop	{r7, pc}

0801223a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801223a:	b580      	push	{r7, lr}
 801223c:	b084      	sub	sp, #16
 801223e:	af00      	add	r7, sp, #0
 8012240:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012246:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	2200      	movs	r2, #0
 801224c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012256:	68f8      	ldr	r0, [r7, #12]
 8012258:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801225a:	bf00      	nop
 801225c:	3710      	adds	r7, #16
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}

08012262 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012262:	b580      	push	{r7, lr}
 8012264:	b088      	sub	sp, #32
 8012266:	af00      	add	r7, sp, #0
 8012268:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	e853 3f00 	ldrex	r3, [r3]
 8012276:	60bb      	str	r3, [r7, #8]
   return(result);
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801227e:	61fb      	str	r3, [r7, #28]
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	461a      	mov	r2, r3
 8012286:	69fb      	ldr	r3, [r7, #28]
 8012288:	61bb      	str	r3, [r7, #24]
 801228a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801228c:	6979      	ldr	r1, [r7, #20]
 801228e:	69ba      	ldr	r2, [r7, #24]
 8012290:	e841 2300 	strex	r3, r2, [r1]
 8012294:	613b      	str	r3, [r7, #16]
   return(result);
 8012296:	693b      	ldr	r3, [r7, #16]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d1e6      	bne.n	801226a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	2220      	movs	r2, #32
 80122a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	2200      	movs	r2, #0
 80122a8:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80122b0:	6878      	ldr	r0, [r7, #4]
 80122b2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80122b4:	bf00      	nop
 80122b6:	3720      	adds	r7, #32
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bd80      	pop	{r7, pc}

080122bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80122bc:	b480      	push	{r7}
 80122be:	b083      	sub	sp, #12
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80122c4:	bf00      	nop
 80122c6:	370c      	adds	r7, #12
 80122c8:	46bd      	mov	sp, r7
 80122ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ce:	4770      	bx	lr

080122d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80122d0:	b480      	push	{r7}
 80122d2:	b083      	sub	sp, #12
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80122d8:	bf00      	nop
 80122da:	370c      	adds	r7, #12
 80122dc:	46bd      	mov	sp, r7
 80122de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e2:	4770      	bx	lr

080122e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80122e4:	b480      	push	{r7}
 80122e6:	b083      	sub	sp, #12
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80122ec:	bf00      	nop
 80122ee:	370c      	adds	r7, #12
 80122f0:	46bd      	mov	sp, r7
 80122f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f6:	4770      	bx	lr

080122f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80122f8:	b480      	push	{r7}
 80122fa:	b085      	sub	sp, #20
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012306:	2b01      	cmp	r3, #1
 8012308:	d101      	bne.n	801230e <HAL_UARTEx_DisableFifoMode+0x16>
 801230a:	2302      	movs	r3, #2
 801230c:	e027      	b.n	801235e <HAL_UARTEx_DisableFifoMode+0x66>
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	2201      	movs	r2, #1
 8012312:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	2224      	movs	r2, #36	@ 0x24
 801231a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	681a      	ldr	r2, [r3, #0]
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	f022 0201 	bic.w	r2, r2, #1
 8012334:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801233c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	2200      	movs	r2, #0
 8012342:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	68fa      	ldr	r2, [r7, #12]
 801234a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	2220      	movs	r2, #32
 8012350:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2200      	movs	r2, #0
 8012358:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801235c:	2300      	movs	r3, #0
}
 801235e:	4618      	mov	r0, r3
 8012360:	3714      	adds	r7, #20
 8012362:	46bd      	mov	sp, r7
 8012364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012368:	4770      	bx	lr

0801236a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801236a:	b580      	push	{r7, lr}
 801236c:	b084      	sub	sp, #16
 801236e:	af00      	add	r7, sp, #0
 8012370:	6078      	str	r0, [r7, #4]
 8012372:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801237a:	2b01      	cmp	r3, #1
 801237c:	d101      	bne.n	8012382 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801237e:	2302      	movs	r3, #2
 8012380:	e02d      	b.n	80123de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	2201      	movs	r2, #1
 8012386:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	2224      	movs	r2, #36	@ 0x24
 801238e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	681a      	ldr	r2, [r3, #0]
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	f022 0201 	bic.w	r2, r2, #1
 80123a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	689b      	ldr	r3, [r3, #8]
 80123b0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	683a      	ldr	r2, [r7, #0]
 80123ba:	430a      	orrs	r2, r1
 80123bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	f000 f850 	bl	8012464 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	68fa      	ldr	r2, [r7, #12]
 80123ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	2220      	movs	r2, #32
 80123d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2200      	movs	r2, #0
 80123d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80123dc:	2300      	movs	r3, #0
}
 80123de:	4618      	mov	r0, r3
 80123e0:	3710      	adds	r7, #16
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}

080123e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80123e6:	b580      	push	{r7, lr}
 80123e8:	b084      	sub	sp, #16
 80123ea:	af00      	add	r7, sp, #0
 80123ec:	6078      	str	r0, [r7, #4]
 80123ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80123f6:	2b01      	cmp	r3, #1
 80123f8:	d101      	bne.n	80123fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80123fa:	2302      	movs	r3, #2
 80123fc:	e02d      	b.n	801245a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	2201      	movs	r2, #1
 8012402:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	2224      	movs	r2, #36	@ 0x24
 801240a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	681a      	ldr	r2, [r3, #0]
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	f022 0201 	bic.w	r2, r2, #1
 8012424:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	689b      	ldr	r3, [r3, #8]
 801242c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	683a      	ldr	r2, [r7, #0]
 8012436:	430a      	orrs	r2, r1
 8012438:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801243a:	6878      	ldr	r0, [r7, #4]
 801243c:	f000 f812 	bl	8012464 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	68fa      	ldr	r2, [r7, #12]
 8012446:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2220      	movs	r2, #32
 801244c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	2200      	movs	r2, #0
 8012454:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012458:	2300      	movs	r3, #0
}
 801245a:	4618      	mov	r0, r3
 801245c:	3710      	adds	r7, #16
 801245e:	46bd      	mov	sp, r7
 8012460:	bd80      	pop	{r7, pc}
	...

08012464 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012464:	b480      	push	{r7}
 8012466:	b085      	sub	sp, #20
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012470:	2b00      	cmp	r3, #0
 8012472:	d108      	bne.n	8012486 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2201      	movs	r2, #1
 8012478:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2201      	movs	r2, #1
 8012480:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012484:	e031      	b.n	80124ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012486:	2308      	movs	r3, #8
 8012488:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801248a:	2308      	movs	r3, #8
 801248c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	689b      	ldr	r3, [r3, #8]
 8012494:	0e5b      	lsrs	r3, r3, #25
 8012496:	b2db      	uxtb	r3, r3
 8012498:	f003 0307 	and.w	r3, r3, #7
 801249c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	689b      	ldr	r3, [r3, #8]
 80124a4:	0f5b      	lsrs	r3, r3, #29
 80124a6:	b2db      	uxtb	r3, r3
 80124a8:	f003 0307 	and.w	r3, r3, #7
 80124ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80124ae:	7bbb      	ldrb	r3, [r7, #14]
 80124b0:	7b3a      	ldrb	r2, [r7, #12]
 80124b2:	4911      	ldr	r1, [pc, #68]	@ (80124f8 <UARTEx_SetNbDataToProcess+0x94>)
 80124b4:	5c8a      	ldrb	r2, [r1, r2]
 80124b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80124ba:	7b3a      	ldrb	r2, [r7, #12]
 80124bc:	490f      	ldr	r1, [pc, #60]	@ (80124fc <UARTEx_SetNbDataToProcess+0x98>)
 80124be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80124c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80124c4:	b29a      	uxth	r2, r3
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80124cc:	7bfb      	ldrb	r3, [r7, #15]
 80124ce:	7b7a      	ldrb	r2, [r7, #13]
 80124d0:	4909      	ldr	r1, [pc, #36]	@ (80124f8 <UARTEx_SetNbDataToProcess+0x94>)
 80124d2:	5c8a      	ldrb	r2, [r1, r2]
 80124d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80124d8:	7b7a      	ldrb	r2, [r7, #13]
 80124da:	4908      	ldr	r1, [pc, #32]	@ (80124fc <UARTEx_SetNbDataToProcess+0x98>)
 80124dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80124de:	fb93 f3f2 	sdiv	r3, r3, r2
 80124e2:	b29a      	uxth	r2, r3
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80124ea:	bf00      	nop
 80124ec:	3714      	adds	r7, #20
 80124ee:	46bd      	mov	sp, r7
 80124f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f4:	4770      	bx	lr
 80124f6:	bf00      	nop
 80124f8:	08014fb8 	.word	0x08014fb8
 80124fc:	08014fc0 	.word	0x08014fc0

08012500 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8012500:	b480      	push	{r7}
 8012502:	b08b      	sub	sp, #44	@ 0x2c
 8012504:	af00      	add	r7, sp, #0
 8012506:	60f8      	str	r0, [r7, #12]
 8012508:	60b9      	str	r1, [r7, #8]
 801250a:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	685b      	ldr	r3, [r3, #4]
 8012510:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8012512:	68bb      	ldr	r3, [r7, #8]
 8012514:	685b      	ldr	r3, [r3, #4]
 8012516:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	685b      	ldr	r3, [r3, #4]
 801251c:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	881b      	ldrh	r3, [r3, #0]
 8012522:	461a      	mov	r2, r3
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	885b      	ldrh	r3, [r3, #2]
 8012528:	fb02 f303 	mul.w	r3, r2, r3
 801252c:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 801252e:	697b      	ldr	r3, [r7, #20]
 8012530:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8012532:	e013      	b.n	801255c <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 8012534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012536:	1d1a      	adds	r2, r3, #4
 8012538:	627a      	str	r2, [r7, #36]	@ 0x24
 801253a:	ed93 7a00 	vldr	s14, [r3]
 801253e:	6a3b      	ldr	r3, [r7, #32]
 8012540:	1d1a      	adds	r2, r3, #4
 8012542:	623a      	str	r2, [r7, #32]
 8012544:	edd3 7a00 	vldr	s15, [r3]
 8012548:	69fb      	ldr	r3, [r7, #28]
 801254a:	1d1a      	adds	r2, r3, #4
 801254c:	61fa      	str	r2, [r7, #28]
 801254e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012552:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8012556:	69bb      	ldr	r3, [r7, #24]
 8012558:	3b01      	subs	r3, #1
 801255a:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 801255c:	69bb      	ldr	r3, [r7, #24]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d1e8      	bne.n	8012534 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012562:	2300      	movs	r3, #0
 8012564:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8012566:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801256a:	4618      	mov	r0, r3
 801256c:	372c      	adds	r7, #44	@ 0x2c
 801256e:	46bd      	mov	sp, r7
 8012570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012574:	4770      	bx	lr

08012576 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8012576:	b480      	push	{r7}
 8012578:	b085      	sub	sp, #20
 801257a:	af00      	add	r7, sp, #0
 801257c:	60f8      	str	r0, [r7, #12]
 801257e:	607b      	str	r3, [r7, #4]
 8012580:	460b      	mov	r3, r1
 8012582:	817b      	strh	r3, [r7, #10]
 8012584:	4613      	mov	r3, r2
 8012586:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	897a      	ldrh	r2, [r7, #10]
 801258c:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	893a      	ldrh	r2, [r7, #8]
 8012592:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	687a      	ldr	r2, [r7, #4]
 8012598:	605a      	str	r2, [r3, #4]
}
 801259a:	bf00      	nop
 801259c:	3714      	adds	r7, #20
 801259e:	46bd      	mov	sp, r7
 80125a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a4:	4770      	bx	lr

080125a6 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 80125a6:	b480      	push	{r7}
 80125a8:	b0bb      	sub	sp, #236	@ 0xec
 80125aa:	af00      	add	r7, sp, #0
 80125ac:	6078      	str	r0, [r7, #4]
 80125ae:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	685b      	ldr	r3, [r3, #4]
 80125b4:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80125b6:	683b      	ldr	r3, [r7, #0]
 80125b8:	685b      	ldr	r3, [r3, #4]
 80125ba:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	881b      	ldrh	r3, [r3, #0]
 80125c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	885b      	ldrh	r3, [r3, #2]
 80125c6:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 80125c8:	f04f 0300 	mov.w	r3, #0
 80125cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80125d0:	f04f 0300 	mov.w	r3, #0
 80125d4:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 80125d6:	2300      	movs	r3, #0
 80125d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 80125dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80125de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 80125e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80125e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 80125e8:	e03b      	b.n	8012662 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 80125ea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80125ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80125f0:	1ad3      	subs	r3, r2, r3
 80125f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 80125f6:	e00c      	b.n	8012612 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 80125f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80125fc:	1d1a      	adds	r2, r3, #4
 80125fe:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8012602:	f04f 0200 	mov.w	r2, #0
 8012606:	601a      	str	r2, [r3, #0]
        j--;
 8012608:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801260c:	3b01      	subs	r3, #1
 801260e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8012612:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012616:	2b00      	cmp	r3, #0
 8012618:	d1ee      	bne.n	80125f8 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 801261a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801261e:	1d1a      	adds	r2, r3, #4
 8012620:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8012624:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8012628:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 801262a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801262e:	3b01      	subs	r3, #1
 8012630:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8012634:	e00c      	b.n	8012650 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 8012636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801263a:	1d1a      	adds	r2, r3, #4
 801263c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8012640:	f04f 0200 	mov.w	r2, #0
 8012644:	601a      	str	r2, [r3, #0]
        j--;
 8012646:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801264a:	3b01      	subs	r3, #1
 801264c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8012650:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012654:	2b00      	cmp	r3, #0
 8012656:	d1ee      	bne.n	8012636 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 8012658:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801265c:	3b01      	subs	r3, #1
 801265e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 8012662:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8012666:	2b00      	cmp	r3, #0
 8012668:	d1bf      	bne.n	80125ea <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 801266a:	2300      	movs	r3, #0
 801266c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012670:	e2c7      	b.n	8012c02 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 8012672:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012676:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	685a      	ldr	r2, [r3, #4]
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	885b      	ldrh	r3, [r3, #2]
 8012680:	3301      	adds	r3, #1
 8012682:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8012686:	fb01 f303 	mul.w	r3, r1, r3
 801268a:	009b      	lsls	r3, r3, #2
 801268c:	4413      	add	r3, r2
 801268e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 8012692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 801269c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80126a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 80126a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80126a8:	3301      	adds	r3, #1
 80126aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80126ae:	e02c      	b.n	801270a <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	685a      	ldr	r2, [r3, #4]
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	885b      	ldrh	r3, [r3, #2]
 80126b8:	4619      	mov	r1, r3
 80126ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80126be:	fb03 f101 	mul.w	r1, r3, r1
 80126c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80126c6:	440b      	add	r3, r1
 80126c8:	009b      	lsls	r3, r3, #2
 80126ca:	4413      	add	r3, r2
 80126cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 80126d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 80126d8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80126dc:	eeb0 7ae7 	vabs.f32	s14, s15
 80126e0:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80126e4:	eef0 7ae7 	vabs.f32	s15, s15
 80126e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80126ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126f0:	dd06      	ble.n	8012700 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 80126f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80126f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 80126fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80126fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8012700:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012704:	3301      	adds	r3, #1
 8012706:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801270a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801270e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012710:	429a      	cmp	r2, r3
 8012712:	d3cd      	bcc.n	80126b0 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 8012714:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012718:	eef5 7a40 	vcmp.f32	s15, #0.0
 801271c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012720:	f000 809b 	beq.w	801285a <arm_mat_inverse_f32+0x2b4>
 8012724:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012728:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801272c:	429a      	cmp	r2, r3
 801272e:	f000 8094 	beq.w	801285a <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	685b      	ldr	r3, [r3, #4]
 8012736:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	685b      	ldr	r3, [r3, #4]
 801273e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	885b      	ldrh	r3, [r3, #2]
 8012746:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012748:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801274a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801274e:	1ad3      	subs	r3, r2, r3
 8012750:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012752:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012754:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012756:	fb03 f202 	mul.w	r2, r3, r2
 801275a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801275e:	4413      	add	r3, r2
 8012760:	009b      	lsls	r3, r3, #2
 8012762:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8012766:	4413      	add	r3, r2
 8012768:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801276c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801276e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012772:	fb03 f202 	mul.w	r2, r3, r2
 8012776:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801277a:	4413      	add	r3, r2
 801277c:	009b      	lsls	r3, r3, #2
 801277e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8012782:	4413      	add	r3, r2
 8012784:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012788:	2300      	movs	r3, #0
 801278a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801278e:	e018      	b.n	80127c2 <arm_mat_inverse_f32+0x21c>
 8012790:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012798:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801279c:	1d1a      	adds	r2, r3, #4
 801279e:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 80127a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80127a6:	6812      	ldr	r2, [r2, #0]
 80127a8:	601a      	str	r2, [r3, #0]
 80127aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80127ae:	1d1a      	adds	r2, r3, #4
 80127b0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80127b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80127b6:	601a      	str	r2, [r3, #0]
 80127b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80127bc:	3301      	adds	r3, #1
 80127be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80127c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80127c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80127c8:	429a      	cmp	r2, r3
 80127ca:	dbe1      	blt.n	8012790 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 80127cc:	683b      	ldr	r3, [r7, #0]
 80127ce:	685b      	ldr	r3, [r3, #4]
 80127d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80127d4:	683b      	ldr	r3, [r7, #0]
 80127d6:	685b      	ldr	r3, [r3, #4]
 80127d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80127dc:	683b      	ldr	r3, [r7, #0]
 80127de:	885b      	ldrh	r3, [r3, #2]
 80127e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80127e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80127e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80127e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80127e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80127ea:	fb02 f303 	mul.w	r3, r2, r3
 80127ee:	009b      	lsls	r3, r3, #2
 80127f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80127f4:	4413      	add	r3, r2
 80127f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80127fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80127fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012800:	fb02 f303 	mul.w	r3, r2, r3
 8012804:	009b      	lsls	r3, r3, #2
 8012806:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801280a:	4413      	add	r3, r2
 801280c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012810:	2300      	movs	r3, #0
 8012812:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012816:	e018      	b.n	801284a <arm_mat_inverse_f32+0x2a4>
 8012818:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012820:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012824:	1d1a      	adds	r2, r3, #4
 8012826:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 801282a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801282e:	6812      	ldr	r2, [r2, #0]
 8012830:	601a      	str	r2, [r3, #0]
 8012832:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012836:	1d1a      	adds	r2, r3, #4
 8012838:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801283c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801283e:	601a      	str	r2, [r3, #0]
 8012840:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8012844:	3301      	adds	r3, #1
 8012846:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801284a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801284e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012850:	429a      	cmp	r2, r3
 8012852:	dbe1      	blt.n	8012818 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8012854:	2301      	movs	r3, #1
 8012856:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 801285a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801285e:	2b01      	cmp	r3, #1
 8012860:	d009      	beq.n	8012876 <arm_mat_inverse_f32+0x2d0>
 8012862:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012866:	eef5 7a40 	vcmp.f32	s15, #0.0
 801286a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801286e:	d102      	bne.n	8012876 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 8012870:	f06f 0304 	mvn.w	r3, #4
 8012874:	e208      	b.n	8012c88 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 8012876:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801287a:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 801287e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012882:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	685b      	ldr	r3, [r3, #4]
 801288a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	885b      	ldrh	r3, [r3, #2]
 8012892:	637b      	str	r3, [r7, #52]	@ 0x34
 8012894:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012896:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801289a:	1ad3      	subs	r3, r2, r3
 801289c:	633b      	str	r3, [r7, #48]	@ 0x30
 801289e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80128a2:	fb03 f202 	mul.w	r2, r3, r2
 80128a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80128aa:	4413      	add	r3, r2
 80128ac:	009b      	lsls	r3, r3, #2
 80128ae:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80128b2:	4413      	add	r3, r2
 80128b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80128b8:	2300      	movs	r3, #0
 80128ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80128be:	e011      	b.n	80128e4 <arm_mat_inverse_f32+0x33e>
 80128c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80128c4:	1d1a      	adds	r2, r3, #4
 80128c6:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 80128ca:	ed93 7a00 	vldr	s14, [r3]
 80128ce:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80128d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80128d6:	edc3 7a00 	vstr	s15, [r3]
 80128da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80128de:	3301      	adds	r3, #1
 80128e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80128e4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80128e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128ea:	429a      	cmp	r2, r3
 80128ec:	dbe8      	blt.n	80128c0 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 80128ee:	683b      	ldr	r3, [r7, #0]
 80128f0:	685b      	ldr	r3, [r3, #4]
 80128f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	885b      	ldrh	r3, [r3, #2]
 80128fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80128fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012902:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012904:	fb02 f303 	mul.w	r3, r2, r3
 8012908:	009b      	lsls	r3, r3, #2
 801290a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801290e:	4413      	add	r3, r2
 8012910:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012914:	2300      	movs	r3, #0
 8012916:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801291a:	e011      	b.n	8012940 <arm_mat_inverse_f32+0x39a>
 801291c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012920:	1d1a      	adds	r2, r3, #4
 8012922:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8012926:	ed93 7a00 	vldr	s14, [r3]
 801292a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801292e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012932:	edc3 7a00 	vstr	s15, [r3]
 8012936:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801293a:	3301      	adds	r3, #1
 801293c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012940:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8012944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012946:	429a      	cmp	r2, r3
 8012948:	dbe8      	blt.n	801291c <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 801294a:	2300      	movs	r3, #0
 801294c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 8012950:	e0ae      	b.n	8012ab0 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	685a      	ldr	r2, [r3, #4]
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	885b      	ldrh	r3, [r3, #2]
 801295a:	4619      	mov	r1, r3
 801295c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012960:	fb03 f101 	mul.w	r1, r3, r1
 8012964:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012968:	440b      	add	r3, r1
 801296a:	009b      	lsls	r3, r3, #2
 801296c:	4413      	add	r3, r2
 801296e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 8012972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	685b      	ldr	r3, [r3, #4]
 8012980:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	685b      	ldr	r3, [r3, #4]
 8012988:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	885b      	ldrh	r3, [r3, #2]
 8012990:	617b      	str	r3, [r7, #20]
 8012992:	697a      	ldr	r2, [r7, #20]
 8012994:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012998:	1ad3      	subs	r3, r2, r3
 801299a:	613b      	str	r3, [r7, #16]
 801299c:	697b      	ldr	r3, [r7, #20]
 801299e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80129a2:	fb03 f202 	mul.w	r2, r3, r2
 80129a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80129aa:	4413      	add	r3, r2
 80129ac:	009b      	lsls	r3, r3, #2
 80129ae:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80129b2:	4413      	add	r3, r2
 80129b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80129b8:	697b      	ldr	r3, [r7, #20]
 80129ba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80129bc:	fb03 f202 	mul.w	r2, r3, r2
 80129c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80129c4:	4413      	add	r3, r2
 80129c6:	009b      	lsls	r3, r3, #2
 80129c8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80129cc:	4413      	add	r3, r2
 80129ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80129d2:	2300      	movs	r3, #0
 80129d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80129d8:	e01a      	b.n	8012a10 <arm_mat_inverse_f32+0x46a>
 80129da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80129de:	1d1a      	adds	r2, r3, #4
 80129e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80129e4:	ed93 7a00 	vldr	s14, [r3]
 80129e8:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80129ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80129f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80129f4:	1d1a      	adds	r2, r3, #4
 80129f6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80129fa:	ed93 7a00 	vldr	s14, [r3]
 80129fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012a02:	edc3 7a00 	vstr	s15, [r3]
 8012a06:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012a0a:	3301      	adds	r3, #1
 8012a0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012a10:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8012a14:	693b      	ldr	r3, [r7, #16]
 8012a16:	429a      	cmp	r2, r3
 8012a18:	dbdf      	blt.n	80129da <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	685b      	ldr	r3, [r3, #4]
 8012a1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012a22:	683b      	ldr	r3, [r7, #0]
 8012a24:	685b      	ldr	r3, [r3, #4]
 8012a26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012a2a:	683b      	ldr	r3, [r7, #0]
 8012a2c:	885b      	ldrh	r3, [r3, #2]
 8012a2e:	60fb      	str	r3, [r7, #12]
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	60bb      	str	r3, [r7, #8]
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012a3a:	fb02 f303 	mul.w	r3, r2, r3
 8012a3e:	009b      	lsls	r3, r3, #2
 8012a40:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8012a44:	4413      	add	r3, r2
 8012a46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012a4e:	fb02 f303 	mul.w	r3, r2, r3
 8012a52:	009b      	lsls	r3, r3, #2
 8012a54:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012a58:	4413      	add	r3, r2
 8012a5a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012a5e:	2300      	movs	r3, #0
 8012a60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012a64:	e01a      	b.n	8012a9c <arm_mat_inverse_f32+0x4f6>
 8012a66:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012a6a:	1d1a      	adds	r2, r3, #4
 8012a6c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012a70:	ed93 7a00 	vldr	s14, [r3]
 8012a74:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012a80:	1d1a      	adds	r2, r3, #4
 8012a82:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8012a86:	ed93 7a00 	vldr	s14, [r3]
 8012a8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012a8e:	edc3 7a00 	vstr	s15, [r3]
 8012a92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012a96:	3301      	adds	r3, #1
 8012a98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012a9c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012aa0:	68bb      	ldr	r3, [r7, #8]
 8012aa2:	429a      	cmp	r2, r3
 8012aa4:	dbdf      	blt.n	8012a66 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 8012aa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012aaa:	3301      	adds	r3, #1
 8012aac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012ab0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012ab4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ab6:	429a      	cmp	r2, r3
 8012ab8:	f4ff af4b 	bcc.w	8012952 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8012abc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012abe:	3301      	adds	r3, #1
 8012ac0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012ac4:	e092      	b.n	8012bec <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	685a      	ldr	r2, [r3, #4]
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	885b      	ldrh	r3, [r3, #2]
 8012ace:	4619      	mov	r1, r3
 8012ad0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012ad4:	fb03 f101 	mul.w	r1, r3, r1
 8012ad8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012adc:	440b      	add	r3, r1
 8012ade:	009b      	lsls	r3, r3, #2
 8012ae0:	4413      	add	r3, r2
 8012ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 8012ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	685b      	ldr	r3, [r3, #4]
 8012af4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	685b      	ldr	r3, [r3, #4]
 8012afa:	677b      	str	r3, [r7, #116]	@ 0x74
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	885b      	ldrh	r3, [r3, #2]
 8012b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8012b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012b04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012b08:	1ad3      	subs	r3, r2, r3
 8012b0a:	623b      	str	r3, [r7, #32]
 8012b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b0e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012b12:	fb03 f202 	mul.w	r2, r3, r2
 8012b16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012b1a:	4413      	add	r3, r2
 8012b1c:	009b      	lsls	r3, r3, #2
 8012b1e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8012b20:	4413      	add	r3, r2
 8012b22:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b26:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012b28:	fb03 f202 	mul.w	r2, r3, r2
 8012b2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012b30:	4413      	add	r3, r2
 8012b32:	009b      	lsls	r3, r3, #2
 8012b34:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8012b36:	4413      	add	r3, r2
 8012b38:	677b      	str	r3, [r7, #116]	@ 0x74
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012b3e:	e014      	b.n	8012b6a <arm_mat_inverse_f32+0x5c4>
 8012b40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012b42:	1d1a      	adds	r2, r3, #4
 8012b44:	677a      	str	r2, [r7, #116]	@ 0x74
 8012b46:	ed93 7a00 	vldr	s14, [r3]
 8012b4a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012b52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012b54:	1d1a      	adds	r2, r3, #4
 8012b56:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012b58:	ed93 7a00 	vldr	s14, [r3]
 8012b5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b60:	edc3 7a00 	vstr	s15, [r3]
 8012b64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012b66:	3301      	adds	r3, #1
 8012b68:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012b6a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8012b6c:	6a3b      	ldr	r3, [r7, #32]
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	dbe6      	blt.n	8012b40 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8012b72:	683b      	ldr	r3, [r7, #0]
 8012b74:	685b      	ldr	r3, [r3, #4]
 8012b76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012b78:	683b      	ldr	r3, [r7, #0]
 8012b7a:	685b      	ldr	r3, [r3, #4]
 8012b7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012b7e:	683b      	ldr	r3, [r7, #0]
 8012b80:	885b      	ldrh	r3, [r3, #2]
 8012b82:	61fb      	str	r3, [r7, #28]
 8012b84:	69fb      	ldr	r3, [r7, #28]
 8012b86:	61bb      	str	r3, [r7, #24]
 8012b88:	69fb      	ldr	r3, [r7, #28]
 8012b8a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012b8e:	fb02 f303 	mul.w	r3, r2, r3
 8012b92:	009b      	lsls	r3, r3, #2
 8012b94:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012b96:	4413      	add	r3, r2
 8012b98:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012b9a:	69fb      	ldr	r3, [r7, #28]
 8012b9c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012b9e:	fb02 f303 	mul.w	r3, r2, r3
 8012ba2:	009b      	lsls	r3, r3, #2
 8012ba4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012ba6:	4413      	add	r3, r2
 8012ba8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012baa:	2300      	movs	r3, #0
 8012bac:	673b      	str	r3, [r7, #112]	@ 0x70
 8012bae:	e014      	b.n	8012bda <arm_mat_inverse_f32+0x634>
 8012bb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012bb2:	1d1a      	adds	r2, r3, #4
 8012bb4:	66ba      	str	r2, [r7, #104]	@ 0x68
 8012bb6:	ed93 7a00 	vldr	s14, [r3]
 8012bba:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012bc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012bc4:	1d1a      	adds	r2, r3, #4
 8012bc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012bc8:	ed93 7a00 	vldr	s14, [r3]
 8012bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012bd0:	edc3 7a00 	vstr	s15, [r3]
 8012bd4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012bd6:	3301      	adds	r3, #1
 8012bd8:	673b      	str	r3, [r7, #112]	@ 0x70
 8012bda:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8012bdc:	69bb      	ldr	r3, [r7, #24]
 8012bde:	429a      	cmp	r2, r3
 8012be0:	dbe6      	blt.n	8012bb0 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8012be2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012be6:	3301      	adds	r3, #1
 8012be8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012bec:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012bf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012bf2:	429a      	cmp	r2, r3
 8012bf4:	f4ff af67 	bcc.w	8012ac6 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8012bf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012bfc:	3301      	adds	r3, #1
 8012bfe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012c02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8012c06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012c08:	429a      	cmp	r2, r3
 8012c0a:	f4ff ad32 	bcc.w	8012672 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012c0e:	2300      	movs	r3, #0
 8012c10:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 8012c14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012c18:	2b01      	cmp	r3, #1
 8012c1a:	d033      	beq.n	8012c84 <arm_mat_inverse_f32+0x6de>
 8012c1c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012c20:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c28:	d12c      	bne.n	8012c84 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	685b      	ldr	r3, [r3, #4]
 8012c2e:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 8012c30:	2300      	movs	r3, #0
 8012c32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8012c36:	e010      	b.n	8012c5a <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 8012c38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012c3c:	009b      	lsls	r3, r3, #2
 8012c3e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012c40:	4413      	add	r3, r2
 8012c42:	edd3 7a00 	vldr	s15, [r3]
 8012c46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c4e:	d10d      	bne.n	8012c6c <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 8012c50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012c54:	3301      	adds	r3, #1
 8012c56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8012c5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012c5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012c5e:	fb02 f303 	mul.w	r3, r2, r3
 8012c62:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8012c66:	429a      	cmp	r2, r3
 8012c68:	d3e6      	bcc.n	8012c38 <arm_mat_inverse_f32+0x692>
 8012c6a:	e000      	b.n	8012c6e <arm_mat_inverse_f32+0x6c8>
            break;
 8012c6c:	bf00      	nop
      }

      if (i == numRows * numCols)
 8012c6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012c70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012c72:	fb02 f303 	mul.w	r3, r2, r3
 8012c76:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8012c7a:	429a      	cmp	r2, r3
 8012c7c:	d102      	bne.n	8012c84 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 8012c7e:	23fb      	movs	r3, #251	@ 0xfb
 8012c80:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 8012c84:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 8012c88:	4618      	mov	r0, r3
 8012c8a:	37ec      	adds	r7, #236	@ 0xec
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c92:	4770      	bx	lr

08012c94 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8012c94:	b480      	push	{r7}
 8012c96:	b093      	sub	sp, #76	@ 0x4c
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	60f8      	str	r0, [r7, #12]
 8012c9c:	60b9      	str	r1, [r7, #8]
 8012c9e:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	685b      	ldr	r3, [r3, #4]
 8012ca4:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8012ca6:	68bb      	ldr	r3, [r7, #8]
 8012ca8:	685b      	ldr	r3, [r3, #4]
 8012caa:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	685b      	ldr	r3, [r3, #4]
 8012cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 8012cb2:	68bb      	ldr	r3, [r7, #8]
 8012cb4:	685b      	ldr	r3, [r3, #4]
 8012cb6:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	685b      	ldr	r3, [r3, #4]
 8012cbc:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	881b      	ldrh	r3, [r3, #0]
 8012cc2:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8012cc4:	68bb      	ldr	r3, [r7, #8]
 8012cc6:	885b      	ldrh	r3, [r3, #2]
 8012cc8:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	885b      	ldrh	r3, [r3, #2]
 8012cce:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012cd4:	8b7b      	ldrh	r3, [r7, #26]
 8012cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8012cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	69fa      	ldr	r2, [r7, #28]
 8012cde:	4413      	add	r3, r2
 8012ce0:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 8012ce2:	8b3b      	ldrh	r3, [r7, #24]
 8012ce4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8012ce6:	68bb      	ldr	r3, [r7, #8]
 8012ce8:	685b      	ldr	r3, [r3, #4]
 8012cea:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8012cec:	f04f 0300 	mov.w	r3, #0
 8012cf0:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 8012cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012cf4:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8012cf6:	8afb      	ldrh	r3, [r7, #22]
 8012cf8:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8012cfa:	e017      	b.n	8012d2c <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8012cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012cfe:	1d1a      	adds	r2, r3, #4
 8012d00:	647a      	str	r2, [r7, #68]	@ 0x44
 8012d02:	ed93 7a00 	vldr	s14, [r3]
 8012d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012d08:	edd3 7a00 	vldr	s15, [r3]
 8012d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012d10:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8012d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012d18:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 8012d1c:	8b3b      	ldrh	r3, [r7, #24]
 8012d1e:	009b      	lsls	r3, r3, #2
 8012d20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012d22:	4413      	add	r3, r2
 8012d24:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 8012d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d28:	3b01      	subs	r3, #1
 8012d2a:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 8012d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d1e4      	bne.n	8012cfc <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8012d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d34:	1d1a      	adds	r2, r3, #4
 8012d36:	63ba      	str	r2, [r7, #56]	@ 0x38
 8012d38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012d3a:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8012d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d3e:	3b01      	subs	r3, #1
 8012d40:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8012d42:	8b3a      	ldrh	r2, [r7, #24]
 8012d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d46:	1ad3      	subs	r3, r2, r3
 8012d48:	009b      	lsls	r3, r3, #2
 8012d4a:	6a3a      	ldr	r2, [r7, #32]
 8012d4c:	4413      	add	r3, r2
 8012d4e:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 8012d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d1ca      	bne.n	8012cec <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8012d56:	8b3b      	ldrh	r3, [r7, #24]
 8012d58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012d5a:	4413      	add	r3, r2
 8012d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 8012d5e:	8afb      	ldrh	r3, [r7, #22]
 8012d60:	009b      	lsls	r3, r3, #2
 8012d62:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012d64:	4413      	add	r3, r2
 8012d66:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 8012d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d6a:	3b01      	subs	r3, #1
 8012d6c:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 8012d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d1b1      	bne.n	8012cd8 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012d74:	2300      	movs	r3, #0
 8012d76:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8012d78:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	374c      	adds	r7, #76	@ 0x4c
 8012d80:	46bd      	mov	sp, r7
 8012d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d86:	4770      	bx	lr

08012d88 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8012d88:	b480      	push	{r7}
 8012d8a:	b08b      	sub	sp, #44	@ 0x2c
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	60f8      	str	r0, [r7, #12]
 8012d90:	ed87 0a02 	vstr	s0, [r7, #8]
 8012d94:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	685b      	ldr	r3, [r3, #4]
 8012d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	685b      	ldr	r3, [r3, #4]
 8012da0:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	881b      	ldrh	r3, [r3, #0]
 8012da6:	461a      	mov	r2, r3
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	885b      	ldrh	r3, [r3, #2]
 8012dac:	fb02 f303 	mul.w	r3, r2, r3
 8012db0:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8012db2:	69bb      	ldr	r3, [r7, #24]
 8012db4:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8012db6:	e010      	b.n	8012dda <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8012db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dba:	1d1a      	adds	r2, r3, #4
 8012dbc:	627a      	str	r2, [r7, #36]	@ 0x24
 8012dbe:	ed93 7a00 	vldr	s14, [r3]
 8012dc2:	6a3b      	ldr	r3, [r7, #32]
 8012dc4:	1d1a      	adds	r2, r3, #4
 8012dc6:	623a      	str	r2, [r7, #32]
 8012dc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8012dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012dd0:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8012dd4:	69fb      	ldr	r3, [r7, #28]
 8012dd6:	3b01      	subs	r3, #1
 8012dd8:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8012dda:	69fb      	ldr	r3, [r7, #28]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d1eb      	bne.n	8012db8 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012de0:	2300      	movs	r3, #0
 8012de2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8012de4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012de8:	4618      	mov	r0, r3
 8012dea:	372c      	adds	r7, #44	@ 0x2c
 8012dec:	46bd      	mov	sp, r7
 8012dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df2:	4770      	bx	lr

08012df4 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8012df4:	b480      	push	{r7}
 8012df6:	b08b      	sub	sp, #44	@ 0x2c
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	60f8      	str	r0, [r7, #12]
 8012dfc:	60b9      	str	r1, [r7, #8]
 8012dfe:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	685b      	ldr	r3, [r3, #4]
 8012e04:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8012e06:	68bb      	ldr	r3, [r7, #8]
 8012e08:	685b      	ldr	r3, [r3, #4]
 8012e0a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	685b      	ldr	r3, [r3, #4]
 8012e10:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	881b      	ldrh	r3, [r3, #0]
 8012e16:	461a      	mov	r2, r3
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	885b      	ldrh	r3, [r3, #2]
 8012e1c:	fb02 f303 	mul.w	r3, r2, r3
 8012e20:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8012e22:	697b      	ldr	r3, [r7, #20]
 8012e24:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8012e26:	e013      	b.n	8012e50 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8012e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e2a:	1d1a      	adds	r2, r3, #4
 8012e2c:	627a      	str	r2, [r7, #36]	@ 0x24
 8012e2e:	ed93 7a00 	vldr	s14, [r3]
 8012e32:	6a3b      	ldr	r3, [r7, #32]
 8012e34:	1d1a      	adds	r2, r3, #4
 8012e36:	623a      	str	r2, [r7, #32]
 8012e38:	edd3 7a00 	vldr	s15, [r3]
 8012e3c:	69fb      	ldr	r3, [r7, #28]
 8012e3e:	1d1a      	adds	r2, r3, #4
 8012e40:	61fa      	str	r2, [r7, #28]
 8012e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012e46:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8012e4a:	69bb      	ldr	r3, [r7, #24]
 8012e4c:	3b01      	subs	r3, #1
 8012e4e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8012e50:	69bb      	ldr	r3, [r7, #24]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d1e8      	bne.n	8012e28 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012e56:	2300      	movs	r3, #0
 8012e58:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8012e5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8012e5e:	4618      	mov	r0, r3
 8012e60:	372c      	adds	r7, #44	@ 0x2c
 8012e62:	46bd      	mov	sp, r7
 8012e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e68:	4770      	bx	lr

08012e6a <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8012e6a:	b480      	push	{r7}
 8012e6c:	b08b      	sub	sp, #44	@ 0x2c
 8012e6e:	af00      	add	r7, sp, #0
 8012e70:	6078      	str	r0, [r7, #4]
 8012e72:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	685b      	ldr	r3, [r3, #4]
 8012e78:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	685b      	ldr	r3, [r3, #4]
 8012e7e:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	881b      	ldrh	r3, [r3, #0]
 8012e84:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	885b      	ldrh	r3, [r3, #2]
 8012e8a:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8012e8c:	89fb      	ldrh	r3, [r7, #14]
 8012e8e:	61bb      	str	r3, [r7, #24]
 8012e90:	2300      	movs	r3, #0
 8012e92:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8012e94:	697b      	ldr	r3, [r7, #20]
 8012e96:	009b      	lsls	r3, r3, #2
 8012e98:	693a      	ldr	r2, [r7, #16]
 8012e9a:	4413      	add	r3, r2
 8012e9c:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8012e9e:	89bb      	ldrh	r3, [r7, #12]
 8012ea0:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8012ea2:	e00d      	b.n	8012ec0 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8012ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ea6:	1d1a      	adds	r2, r3, #4
 8012ea8:	627a      	str	r2, [r7, #36]	@ 0x24
 8012eaa:	681a      	ldr	r2, [r3, #0]
 8012eac:	6a3b      	ldr	r3, [r7, #32]
 8012eae:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8012eb0:	89fb      	ldrh	r3, [r7, #14]
 8012eb2:	009b      	lsls	r3, r3, #2
 8012eb4:	6a3a      	ldr	r2, [r7, #32]
 8012eb6:	4413      	add	r3, r2
 8012eb8:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8012eba:	69fb      	ldr	r3, [r7, #28]
 8012ebc:	3b01      	subs	r3, #1
 8012ebe:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8012ec0:	69fb      	ldr	r3, [r7, #28]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d1ee      	bne.n	8012ea4 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8012ec6:	697b      	ldr	r3, [r7, #20]
 8012ec8:	3301      	adds	r3, #1
 8012eca:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8012ecc:	69bb      	ldr	r3, [r7, #24]
 8012ece:	3b01      	subs	r3, #1
 8012ed0:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8012ed2:	69bb      	ldr	r3, [r7, #24]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d1dd      	bne.n	8012e94 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8012edc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	372c      	adds	r7, #44	@ 0x2c
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eea:	4770      	bx	lr

08012eec <malloc>:
 8012eec:	4b02      	ldr	r3, [pc, #8]	@ (8012ef8 <malloc+0xc>)
 8012eee:	4601      	mov	r1, r0
 8012ef0:	6818      	ldr	r0, [r3, #0]
 8012ef2:	f000 b825 	b.w	8012f40 <_malloc_r>
 8012ef6:	bf00      	nop
 8012ef8:	200005cc 	.word	0x200005cc

08012efc <sbrk_aligned>:
 8012efc:	b570      	push	{r4, r5, r6, lr}
 8012efe:	4e0f      	ldr	r6, [pc, #60]	@ (8012f3c <sbrk_aligned+0x40>)
 8012f00:	460c      	mov	r4, r1
 8012f02:	6831      	ldr	r1, [r6, #0]
 8012f04:	4605      	mov	r5, r0
 8012f06:	b911      	cbnz	r1, 8012f0e <sbrk_aligned+0x12>
 8012f08:	f000 f8ae 	bl	8013068 <_sbrk_r>
 8012f0c:	6030      	str	r0, [r6, #0]
 8012f0e:	4621      	mov	r1, r4
 8012f10:	4628      	mov	r0, r5
 8012f12:	f000 f8a9 	bl	8013068 <_sbrk_r>
 8012f16:	1c43      	adds	r3, r0, #1
 8012f18:	d103      	bne.n	8012f22 <sbrk_aligned+0x26>
 8012f1a:	f04f 34ff 	mov.w	r4, #4294967295
 8012f1e:	4620      	mov	r0, r4
 8012f20:	bd70      	pop	{r4, r5, r6, pc}
 8012f22:	1cc4      	adds	r4, r0, #3
 8012f24:	f024 0403 	bic.w	r4, r4, #3
 8012f28:	42a0      	cmp	r0, r4
 8012f2a:	d0f8      	beq.n	8012f1e <sbrk_aligned+0x22>
 8012f2c:	1a21      	subs	r1, r4, r0
 8012f2e:	4628      	mov	r0, r5
 8012f30:	f000 f89a 	bl	8013068 <_sbrk_r>
 8012f34:	3001      	adds	r0, #1
 8012f36:	d1f2      	bne.n	8012f1e <sbrk_aligned+0x22>
 8012f38:	e7ef      	b.n	8012f1a <sbrk_aligned+0x1e>
 8012f3a:	bf00      	nop
 8012f3c:	20002750 	.word	0x20002750

08012f40 <_malloc_r>:
 8012f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f44:	1ccd      	adds	r5, r1, #3
 8012f46:	f025 0503 	bic.w	r5, r5, #3
 8012f4a:	3508      	adds	r5, #8
 8012f4c:	2d0c      	cmp	r5, #12
 8012f4e:	bf38      	it	cc
 8012f50:	250c      	movcc	r5, #12
 8012f52:	2d00      	cmp	r5, #0
 8012f54:	4606      	mov	r6, r0
 8012f56:	db01      	blt.n	8012f5c <_malloc_r+0x1c>
 8012f58:	42a9      	cmp	r1, r5
 8012f5a:	d904      	bls.n	8012f66 <_malloc_r+0x26>
 8012f5c:	230c      	movs	r3, #12
 8012f5e:	6033      	str	r3, [r6, #0]
 8012f60:	2000      	movs	r0, #0
 8012f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801303c <_malloc_r+0xfc>
 8012f6a:	f000 f869 	bl	8013040 <__malloc_lock>
 8012f6e:	f8d8 3000 	ldr.w	r3, [r8]
 8012f72:	461c      	mov	r4, r3
 8012f74:	bb44      	cbnz	r4, 8012fc8 <_malloc_r+0x88>
 8012f76:	4629      	mov	r1, r5
 8012f78:	4630      	mov	r0, r6
 8012f7a:	f7ff ffbf 	bl	8012efc <sbrk_aligned>
 8012f7e:	1c43      	adds	r3, r0, #1
 8012f80:	4604      	mov	r4, r0
 8012f82:	d158      	bne.n	8013036 <_malloc_r+0xf6>
 8012f84:	f8d8 4000 	ldr.w	r4, [r8]
 8012f88:	4627      	mov	r7, r4
 8012f8a:	2f00      	cmp	r7, #0
 8012f8c:	d143      	bne.n	8013016 <_malloc_r+0xd6>
 8012f8e:	2c00      	cmp	r4, #0
 8012f90:	d04b      	beq.n	801302a <_malloc_r+0xea>
 8012f92:	6823      	ldr	r3, [r4, #0]
 8012f94:	4639      	mov	r1, r7
 8012f96:	4630      	mov	r0, r6
 8012f98:	eb04 0903 	add.w	r9, r4, r3
 8012f9c:	f000 f864 	bl	8013068 <_sbrk_r>
 8012fa0:	4581      	cmp	r9, r0
 8012fa2:	d142      	bne.n	801302a <_malloc_r+0xea>
 8012fa4:	6821      	ldr	r1, [r4, #0]
 8012fa6:	1a6d      	subs	r5, r5, r1
 8012fa8:	4629      	mov	r1, r5
 8012faa:	4630      	mov	r0, r6
 8012fac:	f7ff ffa6 	bl	8012efc <sbrk_aligned>
 8012fb0:	3001      	adds	r0, #1
 8012fb2:	d03a      	beq.n	801302a <_malloc_r+0xea>
 8012fb4:	6823      	ldr	r3, [r4, #0]
 8012fb6:	442b      	add	r3, r5
 8012fb8:	6023      	str	r3, [r4, #0]
 8012fba:	f8d8 3000 	ldr.w	r3, [r8]
 8012fbe:	685a      	ldr	r2, [r3, #4]
 8012fc0:	bb62      	cbnz	r2, 801301c <_malloc_r+0xdc>
 8012fc2:	f8c8 7000 	str.w	r7, [r8]
 8012fc6:	e00f      	b.n	8012fe8 <_malloc_r+0xa8>
 8012fc8:	6822      	ldr	r2, [r4, #0]
 8012fca:	1b52      	subs	r2, r2, r5
 8012fcc:	d420      	bmi.n	8013010 <_malloc_r+0xd0>
 8012fce:	2a0b      	cmp	r2, #11
 8012fd0:	d917      	bls.n	8013002 <_malloc_r+0xc2>
 8012fd2:	1961      	adds	r1, r4, r5
 8012fd4:	42a3      	cmp	r3, r4
 8012fd6:	6025      	str	r5, [r4, #0]
 8012fd8:	bf18      	it	ne
 8012fda:	6059      	strne	r1, [r3, #4]
 8012fdc:	6863      	ldr	r3, [r4, #4]
 8012fde:	bf08      	it	eq
 8012fe0:	f8c8 1000 	streq.w	r1, [r8]
 8012fe4:	5162      	str	r2, [r4, r5]
 8012fe6:	604b      	str	r3, [r1, #4]
 8012fe8:	4630      	mov	r0, r6
 8012fea:	f000 f82f 	bl	801304c <__malloc_unlock>
 8012fee:	f104 000b 	add.w	r0, r4, #11
 8012ff2:	1d23      	adds	r3, r4, #4
 8012ff4:	f020 0007 	bic.w	r0, r0, #7
 8012ff8:	1ac2      	subs	r2, r0, r3
 8012ffa:	bf1c      	itt	ne
 8012ffc:	1a1b      	subne	r3, r3, r0
 8012ffe:	50a3      	strne	r3, [r4, r2]
 8013000:	e7af      	b.n	8012f62 <_malloc_r+0x22>
 8013002:	6862      	ldr	r2, [r4, #4]
 8013004:	42a3      	cmp	r3, r4
 8013006:	bf0c      	ite	eq
 8013008:	f8c8 2000 	streq.w	r2, [r8]
 801300c:	605a      	strne	r2, [r3, #4]
 801300e:	e7eb      	b.n	8012fe8 <_malloc_r+0xa8>
 8013010:	4623      	mov	r3, r4
 8013012:	6864      	ldr	r4, [r4, #4]
 8013014:	e7ae      	b.n	8012f74 <_malloc_r+0x34>
 8013016:	463c      	mov	r4, r7
 8013018:	687f      	ldr	r7, [r7, #4]
 801301a:	e7b6      	b.n	8012f8a <_malloc_r+0x4a>
 801301c:	461a      	mov	r2, r3
 801301e:	685b      	ldr	r3, [r3, #4]
 8013020:	42a3      	cmp	r3, r4
 8013022:	d1fb      	bne.n	801301c <_malloc_r+0xdc>
 8013024:	2300      	movs	r3, #0
 8013026:	6053      	str	r3, [r2, #4]
 8013028:	e7de      	b.n	8012fe8 <_malloc_r+0xa8>
 801302a:	230c      	movs	r3, #12
 801302c:	6033      	str	r3, [r6, #0]
 801302e:	4630      	mov	r0, r6
 8013030:	f000 f80c 	bl	801304c <__malloc_unlock>
 8013034:	e794      	b.n	8012f60 <_malloc_r+0x20>
 8013036:	6005      	str	r5, [r0, #0]
 8013038:	e7d6      	b.n	8012fe8 <_malloc_r+0xa8>
 801303a:	bf00      	nop
 801303c:	20002754 	.word	0x20002754

08013040 <__malloc_lock>:
 8013040:	4801      	ldr	r0, [pc, #4]	@ (8013048 <__malloc_lock+0x8>)
 8013042:	f000 b84b 	b.w	80130dc <__retarget_lock_acquire_recursive>
 8013046:	bf00      	nop
 8013048:	20002894 	.word	0x20002894

0801304c <__malloc_unlock>:
 801304c:	4801      	ldr	r0, [pc, #4]	@ (8013054 <__malloc_unlock+0x8>)
 801304e:	f000 b846 	b.w	80130de <__retarget_lock_release_recursive>
 8013052:	bf00      	nop
 8013054:	20002894 	.word	0x20002894

08013058 <memset>:
 8013058:	4402      	add	r2, r0
 801305a:	4603      	mov	r3, r0
 801305c:	4293      	cmp	r3, r2
 801305e:	d100      	bne.n	8013062 <memset+0xa>
 8013060:	4770      	bx	lr
 8013062:	f803 1b01 	strb.w	r1, [r3], #1
 8013066:	e7f9      	b.n	801305c <memset+0x4>

08013068 <_sbrk_r>:
 8013068:	b538      	push	{r3, r4, r5, lr}
 801306a:	4d06      	ldr	r5, [pc, #24]	@ (8013084 <_sbrk_r+0x1c>)
 801306c:	2300      	movs	r3, #0
 801306e:	4604      	mov	r4, r0
 8013070:	4608      	mov	r0, r1
 8013072:	602b      	str	r3, [r5, #0]
 8013074:	f7f7 f846 	bl	800a104 <_sbrk>
 8013078:	1c43      	adds	r3, r0, #1
 801307a:	d102      	bne.n	8013082 <_sbrk_r+0x1a>
 801307c:	682b      	ldr	r3, [r5, #0]
 801307e:	b103      	cbz	r3, 8013082 <_sbrk_r+0x1a>
 8013080:	6023      	str	r3, [r4, #0]
 8013082:	bd38      	pop	{r3, r4, r5, pc}
 8013084:	20002890 	.word	0x20002890

08013088 <__errno>:
 8013088:	4b01      	ldr	r3, [pc, #4]	@ (8013090 <__errno+0x8>)
 801308a:	6818      	ldr	r0, [r3, #0]
 801308c:	4770      	bx	lr
 801308e:	bf00      	nop
 8013090:	200005cc 	.word	0x200005cc

08013094 <__libc_init_array>:
 8013094:	b570      	push	{r4, r5, r6, lr}
 8013096:	4d0d      	ldr	r5, [pc, #52]	@ (80130cc <__libc_init_array+0x38>)
 8013098:	4c0d      	ldr	r4, [pc, #52]	@ (80130d0 <__libc_init_array+0x3c>)
 801309a:	1b64      	subs	r4, r4, r5
 801309c:	10a4      	asrs	r4, r4, #2
 801309e:	2600      	movs	r6, #0
 80130a0:	42a6      	cmp	r6, r4
 80130a2:	d109      	bne.n	80130b8 <__libc_init_array+0x24>
 80130a4:	4d0b      	ldr	r5, [pc, #44]	@ (80130d4 <__libc_init_array+0x40>)
 80130a6:	4c0c      	ldr	r4, [pc, #48]	@ (80130d8 <__libc_init_array+0x44>)
 80130a8:	f001 ff32 	bl	8014f10 <_init>
 80130ac:	1b64      	subs	r4, r4, r5
 80130ae:	10a4      	asrs	r4, r4, #2
 80130b0:	2600      	movs	r6, #0
 80130b2:	42a6      	cmp	r6, r4
 80130b4:	d105      	bne.n	80130c2 <__libc_init_array+0x2e>
 80130b6:	bd70      	pop	{r4, r5, r6, pc}
 80130b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80130bc:	4798      	blx	r3
 80130be:	3601      	adds	r6, #1
 80130c0:	e7ee      	b.n	80130a0 <__libc_init_array+0xc>
 80130c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80130c6:	4798      	blx	r3
 80130c8:	3601      	adds	r6, #1
 80130ca:	e7f2      	b.n	80130b2 <__libc_init_array+0x1e>
 80130cc:	08015580 	.word	0x08015580
 80130d0:	08015580 	.word	0x08015580
 80130d4:	08015580 	.word	0x08015580
 80130d8:	08015584 	.word	0x08015584

080130dc <__retarget_lock_acquire_recursive>:
 80130dc:	4770      	bx	lr

080130de <__retarget_lock_release_recursive>:
 80130de:	4770      	bx	lr

080130e0 <memcpy>:
 80130e0:	440a      	add	r2, r1
 80130e2:	4291      	cmp	r1, r2
 80130e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80130e8:	d100      	bne.n	80130ec <memcpy+0xc>
 80130ea:	4770      	bx	lr
 80130ec:	b510      	push	{r4, lr}
 80130ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80130f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80130f6:	4291      	cmp	r1, r2
 80130f8:	d1f9      	bne.n	80130ee <memcpy+0xe>
 80130fa:	bd10      	pop	{r4, pc}
 80130fc:	0000      	movs	r0, r0
	...

08013100 <cos>:
 8013100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013102:	ec53 2b10 	vmov	r2, r3, d0
 8013106:	4826      	ldr	r0, [pc, #152]	@ (80131a0 <cos+0xa0>)
 8013108:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801310c:	4281      	cmp	r1, r0
 801310e:	d806      	bhi.n	801311e <cos+0x1e>
 8013110:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8013198 <cos+0x98>
 8013114:	b005      	add	sp, #20
 8013116:	f85d eb04 	ldr.w	lr, [sp], #4
 801311a:	f000 b9bd 	b.w	8013498 <__kernel_cos>
 801311e:	4821      	ldr	r0, [pc, #132]	@ (80131a4 <cos+0xa4>)
 8013120:	4281      	cmp	r1, r0
 8013122:	d908      	bls.n	8013136 <cos+0x36>
 8013124:	4610      	mov	r0, r2
 8013126:	4619      	mov	r1, r3
 8013128:	f7ed f87a 	bl	8000220 <__aeabi_dsub>
 801312c:	ec41 0b10 	vmov	d0, r0, r1
 8013130:	b005      	add	sp, #20
 8013132:	f85d fb04 	ldr.w	pc, [sp], #4
 8013136:	4668      	mov	r0, sp
 8013138:	f000 fb32 	bl	80137a0 <__ieee754_rem_pio2>
 801313c:	f000 0003 	and.w	r0, r0, #3
 8013140:	2801      	cmp	r0, #1
 8013142:	d00b      	beq.n	801315c <cos+0x5c>
 8013144:	2802      	cmp	r0, #2
 8013146:	d015      	beq.n	8013174 <cos+0x74>
 8013148:	b9d8      	cbnz	r0, 8013182 <cos+0x82>
 801314a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801314e:	ed9d 0b00 	vldr	d0, [sp]
 8013152:	f000 f9a1 	bl	8013498 <__kernel_cos>
 8013156:	ec51 0b10 	vmov	r0, r1, d0
 801315a:	e7e7      	b.n	801312c <cos+0x2c>
 801315c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013160:	ed9d 0b00 	vldr	d0, [sp]
 8013164:	f000 fa60 	bl	8013628 <__kernel_sin>
 8013168:	ec53 2b10 	vmov	r2, r3, d0
 801316c:	4610      	mov	r0, r2
 801316e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8013172:	e7db      	b.n	801312c <cos+0x2c>
 8013174:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013178:	ed9d 0b00 	vldr	d0, [sp]
 801317c:	f000 f98c 	bl	8013498 <__kernel_cos>
 8013180:	e7f2      	b.n	8013168 <cos+0x68>
 8013182:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013186:	ed9d 0b00 	vldr	d0, [sp]
 801318a:	2001      	movs	r0, #1
 801318c:	f000 fa4c 	bl	8013628 <__kernel_sin>
 8013190:	e7e1      	b.n	8013156 <cos+0x56>
 8013192:	bf00      	nop
 8013194:	f3af 8000 	nop.w
	...
 80131a0:	3fe921fb 	.word	0x3fe921fb
 80131a4:	7fefffff 	.word	0x7fefffff

080131a8 <sin>:
 80131a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80131aa:	ec53 2b10 	vmov	r2, r3, d0
 80131ae:	4826      	ldr	r0, [pc, #152]	@ (8013248 <sin+0xa0>)
 80131b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80131b4:	4281      	cmp	r1, r0
 80131b6:	d807      	bhi.n	80131c8 <sin+0x20>
 80131b8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8013240 <sin+0x98>
 80131bc:	2000      	movs	r0, #0
 80131be:	b005      	add	sp, #20
 80131c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80131c4:	f000 ba30 	b.w	8013628 <__kernel_sin>
 80131c8:	4820      	ldr	r0, [pc, #128]	@ (801324c <sin+0xa4>)
 80131ca:	4281      	cmp	r1, r0
 80131cc:	d908      	bls.n	80131e0 <sin+0x38>
 80131ce:	4610      	mov	r0, r2
 80131d0:	4619      	mov	r1, r3
 80131d2:	f7ed f825 	bl	8000220 <__aeabi_dsub>
 80131d6:	ec41 0b10 	vmov	d0, r0, r1
 80131da:	b005      	add	sp, #20
 80131dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80131e0:	4668      	mov	r0, sp
 80131e2:	f000 fadd 	bl	80137a0 <__ieee754_rem_pio2>
 80131e6:	f000 0003 	and.w	r0, r0, #3
 80131ea:	2801      	cmp	r0, #1
 80131ec:	d00c      	beq.n	8013208 <sin+0x60>
 80131ee:	2802      	cmp	r0, #2
 80131f0:	d011      	beq.n	8013216 <sin+0x6e>
 80131f2:	b9e8      	cbnz	r0, 8013230 <sin+0x88>
 80131f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80131f8:	ed9d 0b00 	vldr	d0, [sp]
 80131fc:	2001      	movs	r0, #1
 80131fe:	f000 fa13 	bl	8013628 <__kernel_sin>
 8013202:	ec51 0b10 	vmov	r0, r1, d0
 8013206:	e7e6      	b.n	80131d6 <sin+0x2e>
 8013208:	ed9d 1b02 	vldr	d1, [sp, #8]
 801320c:	ed9d 0b00 	vldr	d0, [sp]
 8013210:	f000 f942 	bl	8013498 <__kernel_cos>
 8013214:	e7f5      	b.n	8013202 <sin+0x5a>
 8013216:	ed9d 1b02 	vldr	d1, [sp, #8]
 801321a:	ed9d 0b00 	vldr	d0, [sp]
 801321e:	2001      	movs	r0, #1
 8013220:	f000 fa02 	bl	8013628 <__kernel_sin>
 8013224:	ec53 2b10 	vmov	r2, r3, d0
 8013228:	4610      	mov	r0, r2
 801322a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801322e:	e7d2      	b.n	80131d6 <sin+0x2e>
 8013230:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013234:	ed9d 0b00 	vldr	d0, [sp]
 8013238:	f000 f92e 	bl	8013498 <__kernel_cos>
 801323c:	e7f2      	b.n	8013224 <sin+0x7c>
 801323e:	bf00      	nop
	...
 8013248:	3fe921fb 	.word	0x3fe921fb
 801324c:	7fefffff 	.word	0x7fefffff

08013250 <fmodf>:
 8013250:	b508      	push	{r3, lr}
 8013252:	ed2d 8b02 	vpush	{d8}
 8013256:	eef0 8a40 	vmov.f32	s17, s0
 801325a:	eeb0 8a60 	vmov.f32	s16, s1
 801325e:	f000 fd43 	bl	8013ce8 <__ieee754_fmodf>
 8013262:	eef4 8a48 	vcmp.f32	s17, s16
 8013266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801326a:	d60c      	bvs.n	8013286 <fmodf+0x36>
 801326c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801328c <fmodf+0x3c>
 8013270:	eeb4 8a68 	vcmp.f32	s16, s17
 8013274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013278:	d105      	bne.n	8013286 <fmodf+0x36>
 801327a:	f7ff ff05 	bl	8013088 <__errno>
 801327e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8013282:	2321      	movs	r3, #33	@ 0x21
 8013284:	6003      	str	r3, [r0, #0]
 8013286:	ecbd 8b02 	vpop	{d8}
 801328a:	bd08      	pop	{r3, pc}
 801328c:	00000000 	.word	0x00000000

08013290 <sqrtf>:
 8013290:	b508      	push	{r3, lr}
 8013292:	ed2d 8b02 	vpush	{d8}
 8013296:	eeb0 8a40 	vmov.f32	s16, s0
 801329a:	f000 f8f7 	bl	801348c <__ieee754_sqrtf>
 801329e:	eeb4 8a48 	vcmp.f32	s16, s16
 80132a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132a6:	d60c      	bvs.n	80132c2 <sqrtf+0x32>
 80132a8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80132c8 <sqrtf+0x38>
 80132ac:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80132b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132b4:	d505      	bpl.n	80132c2 <sqrtf+0x32>
 80132b6:	f7ff fee7 	bl	8013088 <__errno>
 80132ba:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80132be:	2321      	movs	r3, #33	@ 0x21
 80132c0:	6003      	str	r3, [r0, #0]
 80132c2:	ecbd 8b02 	vpop	{d8}
 80132c6:	bd08      	pop	{r3, pc}
 80132c8:	00000000 	.word	0x00000000

080132cc <cosf>:
 80132cc:	ee10 3a10 	vmov	r3, s0
 80132d0:	b507      	push	{r0, r1, r2, lr}
 80132d2:	4a1e      	ldr	r2, [pc, #120]	@ (801334c <cosf+0x80>)
 80132d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80132d8:	4293      	cmp	r3, r2
 80132da:	d806      	bhi.n	80132ea <cosf+0x1e>
 80132dc:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8013350 <cosf+0x84>
 80132e0:	b003      	add	sp, #12
 80132e2:	f85d eb04 	ldr.w	lr, [sp], #4
 80132e6:	f000 bc5f 	b.w	8013ba8 <__kernel_cosf>
 80132ea:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80132ee:	d304      	bcc.n	80132fa <cosf+0x2e>
 80132f0:	ee30 0a40 	vsub.f32	s0, s0, s0
 80132f4:	b003      	add	sp, #12
 80132f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80132fa:	4668      	mov	r0, sp
 80132fc:	f000 fd76 	bl	8013dec <__ieee754_rem_pio2f>
 8013300:	f000 0003 	and.w	r0, r0, #3
 8013304:	2801      	cmp	r0, #1
 8013306:	d009      	beq.n	801331c <cosf+0x50>
 8013308:	2802      	cmp	r0, #2
 801330a:	d010      	beq.n	801332e <cosf+0x62>
 801330c:	b9b0      	cbnz	r0, 801333c <cosf+0x70>
 801330e:	eddd 0a01 	vldr	s1, [sp, #4]
 8013312:	ed9d 0a00 	vldr	s0, [sp]
 8013316:	f000 fc47 	bl	8013ba8 <__kernel_cosf>
 801331a:	e7eb      	b.n	80132f4 <cosf+0x28>
 801331c:	eddd 0a01 	vldr	s1, [sp, #4]
 8013320:	ed9d 0a00 	vldr	s0, [sp]
 8013324:	f000 fc98 	bl	8013c58 <__kernel_sinf>
 8013328:	eeb1 0a40 	vneg.f32	s0, s0
 801332c:	e7e2      	b.n	80132f4 <cosf+0x28>
 801332e:	eddd 0a01 	vldr	s1, [sp, #4]
 8013332:	ed9d 0a00 	vldr	s0, [sp]
 8013336:	f000 fc37 	bl	8013ba8 <__kernel_cosf>
 801333a:	e7f5      	b.n	8013328 <cosf+0x5c>
 801333c:	eddd 0a01 	vldr	s1, [sp, #4]
 8013340:	ed9d 0a00 	vldr	s0, [sp]
 8013344:	2001      	movs	r0, #1
 8013346:	f000 fc87 	bl	8013c58 <__kernel_sinf>
 801334a:	e7d3      	b.n	80132f4 <cosf+0x28>
 801334c:	3f490fd8 	.word	0x3f490fd8
 8013350:	00000000 	.word	0x00000000

08013354 <sinf>:
 8013354:	ee10 3a10 	vmov	r3, s0
 8013358:	b507      	push	{r0, r1, r2, lr}
 801335a:	4a1f      	ldr	r2, [pc, #124]	@ (80133d8 <sinf+0x84>)
 801335c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013360:	4293      	cmp	r3, r2
 8013362:	d807      	bhi.n	8013374 <sinf+0x20>
 8013364:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80133dc <sinf+0x88>
 8013368:	2000      	movs	r0, #0
 801336a:	b003      	add	sp, #12
 801336c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013370:	f000 bc72 	b.w	8013c58 <__kernel_sinf>
 8013374:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8013378:	d304      	bcc.n	8013384 <sinf+0x30>
 801337a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801337e:	b003      	add	sp, #12
 8013380:	f85d fb04 	ldr.w	pc, [sp], #4
 8013384:	4668      	mov	r0, sp
 8013386:	f000 fd31 	bl	8013dec <__ieee754_rem_pio2f>
 801338a:	f000 0003 	and.w	r0, r0, #3
 801338e:	2801      	cmp	r0, #1
 8013390:	d00a      	beq.n	80133a8 <sinf+0x54>
 8013392:	2802      	cmp	r0, #2
 8013394:	d00f      	beq.n	80133b6 <sinf+0x62>
 8013396:	b9c0      	cbnz	r0, 80133ca <sinf+0x76>
 8013398:	eddd 0a01 	vldr	s1, [sp, #4]
 801339c:	ed9d 0a00 	vldr	s0, [sp]
 80133a0:	2001      	movs	r0, #1
 80133a2:	f000 fc59 	bl	8013c58 <__kernel_sinf>
 80133a6:	e7ea      	b.n	801337e <sinf+0x2a>
 80133a8:	eddd 0a01 	vldr	s1, [sp, #4]
 80133ac:	ed9d 0a00 	vldr	s0, [sp]
 80133b0:	f000 fbfa 	bl	8013ba8 <__kernel_cosf>
 80133b4:	e7e3      	b.n	801337e <sinf+0x2a>
 80133b6:	eddd 0a01 	vldr	s1, [sp, #4]
 80133ba:	ed9d 0a00 	vldr	s0, [sp]
 80133be:	2001      	movs	r0, #1
 80133c0:	f000 fc4a 	bl	8013c58 <__kernel_sinf>
 80133c4:	eeb1 0a40 	vneg.f32	s0, s0
 80133c8:	e7d9      	b.n	801337e <sinf+0x2a>
 80133ca:	eddd 0a01 	vldr	s1, [sp, #4]
 80133ce:	ed9d 0a00 	vldr	s0, [sp]
 80133d2:	f000 fbe9 	bl	8013ba8 <__kernel_cosf>
 80133d6:	e7f5      	b.n	80133c4 <sinf+0x70>
 80133d8:	3f490fd8 	.word	0x3f490fd8
 80133dc:	00000000 	.word	0x00000000

080133e0 <fmaxf>:
 80133e0:	b508      	push	{r3, lr}
 80133e2:	ed2d 8b02 	vpush	{d8}
 80133e6:	eeb0 8a40 	vmov.f32	s16, s0
 80133ea:	eef0 8a60 	vmov.f32	s17, s1
 80133ee:	f000 f831 	bl	8013454 <__fpclassifyf>
 80133f2:	b930      	cbnz	r0, 8013402 <fmaxf+0x22>
 80133f4:	eeb0 8a68 	vmov.f32	s16, s17
 80133f8:	eeb0 0a48 	vmov.f32	s0, s16
 80133fc:	ecbd 8b02 	vpop	{d8}
 8013400:	bd08      	pop	{r3, pc}
 8013402:	eeb0 0a68 	vmov.f32	s0, s17
 8013406:	f000 f825 	bl	8013454 <__fpclassifyf>
 801340a:	2800      	cmp	r0, #0
 801340c:	d0f4      	beq.n	80133f8 <fmaxf+0x18>
 801340e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013416:	dded      	ble.n	80133f4 <fmaxf+0x14>
 8013418:	e7ee      	b.n	80133f8 <fmaxf+0x18>

0801341a <fminf>:
 801341a:	b508      	push	{r3, lr}
 801341c:	ed2d 8b02 	vpush	{d8}
 8013420:	eeb0 8a40 	vmov.f32	s16, s0
 8013424:	eef0 8a60 	vmov.f32	s17, s1
 8013428:	f000 f814 	bl	8013454 <__fpclassifyf>
 801342c:	b930      	cbnz	r0, 801343c <fminf+0x22>
 801342e:	eeb0 8a68 	vmov.f32	s16, s17
 8013432:	eeb0 0a48 	vmov.f32	s0, s16
 8013436:	ecbd 8b02 	vpop	{d8}
 801343a:	bd08      	pop	{r3, pc}
 801343c:	eeb0 0a68 	vmov.f32	s0, s17
 8013440:	f000 f808 	bl	8013454 <__fpclassifyf>
 8013444:	2800      	cmp	r0, #0
 8013446:	d0f4      	beq.n	8013432 <fminf+0x18>
 8013448:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801344c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013450:	d5ed      	bpl.n	801342e <fminf+0x14>
 8013452:	e7ee      	b.n	8013432 <fminf+0x18>

08013454 <__fpclassifyf>:
 8013454:	ee10 3a10 	vmov	r3, s0
 8013458:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 801345c:	d00d      	beq.n	801347a <__fpclassifyf+0x26>
 801345e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8013462:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8013466:	d30a      	bcc.n	801347e <__fpclassifyf+0x2a>
 8013468:	4b07      	ldr	r3, [pc, #28]	@ (8013488 <__fpclassifyf+0x34>)
 801346a:	1e42      	subs	r2, r0, #1
 801346c:	429a      	cmp	r2, r3
 801346e:	d908      	bls.n	8013482 <__fpclassifyf+0x2e>
 8013470:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8013474:	4258      	negs	r0, r3
 8013476:	4158      	adcs	r0, r3
 8013478:	4770      	bx	lr
 801347a:	2002      	movs	r0, #2
 801347c:	4770      	bx	lr
 801347e:	2004      	movs	r0, #4
 8013480:	4770      	bx	lr
 8013482:	2003      	movs	r0, #3
 8013484:	4770      	bx	lr
 8013486:	bf00      	nop
 8013488:	007ffffe 	.word	0x007ffffe

0801348c <__ieee754_sqrtf>:
 801348c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013490:	4770      	bx	lr
 8013492:	0000      	movs	r0, r0
 8013494:	0000      	movs	r0, r0
	...

08013498 <__kernel_cos>:
 8013498:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801349c:	ec57 6b10 	vmov	r6, r7, d0
 80134a0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80134a4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80134a8:	ed8d 1b00 	vstr	d1, [sp]
 80134ac:	d206      	bcs.n	80134bc <__kernel_cos+0x24>
 80134ae:	4630      	mov	r0, r6
 80134b0:	4639      	mov	r1, r7
 80134b2:	f7ed fb07 	bl	8000ac4 <__aeabi_d2iz>
 80134b6:	2800      	cmp	r0, #0
 80134b8:	f000 8088 	beq.w	80135cc <__kernel_cos+0x134>
 80134bc:	4632      	mov	r2, r6
 80134be:	463b      	mov	r3, r7
 80134c0:	4630      	mov	r0, r6
 80134c2:	4639      	mov	r1, r7
 80134c4:	f7ed f864 	bl	8000590 <__aeabi_dmul>
 80134c8:	4b51      	ldr	r3, [pc, #324]	@ (8013610 <__kernel_cos+0x178>)
 80134ca:	2200      	movs	r2, #0
 80134cc:	4604      	mov	r4, r0
 80134ce:	460d      	mov	r5, r1
 80134d0:	f7ed f85e 	bl	8000590 <__aeabi_dmul>
 80134d4:	a340      	add	r3, pc, #256	@ (adr r3, 80135d8 <__kernel_cos+0x140>)
 80134d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134da:	4682      	mov	sl, r0
 80134dc:	468b      	mov	fp, r1
 80134de:	4620      	mov	r0, r4
 80134e0:	4629      	mov	r1, r5
 80134e2:	f7ed f855 	bl	8000590 <__aeabi_dmul>
 80134e6:	a33e      	add	r3, pc, #248	@ (adr r3, 80135e0 <__kernel_cos+0x148>)
 80134e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ec:	f7ec fe9a 	bl	8000224 <__adddf3>
 80134f0:	4622      	mov	r2, r4
 80134f2:	462b      	mov	r3, r5
 80134f4:	f7ed f84c 	bl	8000590 <__aeabi_dmul>
 80134f8:	a33b      	add	r3, pc, #236	@ (adr r3, 80135e8 <__kernel_cos+0x150>)
 80134fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134fe:	f7ec fe8f 	bl	8000220 <__aeabi_dsub>
 8013502:	4622      	mov	r2, r4
 8013504:	462b      	mov	r3, r5
 8013506:	f7ed f843 	bl	8000590 <__aeabi_dmul>
 801350a:	a339      	add	r3, pc, #228	@ (adr r3, 80135f0 <__kernel_cos+0x158>)
 801350c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013510:	f7ec fe88 	bl	8000224 <__adddf3>
 8013514:	4622      	mov	r2, r4
 8013516:	462b      	mov	r3, r5
 8013518:	f7ed f83a 	bl	8000590 <__aeabi_dmul>
 801351c:	a336      	add	r3, pc, #216	@ (adr r3, 80135f8 <__kernel_cos+0x160>)
 801351e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013522:	f7ec fe7d 	bl	8000220 <__aeabi_dsub>
 8013526:	4622      	mov	r2, r4
 8013528:	462b      	mov	r3, r5
 801352a:	f7ed f831 	bl	8000590 <__aeabi_dmul>
 801352e:	a334      	add	r3, pc, #208	@ (adr r3, 8013600 <__kernel_cos+0x168>)
 8013530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013534:	f7ec fe76 	bl	8000224 <__adddf3>
 8013538:	4622      	mov	r2, r4
 801353a:	462b      	mov	r3, r5
 801353c:	f7ed f828 	bl	8000590 <__aeabi_dmul>
 8013540:	4622      	mov	r2, r4
 8013542:	462b      	mov	r3, r5
 8013544:	f7ed f824 	bl	8000590 <__aeabi_dmul>
 8013548:	e9dd 2300 	ldrd	r2, r3, [sp]
 801354c:	4604      	mov	r4, r0
 801354e:	460d      	mov	r5, r1
 8013550:	4630      	mov	r0, r6
 8013552:	4639      	mov	r1, r7
 8013554:	f7ed f81c 	bl	8000590 <__aeabi_dmul>
 8013558:	460b      	mov	r3, r1
 801355a:	4602      	mov	r2, r0
 801355c:	4629      	mov	r1, r5
 801355e:	4620      	mov	r0, r4
 8013560:	f7ec fe5e 	bl	8000220 <__aeabi_dsub>
 8013564:	4b2b      	ldr	r3, [pc, #172]	@ (8013614 <__kernel_cos+0x17c>)
 8013566:	4598      	cmp	r8, r3
 8013568:	4606      	mov	r6, r0
 801356a:	460f      	mov	r7, r1
 801356c:	d810      	bhi.n	8013590 <__kernel_cos+0xf8>
 801356e:	4602      	mov	r2, r0
 8013570:	460b      	mov	r3, r1
 8013572:	4650      	mov	r0, sl
 8013574:	4659      	mov	r1, fp
 8013576:	f7ec fe53 	bl	8000220 <__aeabi_dsub>
 801357a:	460b      	mov	r3, r1
 801357c:	4926      	ldr	r1, [pc, #152]	@ (8013618 <__kernel_cos+0x180>)
 801357e:	4602      	mov	r2, r0
 8013580:	2000      	movs	r0, #0
 8013582:	f7ec fe4d 	bl	8000220 <__aeabi_dsub>
 8013586:	ec41 0b10 	vmov	d0, r0, r1
 801358a:	b003      	add	sp, #12
 801358c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013590:	4b22      	ldr	r3, [pc, #136]	@ (801361c <__kernel_cos+0x184>)
 8013592:	4921      	ldr	r1, [pc, #132]	@ (8013618 <__kernel_cos+0x180>)
 8013594:	4598      	cmp	r8, r3
 8013596:	bf8c      	ite	hi
 8013598:	4d21      	ldrhi	r5, [pc, #132]	@ (8013620 <__kernel_cos+0x188>)
 801359a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801359e:	2400      	movs	r4, #0
 80135a0:	4622      	mov	r2, r4
 80135a2:	462b      	mov	r3, r5
 80135a4:	2000      	movs	r0, #0
 80135a6:	f7ec fe3b 	bl	8000220 <__aeabi_dsub>
 80135aa:	4622      	mov	r2, r4
 80135ac:	4680      	mov	r8, r0
 80135ae:	4689      	mov	r9, r1
 80135b0:	462b      	mov	r3, r5
 80135b2:	4650      	mov	r0, sl
 80135b4:	4659      	mov	r1, fp
 80135b6:	f7ec fe33 	bl	8000220 <__aeabi_dsub>
 80135ba:	4632      	mov	r2, r6
 80135bc:	463b      	mov	r3, r7
 80135be:	f7ec fe2f 	bl	8000220 <__aeabi_dsub>
 80135c2:	4602      	mov	r2, r0
 80135c4:	460b      	mov	r3, r1
 80135c6:	4640      	mov	r0, r8
 80135c8:	4649      	mov	r1, r9
 80135ca:	e7da      	b.n	8013582 <__kernel_cos+0xea>
 80135cc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8013608 <__kernel_cos+0x170>
 80135d0:	e7db      	b.n	801358a <__kernel_cos+0xf2>
 80135d2:	bf00      	nop
 80135d4:	f3af 8000 	nop.w
 80135d8:	be8838d4 	.word	0xbe8838d4
 80135dc:	bda8fae9 	.word	0xbda8fae9
 80135e0:	bdb4b1c4 	.word	0xbdb4b1c4
 80135e4:	3e21ee9e 	.word	0x3e21ee9e
 80135e8:	809c52ad 	.word	0x809c52ad
 80135ec:	3e927e4f 	.word	0x3e927e4f
 80135f0:	19cb1590 	.word	0x19cb1590
 80135f4:	3efa01a0 	.word	0x3efa01a0
 80135f8:	16c15177 	.word	0x16c15177
 80135fc:	3f56c16c 	.word	0x3f56c16c
 8013600:	5555554c 	.word	0x5555554c
 8013604:	3fa55555 	.word	0x3fa55555
 8013608:	00000000 	.word	0x00000000
 801360c:	3ff00000 	.word	0x3ff00000
 8013610:	3fe00000 	.word	0x3fe00000
 8013614:	3fd33332 	.word	0x3fd33332
 8013618:	3ff00000 	.word	0x3ff00000
 801361c:	3fe90000 	.word	0x3fe90000
 8013620:	3fd20000 	.word	0x3fd20000
 8013624:	00000000 	.word	0x00000000

08013628 <__kernel_sin>:
 8013628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801362c:	ec55 4b10 	vmov	r4, r5, d0
 8013630:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013634:	b085      	sub	sp, #20
 8013636:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801363a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801363e:	4680      	mov	r8, r0
 8013640:	d205      	bcs.n	801364e <__kernel_sin+0x26>
 8013642:	4620      	mov	r0, r4
 8013644:	4629      	mov	r1, r5
 8013646:	f7ed fa3d 	bl	8000ac4 <__aeabi_d2iz>
 801364a:	2800      	cmp	r0, #0
 801364c:	d052      	beq.n	80136f4 <__kernel_sin+0xcc>
 801364e:	4622      	mov	r2, r4
 8013650:	462b      	mov	r3, r5
 8013652:	4620      	mov	r0, r4
 8013654:	4629      	mov	r1, r5
 8013656:	f7ec ff9b 	bl	8000590 <__aeabi_dmul>
 801365a:	4682      	mov	sl, r0
 801365c:	468b      	mov	fp, r1
 801365e:	4602      	mov	r2, r0
 8013660:	460b      	mov	r3, r1
 8013662:	4620      	mov	r0, r4
 8013664:	4629      	mov	r1, r5
 8013666:	f7ec ff93 	bl	8000590 <__aeabi_dmul>
 801366a:	a342      	add	r3, pc, #264	@ (adr r3, 8013774 <__kernel_sin+0x14c>)
 801366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013670:	e9cd 0100 	strd	r0, r1, [sp]
 8013674:	4650      	mov	r0, sl
 8013676:	4659      	mov	r1, fp
 8013678:	f7ec ff8a 	bl	8000590 <__aeabi_dmul>
 801367c:	a33f      	add	r3, pc, #252	@ (adr r3, 801377c <__kernel_sin+0x154>)
 801367e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013682:	f7ec fdcd 	bl	8000220 <__aeabi_dsub>
 8013686:	4652      	mov	r2, sl
 8013688:	465b      	mov	r3, fp
 801368a:	f7ec ff81 	bl	8000590 <__aeabi_dmul>
 801368e:	a33d      	add	r3, pc, #244	@ (adr r3, 8013784 <__kernel_sin+0x15c>)
 8013690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013694:	f7ec fdc6 	bl	8000224 <__adddf3>
 8013698:	4652      	mov	r2, sl
 801369a:	465b      	mov	r3, fp
 801369c:	f7ec ff78 	bl	8000590 <__aeabi_dmul>
 80136a0:	a33a      	add	r3, pc, #232	@ (adr r3, 801378c <__kernel_sin+0x164>)
 80136a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136a6:	f7ec fdbb 	bl	8000220 <__aeabi_dsub>
 80136aa:	4652      	mov	r2, sl
 80136ac:	465b      	mov	r3, fp
 80136ae:	f7ec ff6f 	bl	8000590 <__aeabi_dmul>
 80136b2:	a338      	add	r3, pc, #224	@ (adr r3, 8013794 <__kernel_sin+0x16c>)
 80136b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136b8:	f7ec fdb4 	bl	8000224 <__adddf3>
 80136bc:	4606      	mov	r6, r0
 80136be:	460f      	mov	r7, r1
 80136c0:	f1b8 0f00 	cmp.w	r8, #0
 80136c4:	d11b      	bne.n	80136fe <__kernel_sin+0xd6>
 80136c6:	4602      	mov	r2, r0
 80136c8:	460b      	mov	r3, r1
 80136ca:	4650      	mov	r0, sl
 80136cc:	4659      	mov	r1, fp
 80136ce:	f7ec ff5f 	bl	8000590 <__aeabi_dmul>
 80136d2:	a325      	add	r3, pc, #148	@ (adr r3, 8013768 <__kernel_sin+0x140>)
 80136d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136d8:	f7ec fda2 	bl	8000220 <__aeabi_dsub>
 80136dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80136e0:	f7ec ff56 	bl	8000590 <__aeabi_dmul>
 80136e4:	4602      	mov	r2, r0
 80136e6:	460b      	mov	r3, r1
 80136e8:	4620      	mov	r0, r4
 80136ea:	4629      	mov	r1, r5
 80136ec:	f7ec fd9a 	bl	8000224 <__adddf3>
 80136f0:	4604      	mov	r4, r0
 80136f2:	460d      	mov	r5, r1
 80136f4:	ec45 4b10 	vmov	d0, r4, r5
 80136f8:	b005      	add	sp, #20
 80136fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013702:	4b1b      	ldr	r3, [pc, #108]	@ (8013770 <__kernel_sin+0x148>)
 8013704:	2200      	movs	r2, #0
 8013706:	f7ec ff43 	bl	8000590 <__aeabi_dmul>
 801370a:	4632      	mov	r2, r6
 801370c:	4680      	mov	r8, r0
 801370e:	4689      	mov	r9, r1
 8013710:	463b      	mov	r3, r7
 8013712:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013716:	f7ec ff3b 	bl	8000590 <__aeabi_dmul>
 801371a:	4602      	mov	r2, r0
 801371c:	460b      	mov	r3, r1
 801371e:	4640      	mov	r0, r8
 8013720:	4649      	mov	r1, r9
 8013722:	f7ec fd7d 	bl	8000220 <__aeabi_dsub>
 8013726:	4652      	mov	r2, sl
 8013728:	465b      	mov	r3, fp
 801372a:	f7ec ff31 	bl	8000590 <__aeabi_dmul>
 801372e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013732:	f7ec fd75 	bl	8000220 <__aeabi_dsub>
 8013736:	a30c      	add	r3, pc, #48	@ (adr r3, 8013768 <__kernel_sin+0x140>)
 8013738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801373c:	4606      	mov	r6, r0
 801373e:	460f      	mov	r7, r1
 8013740:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013744:	f7ec ff24 	bl	8000590 <__aeabi_dmul>
 8013748:	4602      	mov	r2, r0
 801374a:	460b      	mov	r3, r1
 801374c:	4630      	mov	r0, r6
 801374e:	4639      	mov	r1, r7
 8013750:	f7ec fd68 	bl	8000224 <__adddf3>
 8013754:	4602      	mov	r2, r0
 8013756:	460b      	mov	r3, r1
 8013758:	4620      	mov	r0, r4
 801375a:	4629      	mov	r1, r5
 801375c:	f7ec fd60 	bl	8000220 <__aeabi_dsub>
 8013760:	e7c6      	b.n	80136f0 <__kernel_sin+0xc8>
 8013762:	bf00      	nop
 8013764:	f3af 8000 	nop.w
 8013768:	55555549 	.word	0x55555549
 801376c:	3fc55555 	.word	0x3fc55555
 8013770:	3fe00000 	.word	0x3fe00000
 8013774:	5acfd57c 	.word	0x5acfd57c
 8013778:	3de5d93a 	.word	0x3de5d93a
 801377c:	8a2b9ceb 	.word	0x8a2b9ceb
 8013780:	3e5ae5e6 	.word	0x3e5ae5e6
 8013784:	57b1fe7d 	.word	0x57b1fe7d
 8013788:	3ec71de3 	.word	0x3ec71de3
 801378c:	19c161d5 	.word	0x19c161d5
 8013790:	3f2a01a0 	.word	0x3f2a01a0
 8013794:	1110f8a6 	.word	0x1110f8a6
 8013798:	3f811111 	.word	0x3f811111
 801379c:	00000000 	.word	0x00000000

080137a0 <__ieee754_rem_pio2>:
 80137a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137a4:	ec57 6b10 	vmov	r6, r7, d0
 80137a8:	4bc5      	ldr	r3, [pc, #788]	@ (8013ac0 <__ieee754_rem_pio2+0x320>)
 80137aa:	b08d      	sub	sp, #52	@ 0x34
 80137ac:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80137b0:	4598      	cmp	r8, r3
 80137b2:	4604      	mov	r4, r0
 80137b4:	9704      	str	r7, [sp, #16]
 80137b6:	d807      	bhi.n	80137c8 <__ieee754_rem_pio2+0x28>
 80137b8:	2200      	movs	r2, #0
 80137ba:	2300      	movs	r3, #0
 80137bc:	ed80 0b00 	vstr	d0, [r0]
 80137c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80137c4:	2500      	movs	r5, #0
 80137c6:	e028      	b.n	801381a <__ieee754_rem_pio2+0x7a>
 80137c8:	4bbe      	ldr	r3, [pc, #760]	@ (8013ac4 <__ieee754_rem_pio2+0x324>)
 80137ca:	4598      	cmp	r8, r3
 80137cc:	d878      	bhi.n	80138c0 <__ieee754_rem_pio2+0x120>
 80137ce:	9b04      	ldr	r3, [sp, #16]
 80137d0:	4dbd      	ldr	r5, [pc, #756]	@ (8013ac8 <__ieee754_rem_pio2+0x328>)
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	4630      	mov	r0, r6
 80137d6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8013a88 <__ieee754_rem_pio2+0x2e8>)
 80137d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137dc:	4639      	mov	r1, r7
 80137de:	dd38      	ble.n	8013852 <__ieee754_rem_pio2+0xb2>
 80137e0:	f7ec fd1e 	bl	8000220 <__aeabi_dsub>
 80137e4:	45a8      	cmp	r8, r5
 80137e6:	4606      	mov	r6, r0
 80137e8:	460f      	mov	r7, r1
 80137ea:	d01a      	beq.n	8013822 <__ieee754_rem_pio2+0x82>
 80137ec:	a3a8      	add	r3, pc, #672	@ (adr r3, 8013a90 <__ieee754_rem_pio2+0x2f0>)
 80137ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137f2:	f7ec fd15 	bl	8000220 <__aeabi_dsub>
 80137f6:	4602      	mov	r2, r0
 80137f8:	460b      	mov	r3, r1
 80137fa:	4680      	mov	r8, r0
 80137fc:	4689      	mov	r9, r1
 80137fe:	4630      	mov	r0, r6
 8013800:	4639      	mov	r1, r7
 8013802:	f7ec fd0d 	bl	8000220 <__aeabi_dsub>
 8013806:	a3a2      	add	r3, pc, #648	@ (adr r3, 8013a90 <__ieee754_rem_pio2+0x2f0>)
 8013808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801380c:	f7ec fd08 	bl	8000220 <__aeabi_dsub>
 8013810:	e9c4 8900 	strd	r8, r9, [r4]
 8013814:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013818:	2501      	movs	r5, #1
 801381a:	4628      	mov	r0, r5
 801381c:	b00d      	add	sp, #52	@ 0x34
 801381e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013822:	a39d      	add	r3, pc, #628	@ (adr r3, 8013a98 <__ieee754_rem_pio2+0x2f8>)
 8013824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013828:	f7ec fcfa 	bl	8000220 <__aeabi_dsub>
 801382c:	a39c      	add	r3, pc, #624	@ (adr r3, 8013aa0 <__ieee754_rem_pio2+0x300>)
 801382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013832:	4606      	mov	r6, r0
 8013834:	460f      	mov	r7, r1
 8013836:	f7ec fcf3 	bl	8000220 <__aeabi_dsub>
 801383a:	4602      	mov	r2, r0
 801383c:	460b      	mov	r3, r1
 801383e:	4680      	mov	r8, r0
 8013840:	4689      	mov	r9, r1
 8013842:	4630      	mov	r0, r6
 8013844:	4639      	mov	r1, r7
 8013846:	f7ec fceb 	bl	8000220 <__aeabi_dsub>
 801384a:	a395      	add	r3, pc, #596	@ (adr r3, 8013aa0 <__ieee754_rem_pio2+0x300>)
 801384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013850:	e7dc      	b.n	801380c <__ieee754_rem_pio2+0x6c>
 8013852:	f7ec fce7 	bl	8000224 <__adddf3>
 8013856:	45a8      	cmp	r8, r5
 8013858:	4606      	mov	r6, r0
 801385a:	460f      	mov	r7, r1
 801385c:	d018      	beq.n	8013890 <__ieee754_rem_pio2+0xf0>
 801385e:	a38c      	add	r3, pc, #560	@ (adr r3, 8013a90 <__ieee754_rem_pio2+0x2f0>)
 8013860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013864:	f7ec fcde 	bl	8000224 <__adddf3>
 8013868:	4602      	mov	r2, r0
 801386a:	460b      	mov	r3, r1
 801386c:	4680      	mov	r8, r0
 801386e:	4689      	mov	r9, r1
 8013870:	4630      	mov	r0, r6
 8013872:	4639      	mov	r1, r7
 8013874:	f7ec fcd4 	bl	8000220 <__aeabi_dsub>
 8013878:	a385      	add	r3, pc, #532	@ (adr r3, 8013a90 <__ieee754_rem_pio2+0x2f0>)
 801387a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801387e:	f7ec fcd1 	bl	8000224 <__adddf3>
 8013882:	f04f 35ff 	mov.w	r5, #4294967295
 8013886:	e9c4 8900 	strd	r8, r9, [r4]
 801388a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801388e:	e7c4      	b.n	801381a <__ieee754_rem_pio2+0x7a>
 8013890:	a381      	add	r3, pc, #516	@ (adr r3, 8013a98 <__ieee754_rem_pio2+0x2f8>)
 8013892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013896:	f7ec fcc5 	bl	8000224 <__adddf3>
 801389a:	a381      	add	r3, pc, #516	@ (adr r3, 8013aa0 <__ieee754_rem_pio2+0x300>)
 801389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138a0:	4606      	mov	r6, r0
 80138a2:	460f      	mov	r7, r1
 80138a4:	f7ec fcbe 	bl	8000224 <__adddf3>
 80138a8:	4602      	mov	r2, r0
 80138aa:	460b      	mov	r3, r1
 80138ac:	4680      	mov	r8, r0
 80138ae:	4689      	mov	r9, r1
 80138b0:	4630      	mov	r0, r6
 80138b2:	4639      	mov	r1, r7
 80138b4:	f7ec fcb4 	bl	8000220 <__aeabi_dsub>
 80138b8:	a379      	add	r3, pc, #484	@ (adr r3, 8013aa0 <__ieee754_rem_pio2+0x300>)
 80138ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138be:	e7de      	b.n	801387e <__ieee754_rem_pio2+0xde>
 80138c0:	4b82      	ldr	r3, [pc, #520]	@ (8013acc <__ieee754_rem_pio2+0x32c>)
 80138c2:	4598      	cmp	r8, r3
 80138c4:	f200 80d1 	bhi.w	8013a6a <__ieee754_rem_pio2+0x2ca>
 80138c8:	f000 f966 	bl	8013b98 <fabs>
 80138cc:	ec57 6b10 	vmov	r6, r7, d0
 80138d0:	a375      	add	r3, pc, #468	@ (adr r3, 8013aa8 <__ieee754_rem_pio2+0x308>)
 80138d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138d6:	4630      	mov	r0, r6
 80138d8:	4639      	mov	r1, r7
 80138da:	f7ec fe59 	bl	8000590 <__aeabi_dmul>
 80138de:	4b7c      	ldr	r3, [pc, #496]	@ (8013ad0 <__ieee754_rem_pio2+0x330>)
 80138e0:	2200      	movs	r2, #0
 80138e2:	f7ec fc9f 	bl	8000224 <__adddf3>
 80138e6:	f7ed f8ed 	bl	8000ac4 <__aeabi_d2iz>
 80138ea:	4605      	mov	r5, r0
 80138ec:	f7ec fde6 	bl	80004bc <__aeabi_i2d>
 80138f0:	4602      	mov	r2, r0
 80138f2:	460b      	mov	r3, r1
 80138f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80138f8:	a363      	add	r3, pc, #396	@ (adr r3, 8013a88 <__ieee754_rem_pio2+0x2e8>)
 80138fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138fe:	f7ec fe47 	bl	8000590 <__aeabi_dmul>
 8013902:	4602      	mov	r2, r0
 8013904:	460b      	mov	r3, r1
 8013906:	4630      	mov	r0, r6
 8013908:	4639      	mov	r1, r7
 801390a:	f7ec fc89 	bl	8000220 <__aeabi_dsub>
 801390e:	a360      	add	r3, pc, #384	@ (adr r3, 8013a90 <__ieee754_rem_pio2+0x2f0>)
 8013910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013914:	4682      	mov	sl, r0
 8013916:	468b      	mov	fp, r1
 8013918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801391c:	f7ec fe38 	bl	8000590 <__aeabi_dmul>
 8013920:	2d1f      	cmp	r5, #31
 8013922:	4606      	mov	r6, r0
 8013924:	460f      	mov	r7, r1
 8013926:	dc0c      	bgt.n	8013942 <__ieee754_rem_pio2+0x1a2>
 8013928:	4b6a      	ldr	r3, [pc, #424]	@ (8013ad4 <__ieee754_rem_pio2+0x334>)
 801392a:	1e6a      	subs	r2, r5, #1
 801392c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013930:	4543      	cmp	r3, r8
 8013932:	d006      	beq.n	8013942 <__ieee754_rem_pio2+0x1a2>
 8013934:	4632      	mov	r2, r6
 8013936:	463b      	mov	r3, r7
 8013938:	4650      	mov	r0, sl
 801393a:	4659      	mov	r1, fp
 801393c:	f7ec fc70 	bl	8000220 <__aeabi_dsub>
 8013940:	e00e      	b.n	8013960 <__ieee754_rem_pio2+0x1c0>
 8013942:	463b      	mov	r3, r7
 8013944:	4632      	mov	r2, r6
 8013946:	4650      	mov	r0, sl
 8013948:	4659      	mov	r1, fp
 801394a:	f7ec fc69 	bl	8000220 <__aeabi_dsub>
 801394e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013952:	9305      	str	r3, [sp, #20]
 8013954:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013958:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801395c:	2b10      	cmp	r3, #16
 801395e:	dc02      	bgt.n	8013966 <__ieee754_rem_pio2+0x1c6>
 8013960:	e9c4 0100 	strd	r0, r1, [r4]
 8013964:	e039      	b.n	80139da <__ieee754_rem_pio2+0x23a>
 8013966:	a34c      	add	r3, pc, #304	@ (adr r3, 8013a98 <__ieee754_rem_pio2+0x2f8>)
 8013968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801396c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013970:	f7ec fe0e 	bl	8000590 <__aeabi_dmul>
 8013974:	4606      	mov	r6, r0
 8013976:	460f      	mov	r7, r1
 8013978:	4602      	mov	r2, r0
 801397a:	460b      	mov	r3, r1
 801397c:	4650      	mov	r0, sl
 801397e:	4659      	mov	r1, fp
 8013980:	f7ec fc4e 	bl	8000220 <__aeabi_dsub>
 8013984:	4602      	mov	r2, r0
 8013986:	460b      	mov	r3, r1
 8013988:	4680      	mov	r8, r0
 801398a:	4689      	mov	r9, r1
 801398c:	4650      	mov	r0, sl
 801398e:	4659      	mov	r1, fp
 8013990:	f7ec fc46 	bl	8000220 <__aeabi_dsub>
 8013994:	4632      	mov	r2, r6
 8013996:	463b      	mov	r3, r7
 8013998:	f7ec fc42 	bl	8000220 <__aeabi_dsub>
 801399c:	a340      	add	r3, pc, #256	@ (adr r3, 8013aa0 <__ieee754_rem_pio2+0x300>)
 801399e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139a2:	4606      	mov	r6, r0
 80139a4:	460f      	mov	r7, r1
 80139a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80139aa:	f7ec fdf1 	bl	8000590 <__aeabi_dmul>
 80139ae:	4632      	mov	r2, r6
 80139b0:	463b      	mov	r3, r7
 80139b2:	f7ec fc35 	bl	8000220 <__aeabi_dsub>
 80139b6:	4602      	mov	r2, r0
 80139b8:	460b      	mov	r3, r1
 80139ba:	4606      	mov	r6, r0
 80139bc:	460f      	mov	r7, r1
 80139be:	4640      	mov	r0, r8
 80139c0:	4649      	mov	r1, r9
 80139c2:	f7ec fc2d 	bl	8000220 <__aeabi_dsub>
 80139c6:	9a05      	ldr	r2, [sp, #20]
 80139c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80139cc:	1ad3      	subs	r3, r2, r3
 80139ce:	2b31      	cmp	r3, #49	@ 0x31
 80139d0:	dc20      	bgt.n	8013a14 <__ieee754_rem_pio2+0x274>
 80139d2:	e9c4 0100 	strd	r0, r1, [r4]
 80139d6:	46c2      	mov	sl, r8
 80139d8:	46cb      	mov	fp, r9
 80139da:	e9d4 8900 	ldrd	r8, r9, [r4]
 80139de:	4650      	mov	r0, sl
 80139e0:	4642      	mov	r2, r8
 80139e2:	464b      	mov	r3, r9
 80139e4:	4659      	mov	r1, fp
 80139e6:	f7ec fc1b 	bl	8000220 <__aeabi_dsub>
 80139ea:	463b      	mov	r3, r7
 80139ec:	4632      	mov	r2, r6
 80139ee:	f7ec fc17 	bl	8000220 <__aeabi_dsub>
 80139f2:	9b04      	ldr	r3, [sp, #16]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80139fa:	f6bf af0e 	bge.w	801381a <__ieee754_rem_pio2+0x7a>
 80139fe:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8013a02:	6063      	str	r3, [r4, #4]
 8013a04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013a08:	f8c4 8000 	str.w	r8, [r4]
 8013a0c:	60a0      	str	r0, [r4, #8]
 8013a0e:	60e3      	str	r3, [r4, #12]
 8013a10:	426d      	negs	r5, r5
 8013a12:	e702      	b.n	801381a <__ieee754_rem_pio2+0x7a>
 8013a14:	a326      	add	r3, pc, #152	@ (adr r3, 8013ab0 <__ieee754_rem_pio2+0x310>)
 8013a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a1e:	f7ec fdb7 	bl	8000590 <__aeabi_dmul>
 8013a22:	4606      	mov	r6, r0
 8013a24:	460f      	mov	r7, r1
 8013a26:	4602      	mov	r2, r0
 8013a28:	460b      	mov	r3, r1
 8013a2a:	4640      	mov	r0, r8
 8013a2c:	4649      	mov	r1, r9
 8013a2e:	f7ec fbf7 	bl	8000220 <__aeabi_dsub>
 8013a32:	4602      	mov	r2, r0
 8013a34:	460b      	mov	r3, r1
 8013a36:	4682      	mov	sl, r0
 8013a38:	468b      	mov	fp, r1
 8013a3a:	4640      	mov	r0, r8
 8013a3c:	4649      	mov	r1, r9
 8013a3e:	f7ec fbef 	bl	8000220 <__aeabi_dsub>
 8013a42:	4632      	mov	r2, r6
 8013a44:	463b      	mov	r3, r7
 8013a46:	f7ec fbeb 	bl	8000220 <__aeabi_dsub>
 8013a4a:	a31b      	add	r3, pc, #108	@ (adr r3, 8013ab8 <__ieee754_rem_pio2+0x318>)
 8013a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a50:	4606      	mov	r6, r0
 8013a52:	460f      	mov	r7, r1
 8013a54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a58:	f7ec fd9a 	bl	8000590 <__aeabi_dmul>
 8013a5c:	4632      	mov	r2, r6
 8013a5e:	463b      	mov	r3, r7
 8013a60:	f7ec fbde 	bl	8000220 <__aeabi_dsub>
 8013a64:	4606      	mov	r6, r0
 8013a66:	460f      	mov	r7, r1
 8013a68:	e764      	b.n	8013934 <__ieee754_rem_pio2+0x194>
 8013a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8013ad8 <__ieee754_rem_pio2+0x338>)
 8013a6c:	4598      	cmp	r8, r3
 8013a6e:	d935      	bls.n	8013adc <__ieee754_rem_pio2+0x33c>
 8013a70:	4632      	mov	r2, r6
 8013a72:	463b      	mov	r3, r7
 8013a74:	4630      	mov	r0, r6
 8013a76:	4639      	mov	r1, r7
 8013a78:	f7ec fbd2 	bl	8000220 <__aeabi_dsub>
 8013a7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013a80:	e9c4 0100 	strd	r0, r1, [r4]
 8013a84:	e69e      	b.n	80137c4 <__ieee754_rem_pio2+0x24>
 8013a86:	bf00      	nop
 8013a88:	54400000 	.word	0x54400000
 8013a8c:	3ff921fb 	.word	0x3ff921fb
 8013a90:	1a626331 	.word	0x1a626331
 8013a94:	3dd0b461 	.word	0x3dd0b461
 8013a98:	1a600000 	.word	0x1a600000
 8013a9c:	3dd0b461 	.word	0x3dd0b461
 8013aa0:	2e037073 	.word	0x2e037073
 8013aa4:	3ba3198a 	.word	0x3ba3198a
 8013aa8:	6dc9c883 	.word	0x6dc9c883
 8013aac:	3fe45f30 	.word	0x3fe45f30
 8013ab0:	2e000000 	.word	0x2e000000
 8013ab4:	3ba3198a 	.word	0x3ba3198a
 8013ab8:	252049c1 	.word	0x252049c1
 8013abc:	397b839a 	.word	0x397b839a
 8013ac0:	3fe921fb 	.word	0x3fe921fb
 8013ac4:	4002d97b 	.word	0x4002d97b
 8013ac8:	3ff921fb 	.word	0x3ff921fb
 8013acc:	413921fb 	.word	0x413921fb
 8013ad0:	3fe00000 	.word	0x3fe00000
 8013ad4:	08014fc8 	.word	0x08014fc8
 8013ad8:	7fefffff 	.word	0x7fefffff
 8013adc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8013ae0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8013ae4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8013ae8:	4630      	mov	r0, r6
 8013aea:	460f      	mov	r7, r1
 8013aec:	f7ec ffea 	bl	8000ac4 <__aeabi_d2iz>
 8013af0:	f7ec fce4 	bl	80004bc <__aeabi_i2d>
 8013af4:	4602      	mov	r2, r0
 8013af6:	460b      	mov	r3, r1
 8013af8:	4630      	mov	r0, r6
 8013afa:	4639      	mov	r1, r7
 8013afc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013b00:	f7ec fb8e 	bl	8000220 <__aeabi_dsub>
 8013b04:	4b22      	ldr	r3, [pc, #136]	@ (8013b90 <__ieee754_rem_pio2+0x3f0>)
 8013b06:	2200      	movs	r2, #0
 8013b08:	f7ec fd42 	bl	8000590 <__aeabi_dmul>
 8013b0c:	460f      	mov	r7, r1
 8013b0e:	4606      	mov	r6, r0
 8013b10:	f7ec ffd8 	bl	8000ac4 <__aeabi_d2iz>
 8013b14:	f7ec fcd2 	bl	80004bc <__aeabi_i2d>
 8013b18:	4602      	mov	r2, r0
 8013b1a:	460b      	mov	r3, r1
 8013b1c:	4630      	mov	r0, r6
 8013b1e:	4639      	mov	r1, r7
 8013b20:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013b24:	f7ec fb7c 	bl	8000220 <__aeabi_dsub>
 8013b28:	4b19      	ldr	r3, [pc, #100]	@ (8013b90 <__ieee754_rem_pio2+0x3f0>)
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	f7ec fd30 	bl	8000590 <__aeabi_dmul>
 8013b30:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8013b34:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8013b38:	f04f 0803 	mov.w	r8, #3
 8013b3c:	2600      	movs	r6, #0
 8013b3e:	2700      	movs	r7, #0
 8013b40:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8013b44:	4632      	mov	r2, r6
 8013b46:	463b      	mov	r3, r7
 8013b48:	46c2      	mov	sl, r8
 8013b4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8013b4e:	f7ec ff87 	bl	8000a60 <__aeabi_dcmpeq>
 8013b52:	2800      	cmp	r0, #0
 8013b54:	d1f4      	bne.n	8013b40 <__ieee754_rem_pio2+0x3a0>
 8013b56:	4b0f      	ldr	r3, [pc, #60]	@ (8013b94 <__ieee754_rem_pio2+0x3f4>)
 8013b58:	9301      	str	r3, [sp, #4]
 8013b5a:	2302      	movs	r3, #2
 8013b5c:	9300      	str	r3, [sp, #0]
 8013b5e:	462a      	mov	r2, r5
 8013b60:	4653      	mov	r3, sl
 8013b62:	4621      	mov	r1, r4
 8013b64:	a806      	add	r0, sp, #24
 8013b66:	f000 fb5b 	bl	8014220 <__kernel_rem_pio2>
 8013b6a:	9b04      	ldr	r3, [sp, #16]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	4605      	mov	r5, r0
 8013b70:	f6bf ae53 	bge.w	801381a <__ieee754_rem_pio2+0x7a>
 8013b74:	e9d4 2100 	ldrd	r2, r1, [r4]
 8013b78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013b7c:	e9c4 2300 	strd	r2, r3, [r4]
 8013b80:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8013b84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013b88:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8013b8c:	e740      	b.n	8013a10 <__ieee754_rem_pio2+0x270>
 8013b8e:	bf00      	nop
 8013b90:	41700000 	.word	0x41700000
 8013b94:	08015048 	.word	0x08015048

08013b98 <fabs>:
 8013b98:	ec51 0b10 	vmov	r0, r1, d0
 8013b9c:	4602      	mov	r2, r0
 8013b9e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013ba2:	ec43 2b10 	vmov	d0, r2, r3
 8013ba6:	4770      	bx	lr

08013ba8 <__kernel_cosf>:
 8013ba8:	ee10 3a10 	vmov	r3, s0
 8013bac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013bb0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8013bb4:	eef0 6a40 	vmov.f32	s13, s0
 8013bb8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013bbc:	d204      	bcs.n	8013bc8 <__kernel_cosf+0x20>
 8013bbe:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8013bc2:	ee17 2a90 	vmov	r2, s15
 8013bc6:	b342      	cbz	r2, 8013c1a <__kernel_cosf+0x72>
 8013bc8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8013bcc:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8013c38 <__kernel_cosf+0x90>
 8013bd0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8013c3c <__kernel_cosf+0x94>
 8013bd4:	4a1a      	ldr	r2, [pc, #104]	@ (8013c40 <__kernel_cosf+0x98>)
 8013bd6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013bda:	4293      	cmp	r3, r2
 8013bdc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013c44 <__kernel_cosf+0x9c>
 8013be0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013be4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8013c48 <__kernel_cosf+0xa0>
 8013be8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013bec:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8013c4c <__kernel_cosf+0xa4>
 8013bf0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013bf4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8013c50 <__kernel_cosf+0xa8>
 8013bf8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013bfc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8013c00:	ee26 6a07 	vmul.f32	s12, s12, s14
 8013c04:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013c08:	eee7 0a06 	vfma.f32	s1, s14, s12
 8013c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c10:	d804      	bhi.n	8013c1c <__kernel_cosf+0x74>
 8013c12:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013c16:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013c1a:	4770      	bx	lr
 8013c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8013c54 <__kernel_cosf+0xac>)
 8013c1e:	4293      	cmp	r3, r2
 8013c20:	bf9a      	itte	ls
 8013c22:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8013c26:	ee07 3a10 	vmovls	s14, r3
 8013c2a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8013c2e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013c32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013c36:	e7ec      	b.n	8013c12 <__kernel_cosf+0x6a>
 8013c38:	ad47d74e 	.word	0xad47d74e
 8013c3c:	310f74f6 	.word	0x310f74f6
 8013c40:	3e999999 	.word	0x3e999999
 8013c44:	b493f27c 	.word	0xb493f27c
 8013c48:	37d00d01 	.word	0x37d00d01
 8013c4c:	bab60b61 	.word	0xbab60b61
 8013c50:	3d2aaaab 	.word	0x3d2aaaab
 8013c54:	3f480000 	.word	0x3f480000

08013c58 <__kernel_sinf>:
 8013c58:	ee10 3a10 	vmov	r3, s0
 8013c5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013c60:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8013c64:	d204      	bcs.n	8013c70 <__kernel_sinf+0x18>
 8013c66:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013c6a:	ee17 3a90 	vmov	r3, s15
 8013c6e:	b35b      	cbz	r3, 8013cc8 <__kernel_sinf+0x70>
 8013c70:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013c74:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8013ccc <__kernel_sinf+0x74>
 8013c78:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8013cd0 <__kernel_sinf+0x78>
 8013c7c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013c80:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8013cd4 <__kernel_sinf+0x7c>
 8013c84:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013c88:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8013cd8 <__kernel_sinf+0x80>
 8013c8c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013c90:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8013cdc <__kernel_sinf+0x84>
 8013c94:	ee60 6a07 	vmul.f32	s13, s0, s14
 8013c98:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013c9c:	b930      	cbnz	r0, 8013cac <__kernel_sinf+0x54>
 8013c9e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8013ce0 <__kernel_sinf+0x88>
 8013ca2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013ca6:	eea6 0a26 	vfma.f32	s0, s12, s13
 8013caa:	4770      	bx	lr
 8013cac:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8013cb0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8013cb4:	eee0 7a86 	vfma.f32	s15, s1, s12
 8013cb8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8013cbc:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8013ce4 <__kernel_sinf+0x8c>
 8013cc0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8013cc4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8013cc8:	4770      	bx	lr
 8013cca:	bf00      	nop
 8013ccc:	2f2ec9d3 	.word	0x2f2ec9d3
 8013cd0:	b2d72f34 	.word	0xb2d72f34
 8013cd4:	3638ef1b 	.word	0x3638ef1b
 8013cd8:	b9500d01 	.word	0xb9500d01
 8013cdc:	3c088889 	.word	0x3c088889
 8013ce0:	be2aaaab 	.word	0xbe2aaaab
 8013ce4:	3e2aaaab 	.word	0x3e2aaaab

08013ce8 <__ieee754_fmodf>:
 8013ce8:	b570      	push	{r4, r5, r6, lr}
 8013cea:	ee10 6a90 	vmov	r6, s1
 8013cee:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013cf2:	1e5a      	subs	r2, r3, #1
 8013cf4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8013cf8:	d206      	bcs.n	8013d08 <__ieee754_fmodf+0x20>
 8013cfa:	ee10 4a10 	vmov	r4, s0
 8013cfe:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 8013d02:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8013d06:	d304      	bcc.n	8013d12 <__ieee754_fmodf+0x2a>
 8013d08:	ee60 0a20 	vmul.f32	s1, s0, s1
 8013d0c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8013d10:	bd70      	pop	{r4, r5, r6, pc}
 8013d12:	4299      	cmp	r1, r3
 8013d14:	dbfc      	blt.n	8013d10 <__ieee754_fmodf+0x28>
 8013d16:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 8013d1a:	d105      	bne.n	8013d28 <__ieee754_fmodf+0x40>
 8013d1c:	4b32      	ldr	r3, [pc, #200]	@ (8013de8 <__ieee754_fmodf+0x100>)
 8013d1e:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 8013d22:	ed93 0a00 	vldr	s0, [r3]
 8013d26:	e7f3      	b.n	8013d10 <__ieee754_fmodf+0x28>
 8013d28:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8013d2c:	d146      	bne.n	8013dbc <__ieee754_fmodf+0xd4>
 8013d2e:	020a      	lsls	r2, r1, #8
 8013d30:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 8013d34:	2a00      	cmp	r2, #0
 8013d36:	dc3e      	bgt.n	8013db6 <__ieee754_fmodf+0xce>
 8013d38:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8013d3c:	bf01      	itttt	eq
 8013d3e:	021a      	lsleq	r2, r3, #8
 8013d40:	fab2 f282 	clzeq	r2, r2
 8013d44:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 8013d48:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 8013d4c:	bf16      	itet	ne
 8013d4e:	15da      	asrne	r2, r3, #23
 8013d50:	3282      	addeq	r2, #130	@ 0x82
 8013d52:	3a7f      	subne	r2, #127	@ 0x7f
 8013d54:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 8013d58:	bfbb      	ittet	lt
 8013d5a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8013d5e:	1a24      	sublt	r4, r4, r0
 8013d60:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8013d64:	40a1      	lsllt	r1, r4
 8013d66:	bfa8      	it	ge
 8013d68:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 8013d6c:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8013d70:	bfb5      	itete	lt
 8013d72:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8013d76:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 8013d7a:	1aa4      	sublt	r4, r4, r2
 8013d7c:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 8013d80:	bfb8      	it	lt
 8013d82:	fa03 f404 	lsllt.w	r4, r3, r4
 8013d86:	1a80      	subs	r0, r0, r2
 8013d88:	1b0b      	subs	r3, r1, r4
 8013d8a:	b9d0      	cbnz	r0, 8013dc2 <__ieee754_fmodf+0xda>
 8013d8c:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8013d90:	bf28      	it	cs
 8013d92:	460b      	movcs	r3, r1
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d0c1      	beq.n	8013d1c <__ieee754_fmodf+0x34>
 8013d98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013d9c:	db19      	blt.n	8013dd2 <__ieee754_fmodf+0xea>
 8013d9e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8013da2:	db19      	blt.n	8013dd8 <__ieee754_fmodf+0xf0>
 8013da4:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8013da8:	327f      	adds	r2, #127	@ 0x7f
 8013daa:	432b      	orrs	r3, r5
 8013dac:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8013db0:	ee00 3a10 	vmov	s0, r3
 8013db4:	e7ac      	b.n	8013d10 <__ieee754_fmodf+0x28>
 8013db6:	3801      	subs	r0, #1
 8013db8:	0052      	lsls	r2, r2, #1
 8013dba:	e7bb      	b.n	8013d34 <__ieee754_fmodf+0x4c>
 8013dbc:	15c8      	asrs	r0, r1, #23
 8013dbe:	387f      	subs	r0, #127	@ 0x7f
 8013dc0:	e7ba      	b.n	8013d38 <__ieee754_fmodf+0x50>
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	da02      	bge.n	8013dcc <__ieee754_fmodf+0xe4>
 8013dc6:	0049      	lsls	r1, r1, #1
 8013dc8:	3801      	subs	r0, #1
 8013dca:	e7dd      	b.n	8013d88 <__ieee754_fmodf+0xa0>
 8013dcc:	d0a6      	beq.n	8013d1c <__ieee754_fmodf+0x34>
 8013dce:	0059      	lsls	r1, r3, #1
 8013dd0:	e7fa      	b.n	8013dc8 <__ieee754_fmodf+0xe0>
 8013dd2:	005b      	lsls	r3, r3, #1
 8013dd4:	3a01      	subs	r2, #1
 8013dd6:	e7df      	b.n	8013d98 <__ieee754_fmodf+0xb0>
 8013dd8:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 8013ddc:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8013de0:	3282      	adds	r2, #130	@ 0x82
 8013de2:	4113      	asrs	r3, r2
 8013de4:	432b      	orrs	r3, r5
 8013de6:	e7e3      	b.n	8013db0 <__ieee754_fmodf+0xc8>
 8013de8:	08015150 	.word	0x08015150

08013dec <__ieee754_rem_pio2f>:
 8013dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dee:	ee10 6a10 	vmov	r6, s0
 8013df2:	4b88      	ldr	r3, [pc, #544]	@ (8014014 <__ieee754_rem_pio2f+0x228>)
 8013df4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8013df8:	429d      	cmp	r5, r3
 8013dfa:	b087      	sub	sp, #28
 8013dfc:	4604      	mov	r4, r0
 8013dfe:	d805      	bhi.n	8013e0c <__ieee754_rem_pio2f+0x20>
 8013e00:	2300      	movs	r3, #0
 8013e02:	ed80 0a00 	vstr	s0, [r0]
 8013e06:	6043      	str	r3, [r0, #4]
 8013e08:	2000      	movs	r0, #0
 8013e0a:	e022      	b.n	8013e52 <__ieee754_rem_pio2f+0x66>
 8013e0c:	4b82      	ldr	r3, [pc, #520]	@ (8014018 <__ieee754_rem_pio2f+0x22c>)
 8013e0e:	429d      	cmp	r5, r3
 8013e10:	d83a      	bhi.n	8013e88 <__ieee754_rem_pio2f+0x9c>
 8013e12:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013e16:	2e00      	cmp	r6, #0
 8013e18:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801401c <__ieee754_rem_pio2f+0x230>
 8013e1c:	4a80      	ldr	r2, [pc, #512]	@ (8014020 <__ieee754_rem_pio2f+0x234>)
 8013e1e:	f023 030f 	bic.w	r3, r3, #15
 8013e22:	dd18      	ble.n	8013e56 <__ieee754_rem_pio2f+0x6a>
 8013e24:	4293      	cmp	r3, r2
 8013e26:	ee70 7a47 	vsub.f32	s15, s0, s14
 8013e2a:	bf09      	itett	eq
 8013e2c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8014024 <__ieee754_rem_pio2f+0x238>
 8013e30:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8014028 <__ieee754_rem_pio2f+0x23c>
 8013e34:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801402c <__ieee754_rem_pio2f+0x240>
 8013e38:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8013e3c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8013e40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013e44:	ed80 7a00 	vstr	s14, [r0]
 8013e48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013e4c:	edc0 7a01 	vstr	s15, [r0, #4]
 8013e50:	2001      	movs	r0, #1
 8013e52:	b007      	add	sp, #28
 8013e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e56:	4293      	cmp	r3, r2
 8013e58:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013e5c:	bf09      	itett	eq
 8013e5e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8014024 <__ieee754_rem_pio2f+0x238>
 8013e62:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8014028 <__ieee754_rem_pio2f+0x23c>
 8013e66:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801402c <__ieee754_rem_pio2f+0x240>
 8013e6a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8013e6e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013e72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013e76:	ed80 7a00 	vstr	s14, [r0]
 8013e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e7e:	edc0 7a01 	vstr	s15, [r0, #4]
 8013e82:	f04f 30ff 	mov.w	r0, #4294967295
 8013e86:	e7e4      	b.n	8013e52 <__ieee754_rem_pio2f+0x66>
 8013e88:	4b69      	ldr	r3, [pc, #420]	@ (8014030 <__ieee754_rem_pio2f+0x244>)
 8013e8a:	429d      	cmp	r5, r3
 8013e8c:	d873      	bhi.n	8013f76 <__ieee754_rem_pio2f+0x18a>
 8013e8e:	f000 f8dd 	bl	801404c <fabsf>
 8013e92:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8014034 <__ieee754_rem_pio2f+0x248>
 8013e96:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013e9a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013e9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013ea2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013ea6:	ee17 0a90 	vmov	r0, s15
 8013eaa:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801401c <__ieee754_rem_pio2f+0x230>
 8013eae:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013eb2:	281f      	cmp	r0, #31
 8013eb4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8014028 <__ieee754_rem_pio2f+0x23c>
 8013eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ebc:	eeb1 6a47 	vneg.f32	s12, s14
 8013ec0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013ec4:	ee16 1a90 	vmov	r1, s13
 8013ec8:	dc09      	bgt.n	8013ede <__ieee754_rem_pio2f+0xf2>
 8013eca:	4a5b      	ldr	r2, [pc, #364]	@ (8014038 <__ieee754_rem_pio2f+0x24c>)
 8013ecc:	1e47      	subs	r7, r0, #1
 8013ece:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013ed2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8013ed6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8013eda:	4293      	cmp	r3, r2
 8013edc:	d107      	bne.n	8013eee <__ieee754_rem_pio2f+0x102>
 8013ede:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8013ee2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8013ee6:	2a08      	cmp	r2, #8
 8013ee8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8013eec:	dc14      	bgt.n	8013f18 <__ieee754_rem_pio2f+0x12c>
 8013eee:	6021      	str	r1, [r4, #0]
 8013ef0:	ed94 7a00 	vldr	s14, [r4]
 8013ef4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013ef8:	2e00      	cmp	r6, #0
 8013efa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013efe:	ed84 0a01 	vstr	s0, [r4, #4]
 8013f02:	daa6      	bge.n	8013e52 <__ieee754_rem_pio2f+0x66>
 8013f04:	eeb1 7a47 	vneg.f32	s14, s14
 8013f08:	eeb1 0a40 	vneg.f32	s0, s0
 8013f0c:	ed84 7a00 	vstr	s14, [r4]
 8013f10:	ed84 0a01 	vstr	s0, [r4, #4]
 8013f14:	4240      	negs	r0, r0
 8013f16:	e79c      	b.n	8013e52 <__ieee754_rem_pio2f+0x66>
 8013f18:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8014024 <__ieee754_rem_pio2f+0x238>
 8013f1c:	eef0 6a40 	vmov.f32	s13, s0
 8013f20:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013f24:	ee70 7a66 	vsub.f32	s15, s0, s13
 8013f28:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013f2c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801402c <__ieee754_rem_pio2f+0x240>
 8013f30:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8013f34:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013f38:	ee15 2a90 	vmov	r2, s11
 8013f3c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013f40:	1a5b      	subs	r3, r3, r1
 8013f42:	2b19      	cmp	r3, #25
 8013f44:	dc04      	bgt.n	8013f50 <__ieee754_rem_pio2f+0x164>
 8013f46:	edc4 5a00 	vstr	s11, [r4]
 8013f4a:	eeb0 0a66 	vmov.f32	s0, s13
 8013f4e:	e7cf      	b.n	8013ef0 <__ieee754_rem_pio2f+0x104>
 8013f50:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801403c <__ieee754_rem_pio2f+0x250>
 8013f54:	eeb0 0a66 	vmov.f32	s0, s13
 8013f58:	eea6 0a25 	vfma.f32	s0, s12, s11
 8013f5c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013f60:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8014040 <__ieee754_rem_pio2f+0x254>
 8013f64:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013f68:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013f6c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013f70:	ed84 7a00 	vstr	s14, [r4]
 8013f74:	e7bc      	b.n	8013ef0 <__ieee754_rem_pio2f+0x104>
 8013f76:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8013f7a:	d306      	bcc.n	8013f8a <__ieee754_rem_pio2f+0x19e>
 8013f7c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013f80:	edc0 7a01 	vstr	s15, [r0, #4]
 8013f84:	edc0 7a00 	vstr	s15, [r0]
 8013f88:	e73e      	b.n	8013e08 <__ieee754_rem_pio2f+0x1c>
 8013f8a:	15ea      	asrs	r2, r5, #23
 8013f8c:	3a86      	subs	r2, #134	@ 0x86
 8013f8e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013f92:	ee07 3a90 	vmov	s15, r3
 8013f96:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013f9a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8014044 <__ieee754_rem_pio2f+0x258>
 8013f9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013fa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013fa6:	ed8d 7a03 	vstr	s14, [sp, #12]
 8013faa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013fae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013fb2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013fb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013fba:	ed8d 7a04 	vstr	s14, [sp, #16]
 8013fbe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013fc2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fca:	edcd 7a05 	vstr	s15, [sp, #20]
 8013fce:	d11e      	bne.n	801400e <__ieee754_rem_pio2f+0x222>
 8013fd0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fd8:	bf0c      	ite	eq
 8013fda:	2301      	moveq	r3, #1
 8013fdc:	2302      	movne	r3, #2
 8013fde:	491a      	ldr	r1, [pc, #104]	@ (8014048 <__ieee754_rem_pio2f+0x25c>)
 8013fe0:	9101      	str	r1, [sp, #4]
 8013fe2:	2102      	movs	r1, #2
 8013fe4:	9100      	str	r1, [sp, #0]
 8013fe6:	a803      	add	r0, sp, #12
 8013fe8:	4621      	mov	r1, r4
 8013fea:	f000 fc69 	bl	80148c0 <__kernel_rem_pio2f>
 8013fee:	2e00      	cmp	r6, #0
 8013ff0:	f6bf af2f 	bge.w	8013e52 <__ieee754_rem_pio2f+0x66>
 8013ff4:	edd4 7a00 	vldr	s15, [r4]
 8013ff8:	eef1 7a67 	vneg.f32	s15, s15
 8013ffc:	edc4 7a00 	vstr	s15, [r4]
 8014000:	edd4 7a01 	vldr	s15, [r4, #4]
 8014004:	eef1 7a67 	vneg.f32	s15, s15
 8014008:	edc4 7a01 	vstr	s15, [r4, #4]
 801400c:	e782      	b.n	8013f14 <__ieee754_rem_pio2f+0x128>
 801400e:	2303      	movs	r3, #3
 8014010:	e7e5      	b.n	8013fde <__ieee754_rem_pio2f+0x1f2>
 8014012:	bf00      	nop
 8014014:	3f490fd8 	.word	0x3f490fd8
 8014018:	4016cbe3 	.word	0x4016cbe3
 801401c:	3fc90f80 	.word	0x3fc90f80
 8014020:	3fc90fd0 	.word	0x3fc90fd0
 8014024:	37354400 	.word	0x37354400
 8014028:	37354443 	.word	0x37354443
 801402c:	2e85a308 	.word	0x2e85a308
 8014030:	43490f80 	.word	0x43490f80
 8014034:	3f22f984 	.word	0x3f22f984
 8014038:	08015158 	.word	0x08015158
 801403c:	2e85a300 	.word	0x2e85a300
 8014040:	248d3132 	.word	0x248d3132
 8014044:	43800000 	.word	0x43800000
 8014048:	080151d8 	.word	0x080151d8

0801404c <fabsf>:
 801404c:	ee10 3a10 	vmov	r3, s0
 8014050:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014054:	ee00 3a10 	vmov	s0, r3
 8014058:	4770      	bx	lr
 801405a:	0000      	movs	r0, r0
 801405c:	0000      	movs	r0, r0
	...

08014060 <scalbn>:
 8014060:	b570      	push	{r4, r5, r6, lr}
 8014062:	ec55 4b10 	vmov	r4, r5, d0
 8014066:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801406a:	4606      	mov	r6, r0
 801406c:	462b      	mov	r3, r5
 801406e:	b991      	cbnz	r1, 8014096 <scalbn+0x36>
 8014070:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8014074:	4323      	orrs	r3, r4
 8014076:	d03b      	beq.n	80140f0 <scalbn+0x90>
 8014078:	4b33      	ldr	r3, [pc, #204]	@ (8014148 <scalbn+0xe8>)
 801407a:	4620      	mov	r0, r4
 801407c:	4629      	mov	r1, r5
 801407e:	2200      	movs	r2, #0
 8014080:	f7ec fa86 	bl	8000590 <__aeabi_dmul>
 8014084:	4b31      	ldr	r3, [pc, #196]	@ (801414c <scalbn+0xec>)
 8014086:	429e      	cmp	r6, r3
 8014088:	4604      	mov	r4, r0
 801408a:	460d      	mov	r5, r1
 801408c:	da0f      	bge.n	80140ae <scalbn+0x4e>
 801408e:	a326      	add	r3, pc, #152	@ (adr r3, 8014128 <scalbn+0xc8>)
 8014090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014094:	e01e      	b.n	80140d4 <scalbn+0x74>
 8014096:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801409a:	4291      	cmp	r1, r2
 801409c:	d10b      	bne.n	80140b6 <scalbn+0x56>
 801409e:	4622      	mov	r2, r4
 80140a0:	4620      	mov	r0, r4
 80140a2:	4629      	mov	r1, r5
 80140a4:	f7ec f8be 	bl	8000224 <__adddf3>
 80140a8:	4604      	mov	r4, r0
 80140aa:	460d      	mov	r5, r1
 80140ac:	e020      	b.n	80140f0 <scalbn+0x90>
 80140ae:	460b      	mov	r3, r1
 80140b0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80140b4:	3936      	subs	r1, #54	@ 0x36
 80140b6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80140ba:	4296      	cmp	r6, r2
 80140bc:	dd0d      	ble.n	80140da <scalbn+0x7a>
 80140be:	2d00      	cmp	r5, #0
 80140c0:	a11b      	add	r1, pc, #108	@ (adr r1, 8014130 <scalbn+0xd0>)
 80140c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140c6:	da02      	bge.n	80140ce <scalbn+0x6e>
 80140c8:	a11b      	add	r1, pc, #108	@ (adr r1, 8014138 <scalbn+0xd8>)
 80140ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140ce:	a318      	add	r3, pc, #96	@ (adr r3, 8014130 <scalbn+0xd0>)
 80140d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140d4:	f7ec fa5c 	bl	8000590 <__aeabi_dmul>
 80140d8:	e7e6      	b.n	80140a8 <scalbn+0x48>
 80140da:	1872      	adds	r2, r6, r1
 80140dc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80140e0:	428a      	cmp	r2, r1
 80140e2:	dcec      	bgt.n	80140be <scalbn+0x5e>
 80140e4:	2a00      	cmp	r2, #0
 80140e6:	dd06      	ble.n	80140f6 <scalbn+0x96>
 80140e8:	f36f 531e 	bfc	r3, #20, #11
 80140ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80140f0:	ec45 4b10 	vmov	d0, r4, r5
 80140f4:	bd70      	pop	{r4, r5, r6, pc}
 80140f6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80140fa:	da08      	bge.n	801410e <scalbn+0xae>
 80140fc:	2d00      	cmp	r5, #0
 80140fe:	a10a      	add	r1, pc, #40	@ (adr r1, 8014128 <scalbn+0xc8>)
 8014100:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014104:	dac3      	bge.n	801408e <scalbn+0x2e>
 8014106:	a10e      	add	r1, pc, #56	@ (adr r1, 8014140 <scalbn+0xe0>)
 8014108:	e9d1 0100 	ldrd	r0, r1, [r1]
 801410c:	e7bf      	b.n	801408e <scalbn+0x2e>
 801410e:	3236      	adds	r2, #54	@ 0x36
 8014110:	f36f 531e 	bfc	r3, #20, #11
 8014114:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014118:	4620      	mov	r0, r4
 801411a:	4b0d      	ldr	r3, [pc, #52]	@ (8014150 <scalbn+0xf0>)
 801411c:	4629      	mov	r1, r5
 801411e:	2200      	movs	r2, #0
 8014120:	e7d8      	b.n	80140d4 <scalbn+0x74>
 8014122:	bf00      	nop
 8014124:	f3af 8000 	nop.w
 8014128:	c2f8f359 	.word	0xc2f8f359
 801412c:	01a56e1f 	.word	0x01a56e1f
 8014130:	8800759c 	.word	0x8800759c
 8014134:	7e37e43c 	.word	0x7e37e43c
 8014138:	8800759c 	.word	0x8800759c
 801413c:	fe37e43c 	.word	0xfe37e43c
 8014140:	c2f8f359 	.word	0xc2f8f359
 8014144:	81a56e1f 	.word	0x81a56e1f
 8014148:	43500000 	.word	0x43500000
 801414c:	ffff3cb0 	.word	0xffff3cb0
 8014150:	3c900000 	.word	0x3c900000

08014154 <scalbnf>:
 8014154:	ee10 3a10 	vmov	r3, s0
 8014158:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801415c:	d02b      	beq.n	80141b6 <scalbnf+0x62>
 801415e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8014162:	d302      	bcc.n	801416a <scalbnf+0x16>
 8014164:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014168:	4770      	bx	lr
 801416a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801416e:	d123      	bne.n	80141b8 <scalbnf+0x64>
 8014170:	4b24      	ldr	r3, [pc, #144]	@ (8014204 <scalbnf+0xb0>)
 8014172:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8014208 <scalbnf+0xb4>
 8014176:	4298      	cmp	r0, r3
 8014178:	ee20 0a27 	vmul.f32	s0, s0, s15
 801417c:	db17      	blt.n	80141ae <scalbnf+0x5a>
 801417e:	ee10 3a10 	vmov	r3, s0
 8014182:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014186:	3a19      	subs	r2, #25
 8014188:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801418c:	4288      	cmp	r0, r1
 801418e:	dd15      	ble.n	80141bc <scalbnf+0x68>
 8014190:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801420c <scalbnf+0xb8>
 8014194:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8014210 <scalbnf+0xbc>
 8014198:	ee10 3a10 	vmov	r3, s0
 801419c:	eeb0 7a67 	vmov.f32	s14, s15
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	bfb8      	it	lt
 80141a4:	eef0 7a66 	vmovlt.f32	s15, s13
 80141a8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80141ac:	4770      	bx	lr
 80141ae:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8014214 <scalbnf+0xc0>
 80141b2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80141b6:	4770      	bx	lr
 80141b8:	0dd2      	lsrs	r2, r2, #23
 80141ba:	e7e5      	b.n	8014188 <scalbnf+0x34>
 80141bc:	4410      	add	r0, r2
 80141be:	28fe      	cmp	r0, #254	@ 0xfe
 80141c0:	dce6      	bgt.n	8014190 <scalbnf+0x3c>
 80141c2:	2800      	cmp	r0, #0
 80141c4:	dd06      	ble.n	80141d4 <scalbnf+0x80>
 80141c6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80141ca:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80141ce:	ee00 3a10 	vmov	s0, r3
 80141d2:	4770      	bx	lr
 80141d4:	f110 0f16 	cmn.w	r0, #22
 80141d8:	da09      	bge.n	80141ee <scalbnf+0x9a>
 80141da:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8014214 <scalbnf+0xc0>
 80141de:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8014218 <scalbnf+0xc4>
 80141e2:	ee10 3a10 	vmov	r3, s0
 80141e6:	eeb0 7a67 	vmov.f32	s14, s15
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	e7d9      	b.n	80141a2 <scalbnf+0x4e>
 80141ee:	3019      	adds	r0, #25
 80141f0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80141f4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80141f8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801421c <scalbnf+0xc8>
 80141fc:	ee07 3a90 	vmov	s15, r3
 8014200:	e7d7      	b.n	80141b2 <scalbnf+0x5e>
 8014202:	bf00      	nop
 8014204:	ffff3cb0 	.word	0xffff3cb0
 8014208:	4c000000 	.word	0x4c000000
 801420c:	7149f2ca 	.word	0x7149f2ca
 8014210:	f149f2ca 	.word	0xf149f2ca
 8014214:	0da24260 	.word	0x0da24260
 8014218:	8da24260 	.word	0x8da24260
 801421c:	33000000 	.word	0x33000000

08014220 <__kernel_rem_pio2>:
 8014220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014224:	ed2d 8b02 	vpush	{d8}
 8014228:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801422c:	f112 0f14 	cmn.w	r2, #20
 8014230:	9306      	str	r3, [sp, #24]
 8014232:	9104      	str	r1, [sp, #16]
 8014234:	4bc2      	ldr	r3, [pc, #776]	@ (8014540 <__kernel_rem_pio2+0x320>)
 8014236:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8014238:	9008      	str	r0, [sp, #32]
 801423a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801423e:	9300      	str	r3, [sp, #0]
 8014240:	9b06      	ldr	r3, [sp, #24]
 8014242:	f103 33ff 	add.w	r3, r3, #4294967295
 8014246:	bfa8      	it	ge
 8014248:	1ed4      	subge	r4, r2, #3
 801424a:	9305      	str	r3, [sp, #20]
 801424c:	bfb2      	itee	lt
 801424e:	2400      	movlt	r4, #0
 8014250:	2318      	movge	r3, #24
 8014252:	fb94 f4f3 	sdivge	r4, r4, r3
 8014256:	f06f 0317 	mvn.w	r3, #23
 801425a:	fb04 3303 	mla	r3, r4, r3, r3
 801425e:	eb03 0b02 	add.w	fp, r3, r2
 8014262:	9b00      	ldr	r3, [sp, #0]
 8014264:	9a05      	ldr	r2, [sp, #20]
 8014266:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8014530 <__kernel_rem_pio2+0x310>
 801426a:	eb03 0802 	add.w	r8, r3, r2
 801426e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8014270:	1aa7      	subs	r7, r4, r2
 8014272:	ae20      	add	r6, sp, #128	@ 0x80
 8014274:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014278:	2500      	movs	r5, #0
 801427a:	4545      	cmp	r5, r8
 801427c:	dd12      	ble.n	80142a4 <__kernel_rem_pio2+0x84>
 801427e:	9b06      	ldr	r3, [sp, #24]
 8014280:	aa20      	add	r2, sp, #128	@ 0x80
 8014282:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8014286:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801428a:	2700      	movs	r7, #0
 801428c:	9b00      	ldr	r3, [sp, #0]
 801428e:	429f      	cmp	r7, r3
 8014290:	dc2e      	bgt.n	80142f0 <__kernel_rem_pio2+0xd0>
 8014292:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8014530 <__kernel_rem_pio2+0x310>
 8014296:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801429a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801429e:	46a8      	mov	r8, r5
 80142a0:	2600      	movs	r6, #0
 80142a2:	e01b      	b.n	80142dc <__kernel_rem_pio2+0xbc>
 80142a4:	42ef      	cmn	r7, r5
 80142a6:	d407      	bmi.n	80142b8 <__kernel_rem_pio2+0x98>
 80142a8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80142ac:	f7ec f906 	bl	80004bc <__aeabi_i2d>
 80142b0:	e8e6 0102 	strd	r0, r1, [r6], #8
 80142b4:	3501      	adds	r5, #1
 80142b6:	e7e0      	b.n	801427a <__kernel_rem_pio2+0x5a>
 80142b8:	ec51 0b18 	vmov	r0, r1, d8
 80142bc:	e7f8      	b.n	80142b0 <__kernel_rem_pio2+0x90>
 80142be:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80142c2:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80142c6:	f7ec f963 	bl	8000590 <__aeabi_dmul>
 80142ca:	4602      	mov	r2, r0
 80142cc:	460b      	mov	r3, r1
 80142ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80142d2:	f7eb ffa7 	bl	8000224 <__adddf3>
 80142d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80142da:	3601      	adds	r6, #1
 80142dc:	9b05      	ldr	r3, [sp, #20]
 80142de:	429e      	cmp	r6, r3
 80142e0:	dded      	ble.n	80142be <__kernel_rem_pio2+0x9e>
 80142e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80142e6:	3701      	adds	r7, #1
 80142e8:	ecaa 7b02 	vstmia	sl!, {d7}
 80142ec:	3508      	adds	r5, #8
 80142ee:	e7cd      	b.n	801428c <__kernel_rem_pio2+0x6c>
 80142f0:	9b00      	ldr	r3, [sp, #0]
 80142f2:	f8dd 8000 	ldr.w	r8, [sp]
 80142f6:	aa0c      	add	r2, sp, #48	@ 0x30
 80142f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80142fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80142fe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8014300:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014304:	9309      	str	r3, [sp, #36]	@ 0x24
 8014306:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801430a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801430c:	ab98      	add	r3, sp, #608	@ 0x260
 801430e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014312:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8014316:	ed8d 7b02 	vstr	d7, [sp, #8]
 801431a:	ac0c      	add	r4, sp, #48	@ 0x30
 801431c:	ab70      	add	r3, sp, #448	@ 0x1c0
 801431e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8014322:	46a1      	mov	r9, r4
 8014324:	46c2      	mov	sl, r8
 8014326:	f1ba 0f00 	cmp.w	sl, #0
 801432a:	dc77      	bgt.n	801441c <__kernel_rem_pio2+0x1fc>
 801432c:	4658      	mov	r0, fp
 801432e:	ed9d 0b02 	vldr	d0, [sp, #8]
 8014332:	f7ff fe95 	bl	8014060 <scalbn>
 8014336:	ec57 6b10 	vmov	r6, r7, d0
 801433a:	2200      	movs	r2, #0
 801433c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8014340:	4630      	mov	r0, r6
 8014342:	4639      	mov	r1, r7
 8014344:	f7ec f924 	bl	8000590 <__aeabi_dmul>
 8014348:	ec41 0b10 	vmov	d0, r0, r1
 801434c:	f000 fd20 	bl	8014d90 <floor>
 8014350:	4b7c      	ldr	r3, [pc, #496]	@ (8014544 <__kernel_rem_pio2+0x324>)
 8014352:	ec51 0b10 	vmov	r0, r1, d0
 8014356:	2200      	movs	r2, #0
 8014358:	f7ec f91a 	bl	8000590 <__aeabi_dmul>
 801435c:	4602      	mov	r2, r0
 801435e:	460b      	mov	r3, r1
 8014360:	4630      	mov	r0, r6
 8014362:	4639      	mov	r1, r7
 8014364:	f7eb ff5c 	bl	8000220 <__aeabi_dsub>
 8014368:	460f      	mov	r7, r1
 801436a:	4606      	mov	r6, r0
 801436c:	f7ec fbaa 	bl	8000ac4 <__aeabi_d2iz>
 8014370:	9002      	str	r0, [sp, #8]
 8014372:	f7ec f8a3 	bl	80004bc <__aeabi_i2d>
 8014376:	4602      	mov	r2, r0
 8014378:	460b      	mov	r3, r1
 801437a:	4630      	mov	r0, r6
 801437c:	4639      	mov	r1, r7
 801437e:	f7eb ff4f 	bl	8000220 <__aeabi_dsub>
 8014382:	f1bb 0f00 	cmp.w	fp, #0
 8014386:	4606      	mov	r6, r0
 8014388:	460f      	mov	r7, r1
 801438a:	dd6c      	ble.n	8014466 <__kernel_rem_pio2+0x246>
 801438c:	f108 31ff 	add.w	r1, r8, #4294967295
 8014390:	ab0c      	add	r3, sp, #48	@ 0x30
 8014392:	9d02      	ldr	r5, [sp, #8]
 8014394:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014398:	f1cb 0018 	rsb	r0, fp, #24
 801439c:	fa43 f200 	asr.w	r2, r3, r0
 80143a0:	4415      	add	r5, r2
 80143a2:	4082      	lsls	r2, r0
 80143a4:	1a9b      	subs	r3, r3, r2
 80143a6:	aa0c      	add	r2, sp, #48	@ 0x30
 80143a8:	9502      	str	r5, [sp, #8]
 80143aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80143ae:	f1cb 0217 	rsb	r2, fp, #23
 80143b2:	fa43 f902 	asr.w	r9, r3, r2
 80143b6:	f1b9 0f00 	cmp.w	r9, #0
 80143ba:	dd64      	ble.n	8014486 <__kernel_rem_pio2+0x266>
 80143bc:	9b02      	ldr	r3, [sp, #8]
 80143be:	2200      	movs	r2, #0
 80143c0:	3301      	adds	r3, #1
 80143c2:	9302      	str	r3, [sp, #8]
 80143c4:	4615      	mov	r5, r2
 80143c6:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80143ca:	4590      	cmp	r8, r2
 80143cc:	f300 80a1 	bgt.w	8014512 <__kernel_rem_pio2+0x2f2>
 80143d0:	f1bb 0f00 	cmp.w	fp, #0
 80143d4:	dd07      	ble.n	80143e6 <__kernel_rem_pio2+0x1c6>
 80143d6:	f1bb 0f01 	cmp.w	fp, #1
 80143da:	f000 80c1 	beq.w	8014560 <__kernel_rem_pio2+0x340>
 80143de:	f1bb 0f02 	cmp.w	fp, #2
 80143e2:	f000 80c8 	beq.w	8014576 <__kernel_rem_pio2+0x356>
 80143e6:	f1b9 0f02 	cmp.w	r9, #2
 80143ea:	d14c      	bne.n	8014486 <__kernel_rem_pio2+0x266>
 80143ec:	4632      	mov	r2, r6
 80143ee:	463b      	mov	r3, r7
 80143f0:	4955      	ldr	r1, [pc, #340]	@ (8014548 <__kernel_rem_pio2+0x328>)
 80143f2:	2000      	movs	r0, #0
 80143f4:	f7eb ff14 	bl	8000220 <__aeabi_dsub>
 80143f8:	4606      	mov	r6, r0
 80143fa:	460f      	mov	r7, r1
 80143fc:	2d00      	cmp	r5, #0
 80143fe:	d042      	beq.n	8014486 <__kernel_rem_pio2+0x266>
 8014400:	4658      	mov	r0, fp
 8014402:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8014538 <__kernel_rem_pio2+0x318>
 8014406:	f7ff fe2b 	bl	8014060 <scalbn>
 801440a:	4630      	mov	r0, r6
 801440c:	4639      	mov	r1, r7
 801440e:	ec53 2b10 	vmov	r2, r3, d0
 8014412:	f7eb ff05 	bl	8000220 <__aeabi_dsub>
 8014416:	4606      	mov	r6, r0
 8014418:	460f      	mov	r7, r1
 801441a:	e034      	b.n	8014486 <__kernel_rem_pio2+0x266>
 801441c:	4b4b      	ldr	r3, [pc, #300]	@ (801454c <__kernel_rem_pio2+0x32c>)
 801441e:	2200      	movs	r2, #0
 8014420:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014424:	f7ec f8b4 	bl	8000590 <__aeabi_dmul>
 8014428:	f7ec fb4c 	bl	8000ac4 <__aeabi_d2iz>
 801442c:	f7ec f846 	bl	80004bc <__aeabi_i2d>
 8014430:	4b47      	ldr	r3, [pc, #284]	@ (8014550 <__kernel_rem_pio2+0x330>)
 8014432:	2200      	movs	r2, #0
 8014434:	4606      	mov	r6, r0
 8014436:	460f      	mov	r7, r1
 8014438:	f7ec f8aa 	bl	8000590 <__aeabi_dmul>
 801443c:	4602      	mov	r2, r0
 801443e:	460b      	mov	r3, r1
 8014440:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014444:	f7eb feec 	bl	8000220 <__aeabi_dsub>
 8014448:	f7ec fb3c 	bl	8000ac4 <__aeabi_d2iz>
 801444c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8014450:	f849 0b04 	str.w	r0, [r9], #4
 8014454:	4639      	mov	r1, r7
 8014456:	4630      	mov	r0, r6
 8014458:	f7eb fee4 	bl	8000224 <__adddf3>
 801445c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014460:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014464:	e75f      	b.n	8014326 <__kernel_rem_pio2+0x106>
 8014466:	d107      	bne.n	8014478 <__kernel_rem_pio2+0x258>
 8014468:	f108 33ff 	add.w	r3, r8, #4294967295
 801446c:	aa0c      	add	r2, sp, #48	@ 0x30
 801446e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014472:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8014476:	e79e      	b.n	80143b6 <__kernel_rem_pio2+0x196>
 8014478:	4b36      	ldr	r3, [pc, #216]	@ (8014554 <__kernel_rem_pio2+0x334>)
 801447a:	2200      	movs	r2, #0
 801447c:	f7ec fb0e 	bl	8000a9c <__aeabi_dcmpge>
 8014480:	2800      	cmp	r0, #0
 8014482:	d143      	bne.n	801450c <__kernel_rem_pio2+0x2ec>
 8014484:	4681      	mov	r9, r0
 8014486:	2200      	movs	r2, #0
 8014488:	2300      	movs	r3, #0
 801448a:	4630      	mov	r0, r6
 801448c:	4639      	mov	r1, r7
 801448e:	f7ec fae7 	bl	8000a60 <__aeabi_dcmpeq>
 8014492:	2800      	cmp	r0, #0
 8014494:	f000 80c1 	beq.w	801461a <__kernel_rem_pio2+0x3fa>
 8014498:	f108 33ff 	add.w	r3, r8, #4294967295
 801449c:	2200      	movs	r2, #0
 801449e:	9900      	ldr	r1, [sp, #0]
 80144a0:	428b      	cmp	r3, r1
 80144a2:	da70      	bge.n	8014586 <__kernel_rem_pio2+0x366>
 80144a4:	2a00      	cmp	r2, #0
 80144a6:	f000 808b 	beq.w	80145c0 <__kernel_rem_pio2+0x3a0>
 80144aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80144ae:	ab0c      	add	r3, sp, #48	@ 0x30
 80144b0:	f1ab 0b18 	sub.w	fp, fp, #24
 80144b4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d0f6      	beq.n	80144aa <__kernel_rem_pio2+0x28a>
 80144bc:	4658      	mov	r0, fp
 80144be:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8014538 <__kernel_rem_pio2+0x318>
 80144c2:	f7ff fdcd 	bl	8014060 <scalbn>
 80144c6:	f108 0301 	add.w	r3, r8, #1
 80144ca:	00da      	lsls	r2, r3, #3
 80144cc:	9205      	str	r2, [sp, #20]
 80144ce:	ec55 4b10 	vmov	r4, r5, d0
 80144d2:	aa70      	add	r2, sp, #448	@ 0x1c0
 80144d4:	f8df b074 	ldr.w	fp, [pc, #116]	@ 801454c <__kernel_rem_pio2+0x32c>
 80144d8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80144dc:	4646      	mov	r6, r8
 80144de:	f04f 0a00 	mov.w	sl, #0
 80144e2:	2e00      	cmp	r6, #0
 80144e4:	f280 80d1 	bge.w	801468a <__kernel_rem_pio2+0x46a>
 80144e8:	4644      	mov	r4, r8
 80144ea:	2c00      	cmp	r4, #0
 80144ec:	f2c0 80ff 	blt.w	80146ee <__kernel_rem_pio2+0x4ce>
 80144f0:	4b19      	ldr	r3, [pc, #100]	@ (8014558 <__kernel_rem_pio2+0x338>)
 80144f2:	461f      	mov	r7, r3
 80144f4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80144f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80144fa:	9306      	str	r3, [sp, #24]
 80144fc:	f04f 0a00 	mov.w	sl, #0
 8014500:	f04f 0b00 	mov.w	fp, #0
 8014504:	2600      	movs	r6, #0
 8014506:	eba8 0504 	sub.w	r5, r8, r4
 801450a:	e0e4      	b.n	80146d6 <__kernel_rem_pio2+0x4b6>
 801450c:	f04f 0902 	mov.w	r9, #2
 8014510:	e754      	b.n	80143bc <__kernel_rem_pio2+0x19c>
 8014512:	f854 3b04 	ldr.w	r3, [r4], #4
 8014516:	bb0d      	cbnz	r5, 801455c <__kernel_rem_pio2+0x33c>
 8014518:	b123      	cbz	r3, 8014524 <__kernel_rem_pio2+0x304>
 801451a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801451e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014522:	2301      	movs	r3, #1
 8014524:	3201      	adds	r2, #1
 8014526:	461d      	mov	r5, r3
 8014528:	e74f      	b.n	80143ca <__kernel_rem_pio2+0x1aa>
 801452a:	bf00      	nop
 801452c:	f3af 8000 	nop.w
	...
 801453c:	3ff00000 	.word	0x3ff00000
 8014540:	08015530 	.word	0x08015530
 8014544:	40200000 	.word	0x40200000
 8014548:	3ff00000 	.word	0x3ff00000
 801454c:	3e700000 	.word	0x3e700000
 8014550:	41700000 	.word	0x41700000
 8014554:	3fe00000 	.word	0x3fe00000
 8014558:	080154f0 	.word	0x080154f0
 801455c:	1acb      	subs	r3, r1, r3
 801455e:	e7de      	b.n	801451e <__kernel_rem_pio2+0x2fe>
 8014560:	f108 32ff 	add.w	r2, r8, #4294967295
 8014564:	ab0c      	add	r3, sp, #48	@ 0x30
 8014566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801456a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801456e:	a90c      	add	r1, sp, #48	@ 0x30
 8014570:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014574:	e737      	b.n	80143e6 <__kernel_rem_pio2+0x1c6>
 8014576:	f108 32ff 	add.w	r2, r8, #4294967295
 801457a:	ab0c      	add	r3, sp, #48	@ 0x30
 801457c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014580:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014584:	e7f3      	b.n	801456e <__kernel_rem_pio2+0x34e>
 8014586:	a90c      	add	r1, sp, #48	@ 0x30
 8014588:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801458c:	3b01      	subs	r3, #1
 801458e:	430a      	orrs	r2, r1
 8014590:	e785      	b.n	801449e <__kernel_rem_pio2+0x27e>
 8014592:	3401      	adds	r4, #1
 8014594:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014598:	2a00      	cmp	r2, #0
 801459a:	d0fa      	beq.n	8014592 <__kernel_rem_pio2+0x372>
 801459c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801459e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80145a2:	eb0d 0503 	add.w	r5, sp, r3
 80145a6:	9b06      	ldr	r3, [sp, #24]
 80145a8:	aa20      	add	r2, sp, #128	@ 0x80
 80145aa:	4443      	add	r3, r8
 80145ac:	f108 0701 	add.w	r7, r8, #1
 80145b0:	3d98      	subs	r5, #152	@ 0x98
 80145b2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80145b6:	4444      	add	r4, r8
 80145b8:	42bc      	cmp	r4, r7
 80145ba:	da04      	bge.n	80145c6 <__kernel_rem_pio2+0x3a6>
 80145bc:	46a0      	mov	r8, r4
 80145be:	e6a2      	b.n	8014306 <__kernel_rem_pio2+0xe6>
 80145c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80145c2:	2401      	movs	r4, #1
 80145c4:	e7e6      	b.n	8014594 <__kernel_rem_pio2+0x374>
 80145c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145c8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80145cc:	f7eb ff76 	bl	80004bc <__aeabi_i2d>
 80145d0:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8014890 <__kernel_rem_pio2+0x670>
 80145d4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80145d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80145dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80145e0:	46b2      	mov	sl, r6
 80145e2:	f04f 0800 	mov.w	r8, #0
 80145e6:	9b05      	ldr	r3, [sp, #20]
 80145e8:	4598      	cmp	r8, r3
 80145ea:	dd05      	ble.n	80145f8 <__kernel_rem_pio2+0x3d8>
 80145ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80145f0:	3701      	adds	r7, #1
 80145f2:	eca5 7b02 	vstmia	r5!, {d7}
 80145f6:	e7df      	b.n	80145b8 <__kernel_rem_pio2+0x398>
 80145f8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80145fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014600:	f7eb ffc6 	bl	8000590 <__aeabi_dmul>
 8014604:	4602      	mov	r2, r0
 8014606:	460b      	mov	r3, r1
 8014608:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801460c:	f7eb fe0a 	bl	8000224 <__adddf3>
 8014610:	f108 0801 	add.w	r8, r8, #1
 8014614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014618:	e7e5      	b.n	80145e6 <__kernel_rem_pio2+0x3c6>
 801461a:	f1cb 0000 	rsb	r0, fp, #0
 801461e:	ec47 6b10 	vmov	d0, r6, r7
 8014622:	f7ff fd1d 	bl	8014060 <scalbn>
 8014626:	ec55 4b10 	vmov	r4, r5, d0
 801462a:	4b9b      	ldr	r3, [pc, #620]	@ (8014898 <__kernel_rem_pio2+0x678>)
 801462c:	2200      	movs	r2, #0
 801462e:	4620      	mov	r0, r4
 8014630:	4629      	mov	r1, r5
 8014632:	f7ec fa33 	bl	8000a9c <__aeabi_dcmpge>
 8014636:	b300      	cbz	r0, 801467a <__kernel_rem_pio2+0x45a>
 8014638:	4b98      	ldr	r3, [pc, #608]	@ (801489c <__kernel_rem_pio2+0x67c>)
 801463a:	2200      	movs	r2, #0
 801463c:	4620      	mov	r0, r4
 801463e:	4629      	mov	r1, r5
 8014640:	f7eb ffa6 	bl	8000590 <__aeabi_dmul>
 8014644:	f7ec fa3e 	bl	8000ac4 <__aeabi_d2iz>
 8014648:	4606      	mov	r6, r0
 801464a:	f7eb ff37 	bl	80004bc <__aeabi_i2d>
 801464e:	4b92      	ldr	r3, [pc, #584]	@ (8014898 <__kernel_rem_pio2+0x678>)
 8014650:	2200      	movs	r2, #0
 8014652:	f7eb ff9d 	bl	8000590 <__aeabi_dmul>
 8014656:	460b      	mov	r3, r1
 8014658:	4602      	mov	r2, r0
 801465a:	4629      	mov	r1, r5
 801465c:	4620      	mov	r0, r4
 801465e:	f7eb fddf 	bl	8000220 <__aeabi_dsub>
 8014662:	f7ec fa2f 	bl	8000ac4 <__aeabi_d2iz>
 8014666:	ab0c      	add	r3, sp, #48	@ 0x30
 8014668:	f10b 0b18 	add.w	fp, fp, #24
 801466c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8014670:	f108 0801 	add.w	r8, r8, #1
 8014674:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8014678:	e720      	b.n	80144bc <__kernel_rem_pio2+0x29c>
 801467a:	4620      	mov	r0, r4
 801467c:	4629      	mov	r1, r5
 801467e:	f7ec fa21 	bl	8000ac4 <__aeabi_d2iz>
 8014682:	ab0c      	add	r3, sp, #48	@ 0x30
 8014684:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8014688:	e718      	b.n	80144bc <__kernel_rem_pio2+0x29c>
 801468a:	ab0c      	add	r3, sp, #48	@ 0x30
 801468c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014690:	f7eb ff14 	bl	80004bc <__aeabi_i2d>
 8014694:	4622      	mov	r2, r4
 8014696:	462b      	mov	r3, r5
 8014698:	f7eb ff7a 	bl	8000590 <__aeabi_dmul>
 801469c:	4652      	mov	r2, sl
 801469e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80146a2:	465b      	mov	r3, fp
 80146a4:	4620      	mov	r0, r4
 80146a6:	4629      	mov	r1, r5
 80146a8:	f7eb ff72 	bl	8000590 <__aeabi_dmul>
 80146ac:	3e01      	subs	r6, #1
 80146ae:	4604      	mov	r4, r0
 80146b0:	460d      	mov	r5, r1
 80146b2:	e716      	b.n	80144e2 <__kernel_rem_pio2+0x2c2>
 80146b4:	9906      	ldr	r1, [sp, #24]
 80146b6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80146ba:	9106      	str	r1, [sp, #24]
 80146bc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80146c0:	f7eb ff66 	bl	8000590 <__aeabi_dmul>
 80146c4:	4602      	mov	r2, r0
 80146c6:	460b      	mov	r3, r1
 80146c8:	4650      	mov	r0, sl
 80146ca:	4659      	mov	r1, fp
 80146cc:	f7eb fdaa 	bl	8000224 <__adddf3>
 80146d0:	3601      	adds	r6, #1
 80146d2:	4682      	mov	sl, r0
 80146d4:	468b      	mov	fp, r1
 80146d6:	9b00      	ldr	r3, [sp, #0]
 80146d8:	429e      	cmp	r6, r3
 80146da:	dc01      	bgt.n	80146e0 <__kernel_rem_pio2+0x4c0>
 80146dc:	42ae      	cmp	r6, r5
 80146de:	dde9      	ble.n	80146b4 <__kernel_rem_pio2+0x494>
 80146e0:	ab48      	add	r3, sp, #288	@ 0x120
 80146e2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80146e6:	e9c5 ab00 	strd	sl, fp, [r5]
 80146ea:	3c01      	subs	r4, #1
 80146ec:	e6fd      	b.n	80144ea <__kernel_rem_pio2+0x2ca>
 80146ee:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80146f0:	2b02      	cmp	r3, #2
 80146f2:	dc0b      	bgt.n	801470c <__kernel_rem_pio2+0x4ec>
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	dc35      	bgt.n	8014764 <__kernel_rem_pio2+0x544>
 80146f8:	d059      	beq.n	80147ae <__kernel_rem_pio2+0x58e>
 80146fa:	9b02      	ldr	r3, [sp, #8]
 80146fc:	f003 0007 	and.w	r0, r3, #7
 8014700:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8014704:	ecbd 8b02 	vpop	{d8}
 8014708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801470c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801470e:	2b03      	cmp	r3, #3
 8014710:	d1f3      	bne.n	80146fa <__kernel_rem_pio2+0x4da>
 8014712:	9b05      	ldr	r3, [sp, #20]
 8014714:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014718:	eb0d 0403 	add.w	r4, sp, r3
 801471c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8014720:	4625      	mov	r5, r4
 8014722:	46c2      	mov	sl, r8
 8014724:	f1ba 0f00 	cmp.w	sl, #0
 8014728:	dc69      	bgt.n	80147fe <__kernel_rem_pio2+0x5de>
 801472a:	4645      	mov	r5, r8
 801472c:	2d01      	cmp	r5, #1
 801472e:	f300 8087 	bgt.w	8014840 <__kernel_rem_pio2+0x620>
 8014732:	9c05      	ldr	r4, [sp, #20]
 8014734:	ab48      	add	r3, sp, #288	@ 0x120
 8014736:	441c      	add	r4, r3
 8014738:	2000      	movs	r0, #0
 801473a:	2100      	movs	r1, #0
 801473c:	f1b8 0f01 	cmp.w	r8, #1
 8014740:	f300 809c 	bgt.w	801487c <__kernel_rem_pio2+0x65c>
 8014744:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8014748:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 801474c:	f1b9 0f00 	cmp.w	r9, #0
 8014750:	f040 80a6 	bne.w	80148a0 <__kernel_rem_pio2+0x680>
 8014754:	9b04      	ldr	r3, [sp, #16]
 8014756:	e9c3 5600 	strd	r5, r6, [r3]
 801475a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801475e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014762:	e7ca      	b.n	80146fa <__kernel_rem_pio2+0x4da>
 8014764:	9d05      	ldr	r5, [sp, #20]
 8014766:	ab48      	add	r3, sp, #288	@ 0x120
 8014768:	441d      	add	r5, r3
 801476a:	4644      	mov	r4, r8
 801476c:	2000      	movs	r0, #0
 801476e:	2100      	movs	r1, #0
 8014770:	2c00      	cmp	r4, #0
 8014772:	da35      	bge.n	80147e0 <__kernel_rem_pio2+0x5c0>
 8014774:	f1b9 0f00 	cmp.w	r9, #0
 8014778:	d038      	beq.n	80147ec <__kernel_rem_pio2+0x5cc>
 801477a:	4602      	mov	r2, r0
 801477c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014780:	9c04      	ldr	r4, [sp, #16]
 8014782:	e9c4 2300 	strd	r2, r3, [r4]
 8014786:	4602      	mov	r2, r0
 8014788:	460b      	mov	r3, r1
 801478a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801478e:	f7eb fd47 	bl	8000220 <__aeabi_dsub>
 8014792:	ad4a      	add	r5, sp, #296	@ 0x128
 8014794:	2401      	movs	r4, #1
 8014796:	45a0      	cmp	r8, r4
 8014798:	da2b      	bge.n	80147f2 <__kernel_rem_pio2+0x5d2>
 801479a:	f1b9 0f00 	cmp.w	r9, #0
 801479e:	d002      	beq.n	80147a6 <__kernel_rem_pio2+0x586>
 80147a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80147a4:	4619      	mov	r1, r3
 80147a6:	9b04      	ldr	r3, [sp, #16]
 80147a8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80147ac:	e7a5      	b.n	80146fa <__kernel_rem_pio2+0x4da>
 80147ae:	9c05      	ldr	r4, [sp, #20]
 80147b0:	ab48      	add	r3, sp, #288	@ 0x120
 80147b2:	441c      	add	r4, r3
 80147b4:	2000      	movs	r0, #0
 80147b6:	2100      	movs	r1, #0
 80147b8:	f1b8 0f00 	cmp.w	r8, #0
 80147bc:	da09      	bge.n	80147d2 <__kernel_rem_pio2+0x5b2>
 80147be:	f1b9 0f00 	cmp.w	r9, #0
 80147c2:	d002      	beq.n	80147ca <__kernel_rem_pio2+0x5aa>
 80147c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80147c8:	4619      	mov	r1, r3
 80147ca:	9b04      	ldr	r3, [sp, #16]
 80147cc:	e9c3 0100 	strd	r0, r1, [r3]
 80147d0:	e793      	b.n	80146fa <__kernel_rem_pio2+0x4da>
 80147d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80147d6:	f7eb fd25 	bl	8000224 <__adddf3>
 80147da:	f108 38ff 	add.w	r8, r8, #4294967295
 80147de:	e7eb      	b.n	80147b8 <__kernel_rem_pio2+0x598>
 80147e0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80147e4:	f7eb fd1e 	bl	8000224 <__adddf3>
 80147e8:	3c01      	subs	r4, #1
 80147ea:	e7c1      	b.n	8014770 <__kernel_rem_pio2+0x550>
 80147ec:	4602      	mov	r2, r0
 80147ee:	460b      	mov	r3, r1
 80147f0:	e7c6      	b.n	8014780 <__kernel_rem_pio2+0x560>
 80147f2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80147f6:	f7eb fd15 	bl	8000224 <__adddf3>
 80147fa:	3401      	adds	r4, #1
 80147fc:	e7cb      	b.n	8014796 <__kernel_rem_pio2+0x576>
 80147fe:	ed35 7b02 	vldmdb	r5!, {d7}
 8014802:	ed8d 7b00 	vstr	d7, [sp]
 8014806:	ed95 7b02 	vldr	d7, [r5, #8]
 801480a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801480e:	ec53 2b17 	vmov	r2, r3, d7
 8014812:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014816:	f7eb fd05 	bl	8000224 <__adddf3>
 801481a:	4602      	mov	r2, r0
 801481c:	460b      	mov	r3, r1
 801481e:	4606      	mov	r6, r0
 8014820:	460f      	mov	r7, r1
 8014822:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014826:	f7eb fcfb 	bl	8000220 <__aeabi_dsub>
 801482a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801482e:	f7eb fcf9 	bl	8000224 <__adddf3>
 8014832:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014836:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801483a:	e9c5 6700 	strd	r6, r7, [r5]
 801483e:	e771      	b.n	8014724 <__kernel_rem_pio2+0x504>
 8014840:	ed34 7b02 	vldmdb	r4!, {d7}
 8014844:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8014848:	ec51 0b17 	vmov	r0, r1, d7
 801484c:	4652      	mov	r2, sl
 801484e:	465b      	mov	r3, fp
 8014850:	ed8d 7b00 	vstr	d7, [sp]
 8014854:	f7eb fce6 	bl	8000224 <__adddf3>
 8014858:	4602      	mov	r2, r0
 801485a:	460b      	mov	r3, r1
 801485c:	4606      	mov	r6, r0
 801485e:	460f      	mov	r7, r1
 8014860:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014864:	f7eb fcdc 	bl	8000220 <__aeabi_dsub>
 8014868:	4652      	mov	r2, sl
 801486a:	465b      	mov	r3, fp
 801486c:	f7eb fcda 	bl	8000224 <__adddf3>
 8014870:	3d01      	subs	r5, #1
 8014872:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014876:	e9c4 6700 	strd	r6, r7, [r4]
 801487a:	e757      	b.n	801472c <__kernel_rem_pio2+0x50c>
 801487c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014880:	f7eb fcd0 	bl	8000224 <__adddf3>
 8014884:	f108 38ff 	add.w	r8, r8, #4294967295
 8014888:	e758      	b.n	801473c <__kernel_rem_pio2+0x51c>
 801488a:	bf00      	nop
 801488c:	f3af 8000 	nop.w
	...
 8014898:	41700000 	.word	0x41700000
 801489c:	3e700000 	.word	0x3e700000
 80148a0:	9b04      	ldr	r3, [sp, #16]
 80148a2:	9a04      	ldr	r2, [sp, #16]
 80148a4:	601d      	str	r5, [r3, #0]
 80148a6:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 80148aa:	605c      	str	r4, [r3, #4]
 80148ac:	609f      	str	r7, [r3, #8]
 80148ae:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 80148b2:	60d3      	str	r3, [r2, #12]
 80148b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80148b8:	6110      	str	r0, [r2, #16]
 80148ba:	6153      	str	r3, [r2, #20]
 80148bc:	e71d      	b.n	80146fa <__kernel_rem_pio2+0x4da>
 80148be:	bf00      	nop

080148c0 <__kernel_rem_pio2f>:
 80148c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148c4:	ed2d 8b04 	vpush	{d8-d9}
 80148c8:	b0d9      	sub	sp, #356	@ 0x164
 80148ca:	4690      	mov	r8, r2
 80148cc:	9001      	str	r0, [sp, #4]
 80148ce:	4ab6      	ldr	r2, [pc, #728]	@ (8014ba8 <__kernel_rem_pio2f+0x2e8>)
 80148d0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80148d2:	f118 0f04 	cmn.w	r8, #4
 80148d6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80148da:	460f      	mov	r7, r1
 80148dc:	f103 3bff 	add.w	fp, r3, #4294967295
 80148e0:	db26      	blt.n	8014930 <__kernel_rem_pio2f+0x70>
 80148e2:	f1b8 0203 	subs.w	r2, r8, #3
 80148e6:	bf48      	it	mi
 80148e8:	f108 0204 	addmi.w	r2, r8, #4
 80148ec:	10d2      	asrs	r2, r2, #3
 80148ee:	1c55      	adds	r5, r2, #1
 80148f0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80148f2:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8014bb8 <__kernel_rem_pio2f+0x2f8>
 80148f6:	00e8      	lsls	r0, r5, #3
 80148f8:	eba2 060b 	sub.w	r6, r2, fp
 80148fc:	9002      	str	r0, [sp, #8]
 80148fe:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8014902:	eb0a 0c0b 	add.w	ip, sl, fp
 8014906:	ac1c      	add	r4, sp, #112	@ 0x70
 8014908:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801490c:	2000      	movs	r0, #0
 801490e:	4560      	cmp	r0, ip
 8014910:	dd10      	ble.n	8014934 <__kernel_rem_pio2f+0x74>
 8014912:	a91c      	add	r1, sp, #112	@ 0x70
 8014914:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8014918:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801491c:	2600      	movs	r6, #0
 801491e:	4556      	cmp	r6, sl
 8014920:	dc24      	bgt.n	801496c <__kernel_rem_pio2f+0xac>
 8014922:	f8dd e004 	ldr.w	lr, [sp, #4]
 8014926:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8014bb8 <__kernel_rem_pio2f+0x2f8>
 801492a:	4684      	mov	ip, r0
 801492c:	2400      	movs	r4, #0
 801492e:	e016      	b.n	801495e <__kernel_rem_pio2f+0x9e>
 8014930:	2200      	movs	r2, #0
 8014932:	e7dc      	b.n	80148ee <__kernel_rem_pio2f+0x2e>
 8014934:	42c6      	cmn	r6, r0
 8014936:	bf5d      	ittte	pl
 8014938:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801493c:	ee07 1a90 	vmovpl	s15, r1
 8014940:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8014944:	eef0 7a47 	vmovmi.f32	s15, s14
 8014948:	ece4 7a01 	vstmia	r4!, {s15}
 801494c:	3001      	adds	r0, #1
 801494e:	e7de      	b.n	801490e <__kernel_rem_pio2f+0x4e>
 8014950:	ecfe 6a01 	vldmia	lr!, {s13}
 8014954:	ed3c 7a01 	vldmdb	ip!, {s14}
 8014958:	eee6 7a87 	vfma.f32	s15, s13, s14
 801495c:	3401      	adds	r4, #1
 801495e:	455c      	cmp	r4, fp
 8014960:	ddf6      	ble.n	8014950 <__kernel_rem_pio2f+0x90>
 8014962:	ece9 7a01 	vstmia	r9!, {s15}
 8014966:	3601      	adds	r6, #1
 8014968:	3004      	adds	r0, #4
 801496a:	e7d8      	b.n	801491e <__kernel_rem_pio2f+0x5e>
 801496c:	a908      	add	r1, sp, #32
 801496e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014972:	9104      	str	r1, [sp, #16]
 8014974:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8014976:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8014bb4 <__kernel_rem_pio2f+0x2f4>
 801497a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8014bb0 <__kernel_rem_pio2f+0x2f0>
 801497e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8014982:	9203      	str	r2, [sp, #12]
 8014984:	4654      	mov	r4, sl
 8014986:	00a2      	lsls	r2, r4, #2
 8014988:	9205      	str	r2, [sp, #20]
 801498a:	aa58      	add	r2, sp, #352	@ 0x160
 801498c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8014990:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8014994:	a944      	add	r1, sp, #272	@ 0x110
 8014996:	aa08      	add	r2, sp, #32
 8014998:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801499c:	4694      	mov	ip, r2
 801499e:	4626      	mov	r6, r4
 80149a0:	2e00      	cmp	r6, #0
 80149a2:	dc4c      	bgt.n	8014a3e <__kernel_rem_pio2f+0x17e>
 80149a4:	4628      	mov	r0, r5
 80149a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80149aa:	f7ff fbd3 	bl	8014154 <scalbnf>
 80149ae:	eeb0 8a40 	vmov.f32	s16, s0
 80149b2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80149b6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80149ba:	f000 fa65 	bl	8014e88 <floorf>
 80149be:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80149c2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80149c6:	2d00      	cmp	r5, #0
 80149c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80149cc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80149d0:	ee17 9a90 	vmov	r9, s15
 80149d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80149d8:	ee38 8a67 	vsub.f32	s16, s16, s15
 80149dc:	dd41      	ble.n	8014a62 <__kernel_rem_pio2f+0x1a2>
 80149de:	f104 3cff 	add.w	ip, r4, #4294967295
 80149e2:	a908      	add	r1, sp, #32
 80149e4:	f1c5 0e08 	rsb	lr, r5, #8
 80149e8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80149ec:	fa46 f00e 	asr.w	r0, r6, lr
 80149f0:	4481      	add	r9, r0
 80149f2:	fa00 f00e 	lsl.w	r0, r0, lr
 80149f6:	1a36      	subs	r6, r6, r0
 80149f8:	f1c5 0007 	rsb	r0, r5, #7
 80149fc:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8014a00:	4106      	asrs	r6, r0
 8014a02:	2e00      	cmp	r6, #0
 8014a04:	dd3c      	ble.n	8014a80 <__kernel_rem_pio2f+0x1c0>
 8014a06:	f04f 0e00 	mov.w	lr, #0
 8014a0a:	f109 0901 	add.w	r9, r9, #1
 8014a0e:	4670      	mov	r0, lr
 8014a10:	4574      	cmp	r4, lr
 8014a12:	dc68      	bgt.n	8014ae6 <__kernel_rem_pio2f+0x226>
 8014a14:	2d00      	cmp	r5, #0
 8014a16:	dd03      	ble.n	8014a20 <__kernel_rem_pio2f+0x160>
 8014a18:	2d01      	cmp	r5, #1
 8014a1a:	d074      	beq.n	8014b06 <__kernel_rem_pio2f+0x246>
 8014a1c:	2d02      	cmp	r5, #2
 8014a1e:	d07d      	beq.n	8014b1c <__kernel_rem_pio2f+0x25c>
 8014a20:	2e02      	cmp	r6, #2
 8014a22:	d12d      	bne.n	8014a80 <__kernel_rem_pio2f+0x1c0>
 8014a24:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014a28:	ee30 8a48 	vsub.f32	s16, s0, s16
 8014a2c:	b340      	cbz	r0, 8014a80 <__kernel_rem_pio2f+0x1c0>
 8014a2e:	4628      	mov	r0, r5
 8014a30:	9306      	str	r3, [sp, #24]
 8014a32:	f7ff fb8f 	bl	8014154 <scalbnf>
 8014a36:	9b06      	ldr	r3, [sp, #24]
 8014a38:	ee38 8a40 	vsub.f32	s16, s16, s0
 8014a3c:	e020      	b.n	8014a80 <__kernel_rem_pio2f+0x1c0>
 8014a3e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8014a42:	3e01      	subs	r6, #1
 8014a44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a4c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8014a50:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014a54:	ecac 0a01 	vstmia	ip!, {s0}
 8014a58:	ed30 0a01 	vldmdb	r0!, {s0}
 8014a5c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014a60:	e79e      	b.n	80149a0 <__kernel_rem_pio2f+0xe0>
 8014a62:	d105      	bne.n	8014a70 <__kernel_rem_pio2f+0x1b0>
 8014a64:	1e60      	subs	r0, r4, #1
 8014a66:	a908      	add	r1, sp, #32
 8014a68:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8014a6c:	11f6      	asrs	r6, r6, #7
 8014a6e:	e7c8      	b.n	8014a02 <__kernel_rem_pio2f+0x142>
 8014a70:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014a74:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a7c:	da31      	bge.n	8014ae2 <__kernel_rem_pio2f+0x222>
 8014a7e:	2600      	movs	r6, #0
 8014a80:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a88:	f040 8098 	bne.w	8014bbc <__kernel_rem_pio2f+0x2fc>
 8014a8c:	1e60      	subs	r0, r4, #1
 8014a8e:	2200      	movs	r2, #0
 8014a90:	4550      	cmp	r0, sl
 8014a92:	da4b      	bge.n	8014b2c <__kernel_rem_pio2f+0x26c>
 8014a94:	2a00      	cmp	r2, #0
 8014a96:	d065      	beq.n	8014b64 <__kernel_rem_pio2f+0x2a4>
 8014a98:	3c01      	subs	r4, #1
 8014a9a:	ab08      	add	r3, sp, #32
 8014a9c:	3d08      	subs	r5, #8
 8014a9e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d0f8      	beq.n	8014a98 <__kernel_rem_pio2f+0x1d8>
 8014aa6:	4628      	mov	r0, r5
 8014aa8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014aac:	f7ff fb52 	bl	8014154 <scalbnf>
 8014ab0:	1c63      	adds	r3, r4, #1
 8014ab2:	aa44      	add	r2, sp, #272	@ 0x110
 8014ab4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8014bb4 <__kernel_rem_pio2f+0x2f4>
 8014ab8:	0099      	lsls	r1, r3, #2
 8014aba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014abe:	4623      	mov	r3, r4
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	f280 80a9 	bge.w	8014c18 <__kernel_rem_pio2f+0x358>
 8014ac6:	4623      	mov	r3, r4
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	f2c0 80c7 	blt.w	8014c5c <__kernel_rem_pio2f+0x39c>
 8014ace:	aa44      	add	r2, sp, #272	@ 0x110
 8014ad0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8014ad4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8014bac <__kernel_rem_pio2f+0x2ec>
 8014ad8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8014bb8 <__kernel_rem_pio2f+0x2f8>
 8014adc:	2000      	movs	r0, #0
 8014ade:	1ae2      	subs	r2, r4, r3
 8014ae0:	e0b1      	b.n	8014c46 <__kernel_rem_pio2f+0x386>
 8014ae2:	2602      	movs	r6, #2
 8014ae4:	e78f      	b.n	8014a06 <__kernel_rem_pio2f+0x146>
 8014ae6:	f852 1b04 	ldr.w	r1, [r2], #4
 8014aea:	b948      	cbnz	r0, 8014b00 <__kernel_rem_pio2f+0x240>
 8014aec:	b121      	cbz	r1, 8014af8 <__kernel_rem_pio2f+0x238>
 8014aee:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8014af2:	f842 1c04 	str.w	r1, [r2, #-4]
 8014af6:	2101      	movs	r1, #1
 8014af8:	f10e 0e01 	add.w	lr, lr, #1
 8014afc:	4608      	mov	r0, r1
 8014afe:	e787      	b.n	8014a10 <__kernel_rem_pio2f+0x150>
 8014b00:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8014b04:	e7f5      	b.n	8014af2 <__kernel_rem_pio2f+0x232>
 8014b06:	f104 3cff 	add.w	ip, r4, #4294967295
 8014b0a:	aa08      	add	r2, sp, #32
 8014b0c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8014b10:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8014b14:	a908      	add	r1, sp, #32
 8014b16:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8014b1a:	e781      	b.n	8014a20 <__kernel_rem_pio2f+0x160>
 8014b1c:	f104 3cff 	add.w	ip, r4, #4294967295
 8014b20:	aa08      	add	r2, sp, #32
 8014b22:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8014b26:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8014b2a:	e7f3      	b.n	8014b14 <__kernel_rem_pio2f+0x254>
 8014b2c:	a908      	add	r1, sp, #32
 8014b2e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8014b32:	3801      	subs	r0, #1
 8014b34:	430a      	orrs	r2, r1
 8014b36:	e7ab      	b.n	8014a90 <__kernel_rem_pio2f+0x1d0>
 8014b38:	3201      	adds	r2, #1
 8014b3a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8014b3e:	2e00      	cmp	r6, #0
 8014b40:	d0fa      	beq.n	8014b38 <__kernel_rem_pio2f+0x278>
 8014b42:	9905      	ldr	r1, [sp, #20]
 8014b44:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8014b48:	eb0d 0001 	add.w	r0, sp, r1
 8014b4c:	18e6      	adds	r6, r4, r3
 8014b4e:	a91c      	add	r1, sp, #112	@ 0x70
 8014b50:	f104 0c01 	add.w	ip, r4, #1
 8014b54:	384c      	subs	r0, #76	@ 0x4c
 8014b56:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8014b5a:	4422      	add	r2, r4
 8014b5c:	4562      	cmp	r2, ip
 8014b5e:	da04      	bge.n	8014b6a <__kernel_rem_pio2f+0x2aa>
 8014b60:	4614      	mov	r4, r2
 8014b62:	e710      	b.n	8014986 <__kernel_rem_pio2f+0xc6>
 8014b64:	9804      	ldr	r0, [sp, #16]
 8014b66:	2201      	movs	r2, #1
 8014b68:	e7e7      	b.n	8014b3a <__kernel_rem_pio2f+0x27a>
 8014b6a:	9903      	ldr	r1, [sp, #12]
 8014b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8014b70:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8014b74:	9105      	str	r1, [sp, #20]
 8014b76:	ee07 1a90 	vmov	s15, r1
 8014b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014b7e:	2400      	movs	r4, #0
 8014b80:	ece6 7a01 	vstmia	r6!, {s15}
 8014b84:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8014bb8 <__kernel_rem_pio2f+0x2f8>
 8014b88:	46b1      	mov	r9, r6
 8014b8a:	455c      	cmp	r4, fp
 8014b8c:	dd04      	ble.n	8014b98 <__kernel_rem_pio2f+0x2d8>
 8014b8e:	ece0 7a01 	vstmia	r0!, {s15}
 8014b92:	f10c 0c01 	add.w	ip, ip, #1
 8014b96:	e7e1      	b.n	8014b5c <__kernel_rem_pio2f+0x29c>
 8014b98:	ecfe 6a01 	vldmia	lr!, {s13}
 8014b9c:	ed39 7a01 	vldmdb	r9!, {s14}
 8014ba0:	3401      	adds	r4, #1
 8014ba2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014ba6:	e7f0      	b.n	8014b8a <__kernel_rem_pio2f+0x2ca>
 8014ba8:	0801556c 	.word	0x0801556c
 8014bac:	08015540 	.word	0x08015540
 8014bb0:	43800000 	.word	0x43800000
 8014bb4:	3b800000 	.word	0x3b800000
 8014bb8:	00000000 	.word	0x00000000
 8014bbc:	9b02      	ldr	r3, [sp, #8]
 8014bbe:	eeb0 0a48 	vmov.f32	s0, s16
 8014bc2:	eba3 0008 	sub.w	r0, r3, r8
 8014bc6:	f7ff fac5 	bl	8014154 <scalbnf>
 8014bca:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8014bb0 <__kernel_rem_pio2f+0x2f0>
 8014bce:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8014bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bd6:	db19      	blt.n	8014c0c <__kernel_rem_pio2f+0x34c>
 8014bd8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8014bb4 <__kernel_rem_pio2f+0x2f4>
 8014bdc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014be0:	aa08      	add	r2, sp, #32
 8014be2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014be6:	3508      	adds	r5, #8
 8014be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014bec:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014bf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014bf4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014bf8:	ee10 3a10 	vmov	r3, s0
 8014bfc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014c00:	ee17 3a90 	vmov	r3, s15
 8014c04:	3401      	adds	r4, #1
 8014c06:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014c0a:	e74c      	b.n	8014aa6 <__kernel_rem_pio2f+0x1e6>
 8014c0c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014c10:	aa08      	add	r2, sp, #32
 8014c12:	ee10 3a10 	vmov	r3, s0
 8014c16:	e7f6      	b.n	8014c06 <__kernel_rem_pio2f+0x346>
 8014c18:	a808      	add	r0, sp, #32
 8014c1a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8014c1e:	9001      	str	r0, [sp, #4]
 8014c20:	ee07 0a90 	vmov	s15, r0
 8014c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c28:	3b01      	subs	r3, #1
 8014c2a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014c2e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014c32:	ed62 7a01 	vstmdb	r2!, {s15}
 8014c36:	e743      	b.n	8014ac0 <__kernel_rem_pio2f+0x200>
 8014c38:	ecfc 6a01 	vldmia	ip!, {s13}
 8014c3c:	ecb5 7a01 	vldmia	r5!, {s14}
 8014c40:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014c44:	3001      	adds	r0, #1
 8014c46:	4550      	cmp	r0, sl
 8014c48:	dc01      	bgt.n	8014c4e <__kernel_rem_pio2f+0x38e>
 8014c4a:	4290      	cmp	r0, r2
 8014c4c:	ddf4      	ble.n	8014c38 <__kernel_rem_pio2f+0x378>
 8014c4e:	a858      	add	r0, sp, #352	@ 0x160
 8014c50:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8014c54:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8014c58:	3b01      	subs	r3, #1
 8014c5a:	e735      	b.n	8014ac8 <__kernel_rem_pio2f+0x208>
 8014c5c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8014c5e:	2b02      	cmp	r3, #2
 8014c60:	dc09      	bgt.n	8014c76 <__kernel_rem_pio2f+0x3b6>
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	dc27      	bgt.n	8014cb6 <__kernel_rem_pio2f+0x3f6>
 8014c66:	d040      	beq.n	8014cea <__kernel_rem_pio2f+0x42a>
 8014c68:	f009 0007 	and.w	r0, r9, #7
 8014c6c:	b059      	add	sp, #356	@ 0x164
 8014c6e:	ecbd 8b04 	vpop	{d8-d9}
 8014c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c76:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8014c78:	2b03      	cmp	r3, #3
 8014c7a:	d1f5      	bne.n	8014c68 <__kernel_rem_pio2f+0x3a8>
 8014c7c:	aa30      	add	r2, sp, #192	@ 0xc0
 8014c7e:	1f0b      	subs	r3, r1, #4
 8014c80:	4413      	add	r3, r2
 8014c82:	461a      	mov	r2, r3
 8014c84:	4620      	mov	r0, r4
 8014c86:	2800      	cmp	r0, #0
 8014c88:	dc50      	bgt.n	8014d2c <__kernel_rem_pio2f+0x46c>
 8014c8a:	4622      	mov	r2, r4
 8014c8c:	2a01      	cmp	r2, #1
 8014c8e:	dc5d      	bgt.n	8014d4c <__kernel_rem_pio2f+0x48c>
 8014c90:	ab30      	add	r3, sp, #192	@ 0xc0
 8014c92:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8014bb8 <__kernel_rem_pio2f+0x2f8>
 8014c96:	440b      	add	r3, r1
 8014c98:	2c01      	cmp	r4, #1
 8014c9a:	dc67      	bgt.n	8014d6c <__kernel_rem_pio2f+0x4ac>
 8014c9c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8014ca0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8014ca4:	2e00      	cmp	r6, #0
 8014ca6:	d167      	bne.n	8014d78 <__kernel_rem_pio2f+0x4b8>
 8014ca8:	edc7 6a00 	vstr	s13, [r7]
 8014cac:	ed87 7a01 	vstr	s14, [r7, #4]
 8014cb0:	edc7 7a02 	vstr	s15, [r7, #8]
 8014cb4:	e7d8      	b.n	8014c68 <__kernel_rem_pio2f+0x3a8>
 8014cb6:	ab30      	add	r3, sp, #192	@ 0xc0
 8014cb8:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8014bb8 <__kernel_rem_pio2f+0x2f8>
 8014cbc:	440b      	add	r3, r1
 8014cbe:	4622      	mov	r2, r4
 8014cc0:	2a00      	cmp	r2, #0
 8014cc2:	da24      	bge.n	8014d0e <__kernel_rem_pio2f+0x44e>
 8014cc4:	b34e      	cbz	r6, 8014d1a <__kernel_rem_pio2f+0x45a>
 8014cc6:	eef1 7a47 	vneg.f32	s15, s14
 8014cca:	edc7 7a00 	vstr	s15, [r7]
 8014cce:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8014cd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014cd6:	aa31      	add	r2, sp, #196	@ 0xc4
 8014cd8:	2301      	movs	r3, #1
 8014cda:	429c      	cmp	r4, r3
 8014cdc:	da20      	bge.n	8014d20 <__kernel_rem_pio2f+0x460>
 8014cde:	b10e      	cbz	r6, 8014ce4 <__kernel_rem_pio2f+0x424>
 8014ce0:	eef1 7a67 	vneg.f32	s15, s15
 8014ce4:	edc7 7a01 	vstr	s15, [r7, #4]
 8014ce8:	e7be      	b.n	8014c68 <__kernel_rem_pio2f+0x3a8>
 8014cea:	ab30      	add	r3, sp, #192	@ 0xc0
 8014cec:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8014bb8 <__kernel_rem_pio2f+0x2f8>
 8014cf0:	440b      	add	r3, r1
 8014cf2:	2c00      	cmp	r4, #0
 8014cf4:	da05      	bge.n	8014d02 <__kernel_rem_pio2f+0x442>
 8014cf6:	b10e      	cbz	r6, 8014cfc <__kernel_rem_pio2f+0x43c>
 8014cf8:	eef1 7a67 	vneg.f32	s15, s15
 8014cfc:	edc7 7a00 	vstr	s15, [r7]
 8014d00:	e7b2      	b.n	8014c68 <__kernel_rem_pio2f+0x3a8>
 8014d02:	ed33 7a01 	vldmdb	r3!, {s14}
 8014d06:	3c01      	subs	r4, #1
 8014d08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d0c:	e7f1      	b.n	8014cf2 <__kernel_rem_pio2f+0x432>
 8014d0e:	ed73 7a01 	vldmdb	r3!, {s15}
 8014d12:	3a01      	subs	r2, #1
 8014d14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014d18:	e7d2      	b.n	8014cc0 <__kernel_rem_pio2f+0x400>
 8014d1a:	eef0 7a47 	vmov.f32	s15, s14
 8014d1e:	e7d4      	b.n	8014cca <__kernel_rem_pio2f+0x40a>
 8014d20:	ecb2 7a01 	vldmia	r2!, {s14}
 8014d24:	3301      	adds	r3, #1
 8014d26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d2a:	e7d6      	b.n	8014cda <__kernel_rem_pio2f+0x41a>
 8014d2c:	ed72 7a01 	vldmdb	r2!, {s15}
 8014d30:	edd2 6a01 	vldr	s13, [r2, #4]
 8014d34:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014d38:	3801      	subs	r0, #1
 8014d3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014d3e:	ed82 7a00 	vstr	s14, [r2]
 8014d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014d46:	edc2 7a01 	vstr	s15, [r2, #4]
 8014d4a:	e79c      	b.n	8014c86 <__kernel_rem_pio2f+0x3c6>
 8014d4c:	ed73 7a01 	vldmdb	r3!, {s15}
 8014d50:	edd3 6a01 	vldr	s13, [r3, #4]
 8014d54:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014d58:	3a01      	subs	r2, #1
 8014d5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014d5e:	ed83 7a00 	vstr	s14, [r3]
 8014d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014d66:	edc3 7a01 	vstr	s15, [r3, #4]
 8014d6a:	e78f      	b.n	8014c8c <__kernel_rem_pio2f+0x3cc>
 8014d6c:	ed33 7a01 	vldmdb	r3!, {s14}
 8014d70:	3c01      	subs	r4, #1
 8014d72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d76:	e78f      	b.n	8014c98 <__kernel_rem_pio2f+0x3d8>
 8014d78:	eef1 6a66 	vneg.f32	s13, s13
 8014d7c:	eeb1 7a47 	vneg.f32	s14, s14
 8014d80:	edc7 6a00 	vstr	s13, [r7]
 8014d84:	ed87 7a01 	vstr	s14, [r7, #4]
 8014d88:	eef1 7a67 	vneg.f32	s15, s15
 8014d8c:	e790      	b.n	8014cb0 <__kernel_rem_pio2f+0x3f0>
 8014d8e:	bf00      	nop

08014d90 <floor>:
 8014d90:	ec51 0b10 	vmov	r0, r1, d0
 8014d94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d9c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8014da0:	2e13      	cmp	r6, #19
 8014da2:	460c      	mov	r4, r1
 8014da4:	4605      	mov	r5, r0
 8014da6:	4680      	mov	r8, r0
 8014da8:	dc34      	bgt.n	8014e14 <floor+0x84>
 8014daa:	2e00      	cmp	r6, #0
 8014dac:	da17      	bge.n	8014dde <floor+0x4e>
 8014dae:	a332      	add	r3, pc, #200	@ (adr r3, 8014e78 <floor+0xe8>)
 8014db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014db4:	f7eb fa36 	bl	8000224 <__adddf3>
 8014db8:	2200      	movs	r2, #0
 8014dba:	2300      	movs	r3, #0
 8014dbc:	f7eb fe78 	bl	8000ab0 <__aeabi_dcmpgt>
 8014dc0:	b150      	cbz	r0, 8014dd8 <floor+0x48>
 8014dc2:	2c00      	cmp	r4, #0
 8014dc4:	da55      	bge.n	8014e72 <floor+0xe2>
 8014dc6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8014dca:	432c      	orrs	r4, r5
 8014dcc:	2500      	movs	r5, #0
 8014dce:	42ac      	cmp	r4, r5
 8014dd0:	4c2b      	ldr	r4, [pc, #172]	@ (8014e80 <floor+0xf0>)
 8014dd2:	bf08      	it	eq
 8014dd4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8014dd8:	4621      	mov	r1, r4
 8014dda:	4628      	mov	r0, r5
 8014ddc:	e023      	b.n	8014e26 <floor+0x96>
 8014dde:	4f29      	ldr	r7, [pc, #164]	@ (8014e84 <floor+0xf4>)
 8014de0:	4137      	asrs	r7, r6
 8014de2:	ea01 0307 	and.w	r3, r1, r7
 8014de6:	4303      	orrs	r3, r0
 8014de8:	d01d      	beq.n	8014e26 <floor+0x96>
 8014dea:	a323      	add	r3, pc, #140	@ (adr r3, 8014e78 <floor+0xe8>)
 8014dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014df0:	f7eb fa18 	bl	8000224 <__adddf3>
 8014df4:	2200      	movs	r2, #0
 8014df6:	2300      	movs	r3, #0
 8014df8:	f7eb fe5a 	bl	8000ab0 <__aeabi_dcmpgt>
 8014dfc:	2800      	cmp	r0, #0
 8014dfe:	d0eb      	beq.n	8014dd8 <floor+0x48>
 8014e00:	2c00      	cmp	r4, #0
 8014e02:	bfbe      	ittt	lt
 8014e04:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8014e08:	4133      	asrlt	r3, r6
 8014e0a:	18e4      	addlt	r4, r4, r3
 8014e0c:	ea24 0407 	bic.w	r4, r4, r7
 8014e10:	2500      	movs	r5, #0
 8014e12:	e7e1      	b.n	8014dd8 <floor+0x48>
 8014e14:	2e33      	cmp	r6, #51	@ 0x33
 8014e16:	dd0a      	ble.n	8014e2e <floor+0x9e>
 8014e18:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8014e1c:	d103      	bne.n	8014e26 <floor+0x96>
 8014e1e:	4602      	mov	r2, r0
 8014e20:	460b      	mov	r3, r1
 8014e22:	f7eb f9ff 	bl	8000224 <__adddf3>
 8014e26:	ec41 0b10 	vmov	d0, r0, r1
 8014e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e2e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8014e32:	f04f 37ff 	mov.w	r7, #4294967295
 8014e36:	40df      	lsrs	r7, r3
 8014e38:	4207      	tst	r7, r0
 8014e3a:	d0f4      	beq.n	8014e26 <floor+0x96>
 8014e3c:	a30e      	add	r3, pc, #56	@ (adr r3, 8014e78 <floor+0xe8>)
 8014e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e42:	f7eb f9ef 	bl	8000224 <__adddf3>
 8014e46:	2200      	movs	r2, #0
 8014e48:	2300      	movs	r3, #0
 8014e4a:	f7eb fe31 	bl	8000ab0 <__aeabi_dcmpgt>
 8014e4e:	2800      	cmp	r0, #0
 8014e50:	d0c2      	beq.n	8014dd8 <floor+0x48>
 8014e52:	2c00      	cmp	r4, #0
 8014e54:	da0a      	bge.n	8014e6c <floor+0xdc>
 8014e56:	2e14      	cmp	r6, #20
 8014e58:	d101      	bne.n	8014e5e <floor+0xce>
 8014e5a:	3401      	adds	r4, #1
 8014e5c:	e006      	b.n	8014e6c <floor+0xdc>
 8014e5e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8014e62:	2301      	movs	r3, #1
 8014e64:	40b3      	lsls	r3, r6
 8014e66:	441d      	add	r5, r3
 8014e68:	4545      	cmp	r5, r8
 8014e6a:	d3f6      	bcc.n	8014e5a <floor+0xca>
 8014e6c:	ea25 0507 	bic.w	r5, r5, r7
 8014e70:	e7b2      	b.n	8014dd8 <floor+0x48>
 8014e72:	2500      	movs	r5, #0
 8014e74:	462c      	mov	r4, r5
 8014e76:	e7af      	b.n	8014dd8 <floor+0x48>
 8014e78:	8800759c 	.word	0x8800759c
 8014e7c:	7e37e43c 	.word	0x7e37e43c
 8014e80:	bff00000 	.word	0xbff00000
 8014e84:	000fffff 	.word	0x000fffff

08014e88 <floorf>:
 8014e88:	ee10 3a10 	vmov	r3, s0
 8014e8c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014e90:	3a7f      	subs	r2, #127	@ 0x7f
 8014e92:	2a16      	cmp	r2, #22
 8014e94:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014e98:	dc2b      	bgt.n	8014ef2 <floorf+0x6a>
 8014e9a:	2a00      	cmp	r2, #0
 8014e9c:	da12      	bge.n	8014ec4 <floorf+0x3c>
 8014e9e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8014f04 <floorf+0x7c>
 8014ea2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014ea6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014eae:	dd06      	ble.n	8014ebe <floorf+0x36>
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	da24      	bge.n	8014efe <floorf+0x76>
 8014eb4:	2900      	cmp	r1, #0
 8014eb6:	4b14      	ldr	r3, [pc, #80]	@ (8014f08 <floorf+0x80>)
 8014eb8:	bf08      	it	eq
 8014eba:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8014ebe:	ee00 3a10 	vmov	s0, r3
 8014ec2:	4770      	bx	lr
 8014ec4:	4911      	ldr	r1, [pc, #68]	@ (8014f0c <floorf+0x84>)
 8014ec6:	4111      	asrs	r1, r2
 8014ec8:	420b      	tst	r3, r1
 8014eca:	d0fa      	beq.n	8014ec2 <floorf+0x3a>
 8014ecc:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8014f04 <floorf+0x7c>
 8014ed0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014ed4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014edc:	ddef      	ble.n	8014ebe <floorf+0x36>
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	bfbe      	ittt	lt
 8014ee2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8014ee6:	fa40 f202 	asrlt.w	r2, r0, r2
 8014eea:	189b      	addlt	r3, r3, r2
 8014eec:	ea23 0301 	bic.w	r3, r3, r1
 8014ef0:	e7e5      	b.n	8014ebe <floorf+0x36>
 8014ef2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8014ef6:	d3e4      	bcc.n	8014ec2 <floorf+0x3a>
 8014ef8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014efc:	4770      	bx	lr
 8014efe:	2300      	movs	r3, #0
 8014f00:	e7dd      	b.n	8014ebe <floorf+0x36>
 8014f02:	bf00      	nop
 8014f04:	7149f2ca 	.word	0x7149f2ca
 8014f08:	bf800000 	.word	0xbf800000
 8014f0c:	007fffff 	.word	0x007fffff

08014f10 <_init>:
 8014f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f12:	bf00      	nop
 8014f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f16:	bc08      	pop	{r3}
 8014f18:	469e      	mov	lr, r3
 8014f1a:	4770      	bx	lr

08014f1c <_fini>:
 8014f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f1e:	bf00      	nop
 8014f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f22:	bc08      	pop	{r3}
 8014f24:	469e      	mov	lr, r3
 8014f26:	4770      	bx	lr
