
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a78  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  08014c50  08014c50  00015c50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080152a0  080152a0  00017610  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080152a0  080152a0  000162a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080152a8  080152a8  00017610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080152a8  080152a8  000162a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080152ac  080152ac  000162ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000610  20000000  080152b0  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002258  20000610  080158c0  00017610  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002868  080158c0  00017868  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017610  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cc02  00000000  00000000  00017640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055ce  00000000  00000000  00044242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d88  00000000  00000000  00049810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000173c  00000000  00000000  0004b598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dbc2  00000000  00000000  0004ccd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c200  00000000  00000000  0007a896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a60c  00000000  00000000  000a6a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c10a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008678  00000000  00000000  001c10e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001c9760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000610 	.word	0x20000610
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08014c38 	.word	0x08014c38

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000614 	.word	0x20000614
 8000214:	08014c38 	.word	0x08014c38

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00b f96a 	bl	800c2b8 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f00a fa53 	bl	800b49c <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fe71 	bl	8001e22 <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0.0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0.0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0.0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	4613      	mov	r3, r2
 800134a:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	88fa      	ldrh	r2, [r7, #6]
 8001356:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3328      	adds	r3, #40	@ 0x28
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	4618      	mov	r0, r3
 8001362:	f002 faf1 	bl	8003948 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8b3a      	ldrh	r2, [r7, #24]
 8001370:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001390:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800139a:	2b00      	cmp	r3, #0
 800139c:	d15f      	bne.n	800145e <MDXX_set_range+0xda>
		if (duty == 0) {
 800139e:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	d115      	bne.n	80013d8 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3310      	adds	r3, #16
 80013b0:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001530 <MDXX_set_range+0x1ac>
 80013b4:	ed97 0a02 	vldr	s0, [r7, #8]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 fbed 	bl	8003b98 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3328      	adds	r3, #40	@ 0x28
 80013c2:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001530 <MDXX_set_range+0x1ac>
 80013c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 fbe4 	bl	8003b98 <PWM_write_range>
			mdxx->cmd = 0;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80013d6:	e0a6      	b.n	8001526 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80013d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	dd1a      	ble.n	800141c <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3310      	adds	r3, #16
 80013ea:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001530 <MDXX_set_range+0x1ac>
 80013ee:	ed97 0a02 	vldr	s0, [r7, #8]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 fbd0 	bl	8003b98 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3328      	adds	r3, #40	@ 0x28
 80013fc:	edd7 0a01 	vldr	s1, [r7, #4]
 8001400:	ed97 0a02 	vldr	s0, [r7, #8]
 8001404:	4618      	mov	r0, r3
 8001406:	f002 fbc7 	bl	8003b98 <PWM_write_range>
			mdxx->cmd = duty;
 800140a:	edd7 7a01 	vldr	s15, [r7, #4]
 800140e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001412:	ee17 2a90 	vmov	r2, s15
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800141a:	e084      	b.n	8001526 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3310      	adds	r3, #16
 8001420:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001534 <MDXX_set_range+0x1b0>
 8001424:	ed97 0a02 	vldr	s0, [r7, #8]
 8001428:	4618      	mov	r0, r3
 800142a:	f002 fbb5 	bl	8003b98 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3328      	adds	r3, #40	@ 0x28
 8001432:	edd7 7a01 	vldr	s15, [r7, #4]
 8001436:	eef0 7ae7 	vabs.f32	s15, s15
 800143a:	eef0 0a67 	vmov.f32	s1, s15
 800143e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001442:	4618      	mov	r0, r3
 8001444:	f002 fba8 	bl	8003b98 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001448:	edd7 7a01 	vldr	s15, [r7, #4]
 800144c:	eef0 7ae7 	vabs.f32	s15, s15
 8001450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001454:	ee17 2a90 	vmov	r2, s15
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145c:	e063      	b.n	8001526 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001464:	2b01      	cmp	r3, #1
 8001466:	d15e      	bne.n	8001526 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8001468:	edd7 7a01 	vldr	s15, [r7, #4]
 800146c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	d115      	bne.n	80014a2 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	f00b fe5e 	bl	800d144 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3328      	adds	r3, #40	@ 0x28
 800148c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001530 <MDXX_set_range+0x1ac>
 8001490:	ed97 0a02 	vldr	s0, [r7, #8]
 8001494:	4618      	mov	r0, r3
 8001496:	f002 fb7f 	bl	8003b98 <PWM_write_range>
			mdxx->cmd = 0;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e041      	b.n	8001526 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	dd1a      	ble.n	80014e6 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014ba:	2200      	movs	r2, #0
 80014bc:	4619      	mov	r1, r3
 80014be:	f00b fe41 	bl	800d144 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3328      	adds	r3, #40	@ 0x28
 80014c6:	edd7 0a01 	vldr	s1, [r7, #4]
 80014ca:	ed97 0a02 	vldr	s0, [r7, #8]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 fb62 	bl	8003b98 <PWM_write_range>
			mdxx->cmd = duty;
 80014d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014dc:	ee17 2a90 	vmov	r2, s15
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e01f      	b.n	8001526 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014f0:	2201      	movs	r2, #1
 80014f2:	4619      	mov	r1, r3
 80014f4:	f00b fe26 	bl	800d144 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3328      	adds	r3, #40	@ 0x28
 80014fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001500:	eef0 7ae7 	vabs.f32	s15, s15
 8001504:	eef0 0a67 	vmov.f32	s1, s15
 8001508:	ed97 0a02 	vldr	s0, [r7, #8]
 800150c:	4618      	mov	r0, r3
 800150e:	f002 fb43 	bl	8003b98 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001512:	edd7 7a01 	vldr	s15, [r7, #4]
 8001516:	eef0 7ae7 	vabs.f32	s15, s15
 800151a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151e:	ee17 2a90 	vmov	r2, s15
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	00000000 	.word	0x00000000
 8001534:	42c80000 	.word	0x42c80000

08001538 <REVOLUTE_MOTOR_FFD_Init>:
	.offset = 30.07e-3,
    .c = 24.13e-3,
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	601a      	str	r2, [r3, #0]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001554:	b5b0      	push	{r4, r5, r7, lr}
 8001556:	ed2d 8b02 	vpush	{d8}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001574:	f7ff f80c 	bl	8000590 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4614      	mov	r4, r2
 800157e:	461d      	mov	r5, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001590:	f7fe fffe 	bl	8000590 <__aeabi_dmul>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4620      	mov	r0, r4
 800159a:	4629      	mov	r1, r5
 800159c:	f7fe fe42 	bl	8000224 <__adddf3>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015b0:	f7ff f918 	bl	80007e4 <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff faca 	bl	8000b54 <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 80015c4:	ed97 7a00 	vldr	s14, [r7]
 80015c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d0:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fab8 	bl	8000b54 <__aeabi_d2f>
 80015e4:	4603      	mov	r3, r0
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eeb1 8a67 	vneg.f32	s16, s15
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff faab 	bl	8000b54 <__aeabi_d2f>
 80015fe:	4604      	mov	r4, r0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff faa2 	bl	8000b54 <__aeabi_d2f>
 8001610:	4603      	mov	r3, r0
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef1 8a67 	vneg.f32	s17, s15
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fa95 	bl	8000b54 <__aeabi_d2f>
 800162a:	4603      	mov	r3, r0
 800162c:	ee02 3a10 	vmov	s4, r3
 8001630:	eef0 1a68 	vmov.f32	s3, s17
 8001634:	ee01 4a10 	vmov	s2, r4
 8001638:	eef0 0a48 	vmov.f32	s1, s16
 800163c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001640:	f000 fbef 	bl	8001e22 <mapf>
 8001644:	eef0 7a40 	vmov.f32	s15, s0
}
 8001648:	eeb0 0a67 	vmov.f32	s0, s15
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	ecbd 8b02 	vpop	{d8}
 8001654:	bdb0      	pop	{r4, r5, r7, pc}

08001656 <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	605a      	str	r2, [r3, #4]
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float s){
 800167a:	b5b0      	push	{r4, r5, r7, lr}
 800167c:	ed2d 8b02 	vpush	{d8}
 8001680:	b088      	sub	sp, #32
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	ed87 0a02 	vstr	s0, [r7, #8]
 800168a:	edc7 0a01 	vstr	s1, [r7, #4]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * (s + motor->En->offset);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	ed93 7a01 	vldr	s14, [r3, #4]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a2:	ee17 0a90 	vmov	r0, s15
 80016a6:	f7fe ff1b 	bl	80004e0 <__aeabi_f2d>
 80016aa:	4604      	mov	r4, r0
 80016ac:	460d      	mov	r5, r1
 80016ae:	68b8      	ldr	r0, [r7, #8]
 80016b0:	f7fe ff16 	bl	80004e0 <__aeabi_f2d>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	ec43 2b10 	vmov	d0, r2, r3
 80016bc:	f011 fc08 	bl	8012ed0 <sin>
 80016c0:	ec53 2b10 	vmov	r2, r3, d0
 80016c4:	4620      	mov	r0, r4
 80016c6:	4629      	mov	r1, r5
 80016c8:	f7fe ff62 	bl	8000590 <__aeabi_dmul>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4614      	mov	r4, r2
 80016d2:	461d      	mov	r5, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	ed93 7a05 	vldr	s14, [r3, #20]
 80016dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80016e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e4:	ee17 0a90 	vmov	r0, s15
 80016e8:	f7fe fefa 	bl	80004e0 <__aeabi_f2d>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4620      	mov	r0, r4
 80016f2:	4629      	mov	r1, r5
 80016f4:	f7fe ff4c 	bl	8000590 <__aeabi_dmul>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff fa28 	bl	8000b54 <__aeabi_d2f>
 8001704:	4603      	mov	r3, r0
 8001706:	61fb      	str	r3, [r7, #28]

    float gravity_compensate_rail = motor->En->slide_rail_mass * motor->En->g * sin(q) * (motor->En->c);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	edd3 7a00 	vldr	s15, [r3]
 8001718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171c:	ee17 0a90 	vmov	r0, s15
 8001720:	f7fe fede 	bl	80004e0 <__aeabi_f2d>
 8001724:	4604      	mov	r4, r0
 8001726:	460d      	mov	r5, r1
 8001728:	68b8      	ldr	r0, [r7, #8]
 800172a:	f7fe fed9 	bl	80004e0 <__aeabi_f2d>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	ec43 2b10 	vmov	d0, r2, r3
 8001736:	f011 fbcb 	bl	8012ed0 <sin>
 800173a:	ec53 2b10 	vmov	r2, r3, d0
 800173e:	4620      	mov	r0, r4
 8001740:	4629      	mov	r1, r5
 8001742:	f7fe ff25 	bl	8000590 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4614      	mov	r4, r2
 800174c:	461d      	mov	r5, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fec3 	bl	80004e0 <__aeabi_f2d>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4620      	mov	r0, r4
 8001760:	4629      	mov	r1, r5
 8001762:	f7fe ff15 	bl	8000590 <__aeabi_dmul>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff f9f1 	bl	8000b54 <__aeabi_d2f>
 8001772:	4603      	mov	r3, r0
 8001774:	61bb      	str	r3, [r7, #24]

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001786:	f7ff f82d 	bl	80007e4 <__aeabi_ddiv>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff f9df 	bl	8000b54 <__aeabi_d2f>
 8001796:	4603      	mov	r3, r0
 8001798:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter - gravity_compensate_rail) * transfer_function;
 800179a:	ed97 7a07 	vldr	s14, [r7, #28]
 800179e:	edd7 7a06 	vldr	s15, [r7, #24]
 80017a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80017aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ae:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f7ff f9c9 	bl	8000b54 <__aeabi_d2f>
 80017c2:	4603      	mov	r3, r0
 80017c4:	ee07 3a90 	vmov	s15, r3
 80017c8:	eeb1 8a67 	vneg.f32	s16, s15
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff f9bc 	bl	8000b54 <__aeabi_d2f>
 80017dc:	4604      	mov	r4, r0
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f7ff f9b3 	bl	8000b54 <__aeabi_d2f>
 80017ee:	4603      	mov	r3, r0
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eef1 8a67 	vneg.f32	s17, s15
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	f7ff f9a6 	bl	8000b54 <__aeabi_d2f>
 8001808:	4603      	mov	r3, r0
 800180a:	ee02 3a10 	vmov	s4, r3
 800180e:	eef0 1a68 	vmov.f32	s3, s17
 8001812:	ee01 4a10 	vmov	s2, r4
 8001816:	eef0 0a48 	vmov.f32	s1, s16
 800181a:	ed97 0a04 	vldr	s0, [r7, #16]
 800181e:	f000 fb00 	bl	8001e22 <mapf>
 8001822:	eef0 7a40 	vmov.f32	s15, s0
}
 8001826:	eeb0 0a67 	vmov.f32	s0, s15
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	ecbd 8b02 	vpop	{d8}
 8001832:	bdb0      	pop	{r4, r5, r7, pc}

08001834 <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	601a      	str	r2, [r3, #0]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <PRISMATIC_MOTOR_FFD_Compute>:

float PRISMATIC_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float sd) {
 8001850:	b5b0      	push	{r4, r5, r7, lr}
 8001852:	ed2d 8b02 	vpush	{d8}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R  + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001870:	f7fe fe8e 	bl	8000590 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4614      	mov	r4, r2
 800187a:	461d      	mov	r5, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800188c:	f7fe fe80 	bl	8000590 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4620      	mov	r0, r4
 8001896:	4629      	mov	r1, r5
 8001898:	f7fe fcc4 	bl	8000224 <__adddf3>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018ac:	f7fe ff9a 	bl	80007e4 <__aeabi_ddiv>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff f94c 	bl	8000b54 <__aeabi_d2f>
 80018bc:	4603      	mov	r3, r0
 80018be:	60fb      	str	r3, [r7, #12]

    float v = sd * transfer_function;
 80018c0:	ed97 7a00 	vldr	s14, [r7]
 80018c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018cc:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v * 0.1, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80018d0:	68b8      	ldr	r0, [r7, #8]
 80018d2:	f7fe fe05 	bl	80004e0 <__aeabi_f2d>
 80018d6:	a326      	add	r3, pc, #152	@ (adr r3, 8001970 <PRISMATIC_MOTOR_FFD_Compute+0x120>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe fe58 	bl	8000590 <__aeabi_dmul>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	f7ff f934 	bl	8000b54 <__aeabi_d2f>
 80018ec:	4604      	mov	r4, r0
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	f7ff f92b 	bl	8000b54 <__aeabi_d2f>
 80018fe:	4603      	mov	r3, r0
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eeb1 8a67 	vneg.f32	s16, s15
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff f91e 	bl	8000b54 <__aeabi_d2f>
 8001918:	4605      	mov	r5, r0
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001922:	4610      	mov	r0, r2
 8001924:	4619      	mov	r1, r3
 8001926:	f7ff f915 	bl	8000b54 <__aeabi_d2f>
 800192a:	4603      	mov	r3, r0
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eef1 8a67 	vneg.f32	s17, s15
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f7ff f908 	bl	8000b54 <__aeabi_d2f>
 8001944:	4603      	mov	r3, r0
 8001946:	ee02 3a10 	vmov	s4, r3
 800194a:	eef0 1a68 	vmov.f32	s3, s17
 800194e:	ee01 5a10 	vmov	s2, r5
 8001952:	eef0 0a48 	vmov.f32	s1, s16
 8001956:	ee00 4a10 	vmov	s0, r4
 800195a:	f000 fa62 	bl	8001e22 <mapf>
 800195e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001962:	eeb0 0a67 	vmov.f32	s0, s15
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	ecbd 8b02 	vpop	{d8}
 800196e:	bdb0      	pop	{r4, r5, r7, pc}
 8001970:	9999999a 	.word	0x9999999a
 8001974:	3fb99999 	.word	0x3fb99999

08001978 <PRISMATIC_MOTOR_DFD_Init>:

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	605a      	str	r2, [r3, #4]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	0000      	movs	r0, r0
	...

080019a0 <PRISMATIC_MOTOR_DFD_Compute>:

float PRISMATIC_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qd, float s){
 80019a0:	b5b0      	push	{r4, r5, r7, lr}
 80019a2:	ed2d 8b02 	vpush	{d8}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80019b0:	edc7 0a01 	vstr	s1, [r7, #4]
 80019b4:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * cos(q);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	edd3 7a00 	vldr	s15, [r3]
 80019c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019cc:	ee17 0a90 	vmov	r0, s15
 80019d0:	f7fe fd86 	bl	80004e0 <__aeabi_f2d>
 80019d4:	4604      	mov	r4, r0
 80019d6:	460d      	mov	r5, r1
 80019d8:	68b8      	ldr	r0, [r7, #8]
 80019da:	f7fe fd81 	bl	80004e0 <__aeabi_f2d>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	ec43 2b10 	vmov	d0, r2, r3
 80019e6:	f011 fa1f 	bl	8012e28 <cos>
 80019ea:	ec53 2b10 	vmov	r2, r3, d0
 80019ee:	4620      	mov	r0, r4
 80019f0:	4629      	mov	r1, r5
 80019f2:	f7fe fdcd 	bl	8000590 <__aeabi_dmul>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	f7ff f8a9 	bl	8000b54 <__aeabi_d2f>
 8001a02:	4603      	mov	r3, r0
 8001a04:	61fb      	str	r3, [r7, #28]

    float centrifugal_force = motor->En->plotter_mass * qd * qd * s;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1e:	ed97 7a00 	vldr	s14, [r7]
 8001a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a26:	edc7 7a06 	vstr	s15, [r7, #24]

    float transfer_function = (motor->Mx->R * motor->En->prismatic_pulley_radius) / motor->Mx->Kt;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fd51 	bl	80004e0 <__aeabi_f2d>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4620      	mov	r0, r4
 8001a44:	4629      	mov	r1, r5
 8001a46:	f7fe fda3 	bl	8000590 <__aeabi_dmul>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a5a:	f7fe fec3 	bl	80007e4 <__aeabi_ddiv>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4610      	mov	r0, r2
 8001a64:	4619      	mov	r1, r3
 8001a66:	f7ff f875 	bl	8000b54 <__aeabi_d2f>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + centrifugal_force) * transfer_function;
 8001a6e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a72:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a82:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v * 0.1, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001a86:	6938      	ldr	r0, [r7, #16]
 8001a88:	f7fe fd2a 	bl	80004e0 <__aeabi_f2d>
 8001a8c:	a326      	add	r3, pc, #152	@ (adr r3, 8001b28 <PRISMATIC_MOTOR_DFD_Compute+0x188>)
 8001a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a92:	f7fe fd7d 	bl	8000590 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f7ff f859 	bl	8000b54 <__aeabi_d2f>
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f7ff f850 	bl	8000b54 <__aeabi_d2f>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	ee07 3a90 	vmov	s15, r3
 8001aba:	eeb1 8a67 	vneg.f32	s16, s15
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f7ff f843 	bl	8000b54 <__aeabi_d2f>
 8001ace:	4605      	mov	r5, r0
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	f7ff f83a 	bl	8000b54 <__aeabi_d2f>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eef1 8a67 	vneg.f32	s17, s15
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f7ff f82d 	bl	8000b54 <__aeabi_d2f>
 8001afa:	4603      	mov	r3, r0
 8001afc:	ee02 3a10 	vmov	s4, r3
 8001b00:	eef0 1a68 	vmov.f32	s3, s17
 8001b04:	ee01 5a10 	vmov	s2, r5
 8001b08:	eef0 0a48 	vmov.f32	s1, s16
 8001b0c:	ee00 4a10 	vmov	s0, r4
 8001b10:	f000 f987 	bl	8001e22 <mapf>
 8001b14:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b18:	eeb0 0a67 	vmov.f32	s0, s15
 8001b1c:	3720      	adds	r7, #32
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	ecbd 8b02 	vpop	{d8}
 8001b24:	bdb0      	pop	{r4, r5, r7, pc}
 8001b26:	bf00      	nop
 8001b28:	9999999a 	.word	0x9999999a
 8001b2c:	3fb99999 	.word	0x3fb99999

08001b30 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	ed2d 8b02 	vpush	{d8}
 8001b36:	b08a      	sub	sp, #40	@ 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b42:	edc7 0a00 	vstr	s1, [r7]
 8001b46:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001b48:	897b      	ldrh	r3, [r7, #10]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d102      	bne.n	8001b5a <FIR_init+0x2a>
        numTaps += 1;
 8001b54:	897b      	ldrh	r3, [r7, #10]
 8001b56:	3301      	adds	r3, #1
 8001b58:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	897a      	ldrh	r2, [r7, #10]
 8001b5e:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001b66:	897b      	ldrh	r3, [r7, #10]
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f011 f852 	bl	8012c14 <malloc>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461a      	mov	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001b78:	897b      	ldrh	r3, [r7, #10]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f011 f849 	bl	8012c14 <malloc>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 80e0 	beq.w	8001d54 <FIR_init+0x224>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80db 	beq.w	8001d54 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001ba2:	e00a      	b.n	8001bba <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001bb4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001bba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001bbc:	897b      	ldrh	r3, [r7, #10]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d3f0      	bcc.n	8001ba4 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001bc2:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bc6:	ed97 7a00 	vldr	s14, [r7]
 8001bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bce:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001bd2:	897b      	ldrh	r3, [r7, #10]
 8001bd4:	085b      	lsrs	r3, r3, #1
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001bda:	2300      	movs	r3, #0
 8001bdc:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001bde:	e077      	b.n	8001cd0 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001be0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001be4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d10c      	bne.n	8001c06 <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bfc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c00:	edc3 7a00 	vstr	s15, [r3]
 8001c04:	e02c      	b.n	8001c60 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001c06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c08:	8afb      	ldrh	r3, [r7, #22]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001c10:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c14:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001d60 <FIR_init+0x230>
 8001c18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c20:	ee07 3a90 	vmov	s15, r3
 8001c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c30:	f011 fa24 	bl	801307c <sinf>
 8001c34:	eef0 6a40 	vmov.f32	s13, s0
 8001c38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c44:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001d64 <FIR_init+0x234>
 8001c48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c5c:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	ed93 8a00 	vldr	s16, [r3]
 8001c70:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c74:	ee07 3a90 	vmov	s15, r3
 8001c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c7c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001d60 <FIR_init+0x230>
 8001c80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c84:	897b      	ldrh	r3, [r7, #10]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	ee07 3a90 	vmov	s15, r3
 8001c8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c90:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c94:	eeb0 0a66 	vmov.f32	s0, s13
 8001c98:	f011 f9ac 	bl	8012ff4 <cosf>
 8001c9c:	eef0 7a40 	vmov.f32	s15, s0
 8001ca0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001d68 <FIR_init+0x238>
 8001ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca8:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001d6c <FIR_init+0x23c>
 8001cac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001cc0:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001cc4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001cd0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001cd4:	897b      	ldrh	r3, [r7, #10]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	db82      	blt.n	8001be0 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	83fb      	strh	r3, [r7, #30]
 8001ce4:	e00f      	b.n	8001d06 <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	8bfb      	ldrh	r3, [r7, #30]
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	edd3 7a00 	vldr	s15, [r3]
 8001cf4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfc:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001d00:	8bfb      	ldrh	r3, [r7, #30]
 8001d02:	3301      	adds	r3, #1
 8001d04:	83fb      	strh	r3, [r7, #30]
 8001d06:	8bfa      	ldrh	r2, [r7, #30]
 8001d08:	897b      	ldrh	r3, [r7, #10]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d3eb      	bcc.n	8001ce6 <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001d0e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1a:	d01b      	beq.n	8001d54 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	83bb      	strh	r3, [r7, #28]
 8001d20:	e014      	b.n	8001d4c <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	8bbb      	ldrh	r3, [r7, #28]
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	edd3 6a00 	vldr	s13, [r3]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	8bbb      	ldrh	r3, [r7, #28]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d42:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d46:	8bbb      	ldrh	r3, [r7, #28]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	83bb      	strh	r3, [r7, #28]
 8001d4c:	8bba      	ldrh	r2, [r7, #28]
 8001d4e:	897b      	ldrh	r3, [r7, #10]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d3e6      	bcc.n	8001d22 <FIR_init+0x1f2>
            }
        }
    }
}
 8001d54:	bf00      	nop
 8001d56:	3728      	adds	r7, #40	@ 0x28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	ecbd 8b02 	vpop	{d8}
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40c90fdb 	.word	0x40c90fdb
 8001d64:	40490fdb 	.word	0x40490fdb
 8001d68:	3eeb851f 	.word	0x3eeb851f
 8001d6c:	3f0a3d71 	.word	0x3f0a3d71

08001d70 <FIR_process>:

float FIR_process(FIR *fir, float input) {
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	ed87 0a00 	vstr	s0, [r7]
    // Update circular buffer with new input
    fir->buffer[fir->bufferIndex] = input;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	895b      	ldrh	r3, [r3, #10]
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	601a      	str	r2, [r3, #0]

    // Compute output (convolution)
    float output = 0.0f;
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
    uint16_t index = fir->bufferIndex;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	895b      	ldrh	r3, [r3, #10]
 8001d96:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001d98:	2300      	movs	r3, #0
 8001d9a:	813b      	strh	r3, [r7, #8]
 8001d9c:	e023      	b.n	8001de6 <FIR_process+0x76>
        output += fir->buffer[index] * fir->coeffs[i];
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	897b      	ldrh	r3, [r7, #10]
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	ed93 7a00 	vldr	s14, [r3]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	893b      	ldrh	r3, [r7, #8]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dbe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc6:	edc7 7a03 	vstr	s15, [r7, #12]

        // Move back in circular buffer
        if (index == 0) {
 8001dca:	897b      	ldrh	r3, [r7, #10]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d104      	bne.n	8001dda <FIR_process+0x6a>
            index = fir->numTaps - 1;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	891b      	ldrh	r3, [r3, #8]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	817b      	strh	r3, [r7, #10]
 8001dd8:	e002      	b.n	8001de0 <FIR_process+0x70>
        } else {
            index--;
 8001dda:	897b      	ldrh	r3, [r7, #10]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	817b      	strh	r3, [r7, #10]
    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001de0:	893b      	ldrh	r3, [r7, #8]
 8001de2:	3301      	adds	r3, #1
 8001de4:	813b      	strh	r3, [r7, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	891b      	ldrh	r3, [r3, #8]
 8001dea:	893a      	ldrh	r2, [r7, #8]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d3d6      	bcc.n	8001d9e <FIR_process+0x2e>
        }
    }

    // Update buffer index for next input
    fir->bufferIndex++;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	895b      	ldrh	r3, [r3, #10]
 8001df4:	3301      	adds	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	815a      	strh	r2, [r3, #10]
    if (fir->bufferIndex >= fir->numTaps) {
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	895a      	ldrh	r2, [r3, #10]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	891b      	ldrh	r3, [r3, #8]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d302      	bcc.n	8001e0e <FIR_process+0x9e>
        fir->bufferIndex = 0;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	815a      	strh	r2, [r3, #10]
    }

    return output;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	ee07 3a90 	vmov	s15, r3
}
 8001e14:	eeb0 0a67 	vmov.f32	s0, s15
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001e22:	b480      	push	{r7}
 8001e24:	b089      	sub	sp, #36	@ 0x24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	ed87 0a05 	vstr	s0, [r7, #20]
 8001e2c:	edc7 0a04 	vstr	s1, [r7, #16]
 8001e30:	ed87 1a03 	vstr	s2, [r7, #12]
 8001e34:	edc7 1a02 	vstr	s3, [r7, #8]
 8001e38:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001e3c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e40:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e44:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e48:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e58:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001e5c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e68:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e70:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e78:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	ee07 3a90 	vmov	s15, r3
}
 8001e82:	eeb0 0a67 	vmov.f32	s0, s15
 8001e86:	3724      	adds	r7, #36	@ 0x24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001e94:	4b0d      	ldr	r3, [pc, #52]	@ (8001ecc <modbus_1t5_Timeout+0x3c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <modbus_1t5_Timeout+0x3c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001ea8:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <modbus_1t5_Timeout+0x3c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <modbus_1t5_Timeout+0x3c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	2000062c 	.word	0x2000062c

08001ed0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001ed8:	4b04      	ldr	r3, [pc, #16]	@ (8001eec <modbus_3t5_Timeout+0x1c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2201      	movs	r2, #1
 8001ede:	755a      	strb	r2, [r3, #21]

}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	2000062c 	.word	0x2000062c

08001ef0 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f00f f871 	bl	8010fe0 <HAL_UART_GetError>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b20      	cmp	r3, #32
 8001f02:	d101      	bne.n	8001f08 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001f04:	f7ff ffc4 	bl	8001e90 <modbus_1t5_Timeout>

	}
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001f1e:	4a2d      	ldr	r2, [pc, #180]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001f24:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001f2c:	4b29      	ldr	r3, [pc, #164]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001f34:	4b27      	ldr	r3, [pc, #156]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001f3c:	4b25      	ldr	r3, [pc, #148]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	7e3a      	ldrb	r2, [r7, #24]
 8001f42:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001f44:	4b23      	ldr	r3, [pc, #140]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	69fa      	ldr	r2, [r7, #28]
 8001f4a:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	4a21      	ldr	r2, [pc, #132]	@ (8001fd8 <Modbus_init+0xc8>)
 8001f52:	210e      	movs	r1, #14
 8001f54:	4618      	mov	r0, r3
 8001f56:	f00d fa67 	bl	800f428 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2110      	movs	r1, #16
 8001f60:	4618      	mov	r0, r3
 8001f62:	f00e ffe7 	bl	8010f34 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f00e fffe 	bl	8010f6c <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	4a19      	ldr	r2, [pc, #100]	@ (8001fdc <Modbus_init+0xcc>)
 8001f76:	2104      	movs	r1, #4
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f00e faa5 	bl	80104c8 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001f7e:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001f84:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001f90:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001f94:	4413      	add	r3, r2
 8001f96:	3302      	adds	r3, #2
 8001f98:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f00e fbcd 	bl	801073c <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <Modbus_init+0xc4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d10c      	bne.n	8001fcc <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001fb2:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <Modbus_init+0xc4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f00c fa11 	bl	800e3e0 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001fbe:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <Modbus_init+0xc4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f00c fc60 	bl	800e88c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	2000062c 	.word	0x2000062c
 8001fd8:	08001ed1 	.word	0x08001ed1
 8001fdc:	08001ef1 	.word	0x08001ef1

08001fe0 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001fec:	23ff      	movs	r3, #255	@ 0xff
 8001fee:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001ff0:	23ff      	movs	r3, #255	@ 0xff
 8001ff2:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001ff4:	e013      	b.n	800201e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	781a      	ldrb	r2, [r3, #0]
 8001ffe:	7bbb      	ldrb	r3, [r7, #14]
 8002000:	4053      	eors	r3, r2
 8002002:	b2db      	uxtb	r3, r3
 8002004:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8002006:	4a10      	ldr	r2, [pc, #64]	@ (8002048 <CRC16+0x68>)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4413      	add	r3, r2
 800200c:	781a      	ldrb	r2, [r3, #0]
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	4053      	eors	r3, r2
 8002012:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8002014:	4a0d      	ldr	r2, [pc, #52]	@ (800204c <CRC16+0x6c>)
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	4413      	add	r3, r2
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800201e:	883b      	ldrh	r3, [r7, #0]
 8002020:	1e5a      	subs	r2, r3, #1
 8002022:	803a      	strh	r2, [r7, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1e6      	bne.n	8001ff6 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	b21b      	sxth	r3, r3
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	b21a      	sxth	r2, r3
 8002030:	7bbb      	ldrb	r3, [r7, #14]
 8002032:	b21b      	sxth	r3, r3
 8002034:	4313      	orrs	r3, r2
 8002036:	b21b      	sxth	r3, r3
 8002038:	b29b      	uxth	r3, r3
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	20000218 	.word	0x20000218
 800204c:	20000118 	.word	0x20000118

08002050 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8002056:	4b7e      	ldr	r3, [pc, #504]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	7ddb      	ldrb	r3, [r3, #23]
 800205c:	3b01      	subs	r3, #1
 800205e:	2b03      	cmp	r3, #3
 8002060:	d80a      	bhi.n	8002078 <Modbus_Protocal_Worker+0x28>
 8002062:	a201      	add	r2, pc, #4	@ (adr r2, 8002068 <Modbus_Protocal_Worker+0x18>)
 8002064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002068:	08002083 	.word	0x08002083
 800206c:	08002217 	.word	0x08002217
 8002070:	0800210f 	.word	0x0800210f
 8002074:	08002153 	.word	0x08002153
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8002078:	4b75      	ldr	r3, [pc, #468]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2201      	movs	r2, #1
 800207e:	75da      	strb	r2, [r3, #23]
		break;
 8002080:	e0e1      	b.n	8002246 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8002082:	4b73      	ldr	r3, [pc, #460]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800208a:	2b00      	cmp	r3, #0
 800208c:	d006      	beq.n	800209c <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 800208e:	4b70      	ldr	r3, [pc, #448]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2202      	movs	r2, #2
 8002094:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8002096:	f000 f9cd 	bl	8002434 <Modbus_Emission>
 800209a:	e018      	b.n	80020ce <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 800209c:	4b6c      	ldr	r3, [pc, #432]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80020a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d00b      	beq.n	80020ce <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80020b6:	4b66      	ldr	r3, [pc, #408]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2200      	movs	r2, #0
 80020bc:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80020be:	4b64      	ldr	r3, [pc, #400]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2200      	movs	r2, #0
 80020c4:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80020c6:	4b62      	ldr	r3, [pc, #392]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2203      	movs	r2, #3
 80020cc:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80020ce:	4b60      	ldr	r3, [pc, #384]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020d8:	2b20      	cmp	r3, #32
 80020da:	f040 80ad 	bne.w	8002238 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80020de:	4b5c      	ldr	r3, [pc, #368]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80020e8:	4b59      	ldr	r3, [pc, #356]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80020ee:	4b58      	ldr	r3, [pc, #352]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b57      	ldr	r3, [pc, #348]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80020fa:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80020fe:	4413      	add	r3, r2
 8002100:	3302      	adds	r3, #2
 8002102:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002106:	4619      	mov	r1, r3
 8002108:	f00e fb18 	bl	801073c <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 800210c:	e094      	b.n	8002238 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800210e:	4b50      	ldr	r3, [pc, #320]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	7d1b      	ldrb	r3, [r3, #20]
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 8091 	beq.w	800223c <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800211a:	4b4d      	ldr	r3, [pc, #308]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	22fe      	movs	r2, #254	@ 0xfe
 8002120:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8002122:	4b4b      	ldr	r3, [pc, #300]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 800212c:	4b48      	ldr	r3, [pc, #288]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 800213c:	4b44      	ldr	r3, [pc, #272]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800213e:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8002140:	1a8a      	subs	r2, r1, r2
 8002142:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8002144:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8002148:	4b41      	ldr	r3, [pc, #260]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2204      	movs	r2, #4
 800214e:	75da      	strb	r2, [r3, #23]
		}
		break;
 8002150:	e074      	b.n	800223c <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8002152:	4b3f      	ldr	r3, [pc, #252]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800215a:	f113 0f02 	cmn.w	r3, #2
 800215e:	d150      	bne.n	8002202 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8002160:	4b3b      	ldr	r3, [pc, #236]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2200      	movs	r2, #0
 8002166:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8002168:	4b39      	ldr	r3, [pc, #228]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8002170:	4b37      	ldr	r3, [pc, #220]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002178:	3b02      	subs	r3, #2
 800217a:	4619      	mov	r1, r3
 800217c:	4610      	mov	r0, r2
 800217e:	f7ff ff2f 	bl	8001fe0 <CRC16>
 8002182:	4603      	mov	r3, r0
 8002184:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8002186:	793a      	ldrb	r2, [r7, #4]
 8002188:	4b31      	ldr	r3, [pc, #196]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800218a:	6819      	ldr	r1, [r3, #0]
 800218c:	4b30      	ldr	r3, [pc, #192]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002194:	3b02      	subs	r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 800219c:	429a      	cmp	r2, r3
 800219e:	d10c      	bne.n	80021ba <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80021a0:	797a      	ldrb	r2, [r7, #5]
 80021a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021a4:	6819      	ldr	r1, [r3, #0]
 80021a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80021ae:	3b01      	subs	r3, #1
 80021b0:	440b      	add	r3, r1
 80021b2:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d004      	beq.n	80021c4 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80021ba:	4b25      	ldr	r3, [pc, #148]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	22ff      	movs	r2, #255	@ 0xff
 80021c0:	759a      	strb	r2, [r3, #22]
				break;
 80021c2:	e040      	b.n	8002246 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80021c4:	4b22      	ldr	r3, [pc, #136]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80021cc:	4b20      	ldr	r3, [pc, #128]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d113      	bne.n	80021fe <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80021d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80021de:	4b1c      	ldr	r3, [pc, #112]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80021e6:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80021e8:	4b19      	ldr	r3, [pc, #100]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80021f0:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80021f2:	461a      	mov	r2, r3
 80021f4:	f010 fe08 	bl	8012e08 <memcpy>

			//execute command
			Modbus_frame_response();
 80021f8:	f000 f904 	bl	8002404 <Modbus_frame_response>
 80021fc:	e001      	b.n	8002202 <Modbus_Protocal_Worker+0x1b2>
				break;
 80021fe:	bf00      	nop
					}
		break;


	}
}
 8002200:	e021      	b.n	8002246 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8002202:	4b13      	ldr	r3, [pc, #76]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	7d5b      	ldrb	r3, [r3, #21]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d019      	beq.n	8002240 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 800220c:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2201      	movs	r2, #1
 8002212:	75da      	strb	r2, [r3, #23]
		break;
 8002214:	e014      	b.n	8002240 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002216:	4b0e      	ldr	r3, [pc, #56]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002220:	2b20      	cmp	r3, #32
 8002222:	d10f      	bne.n	8002244 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8002224:	4b0a      	ldr	r3, [pc, #40]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800222e:	4b08      	ldr	r3, [pc, #32]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2201      	movs	r2, #1
 8002234:	75da      	strb	r2, [r3, #23]
		break;
 8002236:	e005      	b.n	8002244 <Modbus_Protocal_Worker+0x1f4>
		break;
 8002238:	bf00      	nop
 800223a:	e004      	b.n	8002246 <Modbus_Protocal_Worker+0x1f6>
		break;
 800223c:	bf00      	nop
 800223e:	e002      	b.n	8002246 <Modbus_Protocal_Worker+0x1f6>
		break;
 8002240:	bf00      	nop
 8002242:	e000      	b.n	8002246 <Modbus_Protocal_Worker+0x1f6>
		break;
 8002244:	bf00      	nop
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	2000062c 	.word	0x2000062c

08002254 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800225a:	4b1d      	ldr	r3, [pc, #116]	@ (80022d0 <modbusWrite1Register+0x7c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	7e5b      	ldrb	r3, [r3, #25]
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	b29b      	uxth	r3, r3
 8002264:	4a1a      	ldr	r2, [pc, #104]	@ (80022d0 <modbusWrite1Register+0x7c>)
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	7e92      	ldrb	r2, [r2, #26]
 800226a:	4413      	add	r3, r2
 800226c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800226e:	88fa      	ldrh	r2, [r7, #6]
 8002270:	4b17      	ldr	r3, [pc, #92]	@ (80022d0 <modbusWrite1Register+0x7c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	429a      	cmp	r2, r3
 8002278:	d903      	bls.n	8002282 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800227a:	2002      	movs	r0, #2
 800227c:	f000 f8a0 	bl	80023c0 <ModbusErrorReply>
			 return;
 8002280:	e023      	b.n	80022ca <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8002282:	4b13      	ldr	r3, [pc, #76]	@ (80022d0 <modbusWrite1Register+0x7c>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <modbusWrite1Register+0x7c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6859      	ldr	r1, [r3, #4]
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	440b      	add	r3, r1
 8002292:	7ed2      	ldrb	r2, [r2, #27]
 8002294:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8002296:	4b0e      	ldr	r3, [pc, #56]	@ (80022d0 <modbusWrite1Register+0x7c>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4b0d      	ldr	r3, [pc, #52]	@ (80022d0 <modbusWrite1Register+0x7c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6859      	ldr	r1, [r3, #4]
 80022a0:	88fb      	ldrh	r3, [r7, #6]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	440b      	add	r3, r1
 80022a6:	7f12      	ldrb	r2, [r2, #28]
 80022a8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80022aa:	4b09      	ldr	r3, [pc, #36]	@ (80022d0 <modbusWrite1Register+0x7c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80022b2:	4b07      	ldr	r3, [pc, #28]	@ (80022d0 <modbusWrite1Register+0x7c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 80022b8:	2208      	movs	r2, #8
 80022ba:	4619      	mov	r1, r3
 80022bc:	f010 fda4 	bl	8012e08 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80022c0:	4b03      	ldr	r3, [pc, #12]	@ (80022d0 <modbusWrite1Register+0x7c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2205      	movs	r2, #5
 80022c6:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	2000062c 	.word	0x2000062c

080022d4 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80022da:	4b38      	ldr	r3, [pc, #224]	@ (80023bc <modbusRead1Register+0xe8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	7edb      	ldrb	r3, [r3, #27]
 80022e0:	021b      	lsls	r3, r3, #8
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	4a35      	ldr	r2, [pc, #212]	@ (80023bc <modbusRead1Register+0xe8>)
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	7f12      	ldrb	r2, [r2, #28]
 80022ea:	4413      	add	r3, r2
 80022ec:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80022ee:	4b33      	ldr	r3, [pc, #204]	@ (80023bc <modbusRead1Register+0xe8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	7e5b      	ldrb	r3, [r3, #25]
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	4a30      	ldr	r2, [pc, #192]	@ (80023bc <modbusRead1Register+0xe8>)
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	7e92      	ldrb	r2, [r2, #26]
 80022fe:	4413      	add	r3, r2
 8002300:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <modbusRead1Register+0x3a>
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	2b7d      	cmp	r3, #125	@ 0x7d
 800230c:	d903      	bls.n	8002316 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800230e:	2003      	movs	r0, #3
 8002310:	f000 f856 	bl	80023c0 <ModbusErrorReply>
		 return;
 8002314:	e04e      	b.n	80023b4 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8002316:	88ba      	ldrh	r2, [r7, #4]
 8002318:	4b28      	ldr	r3, [pc, #160]	@ (80023bc <modbusRead1Register+0xe8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	429a      	cmp	r2, r3
 8002320:	d808      	bhi.n	8002334 <modbusRead1Register+0x60>
 8002322:	88ba      	ldrh	r2, [r7, #4]
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	4413      	add	r3, r2
 8002328:	461a      	mov	r2, r3
 800232a:	4b24      	ldr	r3, [pc, #144]	@ (80023bc <modbusRead1Register+0xe8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	429a      	cmp	r2, r3
 8002332:	d903      	bls.n	800233c <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002334:	2002      	movs	r0, #2
 8002336:	f000 f843 	bl	80023c0 <ModbusErrorReply>
		 return;
 800233a:	e03b      	b.n	80023b4 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 800233c:	4b1f      	ldr	r3, [pc, #124]	@ (80023bc <modbusRead1Register+0xe8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2203      	movs	r2, #3
 8002342:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4b1c      	ldr	r3, [pc, #112]	@ (80023bc <modbusRead1Register+0xe8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	0052      	lsls	r2, r2, #1
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8002356:	2400      	movs	r4, #0
 8002358:	e020      	b.n	800239c <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 800235a:	4b18      	ldr	r3, [pc, #96]	@ (80023bc <modbusRead1Register+0xe8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	88bb      	ldrh	r3, [r7, #4]
 8002362:	4423      	add	r3, r4
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	18d1      	adds	r1, r2, r3
 8002368:	4b14      	ldr	r3, [pc, #80]	@ (80023bc <modbusRead1Register+0xe8>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	1c63      	adds	r3, r4, #1
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	7849      	ldrb	r1, [r1, #1]
 8002372:	4413      	add	r3, r2
 8002374:	460a      	mov	r2, r1
 8002376:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800237a:	4b10      	ldr	r3, [pc, #64]	@ (80023bc <modbusRead1Register+0xe8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	88bb      	ldrh	r3, [r7, #4]
 8002382:	4423      	add	r3, r4
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	18d1      	adds	r1, r2, r3
 8002388:	4b0c      	ldr	r3, [pc, #48]	@ (80023bc <modbusRead1Register+0xe8>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	0063      	lsls	r3, r4, #1
 800238e:	3303      	adds	r3, #3
 8002390:	7809      	ldrb	r1, [r1, #0]
 8002392:	4413      	add	r3, r2
 8002394:	460a      	mov	r2, r1
 8002396:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 800239a:	3401      	adds	r4, #1
 800239c:	88fb      	ldrh	r3, [r7, #6]
 800239e:	429c      	cmp	r4, r3
 80023a0:	dbdb      	blt.n	800235a <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	3301      	adds	r3, #1
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	4b04      	ldr	r3, [pc, #16]	@ (80023bc <modbusRead1Register+0xe8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	0052      	lsls	r2, r2, #1
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd90      	pop	{r4, r7, pc}
 80023ba:	bf00      	nop
 80023bc:	2000062c 	.word	0x2000062c

080023c0 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80023ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002400 <ModbusErrorReply+0x40>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	7e1a      	ldrb	r2, [r3, #24]
 80023d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <ModbusErrorReply+0x40>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 80023de:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <ModbusErrorReply+0x40>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	79fa      	ldrb	r2, [r7, #7]
 80023e4:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 80023e8:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <ModbusErrorReply+0x40>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2202      	movs	r2, #2
 80023ee:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	2000062c 	.word	0x2000062c

08002404 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8002408:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <Modbus_frame_response+0x2c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	7e1b      	ldrb	r3, [r3, #24]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d004      	beq.n	800241c <Modbus_frame_response+0x18>
 8002412:	2b06      	cmp	r3, #6
 8002414:	d105      	bne.n	8002422 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8002416:	f7ff ff1d 	bl	8002254 <modbusWrite1Register>
		break;
 800241a:	e006      	b.n	800242a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 800241c:	f7ff ff5a 	bl	80022d4 <modbusRead1Register>
		break;
 8002420:	e003      	b.n	800242a <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8002422:	2001      	movs	r0, #1
 8002424:	f7ff ffcc 	bl	80023c0 <ModbusErrorReply>
		break;
 8002428:	bf00      	nop

	}
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	2000062c 	.word	0x2000062c

08002434 <Modbus_Emission>:

void Modbus_Emission()
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800243a:	4b38      	ldr	r3, [pc, #224]	@ (800251c <Modbus_Emission+0xe8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002444:	2b20      	cmp	r3, #32
 8002446:	d15d      	bne.n	8002504 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8002448:	4b34      	ldr	r3, [pc, #208]	@ (800251c <Modbus_Emission+0xe8>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b33      	ldr	r3, [pc, #204]	@ (800251c <Modbus_Emission+0xe8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	7812      	ldrb	r2, [r2, #0]
 8002452:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8002456:	4b31      	ldr	r3, [pc, #196]	@ (800251c <Modbus_Emission+0xe8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 800245e:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8002460:	4b2e      	ldr	r3, [pc, #184]	@ (800251c <Modbus_Emission+0xe8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8002468:	4b2c      	ldr	r3, [pc, #176]	@ (800251c <Modbus_Emission+0xe8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8002470:	461a      	mov	r2, r3
 8002472:	f010 fcc9 	bl	8012e08 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8002476:	4b29      	ldr	r3, [pc, #164]	@ (800251c <Modbus_Emission+0xe8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800247e:	461a      	mov	r2, r3
 8002480:	4b26      	ldr	r3, [pc, #152]	@ (800251c <Modbus_Emission+0xe8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	3203      	adds	r2, #3
 8002486:	b292      	uxth	r2, r2
 8002488:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800248c:	4b23      	ldr	r3, [pc, #140]	@ (800251c <Modbus_Emission+0xe8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8002494:	4b21      	ldr	r3, [pc, #132]	@ (800251c <Modbus_Emission+0xe8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800249c:	3b02      	subs	r3, #2
 800249e:	4619      	mov	r1, r3
 80024a0:	4610      	mov	r0, r2
 80024a2:	f7ff fd9d 	bl	8001fe0 <CRC16>
 80024a6:	4603      	mov	r3, r0
 80024a8:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80024aa:	4b1c      	ldr	r3, [pc, #112]	@ (800251c <Modbus_Emission+0xe8>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	4b1b      	ldr	r3, [pc, #108]	@ (800251c <Modbus_Emission+0xe8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80024b6:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80024b8:	7939      	ldrb	r1, [r7, #4]
 80024ba:	4413      	add	r3, r2
 80024bc:	460a      	mov	r2, r1
 80024be:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80024c2:	4b16      	ldr	r3, [pc, #88]	@ (800251c <Modbus_Emission+0xe8>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	4b15      	ldr	r3, [pc, #84]	@ (800251c <Modbus_Emission+0xe8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80024ce:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80024d0:	7979      	ldrb	r1, [r7, #5]
 80024d2:	4413      	add	r3, r2
 80024d4:	460a      	mov	r2, r1
 80024d6:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80024da:	4b10      	ldr	r3, [pc, #64]	@ (800251c <Modbus_Emission+0xe8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d10d      	bne.n	8002504 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80024e8:	4b0c      	ldr	r3, [pc, #48]	@ (800251c <Modbus_Emission+0xe8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80024ee:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <Modbus_Emission+0xe8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80024f6:	4b09      	ldr	r3, [pc, #36]	@ (800251c <Modbus_Emission+0xe8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80024fa:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80024fe:	461a      	mov	r2, r3
 8002500:	f00e f89c 	bl	801063c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8002504:	4b05      	ldr	r3, [pc, #20]	@ (800251c <Modbus_Emission+0xe8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2200      	movs	r2, #0
 800250a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 800250c:	4b03      	ldr	r3, [pc, #12]	@ (800251c <Modbus_Emission+0xe8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2200      	movs	r2, #0
 8002512:	755a      	strb	r2, [r3, #21]

}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	2000062c 	.word	0x2000062c

08002520 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	@ 0x30
 8002524:	af00      	add	r7, sp, #0
 8002526:	6278      	str	r0, [r7, #36]	@ 0x24
 8002528:	ed87 0a08 	vstr	s0, [r7, #32]
 800252c:	edc7 0a07 	vstr	s1, [r7, #28]
 8002530:	ed87 1a06 	vstr	s2, [r7, #24]
 8002534:	edc7 1a05 	vstr	s3, [r7, #20]
 8002538:	ed87 2a04 	vstr	s4, [r7, #16]
 800253c:	edc7 2a03 	vstr	s5, [r7, #12]
 8002540:	ed87 3a02 	vstr	s6, [r7, #8]
 8002544:	edc7 3a01 	vstr	s7, [r7, #4]
 8002548:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 800254c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254e:	6a3a      	ldr	r2, [r7, #32]
 8002550:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 8002554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 800255c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 8002564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 8002574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 800257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	2210      	movs	r2, #16
 8002588:	2100      	movs	r1, #0
 800258a:	4618      	mov	r0, r3
 800258c:	f010 fbf8 	bl	8012d80 <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	3310      	adds	r3, #16
 8002594:	2240      	movs	r2, #64	@ 0x40
 8002596:	2100      	movs	r1, #0
 8002598:	4618      	mov	r0, r3
 800259a:	f010 fbf1 	bl	8012d80 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800259e:	2300      	movs	r3, #0
 80025a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025a2:	e00c      	b.n	80025be <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 80025a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ae:	3304      	adds	r3, #4
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	4a79      	ldr	r2, [pc, #484]	@ (800279c <MotorKalman_Init+0x27c>)
 80025b6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ba:	3301      	adds	r3, #1
 80025bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	ddef      	ble.n	80025a4 <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 80025ca:	2240      	movs	r2, #64	@ 0x40
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f010 fbd6 	bl	8012d80 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025d4:	2300      	movs	r3, #0
 80025d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025d8:	e00d      	b.n	80025f6 <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 80025da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025e4:	33be      	adds	r3, #190	@ 0xbe
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80025ee:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f2:	3301      	adds	r3, #1
 80025f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	ddee      	ble.n	80025da <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 80025fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fe:	33f0      	adds	r3, #240	@ 0xf0
 8002600:	2210      	movs	r2, #16
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f010 fbbb 	bl	8012d80 <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 800260a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002610:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002616:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800261a:	2210      	movs	r2, #16
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f010 fbae 	bl	8012d80 <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 8002624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002626:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800262a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 800262e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002632:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002634:	f000 f922 	bl	800287c <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 8002638:	ed97 0a00 	vldr	s0, [r7]
 800263c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800263e:	f000 f94d 	bl	80028dc <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264a:	2201      	movs	r2, #1
 800264c:	2104      	movs	r1, #4
 800264e:	f00f fe26 	bl	801229e <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	3310      	adds	r3, #16
 800265c:	2204      	movs	r2, #4
 800265e:	2104      	movs	r1, #4
 8002660:	f00f fe1d 	bl	801229e <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8002670:	2204      	movs	r2, #4
 8002672:	2104      	movs	r1, #4
 8002674:	f00f fe13 	bl	801229e <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8002684:	2201      	movs	r2, #1
 8002686:	2101      	movs	r1, #1
 8002688:	f00f fe09 	bl	801229e <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8002698:	2201      	movs	r2, #1
 800269a:	2101      	movs	r1, #1
 800269c:	f00f fdff 	bl	801229e <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 80026a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a2:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 80026a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a8:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 80026ac:	2201      	movs	r2, #1
 80026ae:	2101      	movs	r1, #1
 80026b0:	f00f fdf5 	bl	801229e <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 80026b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b6:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 80026ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026bc:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80026c0:	2204      	movs	r2, #4
 80026c2:	2104      	movs	r1, #4
 80026c4:	f00f fdeb 	bl	801229e <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 80026c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ca:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 80026d4:	2201      	movs	r2, #1
 80026d6:	2104      	movs	r1, #4
 80026d8:	f00f fde1 	bl	801229e <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 80026dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026de:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80026e8:	2201      	movs	r2, #1
 80026ea:	2104      	movs	r1, #4
 80026ec:	f00f fdd7 	bl	801229e <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 80026f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f2:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 80026f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f8:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 80026fc:	2204      	movs	r2, #4
 80026fe:	2104      	movs	r1, #4
 8002700:	f00f fdcd 	bl	801229e <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 8002704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002706:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8002710:	2204      	movs	r2, #4
 8002712:	2101      	movs	r1, #1
 8002714:	f00f fdc3 	bl	801229e <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8002724:	2201      	movs	r2, #1
 8002726:	2101      	movs	r1, #1
 8002728:	f00f fdb9 	bl	801229e <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 8002732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002734:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 8002738:	2201      	movs	r2, #1
 800273a:	2104      	movs	r1, #4
 800273c:	f00f fdaf 	bl	801229e <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8002740:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002742:	f000 f82d 	bl	80027a0 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	3390      	adds	r3, #144	@ 0x90
 8002750:	2204      	movs	r2, #4
 8002752:	2104      	movs	r1, #4
 8002754:	f00f fda3 	bl	801229e <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 8002758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275a:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 800275e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002760:	33e0      	adds	r3, #224	@ 0xe0
 8002762:	2201      	movs	r2, #1
 8002764:	2104      	movs	r1, #4
 8002766:	f00f fd9a 	bl	801229e <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002772:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002776:	2204      	movs	r2, #4
 8002778:	2104      	movs	r1, #4
 800277a:	f00f fd90 	bl	801229e <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 800277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002780:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800278a:	2201      	movs	r2, #1
 800278c:	2104      	movs	r1, #4
 800278e:	f00f fd86 	bl	801229e <arm_mat_init_f32>
}
 8002792:	bf00      	nop
 8002794:	3730      	adds	r7, #48	@ 0x30
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	42c80000 	.word	0x42c80000

080027a0 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 80027dc:	4619      	mov	r1, r3
 80027de:	4610      	mov	r0, r2
 80027e0:	eeb0 3a64 	vmov.f32	s6, s9
 80027e4:	eef0 2a45 	vmov.f32	s5, s10
 80027e8:	eeb0 2a65 	vmov.f32	s4, s11
 80027ec:	eef0 1a46 	vmov.f32	s3, s12
 80027f0:	eeb0 1a66 	vmov.f32	s2, s13
 80027f4:	eef0 0a47 	vmov.f32	s1, s14
 80027f8:	eeb0 0a67 	vmov.f32	s0, s15
 80027fc:	f001 f83c 	bl	8003878 <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002806:	2240      	movs	r2, #64	@ 0x40
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f010 fab8 	bl	8012d80 <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002816:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002874 <MotorKalman_DiscretizeModel+0xd4>
 800281a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800283a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800284a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002878 <MotorKalman_DiscretizeModel+0xd8>
 800284e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800285e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002874 <MotorKalman_DiscretizeModel+0xd4>
 8002862:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	3c23d70a 	.word	0x3c23d70a
 8002878:	3dcccccd 	.word	0x3dcccccd

0800287c <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800288e:	2240      	movs	r2, #64	@ 0x40
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f010 fa74 	bl	8012d80 <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 8002898:	edd7 7a00 	vldr	s15, [r7]
 800289c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80028b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028bc:	d107      	bne.n	80028ce <MotorKalman_SetProcessNoise+0x52>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 80028c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028cc:	d002      	beq.n	80028d4 <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ff66 	bl	80027a0 <MotorKalman_DiscretizeModel>
    }
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 80028e8:	ed97 0a00 	vldr	s0, [r7]
 80028ec:	f010 fb64 	bl	8012fb8 <sqrtf>
 80028f0:	eef0 7a40 	vmov.f32	s15, s0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 800290a:	b580      	push	{r7, lr}
 800290c:	b0b2      	sub	sp, #200	@ 0xc8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 800291e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800292c:	2300      	movs	r3, #0
 800292e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002932:	e041      	b.n	80029b8 <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 8002934:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	33c8      	adds	r3, #200	@ 0xc8
 800293c:	443b      	add	r3, r7
 800293e:	3b3c      	subs	r3, #60	@ 0x3c
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002946:	2300      	movs	r3, #0
 8002948:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800294c:	e02b      	b.n	80029a6 <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 800294e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	33c8      	adds	r3, #200	@ 0xc8
 8002956:	443b      	add	r3, r7
 8002958:	3b3c      	subs	r3, #60	@ 0x3c
 800295a:	ed93 7a00 	vldr	s14, [r3]
 800295e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002962:	009a      	lsls	r2, r3, #2
 8002964:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002968:	4413      	add	r3, r2
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	3324      	adds	r3, #36	@ 0x24
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	edd3 6a00 	vldr	s13, [r3]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	edd3 7a00 	vldr	s15, [r3]
 8002984:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800298c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	33c8      	adds	r3, #200	@ 0xc8
 8002994:	443b      	add	r3, r7
 8002996:	3b3c      	subs	r3, #60	@ 0x3c
 8002998:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800299c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029a0:	3301      	adds	r3, #1
 80029a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	ddcf      	ble.n	800294e <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029b2:	3301      	adds	r3, #1
 80029b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80029b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029bc:	2b03      	cmp	r3, #3
 80029be:	ddb9      	ble.n	8002934 <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029c0:	2300      	movs	r3, #0
 80029c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80029c6:	e021      	b.n	8002a0c <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 80029c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	33c8      	adds	r3, #200	@ 0xc8
 80029d0:	443b      	add	r3, r7
 80029d2:	3b3c      	subs	r3, #60	@ 0x3c
 80029d4:	ed93 7a00 	vldr	s14, [r3]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029de:	3338      	adds	r3, #56	@ 0x38
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	edd3 6a00 	vldr	s13, [r3]
 80029e8:	edd7 7a00 	vldr	s15, [r7]
 80029ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a06:	3301      	adds	r3, #1
 8002a08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002a0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	ddd9      	ble.n	80029c8 <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002a14:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002a18:	2240      	movs	r2, #64	@ 0x40
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f010 f9af 	bl	8012d80 <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002a22:	f107 030c 	add.w	r3, r7, #12
 8002a26:	2240      	movs	r2, #64	@ 0x40
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f010 f9a8 	bl	8012d80 <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a36:	e05f      	b.n	8002af8 <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a3e:	e052      	b.n	8002ae6 <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002a40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a44:	009a      	lsls	r2, r3, #2
 8002a46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	33c8      	adds	r3, #200	@ 0xc8
 8002a50:	443b      	add	r3, r7
 8002a52:	3b7c      	subs	r3, #124	@ 0x7c
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a60:	e038      	b.n	8002ad4 <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002a62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a66:	009a      	lsls	r2, r3, #2
 8002a68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	33c8      	adds	r3, #200	@ 0xc8
 8002a72:	443b      	add	r3, r7
 8002a74:	3b7c      	subs	r3, #124	@ 0x7c
 8002a76:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 8002a7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a7e:	009a      	lsls	r2, r3, #2
 8002a80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a84:	4413      	add	r3, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	3324      	adds	r3, #36	@ 0x24
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	edd3 6a00 	vldr	s13, [r3]
 8002a92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a96:	009a      	lsls	r2, r3, #2
 8002a98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a9c:	4413      	add	r3, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002aae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ab2:	009a      	lsls	r2, r3, #2
 8002ab4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ab8:	4413      	add	r3, r2
 8002aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	33c8      	adds	r3, #200	@ 0xc8
 8002ac2:	443b      	add	r3, r7
 8002ac4:	3b7c      	subs	r3, #124	@ 0x7c
 8002ac6:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002aca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ad4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	ddc2      	ble.n	8002a62 <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002adc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ae6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	dda8      	ble.n	8002a40 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002aee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002af2:	3301      	adds	r3, #1
 8002af4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002af8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	dd9b      	ble.n	8002a38 <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b00:	2300      	movs	r3, #0
 8002b02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b06:	e05f      	b.n	8002bc8 <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b0e:	e052      	b.n	8002bb6 <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002b10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b14:	009a      	lsls	r2, r3, #2
 8002b16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	33c8      	adds	r3, #200	@ 0xc8
 8002b20:	443b      	add	r3, r7
 8002b22:	3bbc      	subs	r3, #188	@ 0xbc
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002b30:	e038      	b.n	8002ba4 <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b36:	009a      	lsls	r2, r3, #2
 8002b38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	33c8      	adds	r3, #200	@ 0xc8
 8002b42:	443b      	add	r3, r7
 8002b44:	3bbc      	subs	r3, #188	@ 0xbc
 8002b46:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 8002b4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b4e:	009a      	lsls	r2, r3, #2
 8002b50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	33c8      	adds	r3, #200	@ 0xc8
 8002b5a:	443b      	add	r3, r7
 8002b5c:	3b7c      	subs	r3, #124	@ 0x7c
 8002b5e:	edd3 6a00 	vldr	s13, [r3]
 8002b62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b66:	009a      	lsls	r2, r3, #2
 8002b68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b6c:	4413      	add	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	3324      	adds	r3, #36	@ 0x24
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	edd3 7a00 	vldr	s15, [r3]
 8002b7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b82:	009a      	lsls	r2, r3, #2
 8002b84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b88:	4413      	add	r3, r2
 8002b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	33c8      	adds	r3, #200	@ 0xc8
 8002b92:	443b      	add	r3, r7
 8002b94:	3bbc      	subs	r3, #188	@ 0xbc
 8002b96:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002b9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002ba4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	ddc2      	ble.n	8002b32 <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002bac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002bb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	dda8      	ble.n	8002b10 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002bbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002bc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	dd9b      	ble.n	8002b08 <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002bd6:	e037      	b.n	8002c48 <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002bde:	e02a      	b.n	8002c36 <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002be0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002be4:	009a      	lsls	r2, r3, #2
 8002be6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bea:	4413      	add	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	33c8      	adds	r3, #200	@ 0xc8
 8002bf0:	443b      	add	r3, r7
 8002bf2:	3bbc      	subs	r3, #188	@ 0xbc
 8002bf4:	ed93 7a00 	vldr	s14, [r3]
 8002bf8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bfc:	009a      	lsls	r2, r3, #2
 8002bfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c02:	4413      	add	r3, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	3354      	adds	r3, #84	@ 0x54
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002c10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c14:	009a      	lsls	r2, r3, #2
 8002c16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c1a:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	3304      	adds	r3, #4
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002c2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c30:	3301      	adds	r3, #1
 8002c32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c36:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	ddd0      	ble.n	8002be0 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002c3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c42:	3301      	adds	r3, #1
 8002c44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	ddc3      	ble.n	8002bd8 <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	2104      	movs	r1, #4
 8002c84:	f00f fb0b 	bl	801229e <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3310      	adds	r3, #16
 8002c92:	2204      	movs	r2, #4
 8002c94:	2104      	movs	r1, #4
 8002c96:	f00f fb02 	bl	801229e <arm_mat_init_f32>
}
 8002c9a:	bf00      	nop
 8002c9c:	37c8      	adds	r7, #200	@ 0xc8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b0d0      	sub	sp, #320	@ 0x140
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cb2:	6018      	str	r0, [r3, #0]
 8002cb4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cb8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002cbc:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 8002cc0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cc4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002cce:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002cd8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cdc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 8002ce6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cea:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	edd3 7a00 	vldr	s15, [r3]
 8002cf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cf8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cfc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 8002d06:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d0a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d18:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002d1c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d20:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 8002d2a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d2e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d38:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002d3c:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002d40:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d44:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 8002d4e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d52:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d64:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 8002d68:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d6c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002d70:	ed93 7a00 	vldr	s14, [r3]
 8002d74:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8002d78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d7c:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8002d80:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002d94:	e04d      	b.n	8002e32 <MotorKalman_Update+0x18e>
        CP[i] = 0;
 8002d96:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002da0:	443b      	add	r3, r7
 8002da2:	3b58      	subs	r3, #88	@ 0x58
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002daa:	2300      	movs	r3, #0
 8002dac:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002db0:	e036      	b.n	8002e20 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 8002db2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002dbc:	443b      	add	r3, r7
 8002dbe:	3b58      	subs	r3, #88	@ 0x58
 8002dc0:	ed93 7a00 	vldr	s14, [r3]
 8002dc4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002dc8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002dd2:	333c      	adds	r3, #60	@ 0x3c
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	edd3 6a00 	vldr	s13, [r3]
 8002ddc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002de0:	009a      	lsls	r2, r3, #2
 8002de2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002de6:	4413      	add	r3, r2
 8002de8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002dec:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002df0:	6812      	ldr	r2, [r2, #0]
 8002df2:	3304      	adds	r3, #4
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	edd3 7a00 	vldr	s15, [r3]
 8002dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e04:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002e0e:	443b      	add	r3, r7
 8002e10:	3b58      	subs	r3, #88	@ 0x58
 8002e12:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002e16:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002e20:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	ddc4      	ble.n	8002db2 <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002e28:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002e32:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	ddad      	ble.n	8002d96 <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002e42:	2300      	movs	r3, #0
 8002e44:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002e48:	e021      	b.n	8002e8e <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 8002e4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002e54:	443b      	add	r3, r7
 8002e56:	3b58      	subs	r3, #88	@ 0x58
 8002e58:	ed93 7a00 	vldr	s14, [r3]
 8002e5c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002e60:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e6a:	333c      	adds	r3, #60	@ 0x3c
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	edd3 7a00 	vldr	s15, [r3]
 8002e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e78:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e80:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002e84:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e88:	3301      	adds	r3, #1
 8002e8a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002e8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	ddd9      	ble.n	8002e4a <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 8002e96:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002e9a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002ea4:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eac:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 8002eb0:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002ec4:	e04d      	b.n	8002f62 <MotorKalman_Update+0x2be>
        PC[i] = 0;
 8002ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002ed0:	443b      	add	r3, r7
 8002ed2:	3b68      	subs	r3, #104	@ 0x68
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002eda:	2300      	movs	r3, #0
 8002edc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002ee0:	e036      	b.n	8002f50 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 8002ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002eec:	443b      	add	r3, r7
 8002eee:	3b68      	subs	r3, #104	@ 0x68
 8002ef0:	ed93 7a00 	vldr	s14, [r3]
 8002ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002ef8:	009a      	lsls	r2, r3, #2
 8002efa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002efe:	4413      	add	r3, r2
 8002f00:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002f04:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	edd3 6a00 	vldr	s13, [r3]
 8002f14:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f18:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f22:	333c      	adds	r3, #60	@ 0x3c
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	edd3 7a00 	vldr	s15, [r3]
 8002f2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002f3e:	443b      	add	r3, r7
 8002f40:	3b68      	subs	r3, #104	@ 0x68
 8002f42:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002f46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002f50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	ddc4      	ble.n	8002ee2 <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	ddad      	ble.n	8002ec6 <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 8002f6a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002f7e:	e01a      	b.n	8002fb6 <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8002f80:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002f8a:	443b      	add	r3, r7
 8002f8c:	3b68      	subs	r3, #104	@ 0x68
 8002f8e:	edd3 6a00 	vldr	s13, [r3]
 8002f92:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8002f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f9a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002fa4:	443b      	add	r3, r7
 8002fa6:	3b78      	subs	r3, #120	@ 0x78
 8002fa8:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002fac:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002fb6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	dde0      	ble.n	8002f80 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002fc4:	e029      	b.n	800301a <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 8002fc6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002fca:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	ed93 7a00 	vldr	s14, [r3]
 8002fdc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002fe6:	443b      	add	r3, r7
 8002fe8:	3b78      	subs	r3, #120	@ 0x78
 8002fea:	edd3 6a00 	vldr	s13, [r3]
 8002fee:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8002ff2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ffa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ffe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003010:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003014:	3301      	adds	r3, #1
 8003016:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800301a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800301e:	2b03      	cmp	r3, #3
 8003020:	ddd1      	ble.n	8002fc6 <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8003022:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8003026:	2240      	movs	r2, #64	@ 0x40
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f00f fea8 	bl	8012d80 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003030:	2300      	movs	r3, #0
 8003032:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003036:	e035      	b.n	80030a4 <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003038:	2300      	movs	r3, #0
 800303a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800303e:	e028      	b.n	8003092 <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 8003040:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800304a:	443b      	add	r3, r7
 800304c:	3b78      	subs	r3, #120	@ 0x78
 800304e:	ed93 7a00 	vldr	s14, [r3]
 8003052:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003056:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003060:	333c      	adds	r3, #60	@ 0x3c
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	edd3 7a00 	vldr	s15, [r3]
 800306a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800306e:	009a      	lsls	r2, r3, #2
 8003070:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003074:	4413      	add	r3, r2
 8003076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003080:	443b      	add	r3, r7
 8003082:	3bb8      	subs	r3, #184	@ 0xb8
 8003084:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003088:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800308c:	3301      	adds	r3, #1
 800308e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003092:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003096:	2b03      	cmp	r3, #3
 8003098:	ddd2      	ble.n	8003040 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800309a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800309e:	3301      	adds	r3, #1
 80030a0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80030a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	ddc5      	ble.n	8003038 <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80030ac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80030b0:	2240      	movs	r2, #64	@ 0x40
 80030b2:	2100      	movs	r1, #0
 80030b4:	4618      	mov	r0, r3
 80030b6:	f00f fe63 	bl	8012d80 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80030ba:	2300      	movs	r3, #0
 80030bc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80030c0:	e038      	b.n	8003134 <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80030c2:	2300      	movs	r3, #0
 80030c4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80030c8:	e02b      	b.n	8003122 <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 80030ca:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80030ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d102      	bne.n	80030dc <MotorKalman_Update+0x438>
 80030d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80030da:	e001      	b.n	80030e0 <MotorKalman_Update+0x43c>
 80030dc:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 80032f8 <MotorKalman_Update+0x654>
 80030e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030e4:	009a      	lsls	r2, r3, #2
 80030e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80030f2:	443b      	add	r3, r7
 80030f4:	3bb8      	subs	r3, #184	@ 0xb8
 80030f6:	edd3 7a00 	vldr	s15, [r3]
 80030fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030fe:	009a      	lsls	r2, r3, #2
 8003100:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003104:	4413      	add	r3, r2
 8003106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003110:	443b      	add	r3, r7
 8003112:	3bf8      	subs	r3, #248	@ 0xf8
 8003114:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003118:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800311c:	3301      	adds	r3, #1
 800311e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003122:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003126:	2b03      	cmp	r3, #3
 8003128:	ddcf      	ble.n	80030ca <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800312a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800312e:	3301      	adds	r3, #1
 8003130:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003138:	2b03      	cmp	r3, #3
 800313a:	ddc2      	ble.n	80030c2 <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 800313c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003140:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f103 0110 	add.w	r1, r3, #16
 800314a:	f107 0308 	add.w	r3, r7, #8
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	4618      	mov	r0, r3
 8003152:	f00f fe59 	bl	8012e08 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003156:	2300      	movs	r3, #0
 8003158:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800315c:	e06e      	b.n	800323c <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800315e:	2300      	movs	r3, #0
 8003160:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003164:	e061      	b.n	800322a <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8003166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800316a:	009a      	lsls	r2, r3, #2
 800316c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003170:	4413      	add	r3, r2
 8003172:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8003176:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	3304      	adds	r3, #4
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8003188:	2300      	movs	r3, #0
 800318a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800318e:	e043      	b.n	8003218 <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8003190:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003194:	009a      	lsls	r2, r3, #2
 8003196:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800319a:	4413      	add	r3, r2
 800319c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80031a0:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	3304      	adds	r3, #4
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 80031b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031b4:	009a      	lsls	r2, r3, #2
 80031b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80031c2:	443b      	add	r3, r7
 80031c4:	3bf8      	subs	r3, #248	@ 0xf8
 80031c6:	edd3 6a00 	vldr	s13, [r3]
 80031ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ce:	009a      	lsls	r2, r3, #2
 80031d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80031d4:	4413      	add	r3, r2
 80031d6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80031da:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	edd3 7a00 	vldr	s15, [r3]
 80031e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80031ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031ee:	009a      	lsls	r2, r3, #2
 80031f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80031f4:	4413      	add	r3, r2
 80031f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fa:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80031fe:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	3304      	adds	r3, #4
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800320e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003212:	3301      	adds	r3, #1
 8003214:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800321c:	2b03      	cmp	r3, #3
 800321e:	ddb7      	ble.n	8003190 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003220:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003224:	3301      	adds	r3, #1
 8003226:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800322a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800322e:	2b03      	cmp	r3, #3
 8003230:	dd99      	ble.n	8003166 <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003232:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003236:	3301      	adds	r3, #1
 8003238:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800323c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003240:	2b03      	cmp	r3, #3
 8003242:	dd8c      	ble.n	800315e <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8003244:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003248:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003254:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 800325e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003262:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800326e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8003278:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800327c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003288:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8003292:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003296:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032a2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 80032ac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032b0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 80032ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032be:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2201      	movs	r2, #1
 80032c6:	2104      	movs	r1, #4
 80032c8:	f00e ffe9 	bl	801229e <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 80032cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 80032da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032de:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3310      	adds	r3, #16
 80032e6:	2204      	movs	r2, #4
 80032e8:	2104      	movs	r1, #4
 80032ea:	f00e ffd8 	bl	801229e <arm_mat_init_f32>
}
 80032ee:	bf00      	nop
 80032f0:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	00000000 	.word	0x00000000

080032fc <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	ed87 0a02 	vstr	s0, [r7, #8]
 8003308:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 800330c:	ed97 0a02 	vldr	s0, [r7, #8]
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f7ff fafa 	bl	800290a <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 8003316:	ed97 0a01 	vldr	s0, [r7, #4]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f7ff fcc2 	bl	8002ca4 <MotorKalman_Update>

    return filter->velocity;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 8003326:	ee07 3a90 	vmov	s15, r3
}
 800332a:	eeb0 0a67 	vmov.f32	s0, s15
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	e00c      	b.n	8003360 <matrix_copy+0x2c>
        dst[i] = src[i];
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	441a      	add	r2, r3
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	68b9      	ldr	r1, [r7, #8]
 8003354:	440b      	add	r3, r1
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	3301      	adds	r3, #1
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	429a      	cmp	r2, r3
 8003366:	dbee      	blt.n	8003346 <matrix_copy+0x12>
    }
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
	...

08003378 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 800337e:	af00      	add	r7, sp, #0
 8003380:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8003384:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8003388:	6020      	str	r0, [r4, #0]
 800338a:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 800338e:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8003392:	6001      	str	r1, [r0, #0]
 8003394:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8003398:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 800339c:	ed81 0a00 	vstr	s0, [r1]
 80033a0:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 80033a4:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 80033a8:	600a      	str	r2, [r1, #0]
 80033aa:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 80033ae:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 80033b2:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 80033b4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80033b8:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80033bc:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2204      	movs	r2, #4
 80033c4:	2104      	movs	r1, #4
 80033c6:	f00e ff6a 	bl	801229e <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 80033ca:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80033ce:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 80033d2:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2204      	movs	r2, #4
 80033da:	2104      	movs	r1, #4
 80033dc:	f00e ff5f 	bl	801229e <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 80033e0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80033e4:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80033e8:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2201      	movs	r2, #1
 80033f0:	2104      	movs	r1, #4
 80033f2:	f00e ff54 	bl	801229e <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 80033f6:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80033fa:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80033fe:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2201      	movs	r2, #1
 8003406:	2104      	movs	r1, #4
 8003408:	f00e ff49 	bl	801229e <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 800340c:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8003410:	2240      	movs	r2, #64	@ 0x40
 8003412:	2100      	movs	r1, #0
 8003414:	4618      	mov	r0, r3
 8003416:	f00f fcb3 	bl	8012d80 <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 800341a:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 800341e:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8003422:	2204      	movs	r2, #4
 8003424:	2104      	movs	r1, #4
 8003426:	f00e ff3a 	bl	801229e <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 800342a:	2300      	movs	r3, #0
 800342c:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8003430:	e011      	b.n	8003456 <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 8003432:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8003442:	443b      	add	r3, r7
 8003444:	3b6c      	subs	r3, #108	@ 0x6c
 8003446:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800344a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 800344c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8003450:	3301      	adds	r3, #1
 8003452:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8003456:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 800345a:	2b03      	cmp	r3, #3
 800345c:	dde9      	ble.n	8003432 <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 800345e:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8003462:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8003466:	2204      	movs	r2, #4
 8003468:	2104      	movs	r1, #4
 800346a:	f00e ff18 	bl	801229e <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 800346e:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8003472:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003476:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800347a:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 800347e:	ed93 0a00 	vldr	s0, [r3]
 8003482:	4610      	mov	r0, r2
 8003484:	f00f fb14 	bl	8012ab0 <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8003488:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800348c:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8003490:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8003494:	2210      	movs	r2, #16
 8003496:	6819      	ldr	r1, [r3, #0]
 8003498:	f7ff ff4c 	bl	8003334 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 800349c:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 80034a0:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 80034a4:	2204      	movs	r2, #4
 80034a6:	2104      	movs	r1, #4
 80034a8:	f00e fef9 	bl	801229e <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 80034ac:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80034b0:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 80034b4:	2204      	movs	r2, #4
 80034b6:	2104      	movs	r1, #4
 80034b8:	f00e fef1 	bl	801229e <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 80034bc:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 80034c0:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 80034c4:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 80034c8:	4618      	mov	r0, r3
 80034ca:	f00e fead 	bl	8012228 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 80034ce:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 80034d2:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80034d6:	2210      	movs	r2, #16
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff ff2b 	bl	8003334 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 80034de:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80034e2:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 80034e6:	2302      	movs	r3, #2
 80034e8:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 80034ec:	e03a      	b.n	8003564 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 80034ee:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80034f2:	ee07 3a90 	vmov	s15, r3
 80034f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034fa:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 80034fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003502:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8003506:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 800350a:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 800350e:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8003512:	4618      	mov	r0, r3
 8003514:	f00f fa52 	bl	80129bc <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8003518:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 800351c:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8003520:	2210      	movs	r2, #16
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff ff06 	bl	8003334 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8003528:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800352c:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8003530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003534:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8003538:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800353c:	4611      	mov	r1, r2
 800353e:	eeb0 0a47 	vmov.f32	s0, s14
 8003542:	4618      	mov	r0, r3
 8003544:	f00f fab4 	bl	8012ab0 <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8003548:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 800354c:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8003550:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 8003554:	4618      	mov	r0, r3
 8003556:	f00e fe67 	bl	8012228 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 800355a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 800355e:	3301      	adds	r3, #1
 8003560:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8003564:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8003568:	2b0a      	cmp	r3, #10
 800356a:	ddc0      	ble.n	80034ee <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 800356c:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8003570:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003574:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003578:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 800357c:	ed93 0a00 	vldr	s0, [r3]
 8003580:	4610      	mov	r0, r2
 8003582:	f00f fa95 	bl	8012ab0 <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 8003586:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800358a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800358e:	461a      	mov	r2, r3
 8003590:	2300      	movs	r3, #0
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	6053      	str	r3, [r2, #4]
 8003596:	6093      	str	r3, [r2, #8]
 8003598:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 800359a:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 800359e:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 80035a2:	2201      	movs	r2, #1
 80035a4:	2104      	movs	r1, #4
 80035a6:	f00e fe7a 	bl	801229e <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 80035aa:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 80035ae:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80035b2:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 80035b6:	4618      	mov	r0, r3
 80035b8:	f00f fa00 	bl	80129bc <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 80035bc:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 80035c0:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 80035c4:	2201      	movs	r2, #1
 80035c6:	2104      	movs	r1, #4
 80035c8:	f00e fe69 	bl	801229e <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 80035cc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80035d0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80035d4:	edd3 7a00 	vldr	s15, [r3]
 80035d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80035dc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80035e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80035e4:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80035e8:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80035ec:	4611      	mov	r1, r2
 80035ee:	eeb0 0a47 	vmov.f32	s0, s14
 80035f2:	4618      	mov	r0, r3
 80035f4:	f00f fa5c 	bl	8012ab0 <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80035f8:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80035fc:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003600:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003604:	4618      	mov	r0, r3
 8003606:	f00e fe0f 	bl	8012228 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 800360a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800360e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003612:	4618      	mov	r0, r3
 8003614:	2340      	movs	r3, #64	@ 0x40
 8003616:	461a      	mov	r2, r3
 8003618:	2100      	movs	r1, #0
 800361a:	f00f fbb1 	bl	8012d80 <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 800361e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8003622:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8003626:	2204      	movs	r2, #4
 8003628:	2104      	movs	r1, #4
 800362a:	f00e fe38 	bl	801229e <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 800362e:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8003632:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8003636:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 800363a:	4618      	mov	r0, r3
 800363c:	f00f f9be 	bl	80129bc <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8003640:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003644:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003648:	461a      	mov	r2, r3
 800364a:	2300      	movs	r3, #0
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	6053      	str	r3, [r2, #4]
 8003650:	6093      	str	r3, [r2, #8]
 8003652:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 8003654:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003658:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 800365c:	2201      	movs	r2, #1
 800365e:	2104      	movs	r1, #4
 8003660:	f00e fe1d 	bl	801229e <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 8003664:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8003668:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800366c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003670:	4618      	mov	r0, r3
 8003672:	f00f f9a3 	bl	80129bc <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 8003676:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800367a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800367e:	edd3 7a00 	vldr	s15, [r3]
 8003682:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003686:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800368a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800368e:	edd3 7a00 	vldr	s15, [r3]
 8003692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003696:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 800369a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800369e:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80036a2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80036a6:	4611      	mov	r1, r2
 80036a8:	eeb0 0a47 	vmov.f32	s0, s14
 80036ac:	4618      	mov	r0, r3
 80036ae:	f00f f9ff 	bl	8012ab0 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80036b2:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80036b6:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80036ba:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80036be:	4618      	mov	r0, r3
 80036c0:	f00e fdb2 	bl	8012228 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 80036c4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80036c8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80036cc:	4618      	mov	r0, r3
 80036ce:	2340      	movs	r3, #64	@ 0x40
 80036d0:	461a      	mov	r2, r3
 80036d2:	2100      	movs	r1, #0
 80036d4:	f00f fb54 	bl	8012d80 <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 80036d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80036dc:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80036e0:	2204      	movs	r2, #4
 80036e2:	2104      	movs	r1, #4
 80036e4:	f00e fddb 	bl	801229e <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 80036e8:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80036ec:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80036f0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80036f4:	4618      	mov	r0, r3
 80036f6:	f00f f961 	bl	80129bc <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 80036fa:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80036fe:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003702:	461a      	mov	r2, r3
 8003704:	2300      	movs	r3, #0
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	6053      	str	r3, [r2, #4]
 800370a:	6093      	str	r3, [r2, #8]
 800370c:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 800370e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003712:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 8003716:	2201      	movs	r2, #1
 8003718:	2104      	movs	r1, #4
 800371a:	f00e fdc0 	bl	801229e <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 800371e:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8003722:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003726:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800372a:	4618      	mov	r0, r3
 800372c:	f00f f946 	bl	80129bc <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 8003730:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003734:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003738:	edd3 7a00 	vldr	s15, [r3]
 800373c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003740:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003744:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003748:	edd3 7a00 	vldr	s15, [r3]
 800374c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003750:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003754:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003758:	edd3 7a00 	vldr	s15, [r3]
 800375c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003760:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8003764:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003768:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800376c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003770:	4611      	mov	r1, r2
 8003772:	eeb0 0a47 	vmov.f32	s0, s14
 8003776:	4618      	mov	r0, r3
 8003778:	f00f f99a 	bl	8012ab0 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800377c:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003780:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003784:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003788:	4618      	mov	r0, r3
 800378a:	f00e fd4d 	bl	8012228 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 800378e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003792:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8003796:	4618      	mov	r0, r3
 8003798:	2340      	movs	r3, #64	@ 0x40
 800379a:	461a      	mov	r2, r3
 800379c:	2100      	movs	r1, #0
 800379e:	f00f faef 	bl	8012d80 <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 80037a2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80037a6:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80037aa:	2204      	movs	r2, #4
 80037ac:	2104      	movs	r1, #4
 80037ae:	f00e fd76 	bl	801229e <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 80037b2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80037b6:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80037ba:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80037be:	4618      	mov	r0, r3
 80037c0:	f00f f8fc 	bl	80129bc <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 80037c4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80037c8:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 80037cc:	461a      	mov	r2, r3
 80037ce:	2300      	movs	r3, #0
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	6053      	str	r3, [r2, #4]
 80037d4:	6093      	str	r3, [r2, #8]
 80037d6:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 80037d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037dc:	f107 001c 	add.w	r0, r7, #28
 80037e0:	2201      	movs	r2, #1
 80037e2:	2104      	movs	r1, #4
 80037e4:	f00e fd5b 	bl	801229e <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 80037e8:	f107 021c 	add.w	r2, r7, #28
 80037ec:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80037f0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80037f4:	4618      	mov	r0, r3
 80037f6:	f00f f8e1 	bl	80129bc <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 80037fa:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80037fe:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003802:	edd3 7a00 	vldr	s15, [r3]
 8003806:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800380a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800380e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003812:	edd3 7a00 	vldr	s15, [r3]
 8003816:	ee27 7a27 	vmul.f32	s14, s14, s15
 800381a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800381e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003822:	edd3 7a00 	vldr	s15, [r3]
 8003826:	ee27 7a27 	vmul.f32	s14, s14, s15
 800382a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800382e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003832:	edd3 7a00 	vldr	s15, [r3]
 8003836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8003874 <discretize_system_with_arm+0x4fc>
 800383e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003842:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003846:	f107 031c 	add.w	r3, r7, #28
 800384a:	4611      	mov	r1, r2
 800384c:	eeb0 0a47 	vmov.f32	s0, s14
 8003850:	4618      	mov	r0, r3
 8003852:	f00f f92d 	bl	8012ab0 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003856:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800385a:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800385e:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003862:	4618      	mov	r0, r3
 8003864:	f00e fce0 	bl	8012228 <arm_mat_add_f32>
}
 8003868:	bf00      	nop
 800386a:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 800386e:	46bd      	mov	sp, r7
 8003870:	bd90      	pop	{r4, r7, pc}
 8003872:	bf00      	nop
 8003874:	42f00000 	.word	0x42f00000

08003878 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 8003878:	b580      	push	{r7, lr}
 800387a:	b09e      	sub	sp, #120	@ 0x78
 800387c:	af00      	add	r7, sp, #0
 800387e:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8003882:	edc7 0a08 	vstr	s1, [r7, #32]
 8003886:	ed87 1a07 	vstr	s2, [r7, #28]
 800388a:	edc7 1a06 	vstr	s3, [r7, #24]
 800388e:	ed87 2a05 	vstr	s4, [r7, #20]
 8003892:	edc7 2a04 	vstr	s5, [r7, #16]
 8003896:	ed87 3a03 	vstr	s6, [r7, #12]
 800389a:	60b8      	str	r0, [r7, #8]
 800389c:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 800389e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80038a2:	2240      	movs	r2, #64	@ 0x40
 80038a4:	2100      	movs	r1, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f00f fa6a 	bl	8012d80 <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 80038ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 80038ba:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80038be:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 80038c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80038c4:	eef1 6a67 	vneg.f32	s13, s15
 80038c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80038cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038d0:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 80038d4:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 80038d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80038dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038e0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 80038e4:	edd7 6a04 	vldr	s13, [r7, #16]
 80038e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80038ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038f0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 80038f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80038f8:	eef1 6a67 	vneg.f32	s13, s15
 80038fc:	ed97 7a08 	vldr	s14, [r7, #32]
 8003900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003904:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 8003908:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800390c:	eef1 6a67 	vneg.f32	s13, s15
 8003910:	ed97 7a08 	vldr	s14, [r7, #32]
 8003914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003918:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 800391c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003920:	ed97 7a08 	vldr	s14, [r7, #32]
 8003924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003928:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    discretize_system_with_arm(A_c, B_c, dt, A, B);
 800392c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003930:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	ed97 0a03 	vldr	s0, [r7, #12]
 800393c:	f7ff fd1c 	bl	8003378 <discretize_system_with_arm>
}
 8003940:	bf00      	nop
 8003942:	3778      	adds	r7, #120	@ 0x78
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	4613      	mov	r3, r2
 8003954:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4a0b      	ldr	r2, [pc, #44]	@ (8003988 <PWM_init+0x40>)
 800395a:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	88fa      	ldrh	r2, [r7, #6]
 8003966:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 800396e:	68b8      	ldr	r0, [r7, #8]
 8003970:	f00a fcc6 	bl	800e300 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	4619      	mov	r1, r3
 8003978:	68b8      	ldr	r0, [r7, #8]
 800397a:	f00a fe0d 	bl	800e598 <HAL_TIM_PWM_Start>
}
 800397e:	bf00      	nop
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	0a21fe80 	.word	0x0a21fe80

0800398c <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 800398c:	b5b0      	push	{r4, r5, r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	ed87 0a02 	vstr	s0, [r7, #8]
 8003998:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 800399c:	edd7 7a02 	vldr	s15, [r7, #8]
 80039a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80039a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a8:	d137      	bne.n	8003a1a <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	889b      	ldrh	r3, [r3, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d105      	bne.n	80039be <PWM_write_duty+0x32>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2200      	movs	r2, #0
 80039ba:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 80039bc:	e0e1      	b.n	8003b82 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	889b      	ldrh	r3, [r3, #4]
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d105      	bne.n	80039d2 <PWM_write_duty+0x46>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	2300      	movs	r3, #0
 80039ce:	6393      	str	r3, [r2, #56]	@ 0x38
 80039d0:	e0d7      	b.n	8003b82 <PWM_write_duty+0x1f6>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	889b      	ldrh	r3, [r3, #4]
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d105      	bne.n	80039e6 <PWM_write_duty+0x5a>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	2300      	movs	r3, #0
 80039e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80039e4:	e0cd      	b.n	8003b82 <PWM_write_duty+0x1f6>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	889b      	ldrh	r3, [r3, #4]
 80039ea:	2b0c      	cmp	r3, #12
 80039ec:	d105      	bne.n	80039fa <PWM_write_duty+0x6e>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	2300      	movs	r3, #0
 80039f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80039f8:	e0c3      	b.n	8003b82 <PWM_write_duty+0x1f6>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	889b      	ldrh	r3, [r3, #4]
 80039fe:	2b10      	cmp	r3, #16
 8003a00:	d105      	bne.n	8003a0e <PWM_write_duty+0x82>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	6493      	str	r3, [r2, #72]	@ 0x48
 8003a0c:	e0b9      	b.n	8003b82 <PWM_write_duty+0x1f6>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	2300      	movs	r3, #0
 8003a16:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003a18:	e0b3      	b.n	8003b82 <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	ee07 3a90 	vmov	s15, r3
 8003a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a26:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a32:	ee17 2a90 	vmov	r2, s15
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003a42:	33fe      	adds	r3, #254	@ 0xfe
 8003a44:	4a51      	ldr	r2, [pc, #324]	@ (8003b8c <PWM_write_duty+0x200>)
 8003a46:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4a:	0bdb      	lsrs	r3, r3, #15
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	ee07 3a90 	vmov	s15, r3
 8003a5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	899b      	ldrh	r3, [r3, #12]
 8003a66:	3301      	adds	r3, #1
 8003a68:	ee07 3a90 	vmov	s15, r3
 8003a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a70:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a74:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a88:	ee17 3a90 	vmov	r3, s15
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	89db      	ldrh	r3, [r3, #14]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fc fd10 	bl	80004bc <__aeabi_i2d>
 8003a9c:	4604      	mov	r4, r0
 8003a9e:	460d      	mov	r5, r1
 8003aa0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aa4:	eef0 7ae7 	vabs.f32	s15, s15
 8003aa8:	ee17 0a90 	vmov	r0, s15
 8003aac:	f7fc fd18 	bl	80004e0 <__aeabi_f2d>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	f7fc fd6a 	bl	8000590 <__aeabi_dmul>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	4b31      	ldr	r3, [pc, #196]	@ (8003b90 <PWM_write_duty+0x204>)
 8003aca:	f7fc fe8b 	bl	80007e4 <__aeabi_ddiv>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	f7fd f81d 	bl	8000b14 <__aeabi_d2uiz>
 8003ada:	4603      	mov	r3, r0
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	899a      	ldrh	r2, [r3, #12]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	89da      	ldrh	r2, [r3, #14]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	89da      	ldrh	r2, [r3, #14]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	889b      	ldrh	r3, [r3, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <PWM_write_duty+0x190>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	6952      	ldr	r2, [r2, #20]
 8003b18:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003b1a:	e032      	b.n	8003b82 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	889b      	ldrh	r3, [r3, #4]
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d106      	bne.n	8003b32 <PWM_write_duty+0x1a6>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003b30:	e027      	b.n	8003b82 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	889b      	ldrh	r3, [r3, #4]
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d106      	bne.n	8003b48 <PWM_write_duty+0x1bc>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003b46:	e01c      	b.n	8003b82 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	889b      	ldrh	r3, [r3, #4]
 8003b4c:	2b0c      	cmp	r3, #12
 8003b4e:	d106      	bne.n	8003b5e <PWM_write_duty+0x1d2>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003b5c:	e011      	b.n	8003b82 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	889b      	ldrh	r3, [r3, #4]
 8003b62:	2b10      	cmp	r3, #16
 8003b64:	d106      	bne.n	8003b74 <PWM_write_duty+0x1e8>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003b72:	e006      	b.n	8003b82 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003b80:	e7ff      	b.n	8003b82 <PWM_write_duty+0x1f6>
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bdb0      	pop	{r4, r5, r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	80008001 	.word	0x80008001
 8003b90:	40590000 	.word	0x40590000
 8003b94:	00000000 	.word	0x00000000

08003b98 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8003b98:	b5b0      	push	{r4, r5, r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ba4:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003ba8:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bac:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb4:	d137      	bne.n	8003c26 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	889b      	ldrh	r3, [r3, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d105      	bne.n	8003bca <PWM_write_range+0x32>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003bc8:	e0e1      	b.n	8003d8e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	889b      	ldrh	r3, [r3, #4]
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d105      	bne.n	8003bde <PWM_write_range+0x46>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	6393      	str	r3, [r2, #56]	@ 0x38
 8003bdc:	e0d7      	b.n	8003d8e <PWM_write_range+0x1f6>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	889b      	ldrh	r3, [r3, #4]
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d105      	bne.n	8003bf2 <PWM_write_range+0x5a>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	2300      	movs	r3, #0
 8003bee:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003bf0:	e0cd      	b.n	8003d8e <PWM_write_range+0x1f6>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	889b      	ldrh	r3, [r3, #4]
 8003bf6:	2b0c      	cmp	r3, #12
 8003bf8:	d105      	bne.n	8003c06 <PWM_write_range+0x6e>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	2300      	movs	r3, #0
 8003c02:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c04:	e0c3      	b.n	8003d8e <PWM_write_range+0x1f6>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	889b      	ldrh	r3, [r3, #4]
 8003c0a:	2b10      	cmp	r3, #16
 8003c0c:	d105      	bne.n	8003c1a <PWM_write_range+0x82>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	2300      	movs	r3, #0
 8003c16:	6493      	str	r3, [r2, #72]	@ 0x48
 8003c18:	e0b9      	b.n	8003d8e <PWM_write_range+0x1f6>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	2300      	movs	r3, #0
 8003c22:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003c24:	e0b3      	b.n	8003d8e <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c32:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c3e:	ee17 2a90 	vmov	r2, s15
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003c4e:	33fe      	adds	r3, #254	@ 0xfe
 8003c50:	4a53      	ldr	r2, [pc, #332]	@ (8003da0 <PWM_write_range+0x208>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	0bdb      	lsrs	r3, r3, #15
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	ee07 3a90 	vmov	s15, r3
 8003c6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	899b      	ldrh	r3, [r3, #12]
 8003c72:	3301      	adds	r3, #1
 8003c74:	ee07 3a90 	vmov	s15, r3
 8003c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c7c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003c80:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c94:	ee17 3a90 	vmov	r3, s15
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	89db      	ldrh	r3, [r3, #14]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fc fc0a 	bl	80004bc <__aeabi_i2d>
 8003ca8:	4604      	mov	r4, r0
 8003caa:	460d      	mov	r5, r1
 8003cac:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cb0:	eef0 7ae7 	vabs.f32	s15, s15
 8003cb4:	ee17 0a90 	vmov	r0, s15
 8003cb8:	f7fc fc12 	bl	80004e0 <__aeabi_f2d>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	f7fc fc64 	bl	8000590 <__aeabi_dmul>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4619      	mov	r1, r3
 8003cd0:	a331      	add	r3, pc, #196	@ (adr r3, 8003d98 <PWM_write_range+0x200>)
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	f7fc fd85 	bl	80007e4 <__aeabi_ddiv>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4610      	mov	r0, r2
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f7fc ff17 	bl	8000b14 <__aeabi_d2uiz>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	461a      	mov	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	899a      	ldrh	r2, [r3, #12]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	89da      	ldrh	r2, [r3, #14]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	89da      	ldrh	r2, [r3, #14]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	889b      	ldrh	r3, [r3, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <PWM_write_range+0x190>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	6952      	ldr	r2, [r2, #20]
 8003d24:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003d26:	e032      	b.n	8003d8e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	889b      	ldrh	r3, [r3, #4]
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d106      	bne.n	8003d3e <PWM_write_range+0x1a6>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003d3c:	e027      	b.n	8003d8e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	889b      	ldrh	r3, [r3, #4]
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d106      	bne.n	8003d54 <PWM_write_range+0x1bc>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003d52:	e01c      	b.n	8003d8e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	889b      	ldrh	r3, [r3, #4]
 8003d58:	2b0c      	cmp	r3, #12
 8003d5a:	d106      	bne.n	8003d6a <PWM_write_range+0x1d2>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003d68:	e011      	b.n	8003d8e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	889b      	ldrh	r3, [r3, #4]
 8003d6e:	2b10      	cmp	r3, #16
 8003d70:	d106      	bne.n	8003d80 <PWM_write_range+0x1e8>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003d7e:	e006      	b.n	8003d8e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003d8c:	e7ff      	b.n	8003d8e <PWM_write_range+0x1f6>
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bdb0      	pop	{r4, r5, r7, pc}
 8003d96:	bf00      	nop
 8003d98:	00000000 	.word	0x00000000
 8003d9c:	40efffe0 	.word	0x40efffe0
 8003da0:	80008001 	.word	0x80008001

08003da4 <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6178      	str	r0, [r7, #20]
 8003dac:	6139      	str	r1, [r7, #16]
 8003dae:	60fa      	str	r2, [r7, #12]
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	ed87 0a01 	vstr	s0, [r7, #4]
 8003db6:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2200      	movs	r2, #0
 8003de2:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 8003e04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	fb93 f2f2 	sdiv	r2, r3, r2
 8003e0e:	68f9      	ldr	r1, [r7, #12]
 8003e10:	fb01 f202 	mul.w	r2, r1, r2
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2200      	movs	r2, #0
 8003e22:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2200      	movs	r2, #0
 8003e28:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8003e72:	213c      	movs	r1, #60	@ 0x3c
 8003e74:	6938      	ldr	r0, [r7, #16]
 8003e76:	f00a fe4b 	bl	800eb10 <HAL_TIM_Encoder_Start>
}
 8003e7a:	bf00      	nop
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	0000      	movs	r0, r0
 8003e84:	0000      	movs	r0, r0
	...

08003e88 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003e88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	0fda      	lsrs	r2, r3, #31
 8003eb0:	4413      	add	r3, r2
 8003eb2:	105b      	asrs	r3, r3, #1
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	dd05      	ble.n	8003ec8 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	e00e      	b.n	8003ee6 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	0fda      	lsrs	r2, r3, #31
 8003ece:	4413      	add	r3, r2
 8003ed0:	105b      	asrs	r3, r3, #1
 8003ed2:	425b      	negs	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	da04      	bge.n	8003ee6 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef4:	441a      	add	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	ee07 3a90 	vmov	s15, r3
 8003f08:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	ee07 3a90 	vmov	s15, r3
 8003f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f18:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003f22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fc fad3 	bl	80004e0 <__aeabi_f2d>
 8003f3a:	4604      	mov	r4, r0
 8003f3c:	460d      	mov	r5, r1
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	ee07 3a90 	vmov	s15, r3
 8003f46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f5a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003f5e:	ee17 0a90 	vmov	r0, s15
 8003f62:	f7fc fabd 	bl	80004e0 <__aeabi_f2d>
 8003f66:	a33c      	add	r3, pc, #240	@ (adr r3, 8004058 <QEI_get_diff_count+0x1d0>)
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	f7fc fb10 	bl	8000590 <__aeabi_dmul>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4690      	mov	r8, r2
 8003f76:	4699      	mov	r9, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fc faaf 	bl	80004e0 <__aeabi_f2d>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4640      	mov	r0, r8
 8003f88:	4649      	mov	r1, r9
 8003f8a:	f7fc fb01 	bl	8000590 <__aeabi_dmul>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4620      	mov	r0, r4
 8003f94:	4629      	mov	r1, r5
 8003f96:	f7fc f945 	bl	8000224 <__adddf3>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4610      	mov	r0, r2
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	f7fc fdd7 	bl	8000b54 <__aeabi_d2f>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fc fa95 	bl	80004e0 <__aeabi_f2d>
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	460d      	mov	r5, r1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	ee07 3a90 	vmov	s15, r3
 8003fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fd2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003fd6:	ee16 0a90 	vmov	r0, s13
 8003fda:	f7fc fa81 	bl	80004e0 <__aeabi_f2d>
 8003fde:	a31e      	add	r3, pc, #120	@ (adr r3, 8004058 <QEI_get_diff_count+0x1d0>)
 8003fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe4:	f7fc fad4 	bl	8000590 <__aeabi_dmul>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4690      	mov	r8, r2
 8003fee:	4699      	mov	r9, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fc fa73 	bl	80004e0 <__aeabi_f2d>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4640      	mov	r0, r8
 8004000:	4649      	mov	r1, r9
 8004002:	f7fc fac5 	bl	8000590 <__aeabi_dmul>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4690      	mov	r8, r2
 800400c:	4699      	mov	r9, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004012:	4618      	mov	r0, r3
 8004014:	f7fc fa64 	bl	80004e0 <__aeabi_f2d>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4640      	mov	r0, r8
 800401e:	4649      	mov	r1, r9
 8004020:	f7fc fab6 	bl	8000590 <__aeabi_dmul>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4620      	mov	r0, r4
 800402a:	4629      	mov	r1, r5
 800402c:	f7fc f8fa 	bl	8000224 <__adddf3>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4610      	mov	r0, r2
 8004036:	4619      	mov	r1, r3
 8004038:	f7fc fd8c 	bl	8000b54 <__aeabi_d2f>
 800403c:	4602      	mov	r2, r0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	605a      	str	r2, [r3, #4]
}
 800404a:	bf00      	nop
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004054:	f3af 8000 	nop.w
 8004058:	54442d18 	.word	0x54442d18
 800405c:	400921fb 	.word	0x400921fb

08004060 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8004060:	b5b0      	push	{r4, r5, r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004070:	fb02 f303 	mul.w	r3, r2, r3
 8004074:	ee07 3a90 	vmov	s15, r3
 8004078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004086:	4618      	mov	r0, r3
 8004088:	f7fc fa2a 	bl	80004e0 <__aeabi_f2d>
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	4b83      	ldr	r3, [pc, #524]	@ (80042a0 <QEI_compute_data+0x240>)
 8004092:	f7fc fa7d 	bl	8000590 <__aeabi_dmul>
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	4614      	mov	r4, r2
 800409c:	461d      	mov	r5, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040aa:	ee17 0a90 	vmov	r0, s15
 80040ae:	f7fc fa17 	bl	80004e0 <__aeabi_f2d>
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	4620      	mov	r0, r4
 80040b8:	4629      	mov	r1, r5
 80040ba:	f7fc fb93 	bl	80007e4 <__aeabi_ddiv>
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	4614      	mov	r4, r2
 80040c4:	461d      	mov	r5, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fc fa08 	bl	80004e0 <__aeabi_f2d>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4620      	mov	r0, r4
 80040d6:	4629      	mov	r1, r5
 80040d8:	f7fc fa5a 	bl	8000590 <__aeabi_dmul>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
 80040e4:	f7fc fd36 	bl	8000b54 <__aeabi_d2f>
 80040e8:	4602      	mov	r2, r0
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80040f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80040f8:	ee17 0a90 	vmov	r0, s15
 80040fc:	f7fc f9f0 	bl	80004e0 <__aeabi_f2d>
 8004100:	a365      	add	r3, pc, #404	@ (adr r3, 8004298 <QEI_compute_data+0x238>)
 8004102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004106:	f7fc fa43 	bl	8000590 <__aeabi_dmul>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4614      	mov	r4, r2
 8004110:	461d      	mov	r5, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	ee07 3a90 	vmov	s15, r3
 800411a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800411e:	ee17 0a90 	vmov	r0, s15
 8004122:	f7fc f9dd 	bl	80004e0 <__aeabi_f2d>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4620      	mov	r0, r4
 800412c:	4629      	mov	r1, r5
 800412e:	f7fc fb59 	bl	80007e4 <__aeabi_ddiv>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4614      	mov	r4, r2
 8004138:	461d      	mov	r5, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800413e:	4618      	mov	r0, r3
 8004140:	f7fc f9ce 	bl	80004e0 <__aeabi_f2d>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4620      	mov	r0, r4
 800414a:	4629      	mov	r1, r5
 800414c:	f7fc fa20 	bl	8000590 <__aeabi_dmul>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4610      	mov	r0, r2
 8004156:	4619      	mov	r1, r3
 8004158:	f7fc fcfc 	bl	8000b54 <__aeabi_d2f>
 800415c:	4602      	mov	r2, r0
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004166:	4618      	mov	r0, r3
 8004168:	f7fc f9ba 	bl	80004e0 <__aeabi_f2d>
 800416c:	a34a      	add	r3, pc, #296	@ (adr r3, 8004298 <QEI_compute_data+0x238>)
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	f7fc fa0d 	bl	8000590 <__aeabi_dmul>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	4614      	mov	r4, r2
 800417c:	461d      	mov	r5, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004182:	4618      	mov	r0, r3
 8004184:	f7fc f9ac 	bl	80004e0 <__aeabi_f2d>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4620      	mov	r0, r4
 800418e:	4629      	mov	r1, r5
 8004190:	f7fc f9fe 	bl	8000590 <__aeabi_dmul>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4614      	mov	r4, r2
 800419a:	461d      	mov	r5, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	ee07 3a90 	vmov	s15, r3
 80041a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041a8:	ee17 0a90 	vmov	r0, s15
 80041ac:	f7fc f998 	bl	80004e0 <__aeabi_f2d>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4620      	mov	r0, r4
 80041b6:	4629      	mov	r1, r5
 80041b8:	f7fc fb14 	bl	80007e4 <__aeabi_ddiv>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4614      	mov	r4, r2
 80041c2:	461d      	mov	r5, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fc f989 	bl	80004e0 <__aeabi_f2d>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4620      	mov	r0, r4
 80041d4:	4629      	mov	r1, r5
 80041d6:	f7fc f9db 	bl	8000590 <__aeabi_dmul>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4610      	mov	r0, r2
 80041e0:	4619      	mov	r1, r3
 80041e2:	f7fc fcb7 	bl	8000b54 <__aeabi_d2f>
 80041e6:	4602      	mov	r2, r0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	edd3 7a03 	vldr	s15, [r3, #12]
 8004208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800420c:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8004210:	edd7 7a03 	vldr	s15, [r7, #12]
 8004214:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800421c:	d00a      	beq.n	8004234 <QEI_compute_data+0x1d4>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004222:	ee07 3a90 	vmov	s15, r3
 8004226:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800422a:	edd7 7a03 	vldr	s15, [r7, #12]
 800422e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004232:	e001      	b.n	8004238 <QEI_compute_data+0x1d8>
 8004234:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 80042a4 <QEI_compute_data+0x244>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	ed93 7a04 	vldr	s14, [r3, #16]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	edd3 7a05 	vldr	s15, [r3, #20]
 800424a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800424e:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 8004252:	edd7 7a02 	vldr	s15, [r7, #8]
 8004256:	eef5 7a40 	vcmp.f32	s15, #0.0
 800425a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425e:	d00a      	beq.n	8004276 <QEI_compute_data+0x216>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004264:	ee07 3a90 	vmov	s15, r3
 8004268:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800426c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004274:	e001      	b.n	800427a <QEI_compute_data+0x21a>
 8004276:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80042a4 <QEI_compute_data+0x244>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	615a      	str	r2, [r3, #20]
}
 8004290:	bf00      	nop
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bdb0      	pop	{r4, r5, r7, pc}
 8004298:	54442d18 	.word	0x54442d18
 800429c:	400921fb 	.word	0x400921fb
 80042a0:	404e0000 	.word	0x404e0000
 80042a4:	00000000 	.word	0x00000000

080042a8 <QEI_reset>:

void QEI_reset(QEI *qei) {
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
    // Reset counter history
    qei->c[NOW] = 0;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	605a      	str	r2, [r3, #4]

    // Reset all position and velocity values
    qei->diff_counts = 0;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->pulses = 0;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs = 0;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	63da      	str	r2, [r3, #60]	@ 0x3c
    qei->rads = 0;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	649a      	str	r2, [r3, #72]	@ 0x48

    // Reset velocity history
    qei->r[NOW] = 0;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	615a      	str	r2, [r3, #20]
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8004314:	b580      	push	{r7, lr}
 8004316:	b08e      	sub	sp, #56	@ 0x38
 8004318:	af00      	add	r7, sp, #0
 800431a:	6178      	str	r0, [r7, #20]
 800431c:	ed87 0a04 	vstr	s0, [r7, #16]
 8004320:	edc7 0a03 	vstr	s1, [r7, #12]
 8004324:	ed87 1a02 	vstr	s2, [r7, #8]
 8004328:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2200      	movs	r2, #0
 8004330:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 8004352:	ed97 7a03 	vldr	s14, [r7, #12]
 8004356:	edd7 7a04 	vldr	s15, [r7, #16]
 800435a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800435e:	eef0 7ae7 	vabs.f32	s15, s15
 8004362:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8004366:	ed97 7a03 	vldr	s14, [r7, #12]
 800436a:	edd7 7a04 	vldr	s15, [r7, #16]
 800436e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004372:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800437a:	d503      	bpl.n	8004384 <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	22ff      	movs	r2, #255	@ 0xff
 8004380:	741a      	strb	r2, [r3, #16]
 8004382:	e002      	b.n	800438a <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	2201      	movs	r2, #1
 8004388:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 800438a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800438e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004396:	d006      	beq.n	80043a6 <Trapezoidal_Generator+0x92>
 8004398:	edd7 7a01 	vldr	s15, [r7, #4]
 800439c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80043a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a4:	d104      	bne.n	80043b0 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	60da      	str	r2, [r3, #12]
        return;
 80043ae:	e06f      	b.n	8004490 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 80043b0:	edd7 6a02 	vldr	s13, [r7, #8]
 80043b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80043b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043bc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 80043c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80043c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80043c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80043cc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80043d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80043d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043dc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 80043e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 80043e4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80043e8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80043ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043f0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 80043f4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80043f8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80043fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004404:	db27      	blt.n	8004456 <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8004406:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800440a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800440e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004412:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8004416:	edd7 6a07 	vldr	s13, [r7, #28]
 800441a:	ed97 7a02 	vldr	s14, [r7, #8]
 800441e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004422:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800442a:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 800442c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004430:	edd7 7a06 	vldr	s15, [r7, #24]
 8004434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 800443e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004442:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004446:	edd7 7a06 	vldr	s15, [r7, #24]
 800444a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	edc3 7a02 	vstr	s15, [r3, #8]
 8004454:	e018      	b.n	8004488 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8004456:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800445a:	edd7 7a01 	vldr	s15, [r7, #4]
 800445e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004462:	eeb0 0a66 	vmov.f32	s0, s13
 8004466:	f00e fda7 	bl	8012fb8 <sqrtf>
 800446a:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	6a3a      	ldr	r2, [r7, #32]
 8004472:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	6a3a      	ldr	r2, [r7, #32]
 8004478:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 800447a:	edd7 7a08 	vldr	s15, [r7, #32]
 800447e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	60da      	str	r2, [r3, #12]
}
 8004490:	3738      	adds	r7, #56	@ 0x38
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8004498:	b480      	push	{r7}
 800449a:	b08d      	sub	sp, #52	@ 0x34
 800449c:	af00      	add	r7, sp, #0
 800449e:	6178      	str	r0, [r7, #20]
 80044a0:	6139      	str	r1, [r7, #16]
 80044a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80044a6:	edc7 0a02 	vstr	s1, [r7, #8]
 80044aa:	ed87 1a01 	vstr	s2, [r7, #4]
 80044ae:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80044b8:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 800473c <Trapezoidal_Evaluated+0x2a4>
 80044bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	ed93 7a03 	vldr	s14, [r3, #12]
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80044d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044da:	f200 811b 	bhi.w	8004714 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2200      	movs	r2, #0
 80044e2:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	7c1b      	ldrb	r3, [r3, #16]
 80044e8:	b25b      	sxtb	r3, r3
 80044ea:	ee07 3a90 	vmov	s15, r3
 80044ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044f2:	ed97 7a00 	vldr	s14, [r7]
 80044f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044fa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	ed93 7a00 	vldr	s14, [r3]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	edd3 7a01 	vldr	s15, [r3, #4]
 800450a:	eeb4 7a67 	vcmp.f32	s14, s15
 800450e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004512:	d109      	bne.n	8004528 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	edd3 7a00 	vldr	s15, [r3]
 800451a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800451e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004522:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8004526:	e00c      	b.n	8004542 <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	7c1b      	ldrb	r3, [r3, #16]
 800452c:	b25b      	sxtb	r3, r3
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004536:	ed97 7a01 	vldr	s14, [r7, #4]
 800453a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	ed93 7a03 	vldr	s14, [r3, #12]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	edd3 7a00 	vldr	s15, [r3]
 800454e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004556:	d824      	bhi.n	80045a2 <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8004558:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800455c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004560:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	edd3 7a03 	vldr	s15, [r3, #12]
 800456a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	edd3 7a03 	vldr	s15, [r3, #12]
 8004574:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004578:	edd7 7a03 	vldr	s15, [r7, #12]
 800457c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	ed93 7a03 	vldr	s14, [r3, #12]
 800458c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800459e:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 80045a0:	e0c6      	b.n	8004730 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	ed93 7a03 	vldr	s14, [r3, #12]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80045ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045b6:	d830      	bhi.n	800461a <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 80045b8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80045bc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80045c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	edd3 7a00 	vldr	s15, [r3]
 80045ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	edd3 7a00 	vldr	s15, [r3]
 80045d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80045dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045e0:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	edd3 7a00 	vldr	s15, [r3]
 80045f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045f4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80045f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8004600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800460e:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	609a      	str	r2, [r3, #8]
}
 8004618:	e08a      	b.n	8004730 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	edd3 7a02 	vldr	s15, [r3, #8]
 8004626:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800462a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800462e:	d900      	bls.n	8004632 <Trapezoidal_Evaluated+0x19a>
}
 8004630:	e07e      	b.n	8004730 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8004632:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004636:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800463a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	edd3 7a00 	vldr	s15, [r3]
 8004644:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	edd3 7a00 	vldr	s15, [r3]
 800464e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004652:	ed97 7a03 	vldr	s14, [r7, #12]
 8004656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800465a:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	ed93 7a01 	vldr	s14, [r3, #4]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	edd3 7a00 	vldr	s15, [r3]
 800466e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004676:	dd11      	ble.n	800469c <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	ed93 7a01 	vldr	s14, [r3, #4]
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	edd3 7a00 	vldr	s15, [r3]
 8004684:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004688:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800468c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004690:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004698:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	ed93 7a03 	vldr	s14, [r3, #12]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80046a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ac:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 80046b0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80046b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80046b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046bc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80046c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046c4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80046c8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80046cc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80046d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80046d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80046d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80046dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 80046ea:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80046ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80046f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80046fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 8004704:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004708:	eef1 7a67 	vneg.f32	s15, s15
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004712:	e00d      	b.n	8004730 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	2201      	movs	r2, #1
 8004718:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	609a      	str	r2, [r3, #8]
}
 8004730:	bf00      	nop
 8004732:	3734      	adds	r7, #52	@ 0x34
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	3a83126f 	.word	0x3a83126f

08004740 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	ed87 0a01 	vstr	s0, [r7, #4]
 800474a:	4603      	mov	r3, r0
 800474c:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	2b1a      	cmp	r3, #26
 8004752:	d018      	beq.n	8004786 <temperature_to_base+0x46>
 8004754:	2b1a      	cmp	r3, #26
 8004756:	dc1d      	bgt.n	8004794 <temperature_to_base+0x54>
 8004758:	2b18      	cmp	r3, #24
 800475a:	d002      	beq.n	8004762 <temperature_to_base+0x22>
 800475c:	2b19      	cmp	r3, #25
 800475e:	d003      	beq.n	8004768 <temperature_to_base+0x28>
 8004760:	e018      	b.n	8004794 <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8004762:	edd7 7a01 	vldr	s15, [r7, #4]
 8004766:	e017      	b.n	8004798 <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 8004768:	edd7 7a01 	vldr	s15, [r7, #4]
 800476c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80047a8 <temperature_to_base+0x68>
 8004770:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004774:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8004778:	ee27 7a87 	vmul.f32	s14, s15, s14
 800477c:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 8004780:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004784:	e008      	b.n	8004798 <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 8004786:	edd7 7a01 	vldr	s15, [r7, #4]
 800478a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80047ac <temperature_to_base+0x6c>
 800478e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004792:	e001      	b.n	8004798 <temperature_to_base+0x58>
        default:
            return value;
 8004794:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8004798:	eeb0 0a67 	vmov.f32	s0, s15
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	42000000 	.word	0x42000000
 80047ac:	43889333 	.word	0x43889333

080047b0 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80047ba:	4603      	mov	r3, r0
 80047bc:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 80047be:	78fb      	ldrb	r3, [r7, #3]
 80047c0:	2b1a      	cmp	r3, #26
 80047c2:	d018      	beq.n	80047f6 <temperature_from_base+0x46>
 80047c4:	2b1a      	cmp	r3, #26
 80047c6:	dc1d      	bgt.n	8004804 <temperature_from_base+0x54>
 80047c8:	2b18      	cmp	r3, #24
 80047ca:	d002      	beq.n	80047d2 <temperature_from_base+0x22>
 80047cc:	2b19      	cmp	r3, #25
 80047ce:	d003      	beq.n	80047d8 <temperature_from_base+0x28>
 80047d0:	e018      	b.n	8004804 <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 80047d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80047d6:	e017      	b.n	8004808 <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 80047d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80047dc:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 80047e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80047e4:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80047e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047ec:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004818 <temperature_from_base+0x68>
 80047f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047f4:	e008      	b.n	8004808 <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 80047f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80047fa:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800481c <temperature_from_base+0x6c>
 80047fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004802:	e001      	b.n	8004808 <temperature_from_base+0x58>
        default:
            return value;
 8004804:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8004808:	eeb0 0a67 	vmov.f32	s0, s15
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	42000000 	.word	0x42000000
 800481c:	43889333 	.word	0x43889333

08004820 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2202      	movs	r2, #2
 8004832:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004834:	2300      	movs	r3, #0
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	e00a      	b.n	8004850 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	3304      	adds	r3, #4
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3301      	adds	r3, #1
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b1a      	cmp	r3, #26
 8004854:	ddf1      	ble.n	800483a <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a11      	ldr	r2, [pc, #68]	@ (80048a0 <init_length_converter+0x80>)
 800485a:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a11      	ldr	r2, [pc, #68]	@ (80048a4 <init_length_converter+0x84>)
 8004860:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004868:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a0e      	ldr	r2, [pc, #56]	@ (80048a8 <init_length_converter+0x88>)
 800486e:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a0e      	ldr	r2, [pc, #56]	@ (80048ac <init_length_converter+0x8c>)
 8004874:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a0d      	ldr	r2, [pc, #52]	@ (80048b0 <init_length_converter+0x90>)
 800487a:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a0d      	ldr	r2, [pc, #52]	@ (80048b4 <init_length_converter+0x94>)
 8004880:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a0c      	ldr	r2, [pc, #48]	@ (80048b8 <init_length_converter+0x98>)
 8004886:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004894:	bf00      	nop
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	3a83126f 	.word	0x3a83126f
 80048a4:	3c23d70a 	.word	0x3c23d70a
 80048a8:	447a0000 	.word	0x447a0000
 80048ac:	3cd013a9 	.word	0x3cd013a9
 80048b0:	3e9c0ebf 	.word	0x3e9c0ebf
 80048b4:	3f6a161e 	.word	0x3f6a161e
 80048b8:	44c92b02 	.word	0x44c92b02

080048bc <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	220a      	movs	r2, #10
 80048ce:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	e00a      	b.n	80048ec <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	3304      	adds	r3, #4
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	3301      	adds	r3, #1
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b1a      	cmp	r3, #26
 80048f0:	ddf1      	ble.n	80048d6 <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a0e      	ldr	r2, [pc, #56]	@ (8004930 <init_mass_converter+0x74>)
 80048f6:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004934 <init_mass_converter+0x78>)
 80048fc:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004904:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a0b      	ldr	r2, [pc, #44]	@ (8004938 <init_mass_converter+0x7c>)
 800490a:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a0b      	ldr	r2, [pc, #44]	@ (800493c <init_mass_converter+0x80>)
 8004910:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a0a      	ldr	r2, [pc, #40]	@ (8004940 <init_mass_converter+0x84>)
 8004916:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004924:	bf00      	nop
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	358637bd 	.word	0x358637bd
 8004934:	3a83126f 	.word	0x3a83126f
 8004938:	447a0000 	.word	0x447a0000
 800493c:	3ce83d36 	.word	0x3ce83d36
 8004940:	3ee83d36 	.word	0x3ee83d36

08004944 <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	220f      	movs	r2, #15
 8004956:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	e00a      	b.n	8004974 <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	3304      	adds	r3, #4
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3301      	adds	r3, #1
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2b1a      	cmp	r3, #26
 8004978:	ddf1      	ble.n	800495e <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a0a      	ldr	r2, [pc, #40]	@ (80049a8 <init_angle_converter+0x64>)
 800497e:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004986:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a08      	ldr	r2, [pc, #32]	@ (80049ac <init_angle_converter+0x68>)
 800498c:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800499a:	bf00      	nop
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	3c8efa35 	.word	0x3c8efa35
 80049ac:	3c80adfd 	.word	0x3c80adfd

080049b0 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2203      	movs	r2, #3
 80049bc:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2214      	movs	r2, #20
 80049c2:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	e00a      	b.n	80049e0 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	3304      	adds	r3, #4
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3301      	adds	r3, #1
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b1a      	cmp	r3, #26
 80049e4:	ddf1      	ble.n	80049ca <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a10      	ldr	r2, [pc, #64]	@ (8004a2c <init_time_converter+0x7c>)
 80049ea:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a10      	ldr	r2, [pc, #64]	@ (8004a30 <init_time_converter+0x80>)
 80049f0:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a0f      	ldr	r2, [pc, #60]	@ (8004a34 <init_time_converter+0x84>)
 80049f6:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80049fe:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a0d      	ldr	r2, [pc, #52]	@ (8004a38 <init_time_converter+0x88>)
 8004a04:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a0c      	ldr	r2, [pc, #48]	@ (8004a3c <init_time_converter+0x8c>)
 8004a0a:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8004a40 <init_time_converter+0x90>)
 8004a10:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	3089705f 	.word	0x3089705f
 8004a30:	358637bd 	.word	0x358637bd
 8004a34:	3a83126f 	.word	0x3a83126f
 8004a38:	42700000 	.word	0x42700000
 8004a3c:	45610000 	.word	0x45610000
 8004a40:	47a8c000 	.word	0x47a8c000

08004a44 <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2204      	movs	r2, #4
 8004a50:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2218      	movs	r2, #24
 8004a56:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e00a      	b.n	8004a74 <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	3304      	adds	r3, #4
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3301      	adds	r3, #1
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b1a      	cmp	r3, #26
 8004a78:	ddf1      	ble.n	8004a5e <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a05      	ldr	r2, [pc, #20]	@ (8004a94 <init_temperature_converter+0x50>)
 8004a7e:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a05      	ldr	r2, [pc, #20]	@ (8004a98 <init_temperature_converter+0x54>)
 8004a84:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004a86:	bf00      	nop
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	08004741 	.word	0x08004741
 8004a98:	080047b1 	.word	0x080047b1

08004a9c <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff feba 	bl	8004820 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3378      	adds	r3, #120	@ 0x78
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff ff03 	bl	80048bc <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	33f0      	adds	r3, #240	@ 0xf0
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff ff42 	bl	8004944 <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff ff72 	bl	80049b0 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff ffb6 	bl	8004a44 <init_temperature_converter>
}
 8004ad8:	bf00      	nop
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	2b1a      	cmp	r3, #26
 8004aee:	d803      	bhi.n	8004af8 <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 8004af0:	79fb      	ldrb	r3, [r7, #7]
 8004af2:	4a05      	ldr	r2, [pc, #20]	@ (8004b08 <UnitConverter_get_unit_type+0x28>)
 8004af4:	5cd3      	ldrb	r3, [r2, r3]
 8004af6:	e000      	b.n	8004afa <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	20000318 	.word	0x20000318

08004b0c <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	71fb      	strb	r3, [r7, #7]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 8004b20:	79fb      	ldrb	r3, [r7, #7]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff ffdc 	bl	8004ae0 <UnitConverter_get_unit_type>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 8004b2c:	79bb      	ldrb	r3, [r7, #6]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff ffd6 	bl	8004ae0 <UnitConverter_get_unit_type>
 8004b34:	4603      	mov	r3, r0
 8004b36:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 8004b38:	7efa      	ldrb	r2, [r7, #27]
 8004b3a:	7ebb      	ldrb	r3, [r7, #26]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d002      	beq.n	8004b46 <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 8004b40:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b44:	e03b      	b.n	8004bbe <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 8004b46:	7efa      	ldrb	r2, [r7, #27]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	011b      	lsls	r3, r3, #4
 8004b4c:	1a9b      	subs	r3, r3, r2
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4413      	add	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d009      	beq.n	8004b72 <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b62:	79fa      	ldrb	r2, [r7, #7]
 8004b64:	4610      	mov	r0, r2
 8004b66:	ed97 0a02 	vldr	s0, [r7, #8]
 8004b6a:	4798      	blx	r3
 8004b6c:	ed87 0a07 	vstr	s0, [r7, #28]
 8004b70:	e00c      	b.n	8004b8c <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 8004b72:	79fb      	ldrb	r3, [r7, #7]
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	edd3 7a00 	vldr	s15, [r3]
 8004b80:	ed97 7a02 	vldr	s14, [r7, #8]
 8004b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b88:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d009      	beq.n	8004ba8 <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b98:	79ba      	ldrb	r2, [r7, #6]
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	ed97 0a07 	vldr	s0, [r7, #28]
 8004ba0:	4798      	blx	r3
 8004ba2:	eef0 7a40 	vmov.f32	s15, s0
 8004ba6:	e00a      	b.n	8004bbe <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 8004ba8:	79bb      	ldrb	r3, [r7, #6]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	ed93 7a00 	vldr	s14, [r3]
 8004bb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 8004bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8004bc2:	3720      	adds	r7, #32
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	ed87 0a02 	vstr	s0, [r7, #8]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	71fb      	strb	r3, [r7, #7]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff ff7e 	bl	8004ae0 <UnitConverter_get_unit_type>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d111      	bne.n	8004c0e <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 8004bea:	79bb      	ldrb	r3, [r7, #6]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff ff77 	bl	8004ae0 <UnitConverter_get_unit_type>
 8004bf2:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d10a      	bne.n	8004c0e <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 8004bf8:	79ba      	ldrb	r2, [r7, #6]
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	ed97 0a02 	vldr	s0, [r7, #8]
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f7ff ff82 	bl	8004b0c <UnitConverter_convert>
 8004c08:	eef0 7a40 	vmov.f32	s15, s0
 8004c0c:	e001      	b.n	8004c12 <UnitConverter_angle+0x4a>
    }
    return value;
 8004c0e:	edd7 7a02 	vldr	s15, [r7, #8]
}
 8004c12:	eeb0 0a67 	vmov.f32	s0, s15
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08c      	sub	sp, #48	@ 0x30
 8004c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	605a      	str	r2, [r3, #4]
 8004c2c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004c2e:	1d3b      	adds	r3, r7, #4
 8004c30:	2220      	movs	r2, #32
 8004c32:	2100      	movs	r1, #0
 8004c34:	4618      	mov	r0, r3
 8004c36:	f00e f8a3 	bl	8012d80 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004c3a:	4b39      	ldr	r3, [pc, #228]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c3c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004c40:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004c42:	4b37      	ldr	r3, [pc, #220]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c44:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004c48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004c4a:	4b35      	ldr	r3, [pc, #212]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c50:	4b33      	ldr	r3, [pc, #204]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8004c56:	4b32      	ldr	r3, [pc, #200]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004c5c:	4b30      	ldr	r3, [pc, #192]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004c62:	4b2f      	ldr	r3, [pc, #188]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c64:	2204      	movs	r2, #4
 8004c66:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004c68:	4b2d      	ldr	r3, [pc, #180]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c70:	2201      	movs	r2, #1
 8004c72:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8004c74:	4b2a      	ldr	r3, [pc, #168]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c76:	2202      	movs	r2, #2
 8004c78:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004c7a:	4b29      	ldr	r3, [pc, #164]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004c82:	4b27      	ldr	r3, [pc, #156]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004c88:	4b25      	ldr	r3, [pc, #148]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004c8e:	4b24      	ldr	r3, [pc, #144]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004c96:	4b22      	ldr	r3, [pc, #136]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004c9c:	4b20      	ldr	r3, [pc, #128]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004ca4:	481e      	ldr	r0, [pc, #120]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004ca6:	f006 fa3d 	bl	800b124 <HAL_ADC_Init>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8004cb0:	f004 fa56 	bl	8009160 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004cb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4818      	ldr	r0, [pc, #96]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004cc0:	f007 fb5c 	bl	800c37c <HAL_ADCEx_MultiModeConfigChannel>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8004cca:	f004 fa49 	bl	8009160 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004cce:	4b15      	ldr	r3, [pc, #84]	@ (8004d24 <MX_ADC1_Init+0x108>)
 8004cd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004cd2:	2306      	movs	r3, #6
 8004cd4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004cd6:	2307      	movs	r3, #7
 8004cd8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004cda:	237f      	movs	r3, #127	@ 0x7f
 8004cdc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004cde:	2304      	movs	r3, #4
 8004ce0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004ce6:	1d3b      	adds	r3, r7, #4
 8004ce8:	4619      	mov	r1, r3
 8004cea:	480d      	ldr	r0, [pc, #52]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004cec:	f006 fcc8 	bl	800b680 <HAL_ADC_ConfigChannel>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8004cf6:	f004 fa33 	bl	8009160 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8004d28 <MX_ADC1_Init+0x10c>)
 8004cfc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004cfe:	230c      	movs	r3, #12
 8004d00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d02:	1d3b      	adds	r3, r7, #4
 8004d04:	4619      	mov	r1, r3
 8004d06:	4806      	ldr	r0, [pc, #24]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004d08:	f006 fcba 	bl	800b680 <HAL_ADC_ConfigChannel>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8004d12:	f004 fa25 	bl	8009160 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004d16:	bf00      	nop
 8004d18:	3730      	adds	r7, #48	@ 0x30
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	20000630 	.word	0x20000630
 8004d24:	19200040 	.word	0x19200040
 8004d28:	1d500080 	.word	0x1d500080

08004d2c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b09e      	sub	sp, #120	@ 0x78
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	605a      	str	r2, [r3, #4]
 8004d3e:	609a      	str	r2, [r3, #8]
 8004d40:	60da      	str	r2, [r3, #12]
 8004d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d44:	f107 0310 	add.w	r3, r7, #16
 8004d48:	2254      	movs	r2, #84	@ 0x54
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f00e f817 	bl	8012d80 <memset>
  if(adcHandle->Instance==ADC1)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d5a:	d15e      	bne.n	8004e1a <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004d5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d60:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004d62:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004d66:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d68:	f107 0310 	add.w	r3, r7, #16
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f009 f815 	bl	800dd9c <HAL_RCCEx_PeriphCLKConfig>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004d78:	f004 f9f2 	bl	8009160 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004d7c:	4b29      	ldr	r3, [pc, #164]	@ (8004e24 <HAL_ADC_MspInit+0xf8>)
 8004d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d80:	4a28      	ldr	r2, [pc, #160]	@ (8004e24 <HAL_ADC_MspInit+0xf8>)
 8004d82:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004d86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d88:	4b26      	ldr	r3, [pc, #152]	@ (8004e24 <HAL_ADC_MspInit+0xf8>)
 8004d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d94:	4b23      	ldr	r3, [pc, #140]	@ (8004e24 <HAL_ADC_MspInit+0xf8>)
 8004d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d98:	4a22      	ldr	r2, [pc, #136]	@ (8004e24 <HAL_ADC_MspInit+0xf8>)
 8004d9a:	f043 0304 	orr.w	r3, r3, #4
 8004d9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004da0:	4b20      	ldr	r3, [pc, #128]	@ (8004e24 <HAL_ADC_MspInit+0xf8>)
 8004da2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	60bb      	str	r3, [r7, #8]
 8004daa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004dac:	2303      	movs	r3, #3
 8004dae:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004db0:	2303      	movs	r3, #3
 8004db2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004db8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	481a      	ldr	r0, [pc, #104]	@ (8004e28 <HAL_ADC_MspInit+0xfc>)
 8004dc0:	f008 f826 	bl	800ce10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004dc4:	4b19      	ldr	r3, [pc, #100]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dc6:	4a1a      	ldr	r2, [pc, #104]	@ (8004e30 <HAL_ADC_MspInit+0x104>)
 8004dc8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004dca:	4b18      	ldr	r3, [pc, #96]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dcc:	2205      	movs	r2, #5
 8004dce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004dd0:	4b16      	ldr	r3, [pc, #88]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dd6:	4b15      	ldr	r3, [pc, #84]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004ddc:	4b13      	ldr	r3, [pc, #76]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dde:	2280      	movs	r2, #128	@ 0x80
 8004de0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004de2:	4b12      	ldr	r3, [pc, #72]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004de4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004de8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004dea:	4b10      	ldr	r3, [pc, #64]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004df0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004df2:	4b0e      	ldr	r3, [pc, #56]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004df4:	2220      	movs	r2, #32
 8004df6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004df8:	4b0c      	ldr	r3, [pc, #48]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004dfe:	480b      	ldr	r0, [pc, #44]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004e00:	f007 fcd4 	bl	800c7ac <HAL_DMA_Init>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8004e0a:	f004 f9a9 	bl	8009160 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a06      	ldr	r2, [pc, #24]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004e12:	655a      	str	r2, [r3, #84]	@ 0x54
 8004e14:	4a05      	ldr	r2, [pc, #20]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004e1a:	bf00      	nop
 8004e1c:	3778      	adds	r7, #120	@ 0x78
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40021000 	.word	0x40021000
 8004e28:	48000800 	.word	0x48000800
 8004e2c:	2000069c 	.word	0x2000069c
 8004e30:	40020008 	.word	0x40020008

08004e34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004e3a:	4b22      	ldr	r3, [pc, #136]	@ (8004ec4 <MX_DMA_Init+0x90>)
 8004e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e3e:	4a21      	ldr	r2, [pc, #132]	@ (8004ec4 <MX_DMA_Init+0x90>)
 8004e40:	f043 0304 	orr.w	r3, r3, #4
 8004e44:	6493      	str	r3, [r2, #72]	@ 0x48
 8004e46:	4b1f      	ldr	r3, [pc, #124]	@ (8004ec4 <MX_DMA_Init+0x90>)
 8004e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	607b      	str	r3, [r7, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004e52:	4b1c      	ldr	r3, [pc, #112]	@ (8004ec4 <MX_DMA_Init+0x90>)
 8004e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e56:	4a1b      	ldr	r2, [pc, #108]	@ (8004ec4 <MX_DMA_Init+0x90>)
 8004e58:	f043 0301 	orr.w	r3, r3, #1
 8004e5c:	6493      	str	r3, [r2, #72]	@ 0x48
 8004e5e:	4b19      	ldr	r3, [pc, #100]	@ (8004ec4 <MX_DMA_Init+0x90>)
 8004e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	200b      	movs	r0, #11
 8004e70:	f007 fc67 	bl	800c742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004e74:	200b      	movs	r0, #11
 8004e76:	f007 fc7e 	bl	800c776 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	200c      	movs	r0, #12
 8004e80:	f007 fc5f 	bl	800c742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004e84:	200c      	movs	r0, #12
 8004e86:	f007 fc76 	bl	800c776 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	200d      	movs	r0, #13
 8004e90:	f007 fc57 	bl	800c742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004e94:	200d      	movs	r0, #13
 8004e96:	f007 fc6e 	bl	800c776 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	200e      	movs	r0, #14
 8004ea0:	f007 fc4f 	bl	800c742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004ea4:	200e      	movs	r0, #14
 8004ea6:	f007 fc66 	bl	800c776 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2100      	movs	r1, #0
 8004eae:	200f      	movs	r0, #15
 8004eb0:	f007 fc47 	bl	800c742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004eb4:	200f      	movs	r0, #15
 8004eb6:	f007 fc5e 	bl	800c776 <HAL_NVIC_EnableIRQ>

}
 8004eba:	bf00      	nop
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40021000 	.word	0x40021000

08004ec8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08a      	sub	sp, #40	@ 0x28
 8004ecc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ece:	f107 0314 	add.w	r3, r7, #20
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	605a      	str	r2, [r3, #4]
 8004ed8:	609a      	str	r2, [r3, #8]
 8004eda:	60da      	str	r2, [r3, #12]
 8004edc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ede:	4b7c      	ldr	r3, [pc, #496]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ee2:	4a7b      	ldr	r2, [pc, #492]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004ee4:	f043 0304 	orr.w	r3, r3, #4
 8004ee8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004eea:	4b79      	ldr	r3, [pc, #484]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ef6:	4b76      	ldr	r3, [pc, #472]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004efa:	4a75      	ldr	r2, [pc, #468]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004efc:	f043 0320 	orr.w	r3, r3, #32
 8004f00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f02:	4b73      	ldr	r3, [pc, #460]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f0e:	4b70      	ldr	r3, [pc, #448]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f12:	4a6f      	ldr	r2, [pc, #444]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004f14:	f043 0301 	orr.w	r3, r3, #1
 8004f18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f1a:	4b6d      	ldr	r3, [pc, #436]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	60bb      	str	r3, [r7, #8]
 8004f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f26:	4b6a      	ldr	r3, [pc, #424]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f2a:	4a69      	ldr	r2, [pc, #420]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004f2c:	f043 0302 	orr.w	r3, r3, #2
 8004f30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f32:	4b67      	ldr	r3, [pc, #412]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	607b      	str	r3, [r7, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8004f44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004f48:	f008 f8fc 	bl	800d144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f52:	4860      	ldr	r0, [pc, #384]	@ (80050d4 <MX_GPIO_Init+0x20c>)
 8004f54:	f008 f8f6 	bl	800d144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004f58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f5e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004f68:	f107 0314 	add.w	r3, r7, #20
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4859      	ldr	r0, [pc, #356]	@ (80050d4 <MX_GPIO_Init+0x20c>)
 8004f70:	f007 ff4e 	bl	800ce10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8004f74:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8004f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f82:	2300      	movs	r3, #0
 8004f84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f86:	f107 0314 	add.w	r3, r7, #20
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004f90:	f007 ff3e 	bl	800ce10 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin;
 8004f94:	f241 0301 	movw	r3, #4097	@ 0x1001
 8004f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f9a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fa4:	f107 0314 	add.w	r3, r7, #20
 8004fa8:	4619      	mov	r1, r3
 8004faa:	484b      	ldr	r0, [pc, #300]	@ (80050d8 <MX_GPIO_Init+0x210>)
 8004fac:	f007 ff30 	bl	800ce10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 8004fb0:	2306      	movs	r3, #6
 8004fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fbc:	f107 0314 	add.w	r3, r7, #20
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4845      	ldr	r0, [pc, #276]	@ (80050d8 <MX_GPIO_Init+0x210>)
 8004fc4:	f007 ff24 	bl	800ce10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004fc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fda:	f107 0314 	add.w	r3, r7, #20
 8004fde:	4619      	mov	r1, r3
 8004fe0:	483c      	ldr	r0, [pc, #240]	@ (80050d4 <MX_GPIO_Init+0x20c>)
 8004fe2:	f007 ff15 	bl	800ce10 <HAL_GPIO_Init>

  /*Configure GPIO pin : upperphoto_Pin */
  GPIO_InitStruct.Pin = upperphoto_Pin;
 8004fe6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(upperphoto_GPIO_Port, &GPIO_InitStruct);
 8004ff6:	f107 0314 	add.w	r3, r7, #20
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005000:	f007 ff06 	bl	800ce10 <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin;
 8005004:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800500a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800500e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005010:	2302      	movs	r3, #2
 8005012:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005014:	f107 0314 	add.w	r3, r7, #20
 8005018:	4619      	mov	r1, r3
 800501a:	482e      	ldr	r0, [pc, #184]	@ (80050d4 <MX_GPIO_Init+0x20c>)
 800501c:	f007 fef8 	bl	800ce10 <HAL_GPIO_Init>

  /*Configure GPIO pin : J2_Pin */
  GPIO_InitStruct.Pin = J2_Pin;
 8005020:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005026:	2300      	movs	r3, #0
 8005028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800502a:	2302      	movs	r3, #2
 800502c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J2_GPIO_Port, &GPIO_InitStruct);
 800502e:	f107 0314 	add.w	r3, r7, #20
 8005032:	4619      	mov	r1, r3
 8005034:	4827      	ldr	r0, [pc, #156]	@ (80050d4 <MX_GPIO_Init+0x20c>)
 8005036:	f007 feeb 	bl	800ce10 <HAL_GPIO_Init>

  /*Configure GPIO pin : EMER_Pin */
  GPIO_InitStruct.Pin = EMER_Pin;
 800503a:	2310      	movs	r3, #16
 800503c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800503e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8005042:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005044:	2300      	movs	r3, #0
 8005046:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_GPIO_Port, &GPIO_InitStruct);
 8005048:	f107 0314 	add.w	r3, r7, #20
 800504c:	4619      	mov	r1, r3
 800504e:	4822      	ldr	r0, [pc, #136]	@ (80050d8 <MX_GPIO_Init+0x210>)
 8005050:	f007 fede 	bl	800ce10 <HAL_GPIO_Init>

  /*Configure GPIO pins : prox_Pin PROX_Pin */
  GPIO_InitStruct.Pin = prox_Pin|PROX_Pin;
 8005054:	2360      	movs	r3, #96	@ 0x60
 8005056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005058:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800505c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800505e:	2301      	movs	r3, #1
 8005060:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005062:	f107 0314 	add.w	r3, r7, #20
 8005066:	4619      	mov	r1, r3
 8005068:	481b      	ldr	r0, [pc, #108]	@ (80050d8 <MX_GPIO_Init+0x210>)
 800506a:	f007 fed1 	bl	800ce10 <HAL_GPIO_Init>

  /*Configure GPIO pin : J1_Pin */
  GPIO_InitStruct.Pin = J1_Pin;
 800506e:	2380      	movs	r3, #128	@ 0x80
 8005070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005072:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005078:	2302      	movs	r3, #2
 800507a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J1_GPIO_Port, &GPIO_InitStruct);
 800507c:	f107 0314 	add.w	r3, r7, #20
 8005080:	4619      	mov	r1, r3
 8005082:	4815      	ldr	r0, [pc, #84]	@ (80050d8 <MX_GPIO_Init+0x210>)
 8005084:	f007 fec4 	bl	800ce10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005088:	2200      	movs	r2, #0
 800508a:	2100      	movs	r1, #0
 800508c:	2006      	movs	r0, #6
 800508e:	f007 fb58 	bl	800c742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005092:	2006      	movs	r0, #6
 8005094:	f007 fb6f 	bl	800c776 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005098:	2200      	movs	r2, #0
 800509a:	2100      	movs	r1, #0
 800509c:	200a      	movs	r0, #10
 800509e:	f007 fb50 	bl	800c742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80050a2:	200a      	movs	r0, #10
 80050a4:	f007 fb67 	bl	800c776 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80050a8:	2200      	movs	r2, #0
 80050aa:	2100      	movs	r1, #0
 80050ac:	2017      	movs	r0, #23
 80050ae:	f007 fb48 	bl	800c742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80050b2:	2017      	movs	r0, #23
 80050b4:	f007 fb5f 	bl	800c776 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80050b8:	2200      	movs	r2, #0
 80050ba:	2100      	movs	r1, #0
 80050bc:	2028      	movs	r0, #40	@ 0x28
 80050be:	f007 fb40 	bl	800c742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80050c2:	2028      	movs	r0, #40	@ 0x28
 80050c4:	f007 fb57 	bl	800c776 <HAL_NVIC_EnableIRQ>

}
 80050c8:	bf00      	nop
 80050ca:	3728      	adds	r7, #40	@ 0x28
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	40021000 	.word	0x40021000
 80050d4:	48000800 	.word	0x48000800
 80050d8:	48000400 	.word	0x48000400

080050dc <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 80050dc:	b580      	push	{r7, lr}
 80050de:	b096      	sub	sp, #88	@ 0x58
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80050e8:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 80050f2:	1d3b      	adds	r3, r7, #4
 80050f4:	2201      	movs	r2, #1
 80050f6:	2101      	movs	r1, #1
 80050f8:	f00d f8d1 	bl	801229e <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8005108:	4619      	mov	r1, r3
 800510a:	4610      	mov	r0, r2
 800510c:	f00d fd41 	bl	8012b92 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f00d fd37 	bl	8012b92 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8005130:	4619      	mov	r1, r3
 8005132:	4610      	mov	r0, r2
 8005134:	f00d fd2d 	bl	8012b92 <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8005144:	4619      	mov	r1, r3
 8005146:	ed97 0a02 	vldr	s0, [r7, #8]
 800514a:	4610      	mov	r0, r2
 800514c:	f00d fcb0 	bl	8012ab0 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8005162:	461a      	mov	r2, r3
 8005164:	f00d fc2a 	bl	80129bc <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 800517a:	461a      	mov	r2, r3
 800517c:	f00d f854 	bl	8012228 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8005192:	461a      	mov	r2, r3
 8005194:	f00d fc12 	bl	80129bc <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80051aa:	461a      	mov	r2, r3
 80051ac:	f00d fc06 	bl	80129bc <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 80051c2:	461a      	mov	r2, r3
 80051c4:	f00d fbfa 	bl	80129bc <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80051da:	4619      	mov	r1, r3
 80051dc:	eeb0 0a67 	vmov.f32	s0, s15
 80051e0:	4610      	mov	r0, r2
 80051e2:	f00d fc65 	bl	8012ab0 <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80051f8:	461a      	mov	r2, r3
 80051fa:	f00d f815 	bl	8012228 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8005210:	461a      	mov	r2, r3
 8005212:	f00d fbd3 	bl	80129bc <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8005228:	461a      	mov	r2, r3
 800522a:	f00d fbc7 	bl	80129bc <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8005240:	461a      	mov	r2, r3
 8005242:	f00c fff1 	bl	8012228 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8005252:	4619      	mov	r1, r3
 8005254:	4610      	mov	r0, r2
 8005256:	f00d f83a 	bl	80122ce <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 800526c:	461a      	mov	r2, r3
 800526e:	f00d fba5 	bl	80129bc <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8005284:	461a      	mov	r2, r3
 8005286:	f00d fb99 	bl	80129bc <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 800529c:	461a      	mov	r2, r3
 800529e:	f00d fb8d 	bl	80129bc <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 80052b4:	461a      	mov	r2, r3
 80052b6:	f00d fc31 	bl	8012b1c <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 80052cc:	461a      	mov	r2, r3
 80052ce:	f00d fb75 	bl	80129bc <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80052e4:	461a      	mov	r2, r3
 80052e6:	f00c ff9f 	bl	8012228 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 80052fc:	461a      	mov	r2, r3
 80052fe:	f00d fb5d 	bl	80129bc <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 8005302:	f107 0310 	add.w	r3, r7, #16
 8005306:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 800530a:	2204      	movs	r2, #4
 800530c:	2104      	movs	r1, #4
 800530e:	f00c ffc6 	bl	801229e <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 800531e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8005322:	4619      	mov	r1, r3
 8005324:	f00d fb4a 	bl	80129bc <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800532e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8005332:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8005336:	4618      	mov	r0, r3
 8005338:	f00d fbf0 	bl	8012b1c <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8005348:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800534c:	4618      	mov	r0, r3
 800534e:	f00d fb35 	bl	80129bc <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005362:	ee07 3a90 	vmov	s15, r3
}
 8005366:	eeb0 0a67 	vmov.f32	s0, s15
 800536a:	3758      	adds	r7, #88	@ 0x58
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8005370:	b5b0      	push	{r4, r5, r7, lr}
 8005372:	b0a4      	sub	sp, #144	@ 0x90
 8005374:	af00      	add	r7, sp, #0
 8005376:	6178      	str	r0, [r7, #20]
 8005378:	6139      	str	r1, [r7, #16]
 800537a:	60fa      	str	r2, [r7, #12]
 800537c:	ed87 0a02 	vstr	s0, [r7, #8]
 8005380:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8005394:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005398:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800539a:	f04f 0300 	mov.w	r3, #0
 800539e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 80053b2:	f04f 0300 	mov.w	r3, #0
 80053b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053b8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80053bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80053c4:	f04f 0300 	mov.w	r3, #0
 80053c8:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 80053ca:	4bc6      	ldr	r3, [pc, #792]	@ (80056e4 <Kalman_Start+0x374>)
 80053cc:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80053d0:	461d      	mov	r5, r3
 80053d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80053e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 80053e6:	f107 031c 	add.w	r3, r7, #28
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	605a      	str	r2, [r3, #4]
 80053f0:	609a      	str	r2, [r3, #8]
 80053f2:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f04f 0200 	mov.w	r2, #0
 80053fa:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 80053fe:	2300      	movs	r3, #0
 8005400:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005404:	e028      	b.n	8005458 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8005406:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	4413      	add	r3, r2
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	6979      	ldr	r1, [r7, #20]
 8005414:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005418:	3314      	adds	r3, #20
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	440b      	add	r3, r1
 800541e:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8005420:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	3390      	adds	r3, #144	@ 0x90
 8005428:	443b      	add	r3, r7
 800542a:	3b64      	subs	r3, #100	@ 0x64
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	6979      	ldr	r1, [r7, #20]
 8005430:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005434:	3398      	adds	r3, #152	@ 0x98
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005442:	3304      	adds	r3, #4
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	f04f 0200 	mov.w	r2, #0
 800544c:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 800544e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005452:	3301      	adds	r3, #1
 8005454:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005458:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800545c:	2b0f      	cmp	r3, #15
 800545e:	ddd2      	ble.n	8005406 <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8005460:	2300      	movs	r3, #0
 8005462:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005466:	e03a      	b.n	80054de <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8005468:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	3390      	adds	r3, #144	@ 0x90
 8005470:	443b      	add	r3, r7
 8005472:	3b74      	subs	r3, #116	@ 0x74
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	6979      	ldr	r1, [r7, #20]
 8005478:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	440b      	add	r3, r1
 8005480:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8005482:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	6979      	ldr	r1, [r7, #20]
 8005490:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005494:	3324      	adds	r3, #36	@ 0x24
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	440b      	add	r3, r1
 800549a:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 800549c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	3390      	adds	r3, #144	@ 0x90
 80054a4:	443b      	add	r3, r7
 80054a6:	3b14      	subs	r3, #20
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	6979      	ldr	r1, [r7, #20]
 80054ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054b0:	3328      	adds	r3, #40	@ 0x28
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	440b      	add	r3, r1
 80054b6:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 80054b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	3390      	adds	r3, #144	@ 0x90
 80054c0:	443b      	add	r3, r7
 80054c2:	3b24      	subs	r3, #36	@ 0x24
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	6979      	ldr	r1, [r7, #20]
 80054c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054cc:	332c      	adds	r3, #44	@ 0x2c
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	440b      	add	r3, r1
 80054d2:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 80054d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054d8:	3301      	adds	r3, #1
 80054da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80054de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	ddc0      	ble.n	8005468 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2201      	movs	r2, #1
 80054f0:	2104      	movs	r1, #4
 80054f2:	f00c fed4 	bl	801229e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	3310      	adds	r3, #16
 8005500:	2204      	movs	r2, #4
 8005502:	2104      	movs	r1, #4
 8005504:	f00c fecb 	bl	801229e <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	3350      	adds	r3, #80	@ 0x50
 8005512:	2204      	movs	r2, #4
 8005514:	2104      	movs	r1, #4
 8005516:	f00c fec2 	bl	801229e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	3390      	adds	r3, #144	@ 0x90
 8005524:	2201      	movs	r2, #1
 8005526:	2104      	movs	r1, #4
 8005528:	f00c feb9 	bl	801229e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	33a0      	adds	r3, #160	@ 0xa0
 8005536:	2204      	movs	r2, #4
 8005538:	2101      	movs	r1, #1
 800553a:	f00c feb0 	bl	801229e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	33b0      	adds	r3, #176	@ 0xb0
 8005548:	2201      	movs	r2, #1
 800554a:	2104      	movs	r1, #4
 800554c:	f00c fea7 	bl	801229e <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	33c8      	adds	r3, #200	@ 0xc8
 800555a:	2204      	movs	r2, #4
 800555c:	2104      	movs	r1, #4
 800555e:	f00c fe9e 	bl	801229e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800556e:	2201      	movs	r2, #1
 8005570:	2104      	movs	r1, #4
 8005572:	f00c fe94 	bl	801229e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8005582:	2204      	movs	r2, #4
 8005584:	2101      	movs	r1, #1
 8005586:	f00c fe8a 	bl	801229e <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8005596:	2204      	movs	r2, #4
 8005598:	2104      	movs	r1, #4
 800559a:	f00c fe80 	bl	801229e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80055aa:	2204      	movs	r2, #4
 80055ac:	2104      	movs	r1, #4
 80055ae:	f00c fe76 	bl	801229e <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80055be:	2201      	movs	r2, #1
 80055c0:	2104      	movs	r1, #4
 80055c2:	f00c fe6c 	bl	801229e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80055d2:	2201      	movs	r2, #1
 80055d4:	2104      	movs	r1, #4
 80055d6:	f00c fe62 	bl	801229e <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80055e6:	2204      	movs	r2, #4
 80055e8:	2101      	movs	r1, #1
 80055ea:	f00c fe58 	bl	801229e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80055fa:	2201      	movs	r2, #1
 80055fc:	2101      	movs	r1, #1
 80055fe:	f00c fe4e 	bl	801229e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800560e:	2201      	movs	r2, #1
 8005610:	2101      	movs	r1, #1
 8005612:	f00c fe44 	bl	801229e <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8005622:	2201      	movs	r2, #1
 8005624:	2104      	movs	r1, #4
 8005626:	f00c fe3a 	bl	801229e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005636:	2201      	movs	r2, #1
 8005638:	2104      	movs	r1, #4
 800563a:	f00c fe30 	bl	801229e <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800564a:	2201      	movs	r2, #1
 800564c:	2101      	movs	r1, #1
 800564e:	f00c fe26 	bl	801229e <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800565e:	2201      	movs	r2, #1
 8005660:	2101      	movs	r1, #1
 8005662:	f00c fe1c 	bl	801229e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005672:	2201      	movs	r2, #1
 8005674:	2101      	movs	r1, #1
 8005676:	f00c fe12 	bl	801229e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005686:	2201      	movs	r2, #1
 8005688:	2104      	movs	r1, #4
 800568a:	f00c fe08 	bl	801229e <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800569a:	2201      	movs	r2, #1
 800569c:	2101      	movs	r1, #1
 800569e:	f00c fdfe 	bl	801229e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80056ae:	2204      	movs	r2, #4
 80056b0:	2104      	movs	r1, #4
 80056b2:	f00c fdf4 	bl	801229e <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	33c4      	adds	r3, #196	@ 0xc4
 80056c0:	2201      	movs	r2, #1
 80056c2:	2101      	movs	r1, #1
 80056c4:	f00c fdeb 	bl	801229e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80056d4:	2201      	movs	r2, #1
 80056d6:	2101      	movs	r1, #1
 80056d8:	f00c fde1 	bl	801229e <arm_mat_init_f32>
}
 80056dc:	bf00      	nop
 80056de:	3790      	adds	r7, #144	@ 0x90
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bdb0      	pop	{r4, r5, r7, pc}
 80056e4:	08014c50 	.word	0x08014c50

080056e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80056ec:	f3bf 8f4f 	dsb	sy
}
 80056f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80056f2:	4b06      	ldr	r3, [pc, #24]	@ (800570c <__NVIC_SystemReset+0x24>)
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80056fa:	4904      	ldr	r1, [pc, #16]	@ (800570c <__NVIC_SystemReset+0x24>)
 80056fc:	4b04      	ldr	r3, [pc, #16]	@ (8005710 <__NVIC_SystemReset+0x28>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005702:	f3bf 8f4f 	dsb	sy
}
 8005706:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005708:	bf00      	nop
 800570a:	e7fd      	b.n	8005708 <__NVIC_SystemReset+0x20>
 800570c:	e000ed00 	.word	0xe000ed00
 8005710:	05fa0004 	.word	0x05fa0004

08005714 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800571a:	f005 fa4e 	bl	800abba <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800571e:	f000 f88f 	bl	8005840 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005722:	f7ff fbd1 	bl	8004ec8 <MX_GPIO_Init>
	MX_DMA_Init();
 8005726:	f7ff fb85 	bl	8004e34 <MX_DMA_Init>
	MX_ADC1_Init();
 800572a:	f7ff fa77 	bl	8004c1c <MX_ADC1_Init>
	MX_TIM2_Init();
 800572e:	f004 fc59 	bl	8009fe4 <MX_TIM2_Init>
	MX_TIM3_Init();
 8005732:	f004 fca5 	bl	800a080 <MX_TIM3_Init>
	MX_TIM4_Init();
 8005736:	f004 fcf9 	bl	800a12c <MX_TIM4_Init>
	MX_TIM5_Init();
 800573a:	f004 fd4d 	bl	800a1d8 <MX_TIM5_Init>
	MX_TIM8_Init();
 800573e:	f004 fda1 	bl	800a284 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 8005742:	f005 f863 	bl	800a80c <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8005746:	f004 fe5b 	bl	800a400 <MX_TIM16_Init>
	MX_TIM1_Init();
 800574a:	f004 fbb7 	bl	8009ebc <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 800574e:	f005 f813 	bl	800a778 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 8005752:	f003 fd0d 	bl	8009170 <plotter_begin>

	prismatic_axis.position = prismatic_encoder.mm;
 8005756:	4b29      	ldr	r3, [pc, #164]	@ (80057fc <main+0xe8>)
 8005758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800575a:	4a29      	ldr	r2, [pc, #164]	@ (8005800 <main+0xec>)
 800575c:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 800575e:	4b29      	ldr	r3, [pc, #164]	@ (8005804 <main+0xf0>)
 8005760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005762:	4a29      	ldr	r2, [pc, #164]	@ (8005808 <main+0xf4>)
 8005764:	6013      	str	r3, [r2, #0]

	safety_state = SAFETY_NORMAL;
 8005766:	4b29      	ldr	r3, [pc, #164]	@ (800580c <main+0xf8>)
 8005768:	2200      	movs	r2, #0
 800576a:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 800576c:	4b28      	ldr	r3, [pc, #160]	@ (8005810 <main+0xfc>)
 800576e:	2200      	movs	r2, #0
 8005770:	701a      	strb	r2, [r3, #0]
	pilot_light_state = false;
 8005772:	4b28      	ldr	r3, [pc, #160]	@ (8005814 <main+0x100>)
 8005774:	2200      	movs	r2, #0
 8005776:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 8005778:	4b27      	ldr	r3, [pc, #156]	@ (8005818 <main+0x104>)
 800577a:	2200      	movs	r2, #0
 800577c:	601a      	str	r2, [r3, #0]
	position_control_tick = 0;
 800577e:	4b27      	ldr	r3, [pc, #156]	@ (800581c <main+0x108>)
 8005780:	2200      	movs	r2, #0
 8005782:	601a      	str	r2, [r3, #0]

	if (first_startup) {
 8005784:	4b26      	ldr	r3, [pc, #152]	@ (8005820 <main+0x10c>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d034      	beq.n	80057f6 <main+0xe2>
		// Check if already at home position
		bool up_photo_detected = HAL_GPIO_ReadPin(upperphoto_GPIO_Port,
 800578c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005790:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005794:	f007 fcbe 	bl	800d114 <HAL_GPIO_ReadPin>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	bf14      	ite	ne
 800579e:	2301      	movne	r3, #1
 80057a0:	2300      	moveq	r3, #0
 80057a2:	71fb      	strb	r3, [r7, #7]
		upperphoto_Pin);
		bool prox_detected = HAL_GPIO_ReadPin(prox_GPIO_Port, prox_Pin);
 80057a4:	2120      	movs	r1, #32
 80057a6:	481f      	ldr	r0, [pc, #124]	@ (8005824 <main+0x110>)
 80057a8:	f007 fcb4 	bl	800d114 <HAL_GPIO_ReadPin>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	bf14      	ite	ne
 80057b2:	2301      	movne	r3, #1
 80057b4:	2300      	moveq	r3, #0
 80057b6:	71bb      	strb	r3, [r7, #6]

		if (up_photo_detected && prox_detected) {
 80057b8:	79fb      	ldrb	r3, [r7, #7]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d018      	beq.n	80057f0 <main+0xdc>
 80057be:	79bb      	ldrb	r3, [r7, #6]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d015      	beq.n	80057f0 <main+0xdc>
			// Already at home position - no need to home
			first_startup = false;
 80057c4:	4b16      	ldr	r3, [pc, #88]	@ (8005820 <main+0x10c>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	701a      	strb	r2, [r3, #0]
			homing_active = false;
 80057ca:	4b17      	ldr	r3, [pc, #92]	@ (8005828 <main+0x114>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 80057d0:	4b16      	ldr	r3, [pc, #88]	@ (800582c <main+0x118>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	701a      	strb	r2, [r3, #0]

			// Clear any sensor flags
			up_photo = false;
 80057d6:	4b16      	ldr	r3, [pc, #88]	@ (8005830 <main+0x11c>)
 80057d8:	2200      	movs	r2, #0
 80057da:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80057dc:	4b15      	ldr	r3, [pc, #84]	@ (8005834 <main+0x120>)
 80057de:	2200      	movs	r2, #0
 80057e0:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80057e2:	4b15      	ldr	r3, [pc, #84]	@ (8005838 <main+0x124>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 80057e8:	4b14      	ldr	r3, [pc, #80]	@ (800583c <main+0x128>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	701a      	strb	r2, [r3, #0]
 80057ee:	e002      	b.n	80057f6 <main+0xe2>

		} else {
			start_homing_sequence(true);
 80057f0:	2001      	movs	r0, #1
 80057f2:	f000 f871 	bl	80058d8 <start_homing_sequence>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		handle_b2_button_polling();
 80057f6:	f002 fee1 	bl	80085bc <handle_b2_button_polling>
 80057fa:	e7fc      	b.n	80057f6 <main+0xe2>
 80057fc:	2000097c 	.word	0x2000097c
 8005800:	200006fc 	.word	0x200006fc
 8005804:	200009d8 	.word	0x200009d8
 8005808:	20000740 	.word	0x20000740
 800580c:	200007e4 	.word	0x200007e4
 8005810:	200007ed 	.word	0x200007ed
 8005814:	200007ec 	.word	0x200007ec
 8005818:	200007e8 	.word	0x200007e8
 800581c:	200007f0 	.word	0x200007f0
 8005820:	20000333 	.word	0x20000333
 8005824:	48000400 	.word	0x48000400
 8005828:	200007e3 	.word	0x200007e3
 800582c:	200007e2 	.word	0x200007e2
 8005830:	200007e0 	.word	0x200007e0
 8005834:	200007e1 	.word	0x200007e1
 8005838:	200007dc 	.word	0x200007dc
 800583c:	20000784 	.word	0x20000784

08005840 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8005840:	b580      	push	{r7, lr}
 8005842:	b094      	sub	sp, #80	@ 0x50
 8005844:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8005846:	f107 0318 	add.w	r3, r7, #24
 800584a:	2238      	movs	r2, #56	@ 0x38
 800584c:	2100      	movs	r1, #0
 800584e:	4618      	mov	r0, r3
 8005850:	f00d fa96 	bl	8012d80 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8005854:	1d3b      	adds	r3, r7, #4
 8005856:	2200      	movs	r2, #0
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	605a      	str	r2, [r3, #4]
 800585c:	609a      	str	r2, [r3, #8]
 800585e:	60da      	str	r2, [r3, #12]
 8005860:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8005862:	2000      	movs	r0, #0
 8005864:	f007 fcb8 	bl	800d1d8 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005868:	2302      	movs	r3, #2
 800586a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800586c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005870:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005872:	2340      	movs	r3, #64	@ 0x40
 8005874:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005876:	2302      	movs	r3, #2
 8005878:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800587a:	2302      	movs	r3, #2
 800587c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800587e:	2304      	movs	r3, #4
 8005880:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8005882:	2355      	movs	r3, #85	@ 0x55
 8005884:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005886:	2302      	movs	r3, #2
 8005888:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800588a:	2302      	movs	r3, #2
 800588c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800588e:	2302      	movs	r3, #2
 8005890:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005892:	f107 0318 	add.w	r3, r7, #24
 8005896:	4618      	mov	r0, r3
 8005898:	f007 fd52 	bl	800d340 <HAL_RCC_OscConfig>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <SystemClock_Config+0x66>
		Error_Handler();
 80058a2:	f003 fc5d 	bl	8009160 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80058a6:	230f      	movs	r3, #15
 80058a8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80058aa:	2303      	movs	r3, #3
 80058ac:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80058ae:	2300      	movs	r3, #0
 80058b0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80058b2:	2300      	movs	r3, #0
 80058b4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80058b6:	2300      	movs	r3, #0
 80058b8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80058ba:	1d3b      	adds	r3, r7, #4
 80058bc:	2104      	movs	r1, #4
 80058be:	4618      	mov	r0, r3
 80058c0:	f008 f850 	bl	800d964 <HAL_RCC_ClockConfig>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <SystemClock_Config+0x8e>
		Error_Handler();
 80058ca:	f003 fc49 	bl	8009160 <Error_Handler>
	}
}
 80058ce:	bf00      	nop
 80058d0:	3750      	adds	r7, #80	@ 0x50
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
	...

080058d8 <start_homing_sequence>:

/* USER CODE BEGIN 4 */
void start_homing_sequence(bool is_startup) {
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	4603      	mov	r3, r0
 80058e0:	71fb      	strb	r3, [r7, #7]
	//modbus set home state
	registerFrame[R_Theta_Status].U16 = 1;
 80058e2:	4b53      	ldr	r3, [pc, #332]	@ (8005a30 <start_homing_sequence+0x158>)
 80058e4:	2201      	movs	r2, #1
 80058e6:	841a      	strh	r2, [r3, #32]
	if (homing_active)
 80058e8:	4b52      	ldr	r3, [pc, #328]	@ (8005a34 <start_homing_sequence+0x15c>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f040 809a 	bne.w	8005a26 <start_homing_sequence+0x14e>
		return;

	// Check current sensor states
	bool up_photo_detected = HAL_GPIO_ReadPin(upperphoto_GPIO_Port,
 80058f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80058f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80058fa:	f007 fc0b 	bl	800d114 <HAL_GPIO_ReadPin>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	bf14      	ite	ne
 8005904:	2301      	movne	r3, #1
 8005906:	2300      	moveq	r3, #0
 8005908:	73fb      	strb	r3, [r7, #15]
	upperphoto_Pin);
	bool prox_detected = HAL_GPIO_ReadPin(prox_GPIO_Port, prox_Pin);
 800590a:	2120      	movs	r1, #32
 800590c:	484a      	ldr	r0, [pc, #296]	@ (8005a38 <start_homing_sequence+0x160>)
 800590e:	f007 fc01 	bl	800d114 <HAL_GPIO_ReadPin>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	bf14      	ite	ne
 8005918:	2301      	movne	r3, #1
 800591a:	2300      	moveq	r3, #0
 800591c:	73bb      	strb	r3, [r7, #14]

	// Different logic for startup vs manual homing
	if (is_startup || first_startup) {
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d103      	bne.n	800592c <start_homing_sequence+0x54>
 8005924:	4b45      	ldr	r3, [pc, #276]	@ (8005a3c <start_homing_sequence+0x164>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d02e      	beq.n	800598a <start_homing_sequence+0xb2>
		// STARTUP LOGIC: Skip homing if already at home position
		if (up_photo_detected && prox_detected) {
 800592c:	7bfb      	ldrb	r3, [r7, #15]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d018      	beq.n	8005964 <start_homing_sequence+0x8c>
 8005932:	7bbb      	ldrb	r3, [r7, #14]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d015      	beq.n	8005964 <start_homing_sequence+0x8c>
			// Already at home position - no need to home
			homing_active = false;
 8005938:	4b3e      	ldr	r3, [pc, #248]	@ (8005a34 <start_homing_sequence+0x15c>)
 800593a:	2200      	movs	r2, #0
 800593c:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 800593e:	4b40      	ldr	r3, [pc, #256]	@ (8005a40 <start_homing_sequence+0x168>)
 8005940:	2200      	movs	r2, #0
 8005942:	701a      	strb	r2, [r3, #0]
			first_startup = false;
 8005944:	4b3d      	ldr	r3, [pc, #244]	@ (8005a3c <start_homing_sequence+0x164>)
 8005946:	2200      	movs	r2, #0
 8005948:	701a      	strb	r2, [r3, #0]

			// Clear sensor flags
			up_photo = false;
 800594a:	4b3e      	ldr	r3, [pc, #248]	@ (8005a44 <start_homing_sequence+0x16c>)
 800594c:	2200      	movs	r2, #0
 800594e:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005950:	4b3d      	ldr	r3, [pc, #244]	@ (8005a48 <start_homing_sequence+0x170>)
 8005952:	2200      	movs	r2, #0
 8005954:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005956:	4b3d      	ldr	r3, [pc, #244]	@ (8005a4c <start_homing_sequence+0x174>)
 8005958:	2200      	movs	r2, #0
 800595a:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 800595c:	4b3c      	ldr	r3, [pc, #240]	@ (8005a50 <start_homing_sequence+0x178>)
 800595e:	2200      	movs	r2, #0
 8005960:	701a      	strb	r2, [r3, #0]
			return;
 8005962:	e061      	b.n	8005a28 <start_homing_sequence+0x150>
		}

		// Not at home - start startup homing sequence (skip zero degrees)
		homing_active = true;
 8005964:	4b33      	ldr	r3, [pc, #204]	@ (8005a34 <start_homing_sequence+0x15c>)
 8005966:	2201      	movs	r2, #1
 8005968:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 800596a:	4b39      	ldr	r3, [pc, #228]	@ (8005a50 <start_homing_sequence+0x178>)
 800596c:	2200      	movs	r2, #0
 800596e:	701a      	strb	r2, [r3, #0]
		prox_count = 0;
 8005970:	4b36      	ldr	r3, [pc, #216]	@ (8005a4c <start_homing_sequence+0x174>)
 8005972:	2200      	movs	r2, #0
 8005974:	601a      	str	r2, [r3, #0]
		up_photo = false;
 8005976:	4b33      	ldr	r3, [pc, #204]	@ (8005a44 <start_homing_sequence+0x16c>)
 8005978:	2200      	movs	r2, #0
 800597a:	701a      	strb	r2, [r3, #0]
		low_photo = false;
 800597c:	4b32      	ldr	r3, [pc, #200]	@ (8005a48 <start_homing_sequence+0x170>)
 800597e:	2200      	movs	r2, #0
 8005980:	701a      	strb	r2, [r3, #0]
		homing_state = HOMING_PEN_UP;
 8005982:	4b2f      	ldr	r3, [pc, #188]	@ (8005a40 <start_homing_sequence+0x168>)
 8005984:	2201      	movs	r2, #1
 8005986:	701a      	strb	r2, [r3, #0]
 8005988:	e04e      	b.n	8005a28 <start_homing_sequence+0x150>

	} else {
		// MANUAL HOMING LOGIC: More sophisticated behavior
		if (up_photo_detected && prox_detected) {
 800598a:	7bfb      	ldrb	r3, [r7, #15]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d018      	beq.n	80059c2 <start_homing_sequence+0xea>
 8005990:	7bbb      	ldrb	r3, [r7, #14]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d015      	beq.n	80059c2 <start_homing_sequence+0xea>
			// Already perfectly homed - skip homing completely
			homing_active = false;
 8005996:	4b27      	ldr	r3, [pc, #156]	@ (8005a34 <start_homing_sequence+0x15c>)
 8005998:	2200      	movs	r2, #0
 800599a:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 800599c:	4b28      	ldr	r3, [pc, #160]	@ (8005a40 <start_homing_sequence+0x168>)
 800599e:	2200      	movs	r2, #0
 80059a0:	701a      	strb	r2, [r3, #0]
			first_startup = false;  // ← ADDED THIS LINE
 80059a2:	4b26      	ldr	r3, [pc, #152]	@ (8005a3c <start_homing_sequence+0x164>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	701a      	strb	r2, [r3, #0]
			up_photo = false;
 80059a8:	4b26      	ldr	r3, [pc, #152]	@ (8005a44 <start_homing_sequence+0x16c>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80059ae:	4b26      	ldr	r3, [pc, #152]	@ (8005a48 <start_homing_sequence+0x170>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80059b4:	4b25      	ldr	r3, [pc, #148]	@ (8005a4c <start_homing_sequence+0x174>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	601a      	str	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 80059ba:	4b25      	ldr	r3, [pc, #148]	@ (8005a50 <start_homing_sequence+0x178>)
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]
			return;
 80059c0:	e032      	b.n	8005a28 <start_homing_sequence+0x150>
			 up_photo = false;
			 low_photo = false;
			 homing_state = HOMING_REV_TO_ZERO_DEG;
			 rev_to_zero_trajectory_started = false;
			 */
		} else if (up_photo_detected && !prox_detected) {
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d01b      	beq.n	8005a00 <start_homing_sequence+0x128>
 80059c8:	7bbb      	ldrb	r3, [r7, #14]
 80059ca:	f083 0301 	eor.w	r3, r3, #1
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d015      	beq.n	8005a00 <start_homing_sequence+0x128>
			// At up photo but not at prox - go to zero degrees first
			homing_active = true;
 80059d4:	4b17      	ldr	r3, [pc, #92]	@ (8005a34 <start_homing_sequence+0x15c>)
 80059d6:	2201      	movs	r2, #1
 80059d8:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 80059da:	4b1d      	ldr	r3, [pc, #116]	@ (8005a50 <start_homing_sequence+0x178>)
 80059dc:	2200      	movs	r2, #0
 80059de:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80059e0:	4b1a      	ldr	r3, [pc, #104]	@ (8005a4c <start_homing_sequence+0x174>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]
			up_photo = false;
 80059e6:	4b17      	ldr	r3, [pc, #92]	@ (8005a44 <start_homing_sequence+0x16c>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80059ec:	4b16      	ldr	r3, [pc, #88]	@ (8005a48 <start_homing_sequence+0x170>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_REV_TO_ZERO_DEG;
 80059f2:	4b13      	ldr	r3, [pc, #76]	@ (8005a40 <start_homing_sequence+0x168>)
 80059f4:	2207      	movs	r2, #7
 80059f6:	701a      	strb	r2, [r3, #0]
			rev_to_zero_trajectory_started = false;
 80059f8:	4b16      	ldr	r3, [pc, #88]	@ (8005a54 <start_homing_sequence+0x17c>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	701a      	strb	r2, [r3, #0]
 80059fe:	e013      	b.n	8005a28 <start_homing_sequence+0x150>
		} else {
			// Not at up photo - start full homing sequence
			homing_active = true;
 8005a00:	4b0c      	ldr	r3, [pc, #48]	@ (8005a34 <start_homing_sequence+0x15c>)
 8005a02:	2201      	movs	r2, #1
 8005a04:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 8005a06:	4b12      	ldr	r3, [pc, #72]	@ (8005a50 <start_homing_sequence+0x178>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005a4c <start_homing_sequence+0x174>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
			up_photo = false;
 8005a12:	4b0c      	ldr	r3, [pc, #48]	@ (8005a44 <start_homing_sequence+0x16c>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005a18:	4b0b      	ldr	r3, [pc, #44]	@ (8005a48 <start_homing_sequence+0x170>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_PEN_UP;
 8005a1e:	4b08      	ldr	r3, [pc, #32]	@ (8005a40 <start_homing_sequence+0x168>)
 8005a20:	2201      	movs	r2, #1
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	e000      	b.n	8005a28 <start_homing_sequence+0x150>
		return;
 8005a26:	bf00      	nop
		}
	}
}
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20001580 	.word	0x20001580
 8005a34:	200007e3 	.word	0x200007e3
 8005a38:	48000400 	.word	0x48000400
 8005a3c:	20000333 	.word	0x20000333
 8005a40:	200007e2 	.word	0x200007e2
 8005a44:	200007e0 	.word	0x200007e0
 8005a48:	200007e1 	.word	0x200007e1
 8005a4c:	200007dc 	.word	0x200007dc
 8005a50:	20000784 	.word	0x20000784
 8005a54:	200007ee 	.word	0x200007ee

08005a58 <update_homing_sequence>:

void update_homing_sequence(void) {
 8005a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a5c:	ed2d 8b02 	vpush	{d8}
 8005a60:	b08b      	sub	sp, #44	@ 0x2c
 8005a62:	af00      	add	r7, sp, #0
	if (!homing_active)
 8005a64:	4b95      	ldr	r3, [pc, #596]	@ (8005cbc <update_homing_sequence+0x264>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	f083 0301 	eor.w	r3, r3, #1
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f040 8366 	bne.w	8006140 <update_homing_sequence+0x6e8>
		return;

	switch (homing_state) {
 8005a74:	4b92      	ldr	r3, [pc, #584]	@ (8005cc0 <update_homing_sequence+0x268>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	2b0a      	cmp	r3, #10
 8005a7c:	f200 8362 	bhi.w	8006144 <update_homing_sequence+0x6ec>
 8005a80:	a201      	add	r2, pc, #4	@ (adr r2, 8005a88 <update_homing_sequence+0x30>)
 8005a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a86:	bf00      	nop
 8005a88:	08005ab5 	.word	0x08005ab5
 8005a8c:	08005ad7 	.word	0x08005ad7
 8005a90:	08005b43 	.word	0x08005b43
 8005a94:	08005c8f 	.word	0x08005c8f
 8005a98:	08005d01 	.word	0x08005d01
 8005a9c:	08005e45 	.word	0x08005e45
 8005aa0:	08005ebd 	.word	0x08005ebd
 8005aa4:	08005f4f 	.word	0x08005f4f
 8005aa8:	08006001 	.word	0x08006001
 8005aac:	08006107 	.word	0x08006107
 8005ab0:	08006133 	.word	0x08006133
	case HOMING_PEN_UP:
		// Ensure pen is up
		plotter_pen_up();
 8005ab4:	f003 ffe6 	bl	8009a84 <plotter_pen_up>
		prismatic_axis.command_pos = 0.0f;
 8005ab8:	4b82      	ldr	r3, [pc, #520]	@ (8005cc4 <update_homing_sequence+0x26c>)
 8005aba:	f04f 0200 	mov.w	r2, #0
 8005abe:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005ac0:	4b81      	ldr	r3, [pc, #516]	@ (8005cc8 <update_homing_sequence+0x270>)
 8005ac2:	f04f 0200 	mov.w	r2, #0
 8005ac6:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer = 0;
 8005ac8:	4b80      	ldr	r3, [pc, #512]	@ (8005ccc <update_homing_sequence+0x274>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]
		homing_state = HOMING_DELAY_AFTER_PEN_UP;
 8005ace:	4b7c      	ldr	r3, [pc, #496]	@ (8005cc0 <update_homing_sequence+0x268>)
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	701a      	strb	r2, [r3, #0]
		break;
 8005ad4:	e349      	b.n	800616a <update_homing_sequence+0x712>

	case HOMING_DELAY_AFTER_PEN_UP:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005ad6:	4b7b      	ldr	r3, [pc, #492]	@ (8005cc4 <update_homing_sequence+0x26c>)
 8005ad8:	f04f 0200 	mov.w	r2, #0
 8005adc:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005ade:	4b7a      	ldr	r3, [pc, #488]	@ (8005cc8 <update_homing_sequence+0x270>)
 8005ae0:	f04f 0200 	mov.w	r2, #0
 8005ae4:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005ae6:	4b79      	ldr	r3, [pc, #484]	@ (8005ccc <update_homing_sequence+0x274>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3301      	adds	r3, #1
 8005aec:	4a77      	ldr	r2, [pc, #476]	@ (8005ccc <update_homing_sequence+0x274>)
 8005aee:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005af0:	4b76      	ldr	r3, [pc, #472]	@ (8005ccc <update_homing_sequence+0x274>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005af8:	f0c0 8326 	bcc.w	8006148 <update_homing_sequence+0x6f0>
			// Check if already at low photo sensor
			low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 8005afc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005b00:	4873      	ldr	r0, [pc, #460]	@ (8005cd0 <update_homing_sequence+0x278>)
 8005b02:	f007 fb07 	bl	800d114 <HAL_GPIO_ReadPin>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	bf14      	ite	ne
 8005b0c:	2301      	movne	r3, #1
 8005b0e:	2300      	moveq	r3, #0
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	4b70      	ldr	r3, [pc, #448]	@ (8005cd4 <update_homing_sequence+0x27c>)
 8005b14:	701a      	strb	r2, [r3, #0]
			LOWER_PHOTO_Pin);

			if (low_photo) {
 8005b16:	4b6f      	ldr	r3, [pc, #444]	@ (8005cd4 <update_homing_sequence+0x27c>)
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00c      	beq.n	8005b3a <update_homing_sequence+0xe2>
				// Already at low photo, skip moving down and go directly to delay
				motion_delay_timer = 0;
 8005b20:	4b6a      	ldr	r3, [pc, #424]	@ (8005ccc <update_homing_sequence+0x274>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 8005b26:	4b66      	ldr	r3, [pc, #408]	@ (8005cc0 <update_homing_sequence+0x268>)
 8005b28:	2204      	movs	r2, #4
 8005b2a:	701a      	strb	r2, [r3, #0]
				low_photo = false; // Reset flag
 8005b2c:	4b69      	ldr	r3, [pc, #420]	@ (8005cd4 <update_homing_sequence+0x27c>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	701a      	strb	r2, [r3, #0]
				up_photo = false;  // Reset for next detection
 8005b32:	4b69      	ldr	r3, [pc, #420]	@ (8005cd8 <update_homing_sequence+0x280>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	701a      	strb	r2, [r3, #0]
			} else {
				// Not at low photo, need to move down
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
			}
		}
		break;
 8005b38:	e306      	b.n	8006148 <update_homing_sequence+0x6f0>
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
 8005b3a:	4b61      	ldr	r3, [pc, #388]	@ (8005cc0 <update_homing_sequence+0x268>)
 8005b3c:	2203      	movs	r2, #3
 8005b3e:	701a      	strb	r2, [r3, #0]
		break;
 8005b40:	e302      	b.n	8006148 <update_homing_sequence+0x6f0>

	case HOMING_PRIS_DOWN_TO_LOW_PHOTO:
		// Move prismatic down at constant velocity
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 8005b42:	4b60      	ldr	r3, [pc, #384]	@ (8005cc4 <update_homing_sequence+0x26c>)
 8005b44:	edd3 7a07 	vldr	s15, [r3, #28]
 8005b48:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8005cdc <update_homing_sequence+0x284>
 8005b4c:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
 8005b50:	4b5c      	ldr	r3, [pc, #368]	@ (8005cc4 <update_homing_sequence+0x26c>)
 8005b52:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8005b56:	4b5b      	ldr	r3, [pc, #364]	@ (8005cc4 <update_homing_sequence+0x26c>)
 8005b58:	edd3 7a06 	vldr	s15, [r3, #24]
 8005b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8005b60:	485f      	ldr	r0, [pc, #380]	@ (8005ce0 <update_homing_sequence+0x288>)
 8005b62:	f7fb fb59 	bl	8001218 <PID_CONTROLLER_Compute>
 8005b66:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005b6a:	4b5e      	ldr	r3, [pc, #376]	@ (8005ce4 <update_homing_sequence+0x28c>)
 8005b6c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005b70:	4610      	mov	r0, r2
 8005b72:	4619      	mov	r1, r3
 8005b74:	f7fa ffa6 	bl	8000ac4 <__aeabi_d2iz>
 8005b78:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005b7a:	4b5a      	ldr	r3, [pc, #360]	@ (8005ce4 <update_homing_sequence+0x28c>)
 8005b7c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005b80:	613a      	str	r2, [r7, #16]
 8005b82:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005b86:	617b      	str	r3, [r7, #20]
		prismatic_axis.command_pos = PWM_Satuation(
 8005b88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b8c:	f7fa ff9a 	bl	8000ac4 <__aeabi_d2iz>
 8005b90:	4603      	mov	r3, r0
 8005b92:	4619      	mov	r1, r3
 8005b94:	4620      	mov	r0, r4
 8005b96:	eeb0 0a48 	vmov.f32	s0, s16
 8005b9a:	f7fb fadb 	bl	8001154 <PWM_Satuation>
 8005b9e:	ee07 0a90 	vmov	s15, r0
 8005ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ba6:	4b47      	ldr	r3, [pc, #284]	@ (8005cc4 <update_homing_sequence+0x26c>)
 8005ba8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005bac:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8005bb0:	484d      	ldr	r0, [pc, #308]	@ (8005ce8 <update_homing_sequence+0x290>)
 8005bb2:	f7fb fe4d 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 8005bb6:	eef0 7a40 	vmov.f32	s15, s0
 8005bba:	4b42      	ldr	r3, [pc, #264]	@ (8005cc4 <update_homing_sequence+0x26c>)
 8005bbc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005bc0:	4b4a      	ldr	r3, [pc, #296]	@ (8005cec <update_homing_sequence+0x294>)
 8005bc2:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8005cf0 <update_homing_sequence+0x298>)
 8005bc8:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005bcc:	ed9f 6a49 	vldr	s12, [pc, #292]	@ 8005cf4 <update_homing_sequence+0x29c>
 8005bd0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005bd4:	eeb0 1a66 	vmov.f32	s2, s13
 8005bd8:	eddf 0a47 	vldr	s1, [pc, #284]	@ 8005cf8 <update_homing_sequence+0x2a0>
 8005bdc:	eeb0 0a47 	vmov.f32	s0, s14
 8005be0:	4846      	ldr	r0, [pc, #280]	@ (8005cfc <update_homing_sequence+0x2a4>)
 8005be2:	f7fb fedd 	bl	80019a0 <PRISMATIC_MOTOR_DFD_Compute>
 8005be6:	eef0 7a40 	vmov.f32	s15, s0
 8005bea:	4b36      	ldr	r3, [pc, #216]	@ (8005cc4 <update_homing_sequence+0x26c>)
 8005bec:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005bf0:	4b34      	ldr	r3, [pc, #208]	@ (8005cc4 <update_homing_sequence+0x26c>)
 8005bf2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005bf6:	4b33      	ldr	r3, [pc, #204]	@ (8005cc4 <update_homing_sequence+0x26c>)
 8005bf8:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005bfc:	4b31      	ldr	r3, [pc, #196]	@ (8005cc4 <update_homing_sequence+0x26c>)
 8005bfe:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c0a:	4b2e      	ldr	r3, [pc, #184]	@ (8005cc4 <update_homing_sequence+0x26c>)
 8005c0c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005c10:	4b2c      	ldr	r3, [pc, #176]	@ (8005cc4 <update_homing_sequence+0x26c>)
 8005c12:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 8005c16:	4b33      	ldr	r3, [pc, #204]	@ (8005ce4 <update_homing_sequence+0x28c>)
 8005c18:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	4619      	mov	r1, r3
 8005c20:	f7fa ff50 	bl	8000ac4 <__aeabi_d2iz>
 8005c24:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005c26:	4b2f      	ldr	r3, [pc, #188]	@ (8005ce4 <update_homing_sequence+0x28c>)
 8005c28:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005c2c:	60ba      	str	r2, [r7, #8]
 8005c2e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005c32:	60fb      	str	r3, [r7, #12]
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005c34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c38:	f7fa ff44 	bl	8000ac4 <__aeabi_d2iz>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	4619      	mov	r1, r3
 8005c40:	4620      	mov	r0, r4
 8005c42:	eeb0 0a48 	vmov.f32	s0, s16
 8005c46:	f7fb fa85 	bl	8001154 <PWM_Satuation>
 8005c4a:	ee07 0a90 	vmov	s15, r0
 8005c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c52:	4b1c      	ldr	r3, [pc, #112]	@ (8005cc4 <update_homing_sequence+0x26c>)
 8005c54:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (low_photo) {
 8005c58:	4b1e      	ldr	r3, [pc, #120]	@ (8005cd4 <update_homing_sequence+0x27c>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 8274 	beq.w	800614c <update_homing_sequence+0x6f4>
			// Found low photo, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 8005c64:	4b17      	ldr	r3, [pc, #92]	@ (8005cc4 <update_homing_sequence+0x26c>)
 8005c66:	f04f 0200 	mov.w	r2, #0
 8005c6a:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005c6c:	4b16      	ldr	r3, [pc, #88]	@ (8005cc8 <update_homing_sequence+0x270>)
 8005c6e:	f04f 0200 	mov.w	r2, #0
 8005c72:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005c74:	4b15      	ldr	r3, [pc, #84]	@ (8005ccc <update_homing_sequence+0x274>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 8005c7a:	4b11      	ldr	r3, [pc, #68]	@ (8005cc0 <update_homing_sequence+0x268>)
 8005c7c:	2204      	movs	r2, #4
 8005c7e:	701a      	strb	r2, [r3, #0]
			low_photo = false; // Reset flag after use
 8005c80:	4b14      	ldr	r3, [pc, #80]	@ (8005cd4 <update_homing_sequence+0x27c>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	701a      	strb	r2, [r3, #0]
			up_photo = false;  // Reset for next detection
 8005c86:	4b14      	ldr	r3, [pc, #80]	@ (8005cd8 <update_homing_sequence+0x280>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005c8c:	e25e      	b.n	800614c <update_homing_sequence+0x6f4>

	case HOMING_DELAY_AFTER_LOW_PHOTO:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc4 <update_homing_sequence+0x26c>)
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005c96:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc8 <update_homing_sequence+0x270>)
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005ccc <update_homing_sequence+0x274>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	4a09      	ldr	r2, [pc, #36]	@ (8005ccc <update_homing_sequence+0x274>)
 8005ca6:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005ca8:	4b08      	ldr	r3, [pc, #32]	@ (8005ccc <update_homing_sequence+0x274>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005cb0:	f0c0 824e 	bcc.w	8006150 <update_homing_sequence+0x6f8>
			homing_state = HOMING_PRIS_UP_TO_UP_PHOTO;
 8005cb4:	4b02      	ldr	r3, [pc, #8]	@ (8005cc0 <update_homing_sequence+0x268>)
 8005cb6:	2205      	movs	r2, #5
 8005cb8:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005cba:	e249      	b.n	8006150 <update_homing_sequence+0x6f8>
 8005cbc:	200007e3 	.word	0x200007e3
 8005cc0:	200007e2 	.word	0x200007e2
 8005cc4:	200006fc 	.word	0x200006fc
 8005cc8:	20000740 	.word	0x20000740
 8005ccc:	200007d8 	.word	0x200007d8
 8005cd0:	48000400 	.word	0x48000400
 8005cd4:	200007e1 	.word	0x200007e1
 8005cd8:	200007e0 	.word	0x200007e0
 8005cdc:	437a0000 	.word	0x437a0000
 8005ce0:	20000a5c 	.word	0x20000a5c
 8005ce4:	20000080 	.word	0x20000080
 8005ce8:	20000afc 	.word	0x20000afc
 8005cec:	200009d8 	.word	0x200009d8
 8005cf0:	2000097c 	.word	0x2000097c
 8005cf4:	447a0000 	.word	0x447a0000
 8005cf8:	00000000 	.word	0x00000000
 8005cfc:	20000b00 	.word	0x20000b00

	case HOMING_PRIS_UP_TO_UP_PHOTO:
		// Move prismatic up at constant velocity
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 8005d00:	4ba8      	ldr	r3, [pc, #672]	@ (8005fa4 <update_homing_sequence+0x54c>)
 8005d02:	edd3 7a07 	vldr	s15, [r3, #28]
 8005d06:	ed9f 7aa8 	vldr	s14, [pc, #672]	@ 8005fa8 <update_homing_sequence+0x550>
 8005d0a:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
 8005d0e:	4ba5      	ldr	r3, [pc, #660]	@ (8005fa4 <update_homing_sequence+0x54c>)
 8005d10:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8005d14:	4ba3      	ldr	r3, [pc, #652]	@ (8005fa4 <update_homing_sequence+0x54c>)
 8005d16:	edd3 7a06 	vldr	s15, [r3, #24]
 8005d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8005d1e:	48a3      	ldr	r0, [pc, #652]	@ (8005fac <update_homing_sequence+0x554>)
 8005d20:	f7fb fa7a 	bl	8001218 <PID_CONTROLLER_Compute>
 8005d24:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005d28:	4ba1      	ldr	r3, [pc, #644]	@ (8005fb0 <update_homing_sequence+0x558>)
 8005d2a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005d2e:	4610      	mov	r0, r2
 8005d30:	4619      	mov	r1, r3
 8005d32:	f7fa fec7 	bl	8000ac4 <__aeabi_d2iz>
 8005d36:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005d38:	4b9d      	ldr	r3, [pc, #628]	@ (8005fb0 <update_homing_sequence+0x558>)
 8005d3a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005d3e:	603a      	str	r2, [r7, #0]
 8005d40:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005d44:	607b      	str	r3, [r7, #4]
		prismatic_axis.command_pos = PWM_Satuation(
 8005d46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d4a:	f7fa febb 	bl	8000ac4 <__aeabi_d2iz>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	4619      	mov	r1, r3
 8005d52:	4620      	mov	r0, r4
 8005d54:	eeb0 0a48 	vmov.f32	s0, s16
 8005d58:	f7fb f9fc 	bl	8001154 <PWM_Satuation>
 8005d5c:	ee07 0a90 	vmov	s15, r0
 8005d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d64:	4b8f      	ldr	r3, [pc, #572]	@ (8005fa4 <update_homing_sequence+0x54c>)
 8005d66:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005d6a:	eebd 0a00 	vmov.f32	s0, #208	@ 0xbe800000 -0.250
 8005d6e:	4891      	ldr	r0, [pc, #580]	@ (8005fb4 <update_homing_sequence+0x55c>)
 8005d70:	f7fb fd6e 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 8005d74:	eef0 7a40 	vmov.f32	s15, s0
 8005d78:	4b8a      	ldr	r3, [pc, #552]	@ (8005fa4 <update_homing_sequence+0x54c>)
 8005d7a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005d7e:	4b8e      	ldr	r3, [pc, #568]	@ (8005fb8 <update_homing_sequence+0x560>)
 8005d80:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005d84:	4b8d      	ldr	r3, [pc, #564]	@ (8005fbc <update_homing_sequence+0x564>)
 8005d86:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005d8a:	ed9f 6a8d 	vldr	s12, [pc, #564]	@ 8005fc0 <update_homing_sequence+0x568>
 8005d8e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005d92:	eeb0 1a66 	vmov.f32	s2, s13
 8005d96:	eddf 0a8b 	vldr	s1, [pc, #556]	@ 8005fc4 <update_homing_sequence+0x56c>
 8005d9a:	eeb0 0a47 	vmov.f32	s0, s14
 8005d9e:	488a      	ldr	r0, [pc, #552]	@ (8005fc8 <update_homing_sequence+0x570>)
 8005da0:	f7fb fdfe 	bl	80019a0 <PRISMATIC_MOTOR_DFD_Compute>
 8005da4:	eef0 7a40 	vmov.f32	s15, s0
 8005da8:	4b7e      	ldr	r3, [pc, #504]	@ (8005fa4 <update_homing_sequence+0x54c>)
 8005daa:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005dae:	4b7d      	ldr	r3, [pc, #500]	@ (8005fa4 <update_homing_sequence+0x54c>)
 8005db0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005db4:	4b7b      	ldr	r3, [pc, #492]	@ (8005fa4 <update_homing_sequence+0x54c>)
 8005db6:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005dba:	4b7a      	ldr	r3, [pc, #488]	@ (8005fa4 <update_homing_sequence+0x54c>)
 8005dbc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005dc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dc8:	4b76      	ldr	r3, [pc, #472]	@ (8005fa4 <update_homing_sequence+0x54c>)
 8005dca:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005dce:	4b75      	ldr	r3, [pc, #468]	@ (8005fa4 <update_homing_sequence+0x54c>)
 8005dd0:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 8005dd4:	4b76      	ldr	r3, [pc, #472]	@ (8005fb0 <update_homing_sequence+0x558>)
 8005dd6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005dda:	4610      	mov	r0, r2
 8005ddc:	4619      	mov	r1, r3
 8005dde:	f7fa fe71 	bl	8000ac4 <__aeabi_d2iz>
 8005de2:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005de4:	4b72      	ldr	r3, [pc, #456]	@ (8005fb0 <update_homing_sequence+0x558>)
 8005de6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005dea:	4692      	mov	sl, r2
 8005dec:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005df0:	4650      	mov	r0, sl
 8005df2:	4659      	mov	r1, fp
 8005df4:	f7fa fe66 	bl	8000ac4 <__aeabi_d2iz>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	eeb0 0a48 	vmov.f32	s0, s16
 8005e02:	f7fb f9a7 	bl	8001154 <PWM_Satuation>
 8005e06:	ee07 0a90 	vmov	s15, r0
 8005e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e0e:	4b65      	ldr	r3, [pc, #404]	@ (8005fa4 <update_homing_sequence+0x54c>)
 8005e10:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (up_photo) {
 8005e14:	4b6d      	ldr	r3, [pc, #436]	@ (8005fcc <update_homing_sequence+0x574>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 819a 	beq.w	8006154 <update_homing_sequence+0x6fc>
			// Found up photo, stop and start delay before backup
			prismatic_axis.command_pos = 0.0f;
 8005e20:	4b60      	ldr	r3, [pc, #384]	@ (8005fa4 <update_homing_sequence+0x54c>)
 8005e22:	f04f 0200 	mov.w	r2, #0
 8005e26:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005e28:	4b69      	ldr	r3, [pc, #420]	@ (8005fd0 <update_homing_sequence+0x578>)
 8005e2a:	f04f 0200 	mov.w	r2, #0
 8005e2e:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005e30:	4b68      	ldr	r3, [pc, #416]	@ (8005fd4 <update_homing_sequence+0x57c>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_UP_PHOTO;
 8005e36:	4b68      	ldr	r3, [pc, #416]	@ (8005fd8 <update_homing_sequence+0x580>)
 8005e38:	2206      	movs	r2, #6
 8005e3a:	701a      	strb	r2, [r3, #0]
			up_photo = false; // Reset flag after use
 8005e3c:	4b63      	ldr	r3, [pc, #396]	@ (8005fcc <update_homing_sequence+0x574>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005e42:	e187      	b.n	8006154 <update_homing_sequence+0x6fc>

	case HOMING_DELAY_AFTER_UP_PHOTO:
		// Stop motors and wait before starting backup procedure
		prismatic_axis.command_pos = 0.0f;
 8005e44:	4b57      	ldr	r3, [pc, #348]	@ (8005fa4 <update_homing_sequence+0x54c>)
 8005e46:	f04f 0200 	mov.w	r2, #0
 8005e4a:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005e4c:	4b60      	ldr	r3, [pc, #384]	@ (8005fd0 <update_homing_sequence+0x578>)
 8005e4e:	f04f 0200 	mov.w	r2, #0
 8005e52:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005e54:	4b5f      	ldr	r3, [pc, #380]	@ (8005fd4 <update_homing_sequence+0x57c>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	4a5e      	ldr	r2, [pc, #376]	@ (8005fd4 <update_homing_sequence+0x57c>)
 8005e5c:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005e5e:	4b5d      	ldr	r3, [pc, #372]	@ (8005fd4 <update_homing_sequence+0x57c>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005e66:	f0c0 8177 	bcc.w	8006158 <update_homing_sequence+0x700>
			if (first_startup) {
 8005e6a:	4b5c      	ldr	r3, [pc, #368]	@ (8005fdc <update_homing_sequence+0x584>)
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d01d      	beq.n	8005eae <update_homing_sequence+0x456>
				// STARTUP: Check if prox is already detected before searching
				bool prox_detected = HAL_GPIO_ReadPin(prox_GPIO_Port, prox_Pin);
 8005e72:	2120      	movs	r1, #32
 8005e74:	485a      	ldr	r0, [pc, #360]	@ (8005fe0 <update_homing_sequence+0x588>)
 8005e76:	f007 f94d 	bl	800d114 <HAL_GPIO_ReadPin>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	bf14      	ite	ne
 8005e80:	2301      	movne	r3, #1
 8005e82:	2300      	moveq	r3, #0
 8005e84:	76fb      	strb	r3, [r7, #27]

				if (prox_detected) {
 8005e86:	7efb      	ldrb	r3, [r7, #27]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d009      	beq.n	8005ea0 <update_homing_sequence+0x448>
					// Already at prox - skip search and go to completion
					motion_delay_timer = 0;
 8005e8c:	4b51      	ldr	r3, [pc, #324]	@ (8005fd4 <update_homing_sequence+0x57c>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	601a      	str	r2, [r3, #0]
					homing_state = HOMING_DELAY_AFTER_PROX;
 8005e92:	4b51      	ldr	r3, [pc, #324]	@ (8005fd8 <update_homing_sequence+0x580>)
 8005e94:	220a      	movs	r2, #10
 8005e96:	701a      	strb	r2, [r3, #0]
					prox_count = 1; // Set count to indicate prox found
 8005e98:	4b52      	ldr	r3, [pc, #328]	@ (8005fe4 <update_homing_sequence+0x58c>)
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_REV_TO_ZERO_DEG;
				// Initialize trajectory variables for zero degree movement
				rev_to_zero_trajectory_started = false;
			}
		}
		break;
 8005e9e:	e15b      	b.n	8006158 <update_homing_sequence+0x700>
					homing_state = HOMING_REV_CW_TO_PROX1;
 8005ea0:	4b4d      	ldr	r3, [pc, #308]	@ (8005fd8 <update_homing_sequence+0x580>)
 8005ea2:	2209      	movs	r2, #9
 8005ea4:	701a      	strb	r2, [r3, #0]
					prox_count = 0; // Reset prox counter
 8005ea6:	4b4f      	ldr	r3, [pc, #316]	@ (8005fe4 <update_homing_sequence+0x58c>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]
		break;
 8005eac:	e154      	b.n	8006158 <update_homing_sequence+0x700>
				homing_state = HOMING_REV_TO_ZERO_DEG;
 8005eae:	4b4a      	ldr	r3, [pc, #296]	@ (8005fd8 <update_homing_sequence+0x580>)
 8005eb0:	2207      	movs	r2, #7
 8005eb2:	701a      	strb	r2, [r3, #0]
				rev_to_zero_trajectory_started = false;
 8005eb4:	4b4c      	ldr	r3, [pc, #304]	@ (8005fe8 <update_homing_sequence+0x590>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	701a      	strb	r2, [r3, #0]
		break;
 8005eba:	e14d      	b.n	8006158 <update_homing_sequence+0x700>

	case HOMING_REV_TO_ZERO_DEG:
		if (!rev_to_zero_trajectory_started) {
 8005ebc:	4b4a      	ldr	r3, [pc, #296]	@ (8005fe8 <update_homing_sequence+0x590>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	f083 0301 	eor.w	r3, r3, #1
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d02f      	beq.n	8005f2a <update_homing_sequence+0x4d2>
			// Get current prismatic position (keep it where it is)
			float current_pris_pos = prismatic_encoder.mm;
 8005eca:	4b3c      	ldr	r3, [pc, #240]	@ (8005fbc <update_homing_sequence+0x564>)
 8005ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ece:	623b      	str	r3, [r7, #32]
			float current_rev_deg = normalize_angle(revolute_encoder.rads)
 8005ed0:	4b39      	ldr	r3, [pc, #228]	@ (8005fb8 <update_homing_sequence+0x560>)
 8005ed2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8005eda:	f000 f95f 	bl	800619c <normalize_angle>
 8005ede:	eef0 7a40 	vmov.f32	s15, s0
					* 180.0f / PI;
 8005ee2:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8005fec <update_homing_sequence+0x594>
 8005ee6:	ee27 7a87 	vmul.f32	s14, s15, s14
			float current_rev_deg = normalize_angle(revolute_encoder.rads)
 8005eea:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8005ff0 <update_homing_sequence+0x598>
 8005eee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ef2:	edc7 7a07 	vstr	s15, [r7, #28]

			check[0] = (int) current_rev_deg;
 8005ef6:	edd7 7a07 	vldr	s15, [r7, #28]
 8005efa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005efe:	ee17 2a90 	vmov	r2, s15
 8005f02:	4b3c      	ldr	r3, [pc, #240]	@ (8005ff4 <update_homing_sequence+0x59c>)
 8005f04:	601a      	str	r2, [r3, #0]
			check[1] = (int) movement_deg;
 8005f06:	4b3c      	ldr	r3, [pc, #240]	@ (8005ff8 <update_homing_sequence+0x5a0>)
 8005f08:	edd3 7a00 	vldr	s15, [r3]
 8005f0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f10:	ee17 2a90 	vmov	r2, s15
 8005f14:	4b37      	ldr	r3, [pc, #220]	@ (8005ff4 <update_homing_sequence+0x59c>)
 8005f16:	605a      	str	r2, [r3, #4]

			// Start combined trajectory to move revolute to 0° while keeping prismatic position
			start_combined_trajectory(0.0, 0.0);
 8005f18:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8005fc4 <update_homing_sequence+0x56c>
 8005f1c:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8005fc4 <update_homing_sequence+0x56c>
 8005f20:	f000 fa26 	bl	8006370 <start_combined_trajectory>

			rev_to_zero_trajectory_started = true;
 8005f24:	4b30      	ldr	r3, [pc, #192]	@ (8005fe8 <update_homing_sequence+0x590>)
 8005f26:	2201      	movs	r2, #1
 8005f28:	701a      	strb	r2, [r3, #0]
		}

		// Wait for trajectory to complete
		if (motion_sequence_state == MOTION_IDLE) {
 8005f2a:	4b34      	ldr	r3, [pc, #208]	@ (8005ffc <update_homing_sequence+0x5a4>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f040 8114 	bne.w	800615c <update_homing_sequence+0x704>
			// Trajectory completed, move to next homing state
			motion_delay_timer = 0;
 8005f34:	4b27      	ldr	r3, [pc, #156]	@ (8005fd4 <update_homing_sequence+0x57c>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_ZERO_DEG;
 8005f3a:	4b27      	ldr	r3, [pc, #156]	@ (8005fd8 <update_homing_sequence+0x580>)
 8005f3c:	2208      	movs	r2, #8
 8005f3e:	701a      	strb	r2, [r3, #0]
			prox_count = 0; // Reset prox counter for next stage
 8005f40:	4b28      	ldr	r3, [pc, #160]	@ (8005fe4 <update_homing_sequence+0x58c>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	601a      	str	r2, [r3, #0]
			rev_to_zero_trajectory_started = false; // Reset for next time
 8005f46:	4b28      	ldr	r3, [pc, #160]	@ (8005fe8 <update_homing_sequence+0x590>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005f4c:	e106      	b.n	800615c <update_homing_sequence+0x704>

	case HOMING_DELAY_AFTER_ZERO_DEG:
		// Stop motors and wait - let normal control handle this
		motion_delay_timer++;
 8005f4e:	4b21      	ldr	r3, [pc, #132]	@ (8005fd4 <update_homing_sequence+0x57c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3301      	adds	r3, #1
 8005f54:	4a1f      	ldr	r2, [pc, #124]	@ (8005fd4 <update_homing_sequence+0x57c>)
 8005f56:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005f58:	4b1e      	ldr	r3, [pc, #120]	@ (8005fd4 <update_homing_sequence+0x57c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005f60:	f0c0 80fe 	bcc.w	8006160 <update_homing_sequence+0x708>
			// CHECK IF PROX IS ALREADY DETECTED BEFORE STARTING SEARCH
			bool prox_detected = HAL_GPIO_ReadPin(prox_GPIO_Port, prox_Pin);
 8005f64:	2120      	movs	r1, #32
 8005f66:	481e      	ldr	r0, [pc, #120]	@ (8005fe0 <update_homing_sequence+0x588>)
 8005f68:	f007 f8d4 	bl	800d114 <HAL_GPIO_ReadPin>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	bf14      	ite	ne
 8005f72:	2301      	movne	r3, #1
 8005f74:	2300      	moveq	r3, #0
 8005f76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			if (prox_detected) {
 8005f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d009      	beq.n	8005f96 <update_homing_sequence+0x53e>
				// Already at proximity sensor - skip search and go directly to completion
				motion_delay_timer = 0;
 8005f82:	4b14      	ldr	r3, [pc, #80]	@ (8005fd4 <update_homing_sequence+0x57c>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_PROX;
 8005f88:	4b13      	ldr	r3, [pc, #76]	@ (8005fd8 <update_homing_sequence+0x580>)
 8005f8a:	220a      	movs	r2, #10
 8005f8c:	701a      	strb	r2, [r3, #0]
				prox_count = 1; // Set count to indicate prox found
 8005f8e:	4b15      	ldr	r3, [pc, #84]	@ (8005fe4 <update_homing_sequence+0x58c>)
 8005f90:	2201      	movs	r2, #1
 8005f92:	601a      	str	r2, [r3, #0]
				// Not at prox - need to search for it
				homing_state = HOMING_REV_CW_TO_PROX1;
				prox_count = 0; // Reset counter for search
			}
		}
		break;
 8005f94:	e0e4      	b.n	8006160 <update_homing_sequence+0x708>
				homing_state = HOMING_REV_CW_TO_PROX1;
 8005f96:	4b10      	ldr	r3, [pc, #64]	@ (8005fd8 <update_homing_sequence+0x580>)
 8005f98:	2209      	movs	r2, #9
 8005f9a:	701a      	strb	r2, [r3, #0]
				prox_count = 0; // Reset counter for search
 8005f9c:	4b11      	ldr	r3, [pc, #68]	@ (8005fe4 <update_homing_sequence+0x58c>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	601a      	str	r2, [r3, #0]
		break;
 8005fa2:	e0dd      	b.n	8006160 <update_homing_sequence+0x708>
 8005fa4:	200006fc 	.word	0x200006fc
 8005fa8:	c37a0000 	.word	0xc37a0000
 8005fac:	20000a5c 	.word	0x20000a5c
 8005fb0:	20000080 	.word	0x20000080
 8005fb4:	20000afc 	.word	0x20000afc
 8005fb8:	200009d8 	.word	0x200009d8
 8005fbc:	2000097c 	.word	0x2000097c
 8005fc0:	447a0000 	.word	0x447a0000
 8005fc4:	00000000 	.word	0x00000000
 8005fc8:	20000b00 	.word	0x20000b00
 8005fcc:	200007e0 	.word	0x200007e0
 8005fd0:	20000740 	.word	0x20000740
 8005fd4:	200007d8 	.word	0x200007d8
 8005fd8:	200007e2 	.word	0x200007e2
 8005fdc:	20000333 	.word	0x20000333
 8005fe0:	48000400 	.word	0x48000400
 8005fe4:	200007dc 	.word	0x200007dc
 8005fe8:	200007ee 	.word	0x200007ee
 8005fec:	43340000 	.word	0x43340000
 8005ff0:	40490fdb 	.word	0x40490fdb
 8005ff4:	20000864 	.word	0x20000864
 8005ff8:	200007f8 	.word	0x200007f8
 8005ffc:	20000784 	.word	0x20000784

	case HOMING_REV_CW_TO_PROX1:
		// Move revolute clockwise with velocity control until prox count = 1
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
				- revolute_axis.kalman_velocity;
 8006000:	4b5d      	ldr	r3, [pc, #372]	@ (8006178 <update_homing_sequence+0x720>)
 8006002:	edd3 7a07 	vldr	s15, [r3, #28]
 8006006:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800600a:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
 800600e:	4b5a      	ldr	r3, [pc, #360]	@ (8006178 <update_homing_sequence+0x720>)
 8006010:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 8006014:	4b58      	ldr	r3, [pc, #352]	@ (8006178 <update_homing_sequence+0x720>)
 8006016:	edd3 7a06 	vldr	s15, [r3, #24]
 800601a:	eeb0 0a67 	vmov.f32	s0, s15
 800601e:	4857      	ldr	r0, [pc, #348]	@ (800617c <update_homing_sequence+0x724>)
 8006020:	f7fb f8fa 	bl	8001218 <PID_CONTROLLER_Compute>
 8006024:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 8006028:	4b55      	ldr	r3, [pc, #340]	@ (8006180 <update_homing_sequence+0x728>)
 800602a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 800602e:	4610      	mov	r0, r2
 8006030:	4619      	mov	r1, r3
 8006032:	f7fa fd47 	bl	8000ac4 <__aeabi_d2iz>
 8006036:	4606      	mov	r6, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8006038:	4b51      	ldr	r3, [pc, #324]	@ (8006180 <update_homing_sequence+0x728>)
 800603a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800603e:	4690      	mov	r8, r2
 8006040:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(
 8006044:	4640      	mov	r0, r8
 8006046:	4649      	mov	r1, r9
 8006048:	f7fa fd3c 	bl	8000ac4 <__aeabi_d2iz>
 800604c:	4603      	mov	r3, r0
 800604e:	4619      	mov	r1, r3
 8006050:	4630      	mov	r0, r6
 8006052:	eeb0 0a48 	vmov.f32	s0, s16
 8006056:	f7fb f87d 	bl	8001154 <PWM_Satuation>
 800605a:	ee07 0a90 	vmov	s15, r0
 800605e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006062:	4b45      	ldr	r3, [pc, #276]	@ (8006178 <update_homing_sequence+0x720>)
 8006064:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8006068:	eeb8 0a00 	vmov.f32	s0, #128	@ 0xc0000000 -2.0
 800606c:	4845      	ldr	r0, [pc, #276]	@ (8006184 <update_homing_sequence+0x72c>)
 800606e:	f7fb fa71 	bl	8001554 <REVOLUTE_MOTOR_FFD_Compute>
 8006072:	eef0 7a40 	vmov.f32	s15, s0
 8006076:	4b40      	ldr	r3, [pc, #256]	@ (8006178 <update_homing_sequence+0x720>)
 8006078:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_REV_VELOCITY);
		revolute_axis.dfd = 0.0;
 800607c:	4b3e      	ldr	r3, [pc, #248]	@ (8006178 <update_homing_sequence+0x720>)
 800607e:	f04f 0200 	mov.w	r2, #0
 8006082:	62da      	str	r2, [r3, #44]	@ 0x2c

		revolute_axis.command_pos += revolute_axis.ffd;
 8006084:	4b3c      	ldr	r3, [pc, #240]	@ (8006178 <update_homing_sequence+0x720>)
 8006086:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800608a:	4b3b      	ldr	r3, [pc, #236]	@ (8006178 <update_homing_sequence+0x720>)
 800608c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8006090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006094:	4b38      	ldr	r3, [pc, #224]	@ (8006178 <update_homing_sequence+0x720>)
 8006096:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 800609a:	4b37      	ldr	r3, [pc, #220]	@ (8006178 <update_homing_sequence+0x720>)
 800609c:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_150RPM_Constant.U_max,
 80060a0:	4b37      	ldr	r3, [pc, #220]	@ (8006180 <update_homing_sequence+0x728>)
 80060a2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80060a6:	4610      	mov	r0, r2
 80060a8:	4619      	mov	r1, r3
 80060aa:	f7fa fd0b 	bl	8000ac4 <__aeabi_d2iz>
 80060ae:	4606      	mov	r6, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 80060b0:	4b33      	ldr	r3, [pc, #204]	@ (8006180 <update_homing_sequence+0x728>)
 80060b2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80060b6:	4614      	mov	r4, r2
 80060b8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80060bc:	4620      	mov	r0, r4
 80060be:	4629      	mov	r1, r5
 80060c0:	f7fa fd00 	bl	8000ac4 <__aeabi_d2iz>
 80060c4:	4603      	mov	r3, r0
 80060c6:	4619      	mov	r1, r3
 80060c8:	4630      	mov	r0, r6
 80060ca:	eeb0 0a48 	vmov.f32	s0, s16
 80060ce:	f7fb f841 	bl	8001154 <PWM_Satuation>
 80060d2:	ee07 0a90 	vmov	s15, r0
 80060d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060da:	4b27      	ldr	r3, [pc, #156]	@ (8006178 <update_homing_sequence+0x720>)
 80060dc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (prox_count >= 1) {
 80060e0:	4b29      	ldr	r3, [pc, #164]	@ (8006188 <update_homing_sequence+0x730>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d03d      	beq.n	8006164 <update_homing_sequence+0x70c>
			// Found prox sensor, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 80060e8:	4b28      	ldr	r3, [pc, #160]	@ (800618c <update_homing_sequence+0x734>)
 80060ea:	f04f 0200 	mov.w	r2, #0
 80060ee:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 80060f0:	4b21      	ldr	r3, [pc, #132]	@ (8006178 <update_homing_sequence+0x720>)
 80060f2:	f04f 0200 	mov.w	r2, #0
 80060f6:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 80060f8:	4b25      	ldr	r3, [pc, #148]	@ (8006190 <update_homing_sequence+0x738>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_PROX;
 80060fe:	4b25      	ldr	r3, [pc, #148]	@ (8006194 <update_homing_sequence+0x73c>)
 8006100:	220a      	movs	r2, #10
 8006102:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006104:	e02e      	b.n	8006164 <update_homing_sequence+0x70c>

	case HOMING_DELAY_AFTER_PROX:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8006106:	4b21      	ldr	r3, [pc, #132]	@ (800618c <update_homing_sequence+0x734>)
 8006108:	f04f 0200 	mov.w	r2, #0
 800610c:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 800610e:	4b1a      	ldr	r3, [pc, #104]	@ (8006178 <update_homing_sequence+0x720>)
 8006110:	f04f 0200 	mov.w	r2, #0
 8006114:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8006116:	4b1e      	ldr	r3, [pc, #120]	@ (8006190 <update_homing_sequence+0x738>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3301      	adds	r3, #1
 800611c:	4a1c      	ldr	r2, [pc, #112]	@ (8006190 <update_homing_sequence+0x738>)
 800611e:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8006120:	4b1b      	ldr	r3, [pc, #108]	@ (8006190 <update_homing_sequence+0x738>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006128:	d31e      	bcc.n	8006168 <update_homing_sequence+0x710>
			homing_state = HOMING_COMPLETE;
 800612a:	4b1a      	ldr	r3, [pc, #104]	@ (8006194 <update_homing_sequence+0x73c>)
 800612c:	220b      	movs	r2, #11
 800612e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006130:	e01a      	b.n	8006168 <update_homing_sequence+0x710>

	case HOMING_COMPLETE:
		check[5]++;
 8006132:	4b19      	ldr	r3, [pc, #100]	@ (8006198 <update_homing_sequence+0x740>)
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	3301      	adds	r3, #1
 8006138:	4a17      	ldr	r2, [pc, #92]	@ (8006198 <update_homing_sequence+0x740>)
 800613a:	6153      	str	r3, [r2, #20]
		NVIC_SystemReset();
 800613c:	f7ff fad4 	bl	80056e8 <__NVIC_SystemReset>
		return;
 8006140:	bf00      	nop
 8006142:	e012      	b.n	800616a <update_homing_sequence+0x712>
		break;

	case HOMING_IDLE:
	default:
		break;
 8006144:	bf00      	nop
 8006146:	e010      	b.n	800616a <update_homing_sequence+0x712>
		break;
 8006148:	bf00      	nop
 800614a:	e00e      	b.n	800616a <update_homing_sequence+0x712>
		break;
 800614c:	bf00      	nop
 800614e:	e00c      	b.n	800616a <update_homing_sequence+0x712>
		break;
 8006150:	bf00      	nop
 8006152:	e00a      	b.n	800616a <update_homing_sequence+0x712>
		break;
 8006154:	bf00      	nop
 8006156:	e008      	b.n	800616a <update_homing_sequence+0x712>
		break;
 8006158:	bf00      	nop
 800615a:	e006      	b.n	800616a <update_homing_sequence+0x712>
		break;
 800615c:	bf00      	nop
 800615e:	e004      	b.n	800616a <update_homing_sequence+0x712>
		break;
 8006160:	bf00      	nop
 8006162:	e002      	b.n	800616a <update_homing_sequence+0x712>
		break;
 8006164:	bf00      	nop
 8006166:	e000      	b.n	800616a <update_homing_sequence+0x712>
		break;
 8006168:	bf00      	nop
	}
}
 800616a:	372c      	adds	r7, #44	@ 0x2c
 800616c:	46bd      	mov	sp, r7
 800616e:	ecbd 8b02 	vpop	{d8}
 8006172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006176:	bf00      	nop
 8006178:	20000740 	.word	0x20000740
 800617c:	20000aac 	.word	0x20000aac
 8006180:	20000000 	.word	0x20000000
 8006184:	20000b08 	.word	0x20000b08
 8006188:	200007dc 	.word	0x200007dc
 800618c:	200006fc 	.word	0x200006fc
 8006190:	200007d8 	.word	0x200007d8
 8006194:	200007e2 	.word	0x200007e2
 8006198:	20000864 	.word	0x20000864

0800619c <normalize_angle>:

float normalize_angle(float angle_rad) {
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	ed87 0a01 	vstr	s0, [r7, #4]
	float result = fmodf(angle_rad, 2.0f * PI);
 80061a6:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80061e4 <normalize_angle+0x48>
 80061aa:	ed97 0a01 	vldr	s0, [r7, #4]
 80061ae:	f00c fee3 	bl	8012f78 <fmodf>
 80061b2:	ed87 0a03 	vstr	s0, [r7, #12]
	if (result < 0.0f) {
 80061b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80061ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c2:	d507      	bpl.n	80061d4 <normalize_angle+0x38>
		result += 2.0f * PI;
 80061c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80061c8:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80061e4 <normalize_angle+0x48>
 80061cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061d0:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return result;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	ee07 3a90 	vmov	s15, r3
}
 80061da:	eeb0 0a67 	vmov.f32	s0, s15
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	40c90fdb 	.word	0x40c90fdb

080061e8 <calculate_movement_deg>:

float calculate_movement_deg(float current_deg, float target_deg) {
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80061f2:	edc7 0a00 	vstr	s1, [r7]
	float movement = 0.0f;
 80061f6:	f04f 0300 	mov.w	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]

	// If both angles are on the same side of 180°
	if ((current_deg < 180.0f && target_deg < 180.0f)
 80061fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8006200:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8006364 <calculate_movement_deg+0x17c>
 8006204:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800620c:	d508      	bpl.n	8006220 <calculate_movement_deg+0x38>
 800620e:	edd7 7a00 	vldr	s15, [r7]
 8006212:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8006364 <calculate_movement_deg+0x17c>
 8006216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800621a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800621e:	d411      	bmi.n	8006244 <calculate_movement_deg+0x5c>
			|| (current_deg >= 180.0f && target_deg >= 180.0f)) {
 8006220:	edd7 7a01 	vldr	s15, [r7, #4]
 8006224:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8006364 <calculate_movement_deg+0x17c>
 8006228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800622c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006230:	db33      	blt.n	800629a <calculate_movement_deg+0xb2>
 8006232:	edd7 7a00 	vldr	s15, [r7]
 8006236:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8006364 <calculate_movement_deg+0x17c>
 800623a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800623e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006242:	db2a      	blt.n	800629a <calculate_movement_deg+0xb2>
		// Simple case - take shortest path
		movement = target_deg - current_deg;
 8006244:	ed97 7a00 	vldr	s14, [r7]
 8006248:	edd7 7a01 	vldr	s15, [r7, #4]
 800624c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006250:	edc7 7a03 	vstr	s15, [r7, #12]

		// Ensure shortest path
		if (movement > 180.0f)
 8006254:	edd7 7a03 	vldr	s15, [r7, #12]
 8006258:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006364 <calculate_movement_deg+0x17c>
 800625c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006264:	dd07      	ble.n	8006276 <calculate_movement_deg+0x8e>
			movement -= 360.0f;
 8006266:	edd7 7a03 	vldr	s15, [r7, #12]
 800626a:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006368 <calculate_movement_deg+0x180>
 800626e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006272:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8006276:	edd7 7a03 	vldr	s15, [r7, #12]
 800627a:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 800636c <calculate_movement_deg+0x184>
 800627e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006286:	d562      	bpl.n	800634e <calculate_movement_deg+0x166>
			movement += 360.0f;
 8006288:	edd7 7a03 	vldr	s15, [r7, #12]
 800628c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8006368 <calculate_movement_deg+0x180>
 8006290:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006294:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8006298:	e059      	b.n	800634e <calculate_movement_deg+0x166>
	}
	// If we need to cross the 180° boundary
	else {
		// If we need to cross the 180° boundary
		if (current_deg < 180.0f) {
 800629a:	edd7 7a01 	vldr	s15, [r7, #4]
 800629e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006364 <calculate_movement_deg+0x17c>
 80062a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062aa:	d52a      	bpl.n	8006302 <calculate_movement_deg+0x11a>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180.0f) {
 80062ac:	edd7 7a00 	vldr	s15, [r7]
 80062b0:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8006364 <calculate_movement_deg+0x17c>
 80062b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80062b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80062bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062c4:	d50e      	bpl.n	80062e4 <calculate_movement_deg+0xfc>
				movement = -(current_deg + (360.0f - target_deg)); // Negative = clockwise
 80062c6:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8006368 <calculate_movement_deg+0x180>
 80062ca:	edd7 7a00 	vldr	s15, [r7]
 80062ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80062d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062da:	eef1 7a67 	vneg.f32	s15, s15
 80062de:	edc7 7a03 	vstr	s15, [r7, #12]
 80062e2:	e034      	b.n	800634e <calculate_movement_deg+0x166>
			} else {
				movement = -(current_deg - target_deg + 360.0f); // Negative = clockwise
 80062e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80062e8:	edd7 7a00 	vldr	s15, [r7]
 80062ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062f0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006368 <calculate_movement_deg+0x180>
 80062f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062f8:	eef1 7a67 	vneg.f32	s15, s15
 80062fc:	edc7 7a03 	vstr	s15, [r7, #12]
 8006300:	e025      	b.n	800634e <calculate_movement_deg+0x166>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180.0f) {
 8006302:	edd7 7a01 	vldr	s15, [r7, #4]
 8006306:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8006364 <calculate_movement_deg+0x17c>
 800630a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800630e:	ed97 7a00 	vldr	s14, [r7]
 8006312:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800631a:	d50c      	bpl.n	8006336 <calculate_movement_deg+0x14e>
				movement = 360.0f - current_deg + target_deg; // Positive = counterclockwise
 800631c:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8006368 <calculate_movement_deg+0x180>
 8006320:	edd7 7a01 	vldr	s15, [r7, #4]
 8006324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006328:	ed97 7a00 	vldr	s14, [r7]
 800632c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006330:	edc7 7a03 	vstr	s15, [r7, #12]
 8006334:	e00b      	b.n	800634e <calculate_movement_deg+0x166>
			} else {
				movement = target_deg - current_deg + 360.0f; // Positive = counterclockwise
 8006336:	ed97 7a00 	vldr	s14, [r7]
 800633a:	edd7 7a01 	vldr	s15, [r7, #4]
 800633e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006342:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8006368 <calculate_movement_deg+0x180>
 8006346:	ee77 7a87 	vadd.f32	s15, s15, s14
 800634a:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}

	return movement;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	ee07 3a90 	vmov	s15, r3
}
 8006354:	eeb0 0a67 	vmov.f32	s0, s15
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	43340000 	.word	0x43340000
 8006368:	43b40000 	.word	0x43b40000
 800636c:	c3340000 	.word	0xc3340000

08006370 <start_combined_trajectory>:

void start_combined_trajectory(float prismatic_target_mm,
		float revolute_target_deg) {
 8006370:	b590      	push	{r4, r7, lr}
 8006372:	ed2d 8b02 	vpush	{d8}
 8006376:	b091      	sub	sp, #68	@ 0x44
 8006378:	af00      	add	r7, sp, #0
 800637a:	ed87 0a01 	vstr	s0, [r7, #4]
 800637e:	edc7 0a00 	vstr	s1, [r7]
	bool allow_during_homing = (homing_active
 8006382:	4b70      	ldr	r3, [pc, #448]	@ (8006544 <start_combined_trajectory+0x1d4>)
 8006384:	781b      	ldrb	r3, [r3, #0]
			&& homing_state == HOMING_REV_TO_ZERO_DEG);
 8006386:	2b00      	cmp	r3, #0
 8006388:	d005      	beq.n	8006396 <start_combined_trajectory+0x26>
 800638a:	4b6f      	ldr	r3, [pc, #444]	@ (8006548 <start_combined_trajectory+0x1d8>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	2b07      	cmp	r3, #7
 8006390:	d101      	bne.n	8006396 <start_combined_trajectory+0x26>
 8006392:	2301      	movs	r3, #1
 8006394:	e000      	b.n	8006398 <start_combined_trajectory+0x28>
 8006396:	2300      	movs	r3, #0
	bool allow_during_homing = (homing_active
 8006398:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800639c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (is_emergency_active() || (homing_active && !allow_during_homing)) {
 80063a8:	f001 f996 	bl	80076d8 <is_emergency_active>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f040 81f3 	bne.w	800679a <start_combined_trajectory+0x42a>
 80063b4:	4b63      	ldr	r3, [pc, #396]	@ (8006544 <start_combined_trajectory+0x1d4>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d007      	beq.n	80063cc <start_combined_trajectory+0x5c>
 80063bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80063c0:	f083 0301 	eor.w	r3, r3, #1
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f040 81e7 	bne.w	800679a <start_combined_trajectory+0x42a>
		return;
	}

	float pris_current = prismatic_encoder.mm;
 80063cc:	4b5f      	ldr	r3, [pc, #380]	@ (800654c <start_combined_trajectory+0x1dc>)
 80063ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063d0:	633b      	str	r3, [r7, #48]	@ 0x30
	float rev_current = revolute_encoder.rads;
 80063d2:	4b5f      	ldr	r3, [pc, #380]	@ (8006550 <start_combined_trajectory+0x1e0>)
 80063d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	prisEva.t = 0.0f;
 80063d8:	4b5e      	ldr	r3, [pc, #376]	@ (8006554 <start_combined_trajectory+0x1e4>)
 80063da:	f04f 0200 	mov.w	r2, #0
 80063de:	60da      	str	r2, [r3, #12]
	prisEva.isFinised = false;
 80063e0:	4b5c      	ldr	r3, [pc, #368]	@ (8006554 <start_combined_trajectory+0x1e4>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	741a      	strb	r2, [r3, #16]
	revEva.t = 0.0f;
 80063e6:	4b5c      	ldr	r3, [pc, #368]	@ (8006558 <start_combined_trajectory+0x1e8>)
 80063e8:	f04f 0200 	mov.w	r2, #0
 80063ec:	60da      	str	r2, [r3, #12]
	revEva.isFinised = false;
 80063ee:	4b5a      	ldr	r3, [pc, #360]	@ (8006558 <start_combined_trajectory+0x1e8>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	741a      	strb	r2, [r3, #16]

	prismatic_axis.initial_pos = pris_current;
 80063f4:	4a59      	ldr	r2, [pc, #356]	@ (800655c <start_combined_trajectory+0x1ec>)
 80063f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f8:	60d3      	str	r3, [r2, #12]
	revolute_axis.initial_pos = rev_current;
 80063fa:	4a59      	ldr	r2, [pc, #356]	@ (8006560 <start_combined_trajectory+0x1f0>)
 80063fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063fe:	60d3      	str	r3, [r2, #12]

	prismatic_axis.target_pos = fminf(
 8006400:	eddf 0a58 	vldr	s1, [pc, #352]	@ 8006564 <start_combined_trajectory+0x1f4>
 8006404:	ed97 0a01 	vldr	s0, [r7, #4]
 8006408:	f00c fe7e 	bl	8013108 <fmaxf>
 800640c:	eef0 7a40 	vmov.f32	s15, s0
 8006410:	eddf 0a55 	vldr	s1, [pc, #340]	@ 8006568 <start_combined_trajectory+0x1f8>
 8006414:	eeb0 0a67 	vmov.f32	s0, s15
 8006418:	f00c fe93 	bl	8013142 <fminf>
 800641c:	eef0 7a40 	vmov.f32	s15, s0
 8006420:	4b4e      	ldr	r3, [pc, #312]	@ (800655c <start_combined_trajectory+0x1ec>)
 8006422:	edc3 7a04 	vstr	s15, [r3, #16]
			fmaxf(prismatic_target_mm, PRISMATIC_MIN_POS), PRISMATIC_MAX_POS);

	float normalized_current = normalize_angle(rev_current);
 8006426:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 800642a:	f7ff feb7 	bl	800619c <normalize_angle>
 800642e:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
	float current_deg = normalized_current * 180.0f / PI;
 8006432:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006436:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800656c <start_combined_trajectory+0x1fc>
 800643a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800643e:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8006570 <start_combined_trajectory+0x200>
 8006442:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006446:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	movement_deg = calculate_movement_deg(current_deg, revolute_target_deg);
 800644a:	edd7 0a00 	vldr	s1, [r7]
 800644e:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8006452:	f7ff fec9 	bl	80061e8 <calculate_movement_deg>
 8006456:	eef0 7a40 	vmov.f32	s15, s0
 800645a:	4b46      	ldr	r3, [pc, #280]	@ (8006574 <start_combined_trajectory+0x204>)
 800645c:	edc3 7a00 	vstr	s15, [r3]
	float movement_rad = movement_deg * PI / 180.0f;
 8006460:	4b44      	ldr	r3, [pc, #272]	@ (8006574 <start_combined_trajectory+0x204>)
 8006462:	edd3 7a00 	vldr	s15, [r3]
 8006466:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006570 <start_combined_trajectory+0x200>
 800646a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800646e:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 800656c <start_combined_trajectory+0x1fc>
 8006472:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006476:	edc7 7a08 	vstr	s15, [r7, #32]
	revolute_axis.target_pos = revolute_axis.initial_pos + movement_rad;
 800647a:	4b39      	ldr	r3, [pc, #228]	@ (8006560 <start_combined_trajectory+0x1f0>)
 800647c:	ed93 7a03 	vldr	s14, [r3, #12]
 8006480:	edd7 7a08 	vldr	s15, [r7, #32]
 8006484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006488:	4b35      	ldr	r3, [pc, #212]	@ (8006560 <start_combined_trajectory+0x1f0>)
 800648a:	edc3 7a04 	vstr	s15, [r3, #16]

	// Check if we're in HOMING_REV_TO_ZERO_DEG mode
	bool is_homing_zero_deg = (homing_active
 800648e:	4b2d      	ldr	r3, [pc, #180]	@ (8006544 <start_combined_trajectory+0x1d4>)
 8006490:	781b      	ldrb	r3, [r3, #0]
			&& homing_state == HOMING_REV_TO_ZERO_DEG);
 8006492:	2b00      	cmp	r3, #0
 8006494:	d005      	beq.n	80064a2 <start_combined_trajectory+0x132>
 8006496:	4b2c      	ldr	r3, [pc, #176]	@ (8006548 <start_combined_trajectory+0x1d8>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	2b07      	cmp	r3, #7
 800649c:	d101      	bne.n	80064a2 <start_combined_trajectory+0x132>
 800649e:	2301      	movs	r3, #1
 80064a0:	e000      	b.n	80064a4 <start_combined_trajectory+0x134>
 80064a2:	2300      	movs	r3, #0
	bool is_homing_zero_deg = (homing_active
 80064a4:	77fb      	strb	r3, [r7, #31]
 80064a6:	7ffb      	ldrb	r3, [r7, #31]
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	77fb      	strb	r3, [r7, #31]

	if (is_homing_zero_deg) {
 80064ae:	7ffb      	ldrb	r3, [r7, #31]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d06f      	beq.n	8006594 <start_combined_trajectory+0x224>
		// HOMING_REV_TO_ZERO_DEG: Only generate revolute trajectory

		check[2]++;
 80064b4:	4b30      	ldr	r3, [pc, #192]	@ (8006578 <start_combined_trajectory+0x208>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	3301      	adds	r3, #1
 80064ba:	4a2f      	ldr	r2, [pc, #188]	@ (8006578 <start_combined_trajectory+0x208>)
 80064bc:	6093      	str	r3, [r2, #8]

		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80064be:	4b28      	ldr	r3, [pc, #160]	@ (8006560 <start_combined_trajectory+0x1f0>)
 80064c0:	ed93 8a03 	vldr	s16, [r3, #12]
 80064c4:	4b26      	ldr	r3, [pc, #152]	@ (8006560 <start_combined_trajectory+0x1f0>)
 80064c6:	edd3 8a04 	vldr	s17, [r3, #16]
				revolute_axis.target_pos,
				ZGX45RGG_150RPM_Constant.traject_qd_max,
 80064ca:	4b2c      	ldr	r3, [pc, #176]	@ (800657c <start_combined_trajectory+0x20c>)
 80064cc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80064d0:	4610      	mov	r0, r2
 80064d2:	4619      	mov	r1, r3
 80064d4:	f7fa fb3e 	bl	8000b54 <__aeabi_d2f>
 80064d8:	4604      	mov	r4, r0
				ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80064da:	4b28      	ldr	r3, [pc, #160]	@ (800657c <start_combined_trajectory+0x20c>)
 80064dc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80064e0:	4610      	mov	r0, r2
 80064e2:	4619      	mov	r1, r3
 80064e4:	f7fa fb36 	bl	8000b54 <__aeabi_d2f>
 80064e8:	4603      	mov	r3, r0
 80064ea:	ee01 3a90 	vmov	s3, r3
 80064ee:	ee01 4a10 	vmov	s2, r4
 80064f2:	eef0 0a68 	vmov.f32	s1, s17
 80064f6:	eeb0 0a48 	vmov.f32	s0, s16
 80064fa:	4821      	ldr	r0, [pc, #132]	@ (8006580 <start_combined_trajectory+0x210>)
 80064fc:	f7fd ff0a 	bl	8004314 <Trapezoidal_Generator>

		sync_motion_active = false;
 8006500:	4b20      	ldr	r3, [pc, #128]	@ (8006584 <start_combined_trajectory+0x214>)
 8006502:	2200      	movs	r2, #0
 8006504:	701a      	strb	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 8006506:	4b15      	ldr	r3, [pc, #84]	@ (800655c <start_combined_trajectory+0x1ec>)
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		prismatic_axis.position = pris_current;
 800650e:	4a13      	ldr	r2, [pc, #76]	@ (800655c <start_combined_trajectory+0x1ec>)
 8006510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006512:	6013      	str	r3, [r2, #0]
		prismatic_axis.velocity = 0.0f;
 8006514:	4b11      	ldr	r3, [pc, #68]	@ (800655c <start_combined_trajectory+0x1ec>)
 8006516:	f04f 0200 	mov.w	r2, #0
 800651a:	605a      	str	r2, [r3, #4]

		revolute_axis.trajectory_active = true;
 800651c:	4b10      	ldr	r3, [pc, #64]	@ (8006560 <start_combined_trajectory+0x1f0>)
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		if (!current_drawing_sequence.sequence_active) {
 8006524:	4b18      	ldr	r3, [pc, #96]	@ (8006588 <start_combined_trajectory+0x218>)
 8006526:	799b      	ldrb	r3, [r3, #6]
 8006528:	f083 0301 	eor.w	r3, r3, #1
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <start_combined_trajectory+0x1c6>
			plotter_pen_up();
 8006532:	f003 faa7 	bl	8009a84 <plotter_pen_up>
		}

		motion_delay_timer = 0;
 8006536:	4b15      	ldr	r3, [pc, #84]	@ (800658c <start_combined_trajectory+0x21c>)
 8006538:	2200      	movs	r2, #0
 800653a:	601a      	str	r2, [r3, #0]
		motion_sequence_state = MOTION_PEN_UP_DELAY;
 800653c:	4b14      	ldr	r3, [pc, #80]	@ (8006590 <start_combined_trajectory+0x220>)
 800653e:	2201      	movs	r2, #1
 8006540:	701a      	strb	r2, [r3, #0]
 8006542:	e12b      	b.n	800679c <start_combined_trajectory+0x42c>
 8006544:	200007e3 	.word	0x200007e3
 8006548:	200007e2 	.word	0x200007e2
 800654c:	2000097c 	.word	0x2000097c
 8006550:	200009d8 	.word	0x200009d8
 8006554:	200007b0 	.word	0x200007b0
 8006558:	200007c4 	.word	0x200007c4
 800655c:	200006fc 	.word	0x200006fc
 8006560:	20000740 	.word	0x20000740
 8006564:	00000000 	.word	0x00000000
 8006568:	43960000 	.word	0x43960000
 800656c:	43340000 	.word	0x43340000
 8006570:	40490fdb 	.word	0x40490fdb
 8006574:	200007f8 	.word	0x200007f8
 8006578:	20000864 	.word	0x20000864
 800657c:	20000000 	.word	0x20000000
 8006580:	2000079c 	.word	0x2000079c
 8006584:	200008a4 	.word	0x200008a4
 8006588:	200008a8 	.word	0x200008a8
 800658c:	200007d8 	.word	0x200007d8
 8006590:	20000784 	.word	0x20000784

	} else {
		// NORMAL TRAJECTORY: Use time-synchronized motion
		check[3]++;
 8006594:	4b84      	ldr	r3, [pc, #528]	@ (80067a8 <start_combined_trajectory+0x438>)
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	3301      	adds	r3, #1
 800659a:	4a83      	ldr	r2, [pc, #524]	@ (80067a8 <start_combined_trajectory+0x438>)
 800659c:	60d3      	str	r3, [r2, #12]
		// Calculate distances
		float pris_distance = fabsf(
				prismatic_axis.target_pos - prismatic_axis.initial_pos);
 800659e:	4b83      	ldr	r3, [pc, #524]	@ (80067ac <start_combined_trajectory+0x43c>)
 80065a0:	ed93 7a04 	vldr	s14, [r3, #16]
 80065a4:	4b81      	ldr	r3, [pc, #516]	@ (80067ac <start_combined_trajectory+0x43c>)
 80065a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80065aa:	ee77 7a67 	vsub.f32	s15, s14, s15
		float pris_distance = fabsf(
 80065ae:	eef0 7ae7 	vabs.f32	s15, s15
 80065b2:	edc7 7a06 	vstr	s15, [r7, #24]
		float rev_distance = fabsf(
				revolute_axis.target_pos - revolute_axis.initial_pos);
 80065b6:	4b7e      	ldr	r3, [pc, #504]	@ (80067b0 <start_combined_trajectory+0x440>)
 80065b8:	ed93 7a04 	vldr	s14, [r3, #16]
 80065bc:	4b7c      	ldr	r3, [pc, #496]	@ (80067b0 <start_combined_trajectory+0x440>)
 80065be:	edd3 7a03 	vldr	s15, [r3, #12]
 80065c2:	ee77 7a67 	vsub.f32	s15, s14, s15
		float rev_distance = fabsf(
 80065c6:	eef0 7ae7 	vabs.f32	s15, s15
 80065ca:	edc7 7a05 	vstr	s15, [r7, #20]

		// Calculate time needed for each axis at their max speeds
		float pris_time_needed = 0.0f;
 80065ce:	f04f 0300 	mov.w	r3, #0
 80065d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		float rev_time_needed = 0.0f;
 80065d4:	f04f 0300 	mov.w	r3, #0
 80065d8:	63bb      	str	r3, [r7, #56]	@ 0x38

		if (pris_distance > 0.1f) {
 80065da:	edd7 7a06 	vldr	s15, [r7, #24]
 80065de:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80067b4 <start_combined_trajectory+0x444>
 80065e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ea:	dd18      	ble.n	800661e <start_combined_trajectory+0x2ae>
			// Time = distance / max_velocity, factor in acceleration/deceleration
			pris_time_needed = (pris_distance
					/ ZGX45RGG_400RPM_Constant.traject_sd_max) * 2.5f;
 80065ec:	69b8      	ldr	r0, [r7, #24]
 80065ee:	f7f9 ff77 	bl	80004e0 <__aeabi_f2d>
 80065f2:	4b71      	ldr	r3, [pc, #452]	@ (80067b8 <start_combined_trajectory+0x448>)
 80065f4:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80065f8:	f7fa f8f4 	bl	80007e4 <__aeabi_ddiv>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4610      	mov	r0, r2
 8006602:	4619      	mov	r1, r3
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	4b6c      	ldr	r3, [pc, #432]	@ (80067bc <start_combined_trajectory+0x44c>)
 800660a:	f7f9 ffc1 	bl	8000590 <__aeabi_dmul>
 800660e:	4602      	mov	r2, r0
 8006610:	460b      	mov	r3, r1
			pris_time_needed = (pris_distance
 8006612:	4610      	mov	r0, r2
 8006614:	4619      	mov	r1, r3
 8006616:	f7fa fa9d 	bl	8000b54 <__aeabi_d2f>
 800661a:	4603      	mov	r3, r0
 800661c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}

		if (rev_distance > 0.01f) {
 800661e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006622:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80067c0 <start_combined_trajectory+0x450>
 8006626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800662a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800662e:	dd18      	ble.n	8006662 <start_combined_trajectory+0x2f2>
			rev_time_needed = (rev_distance
					/ ZGX45RGG_150RPM_Constant.traject_qd_max) * 2.5f;
 8006630:	6978      	ldr	r0, [r7, #20]
 8006632:	f7f9 ff55 	bl	80004e0 <__aeabi_f2d>
 8006636:	4b63      	ldr	r3, [pc, #396]	@ (80067c4 <start_combined_trajectory+0x454>)
 8006638:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800663c:	f7fa f8d2 	bl	80007e4 <__aeabi_ddiv>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	4610      	mov	r0, r2
 8006646:	4619      	mov	r1, r3
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	4b5b      	ldr	r3, [pc, #364]	@ (80067bc <start_combined_trajectory+0x44c>)
 800664e:	f7f9 ff9f 	bl	8000590 <__aeabi_dmul>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
			rev_time_needed = (rev_distance
 8006656:	4610      	mov	r0, r2
 8006658:	4619      	mov	r1, r3
 800665a:	f7fa fa7b 	bl	8000b54 <__aeabi_d2f>
 800665e:	4603      	mov	r3, r0
 8006660:	63bb      	str	r3, [r7, #56]	@ 0x38
		}

		// Use the longer time, with minimum time
		sync_total_time = fmaxf(pris_time_needed, rev_time_needed);
 8006662:	edd7 0a0e 	vldr	s1, [r7, #56]	@ 0x38
 8006666:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 800666a:	f00c fd4d 	bl	8013108 <fmaxf>
 800666e:	eef0 7a40 	vmov.f32	s15, s0
 8006672:	4b55      	ldr	r3, [pc, #340]	@ (80067c8 <start_combined_trajectory+0x458>)
 8006674:	edc3 7a00 	vstr	s15, [r3]
		if (sync_total_time < 1.0f)
 8006678:	4b53      	ldr	r3, [pc, #332]	@ (80067c8 <start_combined_trajectory+0x458>)
 800667a:	edd3 7a00 	vldr	s15, [r3]
 800667e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006682:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800668a:	d503      	bpl.n	8006694 <start_combined_trajectory+0x324>
			sync_total_time = 1.0f; // Minimum 1 second
 800668c:	4b4e      	ldr	r3, [pc, #312]	@ (80067c8 <start_combined_trajectory+0x458>)
 800668e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006692:	601a      	str	r2, [r3, #0]

		// Generate individual trajectories (we'll interpolate based on sync_total_time)
		Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8006694:	4b45      	ldr	r3, [pc, #276]	@ (80067ac <start_combined_trajectory+0x43c>)
 8006696:	ed93 8a03 	vldr	s16, [r3, #12]
 800669a:	4b44      	ldr	r3, [pc, #272]	@ (80067ac <start_combined_trajectory+0x43c>)
 800669c:	edd3 8a04 	vldr	s17, [r3, #16]
				prismatic_axis.target_pos,
				ZGX45RGG_400RPM_Constant.traject_sd_max,
 80066a0:	4b45      	ldr	r3, [pc, #276]	@ (80067b8 <start_combined_trajectory+0x448>)
 80066a2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
		Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 80066a6:	4610      	mov	r0, r2
 80066a8:	4619      	mov	r1, r3
 80066aa:	f7fa fa53 	bl	8000b54 <__aeabi_d2f>
 80066ae:	4604      	mov	r4, r0
				ZGX45RGG_400RPM_Constant.traject_sdd_max);
 80066b0:	4b41      	ldr	r3, [pc, #260]	@ (80067b8 <start_combined_trajectory+0x448>)
 80066b2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
		Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 80066b6:	4610      	mov	r0, r2
 80066b8:	4619      	mov	r1, r3
 80066ba:	f7fa fa4b 	bl	8000b54 <__aeabi_d2f>
 80066be:	4603      	mov	r3, r0
 80066c0:	ee01 3a90 	vmov	s3, r3
 80066c4:	ee01 4a10 	vmov	s2, r4
 80066c8:	eef0 0a68 	vmov.f32	s1, s17
 80066cc:	eeb0 0a48 	vmov.f32	s0, s16
 80066d0:	483e      	ldr	r0, [pc, #248]	@ (80067cc <start_combined_trajectory+0x45c>)
 80066d2:	f7fd fe1f 	bl	8004314 <Trapezoidal_Generator>

		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80066d6:	4b36      	ldr	r3, [pc, #216]	@ (80067b0 <start_combined_trajectory+0x440>)
 80066d8:	ed93 8a03 	vldr	s16, [r3, #12]
 80066dc:	4b34      	ldr	r3, [pc, #208]	@ (80067b0 <start_combined_trajectory+0x440>)
 80066de:	edd3 8a04 	vldr	s17, [r3, #16]
				revolute_axis.target_pos,
				ZGX45RGG_150RPM_Constant.traject_qd_max,
 80066e2:	4b38      	ldr	r3, [pc, #224]	@ (80067c4 <start_combined_trajectory+0x454>)
 80066e4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80066e8:	4610      	mov	r0, r2
 80066ea:	4619      	mov	r1, r3
 80066ec:	f7fa fa32 	bl	8000b54 <__aeabi_d2f>
 80066f0:	4604      	mov	r4, r0
				ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80066f2:	4b34      	ldr	r3, [pc, #208]	@ (80067c4 <start_combined_trajectory+0x454>)
 80066f4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80066f8:	4610      	mov	r0, r2
 80066fa:	4619      	mov	r1, r3
 80066fc:	f7fa fa2a 	bl	8000b54 <__aeabi_d2f>
 8006700:	4603      	mov	r3, r0
 8006702:	ee01 3a90 	vmov	s3, r3
 8006706:	ee01 4a10 	vmov	s2, r4
 800670a:	eef0 0a68 	vmov.f32	s1, s17
 800670e:	eeb0 0a48 	vmov.f32	s0, s16
 8006712:	482f      	ldr	r0, [pc, #188]	@ (80067d0 <start_combined_trajectory+0x460>)
 8006714:	f7fd fdfe 	bl	8004314 <Trapezoidal_Generator>

		// Initialize synchronized motion
		sync_motion_active = true;
 8006718:	4b2e      	ldr	r3, [pc, #184]	@ (80067d4 <start_combined_trajectory+0x464>)
 800671a:	2201      	movs	r2, #1
 800671c:	701a      	strb	r2, [r3, #0]
		sync_start_time = 0.0f;
 800671e:	4b2e      	ldr	r3, [pc, #184]	@ (80067d8 <start_combined_trajectory+0x468>)
 8006720:	f04f 0200 	mov.w	r2, #0
 8006724:	601a      	str	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 8006726:	4b21      	ldr	r3, [pc, #132]	@ (80067ac <start_combined_trajectory+0x43c>)
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		revolute_axis.trajectory_active = false;
 800672e:	4b20      	ldr	r3, [pc, #128]	@ (80067b0 <start_combined_trajectory+0x440>)
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		if (current_drawing_sequence.sequence_active
 8006736:	4b29      	ldr	r3, [pc, #164]	@ (80067dc <start_combined_trajectory+0x46c>)
 8006738:	799b      	ldrb	r3, [r3, #6]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d01c      	beq.n	8006778 <start_combined_trajectory+0x408>
				&& current_drawing_sequence.current_point > 0) {
 800673e:	4b27      	ldr	r3, [pc, #156]	@ (80067dc <start_combined_trajectory+0x46c>)
 8006740:	795b      	ldrb	r3, [r3, #5]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d018      	beq.n	8006778 <start_combined_trajectory+0x408>
			// ดูว่าจุดปัจจุบันต้องการวางปากกาหรือไม่
			DrawingPoint_t current =
					current_drawing_sequence.points[current_drawing_sequence.current_point
 8006746:	4b25      	ldr	r3, [pc, #148]	@ (80067dc <start_combined_trajectory+0x46c>)
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	4b24      	ldr	r3, [pc, #144]	@ (80067dc <start_combined_trajectory+0x46c>)
 800674c:	795b      	ldrb	r3, [r3, #5]
 800674e:	4619      	mov	r1, r3
 8006750:	460b      	mov	r3, r1
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	440b      	add	r3, r1
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	3b0c      	subs	r3, #12
 800675a:	441a      	add	r2, r3
			DrawingPoint_t current =
 800675c:	f107 0308 	add.w	r3, r7, #8
 8006760:	ca07      	ldmia	r2, {r0, r1, r2}
 8006762:	e883 0007 	stmia.w	r3, {r0, r1, r2}
							- 1];

			// ถ้าต้องการวางปากกา ก็ไม่ต้องยกขึ้น
			if (!current.pen_down) {
 8006766:	7c3b      	ldrb	r3, [r7, #16]
 8006768:	f083 0301 	eor.w	r3, r3, #1
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d005      	beq.n	800677e <start_combined_trajectory+0x40e>
				plotter_pen_up();
 8006772:	f003 f987 	bl	8009a84 <plotter_pen_up>
				&& current_drawing_sequence.current_point > 0) {
 8006776:	e002      	b.n	800677e <start_combined_trajectory+0x40e>
			}
		} else {
			// ไม่ได้วาดตัวอักษร - ยกปากกาตามปกติ
			plotter_pen_up();
 8006778:	f003 f984 	bl	8009a84 <plotter_pen_up>
 800677c:	e000      	b.n	8006780 <start_combined_trajectory+0x410>
				&& current_drawing_sequence.current_point > 0) {
 800677e:	bf00      	nop
		}
		motion_delay_timer = 0;
 8006780:	4b17      	ldr	r3, [pc, #92]	@ (80067e0 <start_combined_trajectory+0x470>)
 8006782:	2200      	movs	r2, #0
 8006784:	601a      	str	r2, [r3, #0]
		motion_sequence_state = MOTION_PEN_UP_DELAY;
 8006786:	4b17      	ldr	r3, [pc, #92]	@ (80067e4 <start_combined_trajectory+0x474>)
 8006788:	2201      	movs	r2, #1
 800678a:	701a      	strb	r2, [r3, #0]

		//modbus reset state
		registerFrame[BaseSystem_Status].U16 = 0;
 800678c:	4b16      	ldr	r3, [pc, #88]	@ (80067e8 <start_combined_trajectory+0x478>)
 800678e:	2200      	movs	r2, #0
 8006790:	805a      	strh	r2, [r3, #2]
		registerFrame[R_Theta_Status].U16 = 0;
 8006792:	4b15      	ldr	r3, [pc, #84]	@ (80067e8 <start_combined_trajectory+0x478>)
 8006794:	2200      	movs	r2, #0
 8006796:	841a      	strh	r2, [r3, #32]
 8006798:	e000      	b.n	800679c <start_combined_trajectory+0x42c>
		return;
 800679a:	bf00      	nop
	}
}
 800679c:	3744      	adds	r7, #68	@ 0x44
 800679e:	46bd      	mov	sp, r7
 80067a0:	ecbd 8b02 	vpop	{d8}
 80067a4:	bd90      	pop	{r4, r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20000864 	.word	0x20000864
 80067ac:	200006fc 	.word	0x200006fc
 80067b0:	20000740 	.word	0x20000740
 80067b4:	3dcccccd 	.word	0x3dcccccd
 80067b8:	20000080 	.word	0x20000080
 80067bc:	40040000 	.word	0x40040000
 80067c0:	3c23d70a 	.word	0x3c23d70a
 80067c4:	20000000 	.word	0x20000000
 80067c8:	200008a0 	.word	0x200008a0
 80067cc:	20000788 	.word	0x20000788
 80067d0:	2000079c 	.word	0x2000079c
 80067d4:	200008a4 	.word	0x200008a4
 80067d8:	2000089c 	.word	0x2000089c
 80067dc:	200008a8 	.word	0x200008a8
 80067e0:	200007d8 	.word	0x200007d8
 80067e4:	20000784 	.word	0x20000784
 80067e8:	20001580 	.word	0x20001580

080067ec <update_position_control>:
void update_position_control(void) {
 80067ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067f0:	ed2d 8b02 	vpush	{d8}
 80067f4:	b083      	sub	sp, #12
 80067f6:	af00      	add	r7, sp, #0
	prismatic_axis.pos_error = prismatic_axis.position - prismatic_encoder.mm;
 80067f8:	4b50      	ldr	r3, [pc, #320]	@ (800693c <update_position_control+0x150>)
 80067fa:	ed93 7a00 	vldr	s14, [r3]
 80067fe:	4b50      	ldr	r3, [pc, #320]	@ (8006940 <update_position_control+0x154>)
 8006800:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8006804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006808:	4b4c      	ldr	r3, [pc, #304]	@ (800693c <update_position_control+0x150>)
 800680a:	edc3 7a05 	vstr	s15, [r3, #20]
	prismatic_axis.command_vel = PWM_Satuation(
 800680e:	4b4b      	ldr	r3, [pc, #300]	@ (800693c <update_position_control+0x150>)
 8006810:	edd3 7a05 	vldr	s15, [r3, #20]
 8006814:	eeb0 0a67 	vmov.f32	s0, s15
 8006818:	484a      	ldr	r0, [pc, #296]	@ (8006944 <update_position_control+0x158>)
 800681a:	f7fa fcfd 	bl	8001218 <PID_CONTROLLER_Compute>
 800681e:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid,
					prismatic_axis.pos_error), ZGX45RGG_400RPM_Constant.sd_max,
 8006822:	4b49      	ldr	r3, [pc, #292]	@ (8006948 <update_position_control+0x15c>)
 8006824:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	prismatic_axis.command_vel = PWM_Satuation(
 8006828:	4610      	mov	r0, r2
 800682a:	4619      	mov	r1, r3
 800682c:	f7fa f94a 	bl	8000ac4 <__aeabi_d2iz>
 8006830:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.sd_max);
 8006832:	4b45      	ldr	r3, [pc, #276]	@ (8006948 <update_position_control+0x15c>)
 8006834:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8006838:	4690      	mov	r8, r2
 800683a:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_vel = PWM_Satuation(
 800683e:	4640      	mov	r0, r8
 8006840:	4649      	mov	r1, r9
 8006842:	f7fa f93f 	bl	8000ac4 <__aeabi_d2iz>
 8006846:	4603      	mov	r3, r0
 8006848:	4619      	mov	r1, r3
 800684a:	4630      	mov	r0, r6
 800684c:	eeb0 0a48 	vmov.f32	s0, s16
 8006850:	f7fa fc80 	bl	8001154 <PWM_Satuation>
 8006854:	ee07 0a90 	vmov	s15, r0
 8006858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800685c:	4b37      	ldr	r3, [pc, #220]	@ (800693c <update_position_control+0x150>)
 800685e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	float normalized_position = normalize_angle(revolute_encoder.rads);
 8006862:	4b3a      	ldr	r3, [pc, #232]	@ (800694c <update_position_control+0x160>)
 8006864:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006868:	eeb0 0a67 	vmov.f32	s0, s15
 800686c:	f7ff fc96 	bl	800619c <normalize_angle>
 8006870:	ed87 0a01 	vstr	s0, [r7, #4]
	revolute_axis.pos_error = revolute_axis.position - normalized_position;
 8006874:	4b36      	ldr	r3, [pc, #216]	@ (8006950 <update_position_control+0x164>)
 8006876:	ed93 7a00 	vldr	s14, [r3]
 800687a:	edd7 7a01 	vldr	s15, [r7, #4]
 800687e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006882:	4b33      	ldr	r3, [pc, #204]	@ (8006950 <update_position_control+0x164>)
 8006884:	edc3 7a05 	vstr	s15, [r3, #20]

	if (revolute_axis.pos_error > PI)
 8006888:	4b31      	ldr	r3, [pc, #196]	@ (8006950 <update_position_control+0x164>)
 800688a:	edd3 7a05 	vldr	s15, [r3, #20]
 800688e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006954 <update_position_control+0x168>
 8006892:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800689a:	dd09      	ble.n	80068b0 <update_position_control+0xc4>
		revolute_axis.pos_error -= 2.0f * PI;
 800689c:	4b2c      	ldr	r3, [pc, #176]	@ (8006950 <update_position_control+0x164>)
 800689e:	edd3 7a05 	vldr	s15, [r3, #20]
 80068a2:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8006958 <update_position_control+0x16c>
 80068a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068aa:	4b29      	ldr	r3, [pc, #164]	@ (8006950 <update_position_control+0x164>)
 80068ac:	edc3 7a05 	vstr	s15, [r3, #20]
	if (revolute_axis.pos_error < -PI)
 80068b0:	4b27      	ldr	r3, [pc, #156]	@ (8006950 <update_position_control+0x164>)
 80068b2:	edd3 7a05 	vldr	s15, [r3, #20]
 80068b6:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800695c <update_position_control+0x170>
 80068ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c2:	d509      	bpl.n	80068d8 <update_position_control+0xec>
		revolute_axis.pos_error += 2.0f * PI;
 80068c4:	4b22      	ldr	r3, [pc, #136]	@ (8006950 <update_position_control+0x164>)
 80068c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80068ca:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8006958 <update_position_control+0x16c>
 80068ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80068d2:	4b1f      	ldr	r3, [pc, #124]	@ (8006950 <update_position_control+0x164>)
 80068d4:	edc3 7a05 	vstr	s15, [r3, #20]

	revolute_axis.command_vel = PWM_Satuation(
 80068d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006950 <update_position_control+0x164>)
 80068da:	edd3 7a05 	vldr	s15, [r3, #20]
 80068de:	eeb0 0a67 	vmov.f32	s0, s15
 80068e2:	481f      	ldr	r0, [pc, #124]	@ (8006960 <update_position_control+0x174>)
 80068e4:	f7fa fc98 	bl	8001218 <PID_CONTROLLER_Compute>
 80068e8:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid,
					revolute_axis.pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 80068ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006964 <update_position_control+0x178>)
 80068ee:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 80068f2:	4610      	mov	r0, r2
 80068f4:	4619      	mov	r1, r3
 80068f6:	f7fa f8e5 	bl	8000ac4 <__aeabi_d2iz>
 80068fa:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 80068fc:	4b19      	ldr	r3, [pc, #100]	@ (8006964 <update_position_control+0x178>)
 80068fe:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006902:	4614      	mov	r4, r2
 8006904:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_vel = PWM_Satuation(
 8006908:	4620      	mov	r0, r4
 800690a:	4629      	mov	r1, r5
 800690c:	f7fa f8da 	bl	8000ac4 <__aeabi_d2iz>
 8006910:	4603      	mov	r3, r0
 8006912:	4619      	mov	r1, r3
 8006914:	4630      	mov	r0, r6
 8006916:	eeb0 0a48 	vmov.f32	s0, s16
 800691a:	f7fa fc1b 	bl	8001154 <PWM_Satuation>
 800691e:	ee07 0a90 	vmov	s15, r0
 8006922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006926:	4b0a      	ldr	r3, [pc, #40]	@ (8006950 <update_position_control+0x164>)
 8006928:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	ecbd 8b02 	vpop	{d8}
 8006936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800693a:	bf00      	nop
 800693c:	200006fc 	.word	0x200006fc
 8006940:	2000097c 	.word	0x2000097c
 8006944:	20000a34 	.word	0x20000a34
 8006948:	20000080 	.word	0x20000080
 800694c:	200009d8 	.word	0x200009d8
 8006950:	20000740 	.word	0x20000740
 8006954:	40490fdb 	.word	0x40490fdb
 8006958:	40c90fdb 	.word	0x40c90fdb
 800695c:	c0490fdb 	.word	0xc0490fdb
 8006960:	20000a84 	.word	0x20000a84
 8006964:	20000000 	.word	0x20000000

08006968 <update_velocity_control>:

void update_velocity_control(void) {
 8006968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800696c:	ed2d 8b02 	vpush	{d8}
 8006970:	b083      	sub	sp, #12
 8006972:	af00      	add	r7, sp, #0

	if (prismatic_axis.trajectory_active) {
 8006974:	4b96      	ldr	r3, [pc, #600]	@ (8006bd0 <update_velocity_control+0x268>)
 8006976:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800697a:	2b00      	cmp	r3, #0
 800697c:	d010      	beq.n	80069a0 <update_velocity_control+0x38>
		prismatic_axis.vel_error = prismatic_axis.command_vel
 800697e:	4b94      	ldr	r3, [pc, #592]	@ (8006bd0 <update_velocity_control+0x268>)
 8006980:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ prismatic_axis.velocity - prismatic_axis.kalman_velocity;
 8006984:	4b92      	ldr	r3, [pc, #584]	@ (8006bd0 <update_velocity_control+0x268>)
 8006986:	edd3 7a01 	vldr	s15, [r3, #4]
 800698a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800698e:	4b90      	ldr	r3, [pc, #576]	@ (8006bd0 <update_velocity_control+0x268>)
 8006990:	edd3 7a07 	vldr	s15, [r3, #28]
 8006994:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006998:	4b8d      	ldr	r3, [pc, #564]	@ (8006bd0 <update_velocity_control+0x268>)
 800699a:	edc3 7a06 	vstr	s15, [r3, #24]
 800699e:	e00a      	b.n	80069b6 <update_velocity_control+0x4e>
	} else {
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80069a0:	4b8b      	ldr	r3, [pc, #556]	@ (8006bd0 <update_velocity_control+0x268>)
 80069a2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 80069a6:	4b8a      	ldr	r3, [pc, #552]	@ (8006bd0 <update_velocity_control+0x268>)
 80069a8:	edd3 7a07 	vldr	s15, [r3, #28]
 80069ac:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80069b0:	4b87      	ldr	r3, [pc, #540]	@ (8006bd0 <update_velocity_control+0x268>)
 80069b2:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	prismatic_axis.command_pos = PWM_Satuation(
 80069b6:	4b86      	ldr	r3, [pc, #536]	@ (8006bd0 <update_velocity_control+0x268>)
 80069b8:	edd3 7a06 	vldr	s15, [r3, #24]
 80069bc:	eeb0 0a67 	vmov.f32	s0, s15
 80069c0:	4884      	ldr	r0, [pc, #528]	@ (8006bd4 <update_velocity_control+0x26c>)
 80069c2:	f7fa fc29 	bl	8001218 <PID_CONTROLLER_Compute>
 80069c6:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid,
					prismatic_axis.vel_error), ZGX45RGG_400RPM_Constant.U_max,
 80069ca:	4b83      	ldr	r3, [pc, #524]	@ (8006bd8 <update_velocity_control+0x270>)
 80069cc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(
 80069d0:	4610      	mov	r0, r2
 80069d2:	4619      	mov	r1, r3
 80069d4:	f7fa f876 	bl	8000ac4 <__aeabi_d2iz>
 80069d8:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.U_max);
 80069da:	4b7f      	ldr	r3, [pc, #508]	@ (8006bd8 <update_velocity_control+0x270>)
 80069dc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80069e0:	603a      	str	r2, [r7, #0]
 80069e2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80069e6:	607b      	str	r3, [r7, #4]
	prismatic_axis.command_pos = PWM_Satuation(
 80069e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069ec:	f7fa f86a 	bl	8000ac4 <__aeabi_d2iz>
 80069f0:	4603      	mov	r3, r0
 80069f2:	4619      	mov	r1, r3
 80069f4:	4630      	mov	r0, r6
 80069f6:	eeb0 0a48 	vmov.f32	s0, s16
 80069fa:	f7fa fbab 	bl	8001154 <PWM_Satuation>
 80069fe:	ee07 0a90 	vmov	s15, r0
 8006a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a06:	4b72      	ldr	r3, [pc, #456]	@ (8006bd0 <update_velocity_control+0x268>)
 8006a08:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (prismatic_axis.trajectory_active) {
 8006a0c:	4b70      	ldr	r3, [pc, #448]	@ (8006bd0 <update_velocity_control+0x268>)
 8006a0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d02c      	beq.n	8006a70 <update_velocity_control+0x108>
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
				prismatic_axis.velocity / 1000.0f);
 8006a16:	4b6e      	ldr	r3, [pc, #440]	@ (8006bd0 <update_velocity_control+0x268>)
 8006a18:	edd3 7a01 	vldr	s15, [r3, #4]
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8006a1c:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006bdc <update_velocity_control+0x274>
 8006a20:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006a24:	eeb0 0a47 	vmov.f32	s0, s14
 8006a28:	486d      	ldr	r0, [pc, #436]	@ (8006be0 <update_velocity_control+0x278>)
 8006a2a:	f7fa ff11 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 8006a2e:	eef0 7a40 	vmov.f32	s15, s0
 8006a32:	4b67      	ldr	r3, [pc, #412]	@ (8006bd0 <update_velocity_control+0x268>)
 8006a34:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8006a38:	4b6a      	ldr	r3, [pc, #424]	@ (8006be4 <update_velocity_control+0x27c>)
 8006a3a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8006a3e:	4b6a      	ldr	r3, [pc, #424]	@ (8006be8 <update_velocity_control+0x280>)
 8006a40:	edd3 6a01 	vldr	s13, [r3, #4]
				revolute_encoder.rads, revolute_axis.velocity,
				prismatic_encoder.mm / 1000.0f);
 8006a44:	4b69      	ldr	r3, [pc, #420]	@ (8006bec <update_velocity_control+0x284>)
 8006a46:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8006a4a:	eddf 5a64 	vldr	s11, [pc, #400]	@ 8006bdc <update_velocity_control+0x274>
 8006a4e:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8006a52:	eeb0 1a46 	vmov.f32	s2, s12
 8006a56:	eef0 0a66 	vmov.f32	s1, s13
 8006a5a:	eeb0 0a47 	vmov.f32	s0, s14
 8006a5e:	4864      	ldr	r0, [pc, #400]	@ (8006bf0 <update_velocity_control+0x288>)
 8006a60:	f7fa ff9e 	bl	80019a0 <PRISMATIC_MOTOR_DFD_Compute>
 8006a64:	eef0 7a40 	vmov.f32	s15, s0
 8006a68:	4b59      	ldr	r3, [pc, #356]	@ (8006bd0 <update_velocity_control+0x268>)
 8006a6a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8006a6e:	e007      	b.n	8006a80 <update_velocity_control+0x118>
	} else {
		prismatic_axis.ffd = 0.0f;
 8006a70:	4b57      	ldr	r3, [pc, #348]	@ (8006bd0 <update_velocity_control+0x268>)
 8006a72:	f04f 0200 	mov.w	r2, #0
 8006a76:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 8006a78:	4b55      	ldr	r3, [pc, #340]	@ (8006bd0 <update_velocity_control+0x268>)
 8006a7a:	f04f 0200 	mov.w	r2, #0
 8006a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8006a80:	4b53      	ldr	r3, [pc, #332]	@ (8006bd0 <update_velocity_control+0x268>)
 8006a82:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8006a86:	4b52      	ldr	r3, [pc, #328]	@ (8006bd0 <update_velocity_control+0x268>)
 8006a88:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8006a8c:	4b50      	ldr	r3, [pc, #320]	@ (8006bd0 <update_velocity_control+0x268>)
 8006a8e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a9a:	4b4d      	ldr	r3, [pc, #308]	@ (8006bd0 <update_velocity_control+0x268>)
 8006a9c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006aa0:	4b4b      	ldr	r3, [pc, #300]	@ (8006bd0 <update_velocity_control+0x268>)
 8006aa2:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8006aa6:	4b4c      	ldr	r3, [pc, #304]	@ (8006bd8 <update_velocity_control+0x270>)
 8006aa8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006aac:	4610      	mov	r0, r2
 8006aae:	4619      	mov	r1, r3
 8006ab0:	f7fa f808 	bl	8000ac4 <__aeabi_d2iz>
 8006ab4:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8006ab6:	4b48      	ldr	r3, [pc, #288]	@ (8006bd8 <update_velocity_control+0x270>)
 8006ab8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006abc:	4692      	mov	sl, r2
 8006abe:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006ac2:	4650      	mov	r0, sl
 8006ac4:	4659      	mov	r1, fp
 8006ac6:	f7f9 fffd 	bl	8000ac4 <__aeabi_d2iz>
 8006aca:	4603      	mov	r3, r0
 8006acc:	4619      	mov	r1, r3
 8006ace:	4630      	mov	r0, r6
 8006ad0:	eeb0 0a48 	vmov.f32	s0, s16
 8006ad4:	f7fa fb3e 	bl	8001154 <PWM_Satuation>
 8006ad8:	ee07 0a90 	vmov	s15, r0
 8006adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ae0:	4b3b      	ldr	r3, [pc, #236]	@ (8006bd0 <update_velocity_control+0x268>)
 8006ae2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 8006ae6:	4b40      	ldr	r3, [pc, #256]	@ (8006be8 <update_velocity_control+0x280>)
 8006ae8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d010      	beq.n	8006b12 <update_velocity_control+0x1aa>
		revolute_axis.vel_error = revolute_axis.command_vel
 8006af0:	4b3d      	ldr	r3, [pc, #244]	@ (8006be8 <update_velocity_control+0x280>)
 8006af2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 8006af6:	4b3c      	ldr	r3, [pc, #240]	@ (8006be8 <update_velocity_control+0x280>)
 8006af8:	edd3 7a01 	vldr	s15, [r3, #4]
 8006afc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b00:	4b39      	ldr	r3, [pc, #228]	@ (8006be8 <update_velocity_control+0x280>)
 8006b02:	edd3 7a07 	vldr	s15, [r3, #28]
 8006b06:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8006b0a:	4b37      	ldr	r3, [pc, #220]	@ (8006be8 <update_velocity_control+0x280>)
 8006b0c:	edc3 7a06 	vstr	s15, [r3, #24]
 8006b10:	e00a      	b.n	8006b28 <update_velocity_control+0x1c0>
	} else {
		revolute_axis.vel_error = revolute_axis.command_vel
 8006b12:	4b35      	ldr	r3, [pc, #212]	@ (8006be8 <update_velocity_control+0x280>)
 8006b14:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 8006b18:	4b33      	ldr	r3, [pc, #204]	@ (8006be8 <update_velocity_control+0x280>)
 8006b1a:	edd3 7a07 	vldr	s15, [r3, #28]
 8006b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8006b22:	4b31      	ldr	r3, [pc, #196]	@ (8006be8 <update_velocity_control+0x280>)
 8006b24:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	revolute_axis.command_pos = PWM_Satuation(
 8006b28:	4b2f      	ldr	r3, [pc, #188]	@ (8006be8 <update_velocity_control+0x280>)
 8006b2a:	edd3 7a06 	vldr	s15, [r3, #24]
 8006b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8006b32:	4830      	ldr	r0, [pc, #192]	@ (8006bf4 <update_velocity_control+0x28c>)
 8006b34:	f7fa fb70 	bl	8001218 <PID_CONTROLLER_Compute>
 8006b38:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid,
					revolute_axis.vel_error), ZGX45RGG_150RPM_Constant.U_max,
 8006b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8006bf8 <update_velocity_control+0x290>)
 8006b3e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 8006b42:	4610      	mov	r0, r2
 8006b44:	4619      	mov	r1, r3
 8006b46:	f7f9 ffbd 	bl	8000ac4 <__aeabi_d2iz>
 8006b4a:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 8006b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8006bf8 <update_velocity_control+0x290>)
 8006b4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006b52:	4690      	mov	r8, r2
 8006b54:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(
 8006b58:	4640      	mov	r0, r8
 8006b5a:	4649      	mov	r1, r9
 8006b5c:	f7f9 ffb2 	bl	8000ac4 <__aeabi_d2iz>
 8006b60:	4603      	mov	r3, r0
 8006b62:	4619      	mov	r1, r3
 8006b64:	4630      	mov	r0, r6
 8006b66:	eeb0 0a48 	vmov.f32	s0, s16
 8006b6a:	f7fa faf3 	bl	8001154 <PWM_Satuation>
 8006b6e:	ee07 0a90 	vmov	s15, r0
 8006b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b76:	4b1c      	ldr	r3, [pc, #112]	@ (8006be8 <update_velocity_control+0x280>)
 8006b78:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 8006b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8006be8 <update_velocity_control+0x280>)
 8006b7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d03e      	beq.n	8006c04 <update_velocity_control+0x29c>
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8006b86:	4b18      	ldr	r3, [pc, #96]	@ (8006be8 <update_velocity_control+0x280>)
 8006b88:	edd3 7a01 	vldr	s15, [r3, #4]
 8006b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8006b90:	481a      	ldr	r0, [pc, #104]	@ (8006bfc <update_velocity_control+0x294>)
 8006b92:	f7fa fcdf 	bl	8001554 <REVOLUTE_MOTOR_FFD_Compute>
 8006b96:	eef0 7a40 	vmov.f32	s15, s0
 8006b9a:	4b13      	ldr	r3, [pc, #76]	@ (8006be8 <update_velocity_control+0x280>)
 8006b9c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				revolute_axis.velocity);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006ba0:	4b10      	ldr	r3, [pc, #64]	@ (8006be4 <update_velocity_control+0x27c>)
 8006ba2:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8006ba6:	4b11      	ldr	r3, [pc, #68]	@ (8006bec <update_velocity_control+0x284>)
 8006ba8:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006bac:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8006bdc <update_velocity_control+0x274>
 8006bb0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006bb4:	eef0 0a66 	vmov.f32	s1, s13
 8006bb8:	eeb0 0a47 	vmov.f32	s0, s14
 8006bbc:	4810      	ldr	r0, [pc, #64]	@ (8006c00 <update_velocity_control+0x298>)
 8006bbe:	f7fa fd5c 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 8006bc2:	eef0 7a40 	vmov.f32	s15, s0
 8006bc6:	4b08      	ldr	r3, [pc, #32]	@ (8006be8 <update_velocity_control+0x280>)
 8006bc8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8006bcc:	e034      	b.n	8006c38 <update_velocity_control+0x2d0>
 8006bce:	bf00      	nop
 8006bd0:	200006fc 	.word	0x200006fc
 8006bd4:	20000a5c 	.word	0x20000a5c
 8006bd8:	20000080 	.word	0x20000080
 8006bdc:	447a0000 	.word	0x447a0000
 8006be0:	20000afc 	.word	0x20000afc
 8006be4:	200009d8 	.word	0x200009d8
 8006be8:	20000740 	.word	0x20000740
 8006bec:	2000097c 	.word	0x2000097c
 8006bf0:	20000b00 	.word	0x20000b00
 8006bf4:	20000aac 	.word	0x20000aac
 8006bf8:	20000000 	.word	0x20000000
 8006bfc:	20000b08 	.word	0x20000b08
 8006c00:	20000b0c 	.word	0x20000b0c
	} else {
		revolute_axis.ffd = 0.0f;
 8006c04:	4b54      	ldr	r3, [pc, #336]	@ (8006d58 <update_velocity_control+0x3f0>)
 8006c06:	f04f 0200 	mov.w	r2, #0
 8006c0a:	631a      	str	r2, [r3, #48]	@ 0x30
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006c0c:	4b53      	ldr	r3, [pc, #332]	@ (8006d5c <update_velocity_control+0x3f4>)
 8006c0e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8006c12:	4b53      	ldr	r3, [pc, #332]	@ (8006d60 <update_velocity_control+0x3f8>)
 8006c14:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006c18:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8006d64 <update_velocity_control+0x3fc>
 8006c1c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006c20:	eef0 0a66 	vmov.f32	s1, s13
 8006c24:	eeb0 0a47 	vmov.f32	s0, s14
 8006c28:	484f      	ldr	r0, [pc, #316]	@ (8006d68 <update_velocity_control+0x400>)
 8006c2a:	f7fa fd26 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 8006c2e:	eef0 7a40 	vmov.f32	s15, s0
 8006c32:	4b49      	ldr	r3, [pc, #292]	@ (8006d58 <update_velocity_control+0x3f0>)
 8006c34:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	static float ffd_filtered = 0.0f;
	static float dfd_filtered = 0.0f;

	ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 8006c38:	4b4c      	ldr	r3, [pc, #304]	@ (8006d6c <update_velocity_control+0x404>)
 8006c3a:	edd3 7a00 	vldr	s15, [r3]
 8006c3e:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8006d70 <update_velocity_control+0x408>
 8006c42:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006c46:	4b44      	ldr	r3, [pc, #272]	@ (8006d58 <update_velocity_control+0x3f0>)
 8006c48:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8006c4c:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8006d74 <update_velocity_control+0x40c>
 8006c50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c58:	4b44      	ldr	r3, [pc, #272]	@ (8006d6c <update_velocity_control+0x404>)
 8006c5a:	edc3 7a00 	vstr	s15, [r3]
	dfd_filtered = 0.8f * dfd_filtered + 0.175f * revolute_axis.dfd; //dfd 0.175
 8006c5e:	4b46      	ldr	r3, [pc, #280]	@ (8006d78 <update_velocity_control+0x410>)
 8006c60:	edd3 7a00 	vldr	s15, [r3]
 8006c64:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006d70 <update_velocity_control+0x408>
 8006c68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006c6c:	4b3a      	ldr	r3, [pc, #232]	@ (8006d58 <update_velocity_control+0x3f0>)
 8006c6e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006c72:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8006d7c <update_velocity_control+0x414>
 8006c76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8006d78 <update_velocity_control+0x410>)
 8006c80:	edc3 7a00 	vstr	s15, [r3]

	revolute_axis.command_pos += 0.01 * (dfd_filtered + ffd_filtered);
 8006c84:	4b34      	ldr	r3, [pc, #208]	@ (8006d58 <update_velocity_control+0x3f0>)
 8006c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7f9 fc29 	bl	80004e0 <__aeabi_f2d>
 8006c8e:	4680      	mov	r8, r0
 8006c90:	4689      	mov	r9, r1
 8006c92:	4b39      	ldr	r3, [pc, #228]	@ (8006d78 <update_velocity_control+0x410>)
 8006c94:	ed93 7a00 	vldr	s14, [r3]
 8006c98:	4b34      	ldr	r3, [pc, #208]	@ (8006d6c <update_velocity_control+0x404>)
 8006c9a:	edd3 7a00 	vldr	s15, [r3]
 8006c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ca2:	ee17 0a90 	vmov	r0, s15
 8006ca6:	f7f9 fc1b 	bl	80004e0 <__aeabi_f2d>
 8006caa:	a329      	add	r3, pc, #164	@ (adr r3, 8006d50 <update_velocity_control+0x3e8>)
 8006cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb0:	f7f9 fc6e 	bl	8000590 <__aeabi_dmul>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	4640      	mov	r0, r8
 8006cba:	4649      	mov	r1, r9
 8006cbc:	f7f9 fab2 	bl	8000224 <__adddf3>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	f7f9 ff44 	bl	8000b54 <__aeabi_d2f>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	4a22      	ldr	r2, [pc, #136]	@ (8006d58 <update_velocity_control+0x3f0>)
 8006cd0:	6253      	str	r3, [r2, #36]	@ 0x24

	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006cd2:	4b21      	ldr	r3, [pc, #132]	@ (8006d58 <update_velocity_control+0x3f0>)
 8006cd4:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006cd8:	4b29      	ldr	r3, [pc, #164]	@ (8006d80 <update_velocity_control+0x418>)
 8006cda:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006cde:	4610      	mov	r0, r2
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	f7f9 feef 	bl	8000ac4 <__aeabi_d2iz>
 8006ce6:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006ce8:	4b25      	ldr	r3, [pc, #148]	@ (8006d80 <update_velocity_control+0x418>)
 8006cea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006cee:	4614      	mov	r4, r2
 8006cf0:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	f7f9 fee4 	bl	8000ac4 <__aeabi_d2iz>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	4619      	mov	r1, r3
 8006d00:	4630      	mov	r0, r6
 8006d02:	eeb0 0a48 	vmov.f32	s0, s16
 8006d06:	f7fa fa25 	bl	8001154 <PWM_Satuation>
 8006d0a:	ee07 0a90 	vmov	s15, r0
 8006d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d12:	4b11      	ldr	r3, [pc, #68]	@ (8006d58 <update_velocity_control+0x3f0>)
 8006d14:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006d18:	4b1a      	ldr	r3, [pc, #104]	@ (8006d84 <update_velocity_control+0x41c>)
 8006d1a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006d1e:	eef0 0a67 	vmov.f32	s1, s15
 8006d22:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8006d88 <update_velocity_control+0x420>
 8006d26:	4819      	ldr	r0, [pc, #100]	@ (8006d8c <update_velocity_control+0x424>)
 8006d28:	f7fa fb2c 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d58 <update_velocity_control+0x3f0>)
 8006d2e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006d32:	eef0 0a67 	vmov.f32	s1, s15
 8006d36:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8006d88 <update_velocity_control+0x420>
 8006d3a:	4815      	ldr	r0, [pc, #84]	@ (8006d90 <update_velocity_control+0x428>)
 8006d3c:	f7fa fb22 	bl	8001384 <MDXX_set_range>
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	ecbd 8b02 	vpop	{d8}
 8006d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d4e:	bf00      	nop
 8006d50:	47ae147b 	.word	0x47ae147b
 8006d54:	3f847ae1 	.word	0x3f847ae1
 8006d58:	20000740 	.word	0x20000740
 8006d5c:	200009d8 	.word	0x200009d8
 8006d60:	2000097c 	.word	0x2000097c
 8006d64:	447a0000 	.word	0x447a0000
 8006d68:	20000b0c 	.word	0x20000b0c
 8006d6c:	200008c0 	.word	0x200008c0
 8006d70:	3f4ccccd 	.word	0x3f4ccccd
 8006d74:	3e4ccccd 	.word	0x3e4ccccd
 8006d78:	200008c4 	.word	0x200008c4
 8006d7c:	3e333333 	.word	0x3e333333
 8006d80:	20000000 	.word	0x20000000
 8006d84:	200006fc 	.word	0x200006fc
 8006d88:	44fa0000 	.word	0x44fa0000
 8006d8c:	200008e4 	.word	0x200008e4
 8006d90:	20000930 	.word	0x20000930

08006d94 <update_control_loops>:

void update_control_loops(void) {
 8006d94:	b590      	push	{r4, r7, lr}
 8006d96:	ed2d 8b02 	vpush	{d8}
 8006d9a:	b089      	sub	sp, #36	@ 0x24
 8006d9c:	af00      	add	r7, sp, #0
	normalized_position = normalize_angle(revolute_encoder.rads);
 8006d9e:	4b72      	ldr	r3, [pc, #456]	@ (8006f68 <update_control_loops+0x1d4>)
 8006da0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006da4:	eeb0 0a67 	vmov.f32	s0, s15
 8006da8:	f7ff f9f8 	bl	800619c <normalize_angle>
 8006dac:	eef0 7a40 	vmov.f32	s15, s0
 8006db0:	4b6e      	ldr	r3, [pc, #440]	@ (8006f6c <update_control_loops+0x1d8>)
 8006db2:	edc3 7a00 	vstr	s15, [r3]

	if (is_emergency_active()) {
 8006db6:	f000 fc8f 	bl	80076d8 <is_emergency_active>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d015      	beq.n	8006dec <update_control_loops+0x58>
		emergency_stop_all_motors();
 8006dc0:	f000 fbda 	bl	8007578 <emergency_stop_all_motors>
		prismatic_axis.mm = prismatic_encoder.mm;
 8006dc4:	4b6a      	ldr	r3, [pc, #424]	@ (8006f70 <update_control_loops+0x1dc>)
 8006dc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dc8:	4a6a      	ldr	r2, [pc, #424]	@ (8006f74 <update_control_loops+0x1e0>)
 8006dca:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006dcc:	4b67      	ldr	r3, [pc, #412]	@ (8006f6c <update_control_loops+0x1d8>)
 8006dce:	edd3 7a00 	vldr	s15, [r3]
 8006dd2:	220e      	movs	r2, #14
 8006dd4:	210f      	movs	r1, #15
 8006dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8006dda:	4867      	ldr	r0, [pc, #412]	@ (8006f78 <update_control_loops+0x1e4>)
 8006ddc:	f7fd fef4 	bl	8004bc8 <UnitConverter_angle>
 8006de0:	eef0 7a40 	vmov.f32	s15, s0
 8006de4:	4b65      	ldr	r3, [pc, #404]	@ (8006f7c <update_control_loops+0x1e8>)
 8006de6:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 8006dea:	e2b6      	b.n	800735a <update_control_loops+0x5c6>
	}

	// Handle all homing states except HOMING_REV_TO_ZERO_DEG with direct motor control
	if (homing_active && homing_state != HOMING_REV_TO_ZERO_DEG) {
 8006dec:	4b64      	ldr	r3, [pc, #400]	@ (8006f80 <update_control_loops+0x1ec>)
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d02d      	beq.n	8006e50 <update_control_loops+0xbc>
 8006df4:	4b63      	ldr	r3, [pc, #396]	@ (8006f84 <update_control_loops+0x1f0>)
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	2b07      	cmp	r3, #7
 8006dfa:	d029      	beq.n	8006e50 <update_control_loops+0xbc>
		update_homing_sequence();
 8006dfc:	f7fe fe2c 	bl	8005a58 <update_homing_sequence>
		MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006e00:	4b5c      	ldr	r3, [pc, #368]	@ (8006f74 <update_control_loops+0x1e0>)
 8006e02:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006e06:	eef0 0a67 	vmov.f32	s1, s15
 8006e0a:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 8006f88 <update_control_loops+0x1f4>
 8006e0e:	485f      	ldr	r0, [pc, #380]	@ (8006f8c <update_control_loops+0x1f8>)
 8006e10:	f7fa fab8 	bl	8001384 <MDXX_set_range>
		MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006e14:	4b59      	ldr	r3, [pc, #356]	@ (8006f7c <update_control_loops+0x1e8>)
 8006e16:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006e1a:	eef0 0a67 	vmov.f32	s1, s15
 8006e1e:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 8006f88 <update_control_loops+0x1f4>
 8006e22:	485b      	ldr	r0, [pc, #364]	@ (8006f90 <update_control_loops+0x1fc>)
 8006e24:	f7fa faae 	bl	8001384 <MDXX_set_range>
		prismatic_axis.mm = prismatic_encoder.mm;
 8006e28:	4b51      	ldr	r3, [pc, #324]	@ (8006f70 <update_control_loops+0x1dc>)
 8006e2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e2c:	4a51      	ldr	r2, [pc, #324]	@ (8006f74 <update_control_loops+0x1e0>)
 8006e2e:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006e30:	4b4e      	ldr	r3, [pc, #312]	@ (8006f6c <update_control_loops+0x1d8>)
 8006e32:	edd3 7a00 	vldr	s15, [r3]
 8006e36:	220e      	movs	r2, #14
 8006e38:	210f      	movs	r1, #15
 8006e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8006e3e:	484e      	ldr	r0, [pc, #312]	@ (8006f78 <update_control_loops+0x1e4>)
 8006e40:	f7fd fec2 	bl	8004bc8 <UnitConverter_angle>
 8006e44:	eef0 7a40 	vmov.f32	s15, s0
 8006e48:	4b4c      	ldr	r3, [pc, #304]	@ (8006f7c <update_control_loops+0x1e8>)
 8006e4a:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 8006e4e:	e284      	b.n	800735a <update_control_loops+0x5c6>
	}

	// Handle HOMING_REV_TO_ZERO_DEG: use trajectory system + check completion
	if (homing_active && homing_state == HOMING_REV_TO_ZERO_DEG) {
 8006e50:	4b4b      	ldr	r3, [pc, #300]	@ (8006f80 <update_control_loops+0x1ec>)
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d01d      	beq.n	8006e94 <update_control_loops+0x100>
 8006e58:	4b4a      	ldr	r3, [pc, #296]	@ (8006f84 <update_control_loops+0x1f0>)
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	2b07      	cmp	r3, #7
 8006e5e:	d119      	bne.n	8006e94 <update_control_loops+0x100>
		// First, update the homing sequence to handle trajectory start/completion
		update_homing_sequence();
 8006e60:	f7fe fdfa 	bl	8005a58 <update_homing_sequence>

		// If still in HOMING_REV_TO_ZERO_DEG after update, continue with trajectory control
		if (homing_state == HOMING_REV_TO_ZERO_DEG) {
 8006e64:	4b47      	ldr	r3, [pc, #284]	@ (8006f84 <update_control_loops+0x1f0>)
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	2b07      	cmp	r3, #7
 8006e6a:	d013      	beq.n	8006e94 <update_control_loops+0x100>
			// Let the trajectory system handle the motion
			// Fall through to the switch statement below
		} else {
			// Homing sequence advanced to next state, return
			prismatic_axis.mm = prismatic_encoder.mm;
 8006e6c:	4b40      	ldr	r3, [pc, #256]	@ (8006f70 <update_control_loops+0x1dc>)
 8006e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e70:	4a40      	ldr	r2, [pc, #256]	@ (8006f74 <update_control_loops+0x1e0>)
 8006e72:	6393      	str	r3, [r2, #56]	@ 0x38
			revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006e74:	4b3d      	ldr	r3, [pc, #244]	@ (8006f6c <update_control_loops+0x1d8>)
 8006e76:	edd3 7a00 	vldr	s15, [r3]
 8006e7a:	220e      	movs	r2, #14
 8006e7c:	210f      	movs	r1, #15
 8006e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8006e82:	483d      	ldr	r0, [pc, #244]	@ (8006f78 <update_control_loops+0x1e4>)
 8006e84:	f7fd fea0 	bl	8004bc8 <UnitConverter_angle>
 8006e88:	eef0 7a40 	vmov.f32	s15, s0
 8006e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8006f7c <update_control_loops+0x1e8>)
 8006e8e:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
					normalized_position, UNIT_RADIAN, UNIT_DEGREE);
			return;
 8006e92:	e262      	b.n	800735a <update_control_loops+0x5c6>
		}
	}
	//100 point
	if (j1_active && motion_sequence_state == MOTION_IDLE) {
 8006e94:	4b3f      	ldr	r3, [pc, #252]	@ (8006f94 <update_control_loops+0x200>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d02f      	beq.n	8006efc <update_control_loops+0x168>
 8006e9c:	4b3e      	ldr	r3, [pc, #248]	@ (8006f98 <update_control_loops+0x204>)
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d12b      	bne.n	8006efc <update_control_loops+0x168>
		if (j1_going_to_target) {
 8006ea4:	4b3d      	ldr	r3, [pc, #244]	@ (8006f9c <update_control_loops+0x208>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d009      	beq.n	8006ec0 <update_control_loops+0x12c>

			// check if finish goto target then goto 0
			j1_going_to_target = false;
 8006eac:	4b3b      	ldr	r3, [pc, #236]	@ (8006f9c <update_control_loops+0x208>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	701a      	strb	r2, [r3, #0]
			start_combined_trajectory(0.0f, 0.0f);
 8006eb2:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8006fa0 <update_control_loops+0x20c>
 8006eb6:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 8006fa0 <update_control_loops+0x20c>
 8006eba:	f7ff fa59 	bl	8006370 <start_combined_trajectory>
 8006ebe:	e01d      	b.n	8006efc <update_control_loops+0x168>
		} else {

			j1_cycle_count++;
 8006ec0:	4b38      	ldr	r3, [pc, #224]	@ (8006fa4 <update_control_loops+0x210>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	4b36      	ldr	r3, [pc, #216]	@ (8006fa4 <update_control_loops+0x210>)
 8006eca:	701a      	strb	r2, [r3, #0]

			if (j1_cycle_count >= 10) {
 8006ecc:	4b35      	ldr	r3, [pc, #212]	@ (8006fa4 <update_control_loops+0x210>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	2b09      	cmp	r3, #9
 8006ed2:	d906      	bls.n	8006ee2 <update_control_loops+0x14e>
				//finish 100
				j1_active = false;
 8006ed4:	4b2f      	ldr	r3, [pc, #188]	@ (8006f94 <update_control_loops+0x200>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	701a      	strb	r2, [r3, #0]
				j1_cycle_count = 0;
 8006eda:	4b32      	ldr	r3, [pc, #200]	@ (8006fa4 <update_control_loops+0x210>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	e00c      	b.n	8006efc <update_control_loops+0x168>
			} else {
				// start again
				j1_going_to_target = true;
 8006ee2:	4b2e      	ldr	r3, [pc, #184]	@ (8006f9c <update_control_loops+0x208>)
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	701a      	strb	r2, [r3, #0]
				start_combined_trajectory(J1_TARGET_PRIS, J1_TARGET_REV);
 8006ee8:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8006fa8 <update_control_loops+0x214>
 8006eec:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8006fac <update_control_loops+0x218>
 8006ef0:	eef0 0a47 	vmov.f32	s1, s14
 8006ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8006ef8:	f7ff fa3a 	bl	8006370 <start_combined_trajectory>
			}
		}
	}

	// Motion sequence handling
	switch (motion_sequence_state) {
 8006efc:	4b26      	ldr	r3, [pc, #152]	@ (8006f98 <update_control_loops+0x204>)
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	2b05      	cmp	r3, #5
 8006f04:	f200 820f 	bhi.w	8007326 <update_control_loops+0x592>
 8006f08:	a201      	add	r2, pc, #4	@ (adr r2, 8006f10 <update_control_loops+0x17c>)
 8006f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0e:	bf00      	nop
 8006f10:	08006f29 	.word	0x08006f29
 8006f14:	08007327 	.word	0x08007327
 8006f18:	08007327 	.word	0x08007327
 8006f1c:	08006fbd 	.word	0x08006fbd
 8006f20:	080072c1 	.word	0x080072c1
 8006f24:	0800731f 	.word	0x0800731f
	case MOTION_PEN_UP_DELAY:
		if (++motion_delay_timer >= 1500) {
 8006f28:	4b21      	ldr	r3, [pc, #132]	@ (8006fb0 <update_control_loops+0x21c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	4a20      	ldr	r2, [pc, #128]	@ (8006fb0 <update_control_loops+0x21c>)
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	f240 52db 	movw	r2, #1499	@ 0x5db
 8006f36:	4293      	cmp	r3, r2
 8006f38:	f240 81f7 	bls.w	800732a <update_control_loops+0x596>
			// ใช้ sync motion สำหรับทุกกรณี รวมถึง homing
			if (current_drawing_sequence.sequence_active && drawing_pen_state) {
 8006f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8006fb4 <update_control_loops+0x220>)
 8006f3e:	799b      	ldrb	r3, [r3, #6]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d005      	beq.n	8006f50 <update_control_loops+0x1bc>
 8006f44:	4b1c      	ldr	r3, [pc, #112]	@ (8006fb8 <update_control_loops+0x224>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <update_control_loops+0x1bc>
				plotter_pen_down();
 8006f4c:	f002 fdaa 	bl	8009aa4 <plotter_pen_down>
			}
			prismatic_axis.trajectory_active = true;
 8006f50:	4b08      	ldr	r3, [pc, #32]	@ (8006f74 <update_control_loops+0x1e0>)
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			revolute_axis.trajectory_active = true;
 8006f58:	4b08      	ldr	r3, [pc, #32]	@ (8006f7c <update_control_loops+0x1e8>)
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			motion_sequence_state = MOTION_BOTH_AXES_ACTIVE;
 8006f60:	4b0d      	ldr	r3, [pc, #52]	@ (8006f98 <update_control_loops+0x204>)
 8006f62:	2204      	movs	r2, #4
 8006f64:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006f66:	e1e0      	b.n	800732a <update_control_loops+0x596>
 8006f68:	200009d8 	.word	0x200009d8
 8006f6c:	200007f4 	.word	0x200007f4
 8006f70:	2000097c 	.word	0x2000097c
 8006f74:	200006fc 	.word	0x200006fc
 8006f78:	20000d70 	.word	0x20000d70
 8006f7c:	20000740 	.word	0x20000740
 8006f80:	200007e3 	.word	0x200007e3
 8006f84:	200007e2 	.word	0x200007e2
 8006f88:	44fa0000 	.word	0x44fa0000
 8006f8c:	200008e4 	.word	0x200008e4
 8006f90:	20000930 	.word	0x20000930
 8006f94:	2000088e 	.word	0x2000088e
 8006f98:	20000784 	.word	0x20000784
 8006f9c:	20000335 	.word	0x20000335
 8006fa0:	00000000 	.word	0x00000000
 8006fa4:	2000088d 	.word	0x2000088d
 8006fa8:	43480000 	.word	0x43480000
 8006fac:	42b40000 	.word	0x42b40000
 8006fb0:	200007d8 	.word	0x200007d8
 8006fb4:	200008a8 	.word	0x200008a8
 8006fb8:	200008b4 	.word	0x200008b4

	case MOTION_BOTH_AXES_ACTIVE: {
		bool motion_finished = false;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	77fb      	strb	r3, [r7, #31]

		if (sync_motion_active) {
 8006fc0:	4bad      	ldr	r3, [pc, #692]	@ (8007278 <update_control_loops+0x4e4>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 80a9 	beq.w	800711c <update_control_loops+0x388>
			// Time-synchronized motion
			sync_start_time += 0.001f; // Assuming 1ms control loop
 8006fca:	4bac      	ldr	r3, [pc, #688]	@ (800727c <update_control_loops+0x4e8>)
 8006fcc:	edd3 7a00 	vldr	s15, [r3]
 8006fd0:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 8007280 <update_control_loops+0x4ec>
 8006fd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006fd8:	4ba8      	ldr	r3, [pc, #672]	@ (800727c <update_control_loops+0x4e8>)
 8006fda:	edc3 7a00 	vstr	s15, [r3]

			float progress = sync_start_time / sync_total_time;
 8006fde:	4ba7      	ldr	r3, [pc, #668]	@ (800727c <update_control_loops+0x4e8>)
 8006fe0:	edd3 6a00 	vldr	s13, [r3]
 8006fe4:	4ba7      	ldr	r3, [pc, #668]	@ (8007284 <update_control_loops+0x4f0>)
 8006fe6:	ed93 7a00 	vldr	s14, [r3]
 8006fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fee:	edc7 7a06 	vstr	s15, [r7, #24]
			if (progress >= 1.0f) {
 8006ff2:	edd7 7a06 	vldr	s15, [r7, #24]
 8006ff6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007002:	db04      	blt.n	800700e <update_control_loops+0x27a>
				progress = 1.0f;
 8007004:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8007008:	61bb      	str	r3, [r7, #24]
				motion_finished = true;
 800700a:	2301      	movs	r3, #1
 800700c:	77fb      	strb	r3, [r7, #31]
			}

			// Apply smooth S-curve to progress for better motion profile
			float smooth_progress = progress * progress
 800700e:	edd7 7a06 	vldr	s15, [r7, #24]
 8007012:	ee27 7aa7 	vmul.f32	s14, s15, s15
					* (3.0f - 2.0f * progress); // Smoothstep function
 8007016:	edd7 7a06 	vldr	s15, [r7, #24]
 800701a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800701e:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8007022:	ee76 7ae7 	vsub.f32	s15, s13, s15
			float smooth_progress = progress * progress
 8007026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800702a:	edc7 7a04 	vstr	s15, [r7, #16]

			// Calculate synchronized positions
			if (!(homing_active && homing_state == HOMING_REV_TO_ZERO_DEG)) {
 800702e:	4b96      	ldr	r3, [pc, #600]	@ (8007288 <update_control_loops+0x4f4>)
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	f083 0301 	eor.w	r3, r3, #1
 8007036:	b2db      	uxtb	r3, r3
 8007038:	2b00      	cmp	r3, #0
 800703a:	d103      	bne.n	8007044 <update_control_loops+0x2b0>
 800703c:	4b93      	ldr	r3, [pc, #588]	@ (800728c <update_control_loops+0x4f8>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	2b07      	cmp	r3, #7
 8007042:	d026      	beq.n	8007092 <update_control_loops+0x2fe>
				// Prismatic axis synchronized position
				prismatic_axis.position = prismatic_axis.initial_pos
 8007044:	4b92      	ldr	r3, [pc, #584]	@ (8007290 <update_control_loops+0x4fc>)
 8007046:	ed93 7a03 	vldr	s14, [r3, #12]
						+ (prismatic_axis.target_pos
 800704a:	4b91      	ldr	r3, [pc, #580]	@ (8007290 <update_control_loops+0x4fc>)
 800704c:	edd3 6a04 	vldr	s13, [r3, #16]
								- prismatic_axis.initial_pos) * smooth_progress;
 8007050:	4b8f      	ldr	r3, [pc, #572]	@ (8007290 <update_control_loops+0x4fc>)
 8007052:	edd3 7a03 	vldr	s15, [r3, #12]
 8007056:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800705a:	edd7 7a04 	vldr	s15, [r7, #16]
 800705e:	ee66 7aa7 	vmul.f32	s15, s13, s15
						+ (prismatic_axis.target_pos
 8007062:	ee77 7a27 	vadd.f32	s15, s14, s15
				prismatic_axis.position = prismatic_axis.initial_pos
 8007066:	4b8a      	ldr	r3, [pc, #552]	@ (8007290 <update_control_loops+0x4fc>)
 8007068:	edc3 7a00 	vstr	s15, [r3]

				// Calculate velocity (derivative of position)
				static float last_pris_pos = 0.0f;
				prismatic_axis.velocity = (prismatic_axis.position
 800706c:	4b88      	ldr	r3, [pc, #544]	@ (8007290 <update_control_loops+0x4fc>)
 800706e:	ed93 7a00 	vldr	s14, [r3]
						- last_pris_pos) / 0.001f; // mm/s
 8007072:	4b88      	ldr	r3, [pc, #544]	@ (8007294 <update_control_loops+0x500>)
 8007074:	edd3 7a00 	vldr	s15, [r3]
 8007078:	ee37 7a67 	vsub.f32	s14, s14, s15
 800707c:	eddf 6a80 	vldr	s13, [pc, #512]	@ 8007280 <update_control_loops+0x4ec>
 8007080:	eec7 7a26 	vdiv.f32	s15, s14, s13
				prismatic_axis.velocity = (prismatic_axis.position
 8007084:	4b82      	ldr	r3, [pc, #520]	@ (8007290 <update_control_loops+0x4fc>)
 8007086:	edc3 7a01 	vstr	s15, [r3, #4]
				last_pris_pos = prismatic_axis.position;
 800708a:	4b81      	ldr	r3, [pc, #516]	@ (8007290 <update_control_loops+0x4fc>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a81      	ldr	r2, [pc, #516]	@ (8007294 <update_control_loops+0x500>)
 8007090:	6013      	str	r3, [r2, #0]
			}

			// Revolute axis synchronized position
			revolute_axis.position = revolute_axis.initial_pos
 8007092:	4b81      	ldr	r3, [pc, #516]	@ (8007298 <update_control_loops+0x504>)
 8007094:	ed93 7a03 	vldr	s14, [r3, #12]
					+ (revolute_axis.target_pos - revolute_axis.initial_pos)
 8007098:	4b7f      	ldr	r3, [pc, #508]	@ (8007298 <update_control_loops+0x504>)
 800709a:	edd3 6a04 	vldr	s13, [r3, #16]
 800709e:	4b7e      	ldr	r3, [pc, #504]	@ (8007298 <update_control_loops+0x504>)
 80070a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80070a4:	ee76 6ae7 	vsub.f32	s13, s13, s15
							* smooth_progress;
 80070a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80070ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
					+ (revolute_axis.target_pos - revolute_axis.initial_pos)
 80070b0:	ee77 7a27 	vadd.f32	s15, s14, s15
			revolute_axis.position = revolute_axis.initial_pos
 80070b4:	4b78      	ldr	r3, [pc, #480]	@ (8007298 <update_control_loops+0x504>)
 80070b6:	edc3 7a00 	vstr	s15, [r3]

			// Calculate velocity (derivative of position)
			static float last_rev_pos = 0.0f;
			revolute_axis.velocity = (revolute_axis.position - last_rev_pos)
 80070ba:	4b77      	ldr	r3, [pc, #476]	@ (8007298 <update_control_loops+0x504>)
 80070bc:	ed93 7a00 	vldr	s14, [r3]
 80070c0:	4b76      	ldr	r3, [pc, #472]	@ (800729c <update_control_loops+0x508>)
 80070c2:	edd3 7a00 	vldr	s15, [r3]
 80070c6:	ee37 7a67 	vsub.f32	s14, s14, s15
					/ 0.001f; // rad/s
 80070ca:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8007280 <update_control_loops+0x4ec>
 80070ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
			revolute_axis.velocity = (revolute_axis.position - last_rev_pos)
 80070d2:	4b71      	ldr	r3, [pc, #452]	@ (8007298 <update_control_loops+0x504>)
 80070d4:	edc3 7a01 	vstr	s15, [r3, #4]
			last_rev_pos = revolute_axis.position;
 80070d8:	4b6f      	ldr	r3, [pc, #444]	@ (8007298 <update_control_loops+0x504>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a6f      	ldr	r2, [pc, #444]	@ (800729c <update_control_loops+0x508>)
 80070de:	6013      	str	r3, [r2, #0]

			if (motion_finished) {
 80070e0:	7ffb      	ldrb	r3, [r7, #31]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 8123 	beq.w	800732e <update_control_loops+0x59a>
				// Motion completed
				prismatic_axis.position = prismatic_axis.target_pos;
 80070e8:	4b69      	ldr	r3, [pc, #420]	@ (8007290 <update_control_loops+0x4fc>)
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	4a68      	ldr	r2, [pc, #416]	@ (8007290 <update_control_loops+0x4fc>)
 80070ee:	6013      	str	r3, [r2, #0]
				revolute_axis.position = revolute_axis.target_pos;
 80070f0:	4b69      	ldr	r3, [pc, #420]	@ (8007298 <update_control_loops+0x504>)
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	4a68      	ldr	r2, [pc, #416]	@ (8007298 <update_control_loops+0x504>)
 80070f6:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = 0.0f;
 80070f8:	4b65      	ldr	r3, [pc, #404]	@ (8007290 <update_control_loops+0x4fc>)
 80070fa:	f04f 0200 	mov.w	r2, #0
 80070fe:	605a      	str	r2, [r3, #4]
				revolute_axis.velocity = 0.0f;
 8007100:	4b65      	ldr	r3, [pc, #404]	@ (8007298 <update_control_loops+0x504>)
 8007102:	f04f 0200 	mov.w	r2, #0
 8007106:	605a      	str	r2, [r3, #4]

				sync_motion_active = false;
 8007108:	4b5b      	ldr	r3, [pc, #364]	@ (8007278 <update_control_loops+0x4e4>)
 800710a:	2200      	movs	r2, #0
 800710c:	701a      	strb	r2, [r3, #0]
				motion_delay_timer = 0;
 800710e:	4b64      	ldr	r3, [pc, #400]	@ (80072a0 <update_control_loops+0x50c>)
 8007110:	2200      	movs	r2, #0
 8007112:	601a      	str	r2, [r3, #0]
				motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 8007114:	4b63      	ldr	r3, [pc, #396]	@ (80072a4 <update_control_loops+0x510>)
 8007116:	2205      	movs	r2, #5
 8007118:	701a      	strb	r2, [r3, #0]
				motion_delay_timer = 0;
				motion_sequence_state = MOTION_PEN_DOWN_DELAY;
			}
		}
	}
		break;
 800711a:	e108      	b.n	800732e <update_control_loops+0x59a>
			bool pris_finished = true;  // Default to true for homing case
 800711c:	2301      	movs	r3, #1
 800711e:	75fb      	strb	r3, [r7, #23]
			bool rev_finished = false;
 8007120:	2300      	movs	r3, #0
 8007122:	75bb      	strb	r3, [r7, #22]
			if (!(homing_active && homing_state == HOMING_REV_TO_ZERO_DEG)) {
 8007124:	4b58      	ldr	r3, [pc, #352]	@ (8007288 <update_control_loops+0x4f4>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	f083 0301 	eor.w	r3, r3, #1
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	d103      	bne.n	800713a <update_control_loops+0x3a6>
 8007132:	4b56      	ldr	r3, [pc, #344]	@ (800728c <update_control_loops+0x4f8>)
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	2b07      	cmp	r3, #7
 8007138:	d048      	beq.n	80071cc <update_control_loops+0x438>
				if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 800713a:	4b55      	ldr	r3, [pc, #340]	@ (8007290 <update_control_loops+0x4fc>)
 800713c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007140:	2b00      	cmp	r3, #0
 8007142:	d043      	beq.n	80071cc <update_control_loops+0x438>
 8007144:	4b58      	ldr	r3, [pc, #352]	@ (80072a8 <update_control_loops+0x514>)
 8007146:	7c1b      	ldrb	r3, [r3, #16]
 8007148:	f083 0301 	eor.w	r3, r3, #1
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d03c      	beq.n	80071cc <update_control_loops+0x438>
					Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007152:	4b4f      	ldr	r3, [pc, #316]	@ (8007290 <update_control_loops+0x4fc>)
 8007154:	ed93 8a03 	vldr	s16, [r3, #12]
 8007158:	4b4d      	ldr	r3, [pc, #308]	@ (8007290 <update_control_loops+0x4fc>)
 800715a:	edd3 8a04 	vldr	s17, [r3, #16]
							ZGX45RGG_400RPM_Constant.traject_sd_max,
 800715e:	4b53      	ldr	r3, [pc, #332]	@ (80072ac <update_control_loops+0x518>)
 8007160:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
					Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007164:	4610      	mov	r0, r2
 8007166:	4619      	mov	r1, r3
 8007168:	f7f9 fcf4 	bl	8000b54 <__aeabi_d2f>
 800716c:	4604      	mov	r4, r0
							ZGX45RGG_400RPM_Constant.traject_sdd_max);
 800716e:	4b4f      	ldr	r3, [pc, #316]	@ (80072ac <update_control_loops+0x518>)
 8007170:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
					Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007174:	4610      	mov	r0, r2
 8007176:	4619      	mov	r1, r3
 8007178:	f7f9 fcec 	bl	8000b54 <__aeabi_d2f>
 800717c:	4603      	mov	r3, r0
 800717e:	ee01 3a90 	vmov	s3, r3
 8007182:	ee01 4a10 	vmov	s2, r4
 8007186:	eef0 0a68 	vmov.f32	s1, s17
 800718a:	eeb0 0a48 	vmov.f32	s0, s16
 800718e:	4946      	ldr	r1, [pc, #280]	@ (80072a8 <update_control_loops+0x514>)
 8007190:	4847      	ldr	r0, [pc, #284]	@ (80072b0 <update_control_loops+0x51c>)
 8007192:	f7fd f981 	bl	8004498 <Trapezoidal_Evaluated>
					prismatic_axis.position = prisEva.setposition;
 8007196:	4b44      	ldr	r3, [pc, #272]	@ (80072a8 <update_control_loops+0x514>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a3d      	ldr	r2, [pc, #244]	@ (8007290 <update_control_loops+0x4fc>)
 800719c:	6013      	str	r3, [r2, #0]
					prismatic_axis.velocity = prisEva.setvelocity;
 800719e:	4b42      	ldr	r3, [pc, #264]	@ (80072a8 <update_control_loops+0x514>)
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	4a3b      	ldr	r2, [pc, #236]	@ (8007290 <update_control_loops+0x4fc>)
 80071a4:	6053      	str	r3, [r2, #4]
					pris_finished = prisEva.isFinised;
 80071a6:	4b40      	ldr	r3, [pc, #256]	@ (80072a8 <update_control_loops+0x514>)
 80071a8:	7c1b      	ldrb	r3, [r3, #16]
 80071aa:	75fb      	strb	r3, [r7, #23]
					if (prisEva.isFinised) {
 80071ac:	4b3e      	ldr	r3, [pc, #248]	@ (80072a8 <update_control_loops+0x514>)
 80071ae:	7c1b      	ldrb	r3, [r3, #16]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00b      	beq.n	80071cc <update_control_loops+0x438>
						prismatic_axis.trajectory_active = false;
 80071b4:	4b36      	ldr	r3, [pc, #216]	@ (8007290 <update_control_loops+0x4fc>)
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
						prismatic_axis.position = prisEva.setposition;
 80071bc:	4b3a      	ldr	r3, [pc, #232]	@ (80072a8 <update_control_loops+0x514>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a33      	ldr	r2, [pc, #204]	@ (8007290 <update_control_loops+0x4fc>)
 80071c2:	6013      	str	r3, [r2, #0]
						prismatic_axis.velocity = 0.0f;
 80071c4:	4b32      	ldr	r3, [pc, #200]	@ (8007290 <update_control_loops+0x4fc>)
 80071c6:	f04f 0200 	mov.w	r2, #0
 80071ca:	605a      	str	r2, [r3, #4]
			if (revolute_axis.trajectory_active && !revEva.isFinised) {
 80071cc:	4b32      	ldr	r3, [pc, #200]	@ (8007298 <update_control_loops+0x504>)
 80071ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d043      	beq.n	800725e <update_control_loops+0x4ca>
 80071d6:	4b37      	ldr	r3, [pc, #220]	@ (80072b4 <update_control_loops+0x520>)
 80071d8:	7c1b      	ldrb	r3, [r3, #16]
 80071da:	f083 0301 	eor.w	r3, r3, #1
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d03c      	beq.n	800725e <update_control_loops+0x4ca>
				Trapezoidal_Evaluated(&revGen, &revEva,
 80071e4:	4b2c      	ldr	r3, [pc, #176]	@ (8007298 <update_control_loops+0x504>)
 80071e6:	ed93 8a03 	vldr	s16, [r3, #12]
 80071ea:	4b2b      	ldr	r3, [pc, #172]	@ (8007298 <update_control_loops+0x504>)
 80071ec:	edd3 8a04 	vldr	s17, [r3, #16]
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 80071f0:	4b31      	ldr	r3, [pc, #196]	@ (80072b8 <update_control_loops+0x524>)
 80071f2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Evaluated(&revGen, &revEva,
 80071f6:	4610      	mov	r0, r2
 80071f8:	4619      	mov	r1, r3
 80071fa:	f7f9 fcab 	bl	8000b54 <__aeabi_d2f>
 80071fe:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8007200:	4b2d      	ldr	r3, [pc, #180]	@ (80072b8 <update_control_loops+0x524>)
 8007202:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Evaluated(&revGen, &revEva,
 8007206:	4610      	mov	r0, r2
 8007208:	4619      	mov	r1, r3
 800720a:	f7f9 fca3 	bl	8000b54 <__aeabi_d2f>
 800720e:	4603      	mov	r3, r0
 8007210:	ee01 3a90 	vmov	s3, r3
 8007214:	ee01 4a10 	vmov	s2, r4
 8007218:	eef0 0a68 	vmov.f32	s1, s17
 800721c:	eeb0 0a48 	vmov.f32	s0, s16
 8007220:	4924      	ldr	r1, [pc, #144]	@ (80072b4 <update_control_loops+0x520>)
 8007222:	4826      	ldr	r0, [pc, #152]	@ (80072bc <update_control_loops+0x528>)
 8007224:	f7fd f938 	bl	8004498 <Trapezoidal_Evaluated>
				revolute_axis.position = revEva.setposition;
 8007228:	4b22      	ldr	r3, [pc, #136]	@ (80072b4 <update_control_loops+0x520>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a1a      	ldr	r2, [pc, #104]	@ (8007298 <update_control_loops+0x504>)
 800722e:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = revEva.setvelocity;
 8007230:	4b20      	ldr	r3, [pc, #128]	@ (80072b4 <update_control_loops+0x520>)
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	4a18      	ldr	r2, [pc, #96]	@ (8007298 <update_control_loops+0x504>)
 8007236:	6053      	str	r3, [r2, #4]
				rev_finished = revEva.isFinised;
 8007238:	4b1e      	ldr	r3, [pc, #120]	@ (80072b4 <update_control_loops+0x520>)
 800723a:	7c1b      	ldrb	r3, [r3, #16]
 800723c:	75bb      	strb	r3, [r7, #22]
				if (revEva.isFinised) {
 800723e:	4b1d      	ldr	r3, [pc, #116]	@ (80072b4 <update_control_loops+0x520>)
 8007240:	7c1b      	ldrb	r3, [r3, #16]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00b      	beq.n	800725e <update_control_loops+0x4ca>
					revolute_axis.trajectory_active = false;
 8007246:	4b14      	ldr	r3, [pc, #80]	@ (8007298 <update_control_loops+0x504>)
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					revolute_axis.position = revEva.setposition;
 800724e:	4b19      	ldr	r3, [pc, #100]	@ (80072b4 <update_control_loops+0x520>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a11      	ldr	r2, [pc, #68]	@ (8007298 <update_control_loops+0x504>)
 8007254:	6013      	str	r3, [r2, #0]
					revolute_axis.velocity = 0.0f;
 8007256:	4b10      	ldr	r3, [pc, #64]	@ (8007298 <update_control_loops+0x504>)
 8007258:	f04f 0200 	mov.w	r2, #0
 800725c:	605a      	str	r2, [r3, #4]
			if (pris_finished && rev_finished) {
 800725e:	7dfb      	ldrb	r3, [r7, #23]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d064      	beq.n	800732e <update_control_loops+0x59a>
 8007264:	7dbb      	ldrb	r3, [r7, #22]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d061      	beq.n	800732e <update_control_loops+0x59a>
				motion_delay_timer = 0;
 800726a:	4b0d      	ldr	r3, [pc, #52]	@ (80072a0 <update_control_loops+0x50c>)
 800726c:	2200      	movs	r2, #0
 800726e:	601a      	str	r2, [r3, #0]
				motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 8007270:	4b0c      	ldr	r3, [pc, #48]	@ (80072a4 <update_control_loops+0x510>)
 8007272:	2205      	movs	r2, #5
 8007274:	701a      	strb	r2, [r3, #0]
		break;
 8007276:	e05a      	b.n	800732e <update_control_loops+0x59a>
 8007278:	200008a4 	.word	0x200008a4
 800727c:	2000089c 	.word	0x2000089c
 8007280:	3a83126f 	.word	0x3a83126f
 8007284:	200008a0 	.word	0x200008a0
 8007288:	200007e3 	.word	0x200007e3
 800728c:	200007e2 	.word	0x200007e2
 8007290:	200006fc 	.word	0x200006fc
 8007294:	200008c8 	.word	0x200008c8
 8007298:	20000740 	.word	0x20000740
 800729c:	200008cc 	.word	0x200008cc
 80072a0:	200007d8 	.word	0x200007d8
 80072a4:	20000784 	.word	0x20000784
 80072a8:	200007b0 	.word	0x200007b0
 80072ac:	20000080 	.word	0x20000080
 80072b0:	20000788 	.word	0x20000788
 80072b4:	200007c4 	.word	0x200007c4
 80072b8:	20000000 	.word	0x20000000
 80072bc:	2000079c 	.word	0x2000079c

	case MOTION_PEN_DOWN_DELAY:
		if (++motion_delay_timer >= 1500) {
 80072c0:	4b28      	ldr	r3, [pc, #160]	@ (8007364 <update_control_loops+0x5d0>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3301      	adds	r3, #1
 80072c6:	4a27      	ldr	r2, [pc, #156]	@ (8007364 <update_control_loops+0x5d0>)
 80072c8:	6013      	str	r3, [r2, #0]
 80072ca:	f240 52db 	movw	r2, #1499	@ 0x5db
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d92f      	bls.n	8007332 <update_control_loops+0x59e>
			if (current_drawing_sequence.sequence_active
 80072d2:	4b25      	ldr	r3, [pc, #148]	@ (8007368 <update_control_loops+0x5d4>)
 80072d4:	799b      	ldrb	r3, [r3, #6]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d01b      	beq.n	8007312 <update_control_loops+0x57e>
					&& current_drawing_sequence.current_point > 0) {
 80072da:	4b23      	ldr	r3, [pc, #140]	@ (8007368 <update_control_loops+0x5d4>)
 80072dc:	795b      	ldrb	r3, [r3, #5]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d017      	beq.n	8007312 <update_control_loops+0x57e>
				// ดูสถานะปากกาจากจุดปัจจุบัน
				DrawingPoint_t current =
						current_drawing_sequence.points[current_drawing_sequence.current_point
 80072e2:	4b21      	ldr	r3, [pc, #132]	@ (8007368 <update_control_loops+0x5d4>)
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	4b20      	ldr	r3, [pc, #128]	@ (8007368 <update_control_loops+0x5d4>)
 80072e8:	795b      	ldrb	r3, [r3, #5]
 80072ea:	4619      	mov	r1, r3
 80072ec:	460b      	mov	r3, r1
 80072ee:	005b      	lsls	r3, r3, #1
 80072f0:	440b      	add	r3, r1
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	3b0c      	subs	r3, #12
 80072f6:	441a      	add	r2, r3
				DrawingPoint_t current =
 80072f8:	1d3b      	adds	r3, r7, #4
 80072fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80072fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
								- 1];

				if (current.pen_down) {
 8007300:	7b3b      	ldrb	r3, [r7, #12]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d002      	beq.n	800730c <update_control_loops+0x578>
					plotter_pen_down();
 8007306:	f002 fbcd 	bl	8009aa4 <plotter_pen_down>
					&& current_drawing_sequence.current_point > 0) {
 800730a:	e004      	b.n	8007316 <update_control_loops+0x582>
				} else {
					plotter_pen_up();
 800730c:	f002 fbba 	bl	8009a84 <plotter_pen_up>
					&& current_drawing_sequence.current_point > 0) {
 8007310:	e001      	b.n	8007316 <update_control_loops+0x582>
				}
			} else {
				// ไม่ได้วาดตัวอักษร - วางปากกาตามปกติ
				plotter_pen_down();
 8007312:	f002 fbc7 	bl	8009aa4 <plotter_pen_down>
			}
			motion_sequence_state = MOTION_COMPLETE;
 8007316:	4b15      	ldr	r3, [pc, #84]	@ (800736c <update_control_loops+0x5d8>)
 8007318:	2206      	movs	r2, #6
 800731a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800731c:	e009      	b.n	8007332 <update_control_loops+0x59e>

	case MOTION_COMPLETE:
		motion_sequence_state = MOTION_IDLE;
 800731e:	4b13      	ldr	r3, [pc, #76]	@ (800736c <update_control_loops+0x5d8>)
 8007320:	2200      	movs	r2, #0
 8007322:	701a      	strb	r2, [r3, #0]
		break;
 8007324:	e006      	b.n	8007334 <update_control_loops+0x5a0>

	default:
		break;
 8007326:	bf00      	nop
 8007328:	e004      	b.n	8007334 <update_control_loops+0x5a0>
		break;
 800732a:	bf00      	nop
 800732c:	e002      	b.n	8007334 <update_control_loops+0x5a0>
		break;
 800732e:	bf00      	nop
 8007330:	e000      	b.n	8007334 <update_control_loops+0x5a0>
		break;
 8007332:	bf00      	nop
	}

	prismatic_axis.mm = prismatic_encoder.mm;
 8007334:	4b0e      	ldr	r3, [pc, #56]	@ (8007370 <update_control_loops+0x5dc>)
 8007336:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007338:	4a0e      	ldr	r2, [pc, #56]	@ (8007374 <update_control_loops+0x5e0>)
 800733a:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 800733c:	4b0e      	ldr	r3, [pc, #56]	@ (8007378 <update_control_loops+0x5e4>)
 800733e:	edd3 7a00 	vldr	s15, [r3]
 8007342:	220e      	movs	r2, #14
 8007344:	210f      	movs	r1, #15
 8007346:	eeb0 0a67 	vmov.f32	s0, s15
 800734a:	480c      	ldr	r0, [pc, #48]	@ (800737c <update_control_loops+0x5e8>)
 800734c:	f7fd fc3c 	bl	8004bc8 <UnitConverter_angle>
 8007350:	eef0 7a40 	vmov.f32	s15, s0
 8007354:	4b0a      	ldr	r3, [pc, #40]	@ (8007380 <update_control_loops+0x5ec>)
 8007356:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);
}
 800735a:	3724      	adds	r7, #36	@ 0x24
 800735c:	46bd      	mov	sp, r7
 800735e:	ecbd 8b02 	vpop	{d8}
 8007362:	bd90      	pop	{r4, r7, pc}
 8007364:	200007d8 	.word	0x200007d8
 8007368:	200008a8 	.word	0x200008a8
 800736c:	20000784 	.word	0x20000784
 8007370:	2000097c 	.word	0x2000097c
 8007374:	200006fc 	.word	0x200006fc
 8007378:	200007f4 	.word	0x200007f4
 800737c:	20000d70 	.word	0x20000d70
 8007380:	20000740 	.word	0x20000740

08007384 <check_emergency_button>:

void check_emergency_button(void) {
 8007384:	b580      	push	{r7, lr}
 8007386:	af00      	add	r7, sp, #0
	// Read current state of emergency button
	emer_pressed = HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 8007388:	2110      	movs	r1, #16
 800738a:	480d      	ldr	r0, [pc, #52]	@ (80073c0 <check_emergency_button+0x3c>)
 800738c:	f005 fec2 	bl	800d114 <HAL_GPIO_ReadPin>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	bf14      	ite	ne
 8007396:	2301      	movne	r3, #1
 8007398:	2300      	moveq	r3, #0
 800739a:	b2da      	uxtb	r2, r3
 800739c:	4b09      	ldr	r3, [pc, #36]	@ (80073c4 <check_emergency_button+0x40>)
 800739e:	701a      	strb	r2, [r3, #0]
	// If emergency button is pressed (assuming active high)
	// Adjust the logic based on your hardware:
	// - If button is active HIGH when pressed: use == GPIO_PIN_SET
	// - If button is active LOW when pressed: use == GPIO_PIN_RESET

	if (emer_pressed == GPIO_PIN_RESET) {  // Assuming active high
 80073a0:	4b08      	ldr	r3, [pc, #32]	@ (80073c4 <check_emergency_button+0x40>)
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	f083 0301 	eor.w	r3, r3, #1
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d005      	beq.n	80073ba <check_emergency_button+0x36>
		// Emergency button is pressed - trigger hardware emergency
		if (safety_state != SAFETY_HARDWARE_EMERGENCY) {
 80073ae:	4b06      	ldr	r3, [pc, #24]	@ (80073c8 <check_emergency_button+0x44>)
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d001      	beq.n	80073ba <check_emergency_button+0x36>
			trigger_hardware_emergency();
 80073b6:	f000 f877 	bl	80074a8 <trigger_hardware_emergency>
	 // Auto-clear emergency when button released (NOT RECOMMENDED)
	 // clear_emergency_state();
	 }
	 }
	 */
}
 80073ba:	bf00      	nop
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	48000400 	.word	0x48000400
 80073c4:	2000088c 	.word	0x2000088c
 80073c8:	200007e4 	.word	0x200007e4

080073cc <check_safety_conditions>:

void check_safety_conditions(void) {
 80073cc:	b580      	push	{r7, lr}
 80073ce:	af00      	add	r7, sp, #0
	if (tuning_mode || safety_state != SAFETY_NORMAL || homing_active)
 80073d0:	4b16      	ldr	r3, [pc, #88]	@ (800742c <check_safety_conditions+0x60>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d127      	bne.n	8007428 <check_safety_conditions+0x5c>
 80073d8:	4b15      	ldr	r3, [pc, #84]	@ (8007430 <check_safety_conditions+0x64>)
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d123      	bne.n	8007428 <check_safety_conditions+0x5c>
 80073e0:	4b14      	ldr	r3, [pc, #80]	@ (8007434 <check_safety_conditions+0x68>)
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d11f      	bne.n	8007428 <check_safety_conditions+0x5c>
		return;

	if (up_photo && prismatic_axis.command_pos < 0.0f) {
 80073e8:	4b13      	ldr	r3, [pc, #76]	@ (8007438 <check_safety_conditions+0x6c>)
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00a      	beq.n	8007408 <check_safety_conditions+0x3c>
 80073f2:	4b12      	ldr	r3, [pc, #72]	@ (800743c <check_safety_conditions+0x70>)
 80073f4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80073f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80073fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007400:	d502      	bpl.n	8007408 <check_safety_conditions+0x3c>
		trigger_software_emergency();
 8007402:	f000 f81f 	bl	8007444 <trigger_software_emergency>
		return;
 8007406:	e010      	b.n	800742a <check_safety_conditions+0x5e>
	}

	if (low_photo && prismatic_axis.command_pos > 0.0f) {
 8007408:	4b0d      	ldr	r3, [pc, #52]	@ (8007440 <check_safety_conditions+0x74>)
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00b      	beq.n	800742a <check_safety_conditions+0x5e>
 8007412:	4b0a      	ldr	r3, [pc, #40]	@ (800743c <check_safety_conditions+0x70>)
 8007414:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007418:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800741c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007420:	dd03      	ble.n	800742a <check_safety_conditions+0x5e>
		trigger_software_emergency();
 8007422:	f000 f80f 	bl	8007444 <trigger_software_emergency>
		return;
 8007426:	e000      	b.n	800742a <check_safety_conditions+0x5e>
		return;
 8007428:	bf00      	nop
	}
}
 800742a:	bd80      	pop	{r7, pc}
 800742c:	20000334 	.word	0x20000334
 8007430:	200007e4 	.word	0x200007e4
 8007434:	200007e3 	.word	0x200007e3
 8007438:	200007e0 	.word	0x200007e0
 800743c:	200006fc 	.word	0x200006fc
 8007440:	200007e1 	.word	0x200007e1

08007444 <trigger_software_emergency>:

void trigger_software_emergency(void) {
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
	if (safety_state == SAFETY_NORMAL) {
 8007448:	4b10      	ldr	r3, [pc, #64]	@ (800748c <trigger_software_emergency+0x48>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d11b      	bne.n	8007488 <trigger_software_emergency+0x44>
		safety_state = SAFETY_SOFTWARE_EMERGENCY;
 8007450:	4b0e      	ldr	r3, [pc, #56]	@ (800748c <trigger_software_emergency+0x48>)
 8007452:	2201      	movs	r2, #1
 8007454:	701a      	strb	r2, [r3, #0]
		emergency_stop_all_motors();
 8007456:	f000 f88f 	bl	8007578 <emergency_stop_all_motors>
		safety_toggle_timer = 0;
 800745a:	4b0d      	ldr	r3, [pc, #52]	@ (8007490 <trigger_software_emergency+0x4c>)
 800745c:	2200      	movs	r2, #0
 800745e:	601a      	str	r2, [r3, #0]
		pilot_light_state = false;
 8007460:	4b0c      	ldr	r3, [pc, #48]	@ (8007494 <trigger_software_emergency+0x50>)
 8007462:	2200      	movs	r2, #0
 8007464:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 8007466:	4b0c      	ldr	r3, [pc, #48]	@ (8007498 <trigger_software_emergency+0x54>)
 8007468:	2200      	movs	r2, #0
 800746a:	701a      	strb	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 800746c:	4b0b      	ldr	r3, [pc, #44]	@ (800749c <trigger_software_emergency+0x58>)
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		revolute_axis.trajectory_active = false;
 8007474:	4b0a      	ldr	r3, [pc, #40]	@ (80074a0 <trigger_software_emergency+0x5c>)
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		// Exit joy mode if active
		if (joy_mode_active) {
 800747c:	4b09      	ldr	r3, [pc, #36]	@ (80074a4 <trigger_software_emergency+0x60>)
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <trigger_software_emergency+0x44>
			exit_joy_mode();
 8007484:	f000 f996 	bl	80077b4 <exit_joy_mode>
		}
	}
}
 8007488:	bf00      	nop
 800748a:	bd80      	pop	{r7, pc}
 800748c:	200007e4 	.word	0x200007e4
 8007490:	200007e8 	.word	0x200007e8
 8007494:	200007ec 	.word	0x200007ec
 8007498:	20000784 	.word	0x20000784
 800749c:	200006fc 	.word	0x200006fc
 80074a0:	20000740 	.word	0x20000740
 80074a4:	200007fd 	.word	0x200007fd

080074a8 <trigger_hardware_emergency>:

void trigger_hardware_emergency(void) {
 80074a8:	b580      	push	{r7, lr}
 80074aa:	af00      	add	r7, sp, #0
	safety_state = SAFETY_HARDWARE_EMERGENCY;
 80074ac:	4b13      	ldr	r3, [pc, #76]	@ (80074fc <trigger_hardware_emergency+0x54>)
 80074ae:	2202      	movs	r2, #2
 80074b0:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = true;
 80074b2:	4b13      	ldr	r3, [pc, #76]	@ (8007500 <trigger_hardware_emergency+0x58>)
 80074b4:	2201      	movs	r2, #1
 80074b6:	701a      	strb	r2, [r3, #0]
	emergency_stop_all_motors();
 80074b8:	f000 f85e 	bl	8007578 <emergency_stop_all_motors>
	safety_toggle_timer = 0;
 80074bc:	4b11      	ldr	r3, [pc, #68]	@ (8007504 <trigger_hardware_emergency+0x5c>)
 80074be:	2200      	movs	r2, #0
 80074c0:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 80074c2:	4b11      	ldr	r3, [pc, #68]	@ (8007508 <trigger_hardware_emergency+0x60>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	701a      	strb	r2, [r3, #0]
	homing_active = false;
 80074c8:	4b10      	ldr	r3, [pc, #64]	@ (800750c <trigger_hardware_emergency+0x64>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	701a      	strb	r2, [r3, #0]
	homing_state = HOMING_IDLE;
 80074ce:	4b10      	ldr	r3, [pc, #64]	@ (8007510 <trigger_hardware_emergency+0x68>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	701a      	strb	r2, [r3, #0]
	motion_sequence_state = MOTION_IDLE;
 80074d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007514 <trigger_hardware_emergency+0x6c>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 80074da:	4b0f      	ldr	r3, [pc, #60]	@ (8007518 <trigger_hardware_emergency+0x70>)
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 80074e2:	4b0e      	ldr	r3, [pc, #56]	@ (800751c <trigger_hardware_emergency+0x74>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Exit joy mode if active
	if (joy_mode_active) {
 80074ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007520 <trigger_hardware_emergency+0x78>)
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <trigger_hardware_emergency+0x4e>
		exit_joy_mode();
 80074f2:	f000 f95f 	bl	80077b4 <exit_joy_mode>
	}
}
 80074f6:	bf00      	nop
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	200007e4 	.word	0x200007e4
 8007500:	200007ed 	.word	0x200007ed
 8007504:	200007e8 	.word	0x200007e8
 8007508:	200007ec 	.word	0x200007ec
 800750c:	200007e3 	.word	0x200007e3
 8007510:	200007e2 	.word	0x200007e2
 8007514:	20000784 	.word	0x20000784
 8007518:	200006fc 	.word	0x200006fc
 800751c:	20000740 	.word	0x20000740
 8007520:	200007fd 	.word	0x200007fd

08007524 <clear_emergency_state>:

void clear_emergency_state(void) {
 8007524:	b580      	push	{r7, lr}
 8007526:	af00      	add	r7, sp, #0
	safety_state = SAFETY_NORMAL;
 8007528:	4b0d      	ldr	r3, [pc, #52]	@ (8007560 <clear_emergency_state+0x3c>)
 800752a:	2200      	movs	r2, #0
 800752c:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 800752e:	4b0d      	ldr	r3, [pc, #52]	@ (8007564 <clear_emergency_state+0x40>)
 8007530:	2200      	movs	r2, #0
 8007532:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 8007534:	4b0c      	ldr	r3, [pc, #48]	@ (8007568 <clear_emergency_state+0x44>)
 8007536:	2200      	movs	r2, #0
 8007538:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 800753a:	4b0c      	ldr	r3, [pc, #48]	@ (800756c <clear_emergency_state+0x48>)
 800753c:	2200      	movs	r2, #0
 800753e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8007540:	2200      	movs	r2, #0
 8007542:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007546:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800754a:	f005 fdfb 	bl	800d144 <HAL_GPIO_WritePin>
	up_photo = false;
 800754e:	4b08      	ldr	r3, [pc, #32]	@ (8007570 <clear_emergency_state+0x4c>)
 8007550:	2200      	movs	r2, #0
 8007552:	701a      	strb	r2, [r3, #0]
	low_photo = false;
 8007554:	4b07      	ldr	r3, [pc, #28]	@ (8007574 <clear_emergency_state+0x50>)
 8007556:	2200      	movs	r2, #0
 8007558:	701a      	strb	r2, [r3, #0]
}
 800755a:	bf00      	nop
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	200007e4 	.word	0x200007e4
 8007564:	200007ed 	.word	0x200007ed
 8007568:	200007e8 	.word	0x200007e8
 800756c:	200007ec 	.word	0x200007ec
 8007570:	200007e0 	.word	0x200007e0
 8007574:	200007e1 	.word	0x200007e1

08007578 <emergency_stop_all_motors>:

void emergency_stop_all_motors(void) {
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0
	MDXX_set_range(&prismatic_motor, 2000, 0);
 800757c:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80075bc <emergency_stop_all_motors+0x44>
 8007580:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 80075c0 <emergency_stop_all_motors+0x48>
 8007584:	480f      	ldr	r0, [pc, #60]	@ (80075c4 <emergency_stop_all_motors+0x4c>)
 8007586:	f7f9 fefd 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 800758a:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 80075bc <emergency_stop_all_motors+0x44>
 800758e:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80075c0 <emergency_stop_all_motors+0x48>
 8007592:	480d      	ldr	r0, [pc, #52]	@ (80075c8 <emergency_stop_all_motors+0x50>)
 8007594:	f7f9 fef6 	bl	8001384 <MDXX_set_range>

	prismatic_axis.command_pos = 0.0f;
 8007598:	4b0c      	ldr	r3, [pc, #48]	@ (80075cc <emergency_stop_all_motors+0x54>)
 800759a:	f04f 0200 	mov.w	r2, #0
 800759e:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 80075a0:	4b0b      	ldr	r3, [pc, #44]	@ (80075d0 <emergency_stop_all_motors+0x58>)
 80075a2:	f04f 0200 	mov.w	r2, #0
 80075a6:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 80075a8:	4b08      	ldr	r3, [pc, #32]	@ (80075cc <emergency_stop_all_motors+0x54>)
 80075aa:	f04f 0200 	mov.w	r2, #0
 80075ae:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 80075b0:	4b07      	ldr	r3, [pc, #28]	@ (80075d0 <emergency_stop_all_motors+0x58>)
 80075b2:	f04f 0200 	mov.w	r2, #0
 80075b6:	629a      	str	r2, [r3, #40]	@ 0x28
//	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
//	PID_CONTROLLER_Reset(&revolute_position_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);

}
 80075b8:	bf00      	nop
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	00000000 	.word	0x00000000
 80075c0:	44fa0000 	.word	0x44fa0000
 80075c4:	200008e4 	.word	0x200008e4
 80075c8:	20000930 	.word	0x20000930
 80075cc:	200006fc 	.word	0x200006fc
 80075d0:	20000740 	.word	0x20000740

080075d4 <update_safety_system>:

void update_safety_system(void) {
 80075d4:	b580      	push	{r7, lr}
 80075d6:	af00      	add	r7, sp, #0
	// Don't control pilot light if joy mode is active
	if (joy_mode_active) {
 80075d8:	4b3a      	ldr	r3, [pc, #232]	@ (80076c4 <update_safety_system+0xf0>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d16e      	bne.n	80076be <update_safety_system+0xea>
		return; // Let joy mode handle pilot light
	}

	if (safety_state == SAFETY_SOFTWARE_EMERGENCY) {
 80075e0:	4b39      	ldr	r3, [pc, #228]	@ (80076c8 <update_safety_system+0xf4>)
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d11f      	bne.n	8007628 <update_safety_system+0x54>
		if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 80075e8:	4b38      	ldr	r3, [pc, #224]	@ (80076cc <update_safety_system+0xf8>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3301      	adds	r3, #1
 80075ee:	4a37      	ldr	r2, [pc, #220]	@ (80076cc <update_safety_system+0xf8>)
 80075f0:	6013      	str	r3, [r2, #0]
 80075f2:	2bf9      	cmp	r3, #249	@ 0xf9
 80075f4:	d918      	bls.n	8007628 <update_safety_system+0x54>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 80075f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80075fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80075fe:	f005 fdb9 	bl	800d174 <HAL_GPIO_TogglePin>
			pilot_light_state = !pilot_light_state;
 8007602:	4b33      	ldr	r3, [pc, #204]	@ (80076d0 <update_safety_system+0xfc>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	b2db      	uxtb	r3, r3
 8007608:	2b00      	cmp	r3, #0
 800760a:	bf14      	ite	ne
 800760c:	2301      	movne	r3, #1
 800760e:	2300      	moveq	r3, #0
 8007610:	b2db      	uxtb	r3, r3
 8007612:	f083 0301 	eor.w	r3, r3, #1
 8007616:	b2db      	uxtb	r3, r3
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	b2da      	uxtb	r2, r3
 800761e:	4b2c      	ldr	r3, [pc, #176]	@ (80076d0 <update_safety_system+0xfc>)
 8007620:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 8007622:	4b2a      	ldr	r3, [pc, #168]	@ (80076cc <update_safety_system+0xf8>)
 8007624:	2200      	movs	r2, #0
 8007626:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_HARDWARE_EMERGENCY) {
 8007628:	4b27      	ldr	r3, [pc, #156]	@ (80076c8 <update_safety_system+0xf4>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	2b02      	cmp	r3, #2
 800762e:	d134      	bne.n	800769a <update_safety_system+0xc6>
		if (HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin) == GPIO_PIN_SET) {
 8007630:	2110      	movs	r1, #16
 8007632:	4828      	ldr	r0, [pc, #160]	@ (80076d4 <update_safety_system+0x100>)
 8007634:	f005 fd6e 	bl	800d114 <HAL_GPIO_ReadPin>
 8007638:	4603      	mov	r3, r0
 800763a:	2b01      	cmp	r3, #1
 800763c:	d120      	bne.n	8007680 <update_safety_system+0xac>
			if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 800763e:	4b23      	ldr	r3, [pc, #140]	@ (80076cc <update_safety_system+0xf8>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3301      	adds	r3, #1
 8007644:	4a21      	ldr	r2, [pc, #132]	@ (80076cc <update_safety_system+0xf8>)
 8007646:	6013      	str	r3, [r2, #0]
 8007648:	2bf9      	cmp	r3, #249	@ 0xf9
 800764a:	d926      	bls.n	800769a <update_safety_system+0xc6>
				HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 800764c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007650:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007654:	f005 fd8e 	bl	800d174 <HAL_GPIO_TogglePin>
				pilot_light_state = !pilot_light_state;
 8007658:	4b1d      	ldr	r3, [pc, #116]	@ (80076d0 <update_safety_system+0xfc>)
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	bf14      	ite	ne
 8007662:	2301      	movne	r3, #1
 8007664:	2300      	moveq	r3, #0
 8007666:	b2db      	uxtb	r3, r3
 8007668:	f083 0301 	eor.w	r3, r3, #1
 800766c:	b2db      	uxtb	r3, r3
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	b2da      	uxtb	r2, r3
 8007674:	4b16      	ldr	r3, [pc, #88]	@ (80076d0 <update_safety_system+0xfc>)
 8007676:	701a      	strb	r2, [r3, #0]
				safety_toggle_timer = 0;
 8007678:	4b14      	ldr	r3, [pc, #80]	@ (80076cc <update_safety_system+0xf8>)
 800767a:	2200      	movs	r2, #0
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	e00c      	b.n	800769a <update_safety_system+0xc6>
			}
		} else {
			HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8007680:	2200      	movs	r2, #0
 8007682:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007686:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800768a:	f005 fd5b 	bl	800d144 <HAL_GPIO_WritePin>
			pilot_light_state = false;
 800768e:	4b10      	ldr	r3, [pc, #64]	@ (80076d0 <update_safety_system+0xfc>)
 8007690:	2200      	movs	r2, #0
 8007692:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 8007694:	4b0d      	ldr	r3, [pc, #52]	@ (80076cc <update_safety_system+0xf8>)
 8007696:	2200      	movs	r2, #0
 8007698:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_NORMAL) {
 800769a:	4b0b      	ldr	r3, [pc, #44]	@ (80076c8 <update_safety_system+0xf4>)
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10e      	bne.n	80076c0 <update_safety_system+0xec>
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 80076a2:	2200      	movs	r2, #0
 80076a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80076a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80076ac:	f005 fd4a 	bl	800d144 <HAL_GPIO_WritePin>
		pilot_light_state = false;
 80076b0:	4b07      	ldr	r3, [pc, #28]	@ (80076d0 <update_safety_system+0xfc>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	701a      	strb	r2, [r3, #0]
		safety_toggle_timer = 0;
 80076b6:	4b05      	ldr	r3, [pc, #20]	@ (80076cc <update_safety_system+0xf8>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	601a      	str	r2, [r3, #0]
 80076bc:	e000      	b.n	80076c0 <update_safety_system+0xec>
		return; // Let joy mode handle pilot light
 80076be:	bf00      	nop
	}
}
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	200007fd 	.word	0x200007fd
 80076c8:	200007e4 	.word	0x200007e4
 80076cc:	200007e8 	.word	0x200007e8
 80076d0:	200007ec 	.word	0x200007ec
 80076d4:	48000400 	.word	0x48000400

080076d8 <is_emergency_active>:

bool is_emergency_active(void) {
 80076d8:	b480      	push	{r7}
 80076da:	af00      	add	r7, sp, #0
	return (safety_state != SAFETY_NORMAL);
 80076dc:	4b05      	ldr	r3, [pc, #20]	@ (80076f4 <is_emergency_active+0x1c>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	bf14      	ite	ne
 80076e4:	2301      	movne	r3, #1
 80076e6:	2300      	moveq	r3, #0
 80076e8:	b2db      	uxtb	r3, r3
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	200007e4 	.word	0x200007e4

080076f8 <enter_joy_mode>:

void enter_joy_mode(void) {
 80076f8:	b580      	push	{r7, lr}
 80076fa:	af00      	add	r7, sp, #0
	if (is_emergency_active() || homing_active || joy_mode_active) {
 80076fc:	f7ff ffec 	bl	80076d8 <is_emergency_active>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d140      	bne.n	8007788 <enter_joy_mode+0x90>
 8007706:	4b21      	ldr	r3, [pc, #132]	@ (800778c <enter_joy_mode+0x94>)
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d13c      	bne.n	8007788 <enter_joy_mode+0x90>
 800770e:	4b20      	ldr	r3, [pc, #128]	@ (8007790 <enter_joy_mode+0x98>)
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d138      	bne.n	8007788 <enter_joy_mode+0x90>
		return;
	}

	joy_mode_active = true;
 8007716:	4b1e      	ldr	r3, [pc, #120]	@ (8007790 <enter_joy_mode+0x98>)
 8007718:	2201      	movs	r2, #1
 800771a:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_INITIAL_CONTROL; // Start in initial control state
 800771c:	4b1d      	ldr	r3, [pc, #116]	@ (8007794 <enter_joy_mode+0x9c>)
 800771e:	2201      	movs	r2, #1
 8007720:	701a      	strb	r2, [r3, #0]

	// Reset all joy mode data
	reset_joy_mode_data();
 8007722:	f000 f9b9 	bl	8007a98 <reset_joy_mode_data>

	// Turn on pilot light to indicate joy mode
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 8007726:	2201      	movs	r2, #1
 8007728:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800772c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007730:	f005 fd08 	bl	800d144 <HAL_GPIO_WritePin>
	joy_mode_pilot_state = true;
 8007734:	4b18      	ldr	r3, [pc, #96]	@ (8007798 <enter_joy_mode+0xa0>)
 8007736:	2201      	movs	r2, #1
 8007738:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 800773a:	4b18      	ldr	r3, [pc, #96]	@ (800779c <enter_joy_mode+0xa4>)
 800773c:	2200      	movs	r2, #0
 800773e:	601a      	str	r2, [r3, #0]

	// Stop any current motion
	motion_sequence_state = MOTION_IDLE;
 8007740:	4b17      	ldr	r3, [pc, #92]	@ (80077a0 <enter_joy_mode+0xa8>)
 8007742:	2200      	movs	r2, #0
 8007744:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 8007746:	4b17      	ldr	r3, [pc, #92]	@ (80077a4 <enter_joy_mode+0xac>)
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 800774e:	4b16      	ldr	r3, [pc, #88]	@ (80077a8 <enter_joy_mode+0xb0>)
 8007750:	2200      	movs	r2, #0
 8007752:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Initialize position holding at current positions
	prismatic_axis.position = prismatic_encoder.mm;
 8007756:	4b15      	ldr	r3, [pc, #84]	@ (80077ac <enter_joy_mode+0xb4>)
 8007758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800775a:	4a12      	ldr	r2, [pc, #72]	@ (80077a4 <enter_joy_mode+0xac>)
 800775c:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 800775e:	4b14      	ldr	r3, [pc, #80]	@ (80077b0 <enter_joy_mode+0xb8>)
 8007760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007762:	4a11      	ldr	r2, [pc, #68]	@ (80077a8 <enter_joy_mode+0xb0>)
 8007764:	6013      	str	r3, [r2, #0]

	// Reset motor commands
	prismatic_axis.command_pos = 0.0f;
 8007766:	4b0f      	ldr	r3, [pc, #60]	@ (80077a4 <enter_joy_mode+0xac>)
 8007768:	f04f 0200 	mov.w	r2, #0
 800776c:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 800776e:	4b0e      	ldr	r3, [pc, #56]	@ (80077a8 <enter_joy_mode+0xb0>)
 8007770:	f04f 0200 	mov.w	r2, #0
 8007774:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 8007776:	4b0b      	ldr	r3, [pc, #44]	@ (80077a4 <enter_joy_mode+0xac>)
 8007778:	f04f 0200 	mov.w	r2, #0
 800777c:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 800777e:	4b0a      	ldr	r3, [pc, #40]	@ (80077a8 <enter_joy_mode+0xb0>)
 8007780:	f04f 0200 	mov.w	r2, #0
 8007784:	629a      	str	r2, [r3, #40]	@ 0x28
 8007786:	e000      	b.n	800778a <enter_joy_mode+0x92>
		return;
 8007788:	bf00      	nop
	// Reset PID controllers
//	PID_CONTROLLER_Reset(&prismatic_position_pid);
//	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
//	PID_CONTROLLER_Reset(&revolute_position_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);
}
 800778a:	bd80      	pop	{r7, pc}
 800778c:	200007e3 	.word	0x200007e3
 8007790:	200007fd 	.word	0x200007fd
 8007794:	200007fc 	.word	0x200007fc
 8007798:	20000858 	.word	0x20000858
 800779c:	20000854 	.word	0x20000854
 80077a0:	20000784 	.word	0x20000784
 80077a4:	200006fc 	.word	0x200006fc
 80077a8:	20000740 	.word	0x20000740
 80077ac:	2000097c 	.word	0x2000097c
 80077b0:	200009d8 	.word	0x200009d8

080077b4 <exit_joy_mode>:

/* Updated exit joy mode to handle cleanup properly */
void exit_joy_mode(void) {
 80077b4:	b580      	push	{r7, lr}
 80077b6:	af00      	add	r7, sp, #0
	joy_mode_active = false;
 80077b8:	4b2c      	ldr	r3, [pc, #176]	@ (800786c <exit_joy_mode+0xb8>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_IDLE;
 80077be:	4b2c      	ldr	r3, [pc, #176]	@ (8007870 <exit_joy_mode+0xbc>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	701a      	strb	r2, [r3, #0]

	// Reset all data
	reset_joy_mode_data();
 80077c4:	f000 f968 	bl	8007a98 <reset_joy_mode_data>

	// Turn off pilot light
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 80077c8:	2200      	movs	r2, #0
 80077ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80077ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80077d2:	f005 fcb7 	bl	800d144 <HAL_GPIO_WritePin>
	joy_mode_pilot_state = false;
 80077d6:	4b27      	ldr	r3, [pc, #156]	@ (8007874 <exit_joy_mode+0xc0>)
 80077d8:	2200      	movs	r2, #0
 80077da:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 80077dc:	4b26      	ldr	r3, [pc, #152]	@ (8007878 <exit_joy_mode+0xc4>)
 80077de:	2200      	movs	r2, #0
 80077e0:	601a      	str	r2, [r3, #0]

	// DON'T stop motors - hold current position
	// Set current positions as target positions for holding
	prismatic_axis.position = prismatic_encoder.mm;
 80077e2:	4b26      	ldr	r3, [pc, #152]	@ (800787c <exit_joy_mode+0xc8>)
 80077e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077e6:	4a26      	ldr	r2, [pc, #152]	@ (8007880 <exit_joy_mode+0xcc>)
 80077e8:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 80077ea:	4b26      	ldr	r3, [pc, #152]	@ (8007884 <exit_joy_mode+0xd0>)
 80077ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ee:	4a26      	ldr	r2, [pc, #152]	@ (8007888 <exit_joy_mode+0xd4>)
 80077f0:	6013      	str	r3, [r2, #0]

	// Reset velocities and feedforward terms
	prismatic_axis.command_vel = 0.0f;
 80077f2:	4b23      	ldr	r3, [pc, #140]	@ (8007880 <exit_joy_mode+0xcc>)
 80077f4:	f04f 0200 	mov.w	r2, #0
 80077f8:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 80077fa:	4b23      	ldr	r3, [pc, #140]	@ (8007888 <exit_joy_mode+0xd4>)
 80077fc:	f04f 0200 	mov.w	r2, #0
 8007800:	629a      	str	r2, [r3, #40]	@ 0x28
	prismatic_axis.ffd = 0.0f;
 8007802:	4b1f      	ldr	r3, [pc, #124]	@ (8007880 <exit_joy_mode+0xcc>)
 8007804:	f04f 0200 	mov.w	r2, #0
 8007808:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_axis.dfd = 0.0f;
 800780a:	4b1d      	ldr	r3, [pc, #116]	@ (8007880 <exit_joy_mode+0xcc>)
 800780c:	f04f 0200 	mov.w	r2, #0
 8007810:	62da      	str	r2, [r3, #44]	@ 0x2c
	revolute_axis.ffd = 0.0f;
 8007812:	4b1d      	ldr	r3, [pc, #116]	@ (8007888 <exit_joy_mode+0xd4>)
 8007814:	f04f 0200 	mov.w	r2, #0
 8007818:	631a      	str	r2, [r3, #48]	@ 0x30

	// Keep DFD for revolute axis (gravity compensation)
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 800781a:	4b1a      	ldr	r3, [pc, #104]	@ (8007884 <exit_joy_mode+0xd0>)
 800781c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8007820:	4b16      	ldr	r3, [pc, #88]	@ (800787c <exit_joy_mode+0xc8>)
 8007822:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007826:	ed9f 6a19 	vldr	s12, [pc, #100]	@ 800788c <exit_joy_mode+0xd8>
 800782a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800782e:	eef0 0a66 	vmov.f32	s1, s13
 8007832:	eeb0 0a47 	vmov.f32	s0, s14
 8007836:	4816      	ldr	r0, [pc, #88]	@ (8007890 <exit_joy_mode+0xdc>)
 8007838:	f7f9 ff1f 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 800783c:	eef0 7a40 	vmov.f32	s15, s0
 8007840:	4b11      	ldr	r3, [pc, #68]	@ (8007888 <exit_joy_mode+0xd4>)
 8007842:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
//	PID_CONTROLLER_Reset(&revolute_position_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);

	// Reset motion state
	motion_sequence_state = MOTION_IDLE;
 8007846:	4b13      	ldr	r3, [pc, #76]	@ (8007894 <exit_joy_mode+0xe0>)
 8007848:	2200      	movs	r2, #0
 800784a:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 800784c:	4b0c      	ldr	r3, [pc, #48]	@ (8007880 <exit_joy_mode+0xcc>)
 800784e:	2200      	movs	r2, #0
 8007850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8007854:	4b0c      	ldr	r3, [pc, #48]	@ (8007888 <exit_joy_mode+0xd4>)
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	//modbus reset state
	registerFrame[BaseSystem_Status].U16 = 0;
 800785c:	4b0e      	ldr	r3, [pc, #56]	@ (8007898 <exit_joy_mode+0xe4>)
 800785e:	2200      	movs	r2, #0
 8007860:	805a      	strh	r2, [r3, #2]
	registerFrame[R_Theta_Status].U16 = 0;
 8007862:	4b0d      	ldr	r3, [pc, #52]	@ (8007898 <exit_joy_mode+0xe4>)
 8007864:	2200      	movs	r2, #0
 8007866:	841a      	strh	r2, [r3, #32]
}
 8007868:	bf00      	nop
 800786a:	bd80      	pop	{r7, pc}
 800786c:	200007fd 	.word	0x200007fd
 8007870:	200007fc 	.word	0x200007fc
 8007874:	20000858 	.word	0x20000858
 8007878:	20000854 	.word	0x20000854
 800787c:	2000097c 	.word	0x2000097c
 8007880:	200006fc 	.word	0x200006fc
 8007884:	200009d8 	.word	0x200009d8
 8007888:	20000740 	.word	0x20000740
 800788c:	447a0000 	.word	0x447a0000
 8007890:	20000b0c 	.word	0x20000b0c
 8007894:	20000784 	.word	0x20000784
 8007898:	20001580 	.word	0x20001580

0800789c <save_current_position>:

void save_current_position(void) {
 800789c:	b580      	push	{r7, lr}
 800789e:	b088      	sub	sp, #32
 80078a0:	af00      	add	r7, sp, #0
	if (saved_position_count < JOY_MODE_MAX_POSITIONS) {
 80078a2:	4b50      	ldr	r3, [pc, #320]	@ (80079e4 <save_current_position+0x148>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	2b09      	cmp	r3, #9
 80078a8:	f200 8098 	bhi.w	80079dc <save_current_position+0x140>
		float current_pris = prismatic_encoder.mm;
 80078ac:	4b4e      	ldr	r3, [pc, #312]	@ (80079e8 <save_current_position+0x14c>)
 80078ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078b0:	61fb      	str	r3, [r7, #28]
		float current_rev = revolute_encoder.rads;
 80078b2:	4b4e      	ldr	r3, [pc, #312]	@ (80079ec <save_current_position+0x150>)
 80078b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b6:	61bb      	str	r3, [r7, #24]

		bool too_similar = false;
 80078b8:	2300      	movs	r3, #0
 80078ba:	75fb      	strb	r3, [r7, #23]
		if (saved_position_count > 0) {
 80078bc:	4b49      	ldr	r3, [pc, #292]	@ (80079e4 <save_current_position+0x148>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d031      	beq.n	8007928 <save_current_position+0x8c>
			float last_pris =
					saved_positions[saved_position_count - 1].prismatic_pos;
 80078c4:	4b47      	ldr	r3, [pc, #284]	@ (80079e4 <save_current_position+0x148>)
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	3b01      	subs	r3, #1
			float last_pris =
 80078ca:	4a49      	ldr	r2, [pc, #292]	@ (80079f0 <save_current_position+0x154>)
 80078cc:	00db      	lsls	r3, r3, #3
 80078ce:	4413      	add	r3, r2
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	613b      	str	r3, [r7, #16]
			float last_rev =
					saved_positions[saved_position_count - 1].revolute_pos;
 80078d4:	4b43      	ldr	r3, [pc, #268]	@ (80079e4 <save_current_position+0x148>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	3b01      	subs	r3, #1
			float last_rev =
 80078da:	4a45      	ldr	r2, [pc, #276]	@ (80079f0 <save_current_position+0x154>)
 80078dc:	00db      	lsls	r3, r3, #3
 80078de:	4413      	add	r3, r2
 80078e0:	3304      	adds	r3, #4
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	60fb      	str	r3, [r7, #12]

			if (fabsf(current_pris - last_pris) < 5.0f
 80078e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80078ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80078ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078f2:	eef0 7ae7 	vabs.f32	s15, s15
 80078f6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80078fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007902:	d511      	bpl.n	8007928 <save_current_position+0x8c>
					&& fabsf(current_rev - last_rev) < 0.1f) {
 8007904:	ed97 7a06 	vldr	s14, [r7, #24]
 8007908:	edd7 7a03 	vldr	s15, [r7, #12]
 800790c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007910:	eef0 7ae7 	vabs.f32	s15, s15
 8007914:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80079f4 <save_current_position+0x158>
 8007918:	eef4 7ac7 	vcmpe.f32	s15, s14
 800791c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007920:	d502      	bpl.n	8007928 <save_current_position+0x8c>
				too_similar = true;
 8007922:	2301      	movs	r3, #1
 8007924:	75fb      	strb	r3, [r7, #23]
				// DEBUG: Position too similar, not saving
				return;// Exit early if too similar
 8007926:	e059      	b.n	80079dc <save_current_position+0x140>
			}
		}

		// Only reach here if position should be saved
		saved_positions[saved_position_count].prismatic_pos = current_pris;
 8007928:	4b2e      	ldr	r3, [pc, #184]	@ (80079e4 <save_current_position+0x148>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	4a30      	ldr	r2, [pc, #192]	@ (80079f0 <save_current_position+0x154>)
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	4413      	add	r3, r2
 8007932:	69fa      	ldr	r2, [r7, #28]
 8007934:	601a      	str	r2, [r3, #0]
		saved_positions[saved_position_count].revolute_pos = current_rev;
 8007936:	4b2b      	ldr	r3, [pc, #172]	@ (80079e4 <save_current_position+0x148>)
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	4a2d      	ldr	r2, [pc, #180]	@ (80079f0 <save_current_position+0x154>)
 800793c:	00db      	lsls	r3, r3, #3
 800793e:	4413      	add	r3, r2
 8007940:	3304      	adds	r3, #4
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	601a      	str	r2, [r3, #0]

		uint8_t r_addr = 0x20 + saved_position_count * 2;
 8007946:	4b27      	ldr	r3, [pc, #156]	@ (80079e4 <save_current_position+0x148>)
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	3310      	adds	r3, #16
 800794c:	b2db      	uxtb	r3, r3
 800794e:	005b      	lsls	r3, r3, #1
 8007950:	72fb      	strb	r3, [r7, #11]
		uint8_t t_addr = r_addr + 1;
 8007952:	7afb      	ldrb	r3, [r7, #11]
 8007954:	3301      	adds	r3, #1
 8007956:	72bb      	strb	r3, [r7, #10]

		if (r_addr <= 0x38 && t_addr <= 0x39) {
 8007958:	7afb      	ldrb	r3, [r7, #11]
 800795a:	2b38      	cmp	r3, #56	@ 0x38
 800795c:	d82e      	bhi.n	80079bc <save_current_position+0x120>
 800795e:	7abb      	ldrb	r3, [r7, #10]
 8007960:	2b39      	cmp	r3, #57	@ 0x39
 8007962:	d82b      	bhi.n	80079bc <save_current_position+0x120>
			int16_t r_mm_fixed = (int16_t) (current_pris * 10.0);
 8007964:	69f8      	ldr	r0, [r7, #28]
 8007966:	f7f8 fdbb 	bl	80004e0 <__aeabi_f2d>
 800796a:	f04f 0200 	mov.w	r2, #0
 800796e:	4b22      	ldr	r3, [pc, #136]	@ (80079f8 <save_current_position+0x15c>)
 8007970:	f7f8 fe0e 	bl	8000590 <__aeabi_dmul>
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	4610      	mov	r0, r2
 800797a:	4619      	mov	r1, r3
 800797c:	f7f9 f8a2 	bl	8000ac4 <__aeabi_d2iz>
 8007980:	4603      	mov	r3, r0
 8007982:	813b      	strh	r3, [r7, #8]
			int16_t t_deg_fixed = (int16_t) (revolute_axis.deg * 10.0);
 8007984:	4b1d      	ldr	r3, [pc, #116]	@ (80079fc <save_current_position+0x160>)
 8007986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007988:	4618      	mov	r0, r3
 800798a:	f7f8 fda9 	bl	80004e0 <__aeabi_f2d>
 800798e:	f04f 0200 	mov.w	r2, #0
 8007992:	4b19      	ldr	r3, [pc, #100]	@ (80079f8 <save_current_position+0x15c>)
 8007994:	f7f8 fdfc 	bl	8000590 <__aeabi_dmul>
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	4610      	mov	r0, r2
 800799e:	4619      	mov	r1, r3
 80079a0:	f7f9 f890 	bl	8000ac4 <__aeabi_d2iz>
 80079a4:	4603      	mov	r3, r0
 80079a6:	80fb      	strh	r3, [r7, #6]

			registerFrame[r_addr].U16 = r_mm_fixed;
 80079a8:	7afb      	ldrb	r3, [r7, #11]
 80079aa:	8939      	ldrh	r1, [r7, #8]
 80079ac:	4a14      	ldr	r2, [pc, #80]	@ (8007a00 <save_current_position+0x164>)
 80079ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			registerFrame[t_addr].U16 = t_deg_fixed;
 80079b2:	7abb      	ldrb	r3, [r7, #10]
 80079b4:	88f9      	ldrh	r1, [r7, #6]
 80079b6:	4a12      	ldr	r2, [pc, #72]	@ (8007a00 <save_current_position+0x164>)
 80079b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		saved_position_count++;
 80079bc:	4b09      	ldr	r3, [pc, #36]	@ (80079e4 <save_current_position+0x148>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	3301      	adds	r3, #1
 80079c2:	b2da      	uxtb	r2, r3
 80079c4:	4b07      	ldr	r3, [pc, #28]	@ (80079e4 <save_current_position+0x148>)
 80079c6:	701a      	strb	r2, [r3, #0]

		if (saved_position_count >= JOY_MODE_MAX_POSITIONS) {
 80079c8:	4b06      	ldr	r3, [pc, #24]	@ (80079e4 <save_current_position+0x148>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	2b09      	cmp	r3, #9
 80079ce:	d905      	bls.n	80079dc <save_current_position+0x140>
			joy_mode_state = JOY_MODE_POSITION_SAVED;
 80079d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007a04 <save_current_position+0x168>)
 80079d2:	2203      	movs	r2, #3
 80079d4:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 80079d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007a08 <save_current_position+0x16c>)
 80079d8:	2200      	movs	r2, #0
 80079da:	601a      	str	r2, [r3, #0]
		}
	}
}
 80079dc:	3720      	adds	r7, #32
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	20000850 	.word	0x20000850
 80079e8:	2000097c 	.word	0x2000097c
 80079ec:	200009d8 	.word	0x200009d8
 80079f0:	20000800 	.word	0x20000800
 80079f4:	3dcccccd 	.word	0x3dcccccd
 80079f8:	40240000 	.word	0x40240000
 80079fc:	20000740 	.word	0x20000740
 8007a00:	20001580 	.word	0x20001580
 8007a04:	200007fc 	.word	0x200007fc
 8007a08:	20000854 	.word	0x20000854

08007a0c <start_position_playback>:

void start_position_playback(void) {
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0

	if (saved_position_count > 0) {
 8007a12:	4b19      	ldr	r3, [pc, #100]	@ (8007a78 <start_position_playback+0x6c>)
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d02a      	beq.n	8007a70 <start_position_playback+0x64>
		playback_position_index = 0;
 8007a1a:	4b18      	ldr	r3, [pc, #96]	@ (8007a7c <start_position_playback+0x70>)
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	701a      	strb	r2, [r3, #0]
		joy_mode_playback_timer = 0;
 8007a20:	4b17      	ldr	r3, [pc, #92]	@ (8007a80 <start_position_playback+0x74>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]
		joy_mode_state = JOY_MODE_PLAYBACK;
 8007a26:	4b17      	ldr	r3, [pc, #92]	@ (8007a84 <start_position_playback+0x78>)
 8007a28:	2204      	movs	r2, #4
 8007a2a:	701a      	strb	r2, [r3, #0]
		// Keep pilot light ON during playback (don't turn it off)
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007a32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007a36:	f005 fb85 	bl	800d144 <HAL_GPIO_WritePin>
		joy_mode_pilot_state = true;
 8007a3a:	4b13      	ldr	r3, [pc, #76]	@ (8007a88 <start_position_playback+0x7c>)
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	701a      	strb	r2, [r3, #0]

		// Start first trajectory
		float target_pris = saved_positions[0].prismatic_pos;
 8007a40:	4b12      	ldr	r3, [pc, #72]	@ (8007a8c <start_position_playback+0x80>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	60fb      	str	r3, [r7, #12]
		float target_rev_rad = saved_positions[0].revolute_pos;
 8007a46:	4b11      	ldr	r3, [pc, #68]	@ (8007a8c <start_position_playback+0x80>)
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	60bb      	str	r3, [r7, #8]
		float target_rev_deg = target_rev_rad * 180.0f / PI;
 8007a4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007a50:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007a90 <start_position_playback+0x84>
 8007a54:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007a58:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8007a94 <start_position_playback+0x88>
 8007a5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007a60:	edc7 7a01 	vstr	s15, [r7, #4]

		start_combined_trajectory(target_pris, target_rev_deg);
 8007a64:	edd7 0a01 	vldr	s1, [r7, #4]
 8007a68:	ed97 0a03 	vldr	s0, [r7, #12]
 8007a6c:	f7fe fc80 	bl	8006370 <start_combined_trajectory>

	}
}
 8007a70:	bf00      	nop
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	20000850 	.word	0x20000850
 8007a7c:	20000851 	.word	0x20000851
 8007a80:	2000085c 	.word	0x2000085c
 8007a84:	200007fc 	.word	0x200007fc
 8007a88:	20000858 	.word	0x20000858
 8007a8c:	20000800 	.word	0x20000800
 8007a90:	43340000 	.word	0x43340000
 8007a94:	40490fdb 	.word	0x40490fdb

08007a98 <reset_joy_mode_data>:

void reset_joy_mode_data(void) {
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
	// Reset saved position count
	saved_position_count = 0;
 8007a9e:	4b19      	ldr	r3, [pc, #100]	@ (8007b04 <reset_joy_mode_data+0x6c>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	701a      	strb	r2, [r3, #0]

	// Reset playback index
	playback_position_index = 0;
 8007aa4:	4b18      	ldr	r3, [pc, #96]	@ (8007b08 <reset_joy_mode_data+0x70>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	701a      	strb	r2, [r3, #0]

	// Clear all saved positions
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 8007aaa:	2300      	movs	r3, #0
 8007aac:	607b      	str	r3, [r7, #4]
 8007aae:	e011      	b.n	8007ad4 <reset_joy_mode_data+0x3c>
		saved_positions[i].prismatic_pos = 0.0f;
 8007ab0:	4a16      	ldr	r2, [pc, #88]	@ (8007b0c <reset_joy_mode_data+0x74>)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	00db      	lsls	r3, r3, #3
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f04f 0200 	mov.w	r2, #0
 8007abc:	601a      	str	r2, [r3, #0]
		saved_positions[i].revolute_pos = 0.0f;
 8007abe:	4a13      	ldr	r2, [pc, #76]	@ (8007b0c <reset_joy_mode_data+0x74>)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	00db      	lsls	r3, r3, #3
 8007ac4:	4413      	add	r3, r2
 8007ac6:	3304      	adds	r3, #4
 8007ac8:	f04f 0200 	mov.w	r2, #0
 8007acc:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	607b      	str	r3, [r7, #4]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b09      	cmp	r3, #9
 8007ad8:	ddea      	ble.n	8007ab0 <reset_joy_mode_data+0x18>
	}

	// Reset pilot light timers
	joy_mode_pilot_timer = 0;
 8007ada:	4b0d      	ldr	r3, [pc, #52]	@ (8007b10 <reset_joy_mode_data+0x78>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	601a      	str	r2, [r3, #0]
	joy_mode_pilot_state = false;
 8007ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8007b14 <reset_joy_mode_data+0x7c>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	701a      	strb	r2, [r3, #0]

	// Reset playback timer
	joy_mode_playback_timer = 0;
 8007ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8007b18 <reset_joy_mode_data+0x80>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	601a      	str	r2, [r3, #0]

	// Reset button states
	joy_mode_b2_pressed = false;
 8007aec:	4b0b      	ldr	r3, [pc, #44]	@ (8007b1c <reset_joy_mode_data+0x84>)
 8007aee:	2200      	movs	r2, #0
 8007af0:	701a      	strb	r2, [r3, #0]
	joy_mode_b2_last_state = false;
 8007af2:	4b0b      	ldr	r3, [pc, #44]	@ (8007b20 <reset_joy_mode_data+0x88>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	701a      	strb	r2, [r3, #0]
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr
 8007b04:	20000850 	.word	0x20000850
 8007b08:	20000851 	.word	0x20000851
 8007b0c:	20000800 	.word	0x20000800
 8007b10:	20000854 	.word	0x20000854
 8007b14:	20000858 	.word	0x20000858
 8007b18:	2000085c 	.word	0x2000085c
 8007b1c:	20000860 	.word	0x20000860
 8007b20:	20000861 	.word	0x20000861
 8007b24:	00000000 	.word	0x00000000

08007b28 <update_joy_mode_velocity_control>:

void update_joy_mode_velocity_control(void) {
 8007b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	ed2d 8b02 	vpush	{d8}
 8007b30:	b08d      	sub	sp, #52	@ 0x34
 8007b32:	af00      	add	r7, sp, #0
	// Read current photo sensor states directly
	bool up_photo_detected = HAL_GPIO_ReadPin(upperphoto_GPIO_Port,
 8007b34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007b38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007b3c:	f005 faea 	bl	800d114 <HAL_GPIO_ReadPin>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	bf14      	ite	ne
 8007b46:	2301      	movne	r3, #1
 8007b48:	2300      	moveq	r3, #0
 8007b4a:	76fb      	strb	r3, [r7, #27]
	upperphoto_Pin);
	bool low_photo_detected = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 8007b4c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007b50:	48a1      	ldr	r0, [pc, #644]	@ (8007dd8 <update_joy_mode_velocity_control+0x2b0>)
 8007b52:	f005 fadf 	bl	800d114 <HAL_GPIO_ReadPin>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	bf14      	ite	ne
 8007b5c:	2301      	movne	r3, #1
 8007b5e:	2300      	moveq	r3, #0
 8007b60:	76bb      	strb	r3, [r7, #26]
	LOWER_PHOTO_Pin);

	// Prismatic axis control based on joystick_x
	float pris_command_vel = 0.0f;
 8007b62:	f04f 0300 	mov.w	r3, #0
 8007b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
	bool pris_moving = false;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	static bool pris_was_moving = false; // Track previous moving state

	// Process prismatic axis joystick control (FIXED LOGIC)
	if (up_photo_detected && joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 8007b6e:	7efb      	ldrb	r3, [r7, #27]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00d      	beq.n	8007b90 <update_joy_mode_velocity_control+0x68>
 8007b74:	4b99      	ldr	r3, [pc, #612]	@ (8007ddc <update_joy_mode_velocity_control+0x2b4>)
 8007b76:	edd3 7a00 	vldr	s15, [r3]
 8007b7a:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8007de0 <update_joy_mode_velocity_control+0x2b8>
 8007b7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b86:	dd03      	ble.n	8007b90 <update_joy_mode_velocity_control+0x68>
		// At up photo and trying to go up (negative direction) - block movement
		pris_command_vel = 0.0f;
 8007b88:	f04f 0300 	mov.w	r3, #0
 8007b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b8e:	e048      	b.n	8007c22 <update_joy_mode_velocity_control+0xfa>
	} else if (low_photo_detected && joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 8007b90:	7ebb      	ldrb	r3, [r7, #26]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00d      	beq.n	8007bb2 <update_joy_mode_velocity_control+0x8a>
 8007b96:	4b91      	ldr	r3, [pc, #580]	@ (8007ddc <update_joy_mode_velocity_control+0x2b4>)
 8007b98:	edd3 7a00 	vldr	s15, [r3]
 8007b9c:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8007de4 <update_joy_mode_velocity_control+0x2bc>
 8007ba0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba8:	d503      	bpl.n	8007bb2 <update_joy_mode_velocity_control+0x8a>
		// At low photo and trying to go down (positive direction) - block movement
		pris_command_vel = 0.0f;
 8007baa:	f04f 0300 	mov.w	r3, #0
 8007bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bb0:	e037      	b.n	8007c22 <update_joy_mode_velocity_control+0xfa>
	} else if (joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 8007bb2:	4b8a      	ldr	r3, [pc, #552]	@ (8007ddc <update_joy_mode_velocity_control+0x2b4>)
 8007bb4:	edd3 7a00 	vldr	s15, [r3]
 8007bb8:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8007de4 <update_joy_mode_velocity_control+0x2bc>
 8007bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc4:	d50e      	bpl.n	8007be4 <update_joy_mode_velocity_control+0xbc>
		// Moving down (positive direction)
		pris_command_vel = JOY_MODE_CONSTANT_VELOCITY_PRIS;
 8007bc6:	4b88      	ldr	r3, [pc, #544]	@ (8007de8 <update_joy_mode_velocity_control+0x2c0>)
 8007bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = true;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		// Clear flags when moving away from sensors
		if (!low_photo_detected) {
 8007bd0:	7ebb      	ldrb	r3, [r7, #26]
 8007bd2:	f083 0301 	eor.w	r3, r3, #1
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d022      	beq.n	8007c22 <update_joy_mode_velocity_control+0xfa>
			up_photo = false;
 8007bdc:	4b83      	ldr	r3, [pc, #524]	@ (8007dec <update_joy_mode_velocity_control+0x2c4>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	701a      	strb	r2, [r3, #0]
 8007be2:	e01e      	b.n	8007c22 <update_joy_mode_velocity_control+0xfa>
		}
	} else if (joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 8007be4:	4b7d      	ldr	r3, [pc, #500]	@ (8007ddc <update_joy_mode_velocity_control+0x2b4>)
 8007be6:	edd3 7a00 	vldr	s15, [r3]
 8007bea:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8007de0 <update_joy_mode_velocity_control+0x2b8>
 8007bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bf6:	dd0e      	ble.n	8007c16 <update_joy_mode_velocity_control+0xee>
		// Moving up (negative direction)
		pris_command_vel = -JOY_MODE_CONSTANT_VELOCITY_PRIS;
 8007bf8:	4b7d      	ldr	r3, [pc, #500]	@ (8007df0 <update_joy_mode_velocity_control+0x2c8>)
 8007bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = true;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		// Clear flags when moving away from sensors
		if (!up_photo_detected) {
 8007c02:	7efb      	ldrb	r3, [r7, #27]
 8007c04:	f083 0301 	eor.w	r3, r3, #1
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d009      	beq.n	8007c22 <update_joy_mode_velocity_control+0xfa>
			low_photo = false;
 8007c0e:	4b79      	ldr	r3, [pc, #484]	@ (8007df4 <update_joy_mode_velocity_control+0x2cc>)
 8007c10:	2200      	movs	r2, #0
 8007c12:	701a      	strb	r2, [r3, #0]
 8007c14:	e005      	b.n	8007c22 <update_joy_mode_velocity_control+0xfa>
		}
	} else {
		// Joystick in deadband - hold position
		pris_command_vel = 0.0f;
 8007c16:	f04f 0300 	mov.w	r3, #0
 8007c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = false;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	}

	// Revolute axis control based on joystick_y
	float rev_command_vel = 0.0f;
 8007c22:	f04f 0300 	mov.w	r3, #0
 8007c26:	627b      	str	r3, [r7, #36]	@ 0x24
	bool rev_moving = false;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	// Get current revolute position in degrees for limit checking
	float revolute_deg = UnitConverter_angle(&converter_system,
 8007c2e:	4b72      	ldr	r3, [pc, #456]	@ (8007df8 <update_joy_mode_velocity_control+0x2d0>)
 8007c30:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8007c34:	220e      	movs	r2, #14
 8007c36:	210f      	movs	r1, #15
 8007c38:	eeb0 0a67 	vmov.f32	s0, s15
 8007c3c:	486f      	ldr	r0, [pc, #444]	@ (8007dfc <update_joy_mode_velocity_control+0x2d4>)
 8007c3e:	f7fc ffc3 	bl	8004bc8 <UnitConverter_angle>
 8007c42:	ed87 0a05 	vstr	s0, [r7, #20]
			revolute_encoder.rads, UNIT_RADIAN, UNIT_DEGREE);

	// Process revolute axis joystick control with limits
	if ((revolute_deg > 175.0f && joystick_y > JOY_MODE_VELOCITY_THRESHOLD)
 8007c46:	edd7 7a05 	vldr	s15, [r7, #20]
 8007c4a:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8007e00 <update_joy_mode_velocity_control+0x2d8>
 8007c4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c56:	dd09      	ble.n	8007c6c <update_joy_mode_velocity_control+0x144>
 8007c58:	4b6a      	ldr	r3, [pc, #424]	@ (8007e04 <update_joy_mode_velocity_control+0x2dc>)
 8007c5a:	edd3 7a00 	vldr	s15, [r3]
 8007c5e:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8007de0 <update_joy_mode_velocity_control+0x2b8>
 8007c62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c6a:	dc12      	bgt.n	8007c92 <update_joy_mode_velocity_control+0x16a>
			|| (revolute_deg < -175.0f
 8007c6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007c70:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8007e08 <update_joy_mode_velocity_control+0x2e0>
 8007c74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c7c:	d510      	bpl.n	8007ca0 <update_joy_mode_velocity_control+0x178>
					&& joystick_y < -JOY_MODE_VELOCITY_THRESHOLD)) {
 8007c7e:	4b61      	ldr	r3, [pc, #388]	@ (8007e04 <update_joy_mode_velocity_control+0x2dc>)
 8007c80:	edd3 7a00 	vldr	s15, [r3]
 8007c84:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8007de4 <update_joy_mode_velocity_control+0x2bc>
 8007c88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c90:	d506      	bpl.n	8007ca0 <update_joy_mode_velocity_control+0x178>
		// At revolute limits - block movement
		rev_command_vel = 0.0f;
 8007c92:	f04f 0300 	mov.w	r3, #0
 8007c96:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = false;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c9e:	e025      	b.n	8007cec <update_joy_mode_velocity_control+0x1c4>
	} else if (joystick_y > JOY_MODE_VELOCITY_THRESHOLD) {
 8007ca0:	4b58      	ldr	r3, [pc, #352]	@ (8007e04 <update_joy_mode_velocity_control+0x2dc>)
 8007ca2:	edd3 7a00 	vldr	s15, [r3]
 8007ca6:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8007de0 <update_joy_mode_velocity_control+0x2b8>
 8007caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cb2:	dd05      	ble.n	8007cc0 <update_joy_mode_velocity_control+0x198>
		rev_command_vel = JOY_MODE_CONSTANT_VELOCITY_REV;
 8007cb4:	4b55      	ldr	r3, [pc, #340]	@ (8007e0c <update_joy_mode_velocity_control+0x2e4>)
 8007cb6:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = true;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cbe:	e015      	b.n	8007cec <update_joy_mode_velocity_control+0x1c4>
	} else if (joystick_y < -JOY_MODE_VELOCITY_THRESHOLD) {
 8007cc0:	4b50      	ldr	r3, [pc, #320]	@ (8007e04 <update_joy_mode_velocity_control+0x2dc>)
 8007cc2:	edd3 7a00 	vldr	s15, [r3]
 8007cc6:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8007de4 <update_joy_mode_velocity_control+0x2bc>
 8007cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cd2:	d505      	bpl.n	8007ce0 <update_joy_mode_velocity_control+0x1b8>
		rev_command_vel = -JOY_MODE_CONSTANT_VELOCITY_REV;
 8007cd4:	4b4e      	ldr	r3, [pc, #312]	@ (8007e10 <update_joy_mode_velocity_control+0x2e8>)
 8007cd6:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = true;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cde:	e005      	b.n	8007cec <update_joy_mode_velocity_control+0x1c4>
	} else {
		// Joystick in deadband - hold position
		rev_command_vel = 0.0f;
 8007ce0:	f04f 0300 	mov.w	r3, #0
 8007ce4:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = false;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	}

	/* PRISMATIC AXIS CONTROL - Keep existing PID-based control */
	// Detect transition from moving to stopped
	if (pris_was_moving && !pris_moving) {
 8007cec:	4b49      	ldr	r3, [pc, #292]	@ (8007e14 <update_joy_mode_velocity_control+0x2ec>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00a      	beq.n	8007d0a <update_joy_mode_velocity_control+0x1e2>
 8007cf4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007cf8:	f083 0301 	eor.w	r3, r3, #1
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d003      	beq.n	8007d0a <update_joy_mode_velocity_control+0x1e2>
		// Just stopped moving - capture current position as target
		prismatic_axis.position = prismatic_encoder.mm;
 8007d02:	4b45      	ldr	r3, [pc, #276]	@ (8007e18 <update_joy_mode_velocity_control+0x2f0>)
 8007d04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d06:	4a45      	ldr	r2, [pc, #276]	@ (8007e1c <update_joy_mode_velocity_control+0x2f4>)
 8007d08:	6013      	str	r3, [r2, #0]
	}

	if (pris_moving) {
 8007d0a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 8092 	beq.w	8007e38 <update_joy_mode_velocity_control+0x310>
		// Moving - use velocity control
		prismatic_axis.vel_error = pris_command_vel
				- prismatic_axis.kalman_velocity;
 8007d14:	4b41      	ldr	r3, [pc, #260]	@ (8007e1c <update_joy_mode_velocity_control+0x2f4>)
 8007d16:	edd3 7a07 	vldr	s15, [r3, #28]
 8007d1a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8007d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = pris_command_vel
 8007d22:	4b3e      	ldr	r3, [pc, #248]	@ (8007e1c <update_joy_mode_velocity_control+0x2f4>)
 8007d24:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8007d28:	4b3c      	ldr	r3, [pc, #240]	@ (8007e1c <update_joy_mode_velocity_control+0x2f4>)
 8007d2a:	edd3 7a06 	vldr	s15, [r3, #24]
 8007d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8007d32:	483b      	ldr	r0, [pc, #236]	@ (8007e20 <update_joy_mode_velocity_control+0x2f8>)
 8007d34:	f7f9 fa70 	bl	8001218 <PID_CONTROLLER_Compute>
 8007d38:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8007d3c:	4b39      	ldr	r3, [pc, #228]	@ (8007e24 <update_joy_mode_velocity_control+0x2fc>)
 8007d3e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8007d42:	4610      	mov	r0, r2
 8007d44:	4619      	mov	r1, r3
 8007d46:	f7f8 febd 	bl	8000ac4 <__aeabi_d2iz>
 8007d4a:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8007d4c:	4b35      	ldr	r3, [pc, #212]	@ (8007e24 <update_joy_mode_velocity_control+0x2fc>)
 8007d4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007d52:	60ba      	str	r2, [r7, #8]
 8007d54:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007d58:	60fb      	str	r3, [r7, #12]
		prismatic_axis.command_pos = PWM_Satuation(
 8007d5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d5e:	f7f8 feb1 	bl	8000ac4 <__aeabi_d2iz>
 8007d62:	4603      	mov	r3, r0
 8007d64:	4619      	mov	r1, r3
 8007d66:	4620      	mov	r0, r4
 8007d68:	eeb0 0a48 	vmov.f32	s0, s16
 8007d6c:	f7f9 f9f2 	bl	8001154 <PWM_Satuation>
 8007d70:	ee07 0a90 	vmov	s15, r0
 8007d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d78:	4b28      	ldr	r3, [pc, #160]	@ (8007e1c <update_joy_mode_velocity_control+0x2f4>)
 8007d7a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward for moving
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8007d7e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8007d82:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8007e28 <update_joy_mode_velocity_control+0x300>
 8007d86:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007d8a:	eeb0 0a47 	vmov.f32	s0, s14
 8007d8e:	4827      	ldr	r0, [pc, #156]	@ (8007e2c <update_joy_mode_velocity_control+0x304>)
 8007d90:	f7f9 fd5e 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 8007d94:	eef0 7a40 	vmov.f32	s15, s0
 8007d98:	4b20      	ldr	r3, [pc, #128]	@ (8007e1c <update_joy_mode_velocity_control+0x2f4>)
 8007d9a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				pris_command_vel / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8007d9e:	4b16      	ldr	r3, [pc, #88]	@ (8007df8 <update_joy_mode_velocity_control+0x2d0>)
 8007da0:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8007da4:	4b1c      	ldr	r3, [pc, #112]	@ (8007e18 <update_joy_mode_velocity_control+0x2f0>)
 8007da6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8007daa:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 8007e28 <update_joy_mode_velocity_control+0x300>
 8007dae:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007db2:	eeb0 1a66 	vmov.f32	s2, s13
 8007db6:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 8007e30 <update_joy_mode_velocity_control+0x308>
 8007dba:	eeb0 0a47 	vmov.f32	s0, s14
 8007dbe:	481d      	ldr	r0, [pc, #116]	@ (8007e34 <update_joy_mode_velocity_control+0x30c>)
 8007dc0:	f7f9 fdee 	bl	80019a0 <PRISMATIC_MOTOR_DFD_Compute>
 8007dc4:	eef0 7a40 	vmov.f32	s15, s0
 8007dc8:	4b14      	ldr	r3, [pc, #80]	@ (8007e1c <update_joy_mode_velocity_control+0x2f4>)
 8007dca:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

		// Continuously update target position while moving
		prismatic_axis.position = prismatic_encoder.mm;
 8007dce:	4b12      	ldr	r3, [pc, #72]	@ (8007e18 <update_joy_mode_velocity_control+0x2f0>)
 8007dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dd2:	4a12      	ldr	r2, [pc, #72]	@ (8007e1c <update_joy_mode_velocity_control+0x2f4>)
 8007dd4:	6013      	str	r3, [r2, #0]
 8007dd6:	e0a2      	b.n	8007f1e <update_joy_mode_velocity_control+0x3f6>
 8007dd8:	48000400 	.word	0x48000400
 8007ddc:	20001e4c 	.word	0x20001e4c
 8007de0:	42200000 	.word	0x42200000
 8007de4:	c2200000 	.word	0xc2200000
 8007de8:	43160000 	.word	0x43160000
 8007dec:	200007e0 	.word	0x200007e0
 8007df0:	c3160000 	.word	0xc3160000
 8007df4:	200007e1 	.word	0x200007e1
 8007df8:	200009d8 	.word	0x200009d8
 8007dfc:	20000d70 	.word	0x20000d70
 8007e00:	432f0000 	.word	0x432f0000
 8007e04:	20001e50 	.word	0x20001e50
 8007e08:	c32f0000 	.word	0xc32f0000
 8007e0c:	40400000 	.word	0x40400000
 8007e10:	c0400000 	.word	0xc0400000
 8007e14:	200008d0 	.word	0x200008d0
 8007e18:	2000097c 	.word	0x2000097c
 8007e1c:	200006fc 	.word	0x200006fc
 8007e20:	20000a5c 	.word	0x20000a5c
 8007e24:	20000080 	.word	0x20000080
 8007e28:	447a0000 	.word	0x447a0000
 8007e2c:	20000afc 	.word	0x20000afc
 8007e30:	00000000 	.word	0x00000000
 8007e34:	20000b00 	.word	0x20000b00
	} else {
		// Not moving - hold target position with position control
		prismatic_axis.pos_error = prismatic_axis.position
 8007e38:	4bbb      	ldr	r3, [pc, #748]	@ (8008128 <update_joy_mode_velocity_control+0x600>)
 8007e3a:	ed93 7a00 	vldr	s14, [r3]
				- prismatic_encoder.mm;
 8007e3e:	4bbb      	ldr	r3, [pc, #748]	@ (800812c <update_joy_mode_velocity_control+0x604>)
 8007e40:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8007e44:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.pos_error = prismatic_axis.position
 8007e48:	4bb7      	ldr	r3, [pc, #732]	@ (8008128 <update_joy_mode_velocity_control+0x600>)
 8007e4a:	edc3 7a05 	vstr	s15, [r3, #20]
		prismatic_axis.command_vel = PWM_Satuation(
 8007e4e:	4bb6      	ldr	r3, [pc, #728]	@ (8008128 <update_joy_mode_velocity_control+0x600>)
 8007e50:	edd3 7a05 	vldr	s15, [r3, #20]
 8007e54:	eeb0 0a67 	vmov.f32	s0, s15
 8007e58:	48b5      	ldr	r0, [pc, #724]	@ (8008130 <update_joy_mode_velocity_control+0x608>)
 8007e5a:	f7f9 f9dd 	bl	8001218 <PID_CONTROLLER_Compute>
 8007e5e:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_position_pid,
						prismatic_axis.pos_error),
				ZGX45RGG_400RPM_Constant.sd_max,
 8007e62:	4bb4      	ldr	r3, [pc, #720]	@ (8008134 <update_joy_mode_velocity_control+0x60c>)
 8007e64:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
		prismatic_axis.command_vel = PWM_Satuation(
 8007e68:	4610      	mov	r0, r2
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	f7f8 fe2a 	bl	8000ac4 <__aeabi_d2iz>
 8007e70:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.sd_max);
 8007e72:	4bb0      	ldr	r3, [pc, #704]	@ (8008134 <update_joy_mode_velocity_control+0x60c>)
 8007e74:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8007e78:	603a      	str	r2, [r7, #0]
 8007e7a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007e7e:	607b      	str	r3, [r7, #4]
		prismatic_axis.command_vel = PWM_Satuation(
 8007e80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e84:	f7f8 fe1e 	bl	8000ac4 <__aeabi_d2iz>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	eeb0 0a48 	vmov.f32	s0, s16
 8007e92:	f7f9 f95f 	bl	8001154 <PWM_Satuation>
 8007e96:	ee07 0a90 	vmov	s15, r0
 8007e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e9e:	4ba2      	ldr	r3, [pc, #648]	@ (8008128 <update_joy_mode_velocity_control+0x600>)
 8007ea0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

		prismatic_axis.vel_error = prismatic_axis.command_vel
 8007ea4:	4ba0      	ldr	r3, [pc, #640]	@ (8008128 <update_joy_mode_velocity_control+0x600>)
 8007ea6:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 8007eaa:	4b9f      	ldr	r3, [pc, #636]	@ (8008128 <update_joy_mode_velocity_control+0x600>)
 8007eac:	edd3 7a07 	vldr	s15, [r3, #28]
 8007eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8007eb4:	4b9c      	ldr	r3, [pc, #624]	@ (8008128 <update_joy_mode_velocity_control+0x600>)
 8007eb6:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8007eba:	4b9b      	ldr	r3, [pc, #620]	@ (8008128 <update_joy_mode_velocity_control+0x600>)
 8007ebc:	edd3 7a06 	vldr	s15, [r3, #24]
 8007ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8007ec4:	489c      	ldr	r0, [pc, #624]	@ (8008138 <update_joy_mode_velocity_control+0x610>)
 8007ec6:	f7f9 f9a7 	bl	8001218 <PID_CONTROLLER_Compute>
 8007eca:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8007ece:	4b99      	ldr	r3, [pc, #612]	@ (8008134 <update_joy_mode_velocity_control+0x60c>)
 8007ed0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	f7f8 fdf4 	bl	8000ac4 <__aeabi_d2iz>
 8007edc:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8007ede:	4b95      	ldr	r3, [pc, #596]	@ (8008134 <update_joy_mode_velocity_control+0x60c>)
 8007ee0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007ee4:	4615      	mov	r5, r2
 8007ee6:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(
 8007eea:	4628      	mov	r0, r5
 8007eec:	4631      	mov	r1, r6
 8007eee:	f7f8 fde9 	bl	8000ac4 <__aeabi_d2iz>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	eeb0 0a48 	vmov.f32	s0, s16
 8007efc:	f7f9 f92a 	bl	8001154 <PWM_Satuation>
 8007f00:	ee07 0a90 	vmov	s15, r0
 8007f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f08:	4b87      	ldr	r3, [pc, #540]	@ (8008128 <update_joy_mode_velocity_control+0x600>)
 8007f0a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// No feedforward when holding position
		prismatic_axis.ffd = 0.0f;
 8007f0e:	4b86      	ldr	r3, [pc, #536]	@ (8008128 <update_joy_mode_velocity_control+0x600>)
 8007f10:	f04f 0200 	mov.w	r2, #0
 8007f14:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 8007f16:	4b84      	ldr	r3, [pc, #528]	@ (8008128 <update_joy_mode_velocity_control+0x600>)
 8007f18:	f04f 0200 	mov.w	r2, #0
 8007f1c:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	// Update previous state for next iteration
	pris_was_moving = pris_moving;
 8007f1e:	4a87      	ldr	r2, [pc, #540]	@ (800813c <update_joy_mode_velocity_control+0x614>)
 8007f20:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007f24:	7013      	strb	r3, [r2, #0]

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8007f26:	4b80      	ldr	r3, [pc, #512]	@ (8008128 <update_joy_mode_velocity_control+0x600>)
 8007f28:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8007f2c:	4b7e      	ldr	r3, [pc, #504]	@ (8008128 <update_joy_mode_velocity_control+0x600>)
 8007f2e:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8007f32:	4b7d      	ldr	r3, [pc, #500]	@ (8008128 <update_joy_mode_velocity_control+0x600>)
 8007f34:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007f38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f40:	4b79      	ldr	r3, [pc, #484]	@ (8008128 <update_joy_mode_velocity_control+0x600>)
 8007f42:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007f46:	4b78      	ldr	r3, [pc, #480]	@ (8008128 <update_joy_mode_velocity_control+0x600>)
 8007f48:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8007f4c:	4b79      	ldr	r3, [pc, #484]	@ (8008134 <update_joy_mode_velocity_control+0x60c>)
 8007f4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007f52:	4610      	mov	r0, r2
 8007f54:	4619      	mov	r1, r3
 8007f56:	f7f8 fdb5 	bl	8000ac4 <__aeabi_d2iz>
 8007f5a:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8007f5c:	4b75      	ldr	r3, [pc, #468]	@ (8008134 <update_joy_mode_velocity_control+0x60c>)
 8007f5e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007f62:	4692      	mov	sl, r2
 8007f64:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007f68:	4650      	mov	r0, sl
 8007f6a:	4659      	mov	r1, fp
 8007f6c:	f7f8 fdaa 	bl	8000ac4 <__aeabi_d2iz>
 8007f70:	4603      	mov	r3, r0
 8007f72:	4619      	mov	r1, r3
 8007f74:	4620      	mov	r0, r4
 8007f76:	eeb0 0a48 	vmov.f32	s0, s16
 8007f7a:	f7f9 f8eb 	bl	8001154 <PWM_Satuation>
 8007f7e:	ee07 0a90 	vmov	s15, r0
 8007f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f86:	4b68      	ldr	r3, [pc, #416]	@ (8008128 <update_joy_mode_velocity_control+0x600>)
 8007f88:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	/* REVOLUTE AXIS CONTROL - SIMPLIFIED PURE PWM WITH FFD + DFD */
	float base_pwm = 0.0f;
 8007f8c:	f04f 0300 	mov.w	r3, #0
 8007f90:	61fb      	str	r3, [r7, #28]

	if (rev_moving) {
 8007f92:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d02e      	beq.n	8007ff8 <update_joy_mode_velocity_control+0x4d0>
		// Calculate base PWM proportional to joystick input
		// Scale joystick input (-50 to +50) to PWM range
		float joystick_normalized = joystick_y / 50.0f; // -1.0 to +1.0
 8007f9a:	4b69      	ldr	r3, [pc, #420]	@ (8008140 <update_joy_mode_velocity_control+0x618>)
 8007f9c:	ed93 7a00 	vldr	s14, [r3]
 8007fa0:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8008144 <update_joy_mode_velocity_control+0x61c>
 8007fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007fa8:	edc7 7a04 	vstr	s15, [r7, #16]
		base_pwm = joystick_normalized
				* (ZGX45RGG_150RPM_Constant.U_max * 0.3f); // Limit to 30% max PWM for safety
 8007fac:	6938      	ldr	r0, [r7, #16]
 8007fae:	f7f8 fa97 	bl	80004e0 <__aeabi_f2d>
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	460d      	mov	r5, r1
 8007fb6:	4b64      	ldr	r3, [pc, #400]	@ (8008148 <update_joy_mode_velocity_control+0x620>)
 8007fb8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007fbc:	a358      	add	r3, pc, #352	@ (adr r3, 8008120 <update_joy_mode_velocity_control+0x5f8>)
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	f7f8 fae5 	bl	8000590 <__aeabi_dmul>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4620      	mov	r0, r4
 8007fcc:	4629      	mov	r1, r5
 8007fce:	f7f8 fadf 	bl	8000590 <__aeabi_dmul>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	460b      	mov	r3, r1
		base_pwm = joystick_normalized
 8007fd6:	4610      	mov	r0, r2
 8007fd8:	4619      	mov	r1, r3
 8007fda:	f7f8 fdbb 	bl	8000b54 <__aeabi_d2f>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	61fb      	str	r3, [r7, #28]

		// Add velocity feedforward
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8007fe2:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8007fe6:	4859      	ldr	r0, [pc, #356]	@ (800814c <update_joy_mode_velocity_control+0x624>)
 8007fe8:	f7f9 fab4 	bl	8001554 <REVOLUTE_MOTOR_FFD_Compute>
 8007fec:	eef0 7a40 	vmov.f32	s15, s0
 8007ff0:	4b57      	ldr	r3, [pc, #348]	@ (8008150 <update_joy_mode_velocity_control+0x628>)
 8007ff2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 8007ff6:	e006      	b.n	8008006 <update_joy_mode_velocity_control+0x4de>
				rev_command_vel);
	} else {
		// Joystick released - no base PWM, only compensation
		base_pwm = 0.0f;
 8007ff8:	f04f 0300 	mov.w	r3, #0
 8007ffc:	61fb      	str	r3, [r7, #28]
		revolute_axis.ffd = 0.0f;
 8007ffe:	4b54      	ldr	r3, [pc, #336]	@ (8008150 <update_joy_mode_velocity_control+0x628>)
 8008000:	f04f 0200 	mov.w	r2, #0
 8008004:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	// Always add gravity/disturbance compensation
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8008006:	4b53      	ldr	r3, [pc, #332]	@ (8008154 <update_joy_mode_velocity_control+0x62c>)
 8008008:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 800800c:	4b47      	ldr	r3, [pc, #284]	@ (800812c <update_joy_mode_velocity_control+0x604>)
 800800e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8008012:	ed9f 6a51 	vldr	s12, [pc, #324]	@ 8008158 <update_joy_mode_velocity_control+0x630>
 8008016:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800801a:	eef0 0a66 	vmov.f32	s1, s13
 800801e:	eeb0 0a47 	vmov.f32	s0, s14
 8008022:	484e      	ldr	r0, [pc, #312]	@ (800815c <update_joy_mode_velocity_control+0x634>)
 8008024:	f7f9 fb29 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 8008028:	eef0 7a40 	vmov.f32	s15, s0
 800802c:	4b48      	ldr	r3, [pc, #288]	@ (8008150 <update_joy_mode_velocity_control+0x628>)
 800802e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// Apply filtering to feedforward terms for stability
	static float ffd_filtered = 0.0f;
	static float dfd_filtered = 0.0f;

	ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 8008032:	4b4b      	ldr	r3, [pc, #300]	@ (8008160 <update_joy_mode_velocity_control+0x638>)
 8008034:	edd3 7a00 	vldr	s15, [r3]
 8008038:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8008164 <update_joy_mode_velocity_control+0x63c>
 800803c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008040:	4b43      	ldr	r3, [pc, #268]	@ (8008150 <update_joy_mode_velocity_control+0x628>)
 8008042:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8008046:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008168 <update_joy_mode_velocity_control+0x640>
 800804a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800804e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008052:	4b43      	ldr	r3, [pc, #268]	@ (8008160 <update_joy_mode_velocity_control+0x638>)
 8008054:	edc3 7a00 	vstr	s15, [r3]
	dfd_filtered = 0.8f * dfd_filtered + 0.2f * revolute_axis.dfd;
 8008058:	4b44      	ldr	r3, [pc, #272]	@ (800816c <update_joy_mode_velocity_control+0x644>)
 800805a:	edd3 7a00 	vldr	s15, [r3]
 800805e:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8008164 <update_joy_mode_velocity_control+0x63c>
 8008062:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008066:	4b3a      	ldr	r3, [pc, #232]	@ (8008150 <update_joy_mode_velocity_control+0x628>)
 8008068:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800806c:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8008168 <update_joy_mode_velocity_control+0x640>
 8008070:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008078:	4b3c      	ldr	r3, [pc, #240]	@ (800816c <update_joy_mode_velocity_control+0x644>)
 800807a:	edc3 7a00 	vstr	s15, [r3]

	// Combine base PWM with feedforward compensation
	revolute_axis.command_pos = base_pwm
			+ 0.01f * (ffd_filtered + dfd_filtered);
 800807e:	4b38      	ldr	r3, [pc, #224]	@ (8008160 <update_joy_mode_velocity_control+0x638>)
 8008080:	ed93 7a00 	vldr	s14, [r3]
 8008084:	4b39      	ldr	r3, [pc, #228]	@ (800816c <update_joy_mode_velocity_control+0x644>)
 8008086:	edd3 7a00 	vldr	s15, [r3]
 800808a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800808e:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8008170 <update_joy_mode_velocity_control+0x648>
 8008092:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008096:	edd7 7a07 	vldr	s15, [r7, #28]
 800809a:	ee77 7a27 	vadd.f32	s15, s14, s15
	revolute_axis.command_pos = base_pwm
 800809e:	4b2c      	ldr	r3, [pc, #176]	@ (8008150 <update_joy_mode_velocity_control+0x628>)
 80080a0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Saturate final command
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80080a4:	4b2a      	ldr	r3, [pc, #168]	@ (8008150 <update_joy_mode_velocity_control+0x628>)
 80080a6:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 80080aa:	4b27      	ldr	r3, [pc, #156]	@ (8008148 <update_joy_mode_velocity_control+0x620>)
 80080ac:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80080b0:	4610      	mov	r0, r2
 80080b2:	4619      	mov	r1, r3
 80080b4:	f7f8 fd06 	bl	8000ac4 <__aeabi_d2iz>
 80080b8:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 80080ba:	4b23      	ldr	r3, [pc, #140]	@ (8008148 <update_joy_mode_velocity_control+0x620>)
 80080bc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80080c0:	4690      	mov	r8, r2
 80080c2:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80080c6:	4640      	mov	r0, r8
 80080c8:	4649      	mov	r1, r9
 80080ca:	f7f8 fcfb 	bl	8000ac4 <__aeabi_d2iz>
 80080ce:	4603      	mov	r3, r0
 80080d0:	4619      	mov	r1, r3
 80080d2:	4620      	mov	r0, r4
 80080d4:	eeb0 0a48 	vmov.f32	s0, s16
 80080d8:	f7f9 f83c 	bl	8001154 <PWM_Satuation>
 80080dc:	ee07 0a90 	vmov	s15, r0
 80080e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080e4:	4b1a      	ldr	r3, [pc, #104]	@ (8008150 <update_joy_mode_velocity_control+0x628>)
 80080e6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Apply motor commands
	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 80080ea:	4b0f      	ldr	r3, [pc, #60]	@ (8008128 <update_joy_mode_velocity_control+0x600>)
 80080ec:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80080f0:	eef0 0a67 	vmov.f32	s1, s15
 80080f4:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8008174 <update_joy_mode_velocity_control+0x64c>
 80080f8:	481f      	ldr	r0, [pc, #124]	@ (8008178 <update_joy_mode_velocity_control+0x650>)
 80080fa:	f7f9 f943 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 80080fe:	4b14      	ldr	r3, [pc, #80]	@ (8008150 <update_joy_mode_velocity_control+0x628>)
 8008100:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008104:	eef0 0a67 	vmov.f32	s1, s15
 8008108:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8008174 <update_joy_mode_velocity_control+0x64c>
 800810c:	481b      	ldr	r0, [pc, #108]	@ (800817c <update_joy_mode_velocity_control+0x654>)
 800810e:	f7f9 f939 	bl	8001384 <MDXX_set_range>
}
 8008112:	bf00      	nop
 8008114:	3734      	adds	r7, #52	@ 0x34
 8008116:	46bd      	mov	sp, r7
 8008118:	ecbd 8b02 	vpop	{d8}
 800811c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008120:	40000000 	.word	0x40000000
 8008124:	3fd33333 	.word	0x3fd33333
 8008128:	200006fc 	.word	0x200006fc
 800812c:	2000097c 	.word	0x2000097c
 8008130:	20000a34 	.word	0x20000a34
 8008134:	20000080 	.word	0x20000080
 8008138:	20000a5c 	.word	0x20000a5c
 800813c:	200008d0 	.word	0x200008d0
 8008140:	20001e50 	.word	0x20001e50
 8008144:	42480000 	.word	0x42480000
 8008148:	20000000 	.word	0x20000000
 800814c:	20000b08 	.word	0x20000b08
 8008150:	20000740 	.word	0x20000740
 8008154:	200009d8 	.word	0x200009d8
 8008158:	447a0000 	.word	0x447a0000
 800815c:	20000b0c 	.word	0x20000b0c
 8008160:	200008d4 	.word	0x200008d4
 8008164:	3f4ccccd 	.word	0x3f4ccccd
 8008168:	3e4ccccd 	.word	0x3e4ccccd
 800816c:	200008d8 	.word	0x200008d8
 8008170:	3c23d70a 	.word	0x3c23d70a
 8008174:	44fa0000 	.word	0x44fa0000
 8008178:	200008e4 	.word	0x200008e4
 800817c:	20000930 	.word	0x20000930

08008180 <update_joy_mode_pilot_light>:

void update_joy_mode_pilot_light(void) {
 8008180:	b580      	push	{r7, lr}
 8008182:	af00      	add	r7, sp, #0
	if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 8008184:	4b14      	ldr	r3, [pc, #80]	@ (80081d8 <update_joy_mode_pilot_light+0x58>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	2b03      	cmp	r3, #3
 800818a:	d122      	bne.n	80081d2 <update_joy_mode_pilot_light+0x52>
		// Toggle pilot light every 1 second when 10 positions are saved
		joy_mode_pilot_timer++;
 800818c:	4b13      	ldr	r3, [pc, #76]	@ (80081dc <update_joy_mode_pilot_light+0x5c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3301      	adds	r3, #1
 8008192:	4a12      	ldr	r2, [pc, #72]	@ (80081dc <update_joy_mode_pilot_light+0x5c>)
 8008194:	6013      	str	r3, [r2, #0]
		if (joy_mode_pilot_timer >= JOY_MODE_PILOT_TOGGLE_PERIOD) {
 8008196:	4b11      	ldr	r3, [pc, #68]	@ (80081dc <update_joy_mode_pilot_light+0x5c>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800819e:	d318      	bcc.n	80081d2 <update_joy_mode_pilot_light+0x52>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 80081a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80081a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80081a8:	f004 ffe4 	bl	800d174 <HAL_GPIO_TogglePin>
			joy_mode_pilot_state = !joy_mode_pilot_state;
 80081ac:	4b0c      	ldr	r3, [pc, #48]	@ (80081e0 <update_joy_mode_pilot_light+0x60>)
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	bf14      	ite	ne
 80081b6:	2301      	movne	r3, #1
 80081b8:	2300      	moveq	r3, #0
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	f083 0301 	eor.w	r3, r3, #1
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	4b05      	ldr	r3, [pc, #20]	@ (80081e0 <update_joy_mode_pilot_light+0x60>)
 80081ca:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 80081cc:	4b03      	ldr	r3, [pc, #12]	@ (80081dc <update_joy_mode_pilot_light+0x5c>)
 80081ce:	2200      	movs	r2, #0
 80081d0:	601a      	str	r2, [r3, #0]
		}
	}
}
 80081d2:	bf00      	nop
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	200007fc 	.word	0x200007fc
 80081dc:	20000854 	.word	0x20000854
 80081e0:	20000858 	.word	0x20000858

080081e4 <update_joy_mode>:

void update_joy_mode(void) {
 80081e4:	b590      	push	{r4, r7, lr}
 80081e6:	ed2d 8b02 	vpush	{d8}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
	if (!joy_mode_active) {
 80081ee:	4b93      	ldr	r3, [pc, #588]	@ (800843c <update_joy_mode+0x258>)
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	f083 0301 	eor.w	r3, r3, #1
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f040 81c6 	bne.w	800858a <update_joy_mode+0x3a6>
		return;
	}

	// ALWAYS update position display values when in joy mode
	normalized_position = normalize_angle(revolute_encoder.rads);
 80081fe:	4b90      	ldr	r3, [pc, #576]	@ (8008440 <update_joy_mode+0x25c>)
 8008200:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8008204:	eeb0 0a67 	vmov.f32	s0, s15
 8008208:	f7fd ffc8 	bl	800619c <normalize_angle>
 800820c:	eef0 7a40 	vmov.f32	s15, s0
 8008210:	4b8c      	ldr	r3, [pc, #560]	@ (8008444 <update_joy_mode+0x260>)
 8008212:	edc3 7a00 	vstr	s15, [r3]
	prismatic_axis.mm = prismatic_encoder.mm;
 8008216:	4b8c      	ldr	r3, [pc, #560]	@ (8008448 <update_joy_mode+0x264>)
 8008218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800821a:	4a8c      	ldr	r2, [pc, #560]	@ (800844c <update_joy_mode+0x268>)
 800821c:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 800821e:	4b89      	ldr	r3, [pc, #548]	@ (8008444 <update_joy_mode+0x260>)
 8008220:	edd3 7a00 	vldr	s15, [r3]
 8008224:	220e      	movs	r2, #14
 8008226:	210f      	movs	r1, #15
 8008228:	eeb0 0a67 	vmov.f32	s0, s15
 800822c:	4888      	ldr	r0, [pc, #544]	@ (8008450 <update_joy_mode+0x26c>)
 800822e:	f7fc fccb 	bl	8004bc8 <UnitConverter_angle>
 8008232:	eef0 7a40 	vmov.f32	s15, s0
 8008236:	4b87      	ldr	r3, [pc, #540]	@ (8008454 <update_joy_mode+0x270>)
 8008238:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);

	switch (joy_mode_state) {
 800823c:	4b86      	ldr	r3, [pc, #536]	@ (8008458 <update_joy_mode+0x274>)
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	3b01      	subs	r3, #1
 8008242:	2b04      	cmp	r3, #4
 8008244:	f200 81a3 	bhi.w	800858e <update_joy_mode+0x3aa>
 8008248:	a201      	add	r2, pc, #4	@ (adr r2, 8008250 <update_joy_mode+0x6c>)
 800824a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824e:	bf00      	nop
 8008250:	08008265 	.word	0x08008265
 8008254:	0800826b 	.word	0x0800826b
 8008258:	08008271 	.word	0x08008271
 800825c:	0800827f 	.word	0x0800827f
 8008260:	08008585 	.word	0x08008585
	case JOY_MODE_INITIAL_CONTROL:
		// Initial manual joystick control - no position saving yet
		update_joy_mode_velocity_control();
 8008264:	f7ff fc60 	bl	8007b28 <update_joy_mode_velocity_control>
		break;
 8008268:	e194      	b.n	8008594 <update_joy_mode+0x3b0>

	case JOY_MODE_MANUAL_CONTROL:
		// Manual joystick control with position saving enabled
		update_joy_mode_velocity_control();
 800826a:	f7ff fc5d 	bl	8007b28 <update_joy_mode_velocity_control>
		break;
 800826e:	e191      	b.n	8008594 <update_joy_mode+0x3b0>

	case JOY_MODE_POSITION_SAVED:
		revolute_axis.position = revolute_encoder.rads;
 8008270:	4b73      	ldr	r3, [pc, #460]	@ (8008440 <update_joy_mode+0x25c>)
 8008272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008274:	4a77      	ldr	r2, [pc, #476]	@ (8008454 <update_joy_mode+0x270>)
 8008276:	6013      	str	r3, [r2, #0]
		// 10 positions saved, pilot light toggling, waiting for B2 to start playback
		update_joy_mode_pilot_light();
 8008278:	f7ff ff82 	bl	8008180 <update_joy_mode_pilot_light>
		break;
 800827c:	e18a      	b.n	8008594 <update_joy_mode+0x3b0>

	case JOY_MODE_PLAYBACK:
//		revolute_axis.position = revolute_encoder.rads;
		// Playing back saved positions - PILOT LIGHT STAYS ON
		// Handle trajectory sequence states for joy mode playback
		switch (motion_sequence_state) {
 800827e:	4b77      	ldr	r3, [pc, #476]	@ (800845c <update_joy_mode+0x278>)
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	2b06      	cmp	r3, #6
 8008284:	f200 8166 	bhi.w	8008554 <update_joy_mode+0x370>
 8008288:	a201      	add	r2, pc, #4	@ (adr r2, 8008290 <update_joy_mode+0xac>)
 800828a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828e:	bf00      	nop
 8008290:	080082ad 	.word	0x080082ad
 8008294:	08008335 	.word	0x08008335
 8008298:	08008359 	.word	0x08008359
 800829c:	08008495 	.word	0x08008495
 80082a0:	08008555 	.word	0x08008555
 80082a4:	0800852f 	.word	0x0800852f
 80082a8:	0800854d 	.word	0x0800854d
		case MOTION_IDLE:
			// Current trajectory finished, wait before starting next

			joy_mode_playback_timer++;
 80082ac:	4b6c      	ldr	r3, [pc, #432]	@ (8008460 <update_joy_mode+0x27c>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3301      	adds	r3, #1
 80082b2:	4a6b      	ldr	r2, [pc, #428]	@ (8008460 <update_joy_mode+0x27c>)
 80082b4:	6013      	str	r3, [r2, #0]
			if (joy_mode_playback_timer >= JOY_MODE_PLAYBACK_DELAY) {
 80082b6:	4b6a      	ldr	r3, [pc, #424]	@ (8008460 <update_joy_mode+0x27c>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80082be:	f0c0 814b 	bcc.w	8008558 <update_joy_mode+0x374>
				playback_position_index++;
 80082c2:	4b68      	ldr	r3, [pc, #416]	@ (8008464 <update_joy_mode+0x280>)
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	3301      	adds	r3, #1
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	4b66      	ldr	r3, [pc, #408]	@ (8008464 <update_joy_mode+0x280>)
 80082cc:	701a      	strb	r2, [r3, #0]
				if (playback_position_index < saved_position_count) {
 80082ce:	4b65      	ldr	r3, [pc, #404]	@ (8008464 <update_joy_mode+0x280>)
 80082d0:	781a      	ldrb	r2, [r3, #0]
 80082d2:	4b65      	ldr	r3, [pc, #404]	@ (8008468 <update_joy_mode+0x284>)
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d229      	bcs.n	800832e <update_joy_mode+0x14a>
					// Start next trajectory
					float target_pris =
							saved_positions[playback_position_index].prismatic_pos;
 80082da:	4b62      	ldr	r3, [pc, #392]	@ (8008464 <update_joy_mode+0x280>)
 80082dc:	781b      	ldrb	r3, [r3, #0]
					float target_pris =
 80082de:	4a63      	ldr	r2, [pc, #396]	@ (800846c <update_joy_mode+0x288>)
 80082e0:	00db      	lsls	r3, r3, #3
 80082e2:	4413      	add	r3, r2
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	60fb      	str	r3, [r7, #12]
					float target_rev_rad =
							saved_positions[playback_position_index].revolute_pos;
 80082e8:	4b5e      	ldr	r3, [pc, #376]	@ (8008464 <update_joy_mode+0x280>)
 80082ea:	781b      	ldrb	r3, [r3, #0]
					float target_rev_rad =
 80082ec:	4a5f      	ldr	r2, [pc, #380]	@ (800846c <update_joy_mode+0x288>)
 80082ee:	00db      	lsls	r3, r3, #3
 80082f0:	4413      	add	r3, r2
 80082f2:	3304      	adds	r3, #4
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	60bb      	str	r3, [r7, #8]
					float target_rev_deg = target_rev_rad * 180.0f / PI;
 80082f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80082fc:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8008470 <update_joy_mode+0x28c>
 8008300:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008304:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8008474 <update_joy_mode+0x290>
 8008308:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800830c:	edc7 7a01 	vstr	s15, [r7, #4]
					check[1]++;
 8008310:	4b59      	ldr	r3, [pc, #356]	@ (8008478 <update_joy_mode+0x294>)
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	3301      	adds	r3, #1
 8008316:	4a58      	ldr	r2, [pc, #352]	@ (8008478 <update_joy_mode+0x294>)
 8008318:	6053      	str	r3, [r2, #4]
					start_combined_trajectory(target_pris, target_rev_deg);
 800831a:	edd7 0a01 	vldr	s1, [r7, #4]
 800831e:	ed97 0a03 	vldr	s0, [r7, #12]
 8008322:	f7fe f825 	bl	8006370 <start_combined_trajectory>
					joy_mode_playback_timer = 0;
 8008326:	4b4e      	ldr	r3, [pc, #312]	@ (8008460 <update_joy_mode+0x27c>)
 8008328:	2200      	movs	r2, #0
 800832a:	601a      	str	r2, [r3, #0]

					// Optional: Add some indication that playback is complete
					// You could flash the pilot light or set a status flag here
				}
			}
			break;
 800832c:	e114      	b.n	8008558 <update_joy_mode+0x374>
					exit_joy_mode();
 800832e:	f7ff fa41 	bl	80077b4 <exit_joy_mode>
			break;
 8008332:	e111      	b.n	8008558 <update_joy_mode+0x374>

		case MOTION_PEN_UP_DELAY:
			// INCREMENT motion_delay_timer here for joy mode
			if (++motion_delay_timer >= 1500) {
 8008334:	4b51      	ldr	r3, [pc, #324]	@ (800847c <update_joy_mode+0x298>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	3301      	adds	r3, #1
 800833a:	4a50      	ldr	r2, [pc, #320]	@ (800847c <update_joy_mode+0x298>)
 800833c:	6013      	str	r3, [r2, #0]
 800833e:	f240 52db 	movw	r2, #1499	@ 0x5db
 8008342:	4293      	cmp	r3, r2
 8008344:	f240 810a 	bls.w	800855c <update_joy_mode+0x378>
				prismatic_axis.trajectory_active = true;
 8008348:	4b40      	ldr	r3, [pc, #256]	@ (800844c <update_joy_mode+0x268>)
 800834a:	2201      	movs	r2, #1
 800834c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
 8008350:	4b42      	ldr	r3, [pc, #264]	@ (800845c <update_joy_mode+0x278>)
 8008352:	2202      	movs	r2, #2
 8008354:	701a      	strb	r2, [r3, #0]
			}
			break;
 8008356:	e101      	b.n	800855c <update_joy_mode+0x378>

		case MOTION_PRISMATIC_ACTIVE:

			if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 8008358:	4b3c      	ldr	r3, [pc, #240]	@ (800844c <update_joy_mode+0x268>)
 800835a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800835e:	2b00      	cmp	r3, #0
 8008360:	f000 80fe 	beq.w	8008560 <update_joy_mode+0x37c>
 8008364:	4b46      	ldr	r3, [pc, #280]	@ (8008480 <update_joy_mode+0x29c>)
 8008366:	7c1b      	ldrb	r3, [r3, #16]
 8008368:	f083 0301 	eor.w	r3, r3, #1
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 80f6 	beq.w	8008560 <update_joy_mode+0x37c>
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 8008374:	4b35      	ldr	r3, [pc, #212]	@ (800844c <update_joy_mode+0x268>)
 8008376:	ed93 8a03 	vldr	s16, [r3, #12]
 800837a:	4b34      	ldr	r3, [pc, #208]	@ (800844c <update_joy_mode+0x268>)
 800837c:	edd3 8a04 	vldr	s17, [r3, #16]
						prismatic_axis.initial_pos, prismatic_axis.target_pos,
						ZGX45RGG_400RPM_Constant.traject_sd_max,
 8008380:	4b40      	ldr	r3, [pc, #256]	@ (8008484 <update_joy_mode+0x2a0>)
 8008382:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 8008386:	4610      	mov	r0, r2
 8008388:	4619      	mov	r1, r3
 800838a:	f7f8 fbe3 	bl	8000b54 <__aeabi_d2f>
 800838e:	4604      	mov	r4, r0
						ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8008390:	4b3c      	ldr	r3, [pc, #240]	@ (8008484 <update_joy_mode+0x2a0>)
 8008392:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 8008396:	4610      	mov	r0, r2
 8008398:	4619      	mov	r1, r3
 800839a:	f7f8 fbdb 	bl	8000b54 <__aeabi_d2f>
 800839e:	4603      	mov	r3, r0
 80083a0:	ee01 3a90 	vmov	s3, r3
 80083a4:	ee01 4a10 	vmov	s2, r4
 80083a8:	eef0 0a68 	vmov.f32	s1, s17
 80083ac:	eeb0 0a48 	vmov.f32	s0, s16
 80083b0:	4933      	ldr	r1, [pc, #204]	@ (8008480 <update_joy_mode+0x29c>)
 80083b2:	4835      	ldr	r0, [pc, #212]	@ (8008488 <update_joy_mode+0x2a4>)
 80083b4:	f7fc f870 	bl	8004498 <Trapezoidal_Evaluated>

				prismatic_axis.position = prisEva.setposition;
 80083b8:	4b31      	ldr	r3, [pc, #196]	@ (8008480 <update_joy_mode+0x29c>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a23      	ldr	r2, [pc, #140]	@ (800844c <update_joy_mode+0x268>)
 80083be:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = prisEva.setvelocity;
 80083c0:	4b2f      	ldr	r3, [pc, #188]	@ (8008480 <update_joy_mode+0x29c>)
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	4a21      	ldr	r2, [pc, #132]	@ (800844c <update_joy_mode+0x268>)
 80083c6:	6053      	str	r3, [r2, #4]

				if (prisEva.isFinised) {
 80083c8:	4b2d      	ldr	r3, [pc, #180]	@ (8008480 <update_joy_mode+0x29c>)
 80083ca:	7c1b      	ldrb	r3, [r3, #16]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f000 80c7 	beq.w	8008560 <update_joy_mode+0x37c>
					prismatic_axis.trajectory_active = false;
 80083d2:	4b1e      	ldr	r3, [pc, #120]	@ (800844c <update_joy_mode+0x268>)
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					prismatic_axis.position = prisEva.setposition;
 80083da:	4b29      	ldr	r3, [pc, #164]	@ (8008480 <update_joy_mode+0x29c>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a1b      	ldr	r2, [pc, #108]	@ (800844c <update_joy_mode+0x268>)
 80083e0:	6013      	str	r3, [r2, #0]
					prismatic_axis.velocity = 0.0f;
 80083e2:	4b1a      	ldr	r3, [pc, #104]	@ (800844c <update_joy_mode+0x268>)
 80083e4:	f04f 0200 	mov.w	r2, #0
 80083e8:	605a      	str	r2, [r3, #4]

					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80083ea:	4b1a      	ldr	r3, [pc, #104]	@ (8008454 <update_joy_mode+0x270>)
 80083ec:	ed93 8a03 	vldr	s16, [r3, #12]
 80083f0:	4b18      	ldr	r3, [pc, #96]	@ (8008454 <update_joy_mode+0x270>)
 80083f2:	edd3 8a04 	vldr	s17, [r3, #16]
							revolute_axis.target_pos,
							ZGX45RGG_150RPM_Constant.traject_qd_max,
 80083f6:	4b25      	ldr	r3, [pc, #148]	@ (800848c <update_joy_mode+0x2a8>)
 80083f8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80083fc:	4610      	mov	r0, r2
 80083fe:	4619      	mov	r1, r3
 8008400:	f7f8 fba8 	bl	8000b54 <__aeabi_d2f>
 8008404:	4604      	mov	r4, r0
							ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8008406:	4b21      	ldr	r3, [pc, #132]	@ (800848c <update_joy_mode+0x2a8>)
 8008408:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 800840c:	4610      	mov	r0, r2
 800840e:	4619      	mov	r1, r3
 8008410:	f7f8 fba0 	bl	8000b54 <__aeabi_d2f>
 8008414:	4603      	mov	r3, r0
 8008416:	ee01 3a90 	vmov	s3, r3
 800841a:	ee01 4a10 	vmov	s2, r4
 800841e:	eef0 0a68 	vmov.f32	s1, s17
 8008422:	eeb0 0a48 	vmov.f32	s0, s16
 8008426:	481a      	ldr	r0, [pc, #104]	@ (8008490 <update_joy_mode+0x2ac>)
 8008428:	f7fb ff74 	bl	8004314 <Trapezoidal_Generator>

					revolute_axis.trajectory_active = true;
 800842c:	4b09      	ldr	r3, [pc, #36]	@ (8008454 <update_joy_mode+0x270>)
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 8008434:	4b09      	ldr	r3, [pc, #36]	@ (800845c <update_joy_mode+0x278>)
 8008436:	2203      	movs	r2, #3
 8008438:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 800843a:	e091      	b.n	8008560 <update_joy_mode+0x37c>
 800843c:	200007fd 	.word	0x200007fd
 8008440:	200009d8 	.word	0x200009d8
 8008444:	200007f4 	.word	0x200007f4
 8008448:	2000097c 	.word	0x2000097c
 800844c:	200006fc 	.word	0x200006fc
 8008450:	20000d70 	.word	0x20000d70
 8008454:	20000740 	.word	0x20000740
 8008458:	200007fc 	.word	0x200007fc
 800845c:	20000784 	.word	0x20000784
 8008460:	2000085c 	.word	0x2000085c
 8008464:	20000851 	.word	0x20000851
 8008468:	20000850 	.word	0x20000850
 800846c:	20000800 	.word	0x20000800
 8008470:	43340000 	.word	0x43340000
 8008474:	40490fdb 	.word	0x40490fdb
 8008478:	20000864 	.word	0x20000864
 800847c:	200007d8 	.word	0x200007d8
 8008480:	200007b0 	.word	0x200007b0
 8008484:	20000080 	.word	0x20000080
 8008488:	20000788 	.word	0x20000788
 800848c:	20000000 	.word	0x20000000
 8008490:	2000079c 	.word	0x2000079c

		case MOTION_REVOLUTE_ACTIVE:
			if (revolute_axis.trajectory_active && !revEva.isFinised) {
 8008494:	4b42      	ldr	r3, [pc, #264]	@ (80085a0 <update_joy_mode+0x3bc>)
 8008496:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800849a:	2b00      	cmp	r3, #0
 800849c:	d062      	beq.n	8008564 <update_joy_mode+0x380>
 800849e:	4b41      	ldr	r3, [pc, #260]	@ (80085a4 <update_joy_mode+0x3c0>)
 80084a0:	7c1b      	ldrb	r3, [r3, #16]
 80084a2:	f083 0301 	eor.w	r3, r3, #1
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d05b      	beq.n	8008564 <update_joy_mode+0x380>
				Trapezoidal_Evaluated(&revGen, &revEva,
 80084ac:	4b3c      	ldr	r3, [pc, #240]	@ (80085a0 <update_joy_mode+0x3bc>)
 80084ae:	ed93 8a03 	vldr	s16, [r3, #12]
 80084b2:	4b3b      	ldr	r3, [pc, #236]	@ (80085a0 <update_joy_mode+0x3bc>)
 80084b4:	edd3 8a04 	vldr	s17, [r3, #16]
						revolute_axis.initial_pos, revolute_axis.target_pos,
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 80084b8:	4b3b      	ldr	r3, [pc, #236]	@ (80085a8 <update_joy_mode+0x3c4>)
 80084ba:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Evaluated(&revGen, &revEva,
 80084be:	4610      	mov	r0, r2
 80084c0:	4619      	mov	r1, r3
 80084c2:	f7f8 fb47 	bl	8000b54 <__aeabi_d2f>
 80084c6:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80084c8:	4b37      	ldr	r3, [pc, #220]	@ (80085a8 <update_joy_mode+0x3c4>)
 80084ca:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Evaluated(&revGen, &revEva,
 80084ce:	4610      	mov	r0, r2
 80084d0:	4619      	mov	r1, r3
 80084d2:	f7f8 fb3f 	bl	8000b54 <__aeabi_d2f>
 80084d6:	4603      	mov	r3, r0
 80084d8:	ee01 3a90 	vmov	s3, r3
 80084dc:	ee01 4a10 	vmov	s2, r4
 80084e0:	eef0 0a68 	vmov.f32	s1, s17
 80084e4:	eeb0 0a48 	vmov.f32	s0, s16
 80084e8:	492e      	ldr	r1, [pc, #184]	@ (80085a4 <update_joy_mode+0x3c0>)
 80084ea:	4830      	ldr	r0, [pc, #192]	@ (80085ac <update_joy_mode+0x3c8>)
 80084ec:	f7fb ffd4 	bl	8004498 <Trapezoidal_Evaluated>

				revolute_axis.position = revEva.setposition;
 80084f0:	4b2c      	ldr	r3, [pc, #176]	@ (80085a4 <update_joy_mode+0x3c0>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a2a      	ldr	r2, [pc, #168]	@ (80085a0 <update_joy_mode+0x3bc>)
 80084f6:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = revEva.setvelocity;
 80084f8:	4b2a      	ldr	r3, [pc, #168]	@ (80085a4 <update_joy_mode+0x3c0>)
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	4a28      	ldr	r2, [pc, #160]	@ (80085a0 <update_joy_mode+0x3bc>)
 80084fe:	6053      	str	r3, [r2, #4]

				if (revEva.isFinised) {
 8008500:	4b28      	ldr	r3, [pc, #160]	@ (80085a4 <update_joy_mode+0x3c0>)
 8008502:	7c1b      	ldrb	r3, [r3, #16]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d02d      	beq.n	8008564 <update_joy_mode+0x380>
					revolute_axis.trajectory_active = false;
 8008508:	4b25      	ldr	r3, [pc, #148]	@ (80085a0 <update_joy_mode+0x3bc>)
 800850a:	2200      	movs	r2, #0
 800850c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					revolute_axis.position = revEva.setposition;
 8008510:	4b24      	ldr	r3, [pc, #144]	@ (80085a4 <update_joy_mode+0x3c0>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a22      	ldr	r2, [pc, #136]	@ (80085a0 <update_joy_mode+0x3bc>)
 8008516:	6013      	str	r3, [r2, #0]
					revolute_axis.velocity = 0.0f;
 8008518:	4b21      	ldr	r3, [pc, #132]	@ (80085a0 <update_joy_mode+0x3bc>)
 800851a:	f04f 0200 	mov.w	r2, #0
 800851e:	605a      	str	r2, [r3, #4]

//					PID_CONTROLLER_Reset(&revolute_position_pid);
//					PID_CONTROLLER_Reset(&revolute_velocity_pid);

					motion_delay_timer = 0;
 8008520:	4b23      	ldr	r3, [pc, #140]	@ (80085b0 <update_joy_mode+0x3cc>)
 8008522:	2200      	movs	r2, #0
 8008524:	601a      	str	r2, [r3, #0]
					motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 8008526:	4b23      	ldr	r3, [pc, #140]	@ (80085b4 <update_joy_mode+0x3d0>)
 8008528:	2205      	movs	r2, #5
 800852a:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 800852c:	e01a      	b.n	8008564 <update_joy_mode+0x380>

		case MOTION_PEN_DOWN_DELAY:
			// INCREMENT motion_delay_timer here for joy mode
			if (++motion_delay_timer >= 1500) {
 800852e:	4b20      	ldr	r3, [pc, #128]	@ (80085b0 <update_joy_mode+0x3cc>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3301      	adds	r3, #1
 8008534:	4a1e      	ldr	r2, [pc, #120]	@ (80085b0 <update_joy_mode+0x3cc>)
 8008536:	6013      	str	r3, [r2, #0]
 8008538:	f240 52db 	movw	r2, #1499	@ 0x5db
 800853c:	4293      	cmp	r3, r2
 800853e:	d913      	bls.n	8008568 <update_joy_mode+0x384>
				plotter_pen_down();
 8008540:	f001 fab0 	bl	8009aa4 <plotter_pen_down>
				motion_sequence_state = MOTION_COMPLETE;
 8008544:	4b1b      	ldr	r3, [pc, #108]	@ (80085b4 <update_joy_mode+0x3d0>)
 8008546:	2206      	movs	r2, #6
 8008548:	701a      	strb	r2, [r3, #0]
			}
			break;
 800854a:	e00d      	b.n	8008568 <update_joy_mode+0x384>

		case MOTION_COMPLETE:
			motion_sequence_state = MOTION_IDLE;
 800854c:	4b19      	ldr	r3, [pc, #100]	@ (80085b4 <update_joy_mode+0x3d0>)
 800854e:	2200      	movs	r2, #0
 8008550:	701a      	strb	r2, [r3, #0]
			break;
 8008552:	e00a      	b.n	800856a <update_joy_mode+0x386>

		default:
			break;
 8008554:	bf00      	nop
 8008556:	e008      	b.n	800856a <update_joy_mode+0x386>
			break;
 8008558:	bf00      	nop
 800855a:	e006      	b.n	800856a <update_joy_mode+0x386>
			break;
 800855c:	bf00      	nop
 800855e:	e004      	b.n	800856a <update_joy_mode+0x386>
			break;
 8008560:	bf00      	nop
 8008562:	e002      	b.n	800856a <update_joy_mode+0x386>
			break;
 8008564:	bf00      	nop
 8008566:	e000      	b.n	800856a <update_joy_mode+0x386>
			break;
 8008568:	bf00      	nop
		}

		// Update position/velocity control for trajectory playback
		if (motion_sequence_state != MOTION_IDLE) {
 800856a:	4b12      	ldr	r3, [pc, #72]	@ (80085b4 <update_joy_mode+0x3d0>)
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00f      	beq.n	8008592 <update_joy_mode+0x3ae>
			// Run position control if not in manual control
			if (position_control_tick >= POSITION_CONTROL_DIVIDER) {
 8008572:	4b11      	ldr	r3, [pc, #68]	@ (80085b8 <update_joy_mode+0x3d4>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b09      	cmp	r3, #9
 8008578:	d901      	bls.n	800857e <update_joy_mode+0x39a>
				update_position_control();
 800857a:	f7fe f937 	bl	80067ec <update_position_control>
			}
			// Always run velocity control during trajectory
			update_velocity_control();
 800857e:	f7fe f9f3 	bl	8006968 <update_velocity_control>
		}
		break;
 8008582:	e006      	b.n	8008592 <update_joy_mode+0x3ae>

	case JOY_MODE_COMPLETE:
		exit_joy_mode();
 8008584:	f7ff f916 	bl	80077b4 <exit_joy_mode>
		break;
 8008588:	e004      	b.n	8008594 <update_joy_mode+0x3b0>
		return;
 800858a:	bf00      	nop
 800858c:	e002      	b.n	8008594 <update_joy_mode+0x3b0>

	default:
		break;
 800858e:	bf00      	nop
 8008590:	e000      	b.n	8008594 <update_joy_mode+0x3b0>
		break;
 8008592:	bf00      	nop
	}
}
 8008594:	3714      	adds	r7, #20
 8008596:	46bd      	mov	sp, r7
 8008598:	ecbd 8b02 	vpop	{d8}
 800859c:	bd90      	pop	{r4, r7, pc}
 800859e:	bf00      	nop
 80085a0:	20000740 	.word	0x20000740
 80085a4:	200007c4 	.word	0x200007c4
 80085a8:	20000000 	.word	0x20000000
 80085ac:	2000079c 	.word	0x2000079c
 80085b0:	200007d8 	.word	0x200007d8
 80085b4:	20000784 	.word	0x20000784
 80085b8:	200007f0 	.word	0x200007f0

080085bc <handle_b2_button_polling>:

void handle_b2_button_polling(void) {
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
	// Read current B2 button state (assuming active low like other buttons)
	bool b2_current_state = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 80085c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80085c6:	4835      	ldr	r0, [pc, #212]	@ (800869c <handle_b2_button_polling+0xe0>)
 80085c8:	f004 fda4 	bl	800d114 <HAL_GPIO_ReadPin>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	bf0c      	ite	eq
 80085d2:	2301      	moveq	r3, #1
 80085d4:	2300      	movne	r3, #0
 80085d6:	71fb      	strb	r3, [r7, #7]

//	b2S[0] = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
	static uint32_t last_press_time = 0;
	static uint32_t press_counter = 0;
	const uint32_t DEBOUNCE_TIME = 200; // 200ms debounce time
 80085d8:	23c8      	movs	r3, #200	@ 0xc8
 80085da:	603b      	str	r3, [r7, #0]

	press_counter++; // Increment every timer tick (assuming 1ms timer)
 80085dc:	4b30      	ldr	r3, [pc, #192]	@ (80086a0 <handle_b2_button_polling+0xe4>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3301      	adds	r3, #1
 80085e2:	4a2f      	ldr	r2, [pc, #188]	@ (80086a0 <handle_b2_button_polling+0xe4>)
 80085e4:	6013      	str	r3, [r2, #0]

//	 Edge detection with debouncing
	if (b2_current_state && !joy_mode_b2_last_state) {
 80085e6:	79fb      	ldrb	r3, [r7, #7]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d047      	beq.n	800867c <handle_b2_button_polling+0xc0>
 80085ec:	4b2d      	ldr	r3, [pc, #180]	@ (80086a4 <handle_b2_button_polling+0xe8>)
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	f083 0301 	eor.w	r3, r3, #1
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d040      	beq.n	800867c <handle_b2_button_polling+0xc0>
//	 Button just pressed - check if enough time has passed since last press
		if ((press_counter - last_press_time) >= DEBOUNCE_TIME) {
 80085fa:	4b29      	ldr	r3, [pc, #164]	@ (80086a0 <handle_b2_button_polling+0xe4>)
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	4b2a      	ldr	r3, [pc, #168]	@ (80086a8 <handle_b2_button_polling+0xec>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	1ad3      	subs	r3, r2, r3
 8008604:	683a      	ldr	r2, [r7, #0]
 8008606:	429a      	cmp	r2, r3
 8008608:	d838      	bhi.n	800867c <handle_b2_button_polling+0xc0>
			// Button press is valid - trigger action
			joy_mode_b2_pressed = true;
 800860a:	4b28      	ldr	r3, [pc, #160]	@ (80086ac <handle_b2_button_polling+0xf0>)
 800860c:	2201      	movs	r2, #1
 800860e:	701a      	strb	r2, [r3, #0]
			last_press_time = press_counter;
 8008610:	4b23      	ldr	r3, [pc, #140]	@ (80086a0 <handle_b2_button_polling+0xe4>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a24      	ldr	r2, [pc, #144]	@ (80086a8 <handle_b2_button_polling+0xec>)
 8008616:	6013      	str	r3, [r2, #0]

//	if (b2S[0] != b2S[1] && b2S[0] == 1) {
			// Handle B2 button press logic
			if (!is_emergency_active() && !homing_active
 8008618:	f7ff f85e 	bl	80076d8 <is_emergency_active>
 800861c:	4603      	mov	r3, r0
 800861e:	f083 0301 	eor.w	r3, r3, #1
 8008622:	b2db      	uxtb	r3, r3
 8008624:	2b00      	cmp	r3, #0
 8008626:	d029      	beq.n	800867c <handle_b2_button_polling+0xc0>
 8008628:	4b21      	ldr	r3, [pc, #132]	@ (80086b0 <handle_b2_button_polling+0xf4>)
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	f083 0301 	eor.w	r3, r3, #1
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d022      	beq.n	800867c <handle_b2_button_polling+0xc0>
					&& motion_sequence_state == MOTION_IDLE) {
 8008636:	4b1f      	ldr	r3, [pc, #124]	@ (80086b4 <handle_b2_button_polling+0xf8>)
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d11e      	bne.n	800867c <handle_b2_button_polling+0xc0>
				if (!joy_mode_active) {
 800863e:	4b1e      	ldr	r3, [pc, #120]	@ (80086b8 <handle_b2_button_polling+0xfc>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	f083 0301 	eor.w	r3, r3, #1
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	d002      	beq.n	8008652 <handle_b2_button_polling+0x96>
					// Enter joy mode (starts in JOY_MODE_INITIAL_CONTROL)
					enter_joy_mode();
 800864c:	f7ff f854 	bl	80076f8 <enter_joy_mode>
 8008650:	e014      	b.n	800867c <handle_b2_button_polling+0xc0>
				} else {
					// Joy mode is active, handle button press based on current state
					if (joy_mode_state == JOY_MODE_INITIAL_CONTROL) {
 8008652:	4b1a      	ldr	r3, [pc, #104]	@ (80086bc <handle_b2_button_polling+0x100>)
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	2b01      	cmp	r3, #1
 8008658:	d103      	bne.n	8008662 <handle_b2_button_polling+0xa6>
						// First B2 press in joy mode - start position saving mode
						joy_mode_state = JOY_MODE_MANUAL_CONTROL;
 800865a:	4b18      	ldr	r3, [pc, #96]	@ (80086bc <handle_b2_button_polling+0x100>)
 800865c:	2202      	movs	r2, #2
 800865e:	701a      	strb	r2, [r3, #0]
 8008660:	e00c      	b.n	800867c <handle_b2_button_polling+0xc0>
					} else if (joy_mode_state == JOY_MODE_MANUAL_CONTROL) {
 8008662:	4b16      	ldr	r3, [pc, #88]	@ (80086bc <handle_b2_button_polling+0x100>)
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	2b02      	cmp	r3, #2
 8008668:	d102      	bne.n	8008670 <handle_b2_button_polling+0xb4>

						save_current_position();
 800866a:	f7ff f917 	bl	800789c <save_current_position>
 800866e:	e005      	b.n	800867c <handle_b2_button_polling+0xc0>

						// Save current position
					} else if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 8008670:	4b12      	ldr	r3, [pc, #72]	@ (80086bc <handle_b2_button_polling+0x100>)
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	2b03      	cmp	r3, #3
 8008676:	d101      	bne.n	800867c <handle_b2_button_polling+0xc0>
						start_position_playback();
 8008678:	f7ff f9c8 	bl	8007a0c <start_position_playback>
//	b2S[1] = b2S[0];
		// If not enough time has passed, ignore this button press
	}

// Update last state
	joy_mode_b2_last_state = b2_current_state;
 800867c:	4a09      	ldr	r2, [pc, #36]	@ (80086a4 <handle_b2_button_polling+0xe8>)
 800867e:	79fb      	ldrb	r3, [r7, #7]
 8008680:	7013      	strb	r3, [r2, #0]
//
//// Reset pressed flag when button is released
	if (!b2_current_state) {
 8008682:	79fb      	ldrb	r3, [r7, #7]
 8008684:	f083 0301 	eor.w	r3, r3, #1
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	d002      	beq.n	8008694 <handle_b2_button_polling+0xd8>
		joy_mode_b2_pressed = false;
 800868e:	4b07      	ldr	r3, [pc, #28]	@ (80086ac <handle_b2_button_polling+0xf0>)
 8008690:	2200      	movs	r2, #0
 8008692:	701a      	strb	r2, [r3, #0]
	}
}
 8008694:	bf00      	nop
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	48000800 	.word	0x48000800
 80086a0:	200008dc 	.word	0x200008dc
 80086a4:	20000861 	.word	0x20000861
 80086a8:	200008e0 	.word	0x200008e0
 80086ac:	20000860 	.word	0x20000860
 80086b0:	200007e3 	.word	0x200007e3
 80086b4:	20000784 	.word	0x20000784
 80086b8:	200007fd 	.word	0x200007fd
 80086bc:	200007fc 	.word	0x200007fc

080086c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	4603      	mov	r3, r0
 80086c8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == prox_Pin) {
 80086ca:	88fb      	ldrh	r3, [r7, #6]
 80086cc:	2b20      	cmp	r3, #32
 80086ce:	d105      	bne.n	80086dc <HAL_GPIO_EXTI_Callback+0x1c>
		prox_count++;
 80086d0:	4b63      	ldr	r3, [pc, #396]	@ (8008860 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	3301      	adds	r3, #1
 80086d6:	4a62      	ldr	r2, [pc, #392]	@ (8008860 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80086d8:	6013      	str	r3, [r2, #0]
		return;
 80086da:	e0bd      	b.n	8008858 <HAL_GPIO_EXTI_Callback+0x198>
	}

	if (GPIO_Pin == upperphoto_Pin) {
 80086dc:	88fb      	ldrh	r3, [r7, #6]
 80086de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086e2:	d103      	bne.n	80086ec <HAL_GPIO_EXTI_Callback+0x2c>
		up_photo = true;
 80086e4:	4b5f      	ldr	r3, [pc, #380]	@ (8008864 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80086e6:	2201      	movs	r2, #1
 80086e8:	701a      	strb	r2, [r3, #0]
		return;
 80086ea:	e0b5      	b.n	8008858 <HAL_GPIO_EXTI_Callback+0x198>
	}

	if (GPIO_Pin == LOWER_PHOTO_Pin) {
 80086ec:	88fb      	ldrh	r3, [r7, #6]
 80086ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086f2:	d103      	bne.n	80086fc <HAL_GPIO_EXTI_Callback+0x3c>
		low_photo = true;
 80086f4:	4b5c      	ldr	r3, [pc, #368]	@ (8008868 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80086f6:	2201      	movs	r2, #1
 80086f8:	701a      	strb	r2, [r3, #0]
		return;
 80086fa:	e0ad      	b.n	8008858 <HAL_GPIO_EXTI_Callback+0x198>
	}

	if (GPIO_Pin == EMER_Pin) {
 80086fc:	88fb      	ldrh	r3, [r7, #6]
 80086fe:	2b10      	cmp	r3, #16
 8008700:	d102      	bne.n	8008708 <HAL_GPIO_EXTI_Callback+0x48>
		trigger_hardware_emergency();
 8008702:	f7fe fed1 	bl	80074a8 <trigger_hardware_emergency>
		return;
 8008706:	e0a7      	b.n	8008858 <HAL_GPIO_EXTI_Callback+0x198>
	}

	if (GPIO_Pin == J1_Pin) {
 8008708:	88fb      	ldrh	r3, [r7, #6]
 800870a:	2b80      	cmp	r3, #128	@ 0x80
 800870c:	d14a      	bne.n	80087a4 <HAL_GPIO_EXTI_Callback+0xe4>

		uint32_t current_time = HAL_GetTick();
 800870e:	f002 fab9 	bl	800ac84 <HAL_GetTick>
 8008712:	60f8      	str	r0, [r7, #12]
		if ((current_time - j1_interrupt_last_time) < 200) {
 8008714:	4b55      	ldr	r3, [pc, #340]	@ (800886c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	2bc7      	cmp	r3, #199	@ 0xc7
 800871e:	f240 8096 	bls.w	800884e <HAL_GPIO_EXTI_Callback+0x18e>
			return; // ignore ถ้ายังไม่ครบ 200ms
		}
		j1_interrupt_last_time = current_time;
 8008722:	4a52      	ldr	r2, [pc, #328]	@ (800886c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6013      	str	r3, [r2, #0]

		if (!is_emergency_active() && !homing_active && !joy_mode_active
 8008728:	f7fe ffd6 	bl	80076d8 <is_emergency_active>
 800872c:	4603      	mov	r3, r0
 800872e:	f083 0301 	eor.w	r3, r3, #1
 8008732:	b2db      	uxtb	r3, r3
 8008734:	2b00      	cmp	r3, #0
 8008736:	d035      	beq.n	80087a4 <HAL_GPIO_EXTI_Callback+0xe4>
 8008738:	4b4d      	ldr	r3, [pc, #308]	@ (8008870 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	f083 0301 	eor.w	r3, r3, #1
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b00      	cmp	r3, #0
 8008744:	d02e      	beq.n	80087a4 <HAL_GPIO_EXTI_Callback+0xe4>
 8008746:	4b4b      	ldr	r3, [pc, #300]	@ (8008874 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	f083 0301 	eor.w	r3, r3, #1
 800874e:	b2db      	uxtb	r3, r3
 8008750:	2b00      	cmp	r3, #0
 8008752:	d027      	beq.n	80087a4 <HAL_GPIO_EXTI_Callback+0xe4>
				&& !first_startup) {
 8008754:	4b48      	ldr	r3, [pc, #288]	@ (8008878 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	f083 0301 	eor.w	r3, r3, #1
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b00      	cmp	r3, #0
 8008760:	d020      	beq.n	80087a4 <HAL_GPIO_EXTI_Callback+0xe4>
			if (!j1_active) {
 8008762:	4b46      	ldr	r3, [pc, #280]	@ (800887c <HAL_GPIO_EXTI_Callback+0x1bc>)
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	f083 0301 	eor.w	r3, r3, #1
 800876a:	b2db      	uxtb	r3, r3
 800876c:	2b00      	cmp	r3, #0
 800876e:	d013      	beq.n	8008798 <HAL_GPIO_EXTI_Callback+0xd8>
				// start Again
				j1_active = true;
 8008770:	4b42      	ldr	r3, [pc, #264]	@ (800887c <HAL_GPIO_EXTI_Callback+0x1bc>)
 8008772:	2201      	movs	r2, #1
 8008774:	701a      	strb	r2, [r3, #0]
				j1_cycle_count = 0;
 8008776:	4b42      	ldr	r3, [pc, #264]	@ (8008880 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8008778:	2200      	movs	r2, #0
 800877a:	701a      	strb	r2, [r3, #0]
				j1_going_to_target = true;
 800877c:	4b41      	ldr	r3, [pc, #260]	@ (8008884 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800877e:	2201      	movs	r2, #1
 8008780:	701a      	strb	r2, [r3, #0]

				// go to target
				start_combined_trajectory(J1_TARGET_PRIS, J1_TARGET_REV);
 8008782:	eddf 7a41 	vldr	s15, [pc, #260]	@ 8008888 <HAL_GPIO_EXTI_Callback+0x1c8>
 8008786:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 800888c <HAL_GPIO_EXTI_Callback+0x1cc>
 800878a:	eef0 0a47 	vmov.f32	s1, s14
 800878e:	eeb0 0a67 	vmov.f32	s0, s15
 8008792:	f7fd fded 	bl	8006370 <start_combined_trajectory>
 8008796:	e005      	b.n	80087a4 <HAL_GPIO_EXTI_Callback+0xe4>
			} else {
				// stop

				j1_active = false;
 8008798:	4b38      	ldr	r3, [pc, #224]	@ (800887c <HAL_GPIO_EXTI_Callback+0x1bc>)
 800879a:	2200      	movs	r2, #0
 800879c:	701a      	strb	r2, [r3, #0]
				j1_cycle_count = 0;
 800879e:	4b38      	ldr	r3, [pc, #224]	@ (8008880 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80087a0:	2200      	movs	r2, #0
 80087a2:	701a      	strb	r2, [r3, #0]
			}
		}
	}
// J2 is NOT handled here anymore - it's polled in the main loop

	if (GPIO_Pin == J3_Pin) {
 80087a4:	88fb      	ldrh	r3, [r7, #6]
 80087a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087aa:	d13a      	bne.n	8008822 <HAL_GPIO_EXTI_Callback+0x162>
		uint32_t current_time = HAL_GetTick();
 80087ac:	f002 fa6a 	bl	800ac84 <HAL_GetTick>
 80087b0:	60b8      	str	r0, [r7, #8]

		// Reset counter if timeout exceeded
		if ((current_time - j3_last_press_time) > J3_PRESS_TIMEOUT) {
 80087b2:	4b37      	ldr	r3, [pc, #220]	@ (8008890 <HAL_GPIO_EXTI_Callback+0x1d0>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80087be:	4293      	cmp	r3, r2
 80087c0:	d902      	bls.n	80087c8 <HAL_GPIO_EXTI_Callback+0x108>
			j3_press_count = 0;
 80087c2:	4b34      	ldr	r3, [pc, #208]	@ (8008894 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80087c4:	2200      	movs	r2, #0
 80087c6:	701a      	strb	r2, [r3, #0]
		}

		j3_last_press_time = current_time;
 80087c8:	4a31      	ldr	r2, [pc, #196]	@ (8008890 <HAL_GPIO_EXTI_Callback+0x1d0>)
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	6013      	str	r3, [r2, #0]
		j3_press_count++;
 80087ce:	4b31      	ldr	r3, [pc, #196]	@ (8008894 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	3301      	adds	r3, #1
 80087d4:	b2da      	uxtb	r2, r3
 80087d6:	4b2f      	ldr	r3, [pc, #188]	@ (8008894 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80087d8:	701a      	strb	r2, [r3, #0]

		if (!is_emergency_active() && !joy_mode_active
 80087da:	f7fe ff7d 	bl	80076d8 <is_emergency_active>
 80087de:	4603      	mov	r3, r0
 80087e0:	f083 0301 	eor.w	r3, r3, #1
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d033      	beq.n	8008852 <HAL_GPIO_EXTI_Callback+0x192>
 80087ea:	4b22      	ldr	r3, [pc, #136]	@ (8008874 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	f083 0301 	eor.w	r3, r3, #1
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d02c      	beq.n	8008852 <HAL_GPIO_EXTI_Callback+0x192>
				&& motion_sequence_state == MOTION_IDLE) {
 80087f8:	4b27      	ldr	r3, [pc, #156]	@ (8008898 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d128      	bne.n	8008852 <HAL_GPIO_EXTI_Callback+0x192>
			switch (j3_press_count) {
 8008800:	4b24      	ldr	r3, [pc, #144]	@ (8008894 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d105      	bne.n	8008814 <HAL_GPIO_EXTI_Callback+0x154>
			case 1:
				// กดครั้งแรก: วาดคำ FIBO_G01
				start_word_FIBO_G01();
 8008808:	f000 fbec 	bl	8008fe4 <start_word_FIBO_G01>
				j3_press_count = 0; // Reset counter
 800880c:	4b21      	ldr	r3, [pc, #132]	@ (8008894 <HAL_GPIO_EXTI_Callback+0x1d4>)
 800880e:	2200      	movs	r2, #0
 8008810:	701a      	strb	r2, [r3, #0]
				break;
 8008812:	e005      	b.n	8008820 <HAL_GPIO_EXTI_Callback+0x160>

			default:
				// Reset if pressed too many times
				stop_character_drawing();
 8008814:	f000 fbbc 	bl	8008f90 <stop_character_drawing>
				j3_press_count = 0;
 8008818:	4b1e      	ldr	r3, [pc, #120]	@ (8008894 <HAL_GPIO_EXTI_Callback+0x1d4>)
 800881a:	2200      	movs	r2, #0
 800881c:	701a      	strb	r2, [r3, #0]
				break;
 800881e:	bf00      	nop
			}
		}
		return;
 8008820:	e017      	b.n	8008852 <HAL_GPIO_EXTI_Callback+0x192>

	}

// Modified J4 button handler for joy mode exit
	if (GPIO_Pin == J4_Pin) {
 8008822:	88fb      	ldrh	r3, [r7, #6]
 8008824:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008828:	d116      	bne.n	8008858 <HAL_GPIO_EXTI_Callback+0x198>
		if (joy_mode_active) {
 800882a:	4b12      	ldr	r3, [pc, #72]	@ (8008874 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d002      	beq.n	8008838 <HAL_GPIO_EXTI_Callback+0x178>
			// Exit joy mode and hold current position (don't move)
			exit_joy_mode();
 8008832:	f7fe ffbf 	bl	80077b4 <exit_joy_mode>
		} else if (is_emergency_active()) {
			clear_emergency_state();
			start_homing_sequence(true);
		}
		return;
 8008836:	e00e      	b.n	8008856 <HAL_GPIO_EXTI_Callback+0x196>
		} else if (is_emergency_active()) {
 8008838:	f7fe ff4e 	bl	80076d8 <is_emergency_active>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d009      	beq.n	8008856 <HAL_GPIO_EXTI_Callback+0x196>
			clear_emergency_state();
 8008842:	f7fe fe6f 	bl	8007524 <clear_emergency_state>
			start_homing_sequence(true);
 8008846:	2001      	movs	r0, #1
 8008848:	f7fd f846 	bl	80058d8 <start_homing_sequence>
		return;
 800884c:	e003      	b.n	8008856 <HAL_GPIO_EXTI_Callback+0x196>
			return; // ignore ถ้ายังไม่ครบ 200ms
 800884e:	bf00      	nop
 8008850:	e002      	b.n	8008858 <HAL_GPIO_EXTI_Callback+0x198>
		return;
 8008852:	bf00      	nop
 8008854:	e000      	b.n	8008858 <HAL_GPIO_EXTI_Callback+0x198>
		return;
 8008856:	bf00      	nop
	}
}
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	200007dc 	.word	0x200007dc
 8008864:	200007e0 	.word	0x200007e0
 8008868:	200007e1 	.word	0x200007e1
 800886c:	20000890 	.word	0x20000890
 8008870:	200007e3 	.word	0x200007e3
 8008874:	200007fd 	.word	0x200007fd
 8008878:	20000333 	.word	0x20000333
 800887c:	2000088e 	.word	0x2000088e
 8008880:	2000088d 	.word	0x2000088d
 8008884:	20000335 	.word	0x20000335
 8008888:	43480000 	.word	0x43480000
 800888c:	42b40000 	.word	0x42b40000
 8008890:	20000898 	.word	0x20000898
 8008894:	20000894 	.word	0x20000894
 8008898:	20000784 	.word	0x20000784

0800889c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4aa5      	ldr	r2, [pc, #660]	@ (8008b3c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	f040 8143 	bne.w	8008b34 <HAL_TIM_PeriodElapsedCallback+0x298>
		Modbus_Protocal_Worker();
 80088ae:	f7f9 fbcf 	bl	8002050 <Modbus_Protocal_Worker>
		modbus_working();
 80088b2:	f000 f96d 	bl	8008b90 <modbus_working>

		plotter_update_sensors();
 80088b6:	f001 f83d 	bl	8009934 <plotter_update_sensors>
		check_emergency_button();
 80088ba:	f7fe fd63 	bl	8007384 <check_emergency_button>

		QEI_get_diff_count(&prismatic_encoder);
 80088be:	48a0      	ldr	r0, [pc, #640]	@ (8008b40 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80088c0:	f7fb fae2 	bl	8003e88 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 80088c4:	489e      	ldr	r0, [pc, #632]	@ (8008b40 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80088c6:	f7fb fbcb 	bl	8004060 <QEI_compute_data>
		QEI_get_diff_count(&revolute_encoder);
 80088ca:	489e      	ldr	r0, [pc, #632]	@ (8008b44 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80088cc:	f7fb fadc 	bl	8003e88 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 80088d0:	489c      	ldr	r0, [pc, #624]	@ (8008b44 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80088d2:	f7fb fbc5 	bl	8004060 <QEI_compute_data>

		revolute_axis.input_voltage = mapf(revolute_axis.command_pos, -65535.0f,
 80088d6:	4b9c      	ldr	r3, [pc, #624]	@ (8008b48 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80088d8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80088dc:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 80088e0:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 80088e4:	ed9f 1a99 	vldr	s2, [pc, #612]	@ 8008b4c <HAL_TIM_PeriodElapsedCallback+0x2b0>
 80088e8:	eddf 0a99 	vldr	s1, [pc, #612]	@ 8008b50 <HAL_TIM_PeriodElapsedCallback+0x2b4>
 80088ec:	eeb0 0a67 	vmov.f32	s0, s15
 80088f0:	f7f9 fa97 	bl	8001e22 <mapf>
 80088f4:	eef0 7a40 	vmov.f32	s15, s0
 80088f8:	4b93      	ldr	r3, [pc, #588]	@ (8008b48 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80088fa:	edc3 7a08 	vstr	s15, [r3, #32]
				65535.0f, -12.0f, 12.0f);
		revolute_axis.kalman_velocity = SteadyStateKalmanFilter(
 80088fe:	4b92      	ldr	r3, [pc, #584]	@ (8008b48 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8008900:	edd3 7a08 	vldr	s15, [r3, #32]
 8008904:	4b8f      	ldr	r3, [pc, #572]	@ (8008b44 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8008906:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800890a:	eef0 0a47 	vmov.f32	s1, s14
 800890e:	eeb0 0a67 	vmov.f32	s0, s15
 8008912:	4890      	ldr	r0, [pc, #576]	@ (8008b54 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8008914:	f7fc fbe2 	bl	80050dc <SteadyStateKalmanFilter>
 8008918:	eef0 7a40 	vmov.f32	s15, s0
 800891c:	4b8a      	ldr	r3, [pc, #552]	@ (8008b48 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800891e:	edc3 7a07 	vstr	s15, [r3, #28]
				&revolute_kalman, revolute_axis.input_voltage,
				revolute_encoder.rads);

		if (isnan(revolute_axis.kalman_velocity)) {
 8008922:	4b89      	ldr	r3, [pc, #548]	@ (8008b48 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8008924:	edd3 7a07 	vldr	s15, [r3, #28]
 8008928:	eef4 7a67 	vcmp.f32	s15, s15
 800892c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008930:	d703      	bvc.n	800893a <HAL_TIM_PeriodElapsedCallback+0x9e>
			revolute_axis.kalman_velocity = 0.0f;
 8008932:	4b85      	ldr	r3, [pc, #532]	@ (8008b48 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8008934:	f04f 0200 	mov.w	r2, #0
 8008938:	61da      	str	r2, [r3, #28]
		}

		prismatic_axis.input_voltage = mapf(prismatic_axis.command_pos,
 800893a:	4b87      	ldr	r3, [pc, #540]	@ (8008b58 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800893c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008940:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8008944:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8008948:	ed9f 1a80 	vldr	s2, [pc, #512]	@ 8008b4c <HAL_TIM_PeriodElapsedCallback+0x2b0>
 800894c:	eddf 0a80 	vldr	s1, [pc, #512]	@ 8008b50 <HAL_TIM_PeriodElapsedCallback+0x2b4>
 8008950:	eeb0 0a67 	vmov.f32	s0, s15
 8008954:	f7f9 fa65 	bl	8001e22 <mapf>
 8008958:	eef0 7a40 	vmov.f32	s15, s0
 800895c:	4b7e      	ldr	r3, [pc, #504]	@ (8008b58 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800895e:	edc3 7a08 	vstr	s15, [r3, #32]
				-65535.0f, 65535.0f, -12.0f, 12.0f);
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8008962:	4b7d      	ldr	r3, [pc, #500]	@ (8008b58 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008964:	edd3 7a08 	vldr	s15, [r3, #32]
 8008968:	4b75      	ldr	r3, [pc, #468]	@ (8008b40 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800896a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800896e:	eef0 0a47 	vmov.f32	s1, s14
 8008972:	eeb0 0a67 	vmov.f32	s0, s15
 8008976:	4879      	ldr	r0, [pc, #484]	@ (8008b5c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8008978:	f7fa fcc0 	bl	80032fc <MotorKalman_Estimate>
 800897c:	eeb0 7a40 	vmov.f32	s14, s0
				prismatic_axis.input_voltage, prismatic_encoder.rads)
				* Disturbance_Constant.prismatic_pulley_radius * 1000.0f;
 8008980:	4b77      	ldr	r3, [pc, #476]	@ (8008b60 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8008982:	edd3 7a04 	vldr	s15, [r3, #16]
 8008986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800898a:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8008b64 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 800898e:	ee67 7a87 	vmul.f32	s15, s15, s14
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8008992:	4b71      	ldr	r3, [pc, #452]	@ (8008b58 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008994:	edc3 7a07 	vstr	s15, [r3, #28]

		if (isnan(prismatic_axis.kalman_velocity)) {
 8008998:	4b6f      	ldr	r3, [pc, #444]	@ (8008b58 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800899a:	edd3 7a07 	vldr	s15, [r3, #28]
 800899e:	eef4 7a67 	vcmp.f32	s15, s15
 80089a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089a6:	d703      	bvc.n	80089b0 <HAL_TIM_PeriodElapsedCallback+0x114>
			prismatic_axis.kalman_velocity = 0.0f;
 80089a8:	4b6b      	ldr	r3, [pc, #428]	@ (8008b58 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80089aa:	f04f 0200 	mov.w	r2, #0
 80089ae:	61da      	str	r2, [r3, #28]
		}

		// Position control update - Allow during HOMING_REV_TO_ZERO_DEG
		if (++position_control_tick >= POSITION_CONTROL_DIVIDER) {
 80089b0:	4b6d      	ldr	r3, [pc, #436]	@ (8008b68 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	3301      	adds	r3, #1
 80089b6:	4a6c      	ldr	r2, [pc, #432]	@ (8008b68 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80089b8:	6013      	str	r3, [r2, #0]
 80089ba:	2b09      	cmp	r3, #9
 80089bc:	d92e      	bls.n	8008a1c <HAL_TIM_PeriodElapsedCallback+0x180>
			position_control_tick = 0;
 80089be:	4b6a      	ldr	r3, [pc, #424]	@ (8008b68 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	601a      	str	r2, [r3, #0]

			if ((!homing_active || homing_state == HOMING_REV_TO_ZERO_DEG) // ← FIXED
 80089c4:	4b69      	ldr	r3, [pc, #420]	@ (8008b6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	f083 0301 	eor.w	r3, r3, #1
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d103      	bne.n	80089da <HAL_TIM_PeriodElapsedCallback+0x13e>
 80089d2:	4b67      	ldr	r3, [pc, #412]	@ (8008b70 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	2b07      	cmp	r3, #7
 80089d8:	d120      	bne.n	8008a1c <HAL_TIM_PeriodElapsedCallback+0x180>
					&& (!joy_mode_active
 80089da:	4b66      	ldr	r3, [pc, #408]	@ (8008b74 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	f083 0301 	eor.w	r3, r3, #1
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10b      	bne.n	8008a00 <HAL_TIM_PeriodElapsedCallback+0x164>
							|| (joy_mode_state != JOY_MODE_MANUAL_CONTROL
 80089e8:	4b63      	ldr	r3, [pc, #396]	@ (8008b78 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d015      	beq.n	8008a1c <HAL_TIM_PeriodElapsedCallback+0x180>
									&& joy_mode_state
											!= JOY_MODE_INITIAL_CONTROL
 80089f0:	4b61      	ldr	r3, [pc, #388]	@ (8008b78 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80089f2:	781b      	ldrb	r3, [r3, #0]
									&& joy_mode_state
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d011      	beq.n	8008a1c <HAL_TIM_PeriodElapsedCallback+0x180>
									&& joy_mode_state != JOY_MODE_POSITION_SAVED))
 80089f8:	4b5f      	ldr	r3, [pc, #380]	@ (8008b78 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	2b03      	cmp	r3, #3
 80089fe:	d00d      	beq.n	8008a1c <HAL_TIM_PeriodElapsedCallback+0x180>
					&& (!is_emergency_active() || tuning_mode)) {
 8008a00:	f7fe fe6a 	bl	80076d8 <is_emergency_active>
 8008a04:	4603      	mov	r3, r0
 8008a06:	f083 0301 	eor.w	r3, r3, #1
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d103      	bne.n	8008a18 <HAL_TIM_PeriodElapsedCallback+0x17c>
 8008a10:	4b5a      	ldr	r3, [pc, #360]	@ (8008b7c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d001      	beq.n	8008a1c <HAL_TIM_PeriodElapsedCallback+0x180>
				update_position_control();
 8008a18:	f7fd fee8 	bl	80067ec <update_position_control>
			}
		}

		// Velocity control update - Allow during HOMING_REV_TO_ZERO_DEG
		if ((!homing_active || homing_state == HOMING_REV_TO_ZERO_DEG) // ← FIXED
 8008a1c:	4b53      	ldr	r3, [pc, #332]	@ (8008b6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	f083 0301 	eor.w	r3, r3, #1
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d103      	bne.n	8008a32 <HAL_TIM_PeriodElapsedCallback+0x196>
 8008a2a:	4b51      	ldr	r3, [pc, #324]	@ (8008b70 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	2b07      	cmp	r3, #7
 8008a30:	d120      	bne.n	8008a74 <HAL_TIM_PeriodElapsedCallback+0x1d8>
				&& (!joy_mode_active
 8008a32:	4b50      	ldr	r3, [pc, #320]	@ (8008b74 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	f083 0301 	eor.w	r3, r3, #1
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10b      	bne.n	8008a58 <HAL_TIM_PeriodElapsedCallback+0x1bc>
						|| (joy_mode_state != JOY_MODE_MANUAL_CONTROL
 8008a40:	4b4d      	ldr	r3, [pc, #308]	@ (8008b78 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d015      	beq.n	8008a74 <HAL_TIM_PeriodElapsedCallback+0x1d8>
								&& joy_mode_state != JOY_MODE_INITIAL_CONTROL
 8008a48:	4b4b      	ldr	r3, [pc, #300]	@ (8008b78 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d011      	beq.n	8008a74 <HAL_TIM_PeriodElapsedCallback+0x1d8>
								&& joy_mode_state != JOY_MODE_POSITION_SAVED))
 8008a50:	4b49      	ldr	r3, [pc, #292]	@ (8008b78 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	2b03      	cmp	r3, #3
 8008a56:	d00d      	beq.n	8008a74 <HAL_TIM_PeriodElapsedCallback+0x1d8>
				&& (!is_emergency_active() || tuning_mode)) {
 8008a58:	f7fe fe3e 	bl	80076d8 <is_emergency_active>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	f083 0301 	eor.w	r3, r3, #1
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d103      	bne.n	8008a70 <HAL_TIM_PeriodElapsedCallback+0x1d4>
 8008a68:	4b44      	ldr	r3, [pc, #272]	@ (8008b7c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <HAL_TIM_PeriodElapsedCallback+0x1d8>
			update_velocity_control();
 8008a70:	f7fd ff7a 	bl	8006968 <update_velocity_control>
		}

		update_safety_system();
 8008a74:	f7fe fdae 	bl	80075d4 <update_safety_system>

		if (!is_emergency_active() || tuning_mode) {
 8008a78:	f7fe fe2e 	bl	80076d8 <is_emergency_active>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	f083 0301 	eor.w	r3, r3, #1
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d103      	bne.n	8008a90 <HAL_TIM_PeriodElapsedCallback+0x1f4>
 8008a88:	4b3c      	ldr	r3, [pc, #240]	@ (8008b7c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d001      	beq.n	8008a94 <HAL_TIM_PeriodElapsedCallback+0x1f8>
			check_safety_conditions();
 8008a90:	f7fe fc9c 	bl	80073cc <check_safety_conditions>
		}

		// Control loops - joy mode handles its own control
		if (!joy_mode_active) {
 8008a94:	4b37      	ldr	r3, [pc, #220]	@ (8008b74 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	f083 0301 	eor.w	r3, r3, #1
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d002      	beq.n	8008aa8 <HAL_TIM_PeriodElapsedCallback+0x20c>
			update_control_loops();
 8008aa2:	f7fe f977 	bl	8006d94 <update_control_loops>
 8008aa6:	e001      	b.n	8008aac <HAL_TIM_PeriodElapsedCallback+0x210>
		} else {
			update_joy_mode();
 8008aa8:	f7ff fb9c 	bl	80081e4 <update_joy_mode>
		}

		// ALWAYS update display values
		if (!joy_mode_active) {
 8008aac:	4b31      	ldr	r3, [pc, #196]	@ (8008b74 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	f083 0301 	eor.w	r3, r3, #1
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d01e      	beq.n	8008af8 <HAL_TIM_PeriodElapsedCallback+0x25c>
			// Update display values for normal operation
			normalized_position = normalize_angle(revolute_encoder.rads);
 8008aba:	4b22      	ldr	r3, [pc, #136]	@ (8008b44 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8008abc:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8008ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8008ac4:	f7fd fb6a 	bl	800619c <normalize_angle>
 8008ac8:	eef0 7a40 	vmov.f32	s15, s0
 8008acc:	4b2c      	ldr	r3, [pc, #176]	@ (8008b80 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8008ace:	edc3 7a00 	vstr	s15, [r3]
			prismatic_axis.mm = prismatic_encoder.mm;
 8008ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8008b40 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ad6:	4a20      	ldr	r2, [pc, #128]	@ (8008b58 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008ad8:	6393      	str	r3, [r2, #56]	@ 0x38
			revolute_axis.deg = UnitConverter_angle(&converter_system,
 8008ada:	4b29      	ldr	r3, [pc, #164]	@ (8008b80 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8008adc:	edd3 7a00 	vldr	s15, [r3]
 8008ae0:	220e      	movs	r2, #14
 8008ae2:	210f      	movs	r1, #15
 8008ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8008ae8:	4826      	ldr	r0, [pc, #152]	@ (8008b84 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8008aea:	f7fc f86d 	bl	8004bc8 <UnitConverter_angle>
 8008aee:	eef0 7a40 	vmov.f32	s15, s0
 8008af2:	4b15      	ldr	r3, [pc, #84]	@ (8008b48 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8008af4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
					normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		}
		// Note: joy mode updates its own display values in update_joy_mode()

		prismatic_axis.accel_show = FIR_process(&prismatic_lp_accel,
 8008af8:	4b11      	ldr	r3, [pc, #68]	@ (8008b40 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008afa:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8008afe:	eeb0 0a67 	vmov.f32	s0, s15
 8008b02:	4821      	ldr	r0, [pc, #132]	@ (8008b88 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8008b04:	f7f9 f934 	bl	8001d70 <FIR_process>
 8008b08:	eef0 7a40 	vmov.f32	s15, s0
 8008b0c:	4b12      	ldr	r3, [pc, #72]	@ (8008b58 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008b0e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				prismatic_encoder.mmpss);
		revolute_axis.accel_show = FIR_process(&revolute_lp_accel,
 8008b12:	4b0c      	ldr	r3, [pc, #48]	@ (8008b44 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8008b14:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8008b18:	eeb0 0a67 	vmov.f32	s0, s15
 8008b1c:	481b      	ldr	r0, [pc, #108]	@ (8008b8c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8008b1e:	f7f9 f927 	bl	8001d70 <FIR_process>
 8008b22:	eef0 7a40 	vmov.f32	s15, s0
 8008b26:	4b08      	ldr	r3, [pc, #32]	@ (8008b48 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8008b28:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				revolute_encoder.radpss);

		update_character_drawing();
 8008b2c:	f000 f9ae 	bl	8008e8c <update_character_drawing>
		draw_word_FIBO_G01();
 8008b30:	f000 fa7e 	bl	8009030 <draw_word_FIBO_G01>
	}
}
 8008b34:	bf00      	nop
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	20001f3c 	.word	0x20001f3c
 8008b40:	2000097c 	.word	0x2000097c
 8008b44:	200009d8 	.word	0x200009d8
 8008b48:	20000740 	.word	0x20000740
 8008b4c:	477fff00 	.word	0x477fff00
 8008b50:	c77fff00 	.word	0xc77fff00
 8008b54:	20001a7c 	.word	0x20001a7c
 8008b58:	200006fc 	.word	0x200006fc
 8008b5c:	20001710 	.word	0x20001710
 8008b60:	20000100 	.word	0x20000100
 8008b64:	447a0000 	.word	0x447a0000
 8008b68:	200007f0 	.word	0x200007f0
 8008b6c:	200007e3 	.word	0x200007e3
 8008b70:	200007e2 	.word	0x200007e2
 8008b74:	200007fd 	.word	0x200007fd
 8008b78:	200007fc 	.word	0x200007fc
 8008b7c:	20000334 	.word	0x20000334
 8008b80:	200007f4 	.word	0x200007f4
 8008b84:	20000d70 	.word	0x20000d70
 8008b88:	20000fc8 	.word	0x20000fc8
 8008b8c:	20000fd4 	.word	0x20000fd4

08008b90 <modbus_working>:

//modbus
void modbus_working(void) {
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0

	uint16_t limit_switch_status = 0;
 8008b96:	2300      	movs	r3, #0
 8008b98:	82fb      	strh	r3, [r7, #22]
//heartbeat
	registerFrame[Heartbeat_Protocol].U16 = 22881;
 8008b9a:	4b73      	ldr	r3, [pc, #460]	@ (8008d68 <modbus_working+0x1d8>)
 8008b9c:	f645 1261 	movw	r2, #22881	@ 0x5961
 8008ba0:	801a      	strh	r2, [r3, #0]
//servo write
	if (registerFrame[Servo_UP].U16 == 1) {
 8008ba2:	4b71      	ldr	r3, [pc, #452]	@ (8008d68 <modbus_working+0x1d8>)
 8008ba4:	891b      	ldrh	r3, [r3, #8]
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d102      	bne.n	8008bb0 <modbus_working+0x20>
		plotter_pen_up();
 8008baa:	f000 ff6b 	bl	8009a84 <plotter_pen_up>
 8008bae:	e005      	b.n	8008bbc <modbus_working+0x2c>
	} else if (registerFrame[Servo_Down].U16 == 1) {
 8008bb0:	4b6d      	ldr	r3, [pc, #436]	@ (8008d68 <modbus_working+0x1d8>)
 8008bb2:	895b      	ldrh	r3, [r3, #10]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d101      	bne.n	8008bbc <modbus_working+0x2c>
		plotter_pen_down();
 8008bb8:	f000 ff74 	bl	8009aa4 <plotter_pen_down>
	}

//limitSW
	if (up_lim == 1) {
 8008bbc:	4b6b      	ldr	r3, [pc, #428]	@ (8008d6c <modbus_working+0x1dc>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d103      	bne.n	8008bcc <modbus_working+0x3c>
		limit_switch_status |= 0x02;  // Bit 1 = Limit UP
 8008bc4:	8afb      	ldrh	r3, [r7, #22]
 8008bc6:	f043 0302 	orr.w	r3, r3, #2
 8008bca:	82fb      	strh	r3, [r7, #22]
	}
	if (low_lim == 1) {
 8008bcc:	4b68      	ldr	r3, [pc, #416]	@ (8008d70 <modbus_working+0x1e0>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d103      	bne.n	8008bdc <modbus_working+0x4c>
		limit_switch_status |= 0x01;  // Bit 0 = Limit DOWN
 8008bd4:	8afb      	ldrh	r3, [r7, #22]
 8008bd6:	f043 0301 	orr.w	r3, r3, #1
 8008bda:	82fb      	strh	r3, [r7, #22]
	}
	registerFrame[LimitSwitch_Status].U16 = limit_switch_status;
 8008bdc:	4a62      	ldr	r2, [pc, #392]	@ (8008d68 <modbus_working+0x1d8>)
 8008bde:	8afb      	ldrh	r3, [r7, #22]
 8008be0:	80d3      	strh	r3, [r2, #6]

	if (registerFrame[BaseSystem_Status].U16 == 1) {
 8008be2:	4b61      	ldr	r3, [pc, #388]	@ (8008d68 <modbus_working+0x1d8>)
 8008be4:	885b      	ldrh	r3, [r3, #2]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d10b      	bne.n	8008c02 <modbus_working+0x72>
		exit_joy_mode();
 8008bea:	f7fe fde3 	bl	80077b4 <exit_joy_mode>

		registerFrame[R_Theta_Status].U16 = 1;
 8008bee:	4b5e      	ldr	r3, [pc, #376]	@ (8008d68 <modbus_working+0x1d8>)
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	841a      	strh	r2, [r3, #32]
		start_combined_trajectory(0.0, 0.0);
 8008bf4:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8008d74 <modbus_working+0x1e4>
 8008bf8:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8008d74 <modbus_working+0x1e4>
 8008bfc:	f7fd fbb8 	bl	8006370 <start_combined_trajectory>
 8008c00:	e03b      	b.n	8008c7a <modbus_working+0xea>
//		PID_CONTROLLER_Reset(&prismatic_velocity_pid);
//		PID_CONTROLLER_Reset(&revolute_position_pid);
//		PID_CONTROLLER_Reset(&revolute_velocity_pid);
//		PID_CONTROLLER_Reset(&revolute_velocity_pid);

	} else if (registerFrame[BaseSystem_Status].U16 == 2) {
 8008c02:	4b59      	ldr	r3, [pc, #356]	@ (8008d68 <modbus_working+0x1d8>)
 8008c04:	885b      	ldrh	r3, [r3, #2]
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d105      	bne.n	8008c16 <modbus_working+0x86>
		registerFrame[R_Theta_Status].U16 = 2;
 8008c0a:	4b57      	ldr	r3, [pc, #348]	@ (8008d68 <modbus_working+0x1d8>)
 8008c0c:	2202      	movs	r2, #2
 8008c0e:	841a      	strh	r2, [r3, #32]
		enter_joy_mode();
 8008c10:	f7fe fd72 	bl	80076f8 <enter_joy_mode>
 8008c14:	e031      	b.n	8008c7a <modbus_working+0xea>
	} else if (registerFrame[BaseSystem_Status].U16 == 4) {
 8008c16:	4b54      	ldr	r3, [pc, #336]	@ (8008d68 <modbus_working+0x1d8>)
 8008c18:	885b      	ldrh	r3, [r3, #2]
 8008c1a:	2b04      	cmp	r3, #4
 8008c1c:	d102      	bne.n	8008c24 <modbus_working+0x94>
		exit_joy_mode();
 8008c1e:	f7fe fdc9 	bl	80077b4 <exit_joy_mode>
 8008c22:	e02a      	b.n	8008c7a <modbus_working+0xea>
	} else if (registerFrame[BaseSystem_Status].U16 == 8) {
 8008c24:	4b50      	ldr	r3, [pc, #320]	@ (8008d68 <modbus_working+0x1d8>)
 8008c26:	885b      	ldrh	r3, [r3, #2]
 8008c28:	2b08      	cmp	r3, #8
 8008c2a:	d126      	bne.n	8008c7a <modbus_working+0xea>
		registerFrame[R_Theta_Status].U16 = 8;
 8008c2c:	4b4e      	ldr	r3, [pc, #312]	@ (8008d68 <modbus_working+0x1d8>)
 8008c2e:	2208      	movs	r2, #8
 8008c30:	841a      	strh	r2, [r3, #32]
		exit_joy_mode();
 8008c32:	f7fe fdbf 	bl	80077b4 <exit_joy_mode>
		float goal_r_mm = (float) (int16_t) registerFrame[Goal_R].U16 / 10.0;
 8008c36:	4b4c      	ldr	r3, [pc, #304]	@ (8008d68 <modbus_working+0x1d8>)
 8008c38:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8008c3c:	b21b      	sxth	r3, r3
 8008c3e:	ee07 3a90 	vmov	s15, r3
 8008c42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008c46:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8008c4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c4e:	edc7 7a04 	vstr	s15, [r7, #16]
		float goal_theta_deg = (float) (int16_t) registerFrame[Goal_Theta].U16
 8008c52:	4b45      	ldr	r3, [pc, #276]	@ (8008d68 <modbus_working+0x1d8>)
 8008c54:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8008c58:	b21b      	sxth	r3, r3
 8008c5a:	ee07 3a90 	vmov	s15, r3
 8008c5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008c62:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8008c66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c6a:	edc7 7a03 	vstr	s15, [r7, #12]
				/ 10.0;

		start_combined_trajectory(goal_r_mm, goal_theta_deg);
 8008c6e:	edd7 0a03 	vldr	s1, [r7, #12]
 8008c72:	ed97 0a04 	vldr	s0, [r7, #16]
 8008c76:	f7fd fb7b 	bl	8006370 <start_combined_trajectory>
	}

	registerFrame[R_Axis_Actual_Position].U16 = prismatic_encoder.mm * 10.0f;
 8008c7a:	4b3f      	ldr	r3, [pc, #252]	@ (8008d78 <modbus_working+0x1e8>)
 8008c7c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8008c80:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008c84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c8c:	ee17 3a90 	vmov	r3, s15
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	4b35      	ldr	r3, [pc, #212]	@ (8008d68 <modbus_working+0x1d8>)
 8008c94:	845a      	strh	r2, [r3, #34]	@ 0x22
	registerFrame[R_Axis_Actual_Speed].U16 = prismatic_axis.kalman_velocity
 8008c96:	4b39      	ldr	r3, [pc, #228]	@ (8008d7c <modbus_working+0x1ec>)
 8008c98:	edd3 7a07 	vldr	s15, [r3, #28]
			* 10.0f;
 8008c9c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008ca0:	ee67 7a87 	vmul.f32	s15, s15, s14
	registerFrame[R_Axis_Actual_Speed].U16 = prismatic_axis.kalman_velocity
 8008ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ca8:	ee17 3a90 	vmov	r3, s15
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	4b2e      	ldr	r3, [pc, #184]	@ (8008d68 <modbus_working+0x1d8>)
 8008cb0:	84da      	strh	r2, [r3, #38]	@ 0x26

	float pris_accel = FIR_process(&prismatic_lp_accel,
 8008cb2:	4b31      	ldr	r3, [pc, #196]	@ (8008d78 <modbus_working+0x1e8>)
 8008cb4:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8008cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8008cbc:	4830      	ldr	r0, [pc, #192]	@ (8008d80 <modbus_working+0x1f0>)
 8008cbe:	f7f9 f857 	bl	8001d70 <FIR_process>
 8008cc2:	ed87 0a02 	vstr	s0, [r7, #8]
			prismatic_encoder.mmpss);
	registerFrame[R_Axis_Acceleration].U16 = pris_accel * 10.0f;
 8008cc6:	edd7 7a02 	vldr	s15, [r7, #8]
 8008cca:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008cce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cd6:	ee17 3a90 	vmov	r3, s15
 8008cda:	b29a      	uxth	r2, r3
 8008cdc:	4b22      	ldr	r3, [pc, #136]	@ (8008d68 <modbus_working+0x1d8>)
 8008cde:	855a      	strh	r2, [r3, #42]	@ 0x2a

	registerFrame[Theta_Axis_Actual_Position].U16 = revolute_axis.deg * 10.0f;
 8008ce0:	4b28      	ldr	r3, [pc, #160]	@ (8008d84 <modbus_working+0x1f4>)
 8008ce2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8008ce6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008cea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008cee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cf2:	ee17 3a90 	vmov	r3, s15
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8008d68 <modbus_working+0x1d8>)
 8008cfa:	849a      	strh	r2, [r3, #36]	@ 0x24

	float rev_theta_vel = UnitConverter_angle(&converter_system,
 8008cfc:	4b21      	ldr	r3, [pc, #132]	@ (8008d84 <modbus_working+0x1f4>)
 8008cfe:	edd3 7a07 	vldr	s15, [r3, #28]
 8008d02:	220e      	movs	r2, #14
 8008d04:	210f      	movs	r1, #15
 8008d06:	eeb0 0a67 	vmov.f32	s0, s15
 8008d0a:	481f      	ldr	r0, [pc, #124]	@ (8008d88 <modbus_working+0x1f8>)
 8008d0c:	f7fb ff5c 	bl	8004bc8 <UnitConverter_angle>
 8008d10:	ed87 0a01 	vstr	s0, [r7, #4]
			revolute_axis.kalman_velocity, UNIT_RADIAN, UNIT_DEGREE);
	registerFrame[Theta_Axis_Actual_Speed].U16 = rev_theta_vel * 10.0f;
 8008d14:	edd7 7a01 	vldr	s15, [r7, #4]
 8008d18:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008d1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008d20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d24:	ee17 3a90 	vmov	r3, s15
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8008d68 <modbus_working+0x1d8>)
 8008d2c:	851a      	strh	r2, [r3, #40]	@ 0x28

	float rev_theta_accel = UnitConverter_angle(&converter_system,
 8008d2e:	4b17      	ldr	r3, [pc, #92]	@ (8008d8c <modbus_working+0x1fc>)
 8008d30:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8008d34:	220e      	movs	r2, #14
 8008d36:	210f      	movs	r1, #15
 8008d38:	eeb0 0a67 	vmov.f32	s0, s15
 8008d3c:	4812      	ldr	r0, [pc, #72]	@ (8008d88 <modbus_working+0x1f8>)
 8008d3e:	f7fb ff43 	bl	8004bc8 <UnitConverter_angle>
 8008d42:	ed87 0a00 	vstr	s0, [r7]
			revolute_encoder.radpss, UNIT_RADIAN, UNIT_DEGREE);
	registerFrame[Theta_Axis_Acceleration].U16 = rev_theta_accel * 10.0f;
 8008d46:	edd7 7a00 	vldr	s15, [r7]
 8008d4a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008d4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008d52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d56:	ee17 3a90 	vmov	r3, s15
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	4b02      	ldr	r3, [pc, #8]	@ (8008d68 <modbus_working+0x1d8>)
 8008d5e:	859a      	strh	r2, [r3, #44]	@ 0x2c

}
 8008d60:	bf00      	nop
 8008d62:	3718      	adds	r7, #24
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	20001580 	.word	0x20001580
 8008d6c:	20001e54 	.word	0x20001e54
 8008d70:	20001e58 	.word	0x20001e58
 8008d74:	00000000 	.word	0x00000000
 8008d78:	2000097c 	.word	0x2000097c
 8008d7c:	200006fc 	.word	0x200006fc
 8008d80:	20000fc8 	.word	0x20000fc8
 8008d84:	20000740 	.word	0x20000740
 8008d88:	20000d70 	.word	0x20000d70
 8008d8c:	200009d8 	.word	0x200009d8

08008d90 <start_character_drawing>:

void start_character_drawing(DrawingPoint_t *points, uint8_t num_points,
		const char *character_name) {
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	607a      	str	r2, [r7, #4]
 8008d9c:	72fb      	strb	r3, [r7, #11]
	if (is_emergency_active() || homing_active || joy_mode_active) {
 8008d9e:	f7fe fc9b 	bl	80076d8 <is_emergency_active>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d120      	bne.n	8008dea <start_character_drawing+0x5a>
 8008da8:	4b12      	ldr	r3, [pc, #72]	@ (8008df4 <start_character_drawing+0x64>)
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d11c      	bne.n	8008dea <start_character_drawing+0x5a>
 8008db0:	4b11      	ldr	r3, [pc, #68]	@ (8008df8 <start_character_drawing+0x68>)
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d118      	bne.n	8008dea <start_character_drawing+0x5a>
		return;
	}

	// หยุดการวาดปัจจุบัน (ถ้ามี)
	current_drawing_sequence.sequence_active = false;
 8008db8:	4b10      	ldr	r3, [pc, #64]	@ (8008dfc <start_character_drawing+0x6c>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	719a      	strb	r2, [r3, #6]

	// ตั้งค่าลำดับการวาดใหม่
	current_drawing_sequence.points = points;
 8008dbe:	4a0f      	ldr	r2, [pc, #60]	@ (8008dfc <start_character_drawing+0x6c>)
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6013      	str	r3, [r2, #0]
	current_drawing_sequence.num_points = num_points;
 8008dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8008dfc <start_character_drawing+0x6c>)
 8008dc6:	7afb      	ldrb	r3, [r7, #11]
 8008dc8:	7113      	strb	r3, [r2, #4]
	current_drawing_sequence.current_point = 0;
 8008dca:	4b0c      	ldr	r3, [pc, #48]	@ (8008dfc <start_character_drawing+0x6c>)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	715a      	strb	r2, [r3, #5]
	current_drawing_sequence.sequence_active = true;
 8008dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8008dfc <start_character_drawing+0x6c>)
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	719a      	strb	r2, [r3, #6]
	current_drawing_sequence.character_name = character_name;
 8008dd6:	4a09      	ldr	r2, [pc, #36]	@ (8008dfc <start_character_drawing+0x6c>)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6093      	str	r3, [r2, #8]

	// รอให้ motion หยุดก่อนเริ่มใหม่
	if (motion_sequence_state == MOTION_IDLE) {
 8008ddc:	4b08      	ldr	r3, [pc, #32]	@ (8008e00 <start_character_drawing+0x70>)
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d103      	bne.n	8008dec <start_character_drawing+0x5c>
		execute_next_drawing_point();
 8008de4:	f000 f80e 	bl	8008e04 <execute_next_drawing_point>
 8008de8:	e000      	b.n	8008dec <start_character_drawing+0x5c>
		return;
 8008dea:	bf00      	nop
	}
}
 8008dec:	3710      	adds	r7, #16
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	200007e3 	.word	0x200007e3
 8008df8:	200007fd 	.word	0x200007fd
 8008dfc:	200008a8 	.word	0x200008a8
 8008e00:	20000784 	.word	0x20000784

08008e04 <execute_next_drawing_point>:

void execute_next_drawing_point(void) {
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
	if (!current_drawing_sequence.sequence_active) {
 8008e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8008e84 <execute_next_drawing_point+0x80>)
 8008e0c:	799b      	ldrb	r3, [r3, #6]
 8008e0e:	f083 0301 	eor.w	r3, r3, #1
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d130      	bne.n	8008e7a <execute_next_drawing_point+0x76>
		return;
	}

	if (current_drawing_sequence.current_point
 8008e18:	4b1a      	ldr	r3, [pc, #104]	@ (8008e84 <execute_next_drawing_point+0x80>)
 8008e1a:	795a      	ldrb	r2, [r3, #5]
			< current_drawing_sequence.num_points) {
 8008e1c:	4b19      	ldr	r3, [pc, #100]	@ (8008e84 <execute_next_drawing_point+0x80>)
 8008e1e:	791b      	ldrb	r3, [r3, #4]
	if (current_drawing_sequence.current_point
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d221      	bcs.n	8008e68 <execute_next_drawing_point+0x64>
		DrawingPoint_t current_point =
				current_drawing_sequence.points[current_drawing_sequence.current_point];
 8008e24:	4b17      	ldr	r3, [pc, #92]	@ (8008e84 <execute_next_drawing_point+0x80>)
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	4b16      	ldr	r3, [pc, #88]	@ (8008e84 <execute_next_drawing_point+0x80>)
 8008e2a:	795b      	ldrb	r3, [r3, #5]
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	460b      	mov	r3, r1
 8008e30:	005b      	lsls	r3, r3, #1
 8008e32:	440b      	add	r3, r1
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	441a      	add	r2, r3
		DrawingPoint_t current_point =
 8008e38:	1d3b      	adds	r3, r7, #4
 8008e3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8008e3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		// ตั้งค่าปากกาก่อนเคลื่อนที่
		drawing_pen_state = current_point.pen_down;
 8008e40:	7b3a      	ldrb	r2, [r7, #12]
 8008e42:	4b11      	ldr	r3, [pc, #68]	@ (8008e88 <execute_next_drawing_point+0x84>)
 8008e44:	701a      	strb	r2, [r3, #0]
		// เริ่มการเคลื่อนที่ไปจุดถัดไป
		start_combined_trajectory(current_point.r_mm, current_point.theta_deg);
 8008e46:	edd7 7a01 	vldr	s15, [r7, #4]
 8008e4a:	ed97 7a02 	vldr	s14, [r7, #8]
 8008e4e:	eef0 0a47 	vmov.f32	s1, s14
 8008e52:	eeb0 0a67 	vmov.f32	s0, s15
 8008e56:	f7fd fa8b 	bl	8006370 <start_combined_trajectory>
		current_drawing_sequence.current_point++;
 8008e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8008e84 <execute_next_drawing_point+0x80>)
 8008e5c:	795b      	ldrb	r3, [r3, #5]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	b2da      	uxtb	r2, r3
 8008e62:	4b08      	ldr	r3, [pc, #32]	@ (8008e84 <execute_next_drawing_point+0x80>)
 8008e64:	715a      	strb	r2, [r3, #5]
 8008e66:	e009      	b.n	8008e7c <execute_next_drawing_point+0x78>

	} else {
		// เสร็จสิ้นการวาดตัวอักษรนี้
		current_drawing_sequence.sequence_active = false;
 8008e68:	4b06      	ldr	r3, [pc, #24]	@ (8008e84 <execute_next_drawing_point+0x80>)
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	719a      	strb	r2, [r3, #6]
		current_drawing_sequence.current_point = 0;
 8008e6e:	4b05      	ldr	r3, [pc, #20]	@ (8008e84 <execute_next_drawing_point+0x80>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	715a      	strb	r2, [r3, #5]

		// ยกปากกาเมื่อเสร็จ
		plotter_pen_up();
 8008e74:	f000 fe06 	bl	8009a84 <plotter_pen_up>
 8008e78:	e000      	b.n	8008e7c <execute_next_drawing_point+0x78>
		return;
 8008e7a:	bf00      	nop
	}
}
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	200008a8 	.word	0x200008a8
 8008e88:	200008b4 	.word	0x200008b4

08008e8c <update_character_drawing>:

void update_character_drawing(void) {
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	af00      	add	r7, sp, #0
	// ถ้ามีลำดับการวาดที่กำลังทำงานและ motion เสร็จแล้ว
	if (current_drawing_sequence.sequence_active
 8008e90:	4b05      	ldr	r3, [pc, #20]	@ (8008ea8 <update_character_drawing+0x1c>)
 8008e92:	799b      	ldrb	r3, [r3, #6]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d005      	beq.n	8008ea4 <update_character_drawing+0x18>
			&& motion_sequence_state == MOTION_IDLE) {
 8008e98:	4b04      	ldr	r3, [pc, #16]	@ (8008eac <update_character_drawing+0x20>)
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d101      	bne.n	8008ea4 <update_character_drawing+0x18>
		execute_next_drawing_point();
 8008ea0:	f7ff ffb0 	bl	8008e04 <execute_next_drawing_point>
	}
}
 8008ea4:	bf00      	nop
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	200008a8 	.word	0x200008a8
 8008eac:	20000784 	.word	0x20000784

08008eb0 <draw_letter_F>:

void draw_letter_F(void) {
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	af00      	add	r7, sp, #0
	start_character_drawing(letter_F, sizeof(letter_F) / sizeof(DrawingPoint_t),
 8008eb4:	4a03      	ldr	r2, [pc, #12]	@ (8008ec4 <draw_letter_F+0x14>)
 8008eb6:	2108      	movs	r1, #8
 8008eb8:	4803      	ldr	r0, [pc, #12]	@ (8008ec8 <draw_letter_F+0x18>)
 8008eba:	f7ff ff69 	bl	8008d90 <start_character_drawing>
			"F");
}
 8008ebe:	bf00      	nop
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	08014c90 	.word	0x08014c90
 8008ec8:	20000338 	.word	0x20000338

08008ecc <draw_letter_I>:

void draw_letter_I(void) {
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	af00      	add	r7, sp, #0
	start_character_drawing(letter_I, sizeof(letter_I) / sizeof(DrawingPoint_t),
 8008ed0:	4a03      	ldr	r2, [pc, #12]	@ (8008ee0 <draw_letter_I+0x14>)
 8008ed2:	2104      	movs	r1, #4
 8008ed4:	4803      	ldr	r0, [pc, #12]	@ (8008ee4 <draw_letter_I+0x18>)
 8008ed6:	f7ff ff5b 	bl	8008d90 <start_character_drawing>
			"I");
}
 8008eda:	bf00      	nop
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	08014c94 	.word	0x08014c94
 8008ee4:	20000398 	.word	0x20000398

08008ee8 <draw_letter_B>:

void draw_letter_B(void) {
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	af00      	add	r7, sp, #0
	start_character_drawing(letter_B, sizeof(letter_B) / sizeof(DrawingPoint_t),
 8008eec:	4a03      	ldr	r2, [pc, #12]	@ (8008efc <draw_letter_B+0x14>)
 8008eee:	210a      	movs	r1, #10
 8008ef0:	4803      	ldr	r0, [pc, #12]	@ (8008f00 <draw_letter_B+0x18>)
 8008ef2:	f7ff ff4d 	bl	8008d90 <start_character_drawing>
			"B");
}
 8008ef6:	bf00      	nop
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	08014c98 	.word	0x08014c98
 8008f00:	200003c8 	.word	0x200003c8

08008f04 <draw_letter_O>:

void draw_letter_O(void) {
 8008f04:	b580      	push	{r7, lr}
 8008f06:	af00      	add	r7, sp, #0
	start_character_drawing(letter_O, sizeof(letter_O) / sizeof(DrawingPoint_t),
 8008f08:	4a03      	ldr	r2, [pc, #12]	@ (8008f18 <draw_letter_O+0x14>)
 8008f0a:	2107      	movs	r1, #7
 8008f0c:	4803      	ldr	r0, [pc, #12]	@ (8008f1c <draw_letter_O+0x18>)
 8008f0e:	f7ff ff3f 	bl	8008d90 <start_character_drawing>
			"O");
}
 8008f12:	bf00      	nop
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	08014c9c 	.word	0x08014c9c
 8008f1c:	20000440 	.word	0x20000440

08008f20 <draw_underscore>:

void draw_underscore(void) {
 8008f20:	b580      	push	{r7, lr}
 8008f22:	af00      	add	r7, sp, #0
	start_character_drawing(letter_underscore,
 8008f24:	4a03      	ldr	r2, [pc, #12]	@ (8008f34 <draw_underscore+0x14>)
 8008f26:	2104      	movs	r1, #4
 8008f28:	4803      	ldr	r0, [pc, #12]	@ (8008f38 <draw_underscore+0x18>)
 8008f2a:	f7ff ff31 	bl	8008d90 <start_character_drawing>
			sizeof(letter_underscore) / sizeof(DrawingPoint_t), "_");
}
 8008f2e:	bf00      	nop
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	08014ca0 	.word	0x08014ca0
 8008f38:	20000494 	.word	0x20000494

08008f3c <draw_letter_G>:

void draw_letter_G(void) {
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	af00      	add	r7, sp, #0
	start_character_drawing(letter_G, sizeof(letter_G) / sizeof(DrawingPoint_t),
 8008f40:	4a03      	ldr	r2, [pc, #12]	@ (8008f50 <draw_letter_G+0x14>)
 8008f42:	2108      	movs	r1, #8
 8008f44:	4803      	ldr	r0, [pc, #12]	@ (8008f54 <draw_letter_G+0x18>)
 8008f46:	f7ff ff23 	bl	8008d90 <start_character_drawing>
			"G");
}
 8008f4a:	bf00      	nop
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	08014ca4 	.word	0x08014ca4
 8008f54:	200004c4 	.word	0x200004c4

08008f58 <draw_number_0>:

void draw_number_0(void) {
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	af00      	add	r7, sp, #0
	start_character_drawing(number_0, sizeof(number_0) / sizeof(DrawingPoint_t),
 8008f5c:	4a03      	ldr	r2, [pc, #12]	@ (8008f6c <draw_number_0+0x14>)
 8008f5e:	2107      	movs	r1, #7
 8008f60:	4803      	ldr	r0, [pc, #12]	@ (8008f70 <draw_number_0+0x18>)
 8008f62:	f7ff ff15 	bl	8008d90 <start_character_drawing>
			"0");
}
 8008f66:	bf00      	nop
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	08014ca8 	.word	0x08014ca8
 8008f70:	20000524 	.word	0x20000524

08008f74 <draw_number_1>:

void draw_number_1(void) {
 8008f74:	b580      	push	{r7, lr}
 8008f76:	af00      	add	r7, sp, #0
	start_character_drawing(number_1, sizeof(number_1) / sizeof(DrawingPoint_t),
 8008f78:	4a03      	ldr	r2, [pc, #12]	@ (8008f88 <draw_number_1+0x14>)
 8008f7a:	2105      	movs	r1, #5
 8008f7c:	4803      	ldr	r0, [pc, #12]	@ (8008f8c <draw_number_1+0x18>)
 8008f7e:	f7ff ff07 	bl	8008d90 <start_character_drawing>
			"1");
}
 8008f82:	bf00      	nop
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	08014cac 	.word	0x08014cac
 8008f8c:	20000578 	.word	0x20000578

08008f90 <stop_character_drawing>:

void stop_character_drawing(void) {
 8008f90:	b580      	push	{r7, lr}
 8008f92:	af00      	add	r7, sp, #0
	current_drawing_sequence.sequence_active = false;
 8008f94:	4b09      	ldr	r3, [pc, #36]	@ (8008fbc <stop_character_drawing+0x2c>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	719a      	strb	r2, [r3, #6]
	current_drawing_sequence.current_point = 0;
 8008f9a:	4b08      	ldr	r3, [pc, #32]	@ (8008fbc <stop_character_drawing+0x2c>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	715a      	strb	r2, [r3, #5]
	word_drawing_active = false;
 8008fa0:	4b07      	ldr	r3, [pc, #28]	@ (8008fc0 <stop_character_drawing+0x30>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	701a      	strb	r2, [r3, #0]
	word_progress = 0;
 8008fa6:	4b07      	ldr	r3, [pc, #28]	@ (8008fc4 <stop_character_drawing+0x34>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	701a      	strb	r2, [r3, #0]
	drawing_pen_state = false;
 8008fac:	4b06      	ldr	r3, [pc, #24]	@ (8008fc8 <stop_character_drawing+0x38>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	701a      	strb	r2, [r3, #0]
	plotter_pen_up();
 8008fb2:	f000 fd67 	bl	8009a84 <plotter_pen_up>
}
 8008fb6:	bf00      	nop
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	200008a8 	.word	0x200008a8
 8008fc0:	200008bc 	.word	0x200008bc
 8008fc4:	200008b5 	.word	0x200008b5
 8008fc8:	200008b4 	.word	0x200008b4

08008fcc <is_drawing_active>:

bool is_drawing_active(void) {
 8008fcc:	b480      	push	{r7}
 8008fce:	af00      	add	r7, sp, #0
	return current_drawing_sequence.sequence_active;
 8008fd0:	4b03      	ldr	r3, [pc, #12]	@ (8008fe0 <is_drawing_active+0x14>)
 8008fd2:	799b      	ldrb	r3, [r3, #6]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	200008a8 	.word	0x200008a8

08008fe4 <start_word_FIBO_G01>:

void start_word_FIBO_G01(void) {
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	af00      	add	r7, sp, #0
	if (is_emergency_active() || homing_active || joy_mode_active) {
 8008fe8:	f7fe fb76 	bl	80076d8 <is_emergency_active>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d111      	bne.n	8009016 <start_word_FIBO_G01+0x32>
 8008ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800901c <start_word_FIBO_G01+0x38>)
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d10d      	bne.n	8009016 <start_word_FIBO_G01+0x32>
 8008ffa:	4b09      	ldr	r3, [pc, #36]	@ (8009020 <start_word_FIBO_G01+0x3c>)
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d109      	bne.n	8009016 <start_word_FIBO_G01+0x32>
		return;
	}

//	stop_character_drawing();
//
	word_drawing_active = true;
 8009002:	4b08      	ldr	r3, [pc, #32]	@ (8009024 <start_word_FIBO_G01+0x40>)
 8009004:	2201      	movs	r2, #1
 8009006:	701a      	strb	r2, [r3, #0]
	word_progress = 0;
 8009008:	4b07      	ldr	r3, [pc, #28]	@ (8009028 <start_word_FIBO_G01+0x44>)
 800900a:	2200      	movs	r2, #0
 800900c:	701a      	strb	r2, [r3, #0]
	word_delay_timer = 0;
 800900e:	4b07      	ldr	r3, [pc, #28]	@ (800902c <start_word_FIBO_G01+0x48>)
 8009010:	2200      	movs	r2, #0
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	e000      	b.n	8009018 <start_word_FIBO_G01+0x34>
		return;
 8009016:	bf00      	nop

}
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	200007e3 	.word	0x200007e3
 8009020:	200007fd 	.word	0x200007fd
 8009024:	200008bc 	.word	0x200008bc
 8009028:	200008b5 	.word	0x200008b5
 800902c:	200008b8 	.word	0x200008b8

08009030 <draw_word_FIBO_G01>:

void draw_word_FIBO_G01(void) {
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
	const uint32_t LETTER_DELAY = 1; // หน่วงเวลา 3 วินาทีระหว่างตัวอักษร
 8009036:	2301      	movs	r3, #1
 8009038:	607b      	str	r3, [r7, #4]

	if (!word_drawing_active) {
 800903a:	4b45      	ldr	r3, [pc, #276]	@ (8009150 <draw_word_FIBO_G01+0x120>)
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	f083 0301 	eor.w	r3, r3, #1
 8009042:	b2db      	uxtb	r3, r3
 8009044:	2b00      	cmp	r3, #0
 8009046:	d17e      	bne.n	8009146 <draw_word_FIBO_G01+0x116>
		return;
	}

	if (!is_drawing_active() && motion_sequence_state == MOTION_IDLE) {
 8009048:	f7ff ffc0 	bl	8008fcc <is_drawing_active>
 800904c:	4603      	mov	r3, r0
 800904e:	f083 0301 	eor.w	r3, r3, #1
 8009052:	b2db      	uxtb	r3, r3
 8009054:	2b00      	cmp	r3, #0
 8009056:	d077      	beq.n	8009148 <draw_word_FIBO_G01+0x118>
 8009058:	4b3e      	ldr	r3, [pc, #248]	@ (8009154 <draw_word_FIBO_G01+0x124>)
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d173      	bne.n	8009148 <draw_word_FIBO_G01+0x118>
		word_delay_timer++;
 8009060:	4b3d      	ldr	r3, [pc, #244]	@ (8009158 <draw_word_FIBO_G01+0x128>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3301      	adds	r3, #1
 8009066:	4a3c      	ldr	r2, [pc, #240]	@ (8009158 <draw_word_FIBO_G01+0x128>)
 8009068:	6013      	str	r3, [r2, #0]

		if (word_delay_timer >= LETTER_DELAY) {
 800906a:	4b3b      	ldr	r3, [pc, #236]	@ (8009158 <draw_word_FIBO_G01+0x128>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	429a      	cmp	r2, r3
 8009072:	d869      	bhi.n	8009148 <draw_word_FIBO_G01+0x118>
			word_delay_timer = 0;
 8009074:	4b38      	ldr	r3, [pc, #224]	@ (8009158 <draw_word_FIBO_G01+0x128>)
 8009076:	2200      	movs	r2, #0
 8009078:	601a      	str	r2, [r3, #0]

			switch (word_progress) {
 800907a:	4b38      	ldr	r3, [pc, #224]	@ (800915c <draw_word_FIBO_G01+0x12c>)
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	2b07      	cmp	r3, #7
 8009080:	d85a      	bhi.n	8009138 <draw_word_FIBO_G01+0x108>
 8009082:	a201      	add	r2, pc, #4	@ (adr r2, 8009088 <draw_word_FIBO_G01+0x58>)
 8009084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009088:	080090a9 	.word	0x080090a9
 800908c:	080090bb 	.word	0x080090bb
 8009090:	080090cd 	.word	0x080090cd
 8009094:	080090df 	.word	0x080090df
 8009098:	080090f1 	.word	0x080090f1
 800909c:	08009103 	.word	0x08009103
 80090a0:	08009115 	.word	0x08009115
 80090a4:	08009127 	.word	0x08009127
			case 0:
				draw_letter_F();
 80090a8:	f7ff ff02 	bl	8008eb0 <draw_letter_F>
				word_progress++;
 80090ac:	4b2b      	ldr	r3, [pc, #172]	@ (800915c <draw_word_FIBO_G01+0x12c>)
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	3301      	adds	r3, #1
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	4b29      	ldr	r3, [pc, #164]	@ (800915c <draw_word_FIBO_G01+0x12c>)
 80090b6:	701a      	strb	r2, [r3, #0]
				break;
 80090b8:	e046      	b.n	8009148 <draw_word_FIBO_G01+0x118>
			case 1:
				draw_letter_I();
 80090ba:	f7ff ff07 	bl	8008ecc <draw_letter_I>
				word_progress++;
 80090be:	4b27      	ldr	r3, [pc, #156]	@ (800915c <draw_word_FIBO_G01+0x12c>)
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	3301      	adds	r3, #1
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	4b25      	ldr	r3, [pc, #148]	@ (800915c <draw_word_FIBO_G01+0x12c>)
 80090c8:	701a      	strb	r2, [r3, #0]
				break;
 80090ca:	e03d      	b.n	8009148 <draw_word_FIBO_G01+0x118>
			case 2:
				draw_letter_B();
 80090cc:	f7ff ff0c 	bl	8008ee8 <draw_letter_B>
				word_progress++;
 80090d0:	4b22      	ldr	r3, [pc, #136]	@ (800915c <draw_word_FIBO_G01+0x12c>)
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	3301      	adds	r3, #1
 80090d6:	b2da      	uxtb	r2, r3
 80090d8:	4b20      	ldr	r3, [pc, #128]	@ (800915c <draw_word_FIBO_G01+0x12c>)
 80090da:	701a      	strb	r2, [r3, #0]
				break;
 80090dc:	e034      	b.n	8009148 <draw_word_FIBO_G01+0x118>
			case 3:
				draw_letter_O();
 80090de:	f7ff ff11 	bl	8008f04 <draw_letter_O>
				word_progress++;
 80090e2:	4b1e      	ldr	r3, [pc, #120]	@ (800915c <draw_word_FIBO_G01+0x12c>)
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	3301      	adds	r3, #1
 80090e8:	b2da      	uxtb	r2, r3
 80090ea:	4b1c      	ldr	r3, [pc, #112]	@ (800915c <draw_word_FIBO_G01+0x12c>)
 80090ec:	701a      	strb	r2, [r3, #0]
				break;
 80090ee:	e02b      	b.n	8009148 <draw_word_FIBO_G01+0x118>
			case 4:
				draw_underscore();
 80090f0:	f7ff ff16 	bl	8008f20 <draw_underscore>
				word_progress++;
 80090f4:	4b19      	ldr	r3, [pc, #100]	@ (800915c <draw_word_FIBO_G01+0x12c>)
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	3301      	adds	r3, #1
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	4b17      	ldr	r3, [pc, #92]	@ (800915c <draw_word_FIBO_G01+0x12c>)
 80090fe:	701a      	strb	r2, [r3, #0]
				break;
 8009100:	e022      	b.n	8009148 <draw_word_FIBO_G01+0x118>
			case 5:
				draw_letter_G();
 8009102:	f7ff ff1b 	bl	8008f3c <draw_letter_G>
				word_progress++;
 8009106:	4b15      	ldr	r3, [pc, #84]	@ (800915c <draw_word_FIBO_G01+0x12c>)
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	3301      	adds	r3, #1
 800910c:	b2da      	uxtb	r2, r3
 800910e:	4b13      	ldr	r3, [pc, #76]	@ (800915c <draw_word_FIBO_G01+0x12c>)
 8009110:	701a      	strb	r2, [r3, #0]
				break;
 8009112:	e019      	b.n	8009148 <draw_word_FIBO_G01+0x118>
			case 6:
				draw_number_0();
 8009114:	f7ff ff20 	bl	8008f58 <draw_number_0>
				word_progress++;
 8009118:	4b10      	ldr	r3, [pc, #64]	@ (800915c <draw_word_FIBO_G01+0x12c>)
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	3301      	adds	r3, #1
 800911e:	b2da      	uxtb	r2, r3
 8009120:	4b0e      	ldr	r3, [pc, #56]	@ (800915c <draw_word_FIBO_G01+0x12c>)
 8009122:	701a      	strb	r2, [r3, #0]
				break;
 8009124:	e010      	b.n	8009148 <draw_word_FIBO_G01+0x118>
			case 7:
				draw_number_1();
 8009126:	f7ff ff25 	bl	8008f74 <draw_number_1>
				word_progress++;
 800912a:	4b0c      	ldr	r3, [pc, #48]	@ (800915c <draw_word_FIBO_G01+0x12c>)
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	3301      	adds	r3, #1
 8009130:	b2da      	uxtb	r2, r3
 8009132:	4b0a      	ldr	r3, [pc, #40]	@ (800915c <draw_word_FIBO_G01+0x12c>)
 8009134:	701a      	strb	r2, [r3, #0]
				break;
 8009136:	e007      	b.n	8009148 <draw_word_FIBO_G01+0x118>
			default:
				// เสร็จสิ้นการวาดคำทั้งหมด
				word_drawing_active = false;
 8009138:	4b05      	ldr	r3, [pc, #20]	@ (8009150 <draw_word_FIBO_G01+0x120>)
 800913a:	2200      	movs	r2, #0
 800913c:	701a      	strb	r2, [r3, #0]
				word_progress = 0;
 800913e:	4b07      	ldr	r3, [pc, #28]	@ (800915c <draw_word_FIBO_G01+0x12c>)
 8009140:	2200      	movs	r2, #0
 8009142:	701a      	strb	r2, [r3, #0]
				break;
 8009144:	e000      	b.n	8009148 <draw_word_FIBO_G01+0x118>
		return;
 8009146:	bf00      	nop
			}
		}
	}
}
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	200008bc 	.word	0x200008bc
 8009154:	20000784 	.word	0x20000784
 8009158:	200008b8 	.word	0x200008b8
 800915c:	200008b5 	.word	0x200008b5

08009160 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8009160:	b480      	push	{r7}
 8009162:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009164:	b672      	cpsid	i
}
 8009166:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8009168:	bf00      	nop
 800916a:	e7fd      	b.n	8009168 <Error_Handler+0x8>
 800916c:	0000      	movs	r0, r0
	...

08009170 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 8009170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009174:	ed2d 8b02 	vpush	{d8}
 8009178:	b083      	sub	sp, #12
 800917a:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 800917c:	4bc4      	ldr	r3, [pc, #784]	@ (8009490 <plotter_begin+0x320>)
 800917e:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius * 1000;
 8009182:	4bc4      	ldr	r3, [pc, #784]	@ (8009494 <plotter_begin+0x324>)
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	4618      	mov	r0, r3
 8009188:	f7f7 f9aa 	bl	80004e0 <__aeabi_f2d>
 800918c:	4602      	mov	r2, r0
 800918e:	460b      	mov	r3, r1
 8009190:	4620      	mov	r0, r4
 8009192:	4629      	mov	r1, r5
 8009194:	f7f7 f9fc 	bl	8000590 <__aeabi_dmul>
 8009198:	4602      	mov	r2, r0
 800919a:	460b      	mov	r3, r1
 800919c:	4610      	mov	r0, r2
 800919e:	4619      	mov	r1, r3
 80091a0:	f04f 0200 	mov.w	r2, #0
 80091a4:	4bbc      	ldr	r3, [pc, #752]	@ (8009498 <plotter_begin+0x328>)
 80091a6:	f7f7 f9f3 	bl	8000590 <__aeabi_dmul>
 80091aa:	4602      	mov	r2, r0
 80091ac:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 80091ae:	49b8      	ldr	r1, [pc, #736]	@ (8009490 <plotter_begin+0x320>)
 80091b0:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 2;
 80091b4:	4bb6      	ldr	r3, [pc, #728]	@ (8009490 <plotter_begin+0x320>)
 80091b6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80091ba:	4602      	mov	r2, r0
 80091bc:	460b      	mov	r3, r1
 80091be:	f7f7 f831 	bl	8000224 <__adddf3>
 80091c2:	4602      	mov	r2, r0
 80091c4:	460b      	mov	r3, r1
 80091c6:	49b2      	ldr	r1, [pc, #712]	@ (8009490 <plotter_begin+0x320>)
 80091c8:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_400RPM_Constant.traject_sd_max = 500.0;
 80091cc:	49b0      	ldr	r1, [pc, #704]	@ (8009490 <plotter_begin+0x320>)
 80091ce:	f04f 0200 	mov.w	r2, #0
 80091d2:	4bb2      	ldr	r3, [pc, #712]	@ (800949c <plotter_begin+0x32c>)
 80091d4:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	ZGX45RGG_400RPM_Constant.traject_sdd_max = 1000.0;
 80091d8:	49ad      	ldr	r1, [pc, #692]	@ (8009490 <plotter_begin+0x320>)
 80091da:	f04f 0200 	mov.w	r2, #0
 80091de:	4bae      	ldr	r3, [pc, #696]	@ (8009498 <plotter_begin+0x328>)
 80091e0:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 80091e4:	4bae      	ldr	r3, [pc, #696]	@ (80094a0 <plotter_begin+0x330>)
 80091e6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* (24.0 / 36.0);
 80091ea:	a3a7      	add	r3, pc, #668	@ (adr r3, 8009488 <plotter_begin+0x318>)
 80091ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f0:	f7f7 f9ce 	bl	8000590 <__aeabi_dmul>
 80091f4:	4602      	mov	r2, r0
 80091f6:	460b      	mov	r3, r1
	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 80091f8:	49a9      	ldr	r1, [pc, #676]	@ (80094a0 <plotter_begin+0x330>)
 80091fa:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	ZGX45RGG_150RPM_Constant.traject_qd_max = 4.0;
 80091fe:	49a8      	ldr	r1, [pc, #672]	@ (80094a0 <plotter_begin+0x330>)
 8009200:	f04f 0200 	mov.w	r2, #0
 8009204:	4ba7      	ldr	r3, [pc, #668]	@ (80094a4 <plotter_begin+0x334>)
 8009206:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	ZGX45RGG_150RPM_Constant.traject_qdd_max = 1.0;
 800920a:	49a5      	ldr	r1, [pc, #660]	@ (80094a0 <plotter_begin+0x330>)
 800920c:	f04f 0200 	mov.w	r2, #0
 8009210:	4ba5      	ldr	r3, [pc, #660]	@ (80094a8 <plotter_begin+0x338>)
 8009212:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8009216:	2100      	movs	r1, #0
 8009218:	48a4      	ldr	r0, [pc, #656]	@ (80094ac <plotter_begin+0x33c>)
 800921a:	f000 fc53 	bl	8009ac4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 800921e:	eddf 2aa4 	vldr	s5, [pc, #656]	@ 80094b0 <plotter_begin+0x340>
 8009222:	ed9f 2aa4 	vldr	s4, [pc, #656]	@ 80094b4 <plotter_begin+0x344>
 8009226:	eddf 1ab1 	vldr	s3, [pc, #708]	@ 80094ec <plotter_begin+0x37c>
 800922a:	ed9f 1ab0 	vldr	s2, [pc, #704]	@ 80094ec <plotter_begin+0x37c>
 800922e:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 80094b8 <plotter_begin+0x348>
 8009232:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 80094b0 <plotter_begin+0x340>
 8009236:	489d      	ldr	r0, [pc, #628]	@ (80094ac <plotter_begin+0x33c>)
 8009238:	f000 fca2 	bl	8009b80 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 800923c:	2102      	movs	r1, #2
 800923e:	489f      	ldr	r0, [pc, #636]	@ (80094bc <plotter_begin+0x34c>)
 8009240:	f000 fc40 	bl	8009ac4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8009244:	ed9f 3a9a 	vldr	s6, [pc, #616]	@ 80094b0 <plotter_begin+0x340>
 8009248:	eddf 2a9a 	vldr	s5, [pc, #616]	@ 80094b4 <plotter_begin+0x344>
 800924c:	ed9f 2aa7 	vldr	s4, [pc, #668]	@ 80094ec <plotter_begin+0x37c>
 8009250:	eddf 1aa6 	vldr	s3, [pc, #664]	@ 80094ec <plotter_begin+0x37c>
 8009254:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8009258:	eddf 0a97 	vldr	s1, [pc, #604]	@ 80094b8 <plotter_begin+0x348>
 800925c:	ed9f 0a94 	vldr	s0, [pc, #592]	@ 80094b0 <plotter_begin+0x340>
 8009260:	4896      	ldr	r0, [pc, #600]	@ (80094bc <plotter_begin+0x34c>)
 8009262:	f000 fcb8 	bl	8009bd6 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8009266:	2100      	movs	r1, #0
 8009268:	4895      	ldr	r0, [pc, #596]	@ (80094c0 <plotter_begin+0x350>)
 800926a:	f000 fc2b 	bl	8009ac4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 800926e:	eddf 2a95 	vldr	s5, [pc, #596]	@ 80094c4 <plotter_begin+0x354>
 8009272:	ed9f 2a95 	vldr	s4, [pc, #596]	@ 80094c8 <plotter_begin+0x358>
 8009276:	eddf 1a9d 	vldr	s3, [pc, #628]	@ 80094ec <plotter_begin+0x37c>
 800927a:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 80094ec <plotter_begin+0x37c>
 800927e:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 80094b8 <plotter_begin+0x348>
 8009282:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 80094c4 <plotter_begin+0x354>
 8009286:	488e      	ldr	r0, [pc, #568]	@ (80094c0 <plotter_begin+0x350>)
 8009288:	f000 fc7a 	bl	8009b80 <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 800928c:	2102      	movs	r1, #2
 800928e:	488f      	ldr	r0, [pc, #572]	@ (80094cc <plotter_begin+0x35c>)
 8009290:	f000 fc18 	bl	8009ac4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 8009294:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 8009298:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 800929c:	ed9f 2a93 	vldr	s4, [pc, #588]	@ 80094ec <plotter_begin+0x37c>
 80092a0:	eddf 1a92 	vldr	s3, [pc, #584]	@ 80094ec <plotter_begin+0x37c>
 80092a4:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80092a8:	eddf 0a83 	vldr	s1, [pc, #524]	@ 80094b8 <plotter_begin+0x348>
 80092ac:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80092b0:	4886      	ldr	r0, [pc, #536]	@ (80094cc <plotter_begin+0x35c>)
 80092b2:	f000 fc90 	bl	8009bd6 <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 80092b6:	2100      	movs	r1, #0
 80092b8:	4885      	ldr	r0, [pc, #532]	@ (80094d0 <plotter_begin+0x360>)
 80092ba:	f000 fc03 	bl	8009ac4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80092be:	4b74      	ldr	r3, [pc, #464]	@ (8009490 <plotter_begin+0x320>)
 80092c0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80092c4:	4610      	mov	r0, r2
 80092c6:	4619      	mov	r1, r3
 80092c8:	f7f7 fc44 	bl	8000b54 <__aeabi_d2f>
 80092cc:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 80092ce:	4b70      	ldr	r3, [pc, #448]	@ (8009490 <plotter_begin+0x320>)
 80092d0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80092d4:	4610      	mov	r0, r2
 80092d6:	4619      	mov	r1, r3
 80092d8:	f7f7 fc3c 	bl	8000b54 <__aeabi_d2f>
 80092dc:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80092de:	ee07 3a90 	vmov	s15, r3
 80092e2:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 80092e6:	4b6a      	ldr	r3, [pc, #424]	@ (8009490 <plotter_begin+0x320>)
 80092e8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80092ec:	4610      	mov	r0, r2
 80092ee:	4619      	mov	r1, r3
 80092f0:	f7f7 fc30 	bl	8000b54 <__aeabi_d2f>
 80092f4:	4603      	mov	r3, r0
 80092f6:	ee02 3a90 	vmov	s5, r3
 80092fa:	eeb0 2a48 	vmov.f32	s4, s16
 80092fe:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 80094ec <plotter_begin+0x37c>
 8009302:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 80094ec <plotter_begin+0x37c>
 8009306:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 80094b8 <plotter_begin+0x348>
 800930a:	ee00 4a10 	vmov	s0, r4
 800930e:	4870      	ldr	r0, [pc, #448]	@ (80094d0 <plotter_begin+0x360>)
 8009310:	f000 fc36 	bl	8009b80 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 8009314:	2102      	movs	r1, #2
 8009316:	486f      	ldr	r0, [pc, #444]	@ (80094d4 <plotter_begin+0x364>)
 8009318:	f000 fbd4 	bl	8009ac4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800931c:	4b5c      	ldr	r3, [pc, #368]	@ (8009490 <plotter_begin+0x320>)
 800931e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8009322:	4610      	mov	r0, r2
 8009324:	4619      	mov	r1, r3
 8009326:	f7f7 fc15 	bl	8000b54 <__aeabi_d2f>
 800932a:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 800932c:	4b58      	ldr	r3, [pc, #352]	@ (8009490 <plotter_begin+0x320>)
 800932e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8009332:	4610      	mov	r0, r2
 8009334:	4619      	mov	r1, r3
 8009336:	f7f7 fc0d 	bl	8000b54 <__aeabi_d2f>
 800933a:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800933c:	ee07 3a90 	vmov	s15, r3
 8009340:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8009344:	4b52      	ldr	r3, [pc, #328]	@ (8009490 <plotter_begin+0x320>)
 8009346:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800934a:	4610      	mov	r0, r2
 800934c:	4619      	mov	r1, r3
 800934e:	f7f7 fc01 	bl	8000b54 <__aeabi_d2f>
 8009352:	4603      	mov	r3, r0
 8009354:	ee03 3a10 	vmov	s6, r3
 8009358:	eef0 2a48 	vmov.f32	s5, s16
 800935c:	ed9f 2a63 	vldr	s4, [pc, #396]	@ 80094ec <plotter_begin+0x37c>
 8009360:	eddf 1a62 	vldr	s3, [pc, #392]	@ 80094ec <plotter_begin+0x37c>
 8009364:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8009368:	eddf 0a53 	vldr	s1, [pc, #332]	@ 80094b8 <plotter_begin+0x348>
 800936c:	ee00 4a10 	vmov	s0, r4
 8009370:	4858      	ldr	r0, [pc, #352]	@ (80094d4 <plotter_begin+0x364>)
 8009372:	f000 fc30 	bl	8009bd6 <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 8009376:	2100      	movs	r1, #0
 8009378:	4857      	ldr	r0, [pc, #348]	@ (80094d8 <plotter_begin+0x368>)
 800937a:	f000 fba3 	bl	8009ac4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800937e:	4b48      	ldr	r3, [pc, #288]	@ (80094a0 <plotter_begin+0x330>)
 8009380:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8009384:	4610      	mov	r0, r2
 8009386:	4619      	mov	r1, r3
 8009388:	f7f7 fbe4 	bl	8000b54 <__aeabi_d2f>
 800938c:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 800938e:	4b44      	ldr	r3, [pc, #272]	@ (80094a0 <plotter_begin+0x330>)
 8009390:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8009394:	4610      	mov	r0, r2
 8009396:	4619      	mov	r1, r3
 8009398:	f7f7 fbdc 	bl	8000b54 <__aeabi_d2f>
 800939c:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800939e:	ee07 3a90 	vmov	s15, r3
 80093a2:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 80093a6:	4b3e      	ldr	r3, [pc, #248]	@ (80094a0 <plotter_begin+0x330>)
 80093a8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80093ac:	4610      	mov	r0, r2
 80093ae:	4619      	mov	r1, r3
 80093b0:	f7f7 fbd0 	bl	8000b54 <__aeabi_d2f>
 80093b4:	4603      	mov	r3, r0
 80093b6:	ee02 3a90 	vmov	s5, r3
 80093ba:	eeb0 2a48 	vmov.f32	s4, s16
 80093be:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 80094ec <plotter_begin+0x37c>
 80093c2:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 80094ec <plotter_begin+0x37c>
 80093c6:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 80094b8 <plotter_begin+0x348>
 80093ca:	ee00 4a10 	vmov	s0, r4
 80093ce:	4842      	ldr	r0, [pc, #264]	@ (80094d8 <plotter_begin+0x368>)
 80093d0:	f000 fbd6 	bl	8009b80 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 80093d4:	2102      	movs	r1, #2
 80093d6:	4841      	ldr	r0, [pc, #260]	@ (80094dc <plotter_begin+0x36c>)
 80093d8:	f000 fb74 	bl	8009ac4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80093dc:	4b30      	ldr	r3, [pc, #192]	@ (80094a0 <plotter_begin+0x330>)
 80093de:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80093e2:	4610      	mov	r0, r2
 80093e4:	4619      	mov	r1, r3
 80093e6:	f7f7 fbb5 	bl	8000b54 <__aeabi_d2f>
 80093ea:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 80093ec:	4b2c      	ldr	r3, [pc, #176]	@ (80094a0 <plotter_begin+0x330>)
 80093ee:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80093f2:	4610      	mov	r0, r2
 80093f4:	4619      	mov	r1, r3
 80093f6:	f7f7 fbad 	bl	8000b54 <__aeabi_d2f>
 80093fa:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80093fc:	ee07 3a90 	vmov	s15, r3
 8009400:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8009404:	4b26      	ldr	r3, [pc, #152]	@ (80094a0 <plotter_begin+0x330>)
 8009406:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800940a:	4610      	mov	r0, r2
 800940c:	4619      	mov	r1, r3
 800940e:	f7f7 fba1 	bl	8000b54 <__aeabi_d2f>
 8009412:	4603      	mov	r3, r0
 8009414:	ee03 3a10 	vmov	s6, r3
 8009418:	eef0 2a48 	vmov.f32	s5, s16
 800941c:	ed9f 2a33 	vldr	s4, [pc, #204]	@ 80094ec <plotter_begin+0x37c>
 8009420:	eddf 1a32 	vldr	s3, [pc, #200]	@ 80094ec <plotter_begin+0x37c>
 8009424:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8009428:	eddf 0a23 	vldr	s1, [pc, #140]	@ 80094b8 <plotter_begin+0x348>
 800942c:	ee00 4a10 	vmov	s0, r4
 8009430:	482a      	ldr	r0, [pc, #168]	@ (80094dc <plotter_begin+0x36c>)
 8009432:	f000 fbd0 	bl	8009bd6 <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 8009436:	482a      	ldr	r0, [pc, #168]	@ (80094e0 <plotter_begin+0x370>)
 8009438:	f7fb fb30 	bl	8004a9c <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 800943c:	4b15      	ldr	r3, [pc, #84]	@ (8009494 <plotter_begin+0x324>)
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	4618      	mov	r0, r3
 8009442:	f7f7 f84d 	bl	80004e0 <__aeabi_f2d>
 8009446:	4602      	mov	r2, r0
 8009448:	460b      	mov	r3, r1
 800944a:	f7f6 feeb 	bl	8000224 <__adddf3>
 800944e:	4602      	mov	r2, r0
 8009450:	460b      	mov	r3, r1
 8009452:	4610      	mov	r0, r2
 8009454:	4619      	mov	r1, r3
 8009456:	f04f 0200 	mov.w	r2, #0
 800945a:	4b0f      	ldr	r3, [pc, #60]	@ (8009498 <plotter_begin+0x328>)
 800945c:	f7f7 f898 	bl	8000590 <__aeabi_dmul>
 8009460:	4602      	mov	r2, r0
 8009462:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 8009464:	4610      	mov	r0, r2
 8009466:	4619      	mov	r1, r3
 8009468:	f7f7 fb74 	bl	8000b54 <__aeabi_d2f>
 800946c:	4603      	mov	r3, r0
 800946e:	ee00 3a90 	vmov	s1, r3
 8009472:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009476:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800947a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800947e:	4919      	ldr	r1, [pc, #100]	@ (80094e4 <plotter_begin+0x374>)
 8009480:	4819      	ldr	r0, [pc, #100]	@ (80094e8 <plotter_begin+0x378>)
 8009482:	f7fa fc8f 	bl	8003da4 <QEI_init>
 8009486:	e033      	b.n	80094f0 <plotter_begin+0x380>
 8009488:	55555555 	.word	0x55555555
 800948c:	3fe55555 	.word	0x3fe55555
 8009490:	20000080 	.word	0x20000080
 8009494:	20000100 	.word	0x20000100
 8009498:	408f4000 	.word	0x408f4000
 800949c:	407f4000 	.word	0x407f4000
 80094a0:	20000000 	.word	0x20000000
 80094a4:	40100000 	.word	0x40100000
 80094a8:	3ff00000 	.word	0x3ff00000
 80094ac:	20000b50 	.word	0x20000b50
 80094b0:	477fff00 	.word	0x477fff00
 80094b4:	c77fff00 	.word	0xc77fff00
 80094b8:	3dcccccd 	.word	0x3dcccccd
 80094bc:	20000b94 	.word	0x20000b94
 80094c0:	20000bd8 	.word	0x20000bd8
 80094c4:	43480000 	.word	0x43480000
 80094c8:	c3480000 	.word	0xc3480000
 80094cc:	20000c1c 	.word	0x20000c1c
 80094d0:	20000c60 	.word	0x20000c60
 80094d4:	20000ca4 	.word	0x20000ca4
 80094d8:	20000ce8 	.word	0x20000ce8
 80094dc:	20000d2c 	.word	0x20000d2c
 80094e0:	20000d70 	.word	0x20000d70
 80094e4:	20002008 	.word	0x20002008
 80094e8:	2000097c 	.word	0x2000097c
 80094ec:	00000000 	.word	0x00000000
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 80094f0:	ed5f 0a02 	vldr	s1, [pc, #-8]	@ 80094ec <plotter_begin+0x37c>
 80094f4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80094f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80094fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009500:	49b9      	ldr	r1, [pc, #740]	@ (80097e8 <plotter_begin+0x678>)
 8009502:	48ba      	ldr	r0, [pc, #744]	@ (80097ec <plotter_begin+0x67c>)
 8009504:	f7fa fc4e 	bl	8003da4 <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8009508:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800950c:	9300      	str	r3, [sp, #0]
 800950e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009512:	2204      	movs	r2, #4
 8009514:	49b6      	ldr	r1, [pc, #728]	@ (80097f0 <plotter_begin+0x680>)
 8009516:	48b7      	ldr	r0, [pc, #732]	@ (80097f4 <plotter_begin+0x684>)
 8009518:	f7f7 ff10 	bl	800133c <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 800951c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	4bb5      	ldr	r3, [pc, #724]	@ (80097f8 <plotter_begin+0x688>)
 8009524:	2200      	movs	r2, #0
 8009526:	49b2      	ldr	r1, [pc, #712]	@ (80097f0 <plotter_begin+0x680>)
 8009528:	48b4      	ldr	r0, [pc, #720]	@ (80097fc <plotter_begin+0x68c>)
 800952a:	f7f7 ff07 	bl	800133c <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 800952e:	220c      	movs	r2, #12
 8009530:	49b3      	ldr	r1, [pc, #716]	@ (8009800 <plotter_begin+0x690>)
 8009532:	48b4      	ldr	r0, [pc, #720]	@ (8009804 <plotter_begin+0x694>)
 8009534:	f7fa fa08 	bl	8003948 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8009538:	eddf 0ab3 	vldr	s1, [pc, #716]	@ 8009808 <plotter_begin+0x698>
 800953c:	ed9f 0ab3 	vldr	s0, [pc, #716]	@ 800980c <plotter_begin+0x69c>
 8009540:	48ac      	ldr	r0, [pc, #688]	@ (80097f4 <plotter_begin+0x684>)
 8009542:	f7f7 ff1f 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8009546:	eddf 0ab0 	vldr	s1, [pc, #704]	@ 8009808 <plotter_begin+0x698>
 800954a:	ed9f 0ab0 	vldr	s0, [pc, #704]	@ 800980c <plotter_begin+0x69c>
 800954e:	48ab      	ldr	r0, [pc, #684]	@ (80097fc <plotter_begin+0x68c>)
 8009550:	f7f7 ff18 	bl	8001384 <MDXX_set_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 103, //103 (D)
			ZGX45RGG_400RPM_Constant.sd_max);
 8009554:	4bae      	ldr	r3, [pc, #696]	@ (8009810 <plotter_begin+0x6a0>)
 8009556:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 103, //103 (D)
 800955a:	4610      	mov	r0, r2
 800955c:	4619      	mov	r1, r3
 800955e:	f7f7 faf9 	bl	8000b54 <__aeabi_d2f>
 8009562:	4603      	mov	r3, r0
 8009564:	ee01 3a90 	vmov	s3, r3
 8009568:	ed9f 1aaa 	vldr	s2, [pc, #680]	@ 8009814 <plotter_begin+0x6a4>
 800956c:	eddf 0aaa 	vldr	s1, [pc, #680]	@ 8009818 <plotter_begin+0x6a8>
 8009570:	ed9f 0aaa 	vldr	s0, [pc, #680]	@ 800981c <plotter_begin+0x6ac>
 8009574:	48aa      	ldr	r0, [pc, #680]	@ (8009820 <plotter_begin+0x6b0>)
 8009576:	f7f7 fe1c 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0, //150 (P)
			ZGX45RGG_400RPM_Constant.U_max);
 800957a:	4ba5      	ldr	r3, [pc, #660]	@ (8009810 <plotter_begin+0x6a0>)
 800957c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0, //150 (P)
 8009580:	4610      	mov	r0, r2
 8009582:	4619      	mov	r1, r3
 8009584:	f7f7 fae6 	bl	8000b54 <__aeabi_d2f>
 8009588:	4603      	mov	r3, r0
 800958a:	ee01 3a90 	vmov	s3, r3
 800958e:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 8009808 <plotter_begin+0x698>
 8009592:	eddf 0aa4 	vldr	s1, [pc, #656]	@ 8009824 <plotter_begin+0x6b4>
 8009596:	ed9f 0aa4 	vldr	s0, [pc, #656]	@ 8009828 <plotter_begin+0x6b8>
 800959a:	48a4      	ldr	r0, [pc, #656]	@ (800982c <plotter_begin+0x6bc>)
 800959c:	f7f7 fe09 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 250, 0.001, 700,
			ZGX45RGG_150RPM_Constant.qd_max);
 80095a0:	4ba3      	ldr	r3, [pc, #652]	@ (8009830 <plotter_begin+0x6c0>)
 80095a2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 250, 0.001, 700,
 80095a6:	4610      	mov	r0, r2
 80095a8:	4619      	mov	r1, r3
 80095aa:	f7f7 fad3 	bl	8000b54 <__aeabi_d2f>
 80095ae:	4603      	mov	r3, r0
 80095b0:	ee01 3a90 	vmov	s3, r3
 80095b4:	ed9f 1a9f 	vldr	s2, [pc, #636]	@ 8009834 <plotter_begin+0x6c4>
 80095b8:	eddf 0a9f 	vldr	s1, [pc, #636]	@ 8009838 <plotter_begin+0x6c8>
 80095bc:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 800983c <plotter_begin+0x6cc>
 80095c0:	489f      	ldr	r0, [pc, #636]	@ (8009840 <plotter_begin+0x6d0>)
 80095c2:	f7f7 fdf6 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2275, 30.5, 2996, //2280->2275 (P), 25->30 (I), 3000 -> 2996 (D)
			ZGX45RGG_150RPM_Constant.U_max);
 80095c6:	4b9a      	ldr	r3, [pc, #616]	@ (8009830 <plotter_begin+0x6c0>)
 80095c8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2275, 30.5, 2996, //2280->2275 (P), 25->30 (I), 3000 -> 2996 (D)
 80095cc:	4610      	mov	r0, r2
 80095ce:	4619      	mov	r1, r3
 80095d0:	f7f7 fac0 	bl	8000b54 <__aeabi_d2f>
 80095d4:	4603      	mov	r3, r0
 80095d6:	ee01 3a90 	vmov	s3, r3
 80095da:	ed9f 1a9a 	vldr	s2, [pc, #616]	@ 8009844 <plotter_begin+0x6d4>
 80095de:	eddf 0a9a 	vldr	s1, [pc, #616]	@ 8009848 <plotter_begin+0x6d8>
 80095e2:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 800984c <plotter_begin+0x6dc>
 80095e6:	489a      	ldr	r0, [pc, #616]	@ (8009850 <plotter_begin+0x6e0>)
 80095e8:	f7f7 fde3 	bl	80011b2 <PID_CONTROLLER_Init>
//			ZGX45RGG_150RPM_Constant.qd_max);
//	PID_CONTROLLER_Init(&revolute_velocity_pid, 2275, 25, 3000,
//			ZGX45RGG_150RPM_Constant.U_max);

	PID_CONTROLLER_Init(&revolute_joy_pid, 7500, 100, 2000,
			ZGX45RGG_150RPM_Constant.U_max);
 80095ec:	4b90      	ldr	r3, [pc, #576]	@ (8009830 <plotter_begin+0x6c0>)
 80095ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_joy_pid, 7500, 100, 2000,
 80095f2:	4610      	mov	r0, r2
 80095f4:	4619      	mov	r1, r3
 80095f6:	f7f7 faad 	bl	8000b54 <__aeabi_d2f>
 80095fa:	4603      	mov	r3, r0
 80095fc:	ee01 3a90 	vmov	s3, r3
 8009600:	ed9f 1a82 	vldr	s2, [pc, #520]	@ 800980c <plotter_begin+0x69c>
 8009604:	eddf 0a93 	vldr	s1, [pc, #588]	@ 8009854 <plotter_begin+0x6e4>
 8009608:	ed9f 0a93 	vldr	s0, [pc, #588]	@ 8009858 <plotter_begin+0x6e8>
 800960c:	4893      	ldr	r0, [pc, #588]	@ (800985c <plotter_begin+0x6ec>)
 800960e:	f7f7 fdd0 	bl	80011b2 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8009612:	4987      	ldr	r1, [pc, #540]	@ (8009830 <plotter_begin+0x6c0>)
 8009614:	4892      	ldr	r0, [pc, #584]	@ (8009860 <plotter_begin+0x6f0>)
 8009616:	f7f7 ff8f 	bl	8001538 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 800961a:	497d      	ldr	r1, [pc, #500]	@ (8009810 <plotter_begin+0x6a0>)
 800961c:	4891      	ldr	r0, [pc, #580]	@ (8009864 <plotter_begin+0x6f4>)
 800961e:	f7f8 f909 	bl	8001834 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8009622:	4a91      	ldr	r2, [pc, #580]	@ (8009868 <plotter_begin+0x6f8>)
 8009624:	4982      	ldr	r1, [pc, #520]	@ (8009830 <plotter_begin+0x6c0>)
 8009626:	4891      	ldr	r0, [pc, #580]	@ (800986c <plotter_begin+0x6fc>)
 8009628:	f7f8 f815 	bl	8001656 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 800962c:	4a8e      	ldr	r2, [pc, #568]	@ (8009868 <plotter_begin+0x6f8>)
 800962e:	4978      	ldr	r1, [pc, #480]	@ (8009810 <plotter_begin+0x6a0>)
 8009630:	488f      	ldr	r0, [pc, #572]	@ (8009870 <plotter_begin+0x700>)
 8009632:	f7f8 f9a1 	bl	8001978 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 8009636:	2302      	movs	r3, #2
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 8009874 <plotter_begin+0x704>
 800963e:	ed9f 0a8e 	vldr	s0, [pc, #568]	@ 8009878 <plotter_begin+0x708>
 8009642:	2364      	movs	r3, #100	@ 0x64
 8009644:	4a8d      	ldr	r2, [pc, #564]	@ (800987c <plotter_begin+0x70c>)
 8009646:	498e      	ldr	r1, [pc, #568]	@ (8009880 <plotter_begin+0x710>)
 8009648:	488e      	ldr	r0, [pc, #568]	@ (8009884 <plotter_begin+0x714>)
 800964a:	f7f7 fc69 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 800964e:	2105      	movs	r1, #5
 8009650:	ed9f 0a8d 	vldr	s0, [pc, #564]	@ 8009888 <plotter_begin+0x718>
 8009654:	488b      	ldr	r0, [pc, #556]	@ (8009884 <plotter_begin+0x714>)
 8009656:	f7f7 fd15 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 800965a:	488a      	ldr	r0, [pc, #552]	@ (8009884 <plotter_begin+0x714>)
 800965c:	f7f7 fcb8 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8009660:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 800988c <plotter_begin+0x71c>
 8009664:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8009668:	211f      	movs	r1, #31
 800966a:	4889      	ldr	r0, [pc, #548]	@ (8009890 <plotter_begin+0x720>)
 800966c:	f7f8 fa60 	bl	8001b30 <FIR_init>
	FIR_init(&revolute_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8009670:	eddf 0a86 	vldr	s1, [pc, #536]	@ 800988c <plotter_begin+0x71c>
 8009674:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8009678:	211f      	movs	r1, #31
 800967a:	4886      	ldr	r0, [pc, #536]	@ (8009894 <plotter_begin+0x724>)
 800967c:	f7f8 fa58 	bl	8001b30 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8009680:	4b63      	ldr	r3, [pc, #396]	@ (8009810 <plotter_begin+0x6a0>)
 8009682:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009686:	4610      	mov	r0, r2
 8009688:	4619      	mov	r1, r3
 800968a:	f7f7 fa63 	bl	8000b54 <__aeabi_d2f>
 800968e:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 8009690:	4b5f      	ldr	r3, [pc, #380]	@ (8009810 <plotter_begin+0x6a0>)
 8009692:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8009696:	4610      	mov	r0, r2
 8009698:	4619      	mov	r1, r3
 800969a:	f7f7 fa5b 	bl	8000b54 <__aeabi_d2f>
 800969e:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 80096a0:	4b5b      	ldr	r3, [pc, #364]	@ (8009810 <plotter_begin+0x6a0>)
 80096a2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80096a6:	4610      	mov	r0, r2
 80096a8:	4619      	mov	r1, r3
 80096aa:	f7f7 fa53 	bl	8000b54 <__aeabi_d2f>
 80096ae:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 80096b0:	4b57      	ldr	r3, [pc, #348]	@ (8009810 <plotter_begin+0x6a0>)
 80096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80096b6:	4610      	mov	r0, r2
 80096b8:	4619      	mov	r1, r3
 80096ba:	f7f7 fa4b 	bl	8000b54 <__aeabi_d2f>
 80096be:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 80096c0:	4b53      	ldr	r3, [pc, #332]	@ (8009810 <plotter_begin+0x6a0>)
 80096c2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80096c6:	4610      	mov	r0, r2
 80096c8:	4619      	mov	r1, r3
 80096ca:	f7f7 fa43 	bl	8000b54 <__aeabi_d2f>
 80096ce:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 80096d0:	4b4f      	ldr	r3, [pc, #316]	@ (8009810 <plotter_begin+0x6a0>)
 80096d2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80096d6:	4610      	mov	r0, r2
 80096d8:	4619      	mov	r1, r3
 80096da:	f7f7 fa3b 	bl	8000b54 <__aeabi_d2f>
 80096de:	4603      	mov	r3, r0
 80096e0:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 80096e4:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 80096e8:	ee03 3a10 	vmov	s6, r3
 80096ec:	ee02 9a90 	vmov	s5, r9
 80096f0:	ee02 8a10 	vmov	s4, r8
 80096f4:	ee01 6a90 	vmov	s3, r6
 80096f8:	ee01 5a10 	vmov	s2, r5
 80096fc:	ee00 4a90 	vmov	s1, r4
 8009700:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8009838 <plotter_begin+0x6c8>
 8009704:	4864      	ldr	r0, [pc, #400]	@ (8009898 <plotter_begin+0x728>)
 8009706:	f7f8 ff0b 	bl	8002520 <MotorKalman_Init>

	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800970a:	4b49      	ldr	r3, [pc, #292]	@ (8009830 <plotter_begin+0x6c0>)
 800970c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8009710:	4610      	mov	r0, r2
 8009712:	4619      	mov	r1, r3
 8009714:	f7f7 fa1e 	bl	8000b54 <__aeabi_d2f>
 8009718:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 800971a:	4b45      	ldr	r3, [pc, #276]	@ (8009830 <plotter_begin+0x6c0>)
 800971c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009720:	4610      	mov	r0, r2
 8009722:	4619      	mov	r1, r3
 8009724:	f7f7 fa16 	bl	8000b54 <__aeabi_d2f>
 8009728:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 800972a:	4b41      	ldr	r3, [pc, #260]	@ (8009830 <plotter_begin+0x6c0>)
 800972c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009730:	4610      	mov	r0, r2
 8009732:	4619      	mov	r1, r3
 8009734:	f7f7 fa0e 	bl	8000b54 <__aeabi_d2f>
 8009738:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 800973a:	4b3d      	ldr	r3, [pc, #244]	@ (8009830 <plotter_begin+0x6c0>)
 800973c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8009740:	a327      	add	r3, pc, #156	@ (adr r3, 80097e0 <plotter_begin+0x670>)
 8009742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009746:	f7f6 ff23 	bl	8000590 <__aeabi_dmul>
 800974a:	4602      	mov	r2, r0
 800974c:	460b      	mov	r3, r1
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800974e:	4610      	mov	r0, r2
 8009750:	4619      	mov	r1, r3
 8009752:	f7f7 f9ff 	bl	8000b54 <__aeabi_d2f>
 8009756:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 8009758:	4b35      	ldr	r3, [pc, #212]	@ (8009830 <plotter_begin+0x6c0>)
 800975a:	e9d3 2300 	ldrd	r2, r3, [r3]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800975e:	4610      	mov	r0, r2
 8009760:	4619      	mov	r1, r3
 8009762:	f7f7 f9f7 	bl	8000b54 <__aeabi_d2f>
 8009766:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.Kt, 0.001, &revolute_A, &revolute_B);
 8009768:	4b31      	ldr	r3, [pc, #196]	@ (8009830 <plotter_begin+0x6c0>)
 800976a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800976e:	4610      	mov	r0, r2
 8009770:	4619      	mov	r1, r3
 8009772:	f7f7 f9ef 	bl	8000b54 <__aeabi_d2f>
 8009776:	4603      	mov	r3, r0
 8009778:	4948      	ldr	r1, [pc, #288]	@ (800989c <plotter_begin+0x72c>)
 800977a:	4849      	ldr	r0, [pc, #292]	@ (80098a0 <plotter_begin+0x730>)
 800977c:	ed9f 3a2e 	vldr	s6, [pc, #184]	@ 8009838 <plotter_begin+0x6c8>
 8009780:	ee02 3a90 	vmov	s5, r3
 8009784:	ee02 9a10 	vmov	s4, r9
 8009788:	ee01 8a90 	vmov	s3, r8
 800978c:	ee01 6a10 	vmov	s2, r6
 8009790:	ee00 5a90 	vmov	s1, r5
 8009794:	ee00 4a10 	vmov	s0, r4
 8009798:	f7fa f86e 	bl	8003878 <GenerateMotorMatrices>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 800979c:	eddf 0a41 	vldr	s1, [pc, #260]	@ 80098a4 <plotter_begin+0x734>
 80097a0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80097a4:	4a3d      	ldr	r2, [pc, #244]	@ (800989c <plotter_begin+0x72c>)
 80097a6:	493e      	ldr	r1, [pc, #248]	@ (80098a0 <plotter_begin+0x730>)
 80097a8:	483f      	ldr	r0, [pc, #252]	@ (80098a8 <plotter_begin+0x738>)
 80097aa:	f7fb fde1 	bl	8005370 <Kalman_Start>
	REVOLUTE_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 80097ae:	23c8      	movs	r3, #200	@ 0xc8
 80097b0:	9301      	str	r3, [sp, #4]
 80097b2:	2315      	movs	r3, #21
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	4b3d      	ldr	r3, [pc, #244]	@ (80098ac <plotter_begin+0x73c>)
 80097b8:	4a3d      	ldr	r2, [pc, #244]	@ (80098b0 <plotter_begin+0x740>)
 80097ba:	493e      	ldr	r1, [pc, #248]	@ (80098b4 <plotter_begin+0x744>)
 80097bc:	483e      	ldr	r0, [pc, #248]	@ (80098b8 <plotter_begin+0x748>)
 80097be:	f7f8 fba7 	bl	8001f10 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 80097c2:	483e      	ldr	r0, [pc, #248]	@ (80098bc <plotter_begin+0x74c>)
 80097c4:	f004 fe0c 	bl	800e3e0 <HAL_TIM_Base_Start_IT>

	plotter_reset();
 80097c8:	f000 f87a 	bl	80098c0 <plotter_reset>
}
 80097cc:	bf00      	nop
 80097ce:	3704      	adds	r7, #4
 80097d0:	46bd      	mov	sp, r7
 80097d2:	ecbd 8b02 	vpop	{d8}
 80097d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097da:	bf00      	nop
 80097dc:	f3af 8000 	nop.w
 80097e0:	9999999a 	.word	0x9999999a
 80097e4:	40019999 	.word	0x40019999
 80097e8:	200020d4 	.word	0x200020d4
 80097ec:	200009d8 	.word	0x200009d8
 80097f0:	2000226c 	.word	0x2000226c
 80097f4:	200008e4 	.word	0x200008e4
 80097f8:	48000800 	.word	0x48000800
 80097fc:	20000930 	.word	0x20000930
 8009800:	20001e70 	.word	0x20001e70
 8009804:	20000b14 	.word	0x20000b14
 8009808:	00000000 	.word	0x00000000
 800980c:	44fa0000 	.word	0x44fa0000
 8009810:	20000080 	.word	0x20000080
 8009814:	42ce0000 	.word	0x42ce0000
 8009818:	2edbe6ff 	.word	0x2edbe6ff
 800981c:	42960000 	.word	0x42960000
 8009820:	20000a34 	.word	0x20000a34
 8009824:	3727c5ac 	.word	0x3727c5ac
 8009828:	43160000 	.word	0x43160000
 800982c:	20000a5c 	.word	0x20000a5c
 8009830:	20000000 	.word	0x20000000
 8009834:	442f0000 	.word	0x442f0000
 8009838:	3a83126f 	.word	0x3a83126f
 800983c:	437a0000 	.word	0x437a0000
 8009840:	20000a84 	.word	0x20000a84
 8009844:	453b4000 	.word	0x453b4000
 8009848:	41f40000 	.word	0x41f40000
 800984c:	450e3000 	.word	0x450e3000
 8009850:	20000aac 	.word	0x20000aac
 8009854:	42c80000 	.word	0x42c80000
 8009858:	45ea6000 	.word	0x45ea6000
 800985c:	20000ad4 	.word	0x20000ad4
 8009860:	20000b08 	.word	0x20000b08
 8009864:	20000afc 	.word	0x20000afc
 8009868:	20000100 	.word	0x20000100
 800986c:	20000b0c 	.word	0x20000b0c
 8009870:	20000b00 	.word	0x20000b00
 8009874:	457ff000 	.word	0x457ff000
 8009878:	40533333 	.word	0x40533333
 800987c:	20000fe0 	.word	0x20000fe0
 8009880:	20000630 	.word	0x20000630
 8009884:	20000b2c 	.word	0x20000b2c
 8009888:	45000000 	.word	0x45000000
 800988c:	447a0000 	.word	0x447a0000
 8009890:	20000fc8 	.word	0x20000fc8
 8009894:	20000fd4 	.word	0x20000fd4
 8009898:	20001710 	.word	0x20001710
 800989c:	20001e3c 	.word	0x20001e3c
 80098a0:	20001dfc 	.word	0x20001dfc
 80098a4:	3d4ccccd 	.word	0x3d4ccccd
 80098a8:	20001a7c 	.word	0x20001a7c
 80098ac:	20001580 	.word	0x20001580
 80098b0:	20002338 	.word	0x20002338
 80098b4:	200024d0 	.word	0x200024d0
 80098b8:	200010a8 	.word	0x200010a8
 80098bc:	20001f3c 	.word	0x20001f3c

080098c0 <plotter_reset>:

void plotter_reset() {
 80098c0:	b580      	push	{r7, lr}
 80098c2:	af00      	add	r7, sp, #0
	QEI_reset(&prismatic_encoder);
 80098c4:	4819      	ldr	r0, [pc, #100]	@ (800992c <plotter_reset+0x6c>)
 80098c6:	f7fa fcef 	bl	80042a8 <QEI_reset>
	QEI_reset(&prismatic_encoder);
 80098ca:	4818      	ldr	r0, [pc, #96]	@ (800992c <plotter_reset+0x6c>)
 80098cc:	f7fa fcec 	bl	80042a8 <QEI_reset>

	prismatic_encoder.diff_counts = 0;
 80098d0:	4b16      	ldr	r3, [pc, #88]	@ (800992c <plotter_reset+0x6c>)
 80098d2:	2200      	movs	r2, #0
 80098d4:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_encoder.rpm = 0;
 80098d6:	4b15      	ldr	r3, [pc, #84]	@ (800992c <plotter_reset+0x6c>)
 80098d8:	f04f 0200 	mov.w	r2, #0
 80098dc:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_encoder.pulses = 0;
 80098de:	4b13      	ldr	r3, [pc, #76]	@ (800992c <plotter_reset+0x6c>)
 80098e0:	2200      	movs	r2, #0
 80098e2:	639a      	str	r2, [r3, #56]	@ 0x38
	prismatic_encoder.revs = 0;
 80098e4:	4b11      	ldr	r3, [pc, #68]	@ (800992c <plotter_reset+0x6c>)
 80098e6:	f04f 0200 	mov.w	r2, #0
 80098ea:	63da      	str	r2, [r3, #60]	@ 0x3c
	prismatic_encoder.rads = 0;
 80098ec:	4b0f      	ldr	r3, [pc, #60]	@ (800992c <plotter_reset+0x6c>)
 80098ee:	f04f 0200 	mov.w	r2, #0
 80098f2:	641a      	str	r2, [r3, #64]	@ 0x40
	prismatic_encoder.mm = 0;
 80098f4:	4b0d      	ldr	r3, [pc, #52]	@ (800992c <plotter_reset+0x6c>)
 80098f6:	f04f 0200 	mov.w	r2, #0
 80098fa:	649a      	str	r2, [r3, #72]	@ 0x48

	revolute_encoder.diff_counts = 0;
 80098fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009930 <plotter_reset+0x70>)
 80098fe:	2200      	movs	r2, #0
 8009900:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_encoder.rpm = 0;
 8009902:	4b0b      	ldr	r3, [pc, #44]	@ (8009930 <plotter_reset+0x70>)
 8009904:	f04f 0200 	mov.w	r2, #0
 8009908:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_encoder.pulses = 0;
 800990a:	4b09      	ldr	r3, [pc, #36]	@ (8009930 <plotter_reset+0x70>)
 800990c:	2200      	movs	r2, #0
 800990e:	639a      	str	r2, [r3, #56]	@ 0x38
	revolute_encoder.revs = 0;
 8009910:	4b07      	ldr	r3, [pc, #28]	@ (8009930 <plotter_reset+0x70>)
 8009912:	f04f 0200 	mov.w	r2, #0
 8009916:	63da      	str	r2, [r3, #60]	@ 0x3c
	revolute_encoder.rads = 0;
 8009918:	4b05      	ldr	r3, [pc, #20]	@ (8009930 <plotter_reset+0x70>)
 800991a:	f04f 0200 	mov.w	r2, #0
 800991e:	641a      	str	r2, [r3, #64]	@ 0x40
	revolute_encoder.mm = 0;
 8009920:	4b03      	ldr	r3, [pc, #12]	@ (8009930 <plotter_reset+0x70>)
 8009922:	f04f 0200 	mov.w	r2, #0
 8009926:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8009928:	bf00      	nop
 800992a:	bd80      	pop	{r7, pc}
 800992c:	2000097c 	.word	0x2000097c
 8009930:	200009d8 	.word	0x200009d8

08009934 <plotter_update_sensors>:

void plotter_update_sensors() {
 8009934:	b580      	push	{r7, lr}
 8009936:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50,
 8009938:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8009a44 <plotter_update_sensors+0x110>
 800993c:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 8009a48 <plotter_update_sensors+0x114>
 8009940:	2106      	movs	r1, #6
 8009942:	4842      	ldr	r0, [pc, #264]	@ (8009a4c <plotter_update_sensors+0x118>)
 8009944:	f7f7 fbc8 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8009948:	eef0 7a40 	vmov.f32	s15, s0
 800994c:	4b40      	ldr	r3, [pc, #256]	@ (8009a50 <plotter_update_sensors+0x11c>)
 800994e:	edc3 7a00 	vstr	s15, [r3]
			50);
	joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50,
 8009952:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8009a44 <plotter_update_sensors+0x110>
 8009956:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8009a48 <plotter_update_sensors+0x114>
 800995a:	2107      	movs	r1, #7
 800995c:	483b      	ldr	r0, [pc, #236]	@ (8009a4c <plotter_update_sensors+0x118>)
 800995e:	f7f7 fbbb 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8009962:	eef0 7a40 	vmov.f32	s15, s0
 8009966:	4b3b      	ldr	r3, [pc, #236]	@ (8009a54 <plotter_update_sensors+0x120>)
 8009968:	edc3 7a00 	vstr	s15, [r3]
			50);

	b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 800996c:	2180      	movs	r1, #128	@ 0x80
 800996e:	483a      	ldr	r0, [pc, #232]	@ (8009a58 <plotter_update_sensors+0x124>)
 8009970:	f003 fbd0 	bl	800d114 <HAL_GPIO_ReadPin>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	bf0c      	ite	eq
 800997a:	2301      	moveq	r3, #1
 800997c:	2300      	movne	r3, #0
 800997e:	b2db      	uxtb	r3, r3
 8009980:	461a      	mov	r2, r3
 8009982:	4b36      	ldr	r3, [pc, #216]	@ (8009a5c <plotter_update_sensors+0x128>)
 8009984:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8009986:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800998a:	4835      	ldr	r0, [pc, #212]	@ (8009a60 <plotter_update_sensors+0x12c>)
 800998c:	f003 fbc2 	bl	800d114 <HAL_GPIO_ReadPin>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	bf0c      	ite	eq
 8009996:	2301      	moveq	r3, #1
 8009998:	2300      	movne	r3, #0
 800999a:	b2db      	uxtb	r3, r3
 800999c:	461a      	mov	r2, r3
 800999e:	4b31      	ldr	r3, [pc, #196]	@ (8009a64 <plotter_update_sensors+0x130>)
 80099a0:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 80099a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80099a6:	482e      	ldr	r0, [pc, #184]	@ (8009a60 <plotter_update_sensors+0x12c>)
 80099a8:	f003 fbb4 	bl	800d114 <HAL_GPIO_ReadPin>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	bf0c      	ite	eq
 80099b2:	2301      	moveq	r3, #1
 80099b4:	2300      	movne	r3, #0
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	461a      	mov	r2, r3
 80099ba:	4b2b      	ldr	r3, [pc, #172]	@ (8009a68 <plotter_update_sensors+0x134>)
 80099bc:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 80099be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80099c2:	4827      	ldr	r0, [pc, #156]	@ (8009a60 <plotter_update_sensors+0x12c>)
 80099c4:	f003 fba6 	bl	800d114 <HAL_GPIO_ReadPin>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	bf0c      	ite	eq
 80099ce:	2301      	moveq	r3, #1
 80099d0:	2300      	movne	r3, #0
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	461a      	mov	r2, r3
 80099d6:	4b25      	ldr	r3, [pc, #148]	@ (8009a6c <plotter_update_sensors+0x138>)
 80099d8:	601a      	str	r2, [r3, #0]

	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 80099da:	2104      	movs	r1, #4
 80099dc:	481e      	ldr	r0, [pc, #120]	@ (8009a58 <plotter_update_sensors+0x124>)
 80099de:	f003 fb99 	bl	800d114 <HAL_GPIO_ReadPin>
 80099e2:	4603      	mov	r3, r0
 80099e4:	461a      	mov	r2, r3
 80099e6:	4b22      	ldr	r3, [pc, #136]	@ (8009a70 <plotter_update_sensors+0x13c>)
 80099e8:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 80099ea:	2102      	movs	r1, #2
 80099ec:	481a      	ldr	r0, [pc, #104]	@ (8009a58 <plotter_update_sensors+0x124>)
 80099ee:	f003 fb91 	bl	800d114 <HAL_GPIO_ReadPin>
 80099f2:	4603      	mov	r3, r0
 80099f4:	461a      	mov	r2, r3
 80099f6:	4b1f      	ldr	r3, [pc, #124]	@ (8009a74 <plotter_update_sensors+0x140>)
 80099f8:	601a      	str	r2, [r3, #0]

	extern bool homing_active;
	if (!homing_active) {
 80099fa:	4b1f      	ldr	r3, [pc, #124]	@ (8009a78 <plotter_update_sensors+0x144>)
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	f083 0301 	eor.w	r3, r3, #1
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d01a      	beq.n	8009a3e <plotter_update_sensors+0x10a>
		extern volatile bool up_photo, low_photo;
		up_photo = HAL_GPIO_ReadPin(upperphoto_GPIO_Port, upperphoto_Pin);
 8009a08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009a0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009a10:	f003 fb80 	bl	800d114 <HAL_GPIO_ReadPin>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	bf14      	ite	ne
 8009a1a:	2301      	movne	r3, #1
 8009a1c:	2300      	moveq	r3, #0
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	4b16      	ldr	r3, [pc, #88]	@ (8009a7c <plotter_update_sensors+0x148>)
 8009a22:	701a      	strb	r2, [r3, #0]
		low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 8009a24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009a28:	480b      	ldr	r0, [pc, #44]	@ (8009a58 <plotter_update_sensors+0x124>)
 8009a2a:	f003 fb73 	bl	800d114 <HAL_GPIO_ReadPin>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	bf14      	ite	ne
 8009a34:	2301      	movne	r3, #1
 8009a36:	2300      	moveq	r3, #0
 8009a38:	b2da      	uxtb	r2, r3
 8009a3a:	4b11      	ldr	r3, [pc, #68]	@ (8009a80 <plotter_update_sensors+0x14c>)
 8009a3c:	701a      	strb	r2, [r3, #0]
	}
}
 8009a3e:	bf00      	nop
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	42480000 	.word	0x42480000
 8009a48:	c2480000 	.word	0xc2480000
 8009a4c:	20000b2c 	.word	0x20000b2c
 8009a50:	20001e4c 	.word	0x20001e4c
 8009a54:	20001e50 	.word	0x20001e50
 8009a58:	48000400 	.word	0x48000400
 8009a5c:	20001e5c 	.word	0x20001e5c
 8009a60:	48000800 	.word	0x48000800
 8009a64:	20001e60 	.word	0x20001e60
 8009a68:	20001e64 	.word	0x20001e64
 8009a6c:	20001e68 	.word	0x20001e68
 8009a70:	20001e54 	.word	0x20001e54
 8009a74:	20001e58 	.word	0x20001e58
 8009a78:	200007e3 	.word	0x200007e3
 8009a7c:	200007e0 	.word	0x200007e0
 8009a80:	200007e1 	.word	0x200007e1

08009a84 <plotter_pen_up>:

void plotter_pen_up() {
 8009a84:	b580      	push	{r7, lr}
 8009a86:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8009a88:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8009a8c:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8009a9c <plotter_pen_up+0x18>
 8009a90:	4803      	ldr	r0, [pc, #12]	@ (8009aa0 <plotter_pen_up+0x1c>)
 8009a92:	f7f9 ff7b 	bl	800398c <PWM_write_duty>
}
 8009a96:	bf00      	nop
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	42480000 	.word	0x42480000
 8009aa0:	20000b14 	.word	0x20000b14

08009aa4 <plotter_pen_down>:

void plotter_pen_down() {
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 10);
 8009aa8:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8009aac:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8009abc <plotter_pen_down+0x18>
 8009ab0:	4803      	ldr	r0, [pc, #12]	@ (8009ac0 <plotter_pen_down+0x1c>)
 8009ab2:	f7f9 ff6b 	bl	800398c <PWM_write_duty>
}
 8009ab6:	bf00      	nop
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	42480000 	.word	0x42480000
 8009ac0:	20000b14 	.word	0x20000b14

08009ac4 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	460b      	mov	r3, r1
 8009ace:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	78fa      	ldrb	r2, [r7, #3]
 8009ad4:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009adc:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009ae4:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f04f 0200 	mov.w	r2, #0
 8009aec:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f04f 0200 	mov.w	r2, #0
 8009af4:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f04f 0200 	mov.w	r2, #0
 8009afc:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f04f 0200 	mov.w	r2, #0
 8009b04:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a1b      	ldr	r2, [pc, #108]	@ (8009b78 <SIGNAL_init+0xb4>)
 8009b0a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009b12:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8009b14:	78fb      	ldrb	r3, [r7, #3]
 8009b16:	2b03      	cmp	r3, #3
 8009b18:	d828      	bhi.n	8009b6c <SIGNAL_init+0xa8>
 8009b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b20 <SIGNAL_init+0x5c>)
 8009b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b20:	08009b6b 	.word	0x08009b6b
 8009b24:	08009b31 	.word	0x08009b31
 8009b28:	08009b4f 	.word	0x08009b4f
 8009b2c:	08009b59 	.word	0x08009b59
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009b3c:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4a0e      	ldr	r2, [pc, #56]	@ (8009b7c <SIGNAL_init+0xb8>)
 8009b42:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009b4a:	621a      	str	r2, [r3, #32]
            break;
 8009b4c:	e00e      	b.n	8009b6c <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8009b54:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8009b56:	e009      	b.n	8009b6c <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f04f 0200 	mov.w	r2, #0
 8009b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009b66:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8009b68:	e000      	b.n	8009b6c <SIGNAL_init+0xa8>
            break;
 8009b6a:	bf00      	nop
    }
}
 8009b6c:	bf00      	nop
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr
 8009b78:	bf800000 	.word	0xbf800000
 8009b7c:	41200000 	.word	0x41200000

08009b80 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8009b80:	b480      	push	{r7}
 8009b82:	b089      	sub	sp, #36	@ 0x24
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	61f8      	str	r0, [r7, #28]
 8009b88:	ed87 0a06 	vstr	s0, [r7, #24]
 8009b8c:	edc7 0a05 	vstr	s1, [r7, #20]
 8009b90:	ed87 1a04 	vstr	s2, [r7, #16]
 8009b94:	edc7 1a03 	vstr	s3, [r7, #12]
 8009b98:	ed87 2a02 	vstr	s4, [r7, #8]
 8009b9c:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	69ba      	ldr	r2, [r7, #24]
 8009baa:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	697a      	ldr	r2, [r7, #20]
 8009bb0:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	693a      	ldr	r2, [r7, #16]
 8009bb6:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	68ba      	ldr	r2, [r7, #8]
 8009bc2:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8009bca:	bf00      	nop
 8009bcc:	3724      	adds	r7, #36	@ 0x24
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr

08009bd6 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8009bd6:	b480      	push	{r7}
 8009bd8:	b089      	sub	sp, #36	@ 0x24
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	61f8      	str	r0, [r7, #28]
 8009bde:	ed87 0a06 	vstr	s0, [r7, #24]
 8009be2:	edc7 0a05 	vstr	s1, [r7, #20]
 8009be6:	ed87 1a04 	vstr	s2, [r7, #16]
 8009bea:	edc7 1a03 	vstr	s3, [r7, #12]
 8009bee:	ed87 2a02 	vstr	s4, [r7, #8]
 8009bf2:	edc7 2a01 	vstr	s5, [r7, #4]
 8009bf6:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	2202      	movs	r2, #2
 8009bfe:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	69ba      	ldr	r2, [r7, #24]
 8009c04:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	697a      	ldr	r2, [r7, #20]
 8009c0a:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	693a      	ldr	r2, [r7, #16]
 8009c10:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	683a      	ldr	r2, [r7, #0]
 8009c28:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8009c2a:	bf00      	nop
 8009c2c:	3724      	adds	r7, #36	@ 0x24
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
	...

08009c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8009c7c <HAL_MspInit+0x44>)
 8009c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c42:	4a0e      	ldr	r2, [pc, #56]	@ (8009c7c <HAL_MspInit+0x44>)
 8009c44:	f043 0301 	orr.w	r3, r3, #1
 8009c48:	6613      	str	r3, [r2, #96]	@ 0x60
 8009c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8009c7c <HAL_MspInit+0x44>)
 8009c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	607b      	str	r3, [r7, #4]
 8009c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009c56:	4b09      	ldr	r3, [pc, #36]	@ (8009c7c <HAL_MspInit+0x44>)
 8009c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c5a:	4a08      	ldr	r2, [pc, #32]	@ (8009c7c <HAL_MspInit+0x44>)
 8009c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c60:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c62:	4b06      	ldr	r3, [pc, #24]	@ (8009c7c <HAL_MspInit+0x44>)
 8009c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c6a:	603b      	str	r3, [r7, #0]
 8009c6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8009c6e:	f003 fb57 	bl	800d320 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009c72:	bf00      	nop
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	40021000 	.word	0x40021000

08009c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009c80:	b480      	push	{r7}
 8009c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009c84:	bf00      	nop
 8009c86:	e7fd      	b.n	8009c84 <NMI_Handler+0x4>

08009c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009c8c:	bf00      	nop
 8009c8e:	e7fd      	b.n	8009c8c <HardFault_Handler+0x4>

08009c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009c90:	b480      	push	{r7}
 8009c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009c94:	bf00      	nop
 8009c96:	e7fd      	b.n	8009c94 <MemManage_Handler+0x4>

08009c98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009c9c:	bf00      	nop
 8009c9e:	e7fd      	b.n	8009c9c <BusFault_Handler+0x4>

08009ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009ca4:	bf00      	nop
 8009ca6:	e7fd      	b.n	8009ca4 <UsageFault_Handler+0x4>

08009ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009cac:	bf00      	nop
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr

08009cb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009cb6:	b480      	push	{r7}
 8009cb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009cba:	bf00      	nop
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009cc8:	bf00      	nop
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr

08009cd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009cd6:	f000 ffc3 	bl	800ac60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009cda:	bf00      	nop
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UPPER_PHOTO_Pin);
 8009ce2:	2001      	movs	r0, #1
 8009ce4:	f003 fa60 	bl	800d1a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8009ce8:	bf00      	nop
 8009cea:	bd80      	pop	{r7, pc}

08009cec <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 8009cf0:	2010      	movs	r0, #16
 8009cf2:	f003 fa59 	bl	800d1a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8009cf6:	bf00      	nop
 8009cf8:	bd80      	pop	{r7, pc}
	...

08009cfc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009d00:	4802      	ldr	r0, [pc, #8]	@ (8009d0c <DMA1_Channel1_IRQHandler+0x10>)
 8009d02:	f002 ff36 	bl	800cb72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8009d06:	bf00      	nop
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	2000069c 	.word	0x2000069c

08009d10 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8009d14:	4802      	ldr	r0, [pc, #8]	@ (8009d20 <DMA1_Channel2_IRQHandler+0x10>)
 8009d16:	f002 ff2c 	bl	800cb72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8009d1a:	bf00      	nop
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	2000265c 	.word	0x2000265c

08009d24 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8009d28:	4802      	ldr	r0, [pc, #8]	@ (8009d34 <DMA1_Channel3_IRQHandler+0x10>)
 8009d2a:	f002 ff22 	bl	800cb72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8009d2e:	bf00      	nop
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	200026bc 	.word	0x200026bc

08009d38 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8009d3c:	4802      	ldr	r0, [pc, #8]	@ (8009d48 <DMA1_Channel4_IRQHandler+0x10>)
 8009d3e:	f002 ff18 	bl	800cb72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8009d42:	bf00      	nop
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	2000259c 	.word	0x2000259c

08009d4c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8009d50:	4802      	ldr	r0, [pc, #8]	@ (8009d5c <DMA1_Channel5_IRQHandler+0x10>)
 8009d52:	f002 ff0e 	bl	800cb72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8009d56:	bf00      	nop
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	200025fc 	.word	0x200025fc

08009d60 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(prox_Pin);
 8009d64:	2020      	movs	r0, #32
 8009d66:	f003 fa1f 	bl	800d1a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 8009d6a:	2040      	movs	r0, #64	@ 0x40
 8009d6c:	f003 fa1c 	bl	800d1a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J1_Pin);
 8009d70:	2080      	movs	r0, #128	@ 0x80
 8009d72:	f003 fa19 	bl	800d1a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(upperphoto_Pin);
 8009d76:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8009d7a:	f003 fa15 	bl	800d1a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8009d7e:	bf00      	nop
 8009d80:	bd80      	pop	{r7, pc}
	...

08009d84 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009d88:	4803      	ldr	r0, [pc, #12]	@ (8009d98 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8009d8a:	f004 ff4f 	bl	800ec2c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8009d8e:	4803      	ldr	r0, [pc, #12]	@ (8009d9c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8009d90:	f004 ff4c 	bl	800ec2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8009d94:	bf00      	nop
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	20001e70 	.word	0x20001e70
 8009d9c:	20002338 	.word	0x20002338

08009da0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8009da4:	4802      	ldr	r0, [pc, #8]	@ (8009db0 <TIM2_IRQHandler+0x10>)
 8009da6:	f004 ff41 	bl	800ec2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8009daa:	bf00      	nop
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	20001f3c 	.word	0x20001f3c

08009db4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8009db8:	4802      	ldr	r0, [pc, #8]	@ (8009dc4 <TIM3_IRQHandler+0x10>)
 8009dba:	f004 ff37 	bl	800ec2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8009dbe:	bf00      	nop
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20002008 	.word	0x20002008

08009dc8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8009dcc:	4802      	ldr	r0, [pc, #8]	@ (8009dd8 <TIM4_IRQHandler+0x10>)
 8009dce:	f004 ff2d 	bl	800ec2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8009dd2:	bf00      	nop
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	200020d4 	.word	0x200020d4

08009ddc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009de0:	4802      	ldr	r0, [pc, #8]	@ (8009dec <USART2_IRQHandler+0x10>)
 8009de2:	f006 fcf7 	bl	80107d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009de6:	bf00      	nop
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	200024d0 	.word	0x200024d0

08009df0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(J3_Pin);
 8009df4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009df8:	f003 f9d6 	bl	800d1a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J4_Pin);
 8009dfc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009e00:	f003 f9d2 	bl	800d1a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LOWER_PHOTO_Pin);
 8009e04:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009e08:	f003 f9ce 	bl	800d1a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8009e0c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009e10:	f003 f9ca 	bl	800d1a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8009e14:	bf00      	nop
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8009e1c:	4802      	ldr	r0, [pc, #8]	@ (8009e28 <LPUART1_IRQHandler+0x10>)
 8009e1e:	f006 fcd9 	bl	80107d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8009e22:	bf00      	nop
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	20002404 	.word	0x20002404

08009e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b086      	sub	sp, #24
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009e34:	4a14      	ldr	r2, [pc, #80]	@ (8009e88 <_sbrk+0x5c>)
 8009e36:	4b15      	ldr	r3, [pc, #84]	@ (8009e8c <_sbrk+0x60>)
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009e40:	4b13      	ldr	r3, [pc, #76]	@ (8009e90 <_sbrk+0x64>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d102      	bne.n	8009e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009e48:	4b11      	ldr	r3, [pc, #68]	@ (8009e90 <_sbrk+0x64>)
 8009e4a:	4a12      	ldr	r2, [pc, #72]	@ (8009e94 <_sbrk+0x68>)
 8009e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009e4e:	4b10      	ldr	r3, [pc, #64]	@ (8009e90 <_sbrk+0x64>)
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4413      	add	r3, r2
 8009e56:	693a      	ldr	r2, [r7, #16]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d207      	bcs.n	8009e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009e5c:	f008 ffa8 	bl	8012db0 <__errno>
 8009e60:	4603      	mov	r3, r0
 8009e62:	220c      	movs	r2, #12
 8009e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009e66:	f04f 33ff 	mov.w	r3, #4294967295
 8009e6a:	e009      	b.n	8009e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009e6c:	4b08      	ldr	r3, [pc, #32]	@ (8009e90 <_sbrk+0x64>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009e72:	4b07      	ldr	r3, [pc, #28]	@ (8009e90 <_sbrk+0x64>)
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	4413      	add	r3, r2
 8009e7a:	4a05      	ldr	r2, [pc, #20]	@ (8009e90 <_sbrk+0x64>)
 8009e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3718      	adds	r7, #24
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	20020000 	.word	0x20020000
 8009e8c:	00000400 	.word	0x00000400
 8009e90:	20001e6c 	.word	0x20001e6c
 8009e94:	20002868 	.word	0x20002868

08009e98 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009e9c:	4b06      	ldr	r3, [pc, #24]	@ (8009eb8 <SystemInit+0x20>)
 8009e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ea2:	4a05      	ldr	r2, [pc, #20]	@ (8009eb8 <SystemInit+0x20>)
 8009ea4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009ea8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009eac:	bf00      	nop
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	e000ed00 	.word	0xe000ed00

08009ebc <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b098      	sub	sp, #96	@ 0x60
 8009ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ec2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	605a      	str	r2, [r3, #4]
 8009ecc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009ece:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	601a      	str	r2, [r3, #0]
 8009ed6:	605a      	str	r2, [r3, #4]
 8009ed8:	609a      	str	r2, [r3, #8]
 8009eda:	60da      	str	r2, [r3, #12]
 8009edc:	611a      	str	r2, [r3, #16]
 8009ede:	615a      	str	r2, [r3, #20]
 8009ee0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009ee2:	1d3b      	adds	r3, r7, #4
 8009ee4:	2234      	movs	r2, #52	@ 0x34
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f008 ff49 	bl	8012d80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009eee:	4b3b      	ldr	r3, [pc, #236]	@ (8009fdc <MX_TIM1_Init+0x120>)
 8009ef0:	4a3b      	ldr	r2, [pc, #236]	@ (8009fe0 <MX_TIM1_Init+0x124>)
 8009ef2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8009ef4:	4b39      	ldr	r3, [pc, #228]	@ (8009fdc <MX_TIM1_Init+0x120>)
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009efa:	4b38      	ldr	r3, [pc, #224]	@ (8009fdc <MX_TIM1_Init+0x120>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8009f00:	4b36      	ldr	r3, [pc, #216]	@ (8009fdc <MX_TIM1_Init+0x120>)
 8009f02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009f06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009f08:	4b34      	ldr	r3, [pc, #208]	@ (8009fdc <MX_TIM1_Init+0x120>)
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009f0e:	4b33      	ldr	r3, [pc, #204]	@ (8009fdc <MX_TIM1_Init+0x120>)
 8009f10:	2200      	movs	r2, #0
 8009f12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009f14:	4b31      	ldr	r3, [pc, #196]	@ (8009fdc <MX_TIM1_Init+0x120>)
 8009f16:	2200      	movs	r2, #0
 8009f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009f1a:	4830      	ldr	r0, [pc, #192]	@ (8009fdc <MX_TIM1_Init+0x120>)
 8009f1c:	f004 fad8 	bl	800e4d0 <HAL_TIM_PWM_Init>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d001      	beq.n	8009f2a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8009f26:	f7ff f91b 	bl	8009160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009f32:	2300      	movs	r3, #0
 8009f34:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009f36:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	4827      	ldr	r0, [pc, #156]	@ (8009fdc <MX_TIM1_Init+0x120>)
 8009f3e:	f006 f8e9 	bl	8010114 <HAL_TIMEx_MasterConfigSynchronization>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d001      	beq.n	8009f4c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8009f48:	f7ff f90a 	bl	8009160 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009f4c:	2360      	movs	r3, #96	@ 0x60
 8009f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8009f50:	2300      	movs	r3, #0
 8009f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009f54:	2300      	movs	r3, #0
 8009f56:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009f60:	2300      	movs	r3, #0
 8009f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009f64:	2300      	movs	r3, #0
 8009f66:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009f68:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009f6c:	220c      	movs	r2, #12
 8009f6e:	4619      	mov	r1, r3
 8009f70:	481a      	ldr	r0, [pc, #104]	@ (8009fdc <MX_TIM1_Init+0x120>)
 8009f72:	f004 ffd5 	bl	800ef20 <HAL_TIM_PWM_ConfigChannel>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d001      	beq.n	8009f80 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8009f7c:	f7ff f8f0 	bl	8009160 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009f80:	2300      	movs	r3, #0
 8009f82:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009f84:	2300      	movs	r3, #0
 8009f86:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009f90:	2300      	movs	r3, #0
 8009f92:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009f94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009f98:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009fa6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009faa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009fac:	2300      	movs	r3, #0
 8009fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009fb8:	1d3b      	adds	r3, r7, #4
 8009fba:	4619      	mov	r1, r3
 8009fbc:	4807      	ldr	r0, [pc, #28]	@ (8009fdc <MX_TIM1_Init+0x120>)
 8009fbe:	f006 f93f 	bl	8010240 <HAL_TIMEx_ConfigBreakDeadTime>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d001      	beq.n	8009fcc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8009fc8:	f7ff f8ca 	bl	8009160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8009fcc:	4803      	ldr	r0, [pc, #12]	@ (8009fdc <MX_TIM1_Init+0x120>)
 8009fce:	f000 fb77 	bl	800a6c0 <HAL_TIM_MspPostInit>

}
 8009fd2:	bf00      	nop
 8009fd4:	3760      	adds	r7, #96	@ 0x60
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	20001e70 	.word	0x20001e70
 8009fe0:	40012c00 	.word	0x40012c00

08009fe4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b088      	sub	sp, #32
 8009fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009fea:	f107 0310 	add.w	r3, r7, #16
 8009fee:	2200      	movs	r2, #0
 8009ff0:	601a      	str	r2, [r3, #0]
 8009ff2:	605a      	str	r2, [r3, #4]
 8009ff4:	609a      	str	r2, [r3, #8]
 8009ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ff8:	1d3b      	adds	r3, r7, #4
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	601a      	str	r2, [r3, #0]
 8009ffe:	605a      	str	r2, [r3, #4]
 800a000:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a002:	4b1e      	ldr	r3, [pc, #120]	@ (800a07c <MX_TIM2_Init+0x98>)
 800a004:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800a008:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800a00a:	4b1c      	ldr	r3, [pc, #112]	@ (800a07c <MX_TIM2_Init+0x98>)
 800a00c:	22a9      	movs	r2, #169	@ 0xa9
 800a00e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a010:	4b1a      	ldr	r3, [pc, #104]	@ (800a07c <MX_TIM2_Init+0x98>)
 800a012:	2200      	movs	r2, #0
 800a014:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800a016:	4b19      	ldr	r3, [pc, #100]	@ (800a07c <MX_TIM2_Init+0x98>)
 800a018:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800a01c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a01e:	4b17      	ldr	r3, [pc, #92]	@ (800a07c <MX_TIM2_Init+0x98>)
 800a020:	2200      	movs	r2, #0
 800a022:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a024:	4b15      	ldr	r3, [pc, #84]	@ (800a07c <MX_TIM2_Init+0x98>)
 800a026:	2200      	movs	r2, #0
 800a028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a02a:	4814      	ldr	r0, [pc, #80]	@ (800a07c <MX_TIM2_Init+0x98>)
 800a02c:	f004 f904 	bl	800e238 <HAL_TIM_Base_Init>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d001      	beq.n	800a03a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800a036:	f7ff f893 	bl	8009160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a03a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a03e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a040:	f107 0310 	add.w	r3, r7, #16
 800a044:	4619      	mov	r1, r3
 800a046:	480d      	ldr	r0, [pc, #52]	@ (800a07c <MX_TIM2_Init+0x98>)
 800a048:	f005 f87e 	bl	800f148 <HAL_TIM_ConfigClockSource>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d001      	beq.n	800a056 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800a052:	f7ff f885 	bl	8009160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a056:	2300      	movs	r3, #0
 800a058:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a05a:	2300      	movs	r3, #0
 800a05c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a05e:	1d3b      	adds	r3, r7, #4
 800a060:	4619      	mov	r1, r3
 800a062:	4806      	ldr	r0, [pc, #24]	@ (800a07c <MX_TIM2_Init+0x98>)
 800a064:	f006 f856 	bl	8010114 <HAL_TIMEx_MasterConfigSynchronization>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d001      	beq.n	800a072 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800a06e:	f7ff f877 	bl	8009160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a072:	bf00      	nop
 800a074:	3720      	adds	r7, #32
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	20001f3c 	.word	0x20001f3c

0800a080 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b08c      	sub	sp, #48	@ 0x30
 800a084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a086:	f107 030c 	add.w	r3, r7, #12
 800a08a:	2224      	movs	r2, #36	@ 0x24
 800a08c:	2100      	movs	r1, #0
 800a08e:	4618      	mov	r0, r3
 800a090:	f008 fe76 	bl	8012d80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a094:	463b      	mov	r3, r7
 800a096:	2200      	movs	r2, #0
 800a098:	601a      	str	r2, [r3, #0]
 800a09a:	605a      	str	r2, [r3, #4]
 800a09c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a09e:	4b21      	ldr	r3, [pc, #132]	@ (800a124 <MX_TIM3_Init+0xa4>)
 800a0a0:	4a21      	ldr	r2, [pc, #132]	@ (800a128 <MX_TIM3_Init+0xa8>)
 800a0a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800a0a4:	4b1f      	ldr	r3, [pc, #124]	@ (800a124 <MX_TIM3_Init+0xa4>)
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0aa:	4b1e      	ldr	r3, [pc, #120]	@ (800a124 <MX_TIM3_Init+0xa4>)
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800a0b0:	4b1c      	ldr	r3, [pc, #112]	@ (800a124 <MX_TIM3_Init+0xa4>)
 800a0b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a0b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a0b8:	4b1a      	ldr	r3, [pc, #104]	@ (800a124 <MX_TIM3_Init+0xa4>)
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a0be:	4b19      	ldr	r3, [pc, #100]	@ (800a124 <MX_TIM3_Init+0xa4>)
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800a0e8:	f107 030c 	add.w	r3, r7, #12
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	480d      	ldr	r0, [pc, #52]	@ (800a124 <MX_TIM3_Init+0xa4>)
 800a0f0:	f004 fc5a 	bl	800e9a8 <HAL_TIM_Encoder_Init>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800a0fa:	f7ff f831 	bl	8009160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a0fe:	2300      	movs	r3, #0
 800a100:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a102:	2300      	movs	r3, #0
 800a104:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a106:	463b      	mov	r3, r7
 800a108:	4619      	mov	r1, r3
 800a10a:	4806      	ldr	r0, [pc, #24]	@ (800a124 <MX_TIM3_Init+0xa4>)
 800a10c:	f006 f802 	bl	8010114 <HAL_TIMEx_MasterConfigSynchronization>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d001      	beq.n	800a11a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800a116:	f7ff f823 	bl	8009160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800a11a:	bf00      	nop
 800a11c:	3730      	adds	r7, #48	@ 0x30
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	20002008 	.word	0x20002008
 800a128:	40000400 	.word	0x40000400

0800a12c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b08c      	sub	sp, #48	@ 0x30
 800a130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a132:	f107 030c 	add.w	r3, r7, #12
 800a136:	2224      	movs	r2, #36	@ 0x24
 800a138:	2100      	movs	r1, #0
 800a13a:	4618      	mov	r0, r3
 800a13c:	f008 fe20 	bl	8012d80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a140:	463b      	mov	r3, r7
 800a142:	2200      	movs	r2, #0
 800a144:	601a      	str	r2, [r3, #0]
 800a146:	605a      	str	r2, [r3, #4]
 800a148:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800a14a:	4b21      	ldr	r3, [pc, #132]	@ (800a1d0 <MX_TIM4_Init+0xa4>)
 800a14c:	4a21      	ldr	r2, [pc, #132]	@ (800a1d4 <MX_TIM4_Init+0xa8>)
 800a14e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800a150:	4b1f      	ldr	r3, [pc, #124]	@ (800a1d0 <MX_TIM4_Init+0xa4>)
 800a152:	2200      	movs	r2, #0
 800a154:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a156:	4b1e      	ldr	r3, [pc, #120]	@ (800a1d0 <MX_TIM4_Init+0xa4>)
 800a158:	2200      	movs	r2, #0
 800a15a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800a15c:	4b1c      	ldr	r3, [pc, #112]	@ (800a1d0 <MX_TIM4_Init+0xa4>)
 800a15e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a162:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a164:	4b1a      	ldr	r3, [pc, #104]	@ (800a1d0 <MX_TIM4_Init+0xa4>)
 800a166:	2200      	movs	r2, #0
 800a168:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a16a:	4b19      	ldr	r3, [pc, #100]	@ (800a1d0 <MX_TIM4_Init+0xa4>)
 800a16c:	2200      	movs	r2, #0
 800a16e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a170:	2303      	movs	r3, #3
 800a172:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a174:	2300      	movs	r3, #0
 800a176:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a178:	2301      	movs	r3, #1
 800a17a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a17c:	2300      	movs	r3, #0
 800a17e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a180:	2300      	movs	r3, #0
 800a182:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a184:	2300      	movs	r3, #0
 800a186:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a188:	2301      	movs	r3, #1
 800a18a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a18c:	2300      	movs	r3, #0
 800a18e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800a190:	2300      	movs	r3, #0
 800a192:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800a194:	f107 030c 	add.w	r3, r7, #12
 800a198:	4619      	mov	r1, r3
 800a19a:	480d      	ldr	r0, [pc, #52]	@ (800a1d0 <MX_TIM4_Init+0xa4>)
 800a19c:	f004 fc04 	bl	800e9a8 <HAL_TIM_Encoder_Init>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d001      	beq.n	800a1aa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800a1a6:	f7fe ffdb 	bl	8009160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a1b2:	463b      	mov	r3, r7
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	4806      	ldr	r0, [pc, #24]	@ (800a1d0 <MX_TIM4_Init+0xa4>)
 800a1b8:	f005 ffac 	bl	8010114 <HAL_TIMEx_MasterConfigSynchronization>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800a1c2:	f7fe ffcd 	bl	8009160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800a1c6:	bf00      	nop
 800a1c8:	3730      	adds	r7, #48	@ 0x30
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	200020d4 	.word	0x200020d4
 800a1d4:	40000800 	.word	0x40000800

0800a1d8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b08c      	sub	sp, #48	@ 0x30
 800a1dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a1de:	f107 030c 	add.w	r3, r7, #12
 800a1e2:	2224      	movs	r2, #36	@ 0x24
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f008 fdca 	bl	8012d80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a1ec:	463b      	mov	r3, r7
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	601a      	str	r2, [r3, #0]
 800a1f2:	605a      	str	r2, [r3, #4]
 800a1f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800a1f6:	4b21      	ldr	r3, [pc, #132]	@ (800a27c <MX_TIM5_Init+0xa4>)
 800a1f8:	4a21      	ldr	r2, [pc, #132]	@ (800a280 <MX_TIM5_Init+0xa8>)
 800a1fa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800a1fc:	4b1f      	ldr	r3, [pc, #124]	@ (800a27c <MX_TIM5_Init+0xa4>)
 800a1fe:	2200      	movs	r2, #0
 800a200:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a202:	4b1e      	ldr	r3, [pc, #120]	@ (800a27c <MX_TIM5_Init+0xa4>)
 800a204:	2200      	movs	r2, #0
 800a206:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800a208:	4b1c      	ldr	r3, [pc, #112]	@ (800a27c <MX_TIM5_Init+0xa4>)
 800a20a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a20e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a210:	4b1a      	ldr	r3, [pc, #104]	@ (800a27c <MX_TIM5_Init+0xa4>)
 800a212:	2200      	movs	r2, #0
 800a214:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a216:	4b19      	ldr	r3, [pc, #100]	@ (800a27c <MX_TIM5_Init+0xa4>)
 800a218:	2200      	movs	r2, #0
 800a21a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a21c:	2303      	movs	r3, #3
 800a21e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a220:	2300      	movs	r3, #0
 800a222:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a224:	2301      	movs	r3, #1
 800a226:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a228:	2300      	movs	r3, #0
 800a22a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a22c:	2300      	movs	r3, #0
 800a22e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a230:	2300      	movs	r3, #0
 800a232:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a234:	2301      	movs	r3, #1
 800a236:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a238:	2300      	movs	r3, #0
 800a23a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800a23c:	2300      	movs	r3, #0
 800a23e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800a240:	f107 030c 	add.w	r3, r7, #12
 800a244:	4619      	mov	r1, r3
 800a246:	480d      	ldr	r0, [pc, #52]	@ (800a27c <MX_TIM5_Init+0xa4>)
 800a248:	f004 fbae 	bl	800e9a8 <HAL_TIM_Encoder_Init>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d001      	beq.n	800a256 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800a252:	f7fe ff85 	bl	8009160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a256:	2300      	movs	r3, #0
 800a258:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a25a:	2300      	movs	r3, #0
 800a25c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800a25e:	463b      	mov	r3, r7
 800a260:	4619      	mov	r1, r3
 800a262:	4806      	ldr	r0, [pc, #24]	@ (800a27c <MX_TIM5_Init+0xa4>)
 800a264:	f005 ff56 	bl	8010114 <HAL_TIMEx_MasterConfigSynchronization>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800a26e:	f7fe ff77 	bl	8009160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800a272:	bf00      	nop
 800a274:	3730      	adds	r7, #48	@ 0x30
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	200021a0 	.word	0x200021a0
 800a280:	40000c00 	.word	0x40000c00

0800a284 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b09c      	sub	sp, #112	@ 0x70
 800a288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a28a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800a28e:	2200      	movs	r2, #0
 800a290:	601a      	str	r2, [r3, #0]
 800a292:	605a      	str	r2, [r3, #4]
 800a294:	609a      	str	r2, [r3, #8]
 800a296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a298:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a29c:	2200      	movs	r2, #0
 800a29e:	601a      	str	r2, [r3, #0]
 800a2a0:	605a      	str	r2, [r3, #4]
 800a2a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a2a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	601a      	str	r2, [r3, #0]
 800a2ac:	605a      	str	r2, [r3, #4]
 800a2ae:	609a      	str	r2, [r3, #8]
 800a2b0:	60da      	str	r2, [r3, #12]
 800a2b2:	611a      	str	r2, [r3, #16]
 800a2b4:	615a      	str	r2, [r3, #20]
 800a2b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a2b8:	1d3b      	adds	r3, r7, #4
 800a2ba:	2234      	movs	r2, #52	@ 0x34
 800a2bc:	2100      	movs	r1, #0
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f008 fd5e 	bl	8012d80 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a2c4:	4b4c      	ldr	r3, [pc, #304]	@ (800a3f8 <MX_TIM8_Init+0x174>)
 800a2c6:	4a4d      	ldr	r2, [pc, #308]	@ (800a3fc <MX_TIM8_Init+0x178>)
 800a2c8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800a2ca:	4b4b      	ldr	r3, [pc, #300]	@ (800a3f8 <MX_TIM8_Init+0x174>)
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a2d0:	4b49      	ldr	r3, [pc, #292]	@ (800a3f8 <MX_TIM8_Init+0x174>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800a2d6:	4b48      	ldr	r3, [pc, #288]	@ (800a3f8 <MX_TIM8_Init+0x174>)
 800a2d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a2dc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800a2de:	4b46      	ldr	r3, [pc, #280]	@ (800a3f8 <MX_TIM8_Init+0x174>)
 800a2e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a2e4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a2e6:	4b44      	ldr	r3, [pc, #272]	@ (800a3f8 <MX_TIM8_Init+0x174>)
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a2ec:	4b42      	ldr	r3, [pc, #264]	@ (800a3f8 <MX_TIM8_Init+0x174>)
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800a2f2:	4841      	ldr	r0, [pc, #260]	@ (800a3f8 <MX_TIM8_Init+0x174>)
 800a2f4:	f003 ffa0 	bl	800e238 <HAL_TIM_Base_Init>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 800a2fe:	f7fe ff2f 	bl	8009160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a302:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a306:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800a308:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800a30c:	4619      	mov	r1, r3
 800a30e:	483a      	ldr	r0, [pc, #232]	@ (800a3f8 <MX_TIM8_Init+0x174>)
 800a310:	f004 ff1a 	bl	800f148 <HAL_TIM_ConfigClockSource>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d001      	beq.n	800a31e <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 800a31a:	f7fe ff21 	bl	8009160 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800a31e:	4836      	ldr	r0, [pc, #216]	@ (800a3f8 <MX_TIM8_Init+0x174>)
 800a320:	f004 f8d6 	bl	800e4d0 <HAL_TIM_PWM_Init>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d001      	beq.n	800a32e <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 800a32a:	f7fe ff19 	bl	8009160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a32e:	2300      	movs	r3, #0
 800a330:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a332:	2300      	movs	r3, #0
 800a334:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a336:	2300      	movs	r3, #0
 800a338:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a33a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a33e:	4619      	mov	r1, r3
 800a340:	482d      	ldr	r0, [pc, #180]	@ (800a3f8 <MX_TIM8_Init+0x174>)
 800a342:	f005 fee7 	bl	8010114 <HAL_TIMEx_MasterConfigSynchronization>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d001      	beq.n	800a350 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 800a34c:	f7fe ff08 	bl	8009160 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a350:	2360      	movs	r3, #96	@ 0x60
 800a352:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800a354:	2300      	movs	r3, #0
 800a356:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a358:	2300      	movs	r3, #0
 800a35a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a35c:	2300      	movs	r3, #0
 800a35e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a360:	2300      	movs	r3, #0
 800a362:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a364:	2300      	movs	r3, #0
 800a366:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a368:	2300      	movs	r3, #0
 800a36a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a36c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a370:	2200      	movs	r2, #0
 800a372:	4619      	mov	r1, r3
 800a374:	4820      	ldr	r0, [pc, #128]	@ (800a3f8 <MX_TIM8_Init+0x174>)
 800a376:	f004 fdd3 	bl	800ef20 <HAL_TIM_PWM_ConfigChannel>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d001      	beq.n	800a384 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 800a380:	f7fe feee 	bl	8009160 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a384:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a388:	2204      	movs	r2, #4
 800a38a:	4619      	mov	r1, r3
 800a38c:	481a      	ldr	r0, [pc, #104]	@ (800a3f8 <MX_TIM8_Init+0x174>)
 800a38e:	f004 fdc7 	bl	800ef20 <HAL_TIM_PWM_ConfigChannel>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d001      	beq.n	800a39c <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 800a398:	f7fe fee2 	bl	8009160 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a39c:	2300      	movs	r3, #0
 800a39e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a3b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a3b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a3c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a3c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800a3d4:	1d3b      	adds	r3, r7, #4
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	4807      	ldr	r0, [pc, #28]	@ (800a3f8 <MX_TIM8_Init+0x174>)
 800a3da:	f005 ff31 	bl	8010240 <HAL_TIMEx_ConfigBreakDeadTime>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d001      	beq.n	800a3e8 <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 800a3e4:	f7fe febc 	bl	8009160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800a3e8:	4803      	ldr	r0, [pc, #12]	@ (800a3f8 <MX_TIM8_Init+0x174>)
 800a3ea:	f000 f969 	bl	800a6c0 <HAL_TIM_MspPostInit>

}
 800a3ee:	bf00      	nop
 800a3f0:	3770      	adds	r7, #112	@ 0x70
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	2000226c 	.word	0x2000226c
 800a3fc:	40013400 	.word	0x40013400

0800a400 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800a404:	4b14      	ldr	r3, [pc, #80]	@ (800a458 <MX_TIM16_Init+0x58>)
 800a406:	4a15      	ldr	r2, [pc, #84]	@ (800a45c <MX_TIM16_Init+0x5c>)
 800a408:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800a40a:	4b13      	ldr	r3, [pc, #76]	@ (800a458 <MX_TIM16_Init+0x58>)
 800a40c:	22a9      	movs	r2, #169	@ 0xa9
 800a40e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a410:	4b11      	ldr	r3, [pc, #68]	@ (800a458 <MX_TIM16_Init+0x58>)
 800a412:	2200      	movs	r2, #0
 800a414:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800a416:	4b10      	ldr	r3, [pc, #64]	@ (800a458 <MX_TIM16_Init+0x58>)
 800a418:	f240 4279 	movw	r2, #1145	@ 0x479
 800a41c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a41e:	4b0e      	ldr	r3, [pc, #56]	@ (800a458 <MX_TIM16_Init+0x58>)
 800a420:	2200      	movs	r2, #0
 800a422:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800a424:	4b0c      	ldr	r3, [pc, #48]	@ (800a458 <MX_TIM16_Init+0x58>)
 800a426:	2200      	movs	r2, #0
 800a428:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a42a:	4b0b      	ldr	r3, [pc, #44]	@ (800a458 <MX_TIM16_Init+0x58>)
 800a42c:	2200      	movs	r2, #0
 800a42e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800a430:	4809      	ldr	r0, [pc, #36]	@ (800a458 <MX_TIM16_Init+0x58>)
 800a432:	f003 ff01 	bl	800e238 <HAL_TIM_Base_Init>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d001      	beq.n	800a440 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800a43c:	f7fe fe90 	bl	8009160 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 800a440:	2108      	movs	r1, #8
 800a442:	4805      	ldr	r0, [pc, #20]	@ (800a458 <MX_TIM16_Init+0x58>)
 800a444:	f004 f9ba 	bl	800e7bc <HAL_TIM_OnePulse_Init>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d001      	beq.n	800a452 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800a44e:	f7fe fe87 	bl	8009160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800a452:	bf00      	nop
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	20002338 	.word	0x20002338
 800a45c:	40014400 	.word	0x40014400

0800a460 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a0d      	ldr	r2, [pc, #52]	@ (800a4a4 <HAL_TIM_PWM_MspInit+0x44>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d113      	bne.n	800a49a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a472:	4b0d      	ldr	r3, [pc, #52]	@ (800a4a8 <HAL_TIM_PWM_MspInit+0x48>)
 800a474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a476:	4a0c      	ldr	r2, [pc, #48]	@ (800a4a8 <HAL_TIM_PWM_MspInit+0x48>)
 800a478:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a47c:	6613      	str	r3, [r2, #96]	@ 0x60
 800a47e:	4b0a      	ldr	r3, [pc, #40]	@ (800a4a8 <HAL_TIM_PWM_MspInit+0x48>)
 800a480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a482:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a486:	60fb      	str	r3, [r7, #12]
 800a488:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800a48a:	2200      	movs	r2, #0
 800a48c:	2100      	movs	r1, #0
 800a48e:	2019      	movs	r0, #25
 800a490:	f002 f957 	bl	800c742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800a494:	2019      	movs	r0, #25
 800a496:	f002 f96e 	bl	800c776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800a49a:	bf00      	nop
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	40012c00 	.word	0x40012c00
 800a4a8:	40021000 	.word	0x40021000

0800a4ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4bc:	d114      	bne.n	800a4e8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a4be:	4b22      	ldr	r3, [pc, #136]	@ (800a548 <HAL_TIM_Base_MspInit+0x9c>)
 800a4c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4c2:	4a21      	ldr	r2, [pc, #132]	@ (800a548 <HAL_TIM_Base_MspInit+0x9c>)
 800a4c4:	f043 0301 	orr.w	r3, r3, #1
 800a4c8:	6593      	str	r3, [r2, #88]	@ 0x58
 800a4ca:	4b1f      	ldr	r3, [pc, #124]	@ (800a548 <HAL_TIM_Base_MspInit+0x9c>)
 800a4cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4ce:	f003 0301 	and.w	r3, r3, #1
 800a4d2:	617b      	str	r3, [r7, #20]
 800a4d4:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	2100      	movs	r1, #0
 800a4da:	201c      	movs	r0, #28
 800a4dc:	f002 f931 	bl	800c742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a4e0:	201c      	movs	r0, #28
 800a4e2:	f002 f948 	bl	800c776 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800a4e6:	e02a      	b.n	800a53e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a17      	ldr	r2, [pc, #92]	@ (800a54c <HAL_TIM_Base_MspInit+0xa0>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d10c      	bne.n	800a50c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a4f2:	4b15      	ldr	r3, [pc, #84]	@ (800a548 <HAL_TIM_Base_MspInit+0x9c>)
 800a4f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4f6:	4a14      	ldr	r2, [pc, #80]	@ (800a548 <HAL_TIM_Base_MspInit+0x9c>)
 800a4f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a4fc:	6613      	str	r3, [r2, #96]	@ 0x60
 800a4fe:	4b12      	ldr	r3, [pc, #72]	@ (800a548 <HAL_TIM_Base_MspInit+0x9c>)
 800a500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a502:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a506:	613b      	str	r3, [r7, #16]
 800a508:	693b      	ldr	r3, [r7, #16]
}
 800a50a:	e018      	b.n	800a53e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a0f      	ldr	r2, [pc, #60]	@ (800a550 <HAL_TIM_Base_MspInit+0xa4>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d113      	bne.n	800a53e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800a516:	4b0c      	ldr	r3, [pc, #48]	@ (800a548 <HAL_TIM_Base_MspInit+0x9c>)
 800a518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a51a:	4a0b      	ldr	r2, [pc, #44]	@ (800a548 <HAL_TIM_Base_MspInit+0x9c>)
 800a51c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a520:	6613      	str	r3, [r2, #96]	@ 0x60
 800a522:	4b09      	ldr	r3, [pc, #36]	@ (800a548 <HAL_TIM_Base_MspInit+0x9c>)
 800a524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a52a:	60fb      	str	r3, [r7, #12]
 800a52c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800a52e:	2200      	movs	r2, #0
 800a530:	2100      	movs	r1, #0
 800a532:	2019      	movs	r0, #25
 800a534:	f002 f905 	bl	800c742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800a538:	2019      	movs	r0, #25
 800a53a:	f002 f91c 	bl	800c776 <HAL_NVIC_EnableIRQ>
}
 800a53e:	bf00      	nop
 800a540:	3718      	adds	r7, #24
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	40021000 	.word	0x40021000
 800a54c:	40013400 	.word	0x40013400
 800a550:	40014400 	.word	0x40014400

0800a554 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b08e      	sub	sp, #56	@ 0x38
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a55c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a560:	2200      	movs	r2, #0
 800a562:	601a      	str	r2, [r3, #0]
 800a564:	605a      	str	r2, [r3, #4]
 800a566:	609a      	str	r2, [r3, #8]
 800a568:	60da      	str	r2, [r3, #12]
 800a56a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a4f      	ldr	r2, [pc, #316]	@ (800a6b0 <HAL_TIM_Encoder_MspInit+0x15c>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d131      	bne.n	800a5da <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a576:	4b4f      	ldr	r3, [pc, #316]	@ (800a6b4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a57a:	4a4e      	ldr	r2, [pc, #312]	@ (800a6b4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a57c:	f043 0302 	orr.w	r3, r3, #2
 800a580:	6593      	str	r3, [r2, #88]	@ 0x58
 800a582:	4b4c      	ldr	r3, [pc, #304]	@ (800a6b4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a586:	f003 0302 	and.w	r3, r3, #2
 800a58a:	623b      	str	r3, [r7, #32]
 800a58c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a58e:	4b49      	ldr	r3, [pc, #292]	@ (800a6b4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a592:	4a48      	ldr	r2, [pc, #288]	@ (800a6b4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a594:	f043 0301 	orr.w	r3, r3, #1
 800a598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a59a:	4b46      	ldr	r3, [pc, #280]	@ (800a6b4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a59c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a59e:	f003 0301 	and.w	r3, r3, #1
 800a5a2:	61fb      	str	r3, [r7, #28]
 800a5a4:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a5a6:	23c0      	movs	r3, #192	@ 0xc0
 800a5a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5aa:	2302      	movs	r3, #2
 800a5ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a5b6:	2302      	movs	r3, #2
 800a5b8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5be:	4619      	mov	r1, r3
 800a5c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a5c4:	f002 fc24 	bl	800ce10 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	2100      	movs	r1, #0
 800a5cc:	201d      	movs	r0, #29
 800a5ce:	f002 f8b8 	bl	800c742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a5d2:	201d      	movs	r0, #29
 800a5d4:	f002 f8cf 	bl	800c776 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800a5d8:	e065      	b.n	800a6a6 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a36      	ldr	r2, [pc, #216]	@ (800a6b8 <HAL_TIM_Encoder_MspInit+0x164>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d132      	bne.n	800a64a <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a5e4:	4b33      	ldr	r3, [pc, #204]	@ (800a6b4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a5e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5e8:	4a32      	ldr	r2, [pc, #200]	@ (800a6b4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a5ea:	f043 0304 	orr.w	r3, r3, #4
 800a5ee:	6593      	str	r3, [r2, #88]	@ 0x58
 800a5f0:	4b30      	ldr	r3, [pc, #192]	@ (800a6b4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a5f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5f4:	f003 0304 	and.w	r3, r3, #4
 800a5f8:	61bb      	str	r3, [r7, #24]
 800a5fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5fc:	4b2d      	ldr	r3, [pc, #180]	@ (800a6b4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a5fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a600:	4a2c      	ldr	r2, [pc, #176]	@ (800a6b4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a602:	f043 0301 	orr.w	r3, r3, #1
 800a606:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a608:	4b2a      	ldr	r3, [pc, #168]	@ (800a6b4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a60a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a60c:	f003 0301 	and.w	r3, r3, #1
 800a610:	617b      	str	r3, [r7, #20]
 800a612:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a614:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a618:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a61a:	2302      	movs	r3, #2
 800a61c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a61e:	2300      	movs	r3, #0
 800a620:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a622:	2300      	movs	r3, #0
 800a624:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800a626:	230a      	movs	r3, #10
 800a628:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a62a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a62e:	4619      	mov	r1, r3
 800a630:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a634:	f002 fbec 	bl	800ce10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800a638:	2200      	movs	r2, #0
 800a63a:	2100      	movs	r1, #0
 800a63c:	201e      	movs	r0, #30
 800a63e:	f002 f880 	bl	800c742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800a642:	201e      	movs	r0, #30
 800a644:	f002 f897 	bl	800c776 <HAL_NVIC_EnableIRQ>
}
 800a648:	e02d      	b.n	800a6a6 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a1b      	ldr	r2, [pc, #108]	@ (800a6bc <HAL_TIM_Encoder_MspInit+0x168>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d128      	bne.n	800a6a6 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800a654:	4b17      	ldr	r3, [pc, #92]	@ (800a6b4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a658:	4a16      	ldr	r2, [pc, #88]	@ (800a6b4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a65a:	f043 0308 	orr.w	r3, r3, #8
 800a65e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a660:	4b14      	ldr	r3, [pc, #80]	@ (800a6b4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a664:	f003 0308 	and.w	r3, r3, #8
 800a668:	613b      	str	r3, [r7, #16]
 800a66a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a66c:	4b11      	ldr	r3, [pc, #68]	@ (800a6b4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a66e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a670:	4a10      	ldr	r2, [pc, #64]	@ (800a6b4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a672:	f043 0301 	orr.w	r3, r3, #1
 800a676:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a678:	4b0e      	ldr	r3, [pc, #56]	@ (800a6b4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a67a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a67c:	f003 0301 	and.w	r3, r3, #1
 800a680:	60fb      	str	r3, [r7, #12]
 800a682:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800a684:	2303      	movs	r3, #3
 800a686:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a688:	2302      	movs	r3, #2
 800a68a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a68c:	2300      	movs	r3, #0
 800a68e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a690:	2300      	movs	r3, #0
 800a692:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800a694:	2302      	movs	r3, #2
 800a696:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a698:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a69c:	4619      	mov	r1, r3
 800a69e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a6a2:	f002 fbb5 	bl	800ce10 <HAL_GPIO_Init>
}
 800a6a6:	bf00      	nop
 800a6a8:	3738      	adds	r7, #56	@ 0x38
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	40000400 	.word	0x40000400
 800a6b4:	40021000 	.word	0x40021000
 800a6b8:	40000800 	.word	0x40000800
 800a6bc:	40000c00 	.word	0x40000c00

0800a6c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b08a      	sub	sp, #40	@ 0x28
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6c8:	f107 0314 	add.w	r3, r7, #20
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	601a      	str	r2, [r3, #0]
 800a6d0:	605a      	str	r2, [r3, #4]
 800a6d2:	609a      	str	r2, [r3, #8]
 800a6d4:	60da      	str	r2, [r3, #12]
 800a6d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a22      	ldr	r2, [pc, #136]	@ (800a768 <HAL_TIM_MspPostInit+0xa8>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d11c      	bne.n	800a71c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a6e2:	4b22      	ldr	r3, [pc, #136]	@ (800a76c <HAL_TIM_MspPostInit+0xac>)
 800a6e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6e6:	4a21      	ldr	r2, [pc, #132]	@ (800a76c <HAL_TIM_MspPostInit+0xac>)
 800a6e8:	f043 0304 	orr.w	r3, r3, #4
 800a6ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a6ee:	4b1f      	ldr	r3, [pc, #124]	@ (800a76c <HAL_TIM_MspPostInit+0xac>)
 800a6f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6f2:	f003 0304 	and.w	r3, r3, #4
 800a6f6:	613b      	str	r3, [r7, #16]
 800a6f8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a6fa:	2308      	movs	r3, #8
 800a6fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6fe:	2302      	movs	r3, #2
 800a700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a702:	2300      	movs	r3, #0
 800a704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a706:	2300      	movs	r3, #0
 800a708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800a70a:	2302      	movs	r3, #2
 800a70c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a70e:	f107 0314 	add.w	r3, r7, #20
 800a712:	4619      	mov	r1, r3
 800a714:	4816      	ldr	r0, [pc, #88]	@ (800a770 <HAL_TIM_MspPostInit+0xb0>)
 800a716:	f002 fb7b 	bl	800ce10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800a71a:	e020      	b.n	800a75e <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a14      	ldr	r2, [pc, #80]	@ (800a774 <HAL_TIM_MspPostInit+0xb4>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d11b      	bne.n	800a75e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a726:	4b11      	ldr	r3, [pc, #68]	@ (800a76c <HAL_TIM_MspPostInit+0xac>)
 800a728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a72a:	4a10      	ldr	r2, [pc, #64]	@ (800a76c <HAL_TIM_MspPostInit+0xac>)
 800a72c:	f043 0304 	orr.w	r3, r3, #4
 800a730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a732:	4b0e      	ldr	r3, [pc, #56]	@ (800a76c <HAL_TIM_MspPostInit+0xac>)
 800a734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a736:	f003 0304 	and.w	r3, r3, #4
 800a73a:	60fb      	str	r3, [r7, #12]
 800a73c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a73e:	23c0      	movs	r3, #192	@ 0xc0
 800a740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a742:	2302      	movs	r3, #2
 800a744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a746:	2300      	movs	r3, #0
 800a748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a74a:	2300      	movs	r3, #0
 800a74c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800a74e:	2304      	movs	r3, #4
 800a750:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a752:	f107 0314 	add.w	r3, r7, #20
 800a756:	4619      	mov	r1, r3
 800a758:	4805      	ldr	r0, [pc, #20]	@ (800a770 <HAL_TIM_MspPostInit+0xb0>)
 800a75a:	f002 fb59 	bl	800ce10 <HAL_GPIO_Init>
}
 800a75e:	bf00      	nop
 800a760:	3728      	adds	r7, #40	@ 0x28
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	40012c00 	.word	0x40012c00
 800a76c:	40021000 	.word	0x40021000
 800a770:	48000800 	.word	0x48000800
 800a774:	40013400 	.word	0x40013400

0800a778 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800a77c:	4b20      	ldr	r3, [pc, #128]	@ (800a800 <MX_LPUART1_UART_Init+0x88>)
 800a77e:	4a21      	ldr	r2, [pc, #132]	@ (800a804 <MX_LPUART1_UART_Init+0x8c>)
 800a780:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 800a782:	4b1f      	ldr	r3, [pc, #124]	@ (800a800 <MX_LPUART1_UART_Init+0x88>)
 800a784:	4a20      	ldr	r2, [pc, #128]	@ (800a808 <MX_LPUART1_UART_Init+0x90>)
 800a786:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a788:	4b1d      	ldr	r3, [pc, #116]	@ (800a800 <MX_LPUART1_UART_Init+0x88>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800a78e:	4b1c      	ldr	r3, [pc, #112]	@ (800a800 <MX_LPUART1_UART_Init+0x88>)
 800a790:	2200      	movs	r2, #0
 800a792:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800a794:	4b1a      	ldr	r3, [pc, #104]	@ (800a800 <MX_LPUART1_UART_Init+0x88>)
 800a796:	2200      	movs	r2, #0
 800a798:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800a79a:	4b19      	ldr	r3, [pc, #100]	@ (800a800 <MX_LPUART1_UART_Init+0x88>)
 800a79c:	220c      	movs	r2, #12
 800a79e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a7a0:	4b17      	ldr	r3, [pc, #92]	@ (800a800 <MX_LPUART1_UART_Init+0x88>)
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a7a6:	4b16      	ldr	r3, [pc, #88]	@ (800a800 <MX_LPUART1_UART_Init+0x88>)
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a7ac:	4b14      	ldr	r3, [pc, #80]	@ (800a800 <MX_LPUART1_UART_Init+0x88>)
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a7b2:	4b13      	ldr	r3, [pc, #76]	@ (800a800 <MX_LPUART1_UART_Init+0x88>)
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800a7b8:	4811      	ldr	r0, [pc, #68]	@ (800a800 <MX_LPUART1_UART_Init+0x88>)
 800a7ba:	f005 fe25 	bl	8010408 <HAL_UART_Init>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d001      	beq.n	800a7c8 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800a7c4:	f7fe fccc 	bl	8009160 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	480d      	ldr	r0, [pc, #52]	@ (800a800 <MX_LPUART1_UART_Init+0x88>)
 800a7cc:	f007 fc61 	bl	8012092 <HAL_UARTEx_SetTxFifoThreshold>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d001      	beq.n	800a7da <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800a7d6:	f7fe fcc3 	bl	8009160 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a7da:	2100      	movs	r1, #0
 800a7dc:	4808      	ldr	r0, [pc, #32]	@ (800a800 <MX_LPUART1_UART_Init+0x88>)
 800a7de:	f007 fc96 	bl	801210e <HAL_UARTEx_SetRxFifoThreshold>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d001      	beq.n	800a7ec <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800a7e8:	f7fe fcba 	bl	8009160 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800a7ec:	4804      	ldr	r0, [pc, #16]	@ (800a800 <MX_LPUART1_UART_Init+0x88>)
 800a7ee:	f007 fc17 	bl	8012020 <HAL_UARTEx_DisableFifoMode>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d001      	beq.n	800a7fc <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800a7f8:	f7fe fcb2 	bl	8009160 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800a7fc:	bf00      	nop
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	20002404 	.word	0x20002404
 800a804:	40008000 	.word	0x40008000
 800a808:	001e8480 	.word	0x001e8480

0800a80c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a810:	4b23      	ldr	r3, [pc, #140]	@ (800a8a0 <MX_USART2_UART_Init+0x94>)
 800a812:	4a24      	ldr	r2, [pc, #144]	@ (800a8a4 <MX_USART2_UART_Init+0x98>)
 800a814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a816:	4b22      	ldr	r3, [pc, #136]	@ (800a8a0 <MX_USART2_UART_Init+0x94>)
 800a818:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a81c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800a81e:	4b20      	ldr	r3, [pc, #128]	@ (800a8a0 <MX_USART2_UART_Init+0x94>)
 800a820:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a824:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a826:	4b1e      	ldr	r3, [pc, #120]	@ (800a8a0 <MX_USART2_UART_Init+0x94>)
 800a828:	2200      	movs	r2, #0
 800a82a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800a82c:	4b1c      	ldr	r3, [pc, #112]	@ (800a8a0 <MX_USART2_UART_Init+0x94>)
 800a82e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a832:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a834:	4b1a      	ldr	r3, [pc, #104]	@ (800a8a0 <MX_USART2_UART_Init+0x94>)
 800a836:	220c      	movs	r2, #12
 800a838:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a83a:	4b19      	ldr	r3, [pc, #100]	@ (800a8a0 <MX_USART2_UART_Init+0x94>)
 800a83c:	2200      	movs	r2, #0
 800a83e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a840:	4b17      	ldr	r3, [pc, #92]	@ (800a8a0 <MX_USART2_UART_Init+0x94>)
 800a842:	2200      	movs	r2, #0
 800a844:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a846:	4b16      	ldr	r3, [pc, #88]	@ (800a8a0 <MX_USART2_UART_Init+0x94>)
 800a848:	2200      	movs	r2, #0
 800a84a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a84c:	4b14      	ldr	r3, [pc, #80]	@ (800a8a0 <MX_USART2_UART_Init+0x94>)
 800a84e:	2200      	movs	r2, #0
 800a850:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a852:	4b13      	ldr	r3, [pc, #76]	@ (800a8a0 <MX_USART2_UART_Init+0x94>)
 800a854:	2200      	movs	r2, #0
 800a856:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a858:	4811      	ldr	r0, [pc, #68]	@ (800a8a0 <MX_USART2_UART_Init+0x94>)
 800a85a:	f005 fdd5 	bl	8010408 <HAL_UART_Init>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d001      	beq.n	800a868 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800a864:	f7fe fc7c 	bl	8009160 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a868:	2100      	movs	r1, #0
 800a86a:	480d      	ldr	r0, [pc, #52]	@ (800a8a0 <MX_USART2_UART_Init+0x94>)
 800a86c:	f007 fc11 	bl	8012092 <HAL_UARTEx_SetTxFifoThreshold>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d001      	beq.n	800a87a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800a876:	f7fe fc73 	bl	8009160 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a87a:	2100      	movs	r1, #0
 800a87c:	4808      	ldr	r0, [pc, #32]	@ (800a8a0 <MX_USART2_UART_Init+0x94>)
 800a87e:	f007 fc46 	bl	801210e <HAL_UARTEx_SetRxFifoThreshold>
 800a882:	4603      	mov	r3, r0
 800a884:	2b00      	cmp	r3, #0
 800a886:	d001      	beq.n	800a88c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 800a888:	f7fe fc6a 	bl	8009160 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800a88c:	4804      	ldr	r0, [pc, #16]	@ (800a8a0 <MX_USART2_UART_Init+0x94>)
 800a88e:	f007 fbc7 	bl	8012020 <HAL_UARTEx_DisableFifoMode>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d001      	beq.n	800a89c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800a898:	f7fe fc62 	bl	8009160 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a89c:	bf00      	nop
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	200024d0 	.word	0x200024d0
 800a8a4:	40004400 	.word	0x40004400

0800a8a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b0a0      	sub	sp, #128	@ 0x80
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8b0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	601a      	str	r2, [r3, #0]
 800a8b8:	605a      	str	r2, [r3, #4]
 800a8ba:	609a      	str	r2, [r3, #8]
 800a8bc:	60da      	str	r2, [r3, #12]
 800a8be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a8c0:	f107 0318 	add.w	r3, r7, #24
 800a8c4:	2254      	movs	r2, #84	@ 0x54
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f008 fa59 	bl	8012d80 <memset>
  if(uartHandle->Instance==LPUART1)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a99      	ldr	r2, [pc, #612]	@ (800ab38 <HAL_UART_MspInit+0x290>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	f040 8093 	bne.w	800aa00 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800a8da:	2320      	movs	r3, #32
 800a8dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a8e2:	f107 0318 	add.w	r3, r7, #24
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f003 fa58 	bl	800dd9c <HAL_RCCEx_PeriphCLKConfig>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d001      	beq.n	800a8f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800a8f2:	f7fe fc35 	bl	8009160 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800a8f6:	4b91      	ldr	r3, [pc, #580]	@ (800ab3c <HAL_UART_MspInit+0x294>)
 800a8f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8fa:	4a90      	ldr	r2, [pc, #576]	@ (800ab3c <HAL_UART_MspInit+0x294>)
 800a8fc:	f043 0301 	orr.w	r3, r3, #1
 800a900:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800a902:	4b8e      	ldr	r3, [pc, #568]	@ (800ab3c <HAL_UART_MspInit+0x294>)
 800a904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a906:	f003 0301 	and.w	r3, r3, #1
 800a90a:	617b      	str	r3, [r7, #20]
 800a90c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a90e:	4b8b      	ldr	r3, [pc, #556]	@ (800ab3c <HAL_UART_MspInit+0x294>)
 800a910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a912:	4a8a      	ldr	r2, [pc, #552]	@ (800ab3c <HAL_UART_MspInit+0x294>)
 800a914:	f043 0302 	orr.w	r3, r3, #2
 800a918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a91a:	4b88      	ldr	r3, [pc, #544]	@ (800ab3c <HAL_UART_MspInit+0x294>)
 800a91c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a91e:	f003 0302 	and.w	r3, r3, #2
 800a922:	613b      	str	r3, [r7, #16]
 800a924:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a926:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a92a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a92c:	2302      	movs	r3, #2
 800a92e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a930:	2300      	movs	r3, #0
 800a932:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a934:	2300      	movs	r3, #0
 800a936:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800a938:	2308      	movs	r3, #8
 800a93a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a93c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a940:	4619      	mov	r1, r3
 800a942:	487f      	ldr	r0, [pc, #508]	@ (800ab40 <HAL_UART_MspInit+0x298>)
 800a944:	f002 fa64 	bl	800ce10 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 800a948:	4b7e      	ldr	r3, [pc, #504]	@ (800ab44 <HAL_UART_MspInit+0x29c>)
 800a94a:	4a7f      	ldr	r2, [pc, #508]	@ (800ab48 <HAL_UART_MspInit+0x2a0>)
 800a94c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800a94e:	4b7d      	ldr	r3, [pc, #500]	@ (800ab44 <HAL_UART_MspInit+0x29c>)
 800a950:	2222      	movs	r2, #34	@ 0x22
 800a952:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a954:	4b7b      	ldr	r3, [pc, #492]	@ (800ab44 <HAL_UART_MspInit+0x29c>)
 800a956:	2200      	movs	r2, #0
 800a958:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a95a:	4b7a      	ldr	r3, [pc, #488]	@ (800ab44 <HAL_UART_MspInit+0x29c>)
 800a95c:	2200      	movs	r2, #0
 800a95e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a960:	4b78      	ldr	r3, [pc, #480]	@ (800ab44 <HAL_UART_MspInit+0x29c>)
 800a962:	2280      	movs	r2, #128	@ 0x80
 800a964:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a966:	4b77      	ldr	r3, [pc, #476]	@ (800ab44 <HAL_UART_MspInit+0x29c>)
 800a968:	2200      	movs	r2, #0
 800a96a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a96c:	4b75      	ldr	r3, [pc, #468]	@ (800ab44 <HAL_UART_MspInit+0x29c>)
 800a96e:	2200      	movs	r2, #0
 800a970:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 800a972:	4b74      	ldr	r3, [pc, #464]	@ (800ab44 <HAL_UART_MspInit+0x29c>)
 800a974:	2200      	movs	r2, #0
 800a976:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a978:	4b72      	ldr	r3, [pc, #456]	@ (800ab44 <HAL_UART_MspInit+0x29c>)
 800a97a:	2200      	movs	r2, #0
 800a97c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800a97e:	4871      	ldr	r0, [pc, #452]	@ (800ab44 <HAL_UART_MspInit+0x29c>)
 800a980:	f001 ff14 	bl	800c7ac <HAL_DMA_Init>
 800a984:	4603      	mov	r3, r0
 800a986:	2b00      	cmp	r3, #0
 800a988:	d001      	beq.n	800a98e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800a98a:	f7fe fbe9 	bl	8009160 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	4a6c      	ldr	r2, [pc, #432]	@ (800ab44 <HAL_UART_MspInit+0x29c>)
 800a992:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800a996:	4a6b      	ldr	r2, [pc, #428]	@ (800ab44 <HAL_UART_MspInit+0x29c>)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 800a99c:	4b6b      	ldr	r3, [pc, #428]	@ (800ab4c <HAL_UART_MspInit+0x2a4>)
 800a99e:	4a6c      	ldr	r2, [pc, #432]	@ (800ab50 <HAL_UART_MspInit+0x2a8>)
 800a9a0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800a9a2:	4b6a      	ldr	r3, [pc, #424]	@ (800ab4c <HAL_UART_MspInit+0x2a4>)
 800a9a4:	2223      	movs	r2, #35	@ 0x23
 800a9a6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a9a8:	4b68      	ldr	r3, [pc, #416]	@ (800ab4c <HAL_UART_MspInit+0x2a4>)
 800a9aa:	2210      	movs	r2, #16
 800a9ac:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a9ae:	4b67      	ldr	r3, [pc, #412]	@ (800ab4c <HAL_UART_MspInit+0x2a4>)
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a9b4:	4b65      	ldr	r3, [pc, #404]	@ (800ab4c <HAL_UART_MspInit+0x2a4>)
 800a9b6:	2280      	movs	r2, #128	@ 0x80
 800a9b8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a9ba:	4b64      	ldr	r3, [pc, #400]	@ (800ab4c <HAL_UART_MspInit+0x2a4>)
 800a9bc:	2200      	movs	r2, #0
 800a9be:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a9c0:	4b62      	ldr	r3, [pc, #392]	@ (800ab4c <HAL_UART_MspInit+0x2a4>)
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800a9c6:	4b61      	ldr	r3, [pc, #388]	@ (800ab4c <HAL_UART_MspInit+0x2a4>)
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a9cc:	4b5f      	ldr	r3, [pc, #380]	@ (800ab4c <HAL_UART_MspInit+0x2a4>)
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800a9d2:	485e      	ldr	r0, [pc, #376]	@ (800ab4c <HAL_UART_MspInit+0x2a4>)
 800a9d4:	f001 feea 	bl	800c7ac <HAL_DMA_Init>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d001      	beq.n	800a9e2 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800a9de:	f7fe fbbf 	bl	8009160 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4a59      	ldr	r2, [pc, #356]	@ (800ab4c <HAL_UART_MspInit+0x2a4>)
 800a9e6:	67da      	str	r2, [r3, #124]	@ 0x7c
 800a9e8:	4a58      	ldr	r2, [pc, #352]	@ (800ab4c <HAL_UART_MspInit+0x2a4>)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	205b      	movs	r0, #91	@ 0x5b
 800a9f4:	f001 fea5 	bl	800c742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800a9f8:	205b      	movs	r0, #91	@ 0x5b
 800a9fa:	f001 febc 	bl	800c776 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800a9fe:	e097      	b.n	800ab30 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a53      	ldr	r2, [pc, #332]	@ (800ab54 <HAL_UART_MspInit+0x2ac>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	f040 8092 	bne.w	800ab30 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800aa0c:	2302      	movs	r3, #2
 800aa0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800aa10:	2300      	movs	r3, #0
 800aa12:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800aa14:	f107 0318 	add.w	r3, r7, #24
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f003 f9bf 	bl	800dd9c <HAL_RCCEx_PeriphCLKConfig>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d001      	beq.n	800aa28 <HAL_UART_MspInit+0x180>
      Error_Handler();
 800aa24:	f7fe fb9c 	bl	8009160 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800aa28:	4b44      	ldr	r3, [pc, #272]	@ (800ab3c <HAL_UART_MspInit+0x294>)
 800aa2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa2c:	4a43      	ldr	r2, [pc, #268]	@ (800ab3c <HAL_UART_MspInit+0x294>)
 800aa2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa32:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa34:	4b41      	ldr	r3, [pc, #260]	@ (800ab3c <HAL_UART_MspInit+0x294>)
 800aa36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa3c:	60fb      	str	r3, [r7, #12]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa40:	4b3e      	ldr	r3, [pc, #248]	@ (800ab3c <HAL_UART_MspInit+0x294>)
 800aa42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa44:	4a3d      	ldr	r2, [pc, #244]	@ (800ab3c <HAL_UART_MspInit+0x294>)
 800aa46:	f043 0301 	orr.w	r3, r3, #1
 800aa4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800aa4c:	4b3b      	ldr	r3, [pc, #236]	@ (800ab3c <HAL_UART_MspInit+0x294>)
 800aa4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa50:	f003 0301 	and.w	r3, r3, #1
 800aa54:	60bb      	str	r3, [r7, #8]
 800aa56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800aa58:	230c      	movs	r3, #12
 800aa5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa5c:	2302      	movs	r3, #2
 800aa5e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa60:	2300      	movs	r3, #0
 800aa62:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa64:	2300      	movs	r3, #0
 800aa66:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800aa68:	2307      	movs	r3, #7
 800aa6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa6c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800aa70:	4619      	mov	r1, r3
 800aa72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800aa76:	f002 f9cb 	bl	800ce10 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800aa7a:	4b37      	ldr	r3, [pc, #220]	@ (800ab58 <HAL_UART_MspInit+0x2b0>)
 800aa7c:	4a37      	ldr	r2, [pc, #220]	@ (800ab5c <HAL_UART_MspInit+0x2b4>)
 800aa7e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800aa80:	4b35      	ldr	r3, [pc, #212]	@ (800ab58 <HAL_UART_MspInit+0x2b0>)
 800aa82:	221a      	movs	r2, #26
 800aa84:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800aa86:	4b34      	ldr	r3, [pc, #208]	@ (800ab58 <HAL_UART_MspInit+0x2b0>)
 800aa88:	2200      	movs	r2, #0
 800aa8a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aa8c:	4b32      	ldr	r3, [pc, #200]	@ (800ab58 <HAL_UART_MspInit+0x2b0>)
 800aa8e:	2200      	movs	r2, #0
 800aa90:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800aa92:	4b31      	ldr	r3, [pc, #196]	@ (800ab58 <HAL_UART_MspInit+0x2b0>)
 800aa94:	2280      	movs	r2, #128	@ 0x80
 800aa96:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aa98:	4b2f      	ldr	r3, [pc, #188]	@ (800ab58 <HAL_UART_MspInit+0x2b0>)
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aa9e:	4b2e      	ldr	r3, [pc, #184]	@ (800ab58 <HAL_UART_MspInit+0x2b0>)
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800aaa4:	4b2c      	ldr	r3, [pc, #176]	@ (800ab58 <HAL_UART_MspInit+0x2b0>)
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800aaaa:	4b2b      	ldr	r3, [pc, #172]	@ (800ab58 <HAL_UART_MspInit+0x2b0>)
 800aaac:	2200      	movs	r2, #0
 800aaae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800aab0:	4829      	ldr	r0, [pc, #164]	@ (800ab58 <HAL_UART_MspInit+0x2b0>)
 800aab2:	f001 fe7b 	bl	800c7ac <HAL_DMA_Init>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d001      	beq.n	800aac0 <HAL_UART_MspInit+0x218>
      Error_Handler();
 800aabc:	f7fe fb50 	bl	8009160 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4a25      	ldr	r2, [pc, #148]	@ (800ab58 <HAL_UART_MspInit+0x2b0>)
 800aac4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800aac8:	4a23      	ldr	r2, [pc, #140]	@ (800ab58 <HAL_UART_MspInit+0x2b0>)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 800aace:	4b24      	ldr	r3, [pc, #144]	@ (800ab60 <HAL_UART_MspInit+0x2b8>)
 800aad0:	4a24      	ldr	r2, [pc, #144]	@ (800ab64 <HAL_UART_MspInit+0x2bc>)
 800aad2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800aad4:	4b22      	ldr	r3, [pc, #136]	@ (800ab60 <HAL_UART_MspInit+0x2b8>)
 800aad6:	221b      	movs	r2, #27
 800aad8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aada:	4b21      	ldr	r3, [pc, #132]	@ (800ab60 <HAL_UART_MspInit+0x2b8>)
 800aadc:	2210      	movs	r2, #16
 800aade:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aae0:	4b1f      	ldr	r3, [pc, #124]	@ (800ab60 <HAL_UART_MspInit+0x2b8>)
 800aae2:	2200      	movs	r2, #0
 800aae4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800aae6:	4b1e      	ldr	r3, [pc, #120]	@ (800ab60 <HAL_UART_MspInit+0x2b8>)
 800aae8:	2280      	movs	r2, #128	@ 0x80
 800aaea:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aaec:	4b1c      	ldr	r3, [pc, #112]	@ (800ab60 <HAL_UART_MspInit+0x2b8>)
 800aaee:	2200      	movs	r2, #0
 800aaf0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aaf2:	4b1b      	ldr	r3, [pc, #108]	@ (800ab60 <HAL_UART_MspInit+0x2b8>)
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800aaf8:	4b19      	ldr	r3, [pc, #100]	@ (800ab60 <HAL_UART_MspInit+0x2b8>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800aafe:	4b18      	ldr	r3, [pc, #96]	@ (800ab60 <HAL_UART_MspInit+0x2b8>)
 800ab00:	2200      	movs	r2, #0
 800ab02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800ab04:	4816      	ldr	r0, [pc, #88]	@ (800ab60 <HAL_UART_MspInit+0x2b8>)
 800ab06:	f001 fe51 	bl	800c7ac <HAL_DMA_Init>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d001      	beq.n	800ab14 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 800ab10:	f7fe fb26 	bl	8009160 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	4a12      	ldr	r2, [pc, #72]	@ (800ab60 <HAL_UART_MspInit+0x2b8>)
 800ab18:	67da      	str	r2, [r3, #124]	@ 0x7c
 800ab1a:	4a11      	ldr	r2, [pc, #68]	@ (800ab60 <HAL_UART_MspInit+0x2b8>)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800ab20:	2200      	movs	r2, #0
 800ab22:	2100      	movs	r1, #0
 800ab24:	2026      	movs	r0, #38	@ 0x26
 800ab26:	f001 fe0c 	bl	800c742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800ab2a:	2026      	movs	r0, #38	@ 0x26
 800ab2c:	f001 fe23 	bl	800c776 <HAL_NVIC_EnableIRQ>
}
 800ab30:	bf00      	nop
 800ab32:	3780      	adds	r7, #128	@ 0x80
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	40008000 	.word	0x40008000
 800ab3c:	40021000 	.word	0x40021000
 800ab40:	48000400 	.word	0x48000400
 800ab44:	2000259c 	.word	0x2000259c
 800ab48:	40020044 	.word	0x40020044
 800ab4c:	200025fc 	.word	0x200025fc
 800ab50:	40020058 	.word	0x40020058
 800ab54:	40004400 	.word	0x40004400
 800ab58:	2000265c 	.word	0x2000265c
 800ab5c:	4002001c 	.word	0x4002001c
 800ab60:	200026bc 	.word	0x200026bc
 800ab64:	40020030 	.word	0x40020030

0800ab68 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
	Reset_Handler:  ldr   r0, =_estack
 800ab68:	480d      	ldr	r0, [pc, #52]	@ (800aba0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800ab6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/

    bl  SystemInit
 800ab6c:	f7ff f994 	bl	8009e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ab70:	480c      	ldr	r0, [pc, #48]	@ (800aba4 <LoopForever+0x6>)
  ldr r1, =_edata
 800ab72:	490d      	ldr	r1, [pc, #52]	@ (800aba8 <LoopForever+0xa>)
  ldr r2, =_sidata
 800ab74:	4a0d      	ldr	r2, [pc, #52]	@ (800abac <LoopForever+0xe>)
  movs r3, #0
 800ab76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800ab78:	e002      	b.n	800ab80 <LoopCopyDataInit>

0800ab7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ab7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ab7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ab7e:	3304      	adds	r3, #4

0800ab80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ab80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ab82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ab84:	d3f9      	bcc.n	800ab7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ab86:	4a0a      	ldr	r2, [pc, #40]	@ (800abb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 800ab88:	4c0a      	ldr	r4, [pc, #40]	@ (800abb4 <LoopForever+0x16>)
  movs r3, #0
 800ab8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ab8c:	e001      	b.n	800ab92 <LoopFillZerobss>

0800ab8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ab8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ab90:	3204      	adds	r2, #4

0800ab92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ab92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ab94:	d3fb      	bcc.n	800ab8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800ab96:	f008 f911 	bl	8012dbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800ab9a:	f7fa fdbb 	bl	8005714 <main>

0800ab9e <LoopForever>:

LoopForever:
    b LoopForever
 800ab9e:	e7fe      	b.n	800ab9e <LoopForever>
	Reset_Handler:  ldr   r0, =_estack
 800aba0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800aba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800aba8:	20000610 	.word	0x20000610
  ldr r2, =_sidata
 800abac:	080152b0 	.word	0x080152b0
  ldr r2, =_sbss
 800abb0:	20000610 	.word	0x20000610
  ldr r4, =_ebss
 800abb4:	20002868 	.word	0x20002868

0800abb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800abb8:	e7fe      	b.n	800abb8 <ADC1_2_IRQHandler>

0800abba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b082      	sub	sp, #8
 800abbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800abc0:	2300      	movs	r3, #0
 800abc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800abc4:	2003      	movs	r0, #3
 800abc6:	f001 fdb1 	bl	800c72c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800abca:	2000      	movs	r0, #0
 800abcc:	f000 f80e 	bl	800abec <HAL_InitTick>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d002      	beq.n	800abdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800abd6:	2301      	movs	r3, #1
 800abd8:	71fb      	strb	r3, [r7, #7]
 800abda:	e001      	b.n	800abe0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800abdc:	f7ff f82c 	bl	8009c38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800abe0:	79fb      	ldrb	r3, [r7, #7]

}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3708      	adds	r7, #8
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
	...

0800abec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800abf4:	2300      	movs	r3, #0
 800abf6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800abf8:	4b16      	ldr	r3, [pc, #88]	@ (800ac54 <HAL_InitTick+0x68>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d022      	beq.n	800ac46 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800ac00:	4b15      	ldr	r3, [pc, #84]	@ (800ac58 <HAL_InitTick+0x6c>)
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	4b13      	ldr	r3, [pc, #76]	@ (800ac54 <HAL_InitTick+0x68>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ac0c:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac10:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac14:	4618      	mov	r0, r3
 800ac16:	f001 fdbc 	bl	800c792 <HAL_SYSTICK_Config>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d10f      	bne.n	800ac40 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2b0f      	cmp	r3, #15
 800ac24:	d809      	bhi.n	800ac3a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ac26:	2200      	movs	r2, #0
 800ac28:	6879      	ldr	r1, [r7, #4]
 800ac2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac2e:	f001 fd88 	bl	800c742 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800ac32:	4a0a      	ldr	r2, [pc, #40]	@ (800ac5c <HAL_InitTick+0x70>)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6013      	str	r3, [r2, #0]
 800ac38:	e007      	b.n	800ac4a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	73fb      	strb	r3, [r7, #15]
 800ac3e:	e004      	b.n	800ac4a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	73fb      	strb	r3, [r7, #15]
 800ac44:	e001      	b.n	800ac4a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800ac4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3710      	adds	r7, #16
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	200005bc 	.word	0x200005bc
 800ac58:	200005b4 	.word	0x200005b4
 800ac5c:	200005b8 	.word	0x200005b8

0800ac60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ac60:	b480      	push	{r7}
 800ac62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ac64:	4b05      	ldr	r3, [pc, #20]	@ (800ac7c <HAL_IncTick+0x1c>)
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	4b05      	ldr	r3, [pc, #20]	@ (800ac80 <HAL_IncTick+0x20>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	4a03      	ldr	r2, [pc, #12]	@ (800ac7c <HAL_IncTick+0x1c>)
 800ac70:	6013      	str	r3, [r2, #0]
}
 800ac72:	bf00      	nop
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr
 800ac7c:	2000271c 	.word	0x2000271c
 800ac80:	200005bc 	.word	0x200005bc

0800ac84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ac84:	b480      	push	{r7}
 800ac86:	af00      	add	r7, sp, #0
  return uwTick;
 800ac88:	4b03      	ldr	r3, [pc, #12]	@ (800ac98 <HAL_GetTick+0x14>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	2000271c 	.word	0x2000271c

0800ac9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	431a      	orrs	r2, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	609a      	str	r2, [r3, #8]
}
 800acb6:	bf00      	nop
 800acb8:	370c      	adds	r7, #12
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr

0800acc2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800acc2:	b480      	push	{r7}
 800acc4:	b083      	sub	sp, #12
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
 800acca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	431a      	orrs	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	609a      	str	r2, [r3, #8]
}
 800acdc:	bf00      	nop
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	370c      	adds	r7, #12
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b087      	sub	sp, #28
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	607a      	str	r2, [r7, #4]
 800ad10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	3360      	adds	r3, #96	@ 0x60
 800ad16:	461a      	mov	r2, r3
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	4413      	add	r3, r2
 800ad1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	4b08      	ldr	r3, [pc, #32]	@ (800ad48 <LL_ADC_SetOffset+0x44>)
 800ad26:	4013      	ands	r3, r2
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800ad2e:	683a      	ldr	r2, [r7, #0]
 800ad30:	430a      	orrs	r2, r1
 800ad32:	4313      	orrs	r3, r2
 800ad34:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800ad3c:	bf00      	nop
 800ad3e:	371c      	adds	r7, #28
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr
 800ad48:	03fff000 	.word	0x03fff000

0800ad4c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b085      	sub	sp, #20
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	3360      	adds	r3, #96	@ 0x60
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	4413      	add	r3, r2
 800ad62:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3714      	adds	r7, #20
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr

0800ad78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b087      	sub	sp, #28
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	3360      	adds	r3, #96	@ 0x60
 800ad88:	461a      	mov	r2, r3
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	4413      	add	r3, r2
 800ad90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	431a      	orrs	r2, r3
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800ada2:	bf00      	nop
 800ada4:	371c      	adds	r7, #28
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr

0800adae <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800adae:	b480      	push	{r7}
 800adb0:	b087      	sub	sp, #28
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	60f8      	str	r0, [r7, #12]
 800adb6:	60b9      	str	r1, [r7, #8]
 800adb8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	3360      	adds	r3, #96	@ 0x60
 800adbe:	461a      	mov	r2, r3
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	009b      	lsls	r3, r3, #2
 800adc4:	4413      	add	r3, r2
 800adc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	431a      	orrs	r2, r3
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800add8:	bf00      	nop
 800adda:	371c      	adds	r7, #28
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b087      	sub	sp, #28
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	3360      	adds	r3, #96	@ 0x60
 800adf4:	461a      	mov	r2, r3
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	4413      	add	r3, r2
 800adfc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	431a      	orrs	r2, r3
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800ae0e:	bf00      	nop
 800ae10:	371c      	adds	r7, #28
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr

0800ae1a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800ae1a:	b480      	push	{r7}
 800ae1c:	b083      	sub	sp, #12
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	695b      	ldr	r3, [r3, #20]
 800ae28:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	431a      	orrs	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	615a      	str	r2, [r3, #20]
}
 800ae34:	bf00      	nop
 800ae36:	370c      	adds	r7, #12
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr

0800ae40 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d101      	bne.n	800ae58 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800ae54:	2301      	movs	r3, #1
 800ae56:	e000      	b.n	800ae5a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	370c      	adds	r7, #12
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800ae66:	b480      	push	{r7}
 800ae68:	b087      	sub	sp, #28
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	60f8      	str	r0, [r7, #12]
 800ae6e:	60b9      	str	r1, [r7, #8]
 800ae70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	3330      	adds	r3, #48	@ 0x30
 800ae76:	461a      	mov	r2, r3
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	0a1b      	lsrs	r3, r3, #8
 800ae7c:	009b      	lsls	r3, r3, #2
 800ae7e:	f003 030c 	and.w	r3, r3, #12
 800ae82:	4413      	add	r3, r2
 800ae84:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	f003 031f 	and.w	r3, r3, #31
 800ae90:	211f      	movs	r1, #31
 800ae92:	fa01 f303 	lsl.w	r3, r1, r3
 800ae96:	43db      	mvns	r3, r3
 800ae98:	401a      	ands	r2, r3
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	0e9b      	lsrs	r3, r3, #26
 800ae9e:	f003 011f 	and.w	r1, r3, #31
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	f003 031f 	and.w	r3, r3, #31
 800aea8:	fa01 f303 	lsl.w	r3, r1, r3
 800aeac:	431a      	orrs	r2, r3
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800aeb2:	bf00      	nop
 800aeb4:	371c      	adds	r7, #28
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr

0800aebe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800aebe:	b480      	push	{r7}
 800aec0:	b087      	sub	sp, #28
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	60f8      	str	r0, [r7, #12]
 800aec6:	60b9      	str	r1, [r7, #8]
 800aec8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	3314      	adds	r3, #20
 800aece:	461a      	mov	r2, r3
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	0e5b      	lsrs	r3, r3, #25
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	f003 0304 	and.w	r3, r3, #4
 800aeda:	4413      	add	r3, r2
 800aedc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	0d1b      	lsrs	r3, r3, #20
 800aee6:	f003 031f 	and.w	r3, r3, #31
 800aeea:	2107      	movs	r1, #7
 800aeec:	fa01 f303 	lsl.w	r3, r1, r3
 800aef0:	43db      	mvns	r3, r3
 800aef2:	401a      	ands	r2, r3
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	0d1b      	lsrs	r3, r3, #20
 800aef8:	f003 031f 	and.w	r3, r3, #31
 800aefc:	6879      	ldr	r1, [r7, #4]
 800aefe:	fa01 f303 	lsl.w	r3, r1, r3
 800af02:	431a      	orrs	r2, r3
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800af08:	bf00      	nop
 800af0a:	371c      	adds	r7, #28
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800af14:	b480      	push	{r7}
 800af16:	b085      	sub	sp, #20
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af2c:	43db      	mvns	r3, r3
 800af2e:	401a      	ands	r2, r3
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f003 0318 	and.w	r3, r3, #24
 800af36:	4908      	ldr	r1, [pc, #32]	@ (800af58 <LL_ADC_SetChannelSingleDiff+0x44>)
 800af38:	40d9      	lsrs	r1, r3
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	400b      	ands	r3, r1
 800af3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af42:	431a      	orrs	r2, r3
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800af4a:	bf00      	nop
 800af4c:	3714      	adds	r7, #20
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	0007ffff 	.word	0x0007ffff

0800af5c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	f003 031f 	and.w	r3, r3, #31
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800af88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	6093      	str	r3, [r2, #8]
}
 800af90:	bf00      	nop
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800afac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afb0:	d101      	bne.n	800afb6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800afb2:	2301      	movs	r3, #1
 800afb4:	e000      	b.n	800afb8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800afb6:	2300      	movs	r3, #0
}
 800afb8:	4618      	mov	r0, r3
 800afba:	370c      	adds	r7, #12
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800afd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800afd8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800afe0:	bf00      	nop
 800afe2:	370c      	adds	r7, #12
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800affc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b000:	d101      	bne.n	800b006 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800b002:	2301      	movs	r3, #1
 800b004:	e000      	b.n	800b008 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b024:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b028:	f043 0201 	orr.w	r2, r3, #1
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800b030:	bf00      	nop
 800b032:	370c      	adds	r7, #12
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b04c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b050:	f043 0202 	orr.w	r2, r3, #2
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800b058:	bf00      	nop
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	f003 0301 	and.w	r3, r3, #1
 800b074:	2b01      	cmp	r3, #1
 800b076:	d101      	bne.n	800b07c <LL_ADC_IsEnabled+0x18>
 800b078:	2301      	movs	r3, #1
 800b07a:	e000      	b.n	800b07e <LL_ADC_IsEnabled+0x1a>
 800b07c:	2300      	movs	r3, #0
}
 800b07e:	4618      	mov	r0, r3
 800b080:	370c      	adds	r7, #12
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr

0800b08a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800b08a:	b480      	push	{r7}
 800b08c:	b083      	sub	sp, #12
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	f003 0302 	and.w	r3, r3, #2
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	d101      	bne.n	800b0a2 <LL_ADC_IsDisableOngoing+0x18>
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e000      	b.n	800b0a4 <LL_ADC_IsDisableOngoing+0x1a>
 800b0a2:	2300      	movs	r3, #0
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	370c      	adds	r7, #12
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	689b      	ldr	r3, [r3, #8]
 800b0bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b0c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b0c4:	f043 0204 	orr.w	r2, r3, #4
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800b0cc:	bf00      	nop
 800b0ce:	370c      	adds	r7, #12
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr

0800b0d8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b083      	sub	sp, #12
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	f003 0304 	and.w	r3, r3, #4
 800b0e8:	2b04      	cmp	r3, #4
 800b0ea:	d101      	bne.n	800b0f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	e000      	b.n	800b0f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b0f0:	2300      	movs	r3, #0
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	370c      	adds	r7, #12
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr

0800b0fe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b0fe:	b480      	push	{r7}
 800b100:	b083      	sub	sp, #12
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	f003 0308 	and.w	r3, r3, #8
 800b10e:	2b08      	cmp	r3, #8
 800b110:	d101      	bne.n	800b116 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800b112:	2301      	movs	r3, #1
 800b114:	e000      	b.n	800b118 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800b116:	2300      	movs	r3, #0
}
 800b118:	4618      	mov	r0, r3
 800b11a:	370c      	adds	r7, #12
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b124:	b590      	push	{r4, r7, lr}
 800b126:	b089      	sub	sp, #36	@ 0x24
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b12c:	2300      	movs	r3, #0
 800b12e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800b130:	2300      	movs	r3, #0
 800b132:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d101      	bne.n	800b13e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800b13a:	2301      	movs	r3, #1
 800b13c:	e1a9      	b.n	800b492 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	695b      	ldr	r3, [r3, #20]
 800b142:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d109      	bne.n	800b160 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f7f9 fded 	bl	8004d2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2200      	movs	r2, #0
 800b156:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4618      	mov	r0, r3
 800b166:	f7ff ff19 	bl	800af9c <LL_ADC_IsDeepPowerDownEnabled>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d004      	beq.n	800b17a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	4618      	mov	r0, r3
 800b176:	f7ff feff 	bl	800af78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4618      	mov	r0, r3
 800b180:	f7ff ff34 	bl	800afec <LL_ADC_IsInternalRegulatorEnabled>
 800b184:	4603      	mov	r3, r0
 800b186:	2b00      	cmp	r3, #0
 800b188:	d115      	bne.n	800b1b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4618      	mov	r0, r3
 800b190:	f7ff ff18 	bl	800afc4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b194:	4b9c      	ldr	r3, [pc, #624]	@ (800b408 <HAL_ADC_Init+0x2e4>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	099b      	lsrs	r3, r3, #6
 800b19a:	4a9c      	ldr	r2, [pc, #624]	@ (800b40c <HAL_ADC_Init+0x2e8>)
 800b19c:	fba2 2303 	umull	r2, r3, r2, r3
 800b1a0:	099b      	lsrs	r3, r3, #6
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	005b      	lsls	r3, r3, #1
 800b1a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b1a8:	e002      	b.n	800b1b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d1f9      	bne.n	800b1aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7ff ff16 	bl	800afec <LL_ADC_IsInternalRegulatorEnabled>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d10d      	bne.n	800b1e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1ca:	f043 0210 	orr.w	r2, r3, #16
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1d6:	f043 0201 	orr.w	r2, r3, #1
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7ff ff76 	bl	800b0d8 <LL_ADC_REG_IsConversionOngoing>
 800b1ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1f2:	f003 0310 	and.w	r3, r3, #16
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f040 8142 	bne.w	800b480 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	f040 813e 	bne.w	800b480 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b208:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800b20c:	f043 0202 	orr.w	r2, r3, #2
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4618      	mov	r0, r3
 800b21a:	f7ff ff23 	bl	800b064 <LL_ADC_IsEnabled>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	d141      	bne.n	800b2a8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b22c:	d004      	beq.n	800b238 <HAL_ADC_Init+0x114>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a77      	ldr	r2, [pc, #476]	@ (800b410 <HAL_ADC_Init+0x2ec>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d10f      	bne.n	800b258 <HAL_ADC_Init+0x134>
 800b238:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800b23c:	f7ff ff12 	bl	800b064 <LL_ADC_IsEnabled>
 800b240:	4604      	mov	r4, r0
 800b242:	4873      	ldr	r0, [pc, #460]	@ (800b410 <HAL_ADC_Init+0x2ec>)
 800b244:	f7ff ff0e 	bl	800b064 <LL_ADC_IsEnabled>
 800b248:	4603      	mov	r3, r0
 800b24a:	4323      	orrs	r3, r4
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	bf0c      	ite	eq
 800b250:	2301      	moveq	r3, #1
 800b252:	2300      	movne	r3, #0
 800b254:	b2db      	uxtb	r3, r3
 800b256:	e012      	b.n	800b27e <HAL_ADC_Init+0x15a>
 800b258:	486e      	ldr	r0, [pc, #440]	@ (800b414 <HAL_ADC_Init+0x2f0>)
 800b25a:	f7ff ff03 	bl	800b064 <LL_ADC_IsEnabled>
 800b25e:	4604      	mov	r4, r0
 800b260:	486d      	ldr	r0, [pc, #436]	@ (800b418 <HAL_ADC_Init+0x2f4>)
 800b262:	f7ff feff 	bl	800b064 <LL_ADC_IsEnabled>
 800b266:	4603      	mov	r3, r0
 800b268:	431c      	orrs	r4, r3
 800b26a:	486c      	ldr	r0, [pc, #432]	@ (800b41c <HAL_ADC_Init+0x2f8>)
 800b26c:	f7ff fefa 	bl	800b064 <LL_ADC_IsEnabled>
 800b270:	4603      	mov	r3, r0
 800b272:	4323      	orrs	r3, r4
 800b274:	2b00      	cmp	r3, #0
 800b276:	bf0c      	ite	eq
 800b278:	2301      	moveq	r3, #1
 800b27a:	2300      	movne	r3, #0
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d012      	beq.n	800b2a8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b28a:	d004      	beq.n	800b296 <HAL_ADC_Init+0x172>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a5f      	ldr	r2, [pc, #380]	@ (800b410 <HAL_ADC_Init+0x2ec>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d101      	bne.n	800b29a <HAL_ADC_Init+0x176>
 800b296:	4a62      	ldr	r2, [pc, #392]	@ (800b420 <HAL_ADC_Init+0x2fc>)
 800b298:	e000      	b.n	800b29c <HAL_ADC_Init+0x178>
 800b29a:	4a62      	ldr	r2, [pc, #392]	@ (800b424 <HAL_ADC_Init+0x300>)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	4610      	mov	r0, r2
 800b2a4:	f7ff fcfa 	bl	800ac9c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	7f5b      	ldrb	r3, [r3, #29]
 800b2ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b2b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800b2b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800b2be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b2c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d106      	bne.n	800b2e4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	045b      	lsls	r3, r3, #17
 800b2de:	69ba      	ldr	r2, [r7, #24]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d009      	beq.n	800b300 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2f0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b2fa:	69ba      	ldr	r2, [r7, #24]
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	68da      	ldr	r2, [r3, #12]
 800b306:	4b48      	ldr	r3, [pc, #288]	@ (800b428 <HAL_ADC_Init+0x304>)
 800b308:	4013      	ands	r3, r2
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	6812      	ldr	r2, [r2, #0]
 800b30e:	69b9      	ldr	r1, [r7, #24]
 800b310:	430b      	orrs	r3, r1
 800b312:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	691b      	ldr	r3, [r3, #16]
 800b31a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	430a      	orrs	r2, r1
 800b328:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4618      	mov	r0, r3
 800b330:	f7ff fee5 	bl	800b0fe <LL_ADC_INJ_IsConversionOngoing>
 800b334:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d17f      	bne.n	800b43c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d17c      	bne.n	800b43c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b346:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b34e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b350:	4313      	orrs	r3, r2
 800b352:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	68db      	ldr	r3, [r3, #12]
 800b35a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b35e:	f023 0302 	bic.w	r3, r3, #2
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	6812      	ldr	r2, [r2, #0]
 800b366:	69b9      	ldr	r1, [r7, #24]
 800b368:	430b      	orrs	r3, r1
 800b36a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	691b      	ldr	r3, [r3, #16]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d017      	beq.n	800b3a4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	691a      	ldr	r2, [r3, #16]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b382:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b38c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800b390:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	6911      	ldr	r1, [r2, #16]
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	6812      	ldr	r2, [r2, #0]
 800b39c:	430b      	orrs	r3, r1
 800b39e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800b3a2:	e013      	b.n	800b3cc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	691a      	ldr	r2, [r3, #16]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b3b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	6812      	ldr	r2, [r2, #0]
 800b3c0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800b3c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b3c8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d12a      	bne.n	800b42c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	691b      	ldr	r3, [r3, #16]
 800b3dc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b3e0:	f023 0304 	bic.w	r3, r3, #4
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b3ec:	4311      	orrs	r1, r2
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800b3f2:	4311      	orrs	r1, r2
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800b3f8:	430a      	orrs	r2, r1
 800b3fa:	431a      	orrs	r2, r3
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f042 0201 	orr.w	r2, r2, #1
 800b404:	611a      	str	r2, [r3, #16]
 800b406:	e019      	b.n	800b43c <HAL_ADC_Init+0x318>
 800b408:	200005b4 	.word	0x200005b4
 800b40c:	053e2d63 	.word	0x053e2d63
 800b410:	50000100 	.word	0x50000100
 800b414:	50000400 	.word	0x50000400
 800b418:	50000500 	.word	0x50000500
 800b41c:	50000600 	.word	0x50000600
 800b420:	50000300 	.word	0x50000300
 800b424:	50000700 	.word	0x50000700
 800b428:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	691a      	ldr	r2, [r3, #16]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f022 0201 	bic.w	r2, r2, #1
 800b43a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	695b      	ldr	r3, [r3, #20]
 800b440:	2b01      	cmp	r3, #1
 800b442:	d10c      	bne.n	800b45e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b44a:	f023 010f 	bic.w	r1, r3, #15
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a1b      	ldr	r3, [r3, #32]
 800b452:	1e5a      	subs	r2, r3, #1
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	430a      	orrs	r2, r1
 800b45a:	631a      	str	r2, [r3, #48]	@ 0x30
 800b45c:	e007      	b.n	800b46e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f022 020f 	bic.w	r2, r2, #15
 800b46c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b472:	f023 0303 	bic.w	r3, r3, #3
 800b476:	f043 0201 	orr.w	r2, r3, #1
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b47e:	e007      	b.n	800b490 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b484:	f043 0210 	orr.w	r2, r3, #16
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800b490:	7ffb      	ldrb	r3, [r7, #31]
}
 800b492:	4618      	mov	r0, r3
 800b494:	3724      	adds	r7, #36	@ 0x24
 800b496:	46bd      	mov	sp, r7
 800b498:	bd90      	pop	{r4, r7, pc}
 800b49a:	bf00      	nop

0800b49c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b086      	sub	sp, #24
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b4b0:	d004      	beq.n	800b4bc <HAL_ADC_Start_DMA+0x20>
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a5a      	ldr	r2, [pc, #360]	@ (800b620 <HAL_ADC_Start_DMA+0x184>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d101      	bne.n	800b4c0 <HAL_ADC_Start_DMA+0x24>
 800b4bc:	4b59      	ldr	r3, [pc, #356]	@ (800b624 <HAL_ADC_Start_DMA+0x188>)
 800b4be:	e000      	b.n	800b4c2 <HAL_ADC_Start_DMA+0x26>
 800b4c0:	4b59      	ldr	r3, [pc, #356]	@ (800b628 <HAL_ADC_Start_DMA+0x18c>)
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f7ff fd4a 	bl	800af5c <LL_ADC_GetMultimode>
 800b4c8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7ff fe02 	bl	800b0d8 <LL_ADC_REG_IsConversionOngoing>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	f040 809b 	bne.w	800b612 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d101      	bne.n	800b4ea <HAL_ADC_Start_DMA+0x4e>
 800b4e6:	2302      	movs	r3, #2
 800b4e8:	e096      	b.n	800b618 <HAL_ADC_Start_DMA+0x17c>
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a4d      	ldr	r2, [pc, #308]	@ (800b62c <HAL_ADC_Start_DMA+0x190>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d008      	beq.n	800b50e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d005      	beq.n	800b50e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	2b05      	cmp	r3, #5
 800b506:	d002      	beq.n	800b50e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	2b09      	cmp	r3, #9
 800b50c:	d17a      	bne.n	800b604 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800b50e:	68f8      	ldr	r0, [r7, #12]
 800b510:	f000 fcf6 	bl	800bf00 <ADC_Enable>
 800b514:	4603      	mov	r3, r0
 800b516:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800b518:	7dfb      	ldrb	r3, [r7, #23]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d16d      	bne.n	800b5fa <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b522:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b526:	f023 0301 	bic.w	r3, r3, #1
 800b52a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4a3a      	ldr	r2, [pc, #232]	@ (800b620 <HAL_ADC_Start_DMA+0x184>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d009      	beq.n	800b550 <HAL_ADC_Start_DMA+0xb4>
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a3b      	ldr	r2, [pc, #236]	@ (800b630 <HAL_ADC_Start_DMA+0x194>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d002      	beq.n	800b54c <HAL_ADC_Start_DMA+0xb0>
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	e003      	b.n	800b554 <HAL_ADC_Start_DMA+0xb8>
 800b54c:	4b39      	ldr	r3, [pc, #228]	@ (800b634 <HAL_ADC_Start_DMA+0x198>)
 800b54e:	e001      	b.n	800b554 <HAL_ADC_Start_DMA+0xb8>
 800b550:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	6812      	ldr	r2, [r2, #0]
 800b558:	4293      	cmp	r3, r2
 800b55a:	d002      	beq.n	800b562 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d105      	bne.n	800b56e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b566:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b572:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b576:	2b00      	cmp	r3, #0
 800b578:	d006      	beq.n	800b588 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b57e:	f023 0206 	bic.w	r2, r3, #6
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	661a      	str	r2, [r3, #96]	@ 0x60
 800b586:	e002      	b.n	800b58e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2200      	movs	r2, #0
 800b58c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b592:	4a29      	ldr	r2, [pc, #164]	@ (800b638 <HAL_ADC_Start_DMA+0x19c>)
 800b594:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b59a:	4a28      	ldr	r2, [pc, #160]	@ (800b63c <HAL_ADC_Start_DMA+0x1a0>)
 800b59c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5a2:	4a27      	ldr	r2, [pc, #156]	@ (800b640 <HAL_ADC_Start_DMA+0x1a4>)
 800b5a4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	221c      	movs	r2, #28
 800b5ac:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	685a      	ldr	r2, [r3, #4]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f042 0210 	orr.w	r2, r2, #16
 800b5c4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	68da      	ldr	r2, [r3, #12]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f042 0201 	orr.w	r2, r2, #1
 800b5d4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	3340      	adds	r3, #64	@ 0x40
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f001 f989 	bl	800c8fc <HAL_DMA_Start_IT>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7ff fd5c 	bl	800b0b0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800b5f8:	e00d      	b.n	800b616 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800b602:	e008      	b.n	800b616 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800b604:	2301      	movs	r3, #1
 800b606:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2200      	movs	r2, #0
 800b60c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800b610:	e001      	b.n	800b616 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800b612:	2302      	movs	r3, #2
 800b614:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800b616:	7dfb      	ldrb	r3, [r7, #23]
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3718      	adds	r7, #24
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	50000100 	.word	0x50000100
 800b624:	50000300 	.word	0x50000300
 800b628:	50000700 	.word	0x50000700
 800b62c:	50000600 	.word	0x50000600
 800b630:	50000500 	.word	0x50000500
 800b634:	50000400 	.word	0x50000400
 800b638:	0800c0eb 	.word	0x0800c0eb
 800b63c:	0800c1c3 	.word	0x0800c1c3
 800b640:	0800c1df 	.word	0x0800c1df

0800b644 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800b64c:	bf00      	nop
 800b64e:	370c      	adds	r7, #12
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr

0800b658 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800b660:	bf00      	nop
 800b662:	370c      	adds	r7, #12
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800b674:	bf00      	nop
 800b676:	370c      	adds	r7, #12
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b0b6      	sub	sp, #216	@ 0xd8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b68a:	2300      	movs	r3, #0
 800b68c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800b690:	2300      	movs	r3, #0
 800b692:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d102      	bne.n	800b6a4 <HAL_ADC_ConfigChannel+0x24>
 800b69e:	2302      	movs	r3, #2
 800b6a0:	f000 bc13 	b.w	800beca <HAL_ADC_ConfigChannel+0x84a>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7ff fd11 	bl	800b0d8 <LL_ADC_REG_IsConversionOngoing>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f040 83f3 	bne.w	800bea4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6818      	ldr	r0, [r3, #0]
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	6859      	ldr	r1, [r3, #4]
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	f7ff fbcb 	bl	800ae66 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7ff fcff 	bl	800b0d8 <LL_ADC_REG_IsConversionOngoing>
 800b6da:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7ff fd0b 	bl	800b0fe <LL_ADC_INJ_IsConversionOngoing>
 800b6e8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b6ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	f040 81d9 	bne.w	800baa8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b6f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	f040 81d4 	bne.w	800baa8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	689b      	ldr	r3, [r3, #8]
 800b704:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b708:	d10f      	bne.n	800b72a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6818      	ldr	r0, [r3, #0]
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2200      	movs	r2, #0
 800b714:	4619      	mov	r1, r3
 800b716:	f7ff fbd2 	bl	800aebe <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800b722:	4618      	mov	r0, r3
 800b724:	f7ff fb79 	bl	800ae1a <LL_ADC_SetSamplingTimeCommonConfig>
 800b728:	e00e      	b.n	800b748 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6818      	ldr	r0, [r3, #0]
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	6819      	ldr	r1, [r3, #0]
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	461a      	mov	r2, r3
 800b738:	f7ff fbc1 	bl	800aebe <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2100      	movs	r1, #0
 800b742:	4618      	mov	r0, r3
 800b744:	f7ff fb69 	bl	800ae1a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	695a      	ldr	r2, [r3, #20]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	68db      	ldr	r3, [r3, #12]
 800b752:	08db      	lsrs	r3, r3, #3
 800b754:	f003 0303 	and.w	r3, r3, #3
 800b758:	005b      	lsls	r3, r3, #1
 800b75a:	fa02 f303 	lsl.w	r3, r2, r3
 800b75e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	691b      	ldr	r3, [r3, #16]
 800b766:	2b04      	cmp	r3, #4
 800b768:	d022      	beq.n	800b7b0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6818      	ldr	r0, [r3, #0]
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	6919      	ldr	r1, [r3, #16]
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b77a:	f7ff fac3 	bl	800ad04 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6818      	ldr	r0, [r3, #0]
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	6919      	ldr	r1, [r3, #16]
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	699b      	ldr	r3, [r3, #24]
 800b78a:	461a      	mov	r2, r3
 800b78c:	f7ff fb0f 	bl	800adae <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6818      	ldr	r0, [r3, #0]
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d102      	bne.n	800b7a6 <HAL_ADC_ConfigChannel+0x126>
 800b7a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b7a4:	e000      	b.n	800b7a8 <HAL_ADC_ConfigChannel+0x128>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	f7ff fb1b 	bl	800ade4 <LL_ADC_SetOffsetSaturation>
 800b7ae:	e17b      	b.n	800baa8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2100      	movs	r1, #0
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7ff fac8 	bl	800ad4c <LL_ADC_GetOffsetChannel>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d10a      	bne.n	800b7dc <HAL_ADC_ConfigChannel+0x15c>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	2100      	movs	r1, #0
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7ff fabd 	bl	800ad4c <LL_ADC_GetOffsetChannel>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	0e9b      	lsrs	r3, r3, #26
 800b7d6:	f003 021f 	and.w	r2, r3, #31
 800b7da:	e01e      	b.n	800b81a <HAL_ADC_ConfigChannel+0x19a>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	2100      	movs	r1, #0
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7ff fab2 	bl	800ad4c <LL_ADC_GetOffsetChannel>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b7f2:	fa93 f3a3 	rbit	r3, r3
 800b7f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800b7fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b7fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800b802:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b806:	2b00      	cmp	r3, #0
 800b808:	d101      	bne.n	800b80e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800b80a:	2320      	movs	r3, #32
 800b80c:	e004      	b.n	800b818 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800b80e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b812:	fab3 f383 	clz	r3, r3
 800b816:	b2db      	uxtb	r3, r3
 800b818:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b822:	2b00      	cmp	r3, #0
 800b824:	d105      	bne.n	800b832 <HAL_ADC_ConfigChannel+0x1b2>
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	0e9b      	lsrs	r3, r3, #26
 800b82c:	f003 031f 	and.w	r3, r3, #31
 800b830:	e018      	b.n	800b864 <HAL_ADC_ConfigChannel+0x1e4>
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b83a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b83e:	fa93 f3a3 	rbit	r3, r3
 800b842:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800b846:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b84a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800b84e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b852:	2b00      	cmp	r3, #0
 800b854:	d101      	bne.n	800b85a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800b856:	2320      	movs	r3, #32
 800b858:	e004      	b.n	800b864 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800b85a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b85e:	fab3 f383 	clz	r3, r3
 800b862:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b864:	429a      	cmp	r2, r3
 800b866:	d106      	bne.n	800b876 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	2200      	movs	r2, #0
 800b86e:	2100      	movs	r1, #0
 800b870:	4618      	mov	r0, r3
 800b872:	f7ff fa81 	bl	800ad78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2101      	movs	r1, #1
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7ff fa65 	bl	800ad4c <LL_ADC_GetOffsetChannel>
 800b882:	4603      	mov	r3, r0
 800b884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d10a      	bne.n	800b8a2 <HAL_ADC_ConfigChannel+0x222>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2101      	movs	r1, #1
 800b892:	4618      	mov	r0, r3
 800b894:	f7ff fa5a 	bl	800ad4c <LL_ADC_GetOffsetChannel>
 800b898:	4603      	mov	r3, r0
 800b89a:	0e9b      	lsrs	r3, r3, #26
 800b89c:	f003 021f 	and.w	r2, r3, #31
 800b8a0:	e01e      	b.n	800b8e0 <HAL_ADC_ConfigChannel+0x260>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2101      	movs	r1, #1
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7ff fa4f 	bl	800ad4c <LL_ADC_GetOffsetChannel>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b8b8:	fa93 f3a3 	rbit	r3, r3
 800b8bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800b8c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b8c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800b8c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d101      	bne.n	800b8d4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800b8d0:	2320      	movs	r3, #32
 800b8d2:	e004      	b.n	800b8de <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800b8d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b8d8:	fab3 f383 	clz	r3, r3
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d105      	bne.n	800b8f8 <HAL_ADC_ConfigChannel+0x278>
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	0e9b      	lsrs	r3, r3, #26
 800b8f2:	f003 031f 	and.w	r3, r3, #31
 800b8f6:	e018      	b.n	800b92a <HAL_ADC_ConfigChannel+0x2aa>
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b900:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b904:	fa93 f3a3 	rbit	r3, r3
 800b908:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800b90c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b910:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800b914:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d101      	bne.n	800b920 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800b91c:	2320      	movs	r3, #32
 800b91e:	e004      	b.n	800b92a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800b920:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b924:	fab3 f383 	clz	r3, r3
 800b928:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d106      	bne.n	800b93c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2200      	movs	r2, #0
 800b934:	2101      	movs	r1, #1
 800b936:	4618      	mov	r0, r3
 800b938:	f7ff fa1e 	bl	800ad78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2102      	movs	r1, #2
 800b942:	4618      	mov	r0, r3
 800b944:	f7ff fa02 	bl	800ad4c <LL_ADC_GetOffsetChannel>
 800b948:	4603      	mov	r3, r0
 800b94a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d10a      	bne.n	800b968 <HAL_ADC_ConfigChannel+0x2e8>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2102      	movs	r1, #2
 800b958:	4618      	mov	r0, r3
 800b95a:	f7ff f9f7 	bl	800ad4c <LL_ADC_GetOffsetChannel>
 800b95e:	4603      	mov	r3, r0
 800b960:	0e9b      	lsrs	r3, r3, #26
 800b962:	f003 021f 	and.w	r2, r3, #31
 800b966:	e01e      	b.n	800b9a6 <HAL_ADC_ConfigChannel+0x326>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	2102      	movs	r1, #2
 800b96e:	4618      	mov	r0, r3
 800b970:	f7ff f9ec 	bl	800ad4c <LL_ADC_GetOffsetChannel>
 800b974:	4603      	mov	r3, r0
 800b976:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b97a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b97e:	fa93 f3a3 	rbit	r3, r3
 800b982:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800b986:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b98a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800b98e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b992:	2b00      	cmp	r3, #0
 800b994:	d101      	bne.n	800b99a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800b996:	2320      	movs	r3, #32
 800b998:	e004      	b.n	800b9a4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800b99a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b99e:	fab3 f383 	clz	r3, r3
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d105      	bne.n	800b9be <HAL_ADC_ConfigChannel+0x33e>
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	0e9b      	lsrs	r3, r3, #26
 800b9b8:	f003 031f 	and.w	r3, r3, #31
 800b9bc:	e016      	b.n	800b9ec <HAL_ADC_ConfigChannel+0x36c>
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b9c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b9ca:	fa93 f3a3 	rbit	r3, r3
 800b9ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800b9d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b9d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800b9d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d101      	bne.n	800b9e2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800b9de:	2320      	movs	r3, #32
 800b9e0:	e004      	b.n	800b9ec <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800b9e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b9e6:	fab3 f383 	clz	r3, r3
 800b9ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d106      	bne.n	800b9fe <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	2102      	movs	r1, #2
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7ff f9bd 	bl	800ad78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2103      	movs	r1, #3
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7ff f9a1 	bl	800ad4c <LL_ADC_GetOffsetChannel>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d10a      	bne.n	800ba2a <HAL_ADC_ConfigChannel+0x3aa>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2103      	movs	r1, #3
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7ff f996 	bl	800ad4c <LL_ADC_GetOffsetChannel>
 800ba20:	4603      	mov	r3, r0
 800ba22:	0e9b      	lsrs	r3, r3, #26
 800ba24:	f003 021f 	and.w	r2, r3, #31
 800ba28:	e017      	b.n	800ba5a <HAL_ADC_ConfigChannel+0x3da>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2103      	movs	r1, #3
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7ff f98b 	bl	800ad4c <LL_ADC_GetOffsetChannel>
 800ba36:	4603      	mov	r3, r0
 800ba38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba3c:	fa93 f3a3 	rbit	r3, r3
 800ba40:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800ba42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ba44:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800ba46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d101      	bne.n	800ba50 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800ba4c:	2320      	movs	r3, #32
 800ba4e:	e003      	b.n	800ba58 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800ba50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ba52:	fab3 f383 	clz	r3, r3
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d105      	bne.n	800ba72 <HAL_ADC_ConfigChannel+0x3f2>
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	0e9b      	lsrs	r3, r3, #26
 800ba6c:	f003 031f 	and.w	r3, r3, #31
 800ba70:	e011      	b.n	800ba96 <HAL_ADC_ConfigChannel+0x416>
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba7a:	fa93 f3a3 	rbit	r3, r3
 800ba7e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800ba80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba82:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800ba84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d101      	bne.n	800ba8e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800ba8a:	2320      	movs	r3, #32
 800ba8c:	e003      	b.n	800ba96 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800ba8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba90:	fab3 f383 	clz	r3, r3
 800ba94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d106      	bne.n	800baa8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	2103      	movs	r1, #3
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7ff f968 	bl	800ad78 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4618      	mov	r0, r3
 800baae:	f7ff fad9 	bl	800b064 <LL_ADC_IsEnabled>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	f040 813d 	bne.w	800bd34 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6818      	ldr	r0, [r3, #0]
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	6819      	ldr	r1, [r3, #0]
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	461a      	mov	r2, r3
 800bac8:	f7ff fa24 	bl	800af14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	4aa2      	ldr	r2, [pc, #648]	@ (800bd5c <HAL_ADC_ConfigChannel+0x6dc>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	f040 812e 	bne.w	800bd34 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d10b      	bne.n	800bb00 <HAL_ADC_ConfigChannel+0x480>
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	0e9b      	lsrs	r3, r3, #26
 800baee:	3301      	adds	r3, #1
 800baf0:	f003 031f 	and.w	r3, r3, #31
 800baf4:	2b09      	cmp	r3, #9
 800baf6:	bf94      	ite	ls
 800baf8:	2301      	movls	r3, #1
 800bafa:	2300      	movhi	r3, #0
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	e019      	b.n	800bb34 <HAL_ADC_ConfigChannel+0x4b4>
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb08:	fa93 f3a3 	rbit	r3, r3
 800bb0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800bb0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb10:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800bb12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d101      	bne.n	800bb1c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800bb18:	2320      	movs	r3, #32
 800bb1a:	e003      	b.n	800bb24 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800bb1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bb1e:	fab3 f383 	clz	r3, r3
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	3301      	adds	r3, #1
 800bb26:	f003 031f 	and.w	r3, r3, #31
 800bb2a:	2b09      	cmp	r3, #9
 800bb2c:	bf94      	ite	ls
 800bb2e:	2301      	movls	r3, #1
 800bb30:	2300      	movhi	r3, #0
 800bb32:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d079      	beq.n	800bc2c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d107      	bne.n	800bb54 <HAL_ADC_ConfigChannel+0x4d4>
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	0e9b      	lsrs	r3, r3, #26
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	069b      	lsls	r3, r3, #26
 800bb4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bb52:	e015      	b.n	800bb80 <HAL_ADC_ConfigChannel+0x500>
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb5c:	fa93 f3a3 	rbit	r3, r3
 800bb60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800bb62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb64:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800bb66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d101      	bne.n	800bb70 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800bb6c:	2320      	movs	r3, #32
 800bb6e:	e003      	b.n	800bb78 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800bb70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb72:	fab3 f383 	clz	r3, r3
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	3301      	adds	r3, #1
 800bb7a:	069b      	lsls	r3, r3, #26
 800bb7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d109      	bne.n	800bba0 <HAL_ADC_ConfigChannel+0x520>
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	0e9b      	lsrs	r3, r3, #26
 800bb92:	3301      	adds	r3, #1
 800bb94:	f003 031f 	and.w	r3, r3, #31
 800bb98:	2101      	movs	r1, #1
 800bb9a:	fa01 f303 	lsl.w	r3, r1, r3
 800bb9e:	e017      	b.n	800bbd0 <HAL_ADC_ConfigChannel+0x550>
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bba6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bba8:	fa93 f3a3 	rbit	r3, r3
 800bbac:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800bbae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800bbb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d101      	bne.n	800bbbc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800bbb8:	2320      	movs	r3, #32
 800bbba:	e003      	b.n	800bbc4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800bbbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbbe:	fab3 f383 	clz	r3, r3
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	f003 031f 	and.w	r3, r3, #31
 800bbca:	2101      	movs	r1, #1
 800bbcc:	fa01 f303 	lsl.w	r3, r1, r3
 800bbd0:	ea42 0103 	orr.w	r1, r2, r3
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d10a      	bne.n	800bbf6 <HAL_ADC_ConfigChannel+0x576>
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	0e9b      	lsrs	r3, r3, #26
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	f003 021f 	and.w	r2, r3, #31
 800bbec:	4613      	mov	r3, r2
 800bbee:	005b      	lsls	r3, r3, #1
 800bbf0:	4413      	add	r3, r2
 800bbf2:	051b      	lsls	r3, r3, #20
 800bbf4:	e018      	b.n	800bc28 <HAL_ADC_ConfigChannel+0x5a8>
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bbfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbfe:	fa93 f3a3 	rbit	r3, r3
 800bc02:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800bc04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800bc08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d101      	bne.n	800bc12 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800bc0e:	2320      	movs	r3, #32
 800bc10:	e003      	b.n	800bc1a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800bc12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc14:	fab3 f383 	clz	r3, r3
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	f003 021f 	and.w	r2, r3, #31
 800bc20:	4613      	mov	r3, r2
 800bc22:	005b      	lsls	r3, r3, #1
 800bc24:	4413      	add	r3, r2
 800bc26:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bc28:	430b      	orrs	r3, r1
 800bc2a:	e07e      	b.n	800bd2a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d107      	bne.n	800bc48 <HAL_ADC_ConfigChannel+0x5c8>
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	0e9b      	lsrs	r3, r3, #26
 800bc3e:	3301      	adds	r3, #1
 800bc40:	069b      	lsls	r3, r3, #26
 800bc42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bc46:	e015      	b.n	800bc74 <HAL_ADC_ConfigChannel+0x5f4>
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc50:	fa93 f3a3 	rbit	r3, r3
 800bc54:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800bc56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc58:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800bc5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d101      	bne.n	800bc64 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800bc60:	2320      	movs	r3, #32
 800bc62:	e003      	b.n	800bc6c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800bc64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc66:	fab3 f383 	clz	r3, r3
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	069b      	lsls	r3, r3, #26
 800bc70:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d109      	bne.n	800bc94 <HAL_ADC_ConfigChannel+0x614>
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	0e9b      	lsrs	r3, r3, #26
 800bc86:	3301      	adds	r3, #1
 800bc88:	f003 031f 	and.w	r3, r3, #31
 800bc8c:	2101      	movs	r1, #1
 800bc8e:	fa01 f303 	lsl.w	r3, r1, r3
 800bc92:	e017      	b.n	800bcc4 <HAL_ADC_ConfigChannel+0x644>
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc9a:	6a3b      	ldr	r3, [r7, #32]
 800bc9c:	fa93 f3a3 	rbit	r3, r3
 800bca0:	61fb      	str	r3, [r7, #28]
  return result;
 800bca2:	69fb      	ldr	r3, [r7, #28]
 800bca4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800bca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d101      	bne.n	800bcb0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800bcac:	2320      	movs	r3, #32
 800bcae:	e003      	b.n	800bcb8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800bcb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb2:	fab3 f383 	clz	r3, r3
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	3301      	adds	r3, #1
 800bcba:	f003 031f 	and.w	r3, r3, #31
 800bcbe:	2101      	movs	r1, #1
 800bcc0:	fa01 f303 	lsl.w	r3, r1, r3
 800bcc4:	ea42 0103 	orr.w	r1, r2, r3
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d10d      	bne.n	800bcf0 <HAL_ADC_ConfigChannel+0x670>
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	0e9b      	lsrs	r3, r3, #26
 800bcda:	3301      	adds	r3, #1
 800bcdc:	f003 021f 	and.w	r2, r3, #31
 800bce0:	4613      	mov	r3, r2
 800bce2:	005b      	lsls	r3, r3, #1
 800bce4:	4413      	add	r3, r2
 800bce6:	3b1e      	subs	r3, #30
 800bce8:	051b      	lsls	r3, r3, #20
 800bcea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bcee:	e01b      	b.n	800bd28 <HAL_ADC_ConfigChannel+0x6a8>
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	fa93 f3a3 	rbit	r3, r3
 800bcfc:	613b      	str	r3, [r7, #16]
  return result;
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d101      	bne.n	800bd0c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800bd08:	2320      	movs	r3, #32
 800bd0a:	e003      	b.n	800bd14 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	fab3 f383 	clz	r3, r3
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	3301      	adds	r3, #1
 800bd16:	f003 021f 	and.w	r2, r3, #31
 800bd1a:	4613      	mov	r3, r2
 800bd1c:	005b      	lsls	r3, r3, #1
 800bd1e:	4413      	add	r3, r2
 800bd20:	3b1e      	subs	r3, #30
 800bd22:	051b      	lsls	r3, r3, #20
 800bd24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bd28:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800bd2a:	683a      	ldr	r2, [r7, #0]
 800bd2c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bd2e:	4619      	mov	r1, r3
 800bd30:	f7ff f8c5 	bl	800aebe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	4b09      	ldr	r3, [pc, #36]	@ (800bd60 <HAL_ADC_ConfigChannel+0x6e0>)
 800bd3a:	4013      	ands	r3, r2
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	f000 80be 	beq.w	800bebe <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bd4a:	d004      	beq.n	800bd56 <HAL_ADC_ConfigChannel+0x6d6>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4a04      	ldr	r2, [pc, #16]	@ (800bd64 <HAL_ADC_ConfigChannel+0x6e4>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d10a      	bne.n	800bd6c <HAL_ADC_ConfigChannel+0x6ec>
 800bd56:	4b04      	ldr	r3, [pc, #16]	@ (800bd68 <HAL_ADC_ConfigChannel+0x6e8>)
 800bd58:	e009      	b.n	800bd6e <HAL_ADC_ConfigChannel+0x6ee>
 800bd5a:	bf00      	nop
 800bd5c:	407f0000 	.word	0x407f0000
 800bd60:	80080000 	.word	0x80080000
 800bd64:	50000100 	.word	0x50000100
 800bd68:	50000300 	.word	0x50000300
 800bd6c:	4b59      	ldr	r3, [pc, #356]	@ (800bed4 <HAL_ADC_ConfigChannel+0x854>)
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7fe ffba 	bl	800ace8 <LL_ADC_GetCommonPathInternalCh>
 800bd74:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4a56      	ldr	r2, [pc, #344]	@ (800bed8 <HAL_ADC_ConfigChannel+0x858>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d004      	beq.n	800bd8c <HAL_ADC_ConfigChannel+0x70c>
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4a55      	ldr	r2, [pc, #340]	@ (800bedc <HAL_ADC_ConfigChannel+0x85c>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d13a      	bne.n	800be02 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800bd8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bd90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d134      	bne.n	800be02 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bda0:	d005      	beq.n	800bdae <HAL_ADC_ConfigChannel+0x72e>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4a4e      	ldr	r2, [pc, #312]	@ (800bee0 <HAL_ADC_ConfigChannel+0x860>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	f040 8085 	bne.w	800beb8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bdb6:	d004      	beq.n	800bdc2 <HAL_ADC_ConfigChannel+0x742>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4a49      	ldr	r2, [pc, #292]	@ (800bee4 <HAL_ADC_ConfigChannel+0x864>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d101      	bne.n	800bdc6 <HAL_ADC_ConfigChannel+0x746>
 800bdc2:	4a49      	ldr	r2, [pc, #292]	@ (800bee8 <HAL_ADC_ConfigChannel+0x868>)
 800bdc4:	e000      	b.n	800bdc8 <HAL_ADC_ConfigChannel+0x748>
 800bdc6:	4a43      	ldr	r2, [pc, #268]	@ (800bed4 <HAL_ADC_ConfigChannel+0x854>)
 800bdc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bdcc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	4610      	mov	r0, r2
 800bdd4:	f7fe ff75 	bl	800acc2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800bdd8:	4b44      	ldr	r3, [pc, #272]	@ (800beec <HAL_ADC_ConfigChannel+0x86c>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	099b      	lsrs	r3, r3, #6
 800bdde:	4a44      	ldr	r2, [pc, #272]	@ (800bef0 <HAL_ADC_ConfigChannel+0x870>)
 800bde0:	fba2 2303 	umull	r2, r3, r2, r3
 800bde4:	099b      	lsrs	r3, r3, #6
 800bde6:	1c5a      	adds	r2, r3, #1
 800bde8:	4613      	mov	r3, r2
 800bdea:	005b      	lsls	r3, r3, #1
 800bdec:	4413      	add	r3, r2
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800bdf2:	e002      	b.n	800bdfa <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	3b01      	subs	r3, #1
 800bdf8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d1f9      	bne.n	800bdf4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800be00:	e05a      	b.n	800beb8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a3b      	ldr	r2, [pc, #236]	@ (800bef4 <HAL_ADC_ConfigChannel+0x874>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d125      	bne.n	800be58 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800be0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800be10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800be14:	2b00      	cmp	r3, #0
 800be16:	d11f      	bne.n	800be58 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4a31      	ldr	r2, [pc, #196]	@ (800bee4 <HAL_ADC_ConfigChannel+0x864>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d104      	bne.n	800be2c <HAL_ADC_ConfigChannel+0x7ac>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4a34      	ldr	r2, [pc, #208]	@ (800bef8 <HAL_ADC_ConfigChannel+0x878>)
 800be28:	4293      	cmp	r3, r2
 800be2a:	d047      	beq.n	800bebc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800be34:	d004      	beq.n	800be40 <HAL_ADC_ConfigChannel+0x7c0>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	4a2a      	ldr	r2, [pc, #168]	@ (800bee4 <HAL_ADC_ConfigChannel+0x864>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d101      	bne.n	800be44 <HAL_ADC_ConfigChannel+0x7c4>
 800be40:	4a29      	ldr	r2, [pc, #164]	@ (800bee8 <HAL_ADC_ConfigChannel+0x868>)
 800be42:	e000      	b.n	800be46 <HAL_ADC_ConfigChannel+0x7c6>
 800be44:	4a23      	ldr	r2, [pc, #140]	@ (800bed4 <HAL_ADC_ConfigChannel+0x854>)
 800be46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800be4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800be4e:	4619      	mov	r1, r3
 800be50:	4610      	mov	r0, r2
 800be52:	f7fe ff36 	bl	800acc2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800be56:	e031      	b.n	800bebc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a27      	ldr	r2, [pc, #156]	@ (800befc <HAL_ADC_ConfigChannel+0x87c>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d12d      	bne.n	800bebe <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800be62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800be66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d127      	bne.n	800bebe <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a1c      	ldr	r2, [pc, #112]	@ (800bee4 <HAL_ADC_ConfigChannel+0x864>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d022      	beq.n	800bebe <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800be80:	d004      	beq.n	800be8c <HAL_ADC_ConfigChannel+0x80c>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a17      	ldr	r2, [pc, #92]	@ (800bee4 <HAL_ADC_ConfigChannel+0x864>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d101      	bne.n	800be90 <HAL_ADC_ConfigChannel+0x810>
 800be8c:	4a16      	ldr	r2, [pc, #88]	@ (800bee8 <HAL_ADC_ConfigChannel+0x868>)
 800be8e:	e000      	b.n	800be92 <HAL_ADC_ConfigChannel+0x812>
 800be90:	4a10      	ldr	r2, [pc, #64]	@ (800bed4 <HAL_ADC_ConfigChannel+0x854>)
 800be92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800be96:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800be9a:	4619      	mov	r1, r3
 800be9c:	4610      	mov	r0, r2
 800be9e:	f7fe ff10 	bl	800acc2 <LL_ADC_SetCommonPathInternalCh>
 800bea2:	e00c      	b.n	800bebe <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bea8:	f043 0220 	orr.w	r2, r3, #32
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800beb0:	2301      	movs	r3, #1
 800beb2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800beb6:	e002      	b.n	800bebe <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800beb8:	bf00      	nop
 800beba:	e000      	b.n	800bebe <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800bebc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800bec6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800beca:	4618      	mov	r0, r3
 800becc:	37d8      	adds	r7, #216	@ 0xd8
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	50000700 	.word	0x50000700
 800bed8:	c3210000 	.word	0xc3210000
 800bedc:	90c00010 	.word	0x90c00010
 800bee0:	50000600 	.word	0x50000600
 800bee4:	50000100 	.word	0x50000100
 800bee8:	50000300 	.word	0x50000300
 800beec:	200005b4 	.word	0x200005b4
 800bef0:	053e2d63 	.word	0x053e2d63
 800bef4:	c7520000 	.word	0xc7520000
 800bef8:	50000500 	.word	0x50000500
 800befc:	cb840000 	.word	0xcb840000

0800bf00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7ff f8a7 	bl	800b064 <LL_ADC_IsEnabled>
 800bf16:	4603      	mov	r3, r0
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d176      	bne.n	800c00a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	689a      	ldr	r2, [r3, #8]
 800bf22:	4b3c      	ldr	r3, [pc, #240]	@ (800c014 <ADC_Enable+0x114>)
 800bf24:	4013      	ands	r3, r2
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00d      	beq.n	800bf46 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf2e:	f043 0210 	orr.w	r2, r3, #16
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bf3a:	f043 0201 	orr.w	r2, r3, #1
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800bf42:	2301      	movs	r3, #1
 800bf44:	e062      	b.n	800c00c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7ff f862 	bl	800b014 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf58:	d004      	beq.n	800bf64 <ADC_Enable+0x64>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a2e      	ldr	r2, [pc, #184]	@ (800c018 <ADC_Enable+0x118>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d101      	bne.n	800bf68 <ADC_Enable+0x68>
 800bf64:	4b2d      	ldr	r3, [pc, #180]	@ (800c01c <ADC_Enable+0x11c>)
 800bf66:	e000      	b.n	800bf6a <ADC_Enable+0x6a>
 800bf68:	4b2d      	ldr	r3, [pc, #180]	@ (800c020 <ADC_Enable+0x120>)
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7fe febc 	bl	800ace8 <LL_ADC_GetCommonPathInternalCh>
 800bf70:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800bf72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d013      	beq.n	800bfa2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800bf7a:	4b2a      	ldr	r3, [pc, #168]	@ (800c024 <ADC_Enable+0x124>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	099b      	lsrs	r3, r3, #6
 800bf80:	4a29      	ldr	r2, [pc, #164]	@ (800c028 <ADC_Enable+0x128>)
 800bf82:	fba2 2303 	umull	r2, r3, r2, r3
 800bf86:	099b      	lsrs	r3, r3, #6
 800bf88:	1c5a      	adds	r2, r3, #1
 800bf8a:	4613      	mov	r3, r2
 800bf8c:	005b      	lsls	r3, r3, #1
 800bf8e:	4413      	add	r3, r2
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800bf94:	e002      	b.n	800bf9c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	3b01      	subs	r3, #1
 800bf9a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1f9      	bne.n	800bf96 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800bfa2:	f7fe fe6f 	bl	800ac84 <HAL_GetTick>
 800bfa6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800bfa8:	e028      	b.n	800bffc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7ff f858 	bl	800b064 <LL_ADC_IsEnabled>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d104      	bne.n	800bfc4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7ff f828 	bl	800b014 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800bfc4:	f7fe fe5e 	bl	800ac84 <HAL_GetTick>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	1ad3      	subs	r3, r2, r3
 800bfce:	2b02      	cmp	r3, #2
 800bfd0:	d914      	bls.n	800bffc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f003 0301 	and.w	r3, r3, #1
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d00d      	beq.n	800bffc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfe4:	f043 0210 	orr.w	r2, r3, #16
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bff0:	f043 0201 	orr.w	r2, r3, #1
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800bff8:	2301      	movs	r3, #1
 800bffa:	e007      	b.n	800c00c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f003 0301 	and.w	r3, r3, #1
 800c006:	2b01      	cmp	r3, #1
 800c008:	d1cf      	bne.n	800bfaa <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c00a:	2300      	movs	r3, #0
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3710      	adds	r7, #16
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}
 800c014:	8000003f 	.word	0x8000003f
 800c018:	50000100 	.word	0x50000100
 800c01c:	50000300 	.word	0x50000300
 800c020:	50000700 	.word	0x50000700
 800c024:	200005b4 	.word	0x200005b4
 800c028:	053e2d63 	.word	0x053e2d63

0800c02c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4618      	mov	r0, r3
 800c03a:	f7ff f826 	bl	800b08a <LL_ADC_IsDisableOngoing>
 800c03e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	4618      	mov	r0, r3
 800c046:	f7ff f80d 	bl	800b064 <LL_ADC_IsEnabled>
 800c04a:	4603      	mov	r3, r0
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d047      	beq.n	800c0e0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d144      	bne.n	800c0e0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	f003 030d 	and.w	r3, r3, #13
 800c060:	2b01      	cmp	r3, #1
 800c062:	d10c      	bne.n	800c07e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4618      	mov	r0, r3
 800c06a:	f7fe ffe7 	bl	800b03c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	2203      	movs	r2, #3
 800c074:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800c076:	f7fe fe05 	bl	800ac84 <HAL_GetTick>
 800c07a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c07c:	e029      	b.n	800c0d2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c082:	f043 0210 	orr.w	r2, r3, #16
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c08e:	f043 0201 	orr.w	r2, r3, #1
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800c096:	2301      	movs	r3, #1
 800c098:	e023      	b.n	800c0e2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800c09a:	f7fe fdf3 	bl	800ac84 <HAL_GetTick>
 800c09e:	4602      	mov	r2, r0
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	1ad3      	subs	r3, r2, r3
 800c0a4:	2b02      	cmp	r3, #2
 800c0a6:	d914      	bls.n	800c0d2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	f003 0301 	and.w	r3, r3, #1
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00d      	beq.n	800c0d2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c0ba:	f043 0210 	orr.w	r2, r3, #16
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c0c6:	f043 0201 	orr.w	r2, r3, #1
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e007      	b.n	800c0e2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	689b      	ldr	r3, [r3, #8]
 800c0d8:	f003 0301 	and.w	r3, r3, #1
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d1dc      	bne.n	800c09a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c0e0:	2300      	movs	r3, #0
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3710      	adds	r7, #16
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}

0800c0ea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b084      	sub	sp, #16
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0f6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c0fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c100:	2b00      	cmp	r3, #0
 800c102:	d14b      	bne.n	800c19c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c108:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f003 0308 	and.w	r3, r3, #8
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d021      	beq.n	800c162 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4618      	mov	r0, r3
 800c124:	f7fe fe8c 	bl	800ae40 <LL_ADC_REG_IsTriggerSourceSWStart>
 800c128:	4603      	mov	r3, r0
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d032      	beq.n	800c194 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	68db      	ldr	r3, [r3, #12]
 800c134:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d12b      	bne.n	800c194 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c140:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c14c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c150:	2b00      	cmp	r3, #0
 800c152:	d11f      	bne.n	800c194 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c158:	f043 0201 	orr.w	r2, r3, #1
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c160:	e018      	b.n	800c194 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	f003 0302 	and.w	r3, r3, #2
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d111      	bne.n	800c194 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c174:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c180:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c184:	2b00      	cmp	r3, #0
 800c186:	d105      	bne.n	800c194 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c18c:	f043 0201 	orr.w	r2, r3, #1
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	f7ff fa55 	bl	800b644 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c19a:	e00e      	b.n	800c1ba <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1a0:	f003 0310 	and.w	r3, r3, #16
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d003      	beq.n	800c1b0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800c1a8:	68f8      	ldr	r0, [r7, #12]
 800c1aa:	f7ff fa5f 	bl	800b66c <HAL_ADC_ErrorCallback>
}
 800c1ae:	e004      	b.n	800c1ba <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	4798      	blx	r3
}
 800c1ba:	bf00      	nop
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b084      	sub	sp, #16
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1ce:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	f7ff fa41 	bl	800b658 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c1d6:	bf00      	nop
 800c1d8:	3710      	adds	r7, #16
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}

0800c1de <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	b084      	sub	sp, #16
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1ea:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c1fc:	f043 0204 	orr.w	r2, r3, #4
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c204:	68f8      	ldr	r0, [r7, #12]
 800c206:	f7ff fa31 	bl	800b66c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c20a:	bf00      	nop
 800c20c:	3710      	adds	r7, #16
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <LL_ADC_IsEnabled>:
{
 800c212:	b480      	push	{r7}
 800c214:	b083      	sub	sp, #12
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	f003 0301 	and.w	r3, r3, #1
 800c222:	2b01      	cmp	r3, #1
 800c224:	d101      	bne.n	800c22a <LL_ADC_IsEnabled+0x18>
 800c226:	2301      	movs	r3, #1
 800c228:	e000      	b.n	800c22c <LL_ADC_IsEnabled+0x1a>
 800c22a:	2300      	movs	r3, #0
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <LL_ADC_StartCalibration>:
{
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	689b      	ldr	r3, [r3, #8]
 800c246:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800c24a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c24e:	683a      	ldr	r2, [r7, #0]
 800c250:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800c254:	4313      	orrs	r3, r2
 800c256:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	609a      	str	r2, [r3, #8]
}
 800c25e:	bf00      	nop
 800c260:	370c      	adds	r7, #12
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr

0800c26a <LL_ADC_IsCalibrationOnGoing>:
{
 800c26a:	b480      	push	{r7}
 800c26c:	b083      	sub	sp, #12
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c27a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c27e:	d101      	bne.n	800c284 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800c280:	2301      	movs	r3, #1
 800c282:	e000      	b.n	800c286 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800c284:	2300      	movs	r3, #0
}
 800c286:	4618      	mov	r0, r3
 800c288:	370c      	adds	r7, #12
 800c28a:	46bd      	mov	sp, r7
 800c28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c290:	4770      	bx	lr

0800c292 <LL_ADC_REG_IsConversionOngoing>:
{
 800c292:	b480      	push	{r7}
 800c294:	b083      	sub	sp, #12
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	f003 0304 	and.w	r3, r3, #4
 800c2a2:	2b04      	cmp	r3, #4
 800c2a4:	d101      	bne.n	800c2aa <LL_ADC_REG_IsConversionOngoing+0x18>
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	e000      	b.n	800c2ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 800c2aa:	2300      	movs	r3, #0
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	370c      	adds	r7, #12
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d101      	bne.n	800c2d4 <HAL_ADCEx_Calibration_Start+0x1c>
 800c2d0:	2302      	movs	r3, #2
 800c2d2:	e04d      	b.n	800c370 <HAL_ADCEx_Calibration_Start+0xb8>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f7ff fea5 	bl	800c02c <ADC_Disable>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800c2e6:	7bfb      	ldrb	r3, [r7, #15]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d136      	bne.n	800c35a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2f0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800c2f4:	f023 0302 	bic.w	r3, r3, #2
 800c2f8:	f043 0202 	orr.w	r2, r3, #2
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	6839      	ldr	r1, [r7, #0]
 800c306:	4618      	mov	r0, r3
 800c308:	f7ff ff96 	bl	800c238 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800c30c:	e014      	b.n	800c338 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	3301      	adds	r3, #1
 800c312:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	4a18      	ldr	r2, [pc, #96]	@ (800c378 <HAL_ADCEx_Calibration_Start+0xc0>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d90d      	bls.n	800c338 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c320:	f023 0312 	bic.w	r3, r3, #18
 800c324:	f043 0210 	orr.w	r2, r3, #16
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2200      	movs	r2, #0
 800c330:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800c334:	2301      	movs	r3, #1
 800c336:	e01b      	b.n	800c370 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4618      	mov	r0, r3
 800c33e:	f7ff ff94 	bl	800c26a <LL_ADC_IsCalibrationOnGoing>
 800c342:	4603      	mov	r3, r0
 800c344:	2b00      	cmp	r3, #0
 800c346:	d1e2      	bne.n	800c30e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c34c:	f023 0303 	bic.w	r3, r3, #3
 800c350:	f043 0201 	orr.w	r2, r3, #1
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c358:	e005      	b.n	800c366 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c35e:	f043 0210 	orr.w	r2, r3, #16
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2200      	movs	r2, #0
 800c36a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800c36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c370:	4618      	mov	r0, r3
 800c372:	3710      	adds	r7, #16
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	0004de01 	.word	0x0004de01

0800c37c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800c37c:	b590      	push	{r4, r7, lr}
 800c37e:	b0a1      	sub	sp, #132	@ 0x84
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c386:	2300      	movs	r3, #0
 800c388:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c392:	2b01      	cmp	r3, #1
 800c394:	d101      	bne.n	800c39a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800c396:	2302      	movs	r3, #2
 800c398:	e0e7      	b.n	800c56a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2201      	movs	r2, #1
 800c39e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c3b2:	d102      	bne.n	800c3ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800c3b4:	4b6f      	ldr	r3, [pc, #444]	@ (800c574 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c3b6:	60bb      	str	r3, [r7, #8]
 800c3b8:	e009      	b.n	800c3ce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a6e      	ldr	r2, [pc, #440]	@ (800c578 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d102      	bne.n	800c3ca <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800c3c4:	4b6d      	ldr	r3, [pc, #436]	@ (800c57c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800c3c6:	60bb      	str	r3, [r7, #8]
 800c3c8:	e001      	b.n	800c3ce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d10b      	bne.n	800c3ec <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3d8:	f043 0220 	orr.w	r2, r3, #32
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	e0be      	b.n	800c56a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7ff ff4f 	bl	800c292 <LL_ADC_REG_IsConversionOngoing>
 800c3f4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7ff ff49 	bl	800c292 <LL_ADC_REG_IsConversionOngoing>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	f040 80a0 	bne.w	800c548 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800c408:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	f040 809c 	bne.w	800c548 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c418:	d004      	beq.n	800c424 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4a55      	ldr	r2, [pc, #340]	@ (800c574 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d101      	bne.n	800c428 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800c424:	4b56      	ldr	r3, [pc, #344]	@ (800c580 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800c426:	e000      	b.n	800c42a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800c428:	4b56      	ldr	r3, [pc, #344]	@ (800c584 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800c42a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d04b      	beq.n	800c4cc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800c434:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c436:	689b      	ldr	r3, [r3, #8]
 800c438:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	6859      	ldr	r1, [r3, #4]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c446:	035b      	lsls	r3, r3, #13
 800c448:	430b      	orrs	r3, r1
 800c44a:	431a      	orrs	r2, r3
 800c44c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c44e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c458:	d004      	beq.n	800c464 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4a45      	ldr	r2, [pc, #276]	@ (800c574 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d10f      	bne.n	800c484 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800c464:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800c468:	f7ff fed3 	bl	800c212 <LL_ADC_IsEnabled>
 800c46c:	4604      	mov	r4, r0
 800c46e:	4841      	ldr	r0, [pc, #260]	@ (800c574 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c470:	f7ff fecf 	bl	800c212 <LL_ADC_IsEnabled>
 800c474:	4603      	mov	r3, r0
 800c476:	4323      	orrs	r3, r4
 800c478:	2b00      	cmp	r3, #0
 800c47a:	bf0c      	ite	eq
 800c47c:	2301      	moveq	r3, #1
 800c47e:	2300      	movne	r3, #0
 800c480:	b2db      	uxtb	r3, r3
 800c482:	e012      	b.n	800c4aa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800c484:	483c      	ldr	r0, [pc, #240]	@ (800c578 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800c486:	f7ff fec4 	bl	800c212 <LL_ADC_IsEnabled>
 800c48a:	4604      	mov	r4, r0
 800c48c:	483b      	ldr	r0, [pc, #236]	@ (800c57c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800c48e:	f7ff fec0 	bl	800c212 <LL_ADC_IsEnabled>
 800c492:	4603      	mov	r3, r0
 800c494:	431c      	orrs	r4, r3
 800c496:	483c      	ldr	r0, [pc, #240]	@ (800c588 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800c498:	f7ff febb 	bl	800c212 <LL_ADC_IsEnabled>
 800c49c:	4603      	mov	r3, r0
 800c49e:	4323      	orrs	r3, r4
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	bf0c      	ite	eq
 800c4a4:	2301      	moveq	r3, #1
 800c4a6:	2300      	movne	r3, #0
 800c4a8:	b2db      	uxtb	r3, r3
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d056      	beq.n	800c55c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800c4ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c4b0:	689b      	ldr	r3, [r3, #8]
 800c4b2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c4b6:	f023 030f 	bic.w	r3, r3, #15
 800c4ba:	683a      	ldr	r2, [r7, #0]
 800c4bc:	6811      	ldr	r1, [r2, #0]
 800c4be:	683a      	ldr	r2, [r7, #0]
 800c4c0:	6892      	ldr	r2, [r2, #8]
 800c4c2:	430a      	orrs	r2, r1
 800c4c4:	431a      	orrs	r2, r3
 800c4c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c4c8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c4ca:	e047      	b.n	800c55c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800c4cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c4ce:	689b      	ldr	r3, [r3, #8]
 800c4d0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c4d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c4d6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c4e0:	d004      	beq.n	800c4ec <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4a23      	ldr	r2, [pc, #140]	@ (800c574 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d10f      	bne.n	800c50c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800c4ec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800c4f0:	f7ff fe8f 	bl	800c212 <LL_ADC_IsEnabled>
 800c4f4:	4604      	mov	r4, r0
 800c4f6:	481f      	ldr	r0, [pc, #124]	@ (800c574 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c4f8:	f7ff fe8b 	bl	800c212 <LL_ADC_IsEnabled>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	4323      	orrs	r3, r4
 800c500:	2b00      	cmp	r3, #0
 800c502:	bf0c      	ite	eq
 800c504:	2301      	moveq	r3, #1
 800c506:	2300      	movne	r3, #0
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	e012      	b.n	800c532 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800c50c:	481a      	ldr	r0, [pc, #104]	@ (800c578 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800c50e:	f7ff fe80 	bl	800c212 <LL_ADC_IsEnabled>
 800c512:	4604      	mov	r4, r0
 800c514:	4819      	ldr	r0, [pc, #100]	@ (800c57c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800c516:	f7ff fe7c 	bl	800c212 <LL_ADC_IsEnabled>
 800c51a:	4603      	mov	r3, r0
 800c51c:	431c      	orrs	r4, r3
 800c51e:	481a      	ldr	r0, [pc, #104]	@ (800c588 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800c520:	f7ff fe77 	bl	800c212 <LL_ADC_IsEnabled>
 800c524:	4603      	mov	r3, r0
 800c526:	4323      	orrs	r3, r4
 800c528:	2b00      	cmp	r3, #0
 800c52a:	bf0c      	ite	eq
 800c52c:	2301      	moveq	r3, #1
 800c52e:	2300      	movne	r3, #0
 800c530:	b2db      	uxtb	r3, r3
 800c532:	2b00      	cmp	r3, #0
 800c534:	d012      	beq.n	800c55c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800c536:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c53e:	f023 030f 	bic.w	r3, r3, #15
 800c542:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c544:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c546:	e009      	b.n	800c55c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c54c:	f043 0220 	orr.w	r2, r3, #32
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800c554:	2301      	movs	r3, #1
 800c556:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800c55a:	e000      	b.n	800c55e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c55c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2200      	movs	r2, #0
 800c562:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800c566:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3784      	adds	r7, #132	@ 0x84
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd90      	pop	{r4, r7, pc}
 800c572:	bf00      	nop
 800c574:	50000100 	.word	0x50000100
 800c578:	50000400 	.word	0x50000400
 800c57c:	50000500 	.word	0x50000500
 800c580:	50000300 	.word	0x50000300
 800c584:	50000700 	.word	0x50000700
 800c588:	50000600 	.word	0x50000600

0800c58c <__NVIC_SetPriorityGrouping>:
{
 800c58c:	b480      	push	{r7}
 800c58e:	b085      	sub	sp, #20
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f003 0307 	and.w	r3, r3, #7
 800c59a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c59c:	4b0c      	ldr	r3, [pc, #48]	@ (800c5d0 <__NVIC_SetPriorityGrouping+0x44>)
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c5a8:	4013      	ands	r3, r2
 800c5aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c5b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c5b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c5bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c5be:	4a04      	ldr	r2, [pc, #16]	@ (800c5d0 <__NVIC_SetPriorityGrouping+0x44>)
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	60d3      	str	r3, [r2, #12]
}
 800c5c4:	bf00      	nop
 800c5c6:	3714      	adds	r7, #20
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr
 800c5d0:	e000ed00 	.word	0xe000ed00

0800c5d4 <__NVIC_GetPriorityGrouping>:
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c5d8:	4b04      	ldr	r3, [pc, #16]	@ (800c5ec <__NVIC_GetPriorityGrouping+0x18>)
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	0a1b      	lsrs	r3, r3, #8
 800c5de:	f003 0307 	and.w	r3, r3, #7
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr
 800c5ec:	e000ed00 	.word	0xe000ed00

0800c5f0 <__NVIC_EnableIRQ>:
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b083      	sub	sp, #12
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c5fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	db0b      	blt.n	800c61a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c602:	79fb      	ldrb	r3, [r7, #7]
 800c604:	f003 021f 	and.w	r2, r3, #31
 800c608:	4907      	ldr	r1, [pc, #28]	@ (800c628 <__NVIC_EnableIRQ+0x38>)
 800c60a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c60e:	095b      	lsrs	r3, r3, #5
 800c610:	2001      	movs	r0, #1
 800c612:	fa00 f202 	lsl.w	r2, r0, r2
 800c616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c61a:	bf00      	nop
 800c61c:	370c      	adds	r7, #12
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	e000e100 	.word	0xe000e100

0800c62c <__NVIC_SetPriority>:
{
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
 800c632:	4603      	mov	r3, r0
 800c634:	6039      	str	r1, [r7, #0]
 800c636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	db0a      	blt.n	800c656 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	b2da      	uxtb	r2, r3
 800c644:	490c      	ldr	r1, [pc, #48]	@ (800c678 <__NVIC_SetPriority+0x4c>)
 800c646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c64a:	0112      	lsls	r2, r2, #4
 800c64c:	b2d2      	uxtb	r2, r2
 800c64e:	440b      	add	r3, r1
 800c650:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c654:	e00a      	b.n	800c66c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	b2da      	uxtb	r2, r3
 800c65a:	4908      	ldr	r1, [pc, #32]	@ (800c67c <__NVIC_SetPriority+0x50>)
 800c65c:	79fb      	ldrb	r3, [r7, #7]
 800c65e:	f003 030f 	and.w	r3, r3, #15
 800c662:	3b04      	subs	r3, #4
 800c664:	0112      	lsls	r2, r2, #4
 800c666:	b2d2      	uxtb	r2, r2
 800c668:	440b      	add	r3, r1
 800c66a:	761a      	strb	r2, [r3, #24]
}
 800c66c:	bf00      	nop
 800c66e:	370c      	adds	r7, #12
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr
 800c678:	e000e100 	.word	0xe000e100
 800c67c:	e000ed00 	.word	0xe000ed00

0800c680 <NVIC_EncodePriority>:
{
 800c680:	b480      	push	{r7}
 800c682:	b089      	sub	sp, #36	@ 0x24
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	60b9      	str	r1, [r7, #8]
 800c68a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f003 0307 	and.w	r3, r3, #7
 800c692:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	f1c3 0307 	rsb	r3, r3, #7
 800c69a:	2b04      	cmp	r3, #4
 800c69c:	bf28      	it	cs
 800c69e:	2304      	movcs	r3, #4
 800c6a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c6a2:	69fb      	ldr	r3, [r7, #28]
 800c6a4:	3304      	adds	r3, #4
 800c6a6:	2b06      	cmp	r3, #6
 800c6a8:	d902      	bls.n	800c6b0 <NVIC_EncodePriority+0x30>
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	3b03      	subs	r3, #3
 800c6ae:	e000      	b.n	800c6b2 <NVIC_EncodePriority+0x32>
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c6b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c6b8:	69bb      	ldr	r3, [r7, #24]
 800c6ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c6be:	43da      	mvns	r2, r3
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	401a      	ands	r2, r3
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c6c8:	f04f 31ff 	mov.w	r1, #4294967295
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	fa01 f303 	lsl.w	r3, r1, r3
 800c6d2:	43d9      	mvns	r1, r3
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c6d8:	4313      	orrs	r3, r2
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3724      	adds	r7, #36	@ 0x24
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr
	...

0800c6e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	3b01      	subs	r3, #1
 800c6f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c6f8:	d301      	bcc.n	800c6fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	e00f      	b.n	800c71e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c6fe:	4a0a      	ldr	r2, [pc, #40]	@ (800c728 <SysTick_Config+0x40>)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	3b01      	subs	r3, #1
 800c704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c706:	210f      	movs	r1, #15
 800c708:	f04f 30ff 	mov.w	r0, #4294967295
 800c70c:	f7ff ff8e 	bl	800c62c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c710:	4b05      	ldr	r3, [pc, #20]	@ (800c728 <SysTick_Config+0x40>)
 800c712:	2200      	movs	r2, #0
 800c714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c716:	4b04      	ldr	r3, [pc, #16]	@ (800c728 <SysTick_Config+0x40>)
 800c718:	2207      	movs	r2, #7
 800c71a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c71c:	2300      	movs	r3, #0
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3708      	adds	r7, #8
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	e000e010 	.word	0xe000e010

0800c72c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f7ff ff29 	bl	800c58c <__NVIC_SetPriorityGrouping>
}
 800c73a:	bf00      	nop
 800c73c:	3708      	adds	r7, #8
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}

0800c742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b086      	sub	sp, #24
 800c746:	af00      	add	r7, sp, #0
 800c748:	4603      	mov	r3, r0
 800c74a:	60b9      	str	r1, [r7, #8]
 800c74c:	607a      	str	r2, [r7, #4]
 800c74e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c750:	f7ff ff40 	bl	800c5d4 <__NVIC_GetPriorityGrouping>
 800c754:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	68b9      	ldr	r1, [r7, #8]
 800c75a:	6978      	ldr	r0, [r7, #20]
 800c75c:	f7ff ff90 	bl	800c680 <NVIC_EncodePriority>
 800c760:	4602      	mov	r2, r0
 800c762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c766:	4611      	mov	r1, r2
 800c768:	4618      	mov	r0, r3
 800c76a:	f7ff ff5f 	bl	800c62c <__NVIC_SetPriority>
}
 800c76e:	bf00      	nop
 800c770:	3718      	adds	r7, #24
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}

0800c776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c776:	b580      	push	{r7, lr}
 800c778:	b082      	sub	sp, #8
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	4603      	mov	r3, r0
 800c77e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c784:	4618      	mov	r0, r3
 800c786:	f7ff ff33 	bl	800c5f0 <__NVIC_EnableIRQ>
}
 800c78a:	bf00      	nop
 800c78c:	3708      	adds	r7, #8
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c792:	b580      	push	{r7, lr}
 800c794:	b082      	sub	sp, #8
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f7ff ffa4 	bl	800c6e8 <SysTick_Config>
 800c7a0:	4603      	mov	r3, r0
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3708      	adds	r7, #8
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
	...

0800c7ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b084      	sub	sp, #16
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d101      	bne.n	800c7be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	e08d      	b.n	800c8da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	4b47      	ldr	r3, [pc, #284]	@ (800c8e4 <HAL_DMA_Init+0x138>)
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d80f      	bhi.n	800c7ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	4b45      	ldr	r3, [pc, #276]	@ (800c8e8 <HAL_DMA_Init+0x13c>)
 800c7d2:	4413      	add	r3, r2
 800c7d4:	4a45      	ldr	r2, [pc, #276]	@ (800c8ec <HAL_DMA_Init+0x140>)
 800c7d6:	fba2 2303 	umull	r2, r3, r2, r3
 800c7da:	091b      	lsrs	r3, r3, #4
 800c7dc:	009a      	lsls	r2, r3, #2
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	4a42      	ldr	r2, [pc, #264]	@ (800c8f0 <HAL_DMA_Init+0x144>)
 800c7e6:	641a      	str	r2, [r3, #64]	@ 0x40
 800c7e8:	e00e      	b.n	800c808 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	4b40      	ldr	r3, [pc, #256]	@ (800c8f4 <HAL_DMA_Init+0x148>)
 800c7f2:	4413      	add	r3, r2
 800c7f4:	4a3d      	ldr	r2, [pc, #244]	@ (800c8ec <HAL_DMA_Init+0x140>)
 800c7f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c7fa:	091b      	lsrs	r3, r3, #4
 800c7fc:	009a      	lsls	r2, r3, #2
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	4a3c      	ldr	r2, [pc, #240]	@ (800c8f8 <HAL_DMA_Init+0x14c>)
 800c806:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2202      	movs	r2, #2
 800c80c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800c81e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c822:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800c82c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	691b      	ldr	r3, [r3, #16]
 800c832:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c838:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	699b      	ldr	r3, [r3, #24]
 800c83e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c844:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6a1b      	ldr	r3, [r3, #32]
 800c84a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	4313      	orrs	r3, r2
 800c850:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f000 fa76 	bl	800cd4c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c868:	d102      	bne.n	800c870 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2200      	movs	r2, #0
 800c86e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	685a      	ldr	r2, [r3, #4]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c878:	b2d2      	uxtb	r2, r2
 800c87a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c884:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d010      	beq.n	800c8b0 <HAL_DMA_Init+0x104>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	2b04      	cmp	r3, #4
 800c894:	d80c      	bhi.n	800c8b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 fa96 	bl	800cdc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c8ac:	605a      	str	r2, [r3, #4]
 800c8ae:	e008      	b.n	800c8c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c8d8:	2300      	movs	r3, #0
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3710      	adds	r7, #16
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	bf00      	nop
 800c8e4:	40020407 	.word	0x40020407
 800c8e8:	bffdfff8 	.word	0xbffdfff8
 800c8ec:	cccccccd 	.word	0xcccccccd
 800c8f0:	40020000 	.word	0x40020000
 800c8f4:	bffdfbf8 	.word	0xbffdfbf8
 800c8f8:	40020400 	.word	0x40020400

0800c8fc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b086      	sub	sp, #24
 800c900:	af00      	add	r7, sp, #0
 800c902:	60f8      	str	r0, [r7, #12]
 800c904:	60b9      	str	r1, [r7, #8]
 800c906:	607a      	str	r2, [r7, #4]
 800c908:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c90a:	2300      	movs	r3, #0
 800c90c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c914:	2b01      	cmp	r3, #1
 800c916:	d101      	bne.n	800c91c <HAL_DMA_Start_IT+0x20>
 800c918:	2302      	movs	r3, #2
 800c91a:	e066      	b.n	800c9ea <HAL_DMA_Start_IT+0xee>
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2201      	movs	r2, #1
 800c920:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c92a:	b2db      	uxtb	r3, r3
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d155      	bne.n	800c9dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2202      	movs	r2, #2
 800c934:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2200      	movs	r2, #0
 800c93c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	681a      	ldr	r2, [r3, #0]
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f022 0201 	bic.w	r2, r2, #1
 800c94c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	68b9      	ldr	r1, [r7, #8]
 800c954:	68f8      	ldr	r0, [r7, #12]
 800c956:	f000 f9bb 	bl	800ccd0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d008      	beq.n	800c974 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f042 020e 	orr.w	r2, r2, #14
 800c970:	601a      	str	r2, [r3, #0]
 800c972:	e00f      	b.n	800c994 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f022 0204 	bic.w	r2, r2, #4
 800c982:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f042 020a 	orr.w	r2, r2, #10
 800c992:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d007      	beq.n	800c9b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c9a6:	681a      	ldr	r2, [r3, #0]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c9ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c9b0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d007      	beq.n	800c9ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9be:	681a      	ldr	r2, [r3, #0]
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c9c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f042 0201 	orr.w	r2, r2, #1
 800c9d8:	601a      	str	r2, [r3, #0]
 800c9da:	e005      	b.n	800c9e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800c9e4:	2302      	movs	r3, #2
 800c9e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800c9e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3718      	adds	r7, #24
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}

0800c9f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c9f2:	b480      	push	{r7}
 800c9f4:	b085      	sub	sp, #20
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ca04:	b2db      	uxtb	r3, r3
 800ca06:	2b02      	cmp	r3, #2
 800ca08:	d005      	beq.n	800ca16 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2204      	movs	r2, #4
 800ca0e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800ca10:	2301      	movs	r3, #1
 800ca12:	73fb      	strb	r3, [r7, #15]
 800ca14:	e037      	b.n	800ca86 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	681a      	ldr	r2, [r3, #0]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f022 020e 	bic.w	r2, r2, #14
 800ca24:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ca30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ca34:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	681a      	ldr	r2, [r3, #0]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f022 0201 	bic.w	r2, r2, #1
 800ca44:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca4a:	f003 021f 	and.w	r2, r3, #31
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca52:	2101      	movs	r1, #1
 800ca54:	fa01 f202 	lsl.w	r2, r1, r2
 800ca58:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ca62:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d00c      	beq.n	800ca86 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca70:	681a      	ldr	r2, [r3, #0]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca76:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ca7a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800ca84:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2201      	movs	r2, #1
 800ca8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2200      	movs	r2, #0
 800ca92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800ca96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3714      	adds	r7, #20
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800caac:	2300      	movs	r3, #0
 800caae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800cab6:	b2db      	uxtb	r3, r3
 800cab8:	2b02      	cmp	r3, #2
 800caba:	d00d      	beq.n	800cad8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2204      	movs	r2, #4
 800cac0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2201      	movs	r2, #1
 800cac6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800cad2:	2301      	movs	r3, #1
 800cad4:	73fb      	strb	r3, [r7, #15]
 800cad6:	e047      	b.n	800cb68 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	681a      	ldr	r2, [r3, #0]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f022 020e 	bic.w	r2, r2, #14
 800cae6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f022 0201 	bic.w	r2, r2, #1
 800caf6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cb06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb0c:	f003 021f 	and.w	r2, r3, #31
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb14:	2101      	movs	r1, #1
 800cb16:	fa01 f202 	lsl.w	r2, r1, r2
 800cb1a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800cb24:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d00c      	beq.n	800cb48 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb32:	681a      	ldr	r2, [r3, #0]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cb3c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800cb46:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2200      	movs	r2, #0
 800cb54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d003      	beq.n	800cb68 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	4798      	blx	r3
    }
  }
  return status;
 800cb68:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3710      	adds	r7, #16
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}

0800cb72 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800cb72:	b580      	push	{r7, lr}
 800cb74:	b084      	sub	sp, #16
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb8e:	f003 031f 	and.w	r3, r3, #31
 800cb92:	2204      	movs	r2, #4
 800cb94:	409a      	lsls	r2, r3
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	4013      	ands	r3, r2
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d026      	beq.n	800cbec <HAL_DMA_IRQHandler+0x7a>
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	f003 0304 	and.w	r3, r3, #4
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d021      	beq.n	800cbec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f003 0320 	and.w	r3, r3, #32
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d107      	bne.n	800cbc6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	681a      	ldr	r2, [r3, #0]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f022 0204 	bic.w	r2, r2, #4
 800cbc4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbca:	f003 021f 	and.w	r2, r3, #31
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbd2:	2104      	movs	r1, #4
 800cbd4:	fa01 f202 	lsl.w	r2, r1, r2
 800cbd8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d071      	beq.n	800ccc6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800cbea:	e06c      	b.n	800ccc6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbf0:	f003 031f 	and.w	r3, r3, #31
 800cbf4:	2202      	movs	r2, #2
 800cbf6:	409a      	lsls	r2, r3
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	4013      	ands	r3, r2
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d02e      	beq.n	800cc5e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	f003 0302 	and.w	r3, r3, #2
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d029      	beq.n	800cc5e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f003 0320 	and.w	r3, r3, #32
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d10b      	bne.n	800cc30 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	681a      	ldr	r2, [r3, #0]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f022 020a 	bic.w	r2, r2, #10
 800cc26:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc34:	f003 021f 	and.w	r2, r3, #31
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc3c:	2102      	movs	r1, #2
 800cc3e:	fa01 f202 	lsl.w	r2, r1, r2
 800cc42:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d038      	beq.n	800ccc6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800cc5c:	e033      	b.n	800ccc6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc62:	f003 031f 	and.w	r3, r3, #31
 800cc66:	2208      	movs	r2, #8
 800cc68:	409a      	lsls	r2, r3
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	4013      	ands	r3, r2
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d02a      	beq.n	800ccc8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	f003 0308 	and.w	r3, r3, #8
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d025      	beq.n	800ccc8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	681a      	ldr	r2, [r3, #0]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f022 020e 	bic.w	r2, r2, #14
 800cc8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc90:	f003 021f 	and.w	r2, r3, #31
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc98:	2101      	movs	r1, #1
 800cc9a:	fa01 f202 	lsl.w	r2, r1, r2
 800cc9e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2201      	movs	r2, #1
 800cca4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2201      	movs	r2, #1
 800ccaa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d004      	beq.n	800ccc8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800ccc6:	bf00      	nop
 800ccc8:	bf00      	nop
}
 800ccca:	3710      	adds	r7, #16
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b085      	sub	sp, #20
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	607a      	str	r2, [r7, #4]
 800ccdc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cce2:	68fa      	ldr	r2, [r7, #12]
 800cce4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800cce6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d004      	beq.n	800ccfa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ccf4:	68fa      	ldr	r2, [r7, #12]
 800ccf6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800ccf8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccfe:	f003 021f 	and.w	r2, r3, #31
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd06:	2101      	movs	r1, #1
 800cd08:	fa01 f202 	lsl.w	r2, r1, r2
 800cd0c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	683a      	ldr	r2, [r7, #0]
 800cd14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	689b      	ldr	r3, [r3, #8]
 800cd1a:	2b10      	cmp	r3, #16
 800cd1c:	d108      	bne.n	800cd30 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	68ba      	ldr	r2, [r7, #8]
 800cd2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800cd2e:	e007      	b.n	800cd40 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	68ba      	ldr	r2, [r7, #8]
 800cd36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	60da      	str	r2, [r3, #12]
}
 800cd40:	bf00      	nop
 800cd42:	3714      	adds	r7, #20
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b087      	sub	sp, #28
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	461a      	mov	r2, r3
 800cd5a:	4b16      	ldr	r3, [pc, #88]	@ (800cdb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d802      	bhi.n	800cd66 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800cd60:	4b15      	ldr	r3, [pc, #84]	@ (800cdb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800cd62:	617b      	str	r3, [r7, #20]
 800cd64:	e001      	b.n	800cd6a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800cd66:	4b15      	ldr	r3, [pc, #84]	@ (800cdbc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800cd68:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	3b08      	subs	r3, #8
 800cd76:	4a12      	ldr	r2, [pc, #72]	@ (800cdc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800cd78:	fba2 2303 	umull	r2, r3, r2, r3
 800cd7c:	091b      	lsrs	r3, r3, #4
 800cd7e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd84:	089b      	lsrs	r3, r3, #2
 800cd86:	009a      	lsls	r2, r3, #2
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	4413      	add	r3, r2
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	4a0b      	ldr	r2, [pc, #44]	@ (800cdc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800cd96:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f003 031f 	and.w	r3, r3, #31
 800cd9e:	2201      	movs	r2, #1
 800cda0:	409a      	lsls	r2, r3
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800cda6:	bf00      	nop
 800cda8:	371c      	adds	r7, #28
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop
 800cdb4:	40020407 	.word	0x40020407
 800cdb8:	40020800 	.word	0x40020800
 800cdbc:	40020820 	.word	0x40020820
 800cdc0:	cccccccd 	.word	0xcccccccd
 800cdc4:	40020880 	.word	0x40020880

0800cdc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b085      	sub	sp, #20
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	b2db      	uxtb	r3, r3
 800cdd6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	4b0b      	ldr	r3, [pc, #44]	@ (800ce08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800cddc:	4413      	add	r3, r2
 800cdde:	009b      	lsls	r3, r3, #2
 800cde0:	461a      	mov	r2, r3
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	4a08      	ldr	r2, [pc, #32]	@ (800ce0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800cdea:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	3b01      	subs	r3, #1
 800cdf0:	f003 031f 	and.w	r3, r3, #31
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	409a      	lsls	r2, r3
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800cdfc:	bf00      	nop
 800cdfe:	3714      	adds	r7, #20
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr
 800ce08:	1000823f 	.word	0x1000823f
 800ce0c:	40020940 	.word	0x40020940

0800ce10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b087      	sub	sp, #28
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800ce1e:	e15a      	b.n	800d0d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	681a      	ldr	r2, [r3, #0]
 800ce24:	2101      	movs	r1, #1
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	fa01 f303 	lsl.w	r3, r1, r3
 800ce2c:	4013      	ands	r3, r2
 800ce2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	f000 814c 	beq.w	800d0d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	685b      	ldr	r3, [r3, #4]
 800ce3c:	f003 0303 	and.w	r3, r3, #3
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	d005      	beq.n	800ce50 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800ce4c:	2b02      	cmp	r3, #2
 800ce4e:	d130      	bne.n	800ceb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	689b      	ldr	r3, [r3, #8]
 800ce54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	005b      	lsls	r3, r3, #1
 800ce5a:	2203      	movs	r2, #3
 800ce5c:	fa02 f303 	lsl.w	r3, r2, r3
 800ce60:	43db      	mvns	r3, r3
 800ce62:	693a      	ldr	r2, [r7, #16]
 800ce64:	4013      	ands	r3, r2
 800ce66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	68da      	ldr	r2, [r3, #12]
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	005b      	lsls	r3, r3, #1
 800ce70:	fa02 f303 	lsl.w	r3, r2, r3
 800ce74:	693a      	ldr	r2, [r7, #16]
 800ce76:	4313      	orrs	r3, r2
 800ce78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	693a      	ldr	r2, [r7, #16]
 800ce7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ce86:	2201      	movs	r2, #1
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ce8e:	43db      	mvns	r3, r3
 800ce90:	693a      	ldr	r2, [r7, #16]
 800ce92:	4013      	ands	r3, r2
 800ce94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	091b      	lsrs	r3, r3, #4
 800ce9c:	f003 0201 	and.w	r2, r3, #1
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	fa02 f303 	lsl.w	r3, r2, r3
 800cea6:	693a      	ldr	r2, [r7, #16]
 800cea8:	4313      	orrs	r3, r2
 800ceaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	693a      	ldr	r2, [r7, #16]
 800ceb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	685b      	ldr	r3, [r3, #4]
 800ceb6:	f003 0303 	and.w	r3, r3, #3
 800ceba:	2b03      	cmp	r3, #3
 800cebc:	d017      	beq.n	800ceee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	68db      	ldr	r3, [r3, #12]
 800cec2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	005b      	lsls	r3, r3, #1
 800cec8:	2203      	movs	r2, #3
 800ceca:	fa02 f303 	lsl.w	r3, r2, r3
 800cece:	43db      	mvns	r3, r3
 800ced0:	693a      	ldr	r2, [r7, #16]
 800ced2:	4013      	ands	r3, r2
 800ced4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	689a      	ldr	r2, [r3, #8]
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	005b      	lsls	r3, r3, #1
 800cede:	fa02 f303 	lsl.w	r3, r2, r3
 800cee2:	693a      	ldr	r2, [r7, #16]
 800cee4:	4313      	orrs	r3, r2
 800cee6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	693a      	ldr	r2, [r7, #16]
 800ceec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	f003 0303 	and.w	r3, r3, #3
 800cef6:	2b02      	cmp	r3, #2
 800cef8:	d123      	bne.n	800cf42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	08da      	lsrs	r2, r3, #3
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	3208      	adds	r2, #8
 800cf02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	f003 0307 	and.w	r3, r3, #7
 800cf0e:	009b      	lsls	r3, r3, #2
 800cf10:	220f      	movs	r2, #15
 800cf12:	fa02 f303 	lsl.w	r3, r2, r3
 800cf16:	43db      	mvns	r3, r3
 800cf18:	693a      	ldr	r2, [r7, #16]
 800cf1a:	4013      	ands	r3, r2
 800cf1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	691a      	ldr	r2, [r3, #16]
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	f003 0307 	and.w	r3, r3, #7
 800cf28:	009b      	lsls	r3, r3, #2
 800cf2a:	fa02 f303 	lsl.w	r3, r2, r3
 800cf2e:	693a      	ldr	r2, [r7, #16]
 800cf30:	4313      	orrs	r3, r2
 800cf32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	08da      	lsrs	r2, r3, #3
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	3208      	adds	r2, #8
 800cf3c:	6939      	ldr	r1, [r7, #16]
 800cf3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	005b      	lsls	r3, r3, #1
 800cf4c:	2203      	movs	r2, #3
 800cf4e:	fa02 f303 	lsl.w	r3, r2, r3
 800cf52:	43db      	mvns	r3, r3
 800cf54:	693a      	ldr	r2, [r7, #16]
 800cf56:	4013      	ands	r3, r2
 800cf58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	f003 0203 	and.w	r2, r3, #3
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	005b      	lsls	r3, r3, #1
 800cf66:	fa02 f303 	lsl.w	r3, r2, r3
 800cf6a:	693a      	ldr	r2, [r7, #16]
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	693a      	ldr	r2, [r7, #16]
 800cf74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	685b      	ldr	r3, [r3, #4]
 800cf7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	f000 80a6 	beq.w	800d0d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cf84:	4b5b      	ldr	r3, [pc, #364]	@ (800d0f4 <HAL_GPIO_Init+0x2e4>)
 800cf86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf88:	4a5a      	ldr	r2, [pc, #360]	@ (800d0f4 <HAL_GPIO_Init+0x2e4>)
 800cf8a:	f043 0301 	orr.w	r3, r3, #1
 800cf8e:	6613      	str	r3, [r2, #96]	@ 0x60
 800cf90:	4b58      	ldr	r3, [pc, #352]	@ (800d0f4 <HAL_GPIO_Init+0x2e4>)
 800cf92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf94:	f003 0301 	and.w	r3, r3, #1
 800cf98:	60bb      	str	r3, [r7, #8]
 800cf9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cf9c:	4a56      	ldr	r2, [pc, #344]	@ (800d0f8 <HAL_GPIO_Init+0x2e8>)
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	089b      	lsrs	r3, r3, #2
 800cfa2:	3302      	adds	r3, #2
 800cfa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	f003 0303 	and.w	r3, r3, #3
 800cfb0:	009b      	lsls	r3, r3, #2
 800cfb2:	220f      	movs	r2, #15
 800cfb4:	fa02 f303 	lsl.w	r3, r2, r3
 800cfb8:	43db      	mvns	r3, r3
 800cfba:	693a      	ldr	r2, [r7, #16]
 800cfbc:	4013      	ands	r3, r2
 800cfbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800cfc6:	d01f      	beq.n	800d008 <HAL_GPIO_Init+0x1f8>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	4a4c      	ldr	r2, [pc, #304]	@ (800d0fc <HAL_GPIO_Init+0x2ec>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d019      	beq.n	800d004 <HAL_GPIO_Init+0x1f4>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	4a4b      	ldr	r2, [pc, #300]	@ (800d100 <HAL_GPIO_Init+0x2f0>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d013      	beq.n	800d000 <HAL_GPIO_Init+0x1f0>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	4a4a      	ldr	r2, [pc, #296]	@ (800d104 <HAL_GPIO_Init+0x2f4>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d00d      	beq.n	800cffc <HAL_GPIO_Init+0x1ec>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	4a49      	ldr	r2, [pc, #292]	@ (800d108 <HAL_GPIO_Init+0x2f8>)
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d007      	beq.n	800cff8 <HAL_GPIO_Init+0x1e8>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	4a48      	ldr	r2, [pc, #288]	@ (800d10c <HAL_GPIO_Init+0x2fc>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d101      	bne.n	800cff4 <HAL_GPIO_Init+0x1e4>
 800cff0:	2305      	movs	r3, #5
 800cff2:	e00a      	b.n	800d00a <HAL_GPIO_Init+0x1fa>
 800cff4:	2306      	movs	r3, #6
 800cff6:	e008      	b.n	800d00a <HAL_GPIO_Init+0x1fa>
 800cff8:	2304      	movs	r3, #4
 800cffa:	e006      	b.n	800d00a <HAL_GPIO_Init+0x1fa>
 800cffc:	2303      	movs	r3, #3
 800cffe:	e004      	b.n	800d00a <HAL_GPIO_Init+0x1fa>
 800d000:	2302      	movs	r3, #2
 800d002:	e002      	b.n	800d00a <HAL_GPIO_Init+0x1fa>
 800d004:	2301      	movs	r3, #1
 800d006:	e000      	b.n	800d00a <HAL_GPIO_Init+0x1fa>
 800d008:	2300      	movs	r3, #0
 800d00a:	697a      	ldr	r2, [r7, #20]
 800d00c:	f002 0203 	and.w	r2, r2, #3
 800d010:	0092      	lsls	r2, r2, #2
 800d012:	4093      	lsls	r3, r2
 800d014:	693a      	ldr	r2, [r7, #16]
 800d016:	4313      	orrs	r3, r2
 800d018:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d01a:	4937      	ldr	r1, [pc, #220]	@ (800d0f8 <HAL_GPIO_Init+0x2e8>)
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	089b      	lsrs	r3, r3, #2
 800d020:	3302      	adds	r3, #2
 800d022:	693a      	ldr	r2, [r7, #16]
 800d024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d028:	4b39      	ldr	r3, [pc, #228]	@ (800d110 <HAL_GPIO_Init+0x300>)
 800d02a:	689b      	ldr	r3, [r3, #8]
 800d02c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	43db      	mvns	r3, r3
 800d032:	693a      	ldr	r2, [r7, #16]
 800d034:	4013      	ands	r3, r2
 800d036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	685b      	ldr	r3, [r3, #4]
 800d03c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d040:	2b00      	cmp	r3, #0
 800d042:	d003      	beq.n	800d04c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800d044:	693a      	ldr	r2, [r7, #16]
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	4313      	orrs	r3, r2
 800d04a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800d04c:	4a30      	ldr	r2, [pc, #192]	@ (800d110 <HAL_GPIO_Init+0x300>)
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800d052:	4b2f      	ldr	r3, [pc, #188]	@ (800d110 <HAL_GPIO_Init+0x300>)
 800d054:	68db      	ldr	r3, [r3, #12]
 800d056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	43db      	mvns	r3, r3
 800d05c:	693a      	ldr	r2, [r7, #16]
 800d05e:	4013      	ands	r3, r2
 800d060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d003      	beq.n	800d076 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800d06e:	693a      	ldr	r2, [r7, #16]
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	4313      	orrs	r3, r2
 800d074:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800d076:	4a26      	ldr	r2, [pc, #152]	@ (800d110 <HAL_GPIO_Init+0x300>)
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800d07c:	4b24      	ldr	r3, [pc, #144]	@ (800d110 <HAL_GPIO_Init+0x300>)
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	43db      	mvns	r3, r3
 800d086:	693a      	ldr	r2, [r7, #16]
 800d088:	4013      	ands	r3, r2
 800d08a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	685b      	ldr	r3, [r3, #4]
 800d090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d094:	2b00      	cmp	r3, #0
 800d096:	d003      	beq.n	800d0a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800d098:	693a      	ldr	r2, [r7, #16]
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	4313      	orrs	r3, r2
 800d09e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800d0a0:	4a1b      	ldr	r2, [pc, #108]	@ (800d110 <HAL_GPIO_Init+0x300>)
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800d0a6:	4b1a      	ldr	r3, [pc, #104]	@ (800d110 <HAL_GPIO_Init+0x300>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	43db      	mvns	r3, r3
 800d0b0:	693a      	ldr	r2, [r7, #16]
 800d0b2:	4013      	ands	r3, r2
 800d0b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	685b      	ldr	r3, [r3, #4]
 800d0ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d003      	beq.n	800d0ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800d0c2:	693a      	ldr	r2, [r7, #16]
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800d0ca:	4a11      	ldr	r2, [pc, #68]	@ (800d110 <HAL_GPIO_Init+0x300>)
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	681a      	ldr	r2, [r3, #0]
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	fa22 f303 	lsr.w	r3, r2, r3
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	f47f ae9d 	bne.w	800ce20 <HAL_GPIO_Init+0x10>
  }
}
 800d0e6:	bf00      	nop
 800d0e8:	bf00      	nop
 800d0ea:	371c      	adds	r7, #28
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr
 800d0f4:	40021000 	.word	0x40021000
 800d0f8:	40010000 	.word	0x40010000
 800d0fc:	48000400 	.word	0x48000400
 800d100:	48000800 	.word	0x48000800
 800d104:	48000c00 	.word	0x48000c00
 800d108:	48001000 	.word	0x48001000
 800d10c:	48001400 	.word	0x48001400
 800d110:	40010400 	.word	0x40010400

0800d114 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d114:	b480      	push	{r7}
 800d116:	b085      	sub	sp, #20
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	460b      	mov	r3, r1
 800d11e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	691a      	ldr	r2, [r3, #16]
 800d124:	887b      	ldrh	r3, [r7, #2]
 800d126:	4013      	ands	r3, r2
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d002      	beq.n	800d132 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d12c:	2301      	movs	r3, #1
 800d12e:	73fb      	strb	r3, [r7, #15]
 800d130:	e001      	b.n	800d136 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d132:	2300      	movs	r3, #0
 800d134:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d136:	7bfb      	ldrb	r3, [r7, #15]
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3714      	adds	r7, #20
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr

0800d144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d144:	b480      	push	{r7}
 800d146:	b083      	sub	sp, #12
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	460b      	mov	r3, r1
 800d14e:	807b      	strh	r3, [r7, #2]
 800d150:	4613      	mov	r3, r2
 800d152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d154:	787b      	ldrb	r3, [r7, #1]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d003      	beq.n	800d162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800d15a:	887a      	ldrh	r2, [r7, #2]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800d160:	e002      	b.n	800d168 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800d162:	887a      	ldrh	r2, [r7, #2]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800d168:	bf00      	nop
 800d16a:	370c      	adds	r7, #12
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr

0800d174 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d174:	b480      	push	{r7}
 800d176:	b085      	sub	sp, #20
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	460b      	mov	r3, r1
 800d17e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	695b      	ldr	r3, [r3, #20]
 800d184:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d186:	887a      	ldrh	r2, [r7, #2]
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	4013      	ands	r3, r2
 800d18c:	041a      	lsls	r2, r3, #16
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	43d9      	mvns	r1, r3
 800d192:	887b      	ldrh	r3, [r7, #2]
 800d194:	400b      	ands	r3, r1
 800d196:	431a      	orrs	r2, r3
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	619a      	str	r2, [r3, #24]
}
 800d19c:	bf00      	nop
 800d19e:	3714      	adds	r7, #20
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a6:	4770      	bx	lr

0800d1a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b082      	sub	sp, #8
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800d1b2:	4b08      	ldr	r3, [pc, #32]	@ (800d1d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d1b4:	695a      	ldr	r2, [r3, #20]
 800d1b6:	88fb      	ldrh	r3, [r7, #6]
 800d1b8:	4013      	ands	r3, r2
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d006      	beq.n	800d1cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d1be:	4a05      	ldr	r2, [pc, #20]	@ (800d1d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d1c0:	88fb      	ldrh	r3, [r7, #6]
 800d1c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d1c4:	88fb      	ldrh	r3, [r7, #6]
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7fb fa7a 	bl	80086c0 <HAL_GPIO_EXTI_Callback>
  }
}
 800d1cc:	bf00      	nop
 800d1ce:	3708      	adds	r7, #8
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}
 800d1d4:	40010400 	.word	0x40010400

0800d1d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b085      	sub	sp, #20
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d141      	bne.n	800d26a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d1e6:	4b4b      	ldr	r3, [pc, #300]	@ (800d314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d1ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1f2:	d131      	bne.n	800d258 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d1f4:	4b47      	ldr	r3, [pc, #284]	@ (800d314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d1f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1fa:	4a46      	ldr	r2, [pc, #280]	@ (800d314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d1fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d200:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d204:	4b43      	ldr	r3, [pc, #268]	@ (800d314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d20c:	4a41      	ldr	r2, [pc, #260]	@ (800d314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d20e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d212:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d214:	4b40      	ldr	r3, [pc, #256]	@ (800d318 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	2232      	movs	r2, #50	@ 0x32
 800d21a:	fb02 f303 	mul.w	r3, r2, r3
 800d21e:	4a3f      	ldr	r2, [pc, #252]	@ (800d31c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d220:	fba2 2303 	umull	r2, r3, r2, r3
 800d224:	0c9b      	lsrs	r3, r3, #18
 800d226:	3301      	adds	r3, #1
 800d228:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d22a:	e002      	b.n	800d232 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	3b01      	subs	r3, #1
 800d230:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d232:	4b38      	ldr	r3, [pc, #224]	@ (800d314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d234:	695b      	ldr	r3, [r3, #20]
 800d236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d23a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d23e:	d102      	bne.n	800d246 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d1f2      	bne.n	800d22c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d246:	4b33      	ldr	r3, [pc, #204]	@ (800d314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d248:	695b      	ldr	r3, [r3, #20]
 800d24a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d24e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d252:	d158      	bne.n	800d306 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d254:	2303      	movs	r3, #3
 800d256:	e057      	b.n	800d308 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d258:	4b2e      	ldr	r3, [pc, #184]	@ (800d314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d25a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d25e:	4a2d      	ldr	r2, [pc, #180]	@ (800d314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d260:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d264:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800d268:	e04d      	b.n	800d306 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d270:	d141      	bne.n	800d2f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d272:	4b28      	ldr	r3, [pc, #160]	@ (800d314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d27a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d27e:	d131      	bne.n	800d2e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d280:	4b24      	ldr	r3, [pc, #144]	@ (800d314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d286:	4a23      	ldr	r2, [pc, #140]	@ (800d314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d28c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d290:	4b20      	ldr	r3, [pc, #128]	@ (800d314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d298:	4a1e      	ldr	r2, [pc, #120]	@ (800d314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d29a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d29e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d2a0:	4b1d      	ldr	r3, [pc, #116]	@ (800d318 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	2232      	movs	r2, #50	@ 0x32
 800d2a6:	fb02 f303 	mul.w	r3, r2, r3
 800d2aa:	4a1c      	ldr	r2, [pc, #112]	@ (800d31c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d2ac:	fba2 2303 	umull	r2, r3, r2, r3
 800d2b0:	0c9b      	lsrs	r3, r3, #18
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d2b6:	e002      	b.n	800d2be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	3b01      	subs	r3, #1
 800d2bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d2be:	4b15      	ldr	r3, [pc, #84]	@ (800d314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d2c0:	695b      	ldr	r3, [r3, #20]
 800d2c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d2c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d2ca:	d102      	bne.n	800d2d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d1f2      	bne.n	800d2b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d2d2:	4b10      	ldr	r3, [pc, #64]	@ (800d314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d2d4:	695b      	ldr	r3, [r3, #20]
 800d2d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d2da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d2de:	d112      	bne.n	800d306 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d2e0:	2303      	movs	r3, #3
 800d2e2:	e011      	b.n	800d308 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d2e4:	4b0b      	ldr	r3, [pc, #44]	@ (800d314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d2e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2ea:	4a0a      	ldr	r2, [pc, #40]	@ (800d314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d2ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d2f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800d2f4:	e007      	b.n	800d306 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800d2f6:	4b07      	ldr	r3, [pc, #28]	@ (800d314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d2fe:	4a05      	ldr	r2, [pc, #20]	@ (800d314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d300:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d304:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800d306:	2300      	movs	r3, #0
}
 800d308:	4618      	mov	r0, r3
 800d30a:	3714      	adds	r7, #20
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr
 800d314:	40007000 	.word	0x40007000
 800d318:	200005b4 	.word	0x200005b4
 800d31c:	431bde83 	.word	0x431bde83

0800d320 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800d320:	b480      	push	{r7}
 800d322:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800d324:	4b05      	ldr	r3, [pc, #20]	@ (800d33c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d326:	689b      	ldr	r3, [r3, #8]
 800d328:	4a04      	ldr	r2, [pc, #16]	@ (800d33c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d32a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d32e:	6093      	str	r3, [r2, #8]
}
 800d330:	bf00      	nop
 800d332:	46bd      	mov	sp, r7
 800d334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop
 800d33c:	40007000 	.word	0x40007000

0800d340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b088      	sub	sp, #32
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d101      	bne.n	800d352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d34e:	2301      	movs	r3, #1
 800d350:	e2fe      	b.n	800d950 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f003 0301 	and.w	r3, r3, #1
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d075      	beq.n	800d44a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d35e:	4b97      	ldr	r3, [pc, #604]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d360:	689b      	ldr	r3, [r3, #8]
 800d362:	f003 030c 	and.w	r3, r3, #12
 800d366:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d368:	4b94      	ldr	r3, [pc, #592]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d36a:	68db      	ldr	r3, [r3, #12]
 800d36c:	f003 0303 	and.w	r3, r3, #3
 800d370:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800d372:	69bb      	ldr	r3, [r7, #24]
 800d374:	2b0c      	cmp	r3, #12
 800d376:	d102      	bne.n	800d37e <HAL_RCC_OscConfig+0x3e>
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	2b03      	cmp	r3, #3
 800d37c:	d002      	beq.n	800d384 <HAL_RCC_OscConfig+0x44>
 800d37e:	69bb      	ldr	r3, [r7, #24]
 800d380:	2b08      	cmp	r3, #8
 800d382:	d10b      	bne.n	800d39c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d384:	4b8d      	ldr	r3, [pc, #564]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d05b      	beq.n	800d448 <HAL_RCC_OscConfig+0x108>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	685b      	ldr	r3, [r3, #4]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d157      	bne.n	800d448 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d398:	2301      	movs	r3, #1
 800d39a:	e2d9      	b.n	800d950 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3a4:	d106      	bne.n	800d3b4 <HAL_RCC_OscConfig+0x74>
 800d3a6:	4b85      	ldr	r3, [pc, #532]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4a84      	ldr	r2, [pc, #528]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d3ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d3b0:	6013      	str	r3, [r2, #0]
 800d3b2:	e01d      	b.n	800d3f0 <HAL_RCC_OscConfig+0xb0>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	685b      	ldr	r3, [r3, #4]
 800d3b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d3bc:	d10c      	bne.n	800d3d8 <HAL_RCC_OscConfig+0x98>
 800d3be:	4b7f      	ldr	r3, [pc, #508]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	4a7e      	ldr	r2, [pc, #504]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d3c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d3c8:	6013      	str	r3, [r2, #0]
 800d3ca:	4b7c      	ldr	r3, [pc, #496]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	4a7b      	ldr	r2, [pc, #492]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d3d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d3d4:	6013      	str	r3, [r2, #0]
 800d3d6:	e00b      	b.n	800d3f0 <HAL_RCC_OscConfig+0xb0>
 800d3d8:	4b78      	ldr	r3, [pc, #480]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	4a77      	ldr	r2, [pc, #476]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d3de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d3e2:	6013      	str	r3, [r2, #0]
 800d3e4:	4b75      	ldr	r3, [pc, #468]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	4a74      	ldr	r2, [pc, #464]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d3ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d3ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	685b      	ldr	r3, [r3, #4]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d013      	beq.n	800d420 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d3f8:	f7fd fc44 	bl	800ac84 <HAL_GetTick>
 800d3fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d3fe:	e008      	b.n	800d412 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d400:	f7fd fc40 	bl	800ac84 <HAL_GetTick>
 800d404:	4602      	mov	r2, r0
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	1ad3      	subs	r3, r2, r3
 800d40a:	2b64      	cmp	r3, #100	@ 0x64
 800d40c:	d901      	bls.n	800d412 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d40e:	2303      	movs	r3, #3
 800d410:	e29e      	b.n	800d950 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d412:	4b6a      	ldr	r3, [pc, #424]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d0f0      	beq.n	800d400 <HAL_RCC_OscConfig+0xc0>
 800d41e:	e014      	b.n	800d44a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d420:	f7fd fc30 	bl	800ac84 <HAL_GetTick>
 800d424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d426:	e008      	b.n	800d43a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d428:	f7fd fc2c 	bl	800ac84 <HAL_GetTick>
 800d42c:	4602      	mov	r2, r0
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	1ad3      	subs	r3, r2, r3
 800d432:	2b64      	cmp	r3, #100	@ 0x64
 800d434:	d901      	bls.n	800d43a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d436:	2303      	movs	r3, #3
 800d438:	e28a      	b.n	800d950 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d43a:	4b60      	ldr	r3, [pc, #384]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d442:	2b00      	cmp	r3, #0
 800d444:	d1f0      	bne.n	800d428 <HAL_RCC_OscConfig+0xe8>
 800d446:	e000      	b.n	800d44a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f003 0302 	and.w	r3, r3, #2
 800d452:	2b00      	cmp	r3, #0
 800d454:	d075      	beq.n	800d542 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d456:	4b59      	ldr	r3, [pc, #356]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d458:	689b      	ldr	r3, [r3, #8]
 800d45a:	f003 030c 	and.w	r3, r3, #12
 800d45e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d460:	4b56      	ldr	r3, [pc, #344]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d462:	68db      	ldr	r3, [r3, #12]
 800d464:	f003 0303 	and.w	r3, r3, #3
 800d468:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800d46a:	69bb      	ldr	r3, [r7, #24]
 800d46c:	2b0c      	cmp	r3, #12
 800d46e:	d102      	bne.n	800d476 <HAL_RCC_OscConfig+0x136>
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	2b02      	cmp	r3, #2
 800d474:	d002      	beq.n	800d47c <HAL_RCC_OscConfig+0x13c>
 800d476:	69bb      	ldr	r3, [r7, #24]
 800d478:	2b04      	cmp	r3, #4
 800d47a:	d11f      	bne.n	800d4bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d47c:	4b4f      	ldr	r3, [pc, #316]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d484:	2b00      	cmp	r3, #0
 800d486:	d005      	beq.n	800d494 <HAL_RCC_OscConfig+0x154>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d101      	bne.n	800d494 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800d490:	2301      	movs	r3, #1
 800d492:	e25d      	b.n	800d950 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d494:	4b49      	ldr	r3, [pc, #292]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d496:	685b      	ldr	r3, [r3, #4]
 800d498:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	691b      	ldr	r3, [r3, #16]
 800d4a0:	061b      	lsls	r3, r3, #24
 800d4a2:	4946      	ldr	r1, [pc, #280]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d4a4:	4313      	orrs	r3, r2
 800d4a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d4a8:	4b45      	ldr	r3, [pc, #276]	@ (800d5c0 <HAL_RCC_OscConfig+0x280>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7fd fb9d 	bl	800abec <HAL_InitTick>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d043      	beq.n	800d540 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	e249      	b.n	800d950 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	68db      	ldr	r3, [r3, #12]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d023      	beq.n	800d50c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d4c4:	4b3d      	ldr	r3, [pc, #244]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	4a3c      	ldr	r2, [pc, #240]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d4ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d4ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4d0:	f7fd fbd8 	bl	800ac84 <HAL_GetTick>
 800d4d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d4d6:	e008      	b.n	800d4ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d4d8:	f7fd fbd4 	bl	800ac84 <HAL_GetTick>
 800d4dc:	4602      	mov	r2, r0
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	1ad3      	subs	r3, r2, r3
 800d4e2:	2b02      	cmp	r3, #2
 800d4e4:	d901      	bls.n	800d4ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d4e6:	2303      	movs	r3, #3
 800d4e8:	e232      	b.n	800d950 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d4ea:	4b34      	ldr	r3, [pc, #208]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d0f0      	beq.n	800d4d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d4f6:	4b31      	ldr	r3, [pc, #196]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d4f8:	685b      	ldr	r3, [r3, #4]
 800d4fa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	691b      	ldr	r3, [r3, #16]
 800d502:	061b      	lsls	r3, r3, #24
 800d504:	492d      	ldr	r1, [pc, #180]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d506:	4313      	orrs	r3, r2
 800d508:	604b      	str	r3, [r1, #4]
 800d50a:	e01a      	b.n	800d542 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d50c:	4b2b      	ldr	r3, [pc, #172]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4a2a      	ldr	r2, [pc, #168]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d512:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d518:	f7fd fbb4 	bl	800ac84 <HAL_GetTick>
 800d51c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d51e:	e008      	b.n	800d532 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d520:	f7fd fbb0 	bl	800ac84 <HAL_GetTick>
 800d524:	4602      	mov	r2, r0
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	1ad3      	subs	r3, r2, r3
 800d52a:	2b02      	cmp	r3, #2
 800d52c:	d901      	bls.n	800d532 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800d52e:	2303      	movs	r3, #3
 800d530:	e20e      	b.n	800d950 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d532:	4b22      	ldr	r3, [pc, #136]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d1f0      	bne.n	800d520 <HAL_RCC_OscConfig+0x1e0>
 800d53e:	e000      	b.n	800d542 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d540:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f003 0308 	and.w	r3, r3, #8
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d041      	beq.n	800d5d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	695b      	ldr	r3, [r3, #20]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d01c      	beq.n	800d590 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d556:	4b19      	ldr	r3, [pc, #100]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d558:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d55c:	4a17      	ldr	r2, [pc, #92]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d55e:	f043 0301 	orr.w	r3, r3, #1
 800d562:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d566:	f7fd fb8d 	bl	800ac84 <HAL_GetTick>
 800d56a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d56c:	e008      	b.n	800d580 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d56e:	f7fd fb89 	bl	800ac84 <HAL_GetTick>
 800d572:	4602      	mov	r2, r0
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	1ad3      	subs	r3, r2, r3
 800d578:	2b02      	cmp	r3, #2
 800d57a:	d901      	bls.n	800d580 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d57c:	2303      	movs	r3, #3
 800d57e:	e1e7      	b.n	800d950 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d580:	4b0e      	ldr	r3, [pc, #56]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d582:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d586:	f003 0302 	and.w	r3, r3, #2
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d0ef      	beq.n	800d56e <HAL_RCC_OscConfig+0x22e>
 800d58e:	e020      	b.n	800d5d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d590:	4b0a      	ldr	r3, [pc, #40]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d592:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d596:	4a09      	ldr	r2, [pc, #36]	@ (800d5bc <HAL_RCC_OscConfig+0x27c>)
 800d598:	f023 0301 	bic.w	r3, r3, #1
 800d59c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d5a0:	f7fd fb70 	bl	800ac84 <HAL_GetTick>
 800d5a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d5a6:	e00d      	b.n	800d5c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d5a8:	f7fd fb6c 	bl	800ac84 <HAL_GetTick>
 800d5ac:	4602      	mov	r2, r0
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	1ad3      	subs	r3, r2, r3
 800d5b2:	2b02      	cmp	r3, #2
 800d5b4:	d906      	bls.n	800d5c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d5b6:	2303      	movs	r3, #3
 800d5b8:	e1ca      	b.n	800d950 <HAL_RCC_OscConfig+0x610>
 800d5ba:	bf00      	nop
 800d5bc:	40021000 	.word	0x40021000
 800d5c0:	200005b8 	.word	0x200005b8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d5c4:	4b8c      	ldr	r3, [pc, #560]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d5c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d5ca:	f003 0302 	and.w	r3, r3, #2
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d1ea      	bne.n	800d5a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f003 0304 	and.w	r3, r3, #4
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	f000 80a6 	beq.w	800d72c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d5e4:	4b84      	ldr	r3, [pc, #528]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d5e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d101      	bne.n	800d5f4 <HAL_RCC_OscConfig+0x2b4>
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	e000      	b.n	800d5f6 <HAL_RCC_OscConfig+0x2b6>
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d00d      	beq.n	800d616 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d5fa:	4b7f      	ldr	r3, [pc, #508]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d5fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5fe:	4a7e      	ldr	r2, [pc, #504]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d604:	6593      	str	r3, [r2, #88]	@ 0x58
 800d606:	4b7c      	ldr	r3, [pc, #496]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d60a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d60e:	60fb      	str	r3, [r7, #12]
 800d610:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800d612:	2301      	movs	r3, #1
 800d614:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d616:	4b79      	ldr	r3, [pc, #484]	@ (800d7fc <HAL_RCC_OscConfig+0x4bc>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d118      	bne.n	800d654 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d622:	4b76      	ldr	r3, [pc, #472]	@ (800d7fc <HAL_RCC_OscConfig+0x4bc>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a75      	ldr	r2, [pc, #468]	@ (800d7fc <HAL_RCC_OscConfig+0x4bc>)
 800d628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d62c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d62e:	f7fd fb29 	bl	800ac84 <HAL_GetTick>
 800d632:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d634:	e008      	b.n	800d648 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d636:	f7fd fb25 	bl	800ac84 <HAL_GetTick>
 800d63a:	4602      	mov	r2, r0
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	1ad3      	subs	r3, r2, r3
 800d640:	2b02      	cmp	r3, #2
 800d642:	d901      	bls.n	800d648 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800d644:	2303      	movs	r3, #3
 800d646:	e183      	b.n	800d950 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d648:	4b6c      	ldr	r3, [pc, #432]	@ (800d7fc <HAL_RCC_OscConfig+0x4bc>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d650:	2b00      	cmp	r3, #0
 800d652:	d0f0      	beq.n	800d636 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	689b      	ldr	r3, [r3, #8]
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d108      	bne.n	800d66e <HAL_RCC_OscConfig+0x32e>
 800d65c:	4b66      	ldr	r3, [pc, #408]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d65e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d662:	4a65      	ldr	r2, [pc, #404]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d664:	f043 0301 	orr.w	r3, r3, #1
 800d668:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d66c:	e024      	b.n	800d6b8 <HAL_RCC_OscConfig+0x378>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	689b      	ldr	r3, [r3, #8]
 800d672:	2b05      	cmp	r3, #5
 800d674:	d110      	bne.n	800d698 <HAL_RCC_OscConfig+0x358>
 800d676:	4b60      	ldr	r3, [pc, #384]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d67c:	4a5e      	ldr	r2, [pc, #376]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d67e:	f043 0304 	orr.w	r3, r3, #4
 800d682:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d686:	4b5c      	ldr	r3, [pc, #368]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d68c:	4a5a      	ldr	r2, [pc, #360]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d68e:	f043 0301 	orr.w	r3, r3, #1
 800d692:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d696:	e00f      	b.n	800d6b8 <HAL_RCC_OscConfig+0x378>
 800d698:	4b57      	ldr	r3, [pc, #348]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d69a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d69e:	4a56      	ldr	r2, [pc, #344]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d6a0:	f023 0301 	bic.w	r3, r3, #1
 800d6a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d6a8:	4b53      	ldr	r3, [pc, #332]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d6aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6ae:	4a52      	ldr	r2, [pc, #328]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d6b0:	f023 0304 	bic.w	r3, r3, #4
 800d6b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	689b      	ldr	r3, [r3, #8]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d016      	beq.n	800d6ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d6c0:	f7fd fae0 	bl	800ac84 <HAL_GetTick>
 800d6c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d6c6:	e00a      	b.n	800d6de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d6c8:	f7fd fadc 	bl	800ac84 <HAL_GetTick>
 800d6cc:	4602      	mov	r2, r0
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	1ad3      	subs	r3, r2, r3
 800d6d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d901      	bls.n	800d6de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800d6da:	2303      	movs	r3, #3
 800d6dc:	e138      	b.n	800d950 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d6de:	4b46      	ldr	r3, [pc, #280]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d6e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6e4:	f003 0302 	and.w	r3, r3, #2
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d0ed      	beq.n	800d6c8 <HAL_RCC_OscConfig+0x388>
 800d6ec:	e015      	b.n	800d71a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d6ee:	f7fd fac9 	bl	800ac84 <HAL_GetTick>
 800d6f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d6f4:	e00a      	b.n	800d70c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d6f6:	f7fd fac5 	bl	800ac84 <HAL_GetTick>
 800d6fa:	4602      	mov	r2, r0
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	1ad3      	subs	r3, r2, r3
 800d700:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d704:	4293      	cmp	r3, r2
 800d706:	d901      	bls.n	800d70c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800d708:	2303      	movs	r3, #3
 800d70a:	e121      	b.n	800d950 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d70c:	4b3a      	ldr	r3, [pc, #232]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d70e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d712:	f003 0302 	and.w	r3, r3, #2
 800d716:	2b00      	cmp	r3, #0
 800d718:	d1ed      	bne.n	800d6f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d71a:	7ffb      	ldrb	r3, [r7, #31]
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d105      	bne.n	800d72c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d720:	4b35      	ldr	r3, [pc, #212]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d724:	4a34      	ldr	r2, [pc, #208]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d726:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d72a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f003 0320 	and.w	r3, r3, #32
 800d734:	2b00      	cmp	r3, #0
 800d736:	d03c      	beq.n	800d7b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	699b      	ldr	r3, [r3, #24]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d01c      	beq.n	800d77a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d740:	4b2d      	ldr	r3, [pc, #180]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d742:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d746:	4a2c      	ldr	r2, [pc, #176]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d748:	f043 0301 	orr.w	r3, r3, #1
 800d74c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d750:	f7fd fa98 	bl	800ac84 <HAL_GetTick>
 800d754:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d756:	e008      	b.n	800d76a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d758:	f7fd fa94 	bl	800ac84 <HAL_GetTick>
 800d75c:	4602      	mov	r2, r0
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	1ad3      	subs	r3, r2, r3
 800d762:	2b02      	cmp	r3, #2
 800d764:	d901      	bls.n	800d76a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800d766:	2303      	movs	r3, #3
 800d768:	e0f2      	b.n	800d950 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d76a:	4b23      	ldr	r3, [pc, #140]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d76c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d770:	f003 0302 	and.w	r3, r3, #2
 800d774:	2b00      	cmp	r3, #0
 800d776:	d0ef      	beq.n	800d758 <HAL_RCC_OscConfig+0x418>
 800d778:	e01b      	b.n	800d7b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d77a:	4b1f      	ldr	r3, [pc, #124]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d77c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d780:	4a1d      	ldr	r2, [pc, #116]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d782:	f023 0301 	bic.w	r3, r3, #1
 800d786:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d78a:	f7fd fa7b 	bl	800ac84 <HAL_GetTick>
 800d78e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d790:	e008      	b.n	800d7a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d792:	f7fd fa77 	bl	800ac84 <HAL_GetTick>
 800d796:	4602      	mov	r2, r0
 800d798:	693b      	ldr	r3, [r7, #16]
 800d79a:	1ad3      	subs	r3, r2, r3
 800d79c:	2b02      	cmp	r3, #2
 800d79e:	d901      	bls.n	800d7a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800d7a0:	2303      	movs	r3, #3
 800d7a2:	e0d5      	b.n	800d950 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d7a4:	4b14      	ldr	r3, [pc, #80]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d7a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d7aa:	f003 0302 	and.w	r3, r3, #2
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d1ef      	bne.n	800d792 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	69db      	ldr	r3, [r3, #28]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	f000 80c9 	beq.w	800d94e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d7bc:	4b0e      	ldr	r3, [pc, #56]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d7be:	689b      	ldr	r3, [r3, #8]
 800d7c0:	f003 030c 	and.w	r3, r3, #12
 800d7c4:	2b0c      	cmp	r3, #12
 800d7c6:	f000 8083 	beq.w	800d8d0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	69db      	ldr	r3, [r3, #28]
 800d7ce:	2b02      	cmp	r3, #2
 800d7d0:	d15e      	bne.n	800d890 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d7d2:	4b09      	ldr	r3, [pc, #36]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	4a08      	ldr	r2, [pc, #32]	@ (800d7f8 <HAL_RCC_OscConfig+0x4b8>)
 800d7d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d7dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7de:	f7fd fa51 	bl	800ac84 <HAL_GetTick>
 800d7e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d7e4:	e00c      	b.n	800d800 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d7e6:	f7fd fa4d 	bl	800ac84 <HAL_GetTick>
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	1ad3      	subs	r3, r2, r3
 800d7f0:	2b02      	cmp	r3, #2
 800d7f2:	d905      	bls.n	800d800 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800d7f4:	2303      	movs	r3, #3
 800d7f6:	e0ab      	b.n	800d950 <HAL_RCC_OscConfig+0x610>
 800d7f8:	40021000 	.word	0x40021000
 800d7fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d800:	4b55      	ldr	r3, [pc, #340]	@ (800d958 <HAL_RCC_OscConfig+0x618>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d1ec      	bne.n	800d7e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d80c:	4b52      	ldr	r3, [pc, #328]	@ (800d958 <HAL_RCC_OscConfig+0x618>)
 800d80e:	68da      	ldr	r2, [r3, #12]
 800d810:	4b52      	ldr	r3, [pc, #328]	@ (800d95c <HAL_RCC_OscConfig+0x61c>)
 800d812:	4013      	ands	r3, r2
 800d814:	687a      	ldr	r2, [r7, #4]
 800d816:	6a11      	ldr	r1, [r2, #32]
 800d818:	687a      	ldr	r2, [r7, #4]
 800d81a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d81c:	3a01      	subs	r2, #1
 800d81e:	0112      	lsls	r2, r2, #4
 800d820:	4311      	orrs	r1, r2
 800d822:	687a      	ldr	r2, [r7, #4]
 800d824:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800d826:	0212      	lsls	r2, r2, #8
 800d828:	4311      	orrs	r1, r2
 800d82a:	687a      	ldr	r2, [r7, #4]
 800d82c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d82e:	0852      	lsrs	r2, r2, #1
 800d830:	3a01      	subs	r2, #1
 800d832:	0552      	lsls	r2, r2, #21
 800d834:	4311      	orrs	r1, r2
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d83a:	0852      	lsrs	r2, r2, #1
 800d83c:	3a01      	subs	r2, #1
 800d83e:	0652      	lsls	r2, r2, #25
 800d840:	4311      	orrs	r1, r2
 800d842:	687a      	ldr	r2, [r7, #4]
 800d844:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d846:	06d2      	lsls	r2, r2, #27
 800d848:	430a      	orrs	r2, r1
 800d84a:	4943      	ldr	r1, [pc, #268]	@ (800d958 <HAL_RCC_OscConfig+0x618>)
 800d84c:	4313      	orrs	r3, r2
 800d84e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d850:	4b41      	ldr	r3, [pc, #260]	@ (800d958 <HAL_RCC_OscConfig+0x618>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4a40      	ldr	r2, [pc, #256]	@ (800d958 <HAL_RCC_OscConfig+0x618>)
 800d856:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d85a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d85c:	4b3e      	ldr	r3, [pc, #248]	@ (800d958 <HAL_RCC_OscConfig+0x618>)
 800d85e:	68db      	ldr	r3, [r3, #12]
 800d860:	4a3d      	ldr	r2, [pc, #244]	@ (800d958 <HAL_RCC_OscConfig+0x618>)
 800d862:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d866:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d868:	f7fd fa0c 	bl	800ac84 <HAL_GetTick>
 800d86c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d86e:	e008      	b.n	800d882 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d870:	f7fd fa08 	bl	800ac84 <HAL_GetTick>
 800d874:	4602      	mov	r2, r0
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	1ad3      	subs	r3, r2, r3
 800d87a:	2b02      	cmp	r3, #2
 800d87c:	d901      	bls.n	800d882 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800d87e:	2303      	movs	r3, #3
 800d880:	e066      	b.n	800d950 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d882:	4b35      	ldr	r3, [pc, #212]	@ (800d958 <HAL_RCC_OscConfig+0x618>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d0f0      	beq.n	800d870 <HAL_RCC_OscConfig+0x530>
 800d88e:	e05e      	b.n	800d94e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d890:	4b31      	ldr	r3, [pc, #196]	@ (800d958 <HAL_RCC_OscConfig+0x618>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4a30      	ldr	r2, [pc, #192]	@ (800d958 <HAL_RCC_OscConfig+0x618>)
 800d896:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d89a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d89c:	f7fd f9f2 	bl	800ac84 <HAL_GetTick>
 800d8a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d8a2:	e008      	b.n	800d8b6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d8a4:	f7fd f9ee 	bl	800ac84 <HAL_GetTick>
 800d8a8:	4602      	mov	r2, r0
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	1ad3      	subs	r3, r2, r3
 800d8ae:	2b02      	cmp	r3, #2
 800d8b0:	d901      	bls.n	800d8b6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800d8b2:	2303      	movs	r3, #3
 800d8b4:	e04c      	b.n	800d950 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d8b6:	4b28      	ldr	r3, [pc, #160]	@ (800d958 <HAL_RCC_OscConfig+0x618>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d1f0      	bne.n	800d8a4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800d8c2:	4b25      	ldr	r3, [pc, #148]	@ (800d958 <HAL_RCC_OscConfig+0x618>)
 800d8c4:	68da      	ldr	r2, [r3, #12]
 800d8c6:	4924      	ldr	r1, [pc, #144]	@ (800d958 <HAL_RCC_OscConfig+0x618>)
 800d8c8:	4b25      	ldr	r3, [pc, #148]	@ (800d960 <HAL_RCC_OscConfig+0x620>)
 800d8ca:	4013      	ands	r3, r2
 800d8cc:	60cb      	str	r3, [r1, #12]
 800d8ce:	e03e      	b.n	800d94e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	69db      	ldr	r3, [r3, #28]
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d101      	bne.n	800d8dc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	e039      	b.n	800d950 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800d8dc:	4b1e      	ldr	r3, [pc, #120]	@ (800d958 <HAL_RCC_OscConfig+0x618>)
 800d8de:	68db      	ldr	r3, [r3, #12]
 800d8e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	f003 0203 	and.w	r2, r3, #3
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6a1b      	ldr	r3, [r3, #32]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d12c      	bne.n	800d94a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8fa:	3b01      	subs	r3, #1
 800d8fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d123      	bne.n	800d94a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d90c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d90e:	429a      	cmp	r2, r3
 800d910:	d11b      	bne.n	800d94a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d91c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d91e:	429a      	cmp	r2, r3
 800d920:	d113      	bne.n	800d94a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d92c:	085b      	lsrs	r3, r3, #1
 800d92e:	3b01      	subs	r3, #1
 800d930:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d932:	429a      	cmp	r2, r3
 800d934:	d109      	bne.n	800d94a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d940:	085b      	lsrs	r3, r3, #1
 800d942:	3b01      	subs	r3, #1
 800d944:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d946:	429a      	cmp	r2, r3
 800d948:	d001      	beq.n	800d94e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800d94a:	2301      	movs	r3, #1
 800d94c:	e000      	b.n	800d950 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800d94e:	2300      	movs	r3, #0
}
 800d950:	4618      	mov	r0, r3
 800d952:	3720      	adds	r7, #32
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}
 800d958:	40021000 	.word	0x40021000
 800d95c:	019f800c 	.word	0x019f800c
 800d960:	feeefffc 	.word	0xfeeefffc

0800d964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b086      	sub	sp, #24
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800d96e:	2300      	movs	r3, #0
 800d970:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d101      	bne.n	800d97c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d978:	2301      	movs	r3, #1
 800d97a:	e11e      	b.n	800dbba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d97c:	4b91      	ldr	r3, [pc, #580]	@ (800dbc4 <HAL_RCC_ClockConfig+0x260>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	f003 030f 	and.w	r3, r3, #15
 800d984:	683a      	ldr	r2, [r7, #0]
 800d986:	429a      	cmp	r2, r3
 800d988:	d910      	bls.n	800d9ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d98a:	4b8e      	ldr	r3, [pc, #568]	@ (800dbc4 <HAL_RCC_ClockConfig+0x260>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f023 020f 	bic.w	r2, r3, #15
 800d992:	498c      	ldr	r1, [pc, #560]	@ (800dbc4 <HAL_RCC_ClockConfig+0x260>)
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	4313      	orrs	r3, r2
 800d998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d99a:	4b8a      	ldr	r3, [pc, #552]	@ (800dbc4 <HAL_RCC_ClockConfig+0x260>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	f003 030f 	and.w	r3, r3, #15
 800d9a2:	683a      	ldr	r2, [r7, #0]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d001      	beq.n	800d9ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	e106      	b.n	800dbba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	f003 0301 	and.w	r3, r3, #1
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d073      	beq.n	800daa0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	685b      	ldr	r3, [r3, #4]
 800d9bc:	2b03      	cmp	r3, #3
 800d9be:	d129      	bne.n	800da14 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d9c0:	4b81      	ldr	r3, [pc, #516]	@ (800dbc8 <HAL_RCC_ClockConfig+0x264>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d101      	bne.n	800d9d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	e0f4      	b.n	800dbba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800d9d0:	f000 f99e 	bl	800dd10 <RCC_GetSysClockFreqFromPLLSource>
 800d9d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	4a7c      	ldr	r2, [pc, #496]	@ (800dbcc <HAL_RCC_ClockConfig+0x268>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d93f      	bls.n	800da5e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d9de:	4b7a      	ldr	r3, [pc, #488]	@ (800dbc8 <HAL_RCC_ClockConfig+0x264>)
 800d9e0:	689b      	ldr	r3, [r3, #8]
 800d9e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d009      	beq.n	800d9fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d033      	beq.n	800da5e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d12f      	bne.n	800da5e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d9fe:	4b72      	ldr	r3, [pc, #456]	@ (800dbc8 <HAL_RCC_ClockConfig+0x264>)
 800da00:	689b      	ldr	r3, [r3, #8]
 800da02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800da06:	4a70      	ldr	r2, [pc, #448]	@ (800dbc8 <HAL_RCC_ClockConfig+0x264>)
 800da08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800da0e:	2380      	movs	r3, #128	@ 0x80
 800da10:	617b      	str	r3, [r7, #20]
 800da12:	e024      	b.n	800da5e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	685b      	ldr	r3, [r3, #4]
 800da18:	2b02      	cmp	r3, #2
 800da1a:	d107      	bne.n	800da2c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800da1c:	4b6a      	ldr	r3, [pc, #424]	@ (800dbc8 <HAL_RCC_ClockConfig+0x264>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800da24:	2b00      	cmp	r3, #0
 800da26:	d109      	bne.n	800da3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800da28:	2301      	movs	r3, #1
 800da2a:	e0c6      	b.n	800dbba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800da2c:	4b66      	ldr	r3, [pc, #408]	@ (800dbc8 <HAL_RCC_ClockConfig+0x264>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800da34:	2b00      	cmp	r3, #0
 800da36:	d101      	bne.n	800da3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800da38:	2301      	movs	r3, #1
 800da3a:	e0be      	b.n	800dbba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800da3c:	f000 f8ce 	bl	800dbdc <HAL_RCC_GetSysClockFreq>
 800da40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	4a61      	ldr	r2, [pc, #388]	@ (800dbcc <HAL_RCC_ClockConfig+0x268>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d909      	bls.n	800da5e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800da4a:	4b5f      	ldr	r3, [pc, #380]	@ (800dbc8 <HAL_RCC_ClockConfig+0x264>)
 800da4c:	689b      	ldr	r3, [r3, #8]
 800da4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800da52:	4a5d      	ldr	r2, [pc, #372]	@ (800dbc8 <HAL_RCC_ClockConfig+0x264>)
 800da54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da58:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800da5a:	2380      	movs	r3, #128	@ 0x80
 800da5c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800da5e:	4b5a      	ldr	r3, [pc, #360]	@ (800dbc8 <HAL_RCC_ClockConfig+0x264>)
 800da60:	689b      	ldr	r3, [r3, #8]
 800da62:	f023 0203 	bic.w	r2, r3, #3
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	4957      	ldr	r1, [pc, #348]	@ (800dbc8 <HAL_RCC_ClockConfig+0x264>)
 800da6c:	4313      	orrs	r3, r2
 800da6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da70:	f7fd f908 	bl	800ac84 <HAL_GetTick>
 800da74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800da76:	e00a      	b.n	800da8e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800da78:	f7fd f904 	bl	800ac84 <HAL_GetTick>
 800da7c:	4602      	mov	r2, r0
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	1ad3      	subs	r3, r2, r3
 800da82:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da86:	4293      	cmp	r3, r2
 800da88:	d901      	bls.n	800da8e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800da8a:	2303      	movs	r3, #3
 800da8c:	e095      	b.n	800dbba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800da8e:	4b4e      	ldr	r3, [pc, #312]	@ (800dbc8 <HAL_RCC_ClockConfig+0x264>)
 800da90:	689b      	ldr	r3, [r3, #8]
 800da92:	f003 020c 	and.w	r2, r3, #12
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	009b      	lsls	r3, r3, #2
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d1eb      	bne.n	800da78 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f003 0302 	and.w	r3, r3, #2
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d023      	beq.n	800daf4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f003 0304 	and.w	r3, r3, #4
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d005      	beq.n	800dac4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dab8:	4b43      	ldr	r3, [pc, #268]	@ (800dbc8 <HAL_RCC_ClockConfig+0x264>)
 800daba:	689b      	ldr	r3, [r3, #8]
 800dabc:	4a42      	ldr	r2, [pc, #264]	@ (800dbc8 <HAL_RCC_ClockConfig+0x264>)
 800dabe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800dac2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f003 0308 	and.w	r3, r3, #8
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d007      	beq.n	800dae0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800dad0:	4b3d      	ldr	r3, [pc, #244]	@ (800dbc8 <HAL_RCC_ClockConfig+0x264>)
 800dad2:	689b      	ldr	r3, [r3, #8]
 800dad4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800dad8:	4a3b      	ldr	r2, [pc, #236]	@ (800dbc8 <HAL_RCC_ClockConfig+0x264>)
 800dada:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800dade:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dae0:	4b39      	ldr	r3, [pc, #228]	@ (800dbc8 <HAL_RCC_ClockConfig+0x264>)
 800dae2:	689b      	ldr	r3, [r3, #8]
 800dae4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	689b      	ldr	r3, [r3, #8]
 800daec:	4936      	ldr	r1, [pc, #216]	@ (800dbc8 <HAL_RCC_ClockConfig+0x264>)
 800daee:	4313      	orrs	r3, r2
 800daf0:	608b      	str	r3, [r1, #8]
 800daf2:	e008      	b.n	800db06 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	2b80      	cmp	r3, #128	@ 0x80
 800daf8:	d105      	bne.n	800db06 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800dafa:	4b33      	ldr	r3, [pc, #204]	@ (800dbc8 <HAL_RCC_ClockConfig+0x264>)
 800dafc:	689b      	ldr	r3, [r3, #8]
 800dafe:	4a32      	ldr	r2, [pc, #200]	@ (800dbc8 <HAL_RCC_ClockConfig+0x264>)
 800db00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800db04:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800db06:	4b2f      	ldr	r3, [pc, #188]	@ (800dbc4 <HAL_RCC_ClockConfig+0x260>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	f003 030f 	and.w	r3, r3, #15
 800db0e:	683a      	ldr	r2, [r7, #0]
 800db10:	429a      	cmp	r2, r3
 800db12:	d21d      	bcs.n	800db50 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800db14:	4b2b      	ldr	r3, [pc, #172]	@ (800dbc4 <HAL_RCC_ClockConfig+0x260>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f023 020f 	bic.w	r2, r3, #15
 800db1c:	4929      	ldr	r1, [pc, #164]	@ (800dbc4 <HAL_RCC_ClockConfig+0x260>)
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	4313      	orrs	r3, r2
 800db22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800db24:	f7fd f8ae 	bl	800ac84 <HAL_GetTick>
 800db28:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800db2a:	e00a      	b.n	800db42 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800db2c:	f7fd f8aa 	bl	800ac84 <HAL_GetTick>
 800db30:	4602      	mov	r2, r0
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	1ad3      	subs	r3, r2, r3
 800db36:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d901      	bls.n	800db42 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800db3e:	2303      	movs	r3, #3
 800db40:	e03b      	b.n	800dbba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800db42:	4b20      	ldr	r3, [pc, #128]	@ (800dbc4 <HAL_RCC_ClockConfig+0x260>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f003 030f 	and.w	r3, r3, #15
 800db4a:	683a      	ldr	r2, [r7, #0]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d1ed      	bne.n	800db2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f003 0304 	and.w	r3, r3, #4
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d008      	beq.n	800db6e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800db5c:	4b1a      	ldr	r3, [pc, #104]	@ (800dbc8 <HAL_RCC_ClockConfig+0x264>)
 800db5e:	689b      	ldr	r3, [r3, #8]
 800db60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	68db      	ldr	r3, [r3, #12]
 800db68:	4917      	ldr	r1, [pc, #92]	@ (800dbc8 <HAL_RCC_ClockConfig+0x264>)
 800db6a:	4313      	orrs	r3, r2
 800db6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f003 0308 	and.w	r3, r3, #8
 800db76:	2b00      	cmp	r3, #0
 800db78:	d009      	beq.n	800db8e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800db7a:	4b13      	ldr	r3, [pc, #76]	@ (800dbc8 <HAL_RCC_ClockConfig+0x264>)
 800db7c:	689b      	ldr	r3, [r3, #8]
 800db7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	691b      	ldr	r3, [r3, #16]
 800db86:	00db      	lsls	r3, r3, #3
 800db88:	490f      	ldr	r1, [pc, #60]	@ (800dbc8 <HAL_RCC_ClockConfig+0x264>)
 800db8a:	4313      	orrs	r3, r2
 800db8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800db8e:	f000 f825 	bl	800dbdc <HAL_RCC_GetSysClockFreq>
 800db92:	4602      	mov	r2, r0
 800db94:	4b0c      	ldr	r3, [pc, #48]	@ (800dbc8 <HAL_RCC_ClockConfig+0x264>)
 800db96:	689b      	ldr	r3, [r3, #8]
 800db98:	091b      	lsrs	r3, r3, #4
 800db9a:	f003 030f 	and.w	r3, r3, #15
 800db9e:	490c      	ldr	r1, [pc, #48]	@ (800dbd0 <HAL_RCC_ClockConfig+0x26c>)
 800dba0:	5ccb      	ldrb	r3, [r1, r3]
 800dba2:	f003 031f 	and.w	r3, r3, #31
 800dba6:	fa22 f303 	lsr.w	r3, r2, r3
 800dbaa:	4a0a      	ldr	r2, [pc, #40]	@ (800dbd4 <HAL_RCC_ClockConfig+0x270>)
 800dbac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800dbae:	4b0a      	ldr	r3, [pc, #40]	@ (800dbd8 <HAL_RCC_ClockConfig+0x274>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7fd f81a 	bl	800abec <HAL_InitTick>
 800dbb8:	4603      	mov	r3, r0
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3718      	adds	r7, #24
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	40022000 	.word	0x40022000
 800dbc8:	40021000 	.word	0x40021000
 800dbcc:	04c4b400 	.word	0x04c4b400
 800dbd0:	08014cb0 	.word	0x08014cb0
 800dbd4:	200005b4 	.word	0x200005b4
 800dbd8:	200005b8 	.word	0x200005b8

0800dbdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dbdc:	b480      	push	{r7}
 800dbde:	b087      	sub	sp, #28
 800dbe0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800dbe2:	4b2c      	ldr	r3, [pc, #176]	@ (800dc94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800dbe4:	689b      	ldr	r3, [r3, #8]
 800dbe6:	f003 030c 	and.w	r3, r3, #12
 800dbea:	2b04      	cmp	r3, #4
 800dbec:	d102      	bne.n	800dbf4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800dbee:	4b2a      	ldr	r3, [pc, #168]	@ (800dc98 <HAL_RCC_GetSysClockFreq+0xbc>)
 800dbf0:	613b      	str	r3, [r7, #16]
 800dbf2:	e047      	b.n	800dc84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800dbf4:	4b27      	ldr	r3, [pc, #156]	@ (800dc94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800dbf6:	689b      	ldr	r3, [r3, #8]
 800dbf8:	f003 030c 	and.w	r3, r3, #12
 800dbfc:	2b08      	cmp	r3, #8
 800dbfe:	d102      	bne.n	800dc06 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800dc00:	4b26      	ldr	r3, [pc, #152]	@ (800dc9c <HAL_RCC_GetSysClockFreq+0xc0>)
 800dc02:	613b      	str	r3, [r7, #16]
 800dc04:	e03e      	b.n	800dc84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800dc06:	4b23      	ldr	r3, [pc, #140]	@ (800dc94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800dc08:	689b      	ldr	r3, [r3, #8]
 800dc0a:	f003 030c 	and.w	r3, r3, #12
 800dc0e:	2b0c      	cmp	r3, #12
 800dc10:	d136      	bne.n	800dc80 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800dc12:	4b20      	ldr	r3, [pc, #128]	@ (800dc94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800dc14:	68db      	ldr	r3, [r3, #12]
 800dc16:	f003 0303 	and.w	r3, r3, #3
 800dc1a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800dc1c:	4b1d      	ldr	r3, [pc, #116]	@ (800dc94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800dc1e:	68db      	ldr	r3, [r3, #12]
 800dc20:	091b      	lsrs	r3, r3, #4
 800dc22:	f003 030f 	and.w	r3, r3, #15
 800dc26:	3301      	adds	r3, #1
 800dc28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2b03      	cmp	r3, #3
 800dc2e:	d10c      	bne.n	800dc4a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800dc30:	4a1a      	ldr	r2, [pc, #104]	@ (800dc9c <HAL_RCC_GetSysClockFreq+0xc0>)
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc38:	4a16      	ldr	r2, [pc, #88]	@ (800dc94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800dc3a:	68d2      	ldr	r2, [r2, #12]
 800dc3c:	0a12      	lsrs	r2, r2, #8
 800dc3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800dc42:	fb02 f303 	mul.w	r3, r2, r3
 800dc46:	617b      	str	r3, [r7, #20]
      break;
 800dc48:	e00c      	b.n	800dc64 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800dc4a:	4a13      	ldr	r2, [pc, #76]	@ (800dc98 <HAL_RCC_GetSysClockFreq+0xbc>)
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc52:	4a10      	ldr	r2, [pc, #64]	@ (800dc94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800dc54:	68d2      	ldr	r2, [r2, #12]
 800dc56:	0a12      	lsrs	r2, r2, #8
 800dc58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800dc5c:	fb02 f303 	mul.w	r3, r2, r3
 800dc60:	617b      	str	r3, [r7, #20]
      break;
 800dc62:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800dc64:	4b0b      	ldr	r3, [pc, #44]	@ (800dc94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800dc66:	68db      	ldr	r3, [r3, #12]
 800dc68:	0e5b      	lsrs	r3, r3, #25
 800dc6a:	f003 0303 	and.w	r3, r3, #3
 800dc6e:	3301      	adds	r3, #1
 800dc70:	005b      	lsls	r3, r3, #1
 800dc72:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800dc74:	697a      	ldr	r2, [r7, #20]
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc7c:	613b      	str	r3, [r7, #16]
 800dc7e:	e001      	b.n	800dc84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800dc80:	2300      	movs	r3, #0
 800dc82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800dc84:	693b      	ldr	r3, [r7, #16]
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	371c      	adds	r7, #28
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr
 800dc92:	bf00      	nop
 800dc94:	40021000 	.word	0x40021000
 800dc98:	00f42400 	.word	0x00f42400
 800dc9c:	016e3600 	.word	0x016e3600

0800dca0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dca0:	b480      	push	{r7}
 800dca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dca4:	4b03      	ldr	r3, [pc, #12]	@ (800dcb4 <HAL_RCC_GetHCLKFreq+0x14>)
 800dca6:	681b      	ldr	r3, [r3, #0]
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr
 800dcb2:	bf00      	nop
 800dcb4:	200005b4 	.word	0x200005b4

0800dcb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800dcbc:	f7ff fff0 	bl	800dca0 <HAL_RCC_GetHCLKFreq>
 800dcc0:	4602      	mov	r2, r0
 800dcc2:	4b06      	ldr	r3, [pc, #24]	@ (800dcdc <HAL_RCC_GetPCLK1Freq+0x24>)
 800dcc4:	689b      	ldr	r3, [r3, #8]
 800dcc6:	0a1b      	lsrs	r3, r3, #8
 800dcc8:	f003 0307 	and.w	r3, r3, #7
 800dccc:	4904      	ldr	r1, [pc, #16]	@ (800dce0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800dcce:	5ccb      	ldrb	r3, [r1, r3]
 800dcd0:	f003 031f 	and.w	r3, r3, #31
 800dcd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	bd80      	pop	{r7, pc}
 800dcdc:	40021000 	.word	0x40021000
 800dce0:	08014cc0 	.word	0x08014cc0

0800dce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800dce8:	f7ff ffda 	bl	800dca0 <HAL_RCC_GetHCLKFreq>
 800dcec:	4602      	mov	r2, r0
 800dcee:	4b06      	ldr	r3, [pc, #24]	@ (800dd08 <HAL_RCC_GetPCLK2Freq+0x24>)
 800dcf0:	689b      	ldr	r3, [r3, #8]
 800dcf2:	0adb      	lsrs	r3, r3, #11
 800dcf4:	f003 0307 	and.w	r3, r3, #7
 800dcf8:	4904      	ldr	r1, [pc, #16]	@ (800dd0c <HAL_RCC_GetPCLK2Freq+0x28>)
 800dcfa:	5ccb      	ldrb	r3, [r1, r3]
 800dcfc:	f003 031f 	and.w	r3, r3, #31
 800dd00:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	bd80      	pop	{r7, pc}
 800dd08:	40021000 	.word	0x40021000
 800dd0c:	08014cc0 	.word	0x08014cc0

0800dd10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800dd10:	b480      	push	{r7}
 800dd12:	b087      	sub	sp, #28
 800dd14:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800dd16:	4b1e      	ldr	r3, [pc, #120]	@ (800dd90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800dd18:	68db      	ldr	r3, [r3, #12]
 800dd1a:	f003 0303 	and.w	r3, r3, #3
 800dd1e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800dd20:	4b1b      	ldr	r3, [pc, #108]	@ (800dd90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800dd22:	68db      	ldr	r3, [r3, #12]
 800dd24:	091b      	lsrs	r3, r3, #4
 800dd26:	f003 030f 	and.w	r3, r3, #15
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	2b03      	cmp	r3, #3
 800dd32:	d10c      	bne.n	800dd4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800dd34:	4a17      	ldr	r2, [pc, #92]	@ (800dd94 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd3c:	4a14      	ldr	r2, [pc, #80]	@ (800dd90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800dd3e:	68d2      	ldr	r2, [r2, #12]
 800dd40:	0a12      	lsrs	r2, r2, #8
 800dd42:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800dd46:	fb02 f303 	mul.w	r3, r2, r3
 800dd4a:	617b      	str	r3, [r7, #20]
    break;
 800dd4c:	e00c      	b.n	800dd68 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800dd4e:	4a12      	ldr	r2, [pc, #72]	@ (800dd98 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd56:	4a0e      	ldr	r2, [pc, #56]	@ (800dd90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800dd58:	68d2      	ldr	r2, [r2, #12]
 800dd5a:	0a12      	lsrs	r2, r2, #8
 800dd5c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800dd60:	fb02 f303 	mul.w	r3, r2, r3
 800dd64:	617b      	str	r3, [r7, #20]
    break;
 800dd66:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800dd68:	4b09      	ldr	r3, [pc, #36]	@ (800dd90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800dd6a:	68db      	ldr	r3, [r3, #12]
 800dd6c:	0e5b      	lsrs	r3, r3, #25
 800dd6e:	f003 0303 	and.w	r3, r3, #3
 800dd72:	3301      	adds	r3, #1
 800dd74:	005b      	lsls	r3, r3, #1
 800dd76:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800dd78:	697a      	ldr	r2, [r7, #20]
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd80:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800dd82:	687b      	ldr	r3, [r7, #4]
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	371c      	adds	r7, #28
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr
 800dd90:	40021000 	.word	0x40021000
 800dd94:	016e3600 	.word	0x016e3600
 800dd98:	00f42400 	.word	0x00f42400

0800dd9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b086      	sub	sp, #24
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800dda4:	2300      	movs	r3, #0
 800dda6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800dda8:	2300      	movs	r3, #0
 800ddaa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	f000 8098 	beq.w	800deea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ddbe:	4b43      	ldr	r3, [pc, #268]	@ (800decc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ddc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d10d      	bne.n	800dde6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ddca:	4b40      	ldr	r3, [pc, #256]	@ (800decc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ddcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddce:	4a3f      	ldr	r2, [pc, #252]	@ (800decc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ddd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ddd4:	6593      	str	r3, [r2, #88]	@ 0x58
 800ddd6:	4b3d      	ldr	r3, [pc, #244]	@ (800decc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ddd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ddde:	60bb      	str	r3, [r7, #8]
 800dde0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dde2:	2301      	movs	r3, #1
 800dde4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800dde6:	4b3a      	ldr	r3, [pc, #232]	@ (800ded0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	4a39      	ldr	r2, [pc, #228]	@ (800ded0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ddec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ddf0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ddf2:	f7fc ff47 	bl	800ac84 <HAL_GetTick>
 800ddf6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ddf8:	e009      	b.n	800de0e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ddfa:	f7fc ff43 	bl	800ac84 <HAL_GetTick>
 800ddfe:	4602      	mov	r2, r0
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	1ad3      	subs	r3, r2, r3
 800de04:	2b02      	cmp	r3, #2
 800de06:	d902      	bls.n	800de0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800de08:	2303      	movs	r3, #3
 800de0a:	74fb      	strb	r3, [r7, #19]
        break;
 800de0c:	e005      	b.n	800de1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800de0e:	4b30      	ldr	r3, [pc, #192]	@ (800ded0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de16:	2b00      	cmp	r3, #0
 800de18:	d0ef      	beq.n	800ddfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800de1a:	7cfb      	ldrb	r3, [r7, #19]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d159      	bne.n	800ded4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800de20:	4b2a      	ldr	r3, [pc, #168]	@ (800decc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800de22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800de2a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d01e      	beq.n	800de70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de36:	697a      	ldr	r2, [r7, #20]
 800de38:	429a      	cmp	r2, r3
 800de3a:	d019      	beq.n	800de70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800de3c:	4b23      	ldr	r3, [pc, #140]	@ (800decc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800de3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800de46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800de48:	4b20      	ldr	r3, [pc, #128]	@ (800decc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800de4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de4e:	4a1f      	ldr	r2, [pc, #124]	@ (800decc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800de50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800de54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800de58:	4b1c      	ldr	r3, [pc, #112]	@ (800decc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800de5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de5e:	4a1b      	ldr	r2, [pc, #108]	@ (800decc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800de60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800de64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800de68:	4a18      	ldr	r2, [pc, #96]	@ (800decc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	f003 0301 	and.w	r3, r3, #1
 800de76:	2b00      	cmp	r3, #0
 800de78:	d016      	beq.n	800dea8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de7a:	f7fc ff03 	bl	800ac84 <HAL_GetTick>
 800de7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800de80:	e00b      	b.n	800de9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800de82:	f7fc feff 	bl	800ac84 <HAL_GetTick>
 800de86:	4602      	mov	r2, r0
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	1ad3      	subs	r3, r2, r3
 800de8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800de90:	4293      	cmp	r3, r2
 800de92:	d902      	bls.n	800de9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800de94:	2303      	movs	r3, #3
 800de96:	74fb      	strb	r3, [r7, #19]
            break;
 800de98:	e006      	b.n	800dea8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800de9a:	4b0c      	ldr	r3, [pc, #48]	@ (800decc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800de9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dea0:	f003 0302 	and.w	r3, r3, #2
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d0ec      	beq.n	800de82 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800dea8:	7cfb      	ldrb	r3, [r7, #19]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d10b      	bne.n	800dec6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800deae:	4b07      	ldr	r3, [pc, #28]	@ (800decc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800deb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800deb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800debc:	4903      	ldr	r1, [pc, #12]	@ (800decc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800debe:	4313      	orrs	r3, r2
 800dec0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800dec4:	e008      	b.n	800ded8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800dec6:	7cfb      	ldrb	r3, [r7, #19]
 800dec8:	74bb      	strb	r3, [r7, #18]
 800deca:	e005      	b.n	800ded8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800decc:	40021000 	.word	0x40021000
 800ded0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ded4:	7cfb      	ldrb	r3, [r7, #19]
 800ded6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ded8:	7c7b      	ldrb	r3, [r7, #17]
 800deda:	2b01      	cmp	r3, #1
 800dedc:	d105      	bne.n	800deea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dede:	4ba7      	ldr	r3, [pc, #668]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dee2:	4aa6      	ldr	r2, [pc, #664]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dee4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dee8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f003 0301 	and.w	r3, r3, #1
 800def2:	2b00      	cmp	r3, #0
 800def4:	d00a      	beq.n	800df0c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800def6:	4ba1      	ldr	r3, [pc, #644]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800def8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800defc:	f023 0203 	bic.w	r2, r3, #3
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	685b      	ldr	r3, [r3, #4]
 800df04:	499d      	ldr	r1, [pc, #628]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df06:	4313      	orrs	r3, r2
 800df08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f003 0302 	and.w	r3, r3, #2
 800df14:	2b00      	cmp	r3, #0
 800df16:	d00a      	beq.n	800df2e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800df18:	4b98      	ldr	r3, [pc, #608]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df1e:	f023 020c 	bic.w	r2, r3, #12
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	689b      	ldr	r3, [r3, #8]
 800df26:	4995      	ldr	r1, [pc, #596]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df28:	4313      	orrs	r3, r2
 800df2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	f003 0304 	and.w	r3, r3, #4
 800df36:	2b00      	cmp	r3, #0
 800df38:	d00a      	beq.n	800df50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800df3a:	4b90      	ldr	r3, [pc, #576]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df40:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	68db      	ldr	r3, [r3, #12]
 800df48:	498c      	ldr	r1, [pc, #560]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df4a:	4313      	orrs	r3, r2
 800df4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f003 0308 	and.w	r3, r3, #8
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d00a      	beq.n	800df72 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800df5c:	4b87      	ldr	r3, [pc, #540]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	691b      	ldr	r3, [r3, #16]
 800df6a:	4984      	ldr	r1, [pc, #528]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df6c:	4313      	orrs	r3, r2
 800df6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	f003 0310 	and.w	r3, r3, #16
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d00a      	beq.n	800df94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800df7e:	4b7f      	ldr	r3, [pc, #508]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	695b      	ldr	r3, [r3, #20]
 800df8c:	497b      	ldr	r1, [pc, #492]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df8e:	4313      	orrs	r3, r2
 800df90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f003 0320 	and.w	r3, r3, #32
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d00a      	beq.n	800dfb6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800dfa0:	4b76      	ldr	r3, [pc, #472]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dfa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dfa6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	699b      	ldr	r3, [r3, #24]
 800dfae:	4973      	ldr	r1, [pc, #460]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d00a      	beq.n	800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dfc2:	4b6e      	ldr	r3, [pc, #440]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dfc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dfc8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	69db      	ldr	r3, [r3, #28]
 800dfd0:	496a      	ldr	r1, [pc, #424]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dfd2:	4313      	orrs	r3, r2
 800dfd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d00a      	beq.n	800dffa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800dfe4:	4b65      	ldr	r3, [pc, #404]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dfe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dfea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6a1b      	ldr	r3, [r3, #32]
 800dff2:	4962      	ldr	r1, [pc, #392]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dff4:	4313      	orrs	r3, r2
 800dff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e002:	2b00      	cmp	r3, #0
 800e004:	d00a      	beq.n	800e01c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e006:	4b5d      	ldr	r3, [pc, #372]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e00c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e014:	4959      	ldr	r1, [pc, #356]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e016:	4313      	orrs	r3, r2
 800e018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e024:	2b00      	cmp	r3, #0
 800e026:	d00a      	beq.n	800e03e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e028:	4b54      	ldr	r3, [pc, #336]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e02a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e02e:	f023 0203 	bic.w	r2, r3, #3
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e036:	4951      	ldr	r1, [pc, #324]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e038:	4313      	orrs	r3, r2
 800e03a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e046:	2b00      	cmp	r3, #0
 800e048:	d00a      	beq.n	800e060 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e04a:	4b4c      	ldr	r3, [pc, #304]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e050:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e058:	4948      	ldr	r1, [pc, #288]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e05a:	4313      	orrs	r3, r2
 800e05c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d015      	beq.n	800e098 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e06c:	4b43      	ldr	r3, [pc, #268]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e06e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e072:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e07a:	4940      	ldr	r1, [pc, #256]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e07c:	4313      	orrs	r3, r2
 800e07e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e086:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e08a:	d105      	bne.n	800e098 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e08c:	4b3b      	ldr	r3, [pc, #236]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e08e:	68db      	ldr	r3, [r3, #12]
 800e090:	4a3a      	ldr	r2, [pc, #232]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e092:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e096:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d015      	beq.n	800e0d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e0a4:	4b35      	ldr	r3, [pc, #212]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e0a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e0aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0b2:	4932      	ldr	r1, [pc, #200]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e0b4:	4313      	orrs	r3, r2
 800e0b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e0c2:	d105      	bne.n	800e0d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e0c4:	4b2d      	ldr	r3, [pc, #180]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e0c6:	68db      	ldr	r3, [r3, #12]
 800e0c8:	4a2c      	ldr	r2, [pc, #176]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e0ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e0ce:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d015      	beq.n	800e108 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e0dc:	4b27      	ldr	r3, [pc, #156]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e0de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e0e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0ea:	4924      	ldr	r1, [pc, #144]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e0ec:	4313      	orrs	r3, r2
 800e0ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e0fa:	d105      	bne.n	800e108 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e0fc:	4b1f      	ldr	r3, [pc, #124]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e0fe:	68db      	ldr	r3, [r3, #12]
 800e100:	4a1e      	ldr	r2, [pc, #120]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e102:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e106:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e110:	2b00      	cmp	r3, #0
 800e112:	d015      	beq.n	800e140 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e114:	4b19      	ldr	r3, [pc, #100]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e11a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e122:	4916      	ldr	r1, [pc, #88]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e124:	4313      	orrs	r3, r2
 800e126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e12e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e132:	d105      	bne.n	800e140 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e134:	4b11      	ldr	r3, [pc, #68]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e136:	68db      	ldr	r3, [r3, #12]
 800e138:	4a10      	ldr	r2, [pc, #64]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e13a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e13e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d019      	beq.n	800e180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e14c:	4b0b      	ldr	r3, [pc, #44]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e14e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e152:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e15a:	4908      	ldr	r1, [pc, #32]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e15c:	4313      	orrs	r3, r2
 800e15e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e166:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e16a:	d109      	bne.n	800e180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e16c:	4b03      	ldr	r3, [pc, #12]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e16e:	68db      	ldr	r3, [r3, #12]
 800e170:	4a02      	ldr	r2, [pc, #8]	@ (800e17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e172:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e176:	60d3      	str	r3, [r2, #12]
 800e178:	e002      	b.n	800e180 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800e17a:	bf00      	nop
 800e17c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d015      	beq.n	800e1b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800e18c:	4b29      	ldr	r3, [pc, #164]	@ (800e234 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e192:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e19a:	4926      	ldr	r1, [pc, #152]	@ (800e234 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e19c:	4313      	orrs	r3, r2
 800e19e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e1aa:	d105      	bne.n	800e1b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e1ac:	4b21      	ldr	r3, [pc, #132]	@ (800e234 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e1ae:	68db      	ldr	r3, [r3, #12]
 800e1b0:	4a20      	ldr	r2, [pc, #128]	@ (800e234 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e1b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e1b6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d015      	beq.n	800e1f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800e1c4:	4b1b      	ldr	r3, [pc, #108]	@ (800e234 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e1c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e1ca:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e1d2:	4918      	ldr	r1, [pc, #96]	@ (800e234 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e1d4:	4313      	orrs	r3, r2
 800e1d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e1de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e1e2:	d105      	bne.n	800e1f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e1e4:	4b13      	ldr	r3, [pc, #76]	@ (800e234 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e1e6:	68db      	ldr	r3, [r3, #12]
 800e1e8:	4a12      	ldr	r2, [pc, #72]	@ (800e234 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e1ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e1ee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d015      	beq.n	800e228 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e1fc:	4b0d      	ldr	r3, [pc, #52]	@ (800e234 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e1fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e202:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e20a:	490a      	ldr	r1, [pc, #40]	@ (800e234 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e20c:	4313      	orrs	r3, r2
 800e20e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e216:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e21a:	d105      	bne.n	800e228 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e21c:	4b05      	ldr	r3, [pc, #20]	@ (800e234 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e21e:	68db      	ldr	r3, [r3, #12]
 800e220:	4a04      	ldr	r2, [pc, #16]	@ (800e234 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e222:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e226:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800e228:	7cbb      	ldrb	r3, [r7, #18]
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3718      	adds	r7, #24
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}
 800e232:	bf00      	nop
 800e234:	40021000 	.word	0x40021000

0800e238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b082      	sub	sp, #8
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d101      	bne.n	800e24a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e246:	2301      	movs	r3, #1
 800e248:	e054      	b.n	800e2f4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e250:	b2db      	uxtb	r3, r3
 800e252:	2b00      	cmp	r3, #0
 800e254:	d111      	bne.n	800e27a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2200      	movs	r2, #0
 800e25a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f001 fee2 	bl	8010028 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d102      	bne.n	800e272 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	4a23      	ldr	r2, [pc, #140]	@ (800e2fc <HAL_TIM_Base_Init+0xc4>)
 800e270:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2202      	movs	r2, #2
 800e27e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681a      	ldr	r2, [r3, #0]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	3304      	adds	r3, #4
 800e28a:	4619      	mov	r1, r3
 800e28c:	4610      	mov	r0, r2
 800e28e:	f001 fa2b 	bl	800f6e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2201      	movs	r2, #1
 800e296:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2201      	movs	r2, #1
 800e29e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2201      	movs	r2, #1
 800e2a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2201      	movs	r2, #1
 800e2be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2201      	movs	r2, #1
 800e2c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2201      	movs	r2, #1
 800e2de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e2f2:	2300      	movs	r3, #0
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3708      	adds	r7, #8
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	0800a4ad 	.word	0x0800a4ad

0800e300 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e300:	b480      	push	{r7}
 800e302:	b085      	sub	sp, #20
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e30e:	b2db      	uxtb	r3, r3
 800e310:	2b01      	cmp	r3, #1
 800e312:	d001      	beq.n	800e318 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e314:	2301      	movs	r3, #1
 800e316:	e04c      	b.n	800e3b2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2202      	movs	r2, #2
 800e31c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	4a26      	ldr	r2, [pc, #152]	@ (800e3c0 <HAL_TIM_Base_Start+0xc0>)
 800e326:	4293      	cmp	r3, r2
 800e328:	d022      	beq.n	800e370 <HAL_TIM_Base_Start+0x70>
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e332:	d01d      	beq.n	800e370 <HAL_TIM_Base_Start+0x70>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4a22      	ldr	r2, [pc, #136]	@ (800e3c4 <HAL_TIM_Base_Start+0xc4>)
 800e33a:	4293      	cmp	r3, r2
 800e33c:	d018      	beq.n	800e370 <HAL_TIM_Base_Start+0x70>
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	4a21      	ldr	r2, [pc, #132]	@ (800e3c8 <HAL_TIM_Base_Start+0xc8>)
 800e344:	4293      	cmp	r3, r2
 800e346:	d013      	beq.n	800e370 <HAL_TIM_Base_Start+0x70>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	4a1f      	ldr	r2, [pc, #124]	@ (800e3cc <HAL_TIM_Base_Start+0xcc>)
 800e34e:	4293      	cmp	r3, r2
 800e350:	d00e      	beq.n	800e370 <HAL_TIM_Base_Start+0x70>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	4a1e      	ldr	r2, [pc, #120]	@ (800e3d0 <HAL_TIM_Base_Start+0xd0>)
 800e358:	4293      	cmp	r3, r2
 800e35a:	d009      	beq.n	800e370 <HAL_TIM_Base_Start+0x70>
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4a1c      	ldr	r2, [pc, #112]	@ (800e3d4 <HAL_TIM_Base_Start+0xd4>)
 800e362:	4293      	cmp	r3, r2
 800e364:	d004      	beq.n	800e370 <HAL_TIM_Base_Start+0x70>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	4a1b      	ldr	r2, [pc, #108]	@ (800e3d8 <HAL_TIM_Base_Start+0xd8>)
 800e36c:	4293      	cmp	r3, r2
 800e36e:	d115      	bne.n	800e39c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	689a      	ldr	r2, [r3, #8]
 800e376:	4b19      	ldr	r3, [pc, #100]	@ (800e3dc <HAL_TIM_Base_Start+0xdc>)
 800e378:	4013      	ands	r3, r2
 800e37a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2b06      	cmp	r3, #6
 800e380:	d015      	beq.n	800e3ae <HAL_TIM_Base_Start+0xae>
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e388:	d011      	beq.n	800e3ae <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	681a      	ldr	r2, [r3, #0]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	f042 0201 	orr.w	r2, r2, #1
 800e398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e39a:	e008      	b.n	800e3ae <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f042 0201 	orr.w	r2, r2, #1
 800e3aa:	601a      	str	r2, [r3, #0]
 800e3ac:	e000      	b.n	800e3b0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e3b0:	2300      	movs	r3, #0
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3714      	adds	r7, #20
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3bc:	4770      	bx	lr
 800e3be:	bf00      	nop
 800e3c0:	40012c00 	.word	0x40012c00
 800e3c4:	40000400 	.word	0x40000400
 800e3c8:	40000800 	.word	0x40000800
 800e3cc:	40000c00 	.word	0x40000c00
 800e3d0:	40013400 	.word	0x40013400
 800e3d4:	40014000 	.word	0x40014000
 800e3d8:	40015000 	.word	0x40015000
 800e3dc:	00010007 	.word	0x00010007

0800e3e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b085      	sub	sp, #20
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e3ee:	b2db      	uxtb	r3, r3
 800e3f0:	2b01      	cmp	r3, #1
 800e3f2:	d001      	beq.n	800e3f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	e054      	b.n	800e4a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2202      	movs	r2, #2
 800e3fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	68da      	ldr	r2, [r3, #12]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	f042 0201 	orr.w	r2, r2, #1
 800e40e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	4a26      	ldr	r2, [pc, #152]	@ (800e4b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800e416:	4293      	cmp	r3, r2
 800e418:	d022      	beq.n	800e460 <HAL_TIM_Base_Start_IT+0x80>
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e422:	d01d      	beq.n	800e460 <HAL_TIM_Base_Start_IT+0x80>
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	4a22      	ldr	r2, [pc, #136]	@ (800e4b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800e42a:	4293      	cmp	r3, r2
 800e42c:	d018      	beq.n	800e460 <HAL_TIM_Base_Start_IT+0x80>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	4a21      	ldr	r2, [pc, #132]	@ (800e4b8 <HAL_TIM_Base_Start_IT+0xd8>)
 800e434:	4293      	cmp	r3, r2
 800e436:	d013      	beq.n	800e460 <HAL_TIM_Base_Start_IT+0x80>
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	4a1f      	ldr	r2, [pc, #124]	@ (800e4bc <HAL_TIM_Base_Start_IT+0xdc>)
 800e43e:	4293      	cmp	r3, r2
 800e440:	d00e      	beq.n	800e460 <HAL_TIM_Base_Start_IT+0x80>
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	4a1e      	ldr	r2, [pc, #120]	@ (800e4c0 <HAL_TIM_Base_Start_IT+0xe0>)
 800e448:	4293      	cmp	r3, r2
 800e44a:	d009      	beq.n	800e460 <HAL_TIM_Base_Start_IT+0x80>
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	4a1c      	ldr	r2, [pc, #112]	@ (800e4c4 <HAL_TIM_Base_Start_IT+0xe4>)
 800e452:	4293      	cmp	r3, r2
 800e454:	d004      	beq.n	800e460 <HAL_TIM_Base_Start_IT+0x80>
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	4a1b      	ldr	r2, [pc, #108]	@ (800e4c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d115      	bne.n	800e48c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	689a      	ldr	r2, [r3, #8]
 800e466:	4b19      	ldr	r3, [pc, #100]	@ (800e4cc <HAL_TIM_Base_Start_IT+0xec>)
 800e468:	4013      	ands	r3, r2
 800e46a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	2b06      	cmp	r3, #6
 800e470:	d015      	beq.n	800e49e <HAL_TIM_Base_Start_IT+0xbe>
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e478:	d011      	beq.n	800e49e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	681a      	ldr	r2, [r3, #0]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f042 0201 	orr.w	r2, r2, #1
 800e488:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e48a:	e008      	b.n	800e49e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	681a      	ldr	r2, [r3, #0]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f042 0201 	orr.w	r2, r2, #1
 800e49a:	601a      	str	r2, [r3, #0]
 800e49c:	e000      	b.n	800e4a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e49e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e4a0:	2300      	movs	r3, #0
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3714      	adds	r7, #20
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ac:	4770      	bx	lr
 800e4ae:	bf00      	nop
 800e4b0:	40012c00 	.word	0x40012c00
 800e4b4:	40000400 	.word	0x40000400
 800e4b8:	40000800 	.word	0x40000800
 800e4bc:	40000c00 	.word	0x40000c00
 800e4c0:	40013400 	.word	0x40013400
 800e4c4:	40014000 	.word	0x40014000
 800e4c8:	40015000 	.word	0x40015000
 800e4cc:	00010007 	.word	0x00010007

0800e4d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b082      	sub	sp, #8
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d101      	bne.n	800e4e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e4de:	2301      	movs	r3, #1
 800e4e0:	e054      	b.n	800e58c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e4e8:	b2db      	uxtb	r3, r3
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d111      	bne.n	800e512 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f001 fd96 	bl	8010028 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e500:	2b00      	cmp	r3, #0
 800e502:	d102      	bne.n	800e50a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	4a23      	ldr	r2, [pc, #140]	@ (800e594 <HAL_TIM_PWM_Init+0xc4>)
 800e508:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2202      	movs	r2, #2
 800e516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681a      	ldr	r2, [r3, #0]
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	3304      	adds	r3, #4
 800e522:	4619      	mov	r1, r3
 800e524:	4610      	mov	r0, r2
 800e526:	f001 f8df 	bl	800f6e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2201      	movs	r2, #1
 800e52e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2201      	movs	r2, #1
 800e536:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2201      	movs	r2, #1
 800e53e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2201      	movs	r2, #1
 800e546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2201      	movs	r2, #1
 800e54e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2201      	movs	r2, #1
 800e556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2201      	movs	r2, #1
 800e55e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2201      	movs	r2, #1
 800e566:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2201      	movs	r2, #1
 800e56e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2201      	movs	r2, #1
 800e576:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2201      	movs	r2, #1
 800e57e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2201      	movs	r2, #1
 800e586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e58a:	2300      	movs	r3, #0
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	3708      	adds	r7, #8
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}
 800e594:	0800a461 	.word	0x0800a461

0800e598 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b084      	sub	sp, #16
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d109      	bne.n	800e5bc <HAL_TIM_PWM_Start+0x24>
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	bf14      	ite	ne
 800e5b4:	2301      	movne	r3, #1
 800e5b6:	2300      	moveq	r3, #0
 800e5b8:	b2db      	uxtb	r3, r3
 800e5ba:	e03c      	b.n	800e636 <HAL_TIM_PWM_Start+0x9e>
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	2b04      	cmp	r3, #4
 800e5c0:	d109      	bne.n	800e5d6 <HAL_TIM_PWM_Start+0x3e>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e5c8:	b2db      	uxtb	r3, r3
 800e5ca:	2b01      	cmp	r3, #1
 800e5cc:	bf14      	ite	ne
 800e5ce:	2301      	movne	r3, #1
 800e5d0:	2300      	moveq	r3, #0
 800e5d2:	b2db      	uxtb	r3, r3
 800e5d4:	e02f      	b.n	800e636 <HAL_TIM_PWM_Start+0x9e>
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	2b08      	cmp	r3, #8
 800e5da:	d109      	bne.n	800e5f0 <HAL_TIM_PWM_Start+0x58>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e5e2:	b2db      	uxtb	r3, r3
 800e5e4:	2b01      	cmp	r3, #1
 800e5e6:	bf14      	ite	ne
 800e5e8:	2301      	movne	r3, #1
 800e5ea:	2300      	moveq	r3, #0
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	e022      	b.n	800e636 <HAL_TIM_PWM_Start+0x9e>
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	2b0c      	cmp	r3, #12
 800e5f4:	d109      	bne.n	800e60a <HAL_TIM_PWM_Start+0x72>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e5fc:	b2db      	uxtb	r3, r3
 800e5fe:	2b01      	cmp	r3, #1
 800e600:	bf14      	ite	ne
 800e602:	2301      	movne	r3, #1
 800e604:	2300      	moveq	r3, #0
 800e606:	b2db      	uxtb	r3, r3
 800e608:	e015      	b.n	800e636 <HAL_TIM_PWM_Start+0x9e>
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	2b10      	cmp	r3, #16
 800e60e:	d109      	bne.n	800e624 <HAL_TIM_PWM_Start+0x8c>
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e616:	b2db      	uxtb	r3, r3
 800e618:	2b01      	cmp	r3, #1
 800e61a:	bf14      	ite	ne
 800e61c:	2301      	movne	r3, #1
 800e61e:	2300      	moveq	r3, #0
 800e620:	b2db      	uxtb	r3, r3
 800e622:	e008      	b.n	800e636 <HAL_TIM_PWM_Start+0x9e>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e62a:	b2db      	uxtb	r3, r3
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	bf14      	ite	ne
 800e630:	2301      	movne	r3, #1
 800e632:	2300      	moveq	r3, #0
 800e634:	b2db      	uxtb	r3, r3
 800e636:	2b00      	cmp	r3, #0
 800e638:	d001      	beq.n	800e63e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e63a:	2301      	movs	r3, #1
 800e63c:	e0a6      	b.n	800e78c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d104      	bne.n	800e64e <HAL_TIM_PWM_Start+0xb6>
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2202      	movs	r2, #2
 800e648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e64c:	e023      	b.n	800e696 <HAL_TIM_PWM_Start+0xfe>
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	2b04      	cmp	r3, #4
 800e652:	d104      	bne.n	800e65e <HAL_TIM_PWM_Start+0xc6>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2202      	movs	r2, #2
 800e658:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e65c:	e01b      	b.n	800e696 <HAL_TIM_PWM_Start+0xfe>
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	2b08      	cmp	r3, #8
 800e662:	d104      	bne.n	800e66e <HAL_TIM_PWM_Start+0xd6>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2202      	movs	r2, #2
 800e668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e66c:	e013      	b.n	800e696 <HAL_TIM_PWM_Start+0xfe>
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	2b0c      	cmp	r3, #12
 800e672:	d104      	bne.n	800e67e <HAL_TIM_PWM_Start+0xe6>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2202      	movs	r2, #2
 800e678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e67c:	e00b      	b.n	800e696 <HAL_TIM_PWM_Start+0xfe>
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	2b10      	cmp	r3, #16
 800e682:	d104      	bne.n	800e68e <HAL_TIM_PWM_Start+0xf6>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2202      	movs	r2, #2
 800e688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e68c:	e003      	b.n	800e696 <HAL_TIM_PWM_Start+0xfe>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2202      	movs	r2, #2
 800e692:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	2201      	movs	r2, #1
 800e69c:	6839      	ldr	r1, [r7, #0]
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f001 fc9c 	bl	800ffdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	4a3a      	ldr	r2, [pc, #232]	@ (800e794 <HAL_TIM_PWM_Start+0x1fc>)
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d018      	beq.n	800e6e0 <HAL_TIM_PWM_Start+0x148>
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	4a39      	ldr	r2, [pc, #228]	@ (800e798 <HAL_TIM_PWM_Start+0x200>)
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d013      	beq.n	800e6e0 <HAL_TIM_PWM_Start+0x148>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	4a37      	ldr	r2, [pc, #220]	@ (800e79c <HAL_TIM_PWM_Start+0x204>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d00e      	beq.n	800e6e0 <HAL_TIM_PWM_Start+0x148>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	4a36      	ldr	r2, [pc, #216]	@ (800e7a0 <HAL_TIM_PWM_Start+0x208>)
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	d009      	beq.n	800e6e0 <HAL_TIM_PWM_Start+0x148>
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a34      	ldr	r2, [pc, #208]	@ (800e7a4 <HAL_TIM_PWM_Start+0x20c>)
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d004      	beq.n	800e6e0 <HAL_TIM_PWM_Start+0x148>
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	4a33      	ldr	r2, [pc, #204]	@ (800e7a8 <HAL_TIM_PWM_Start+0x210>)
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d101      	bne.n	800e6e4 <HAL_TIM_PWM_Start+0x14c>
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	e000      	b.n	800e6e6 <HAL_TIM_PWM_Start+0x14e>
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d007      	beq.n	800e6fa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e6f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	4a25      	ldr	r2, [pc, #148]	@ (800e794 <HAL_TIM_PWM_Start+0x1fc>)
 800e700:	4293      	cmp	r3, r2
 800e702:	d022      	beq.n	800e74a <HAL_TIM_PWM_Start+0x1b2>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e70c:	d01d      	beq.n	800e74a <HAL_TIM_PWM_Start+0x1b2>
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	4a26      	ldr	r2, [pc, #152]	@ (800e7ac <HAL_TIM_PWM_Start+0x214>)
 800e714:	4293      	cmp	r3, r2
 800e716:	d018      	beq.n	800e74a <HAL_TIM_PWM_Start+0x1b2>
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	4a24      	ldr	r2, [pc, #144]	@ (800e7b0 <HAL_TIM_PWM_Start+0x218>)
 800e71e:	4293      	cmp	r3, r2
 800e720:	d013      	beq.n	800e74a <HAL_TIM_PWM_Start+0x1b2>
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	4a23      	ldr	r2, [pc, #140]	@ (800e7b4 <HAL_TIM_PWM_Start+0x21c>)
 800e728:	4293      	cmp	r3, r2
 800e72a:	d00e      	beq.n	800e74a <HAL_TIM_PWM_Start+0x1b2>
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	4a19      	ldr	r2, [pc, #100]	@ (800e798 <HAL_TIM_PWM_Start+0x200>)
 800e732:	4293      	cmp	r3, r2
 800e734:	d009      	beq.n	800e74a <HAL_TIM_PWM_Start+0x1b2>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	4a18      	ldr	r2, [pc, #96]	@ (800e79c <HAL_TIM_PWM_Start+0x204>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d004      	beq.n	800e74a <HAL_TIM_PWM_Start+0x1b2>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	4a18      	ldr	r2, [pc, #96]	@ (800e7a8 <HAL_TIM_PWM_Start+0x210>)
 800e746:	4293      	cmp	r3, r2
 800e748:	d115      	bne.n	800e776 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	689a      	ldr	r2, [r3, #8]
 800e750:	4b19      	ldr	r3, [pc, #100]	@ (800e7b8 <HAL_TIM_PWM_Start+0x220>)
 800e752:	4013      	ands	r3, r2
 800e754:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2b06      	cmp	r3, #6
 800e75a:	d015      	beq.n	800e788 <HAL_TIM_PWM_Start+0x1f0>
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e762:	d011      	beq.n	800e788 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	681a      	ldr	r2, [r3, #0]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	f042 0201 	orr.w	r2, r2, #1
 800e772:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e774:	e008      	b.n	800e788 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f042 0201 	orr.w	r2, r2, #1
 800e784:	601a      	str	r2, [r3, #0]
 800e786:	e000      	b.n	800e78a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e788:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e78a:	2300      	movs	r3, #0
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3710      	adds	r7, #16
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}
 800e794:	40012c00 	.word	0x40012c00
 800e798:	40013400 	.word	0x40013400
 800e79c:	40014000 	.word	0x40014000
 800e7a0:	40014400 	.word	0x40014400
 800e7a4:	40014800 	.word	0x40014800
 800e7a8:	40015000 	.word	0x40015000
 800e7ac:	40000400 	.word	0x40000400
 800e7b0:	40000800 	.word	0x40000800
 800e7b4:	40000c00 	.word	0x40000c00
 800e7b8:	00010007 	.word	0x00010007

0800e7bc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b082      	sub	sp, #8
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
 800e7c4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d101      	bne.n	800e7d0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	e04c      	b.n	800e86a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e7d6:	b2db      	uxtb	r3, r3
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d111      	bne.n	800e800 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2200      	movs	r2, #0
 800e7e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f001 fc1f 	bl	8010028 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d102      	bne.n	800e7f8 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	4a1f      	ldr	r2, [pc, #124]	@ (800e874 <HAL_TIM_OnePulse_Init+0xb8>)
 800e7f6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2202      	movs	r2, #2
 800e804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681a      	ldr	r2, [r3, #0]
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	3304      	adds	r3, #4
 800e810:	4619      	mov	r1, r3
 800e812:	4610      	mov	r0, r2
 800e814:	f000 ff68 	bl	800f6e8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	681a      	ldr	r2, [r3, #0]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f022 0208 	bic.w	r2, r2, #8
 800e826:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	6819      	ldr	r1, [r3, #0]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	683a      	ldr	r2, [r7, #0]
 800e834:	430a      	orrs	r2, r1
 800e836:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2201      	movs	r2, #1
 800e83c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2201      	movs	r2, #1
 800e844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2201      	movs	r2, #1
 800e84c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2201      	movs	r2, #1
 800e854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2201      	movs	r2, #1
 800e85c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2201      	movs	r2, #1
 800e864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e868:	2300      	movs	r3, #0
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3708      	adds	r7, #8
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	0800e879 	.word	0x0800e879

0800e878 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800e878:	b480      	push	{r7}
 800e87a:	b083      	sub	sp, #12
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800e880:	bf00      	nop
 800e882:	370c      	adds	r7, #12
 800e884:	46bd      	mov	sp, r7
 800e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88a:	4770      	bx	lr

0800e88c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b084      	sub	sp, #16
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e89c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e8a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e8ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e8b4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e8b6:	7bfb      	ldrb	r3, [r7, #15]
 800e8b8:	2b01      	cmp	r3, #1
 800e8ba:	d108      	bne.n	800e8ce <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e8bc:	7bbb      	ldrb	r3, [r7, #14]
 800e8be:	2b01      	cmp	r3, #1
 800e8c0:	d105      	bne.n	800e8ce <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e8c2:	7b7b      	ldrb	r3, [r7, #13]
 800e8c4:	2b01      	cmp	r3, #1
 800e8c6:	d102      	bne.n	800e8ce <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e8c8:	7b3b      	ldrb	r3, [r7, #12]
 800e8ca:	2b01      	cmp	r3, #1
 800e8cc:	d001      	beq.n	800e8d2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	e059      	b.n	800e986 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2202      	movs	r2, #2
 800e8d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2202      	movs	r2, #2
 800e8de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2202      	movs	r2, #2
 800e8e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2202      	movs	r2, #2
 800e8ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	68da      	ldr	r2, [r3, #12]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	f042 0202 	orr.w	r2, r2, #2
 800e900:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	68da      	ldr	r2, [r3, #12]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	f042 0204 	orr.w	r2, r2, #4
 800e910:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	2201      	movs	r2, #1
 800e918:	2100      	movs	r1, #0
 800e91a:	4618      	mov	r0, r3
 800e91c:	f001 fb5e 	bl	800ffdc <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	2201      	movs	r2, #1
 800e926:	2104      	movs	r1, #4
 800e928:	4618      	mov	r0, r3
 800e92a:	f001 fb57 	bl	800ffdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	4a17      	ldr	r2, [pc, #92]	@ (800e990 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800e934:	4293      	cmp	r3, r2
 800e936:	d018      	beq.n	800e96a <HAL_TIM_OnePulse_Start_IT+0xde>
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	4a15      	ldr	r2, [pc, #84]	@ (800e994 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800e93e:	4293      	cmp	r3, r2
 800e940:	d013      	beq.n	800e96a <HAL_TIM_OnePulse_Start_IT+0xde>
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	4a14      	ldr	r2, [pc, #80]	@ (800e998 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800e948:	4293      	cmp	r3, r2
 800e94a:	d00e      	beq.n	800e96a <HAL_TIM_OnePulse_Start_IT+0xde>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	4a12      	ldr	r2, [pc, #72]	@ (800e99c <HAL_TIM_OnePulse_Start_IT+0x110>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d009      	beq.n	800e96a <HAL_TIM_OnePulse_Start_IT+0xde>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	4a11      	ldr	r2, [pc, #68]	@ (800e9a0 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d004      	beq.n	800e96a <HAL_TIM_OnePulse_Start_IT+0xde>
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	4a0f      	ldr	r2, [pc, #60]	@ (800e9a4 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800e966:	4293      	cmp	r3, r2
 800e968:	d101      	bne.n	800e96e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800e96a:	2301      	movs	r3, #1
 800e96c:	e000      	b.n	800e970 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800e96e:	2300      	movs	r3, #0
 800e970:	2b00      	cmp	r3, #0
 800e972:	d007      	beq.n	800e984 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e982:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800e984:	2300      	movs	r3, #0
}
 800e986:	4618      	mov	r0, r3
 800e988:	3710      	adds	r7, #16
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
 800e98e:	bf00      	nop
 800e990:	40012c00 	.word	0x40012c00
 800e994:	40013400 	.word	0x40013400
 800e998:	40014000 	.word	0x40014000
 800e99c:	40014400 	.word	0x40014400
 800e9a0:	40014800 	.word	0x40014800
 800e9a4:	40015000 	.word	0x40015000

0800e9a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b086      	sub	sp, #24
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d101      	bne.n	800e9bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	e0a2      	b.n	800eb02 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e9c2:	b2db      	uxtb	r3, r3
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d111      	bne.n	800e9ec <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e9d0:	6878      	ldr	r0, [r7, #4]
 800e9d2:	f001 fb29 	bl	8010028 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d102      	bne.n	800e9e4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	4a4a      	ldr	r2, [pc, #296]	@ (800eb0c <HAL_TIM_Encoder_Init+0x164>)
 800e9e2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2202      	movs	r2, #2
 800e9f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	689b      	ldr	r3, [r3, #8]
 800e9fa:	687a      	ldr	r2, [r7, #4]
 800e9fc:	6812      	ldr	r2, [r2, #0]
 800e9fe:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800ea02:	f023 0307 	bic.w	r3, r3, #7
 800ea06:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681a      	ldr	r2, [r3, #0]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	3304      	adds	r3, #4
 800ea10:	4619      	mov	r1, r3
 800ea12:	4610      	mov	r0, r2
 800ea14:	f000 fe68 	bl	800f6e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	689b      	ldr	r3, [r3, #8]
 800ea1e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	699b      	ldr	r3, [r3, #24]
 800ea26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	6a1b      	ldr	r3, [r3, #32]
 800ea2e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	697a      	ldr	r2, [r7, #20]
 800ea36:	4313      	orrs	r3, r2
 800ea38:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ea3a:	693b      	ldr	r3, [r7, #16]
 800ea3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ea40:	f023 0303 	bic.w	r3, r3, #3
 800ea44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	689a      	ldr	r2, [r3, #8]
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	699b      	ldr	r3, [r3, #24]
 800ea4e:	021b      	lsls	r3, r3, #8
 800ea50:	4313      	orrs	r3, r2
 800ea52:	693a      	ldr	r2, [r7, #16]
 800ea54:	4313      	orrs	r3, r2
 800ea56:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800ea5e:	f023 030c 	bic.w	r3, r3, #12
 800ea62:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ea6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ea6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	68da      	ldr	r2, [r3, #12]
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	69db      	ldr	r3, [r3, #28]
 800ea78:	021b      	lsls	r3, r3, #8
 800ea7a:	4313      	orrs	r3, r2
 800ea7c:	693a      	ldr	r2, [r7, #16]
 800ea7e:	4313      	orrs	r3, r2
 800ea80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	691b      	ldr	r3, [r3, #16]
 800ea86:	011a      	lsls	r2, r3, #4
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	6a1b      	ldr	r3, [r3, #32]
 800ea8c:	031b      	lsls	r3, r3, #12
 800ea8e:	4313      	orrs	r3, r2
 800ea90:	693a      	ldr	r2, [r7, #16]
 800ea92:	4313      	orrs	r3, r2
 800ea94:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800ea9c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800eaa4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	685a      	ldr	r2, [r3, #4]
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	695b      	ldr	r3, [r3, #20]
 800eaae:	011b      	lsls	r3, r3, #4
 800eab0:	4313      	orrs	r3, r2
 800eab2:	68fa      	ldr	r2, [r7, #12]
 800eab4:	4313      	orrs	r3, r2
 800eab6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	697a      	ldr	r2, [r7, #20]
 800eabe:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	693a      	ldr	r2, [r7, #16]
 800eac6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	68fa      	ldr	r2, [r7, #12]
 800eace:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2201      	movs	r2, #1
 800ead4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2201      	movs	r2, #1
 800eadc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2201      	movs	r2, #1
 800eae4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2201      	movs	r2, #1
 800eaec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2201      	movs	r2, #1
 800eafc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800eb00:	2300      	movs	r3, #0
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	3718      	adds	r7, #24
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}
 800eb0a:	bf00      	nop
 800eb0c:	0800a555 	.word	0x0800a555

0800eb10 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b084      	sub	sp, #16
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800eb20:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800eb28:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eb30:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eb38:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d110      	bne.n	800eb62 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800eb40:	7bfb      	ldrb	r3, [r7, #15]
 800eb42:	2b01      	cmp	r3, #1
 800eb44:	d102      	bne.n	800eb4c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800eb46:	7b7b      	ldrb	r3, [r7, #13]
 800eb48:	2b01      	cmp	r3, #1
 800eb4a:	d001      	beq.n	800eb50 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	e069      	b.n	800ec24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2202      	movs	r2, #2
 800eb54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2202      	movs	r2, #2
 800eb5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eb60:	e031      	b.n	800ebc6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	2b04      	cmp	r3, #4
 800eb66:	d110      	bne.n	800eb8a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800eb68:	7bbb      	ldrb	r3, [r7, #14]
 800eb6a:	2b01      	cmp	r3, #1
 800eb6c:	d102      	bne.n	800eb74 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800eb6e:	7b3b      	ldrb	r3, [r7, #12]
 800eb70:	2b01      	cmp	r3, #1
 800eb72:	d001      	beq.n	800eb78 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800eb74:	2301      	movs	r3, #1
 800eb76:	e055      	b.n	800ec24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2202      	movs	r2, #2
 800eb7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2202      	movs	r2, #2
 800eb84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eb88:	e01d      	b.n	800ebc6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800eb8a:	7bfb      	ldrb	r3, [r7, #15]
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d108      	bne.n	800eba2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800eb90:	7bbb      	ldrb	r3, [r7, #14]
 800eb92:	2b01      	cmp	r3, #1
 800eb94:	d105      	bne.n	800eba2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800eb96:	7b7b      	ldrb	r3, [r7, #13]
 800eb98:	2b01      	cmp	r3, #1
 800eb9a:	d102      	bne.n	800eba2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800eb9c:	7b3b      	ldrb	r3, [r7, #12]
 800eb9e:	2b01      	cmp	r3, #1
 800eba0:	d001      	beq.n	800eba6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800eba2:	2301      	movs	r3, #1
 800eba4:	e03e      	b.n	800ec24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2202      	movs	r2, #2
 800ebaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2202      	movs	r2, #2
 800ebb2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2202      	movs	r2, #2
 800ebba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2202      	movs	r2, #2
 800ebc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d003      	beq.n	800ebd4 <HAL_TIM_Encoder_Start+0xc4>
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	2b04      	cmp	r3, #4
 800ebd0:	d008      	beq.n	800ebe4 <HAL_TIM_Encoder_Start+0xd4>
 800ebd2:	e00f      	b.n	800ebf4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	2201      	movs	r2, #1
 800ebda:	2100      	movs	r1, #0
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f001 f9fd 	bl	800ffdc <TIM_CCxChannelCmd>
      break;
 800ebe2:	e016      	b.n	800ec12 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	2201      	movs	r2, #1
 800ebea:	2104      	movs	r1, #4
 800ebec:	4618      	mov	r0, r3
 800ebee:	f001 f9f5 	bl	800ffdc <TIM_CCxChannelCmd>
      break;
 800ebf2:	e00e      	b.n	800ec12 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	2201      	movs	r2, #1
 800ebfa:	2100      	movs	r1, #0
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f001 f9ed 	bl	800ffdc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	2201      	movs	r2, #1
 800ec08:	2104      	movs	r1, #4
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f001 f9e6 	bl	800ffdc <TIM_CCxChannelCmd>
      break;
 800ec10:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	681a      	ldr	r2, [r3, #0]
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f042 0201 	orr.w	r2, r2, #1
 800ec20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ec22:	2300      	movs	r3, #0
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3710      	adds	r7, #16
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b084      	sub	sp, #16
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	68db      	ldr	r3, [r3, #12]
 800ec3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	691b      	ldr	r3, [r3, #16]
 800ec42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	f003 0302 	and.w	r3, r3, #2
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d026      	beq.n	800ec9c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	f003 0302 	and.w	r3, r3, #2
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d021      	beq.n	800ec9c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	f06f 0202 	mvn.w	r2, #2
 800ec60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	2201      	movs	r2, #1
 800ec66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	699b      	ldr	r3, [r3, #24]
 800ec6e:	f003 0303 	and.w	r3, r3, #3
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d005      	beq.n	800ec82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	4798      	blx	r3
 800ec80:	e009      	b.n	800ec96 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	f003 0304 	and.w	r3, r3, #4
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d026      	beq.n	800ecf4 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	f003 0304 	and.w	r3, r3, #4
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d021      	beq.n	800ecf4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	f06f 0204 	mvn.w	r2, #4
 800ecb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2202      	movs	r2, #2
 800ecbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	699b      	ldr	r3, [r3, #24]
 800ecc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d005      	beq.n	800ecda <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	4798      	blx	r3
 800ecd8:	e009      	b.n	800ecee <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	f003 0308 	and.w	r3, r3, #8
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d026      	beq.n	800ed4c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	f003 0308 	and.w	r3, r3, #8
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d021      	beq.n	800ed4c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	f06f 0208 	mvn.w	r2, #8
 800ed10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	2204      	movs	r2, #4
 800ed16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	69db      	ldr	r3, [r3, #28]
 800ed1e:	f003 0303 	and.w	r3, r3, #3
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d005      	beq.n	800ed32 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	4798      	blx	r3
 800ed30:	e009      	b.n	800ed46 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2200      	movs	r2, #0
 800ed4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	f003 0310 	and.w	r3, r3, #16
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d026      	beq.n	800eda4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	f003 0310 	and.w	r3, r3, #16
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d021      	beq.n	800eda4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	f06f 0210 	mvn.w	r2, #16
 800ed68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2208      	movs	r2, #8
 800ed6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	69db      	ldr	r3, [r3, #28]
 800ed76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d005      	beq.n	800ed8a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	4798      	blx	r3
 800ed88:	e009      	b.n	800ed9e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2200      	movs	r2, #0
 800eda2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	f003 0301 	and.w	r3, r3, #1
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d00e      	beq.n	800edcc <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	f003 0301 	and.w	r3, r3, #1
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d009      	beq.n	800edcc <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f06f 0201 	mvn.w	r2, #1
 800edc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d104      	bne.n	800ede0 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d00e      	beq.n	800edfe <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d009      	beq.n	800edfe <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800edf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d00e      	beq.n	800ee26 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d009      	beq.n	800ee26 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ee1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d00e      	beq.n	800ee4e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d009      	beq.n	800ee4e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ee42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	f003 0320 	and.w	r3, r3, #32
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d00e      	beq.n	800ee76 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	f003 0320 	and.w	r3, r3, #32
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d009      	beq.n	800ee76 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f06f 0220 	mvn.w	r2, #32
 800ee6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d00e      	beq.n	800ee9e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d009      	beq.n	800ee9e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800ee92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d00e      	beq.n	800eec6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d009      	beq.n	800eec6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800eeba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d00e      	beq.n	800eeee <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d009      	beq.n	800eeee <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800eee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d00e      	beq.n	800ef16 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d009      	beq.n	800ef16 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800ef0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ef16:	bf00      	nop
 800ef18:	3710      	adds	r7, #16
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
	...

0800ef20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b086      	sub	sp, #24
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	60f8      	str	r0, [r7, #12]
 800ef28:	60b9      	str	r1, [r7, #8]
 800ef2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ef36:	2b01      	cmp	r3, #1
 800ef38:	d101      	bne.n	800ef3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ef3a:	2302      	movs	r3, #2
 800ef3c:	e0ff      	b.n	800f13e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2201      	movs	r2, #1
 800ef42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2b14      	cmp	r3, #20
 800ef4a:	f200 80f0 	bhi.w	800f12e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ef4e:	a201      	add	r2, pc, #4	@ (adr r2, 800ef54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ef50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef54:	0800efa9 	.word	0x0800efa9
 800ef58:	0800f12f 	.word	0x0800f12f
 800ef5c:	0800f12f 	.word	0x0800f12f
 800ef60:	0800f12f 	.word	0x0800f12f
 800ef64:	0800efe9 	.word	0x0800efe9
 800ef68:	0800f12f 	.word	0x0800f12f
 800ef6c:	0800f12f 	.word	0x0800f12f
 800ef70:	0800f12f 	.word	0x0800f12f
 800ef74:	0800f02b 	.word	0x0800f02b
 800ef78:	0800f12f 	.word	0x0800f12f
 800ef7c:	0800f12f 	.word	0x0800f12f
 800ef80:	0800f12f 	.word	0x0800f12f
 800ef84:	0800f06b 	.word	0x0800f06b
 800ef88:	0800f12f 	.word	0x0800f12f
 800ef8c:	0800f12f 	.word	0x0800f12f
 800ef90:	0800f12f 	.word	0x0800f12f
 800ef94:	0800f0ad 	.word	0x0800f0ad
 800ef98:	0800f12f 	.word	0x0800f12f
 800ef9c:	0800f12f 	.word	0x0800f12f
 800efa0:	0800f12f 	.word	0x0800f12f
 800efa4:	0800f0ed 	.word	0x0800f0ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	68b9      	ldr	r1, [r7, #8]
 800efae:	4618      	mov	r0, r3
 800efb0:	f000 fc4e 	bl	800f850 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	699a      	ldr	r2, [r3, #24]
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f042 0208 	orr.w	r2, r2, #8
 800efc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	699a      	ldr	r2, [r3, #24]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	f022 0204 	bic.w	r2, r2, #4
 800efd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	6999      	ldr	r1, [r3, #24]
 800efda:	68bb      	ldr	r3, [r7, #8]
 800efdc:	691a      	ldr	r2, [r3, #16]
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	430a      	orrs	r2, r1
 800efe4:	619a      	str	r2, [r3, #24]
      break;
 800efe6:	e0a5      	b.n	800f134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	68b9      	ldr	r1, [r7, #8]
 800efee:	4618      	mov	r0, r3
 800eff0:	f000 fcc8 	bl	800f984 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	699a      	ldr	r2, [r3, #24]
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	699a      	ldr	r2, [r3, #24]
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	6999      	ldr	r1, [r3, #24]
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	691b      	ldr	r3, [r3, #16]
 800f01e:	021a      	lsls	r2, r3, #8
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	430a      	orrs	r2, r1
 800f026:	619a      	str	r2, [r3, #24]
      break;
 800f028:	e084      	b.n	800f134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	68b9      	ldr	r1, [r7, #8]
 800f030:	4618      	mov	r0, r3
 800f032:	f000 fd3b 	bl	800faac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	69da      	ldr	r2, [r3, #28]
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	f042 0208 	orr.w	r2, r2, #8
 800f044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	69da      	ldr	r2, [r3, #28]
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	f022 0204 	bic.w	r2, r2, #4
 800f054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	69d9      	ldr	r1, [r3, #28]
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	691a      	ldr	r2, [r3, #16]
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	430a      	orrs	r2, r1
 800f066:	61da      	str	r2, [r3, #28]
      break;
 800f068:	e064      	b.n	800f134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	68b9      	ldr	r1, [r7, #8]
 800f070:	4618      	mov	r0, r3
 800f072:	f000 fdad 	bl	800fbd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	69da      	ldr	r2, [r3, #28]
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	69da      	ldr	r2, [r3, #28]
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	69d9      	ldr	r1, [r3, #28]
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	691b      	ldr	r3, [r3, #16]
 800f0a0:	021a      	lsls	r2, r3, #8
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	430a      	orrs	r2, r1
 800f0a8:	61da      	str	r2, [r3, #28]
      break;
 800f0aa:	e043      	b.n	800f134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	68b9      	ldr	r1, [r7, #8]
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f000 fe20 	bl	800fcf8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	f042 0208 	orr.w	r2, r2, #8
 800f0c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	f022 0204 	bic.w	r2, r2, #4
 800f0d6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	691a      	ldr	r2, [r3, #16]
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	430a      	orrs	r2, r1
 800f0e8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f0ea:	e023      	b.n	800f134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	68b9      	ldr	r1, [r7, #8]
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f000 fe6a 	bl	800fdcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f106:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f116:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	691b      	ldr	r3, [r3, #16]
 800f122:	021a      	lsls	r2, r3, #8
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	430a      	orrs	r2, r1
 800f12a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f12c:	e002      	b.n	800f134 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f12e:	2301      	movs	r3, #1
 800f130:	75fb      	strb	r3, [r7, #23]
      break;
 800f132:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	2200      	movs	r2, #0
 800f138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f13c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f13e:	4618      	mov	r0, r3
 800f140:	3718      	adds	r7, #24
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}
 800f146:	bf00      	nop

0800f148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b084      	sub	sp, #16
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f152:	2300      	movs	r3, #0
 800f154:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d101      	bne.n	800f164 <HAL_TIM_ConfigClockSource+0x1c>
 800f160:	2302      	movs	r3, #2
 800f162:	e0f6      	b.n	800f352 <HAL_TIM_ConfigClockSource+0x20a>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2201      	movs	r2, #1
 800f168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2202      	movs	r2, #2
 800f170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	689b      	ldr	r3, [r3, #8]
 800f17a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800f182:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f18e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	68ba      	ldr	r2, [r7, #8]
 800f196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	4a6f      	ldr	r2, [pc, #444]	@ (800f35c <HAL_TIM_ConfigClockSource+0x214>)
 800f19e:	4293      	cmp	r3, r2
 800f1a0:	f000 80c1 	beq.w	800f326 <HAL_TIM_ConfigClockSource+0x1de>
 800f1a4:	4a6d      	ldr	r2, [pc, #436]	@ (800f35c <HAL_TIM_ConfigClockSource+0x214>)
 800f1a6:	4293      	cmp	r3, r2
 800f1a8:	f200 80c6 	bhi.w	800f338 <HAL_TIM_ConfigClockSource+0x1f0>
 800f1ac:	4a6c      	ldr	r2, [pc, #432]	@ (800f360 <HAL_TIM_ConfigClockSource+0x218>)
 800f1ae:	4293      	cmp	r3, r2
 800f1b0:	f000 80b9 	beq.w	800f326 <HAL_TIM_ConfigClockSource+0x1de>
 800f1b4:	4a6a      	ldr	r2, [pc, #424]	@ (800f360 <HAL_TIM_ConfigClockSource+0x218>)
 800f1b6:	4293      	cmp	r3, r2
 800f1b8:	f200 80be 	bhi.w	800f338 <HAL_TIM_ConfigClockSource+0x1f0>
 800f1bc:	4a69      	ldr	r2, [pc, #420]	@ (800f364 <HAL_TIM_ConfigClockSource+0x21c>)
 800f1be:	4293      	cmp	r3, r2
 800f1c0:	f000 80b1 	beq.w	800f326 <HAL_TIM_ConfigClockSource+0x1de>
 800f1c4:	4a67      	ldr	r2, [pc, #412]	@ (800f364 <HAL_TIM_ConfigClockSource+0x21c>)
 800f1c6:	4293      	cmp	r3, r2
 800f1c8:	f200 80b6 	bhi.w	800f338 <HAL_TIM_ConfigClockSource+0x1f0>
 800f1cc:	4a66      	ldr	r2, [pc, #408]	@ (800f368 <HAL_TIM_ConfigClockSource+0x220>)
 800f1ce:	4293      	cmp	r3, r2
 800f1d0:	f000 80a9 	beq.w	800f326 <HAL_TIM_ConfigClockSource+0x1de>
 800f1d4:	4a64      	ldr	r2, [pc, #400]	@ (800f368 <HAL_TIM_ConfigClockSource+0x220>)
 800f1d6:	4293      	cmp	r3, r2
 800f1d8:	f200 80ae 	bhi.w	800f338 <HAL_TIM_ConfigClockSource+0x1f0>
 800f1dc:	4a63      	ldr	r2, [pc, #396]	@ (800f36c <HAL_TIM_ConfigClockSource+0x224>)
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	f000 80a1 	beq.w	800f326 <HAL_TIM_ConfigClockSource+0x1de>
 800f1e4:	4a61      	ldr	r2, [pc, #388]	@ (800f36c <HAL_TIM_ConfigClockSource+0x224>)
 800f1e6:	4293      	cmp	r3, r2
 800f1e8:	f200 80a6 	bhi.w	800f338 <HAL_TIM_ConfigClockSource+0x1f0>
 800f1ec:	4a60      	ldr	r2, [pc, #384]	@ (800f370 <HAL_TIM_ConfigClockSource+0x228>)
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	f000 8099 	beq.w	800f326 <HAL_TIM_ConfigClockSource+0x1de>
 800f1f4:	4a5e      	ldr	r2, [pc, #376]	@ (800f370 <HAL_TIM_ConfigClockSource+0x228>)
 800f1f6:	4293      	cmp	r3, r2
 800f1f8:	f200 809e 	bhi.w	800f338 <HAL_TIM_ConfigClockSource+0x1f0>
 800f1fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f200:	f000 8091 	beq.w	800f326 <HAL_TIM_ConfigClockSource+0x1de>
 800f204:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f208:	f200 8096 	bhi.w	800f338 <HAL_TIM_ConfigClockSource+0x1f0>
 800f20c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f210:	f000 8089 	beq.w	800f326 <HAL_TIM_ConfigClockSource+0x1de>
 800f214:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f218:	f200 808e 	bhi.w	800f338 <HAL_TIM_ConfigClockSource+0x1f0>
 800f21c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f220:	d03e      	beq.n	800f2a0 <HAL_TIM_ConfigClockSource+0x158>
 800f222:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f226:	f200 8087 	bhi.w	800f338 <HAL_TIM_ConfigClockSource+0x1f0>
 800f22a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f22e:	f000 8086 	beq.w	800f33e <HAL_TIM_ConfigClockSource+0x1f6>
 800f232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f236:	d87f      	bhi.n	800f338 <HAL_TIM_ConfigClockSource+0x1f0>
 800f238:	2b70      	cmp	r3, #112	@ 0x70
 800f23a:	d01a      	beq.n	800f272 <HAL_TIM_ConfigClockSource+0x12a>
 800f23c:	2b70      	cmp	r3, #112	@ 0x70
 800f23e:	d87b      	bhi.n	800f338 <HAL_TIM_ConfigClockSource+0x1f0>
 800f240:	2b60      	cmp	r3, #96	@ 0x60
 800f242:	d050      	beq.n	800f2e6 <HAL_TIM_ConfigClockSource+0x19e>
 800f244:	2b60      	cmp	r3, #96	@ 0x60
 800f246:	d877      	bhi.n	800f338 <HAL_TIM_ConfigClockSource+0x1f0>
 800f248:	2b50      	cmp	r3, #80	@ 0x50
 800f24a:	d03c      	beq.n	800f2c6 <HAL_TIM_ConfigClockSource+0x17e>
 800f24c:	2b50      	cmp	r3, #80	@ 0x50
 800f24e:	d873      	bhi.n	800f338 <HAL_TIM_ConfigClockSource+0x1f0>
 800f250:	2b40      	cmp	r3, #64	@ 0x40
 800f252:	d058      	beq.n	800f306 <HAL_TIM_ConfigClockSource+0x1be>
 800f254:	2b40      	cmp	r3, #64	@ 0x40
 800f256:	d86f      	bhi.n	800f338 <HAL_TIM_ConfigClockSource+0x1f0>
 800f258:	2b30      	cmp	r3, #48	@ 0x30
 800f25a:	d064      	beq.n	800f326 <HAL_TIM_ConfigClockSource+0x1de>
 800f25c:	2b30      	cmp	r3, #48	@ 0x30
 800f25e:	d86b      	bhi.n	800f338 <HAL_TIM_ConfigClockSource+0x1f0>
 800f260:	2b20      	cmp	r3, #32
 800f262:	d060      	beq.n	800f326 <HAL_TIM_ConfigClockSource+0x1de>
 800f264:	2b20      	cmp	r3, #32
 800f266:	d867      	bhi.n	800f338 <HAL_TIM_ConfigClockSource+0x1f0>
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d05c      	beq.n	800f326 <HAL_TIM_ConfigClockSource+0x1de>
 800f26c:	2b10      	cmp	r3, #16
 800f26e:	d05a      	beq.n	800f326 <HAL_TIM_ConfigClockSource+0x1de>
 800f270:	e062      	b.n	800f338 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f282:	f000 fe8b 	bl	800ff9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	689b      	ldr	r3, [r3, #8]
 800f28c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f294:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	68ba      	ldr	r2, [r7, #8]
 800f29c:	609a      	str	r2, [r3, #8]
      break;
 800f29e:	e04f      	b.n	800f340 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f2b0:	f000 fe74 	bl	800ff9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	689a      	ldr	r2, [r3, #8]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f2c2:	609a      	str	r2, [r3, #8]
      break;
 800f2c4:	e03c      	b.n	800f340 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	f000 fde6 	bl	800fea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	2150      	movs	r1, #80	@ 0x50
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f000 fe3f 	bl	800ff62 <TIM_ITRx_SetConfig>
      break;
 800f2e4:	e02c      	b.n	800f340 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	f000 fe05 	bl	800ff02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	2160      	movs	r1, #96	@ 0x60
 800f2fe:	4618      	mov	r0, r3
 800f300:	f000 fe2f 	bl	800ff62 <TIM_ITRx_SetConfig>
      break;
 800f304:	e01c      	b.n	800f340 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f312:	461a      	mov	r2, r3
 800f314:	f000 fdc6 	bl	800fea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	2140      	movs	r1, #64	@ 0x40
 800f31e:	4618      	mov	r0, r3
 800f320:	f000 fe1f 	bl	800ff62 <TIM_ITRx_SetConfig>
      break;
 800f324:	e00c      	b.n	800f340 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681a      	ldr	r2, [r3, #0]
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	4619      	mov	r1, r3
 800f330:	4610      	mov	r0, r2
 800f332:	f000 fe16 	bl	800ff62 <TIM_ITRx_SetConfig>
      break;
 800f336:	e003      	b.n	800f340 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800f338:	2301      	movs	r3, #1
 800f33a:	73fb      	strb	r3, [r7, #15]
      break;
 800f33c:	e000      	b.n	800f340 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800f33e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2201      	movs	r2, #1
 800f344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2200      	movs	r2, #0
 800f34c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f350:	7bfb      	ldrb	r3, [r7, #15]
}
 800f352:	4618      	mov	r0, r3
 800f354:	3710      	adds	r7, #16
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}
 800f35a:	bf00      	nop
 800f35c:	00100070 	.word	0x00100070
 800f360:	00100060 	.word	0x00100060
 800f364:	00100050 	.word	0x00100050
 800f368:	00100040 	.word	0x00100040
 800f36c:	00100030 	.word	0x00100030
 800f370:	00100020 	.word	0x00100020

0800f374 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f374:	b480      	push	{r7}
 800f376:	b083      	sub	sp, #12
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800f37c:	bf00      	nop
 800f37e:	370c      	adds	r7, #12
 800f380:	46bd      	mov	sp, r7
 800f382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f386:	4770      	bx	lr

0800f388 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f388:	b480      	push	{r7}
 800f38a:	b083      	sub	sp, #12
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f390:	bf00      	nop
 800f392:	370c      	adds	r7, #12
 800f394:	46bd      	mov	sp, r7
 800f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39a:	4770      	bx	lr

0800f39c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f39c:	b480      	push	{r7}
 800f39e:	b083      	sub	sp, #12
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f3a4:	bf00      	nop
 800f3a6:	370c      	adds	r7, #12
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ae:	4770      	bx	lr

0800f3b0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	b083      	sub	sp, #12
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800f3b8:	bf00      	nop
 800f3ba:	370c      	adds	r7, #12
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr

0800f3c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b083      	sub	sp, #12
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f3cc:	bf00      	nop
 800f3ce:	370c      	adds	r7, #12
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d6:	4770      	bx	lr

0800f3d8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f3d8:	b480      	push	{r7}
 800f3da:	b083      	sub	sp, #12
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800f3e0:	bf00      	nop
 800f3e2:	370c      	adds	r7, #12
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ea:	4770      	bx	lr

0800f3ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f3ec:	b480      	push	{r7}
 800f3ee:	b083      	sub	sp, #12
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f3f4:	bf00      	nop
 800f3f6:	370c      	adds	r7, #12
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fe:	4770      	bx	lr

0800f400 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f400:	b480      	push	{r7}
 800f402:	b083      	sub	sp, #12
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800f408:	bf00      	nop
 800f40a:	370c      	adds	r7, #12
 800f40c:	46bd      	mov	sp, r7
 800f40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f412:	4770      	bx	lr

0800f414 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800f414:	b480      	push	{r7}
 800f416:	b083      	sub	sp, #12
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800f41c:	bf00      	nop
 800f41e:	370c      	adds	r7, #12
 800f420:	46bd      	mov	sp, r7
 800f422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f426:	4770      	bx	lr

0800f428 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800f428:	b480      	push	{r7}
 800f42a:	b087      	sub	sp, #28
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	60f8      	str	r0, [r7, #12]
 800f430:	460b      	mov	r3, r1
 800f432:	607a      	str	r2, [r7, #4]
 800f434:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800f436:	2300      	movs	r3, #0
 800f438:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d101      	bne.n	800f444 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800f440:	2301      	movs	r3, #1
 800f442:	e14a      	b.n	800f6da <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f44a:	b2db      	uxtb	r3, r3
 800f44c:	2b01      	cmp	r3, #1
 800f44e:	f040 80dd 	bne.w	800f60c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800f452:	7afb      	ldrb	r3, [r7, #11]
 800f454:	2b1f      	cmp	r3, #31
 800f456:	f200 80d6 	bhi.w	800f606 <HAL_TIM_RegisterCallback+0x1de>
 800f45a:	a201      	add	r2, pc, #4	@ (adr r2, 800f460 <HAL_TIM_RegisterCallback+0x38>)
 800f45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f460:	0800f4e1 	.word	0x0800f4e1
 800f464:	0800f4e9 	.word	0x0800f4e9
 800f468:	0800f4f1 	.word	0x0800f4f1
 800f46c:	0800f4f9 	.word	0x0800f4f9
 800f470:	0800f501 	.word	0x0800f501
 800f474:	0800f509 	.word	0x0800f509
 800f478:	0800f511 	.word	0x0800f511
 800f47c:	0800f519 	.word	0x0800f519
 800f480:	0800f521 	.word	0x0800f521
 800f484:	0800f529 	.word	0x0800f529
 800f488:	0800f531 	.word	0x0800f531
 800f48c:	0800f539 	.word	0x0800f539
 800f490:	0800f541 	.word	0x0800f541
 800f494:	0800f549 	.word	0x0800f549
 800f498:	0800f553 	.word	0x0800f553
 800f49c:	0800f55d 	.word	0x0800f55d
 800f4a0:	0800f567 	.word	0x0800f567
 800f4a4:	0800f571 	.word	0x0800f571
 800f4a8:	0800f57b 	.word	0x0800f57b
 800f4ac:	0800f585 	.word	0x0800f585
 800f4b0:	0800f58f 	.word	0x0800f58f
 800f4b4:	0800f599 	.word	0x0800f599
 800f4b8:	0800f5a3 	.word	0x0800f5a3
 800f4bc:	0800f5ad 	.word	0x0800f5ad
 800f4c0:	0800f5b7 	.word	0x0800f5b7
 800f4c4:	0800f5c1 	.word	0x0800f5c1
 800f4c8:	0800f5cb 	.word	0x0800f5cb
 800f4cc:	0800f5d5 	.word	0x0800f5d5
 800f4d0:	0800f5df 	.word	0x0800f5df
 800f4d4:	0800f5e9 	.word	0x0800f5e9
 800f4d8:	0800f5f3 	.word	0x0800f5f3
 800f4dc:	0800f5fd 	.word	0x0800f5fd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	687a      	ldr	r2, [r7, #4]
 800f4e4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800f4e6:	e0f7      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	687a      	ldr	r2, [r7, #4]
 800f4ec:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800f4ee:	e0f3      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800f4f6:	e0ef      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	687a      	ldr	r2, [r7, #4]
 800f4fc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800f4fe:	e0eb      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	687a      	ldr	r2, [r7, #4]
 800f504:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800f506:	e0e7      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	687a      	ldr	r2, [r7, #4]
 800f50c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800f50e:	e0e3      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	687a      	ldr	r2, [r7, #4]
 800f514:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800f516:	e0df      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	687a      	ldr	r2, [r7, #4]
 800f51c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800f51e:	e0db      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	687a      	ldr	r2, [r7, #4]
 800f524:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800f526:	e0d7      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	687a      	ldr	r2, [r7, #4]
 800f52c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800f52e:	e0d3      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	687a      	ldr	r2, [r7, #4]
 800f534:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800f536:	e0cf      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	687a      	ldr	r2, [r7, #4]
 800f53c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800f53e:	e0cb      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	687a      	ldr	r2, [r7, #4]
 800f544:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800f546:	e0c7      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	687a      	ldr	r2, [r7, #4]
 800f54c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800f550:	e0c2      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	687a      	ldr	r2, [r7, #4]
 800f556:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800f55a:	e0bd      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	687a      	ldr	r2, [r7, #4]
 800f560:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800f564:	e0b8      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	687a      	ldr	r2, [r7, #4]
 800f56a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800f56e:	e0b3      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	687a      	ldr	r2, [r7, #4]
 800f574:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800f578:	e0ae      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	687a      	ldr	r2, [r7, #4]
 800f57e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800f582:	e0a9      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	687a      	ldr	r2, [r7, #4]
 800f588:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800f58c:	e0a4      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	687a      	ldr	r2, [r7, #4]
 800f592:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800f596:	e09f      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	687a      	ldr	r2, [r7, #4]
 800f59c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800f5a0:	e09a      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	687a      	ldr	r2, [r7, #4]
 800f5a6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800f5aa:	e095      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	687a      	ldr	r2, [r7, #4]
 800f5b0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800f5b4:	e090      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	687a      	ldr	r2, [r7, #4]
 800f5ba:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800f5be:	e08b      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	687a      	ldr	r2, [r7, #4]
 800f5c4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800f5c8:	e086      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	687a      	ldr	r2, [r7, #4]
 800f5ce:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800f5d2:	e081      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	687a      	ldr	r2, [r7, #4]
 800f5d8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800f5dc:	e07c      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	687a      	ldr	r2, [r7, #4]
 800f5e2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800f5e6:	e077      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	687a      	ldr	r2, [r7, #4]
 800f5ec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800f5f0:	e072      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	687a      	ldr	r2, [r7, #4]
 800f5f6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800f5fa:	e06d      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	687a      	ldr	r2, [r7, #4]
 800f600:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800f604:	e068      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800f606:	2301      	movs	r3, #1
 800f608:	75fb      	strb	r3, [r7, #23]
        break;
 800f60a:	e065      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f612:	b2db      	uxtb	r3, r3
 800f614:	2b00      	cmp	r3, #0
 800f616:	d15d      	bne.n	800f6d4 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800f618:	7afb      	ldrb	r3, [r7, #11]
 800f61a:	2b0d      	cmp	r3, #13
 800f61c:	d857      	bhi.n	800f6ce <HAL_TIM_RegisterCallback+0x2a6>
 800f61e:	a201      	add	r2, pc, #4	@ (adr r2, 800f624 <HAL_TIM_RegisterCallback+0x1fc>)
 800f620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f624:	0800f65d 	.word	0x0800f65d
 800f628:	0800f665 	.word	0x0800f665
 800f62c:	0800f66d 	.word	0x0800f66d
 800f630:	0800f675 	.word	0x0800f675
 800f634:	0800f67d 	.word	0x0800f67d
 800f638:	0800f685 	.word	0x0800f685
 800f63c:	0800f68d 	.word	0x0800f68d
 800f640:	0800f695 	.word	0x0800f695
 800f644:	0800f69d 	.word	0x0800f69d
 800f648:	0800f6a5 	.word	0x0800f6a5
 800f64c:	0800f6ad 	.word	0x0800f6ad
 800f650:	0800f6b5 	.word	0x0800f6b5
 800f654:	0800f6bd 	.word	0x0800f6bd
 800f658:	0800f6c5 	.word	0x0800f6c5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	687a      	ldr	r2, [r7, #4]
 800f660:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800f662:	e039      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	687a      	ldr	r2, [r7, #4]
 800f668:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800f66a:	e035      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	687a      	ldr	r2, [r7, #4]
 800f670:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800f672:	e031      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	687a      	ldr	r2, [r7, #4]
 800f678:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800f67a:	e02d      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	687a      	ldr	r2, [r7, #4]
 800f680:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800f682:	e029      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	687a      	ldr	r2, [r7, #4]
 800f688:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800f68a:	e025      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	687a      	ldr	r2, [r7, #4]
 800f690:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800f692:	e021      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	687a      	ldr	r2, [r7, #4]
 800f698:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800f69a:	e01d      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	687a      	ldr	r2, [r7, #4]
 800f6a0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800f6a2:	e019      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	687a      	ldr	r2, [r7, #4]
 800f6a8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800f6aa:	e015      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	687a      	ldr	r2, [r7, #4]
 800f6b0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800f6b2:	e011      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	687a      	ldr	r2, [r7, #4]
 800f6b8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800f6ba:	e00d      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	687a      	ldr	r2, [r7, #4]
 800f6c0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800f6c2:	e009      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	687a      	ldr	r2, [r7, #4]
 800f6c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800f6cc:	e004      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	75fb      	strb	r3, [r7, #23]
        break;
 800f6d2:	e001      	b.n	800f6d8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800f6d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	371c      	adds	r7, #28
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e4:	4770      	bx	lr
 800f6e6:	bf00      	nop

0800f6e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f6e8:	b480      	push	{r7}
 800f6ea:	b085      	sub	sp, #20
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
 800f6f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	4a4c      	ldr	r2, [pc, #304]	@ (800f82c <TIM_Base_SetConfig+0x144>)
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	d017      	beq.n	800f730 <TIM_Base_SetConfig+0x48>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f706:	d013      	beq.n	800f730 <TIM_Base_SetConfig+0x48>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	4a49      	ldr	r2, [pc, #292]	@ (800f830 <TIM_Base_SetConfig+0x148>)
 800f70c:	4293      	cmp	r3, r2
 800f70e:	d00f      	beq.n	800f730 <TIM_Base_SetConfig+0x48>
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	4a48      	ldr	r2, [pc, #288]	@ (800f834 <TIM_Base_SetConfig+0x14c>)
 800f714:	4293      	cmp	r3, r2
 800f716:	d00b      	beq.n	800f730 <TIM_Base_SetConfig+0x48>
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	4a47      	ldr	r2, [pc, #284]	@ (800f838 <TIM_Base_SetConfig+0x150>)
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d007      	beq.n	800f730 <TIM_Base_SetConfig+0x48>
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	4a46      	ldr	r2, [pc, #280]	@ (800f83c <TIM_Base_SetConfig+0x154>)
 800f724:	4293      	cmp	r3, r2
 800f726:	d003      	beq.n	800f730 <TIM_Base_SetConfig+0x48>
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	4a45      	ldr	r2, [pc, #276]	@ (800f840 <TIM_Base_SetConfig+0x158>)
 800f72c:	4293      	cmp	r3, r2
 800f72e:	d108      	bne.n	800f742 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	68fa      	ldr	r2, [r7, #12]
 800f73e:	4313      	orrs	r3, r2
 800f740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	4a39      	ldr	r2, [pc, #228]	@ (800f82c <TIM_Base_SetConfig+0x144>)
 800f746:	4293      	cmp	r3, r2
 800f748:	d023      	beq.n	800f792 <TIM_Base_SetConfig+0xaa>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f750:	d01f      	beq.n	800f792 <TIM_Base_SetConfig+0xaa>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	4a36      	ldr	r2, [pc, #216]	@ (800f830 <TIM_Base_SetConfig+0x148>)
 800f756:	4293      	cmp	r3, r2
 800f758:	d01b      	beq.n	800f792 <TIM_Base_SetConfig+0xaa>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	4a35      	ldr	r2, [pc, #212]	@ (800f834 <TIM_Base_SetConfig+0x14c>)
 800f75e:	4293      	cmp	r3, r2
 800f760:	d017      	beq.n	800f792 <TIM_Base_SetConfig+0xaa>
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	4a34      	ldr	r2, [pc, #208]	@ (800f838 <TIM_Base_SetConfig+0x150>)
 800f766:	4293      	cmp	r3, r2
 800f768:	d013      	beq.n	800f792 <TIM_Base_SetConfig+0xaa>
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	4a33      	ldr	r2, [pc, #204]	@ (800f83c <TIM_Base_SetConfig+0x154>)
 800f76e:	4293      	cmp	r3, r2
 800f770:	d00f      	beq.n	800f792 <TIM_Base_SetConfig+0xaa>
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	4a33      	ldr	r2, [pc, #204]	@ (800f844 <TIM_Base_SetConfig+0x15c>)
 800f776:	4293      	cmp	r3, r2
 800f778:	d00b      	beq.n	800f792 <TIM_Base_SetConfig+0xaa>
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	4a32      	ldr	r2, [pc, #200]	@ (800f848 <TIM_Base_SetConfig+0x160>)
 800f77e:	4293      	cmp	r3, r2
 800f780:	d007      	beq.n	800f792 <TIM_Base_SetConfig+0xaa>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	4a31      	ldr	r2, [pc, #196]	@ (800f84c <TIM_Base_SetConfig+0x164>)
 800f786:	4293      	cmp	r3, r2
 800f788:	d003      	beq.n	800f792 <TIM_Base_SetConfig+0xaa>
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	4a2c      	ldr	r2, [pc, #176]	@ (800f840 <TIM_Base_SetConfig+0x158>)
 800f78e:	4293      	cmp	r3, r2
 800f790:	d108      	bne.n	800f7a4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	68db      	ldr	r3, [r3, #12]
 800f79e:	68fa      	ldr	r2, [r7, #12]
 800f7a0:	4313      	orrs	r3, r2
 800f7a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	695b      	ldr	r3, [r3, #20]
 800f7ae:	4313      	orrs	r3, r2
 800f7b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	68fa      	ldr	r2, [r7, #12]
 800f7b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	689a      	ldr	r2, [r3, #8]
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f7c0:	683b      	ldr	r3, [r7, #0]
 800f7c2:	681a      	ldr	r2, [r3, #0]
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	4a18      	ldr	r2, [pc, #96]	@ (800f82c <TIM_Base_SetConfig+0x144>)
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	d013      	beq.n	800f7f8 <TIM_Base_SetConfig+0x110>
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	4a1a      	ldr	r2, [pc, #104]	@ (800f83c <TIM_Base_SetConfig+0x154>)
 800f7d4:	4293      	cmp	r3, r2
 800f7d6:	d00f      	beq.n	800f7f8 <TIM_Base_SetConfig+0x110>
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	4a1a      	ldr	r2, [pc, #104]	@ (800f844 <TIM_Base_SetConfig+0x15c>)
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	d00b      	beq.n	800f7f8 <TIM_Base_SetConfig+0x110>
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	4a19      	ldr	r2, [pc, #100]	@ (800f848 <TIM_Base_SetConfig+0x160>)
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	d007      	beq.n	800f7f8 <TIM_Base_SetConfig+0x110>
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	4a18      	ldr	r2, [pc, #96]	@ (800f84c <TIM_Base_SetConfig+0x164>)
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	d003      	beq.n	800f7f8 <TIM_Base_SetConfig+0x110>
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	4a13      	ldr	r2, [pc, #76]	@ (800f840 <TIM_Base_SetConfig+0x158>)
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	d103      	bne.n	800f800 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	691a      	ldr	r2, [r3, #16]
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2201      	movs	r2, #1
 800f804:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	691b      	ldr	r3, [r3, #16]
 800f80a:	f003 0301 	and.w	r3, r3, #1
 800f80e:	2b01      	cmp	r3, #1
 800f810:	d105      	bne.n	800f81e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	691b      	ldr	r3, [r3, #16]
 800f816:	f023 0201 	bic.w	r2, r3, #1
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	611a      	str	r2, [r3, #16]
  }
}
 800f81e:	bf00      	nop
 800f820:	3714      	adds	r7, #20
 800f822:	46bd      	mov	sp, r7
 800f824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f828:	4770      	bx	lr
 800f82a:	bf00      	nop
 800f82c:	40012c00 	.word	0x40012c00
 800f830:	40000400 	.word	0x40000400
 800f834:	40000800 	.word	0x40000800
 800f838:	40000c00 	.word	0x40000c00
 800f83c:	40013400 	.word	0x40013400
 800f840:	40015000 	.word	0x40015000
 800f844:	40014000 	.word	0x40014000
 800f848:	40014400 	.word	0x40014400
 800f84c:	40014800 	.word	0x40014800

0800f850 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f850:	b480      	push	{r7}
 800f852:	b087      	sub	sp, #28
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6a1b      	ldr	r3, [r3, #32]
 800f85e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	6a1b      	ldr	r3, [r3, #32]
 800f864:	f023 0201 	bic.w	r2, r3, #1
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	685b      	ldr	r3, [r3, #4]
 800f870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	699b      	ldr	r3, [r3, #24]
 800f876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f87e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	f023 0303 	bic.w	r3, r3, #3
 800f88a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	68fa      	ldr	r2, [r7, #12]
 800f892:	4313      	orrs	r3, r2
 800f894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	f023 0302 	bic.w	r3, r3, #2
 800f89c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	689b      	ldr	r3, [r3, #8]
 800f8a2:	697a      	ldr	r2, [r7, #20]
 800f8a4:	4313      	orrs	r3, r2
 800f8a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	4a30      	ldr	r2, [pc, #192]	@ (800f96c <TIM_OC1_SetConfig+0x11c>)
 800f8ac:	4293      	cmp	r3, r2
 800f8ae:	d013      	beq.n	800f8d8 <TIM_OC1_SetConfig+0x88>
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	4a2f      	ldr	r2, [pc, #188]	@ (800f970 <TIM_OC1_SetConfig+0x120>)
 800f8b4:	4293      	cmp	r3, r2
 800f8b6:	d00f      	beq.n	800f8d8 <TIM_OC1_SetConfig+0x88>
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	4a2e      	ldr	r2, [pc, #184]	@ (800f974 <TIM_OC1_SetConfig+0x124>)
 800f8bc:	4293      	cmp	r3, r2
 800f8be:	d00b      	beq.n	800f8d8 <TIM_OC1_SetConfig+0x88>
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	4a2d      	ldr	r2, [pc, #180]	@ (800f978 <TIM_OC1_SetConfig+0x128>)
 800f8c4:	4293      	cmp	r3, r2
 800f8c6:	d007      	beq.n	800f8d8 <TIM_OC1_SetConfig+0x88>
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	4a2c      	ldr	r2, [pc, #176]	@ (800f97c <TIM_OC1_SetConfig+0x12c>)
 800f8cc:	4293      	cmp	r3, r2
 800f8ce:	d003      	beq.n	800f8d8 <TIM_OC1_SetConfig+0x88>
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	4a2b      	ldr	r2, [pc, #172]	@ (800f980 <TIM_OC1_SetConfig+0x130>)
 800f8d4:	4293      	cmp	r3, r2
 800f8d6:	d10c      	bne.n	800f8f2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	f023 0308 	bic.w	r3, r3, #8
 800f8de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	68db      	ldr	r3, [r3, #12]
 800f8e4:	697a      	ldr	r2, [r7, #20]
 800f8e6:	4313      	orrs	r3, r2
 800f8e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f8ea:	697b      	ldr	r3, [r7, #20]
 800f8ec:	f023 0304 	bic.w	r3, r3, #4
 800f8f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	4a1d      	ldr	r2, [pc, #116]	@ (800f96c <TIM_OC1_SetConfig+0x11c>)
 800f8f6:	4293      	cmp	r3, r2
 800f8f8:	d013      	beq.n	800f922 <TIM_OC1_SetConfig+0xd2>
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	4a1c      	ldr	r2, [pc, #112]	@ (800f970 <TIM_OC1_SetConfig+0x120>)
 800f8fe:	4293      	cmp	r3, r2
 800f900:	d00f      	beq.n	800f922 <TIM_OC1_SetConfig+0xd2>
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	4a1b      	ldr	r2, [pc, #108]	@ (800f974 <TIM_OC1_SetConfig+0x124>)
 800f906:	4293      	cmp	r3, r2
 800f908:	d00b      	beq.n	800f922 <TIM_OC1_SetConfig+0xd2>
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	4a1a      	ldr	r2, [pc, #104]	@ (800f978 <TIM_OC1_SetConfig+0x128>)
 800f90e:	4293      	cmp	r3, r2
 800f910:	d007      	beq.n	800f922 <TIM_OC1_SetConfig+0xd2>
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	4a19      	ldr	r2, [pc, #100]	@ (800f97c <TIM_OC1_SetConfig+0x12c>)
 800f916:	4293      	cmp	r3, r2
 800f918:	d003      	beq.n	800f922 <TIM_OC1_SetConfig+0xd2>
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	4a18      	ldr	r2, [pc, #96]	@ (800f980 <TIM_OC1_SetConfig+0x130>)
 800f91e:	4293      	cmp	r3, r2
 800f920:	d111      	bne.n	800f946 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f922:	693b      	ldr	r3, [r7, #16]
 800f924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f92a:	693b      	ldr	r3, [r7, #16]
 800f92c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	695b      	ldr	r3, [r3, #20]
 800f936:	693a      	ldr	r2, [r7, #16]
 800f938:	4313      	orrs	r3, r2
 800f93a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	699b      	ldr	r3, [r3, #24]
 800f940:	693a      	ldr	r2, [r7, #16]
 800f942:	4313      	orrs	r3, r2
 800f944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	693a      	ldr	r2, [r7, #16]
 800f94a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	68fa      	ldr	r2, [r7, #12]
 800f950:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	685a      	ldr	r2, [r3, #4]
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	697a      	ldr	r2, [r7, #20]
 800f95e:	621a      	str	r2, [r3, #32]
}
 800f960:	bf00      	nop
 800f962:	371c      	adds	r7, #28
 800f964:	46bd      	mov	sp, r7
 800f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96a:	4770      	bx	lr
 800f96c:	40012c00 	.word	0x40012c00
 800f970:	40013400 	.word	0x40013400
 800f974:	40014000 	.word	0x40014000
 800f978:	40014400 	.word	0x40014400
 800f97c:	40014800 	.word	0x40014800
 800f980:	40015000 	.word	0x40015000

0800f984 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f984:	b480      	push	{r7}
 800f986:	b087      	sub	sp, #28
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	6a1b      	ldr	r3, [r3, #32]
 800f992:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6a1b      	ldr	r3, [r3, #32]
 800f998:	f023 0210 	bic.w	r2, r3, #16
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	685b      	ldr	r3, [r3, #4]
 800f9a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	699b      	ldr	r3, [r3, #24]
 800f9aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f9b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f9b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f9be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	021b      	lsls	r3, r3, #8
 800f9c6:	68fa      	ldr	r2, [r7, #12]
 800f9c8:	4313      	orrs	r3, r2
 800f9ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f9cc:	697b      	ldr	r3, [r7, #20]
 800f9ce:	f023 0320 	bic.w	r3, r3, #32
 800f9d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	689b      	ldr	r3, [r3, #8]
 800f9d8:	011b      	lsls	r3, r3, #4
 800f9da:	697a      	ldr	r2, [r7, #20]
 800f9dc:	4313      	orrs	r3, r2
 800f9de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	4a2c      	ldr	r2, [pc, #176]	@ (800fa94 <TIM_OC2_SetConfig+0x110>)
 800f9e4:	4293      	cmp	r3, r2
 800f9e6:	d007      	beq.n	800f9f8 <TIM_OC2_SetConfig+0x74>
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	4a2b      	ldr	r2, [pc, #172]	@ (800fa98 <TIM_OC2_SetConfig+0x114>)
 800f9ec:	4293      	cmp	r3, r2
 800f9ee:	d003      	beq.n	800f9f8 <TIM_OC2_SetConfig+0x74>
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	4a2a      	ldr	r2, [pc, #168]	@ (800fa9c <TIM_OC2_SetConfig+0x118>)
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	d10d      	bne.n	800fa14 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f9f8:	697b      	ldr	r3, [r7, #20]
 800f9fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f9fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	68db      	ldr	r3, [r3, #12]
 800fa04:	011b      	lsls	r3, r3, #4
 800fa06:	697a      	ldr	r2, [r7, #20]
 800fa08:	4313      	orrs	r3, r2
 800fa0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fa0c:	697b      	ldr	r3, [r7, #20]
 800fa0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fa12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	4a1f      	ldr	r2, [pc, #124]	@ (800fa94 <TIM_OC2_SetConfig+0x110>)
 800fa18:	4293      	cmp	r3, r2
 800fa1a:	d013      	beq.n	800fa44 <TIM_OC2_SetConfig+0xc0>
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	4a1e      	ldr	r2, [pc, #120]	@ (800fa98 <TIM_OC2_SetConfig+0x114>)
 800fa20:	4293      	cmp	r3, r2
 800fa22:	d00f      	beq.n	800fa44 <TIM_OC2_SetConfig+0xc0>
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	4a1e      	ldr	r2, [pc, #120]	@ (800faa0 <TIM_OC2_SetConfig+0x11c>)
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d00b      	beq.n	800fa44 <TIM_OC2_SetConfig+0xc0>
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	4a1d      	ldr	r2, [pc, #116]	@ (800faa4 <TIM_OC2_SetConfig+0x120>)
 800fa30:	4293      	cmp	r3, r2
 800fa32:	d007      	beq.n	800fa44 <TIM_OC2_SetConfig+0xc0>
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	4a1c      	ldr	r2, [pc, #112]	@ (800faa8 <TIM_OC2_SetConfig+0x124>)
 800fa38:	4293      	cmp	r3, r2
 800fa3a:	d003      	beq.n	800fa44 <TIM_OC2_SetConfig+0xc0>
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	4a17      	ldr	r2, [pc, #92]	@ (800fa9c <TIM_OC2_SetConfig+0x118>)
 800fa40:	4293      	cmp	r3, r2
 800fa42:	d113      	bne.n	800fa6c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fa4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fa4c:	693b      	ldr	r3, [r7, #16]
 800fa4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fa52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	695b      	ldr	r3, [r3, #20]
 800fa58:	009b      	lsls	r3, r3, #2
 800fa5a:	693a      	ldr	r2, [r7, #16]
 800fa5c:	4313      	orrs	r3, r2
 800fa5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	699b      	ldr	r3, [r3, #24]
 800fa64:	009b      	lsls	r3, r3, #2
 800fa66:	693a      	ldr	r2, [r7, #16]
 800fa68:	4313      	orrs	r3, r2
 800fa6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	693a      	ldr	r2, [r7, #16]
 800fa70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	68fa      	ldr	r2, [r7, #12]
 800fa76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	685a      	ldr	r2, [r3, #4]
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	697a      	ldr	r2, [r7, #20]
 800fa84:	621a      	str	r2, [r3, #32]
}
 800fa86:	bf00      	nop
 800fa88:	371c      	adds	r7, #28
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa90:	4770      	bx	lr
 800fa92:	bf00      	nop
 800fa94:	40012c00 	.word	0x40012c00
 800fa98:	40013400 	.word	0x40013400
 800fa9c:	40015000 	.word	0x40015000
 800faa0:	40014000 	.word	0x40014000
 800faa4:	40014400 	.word	0x40014400
 800faa8:	40014800 	.word	0x40014800

0800faac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800faac:	b480      	push	{r7}
 800faae:	b087      	sub	sp, #28
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6a1b      	ldr	r3, [r3, #32]
 800faba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	6a1b      	ldr	r3, [r3, #32]
 800fac0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	685b      	ldr	r3, [r3, #4]
 800facc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	69db      	ldr	r3, [r3, #28]
 800fad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	f023 0303 	bic.w	r3, r3, #3
 800fae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	68fa      	ldr	r2, [r7, #12]
 800faee:	4313      	orrs	r3, r2
 800faf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800faf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	689b      	ldr	r3, [r3, #8]
 800fafe:	021b      	lsls	r3, r3, #8
 800fb00:	697a      	ldr	r2, [r7, #20]
 800fb02:	4313      	orrs	r3, r2
 800fb04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	4a2b      	ldr	r2, [pc, #172]	@ (800fbb8 <TIM_OC3_SetConfig+0x10c>)
 800fb0a:	4293      	cmp	r3, r2
 800fb0c:	d007      	beq.n	800fb1e <TIM_OC3_SetConfig+0x72>
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	4a2a      	ldr	r2, [pc, #168]	@ (800fbbc <TIM_OC3_SetConfig+0x110>)
 800fb12:	4293      	cmp	r3, r2
 800fb14:	d003      	beq.n	800fb1e <TIM_OC3_SetConfig+0x72>
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	4a29      	ldr	r2, [pc, #164]	@ (800fbc0 <TIM_OC3_SetConfig+0x114>)
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	d10d      	bne.n	800fb3a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fb24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	68db      	ldr	r3, [r3, #12]
 800fb2a:	021b      	lsls	r3, r3, #8
 800fb2c:	697a      	ldr	r2, [r7, #20]
 800fb2e:	4313      	orrs	r3, r2
 800fb30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fb32:	697b      	ldr	r3, [r7, #20]
 800fb34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fb38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	4a1e      	ldr	r2, [pc, #120]	@ (800fbb8 <TIM_OC3_SetConfig+0x10c>)
 800fb3e:	4293      	cmp	r3, r2
 800fb40:	d013      	beq.n	800fb6a <TIM_OC3_SetConfig+0xbe>
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	4a1d      	ldr	r2, [pc, #116]	@ (800fbbc <TIM_OC3_SetConfig+0x110>)
 800fb46:	4293      	cmp	r3, r2
 800fb48:	d00f      	beq.n	800fb6a <TIM_OC3_SetConfig+0xbe>
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	4a1d      	ldr	r2, [pc, #116]	@ (800fbc4 <TIM_OC3_SetConfig+0x118>)
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	d00b      	beq.n	800fb6a <TIM_OC3_SetConfig+0xbe>
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	4a1c      	ldr	r2, [pc, #112]	@ (800fbc8 <TIM_OC3_SetConfig+0x11c>)
 800fb56:	4293      	cmp	r3, r2
 800fb58:	d007      	beq.n	800fb6a <TIM_OC3_SetConfig+0xbe>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	4a1b      	ldr	r2, [pc, #108]	@ (800fbcc <TIM_OC3_SetConfig+0x120>)
 800fb5e:	4293      	cmp	r3, r2
 800fb60:	d003      	beq.n	800fb6a <TIM_OC3_SetConfig+0xbe>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	4a16      	ldr	r2, [pc, #88]	@ (800fbc0 <TIM_OC3_SetConfig+0x114>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	d113      	bne.n	800fb92 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fb6a:	693b      	ldr	r3, [r7, #16]
 800fb6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fb70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fb72:	693b      	ldr	r3, [r7, #16]
 800fb74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fb78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	695b      	ldr	r3, [r3, #20]
 800fb7e:	011b      	lsls	r3, r3, #4
 800fb80:	693a      	ldr	r2, [r7, #16]
 800fb82:	4313      	orrs	r3, r2
 800fb84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	699b      	ldr	r3, [r3, #24]
 800fb8a:	011b      	lsls	r3, r3, #4
 800fb8c:	693a      	ldr	r2, [r7, #16]
 800fb8e:	4313      	orrs	r3, r2
 800fb90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	693a      	ldr	r2, [r7, #16]
 800fb96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	68fa      	ldr	r2, [r7, #12]
 800fb9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	685a      	ldr	r2, [r3, #4]
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	697a      	ldr	r2, [r7, #20]
 800fbaa:	621a      	str	r2, [r3, #32]
}
 800fbac:	bf00      	nop
 800fbae:	371c      	adds	r7, #28
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb6:	4770      	bx	lr
 800fbb8:	40012c00 	.word	0x40012c00
 800fbbc:	40013400 	.word	0x40013400
 800fbc0:	40015000 	.word	0x40015000
 800fbc4:	40014000 	.word	0x40014000
 800fbc8:	40014400 	.word	0x40014400
 800fbcc:	40014800 	.word	0x40014800

0800fbd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fbd0:	b480      	push	{r7}
 800fbd2:	b087      	sub	sp, #28
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
 800fbd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6a1b      	ldr	r3, [r3, #32]
 800fbde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	6a1b      	ldr	r3, [r3, #32]
 800fbe4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	685b      	ldr	r3, [r3, #4]
 800fbf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	69db      	ldr	r3, [r3, #28]
 800fbf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fbfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fc02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fc0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	021b      	lsls	r3, r3, #8
 800fc12:	68fa      	ldr	r2, [r7, #12]
 800fc14:	4313      	orrs	r3, r2
 800fc16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fc1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	689b      	ldr	r3, [r3, #8]
 800fc24:	031b      	lsls	r3, r3, #12
 800fc26:	697a      	ldr	r2, [r7, #20]
 800fc28:	4313      	orrs	r3, r2
 800fc2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	4a2c      	ldr	r2, [pc, #176]	@ (800fce0 <TIM_OC4_SetConfig+0x110>)
 800fc30:	4293      	cmp	r3, r2
 800fc32:	d007      	beq.n	800fc44 <TIM_OC4_SetConfig+0x74>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	4a2b      	ldr	r2, [pc, #172]	@ (800fce4 <TIM_OC4_SetConfig+0x114>)
 800fc38:	4293      	cmp	r3, r2
 800fc3a:	d003      	beq.n	800fc44 <TIM_OC4_SetConfig+0x74>
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	4a2a      	ldr	r2, [pc, #168]	@ (800fce8 <TIM_OC4_SetConfig+0x118>)
 800fc40:	4293      	cmp	r3, r2
 800fc42:	d10d      	bne.n	800fc60 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800fc4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	68db      	ldr	r3, [r3, #12]
 800fc50:	031b      	lsls	r3, r3, #12
 800fc52:	697a      	ldr	r2, [r7, #20]
 800fc54:	4313      	orrs	r3, r2
 800fc56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800fc58:	697b      	ldr	r3, [r7, #20]
 800fc5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fc5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	4a1f      	ldr	r2, [pc, #124]	@ (800fce0 <TIM_OC4_SetConfig+0x110>)
 800fc64:	4293      	cmp	r3, r2
 800fc66:	d013      	beq.n	800fc90 <TIM_OC4_SetConfig+0xc0>
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	4a1e      	ldr	r2, [pc, #120]	@ (800fce4 <TIM_OC4_SetConfig+0x114>)
 800fc6c:	4293      	cmp	r3, r2
 800fc6e:	d00f      	beq.n	800fc90 <TIM_OC4_SetConfig+0xc0>
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	4a1e      	ldr	r2, [pc, #120]	@ (800fcec <TIM_OC4_SetConfig+0x11c>)
 800fc74:	4293      	cmp	r3, r2
 800fc76:	d00b      	beq.n	800fc90 <TIM_OC4_SetConfig+0xc0>
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	4a1d      	ldr	r2, [pc, #116]	@ (800fcf0 <TIM_OC4_SetConfig+0x120>)
 800fc7c:	4293      	cmp	r3, r2
 800fc7e:	d007      	beq.n	800fc90 <TIM_OC4_SetConfig+0xc0>
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	4a1c      	ldr	r2, [pc, #112]	@ (800fcf4 <TIM_OC4_SetConfig+0x124>)
 800fc84:	4293      	cmp	r3, r2
 800fc86:	d003      	beq.n	800fc90 <TIM_OC4_SetConfig+0xc0>
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	4a17      	ldr	r2, [pc, #92]	@ (800fce8 <TIM_OC4_SetConfig+0x118>)
 800fc8c:	4293      	cmp	r3, r2
 800fc8e:	d113      	bne.n	800fcb8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fc90:	693b      	ldr	r3, [r7, #16]
 800fc92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fc96:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800fc98:	693b      	ldr	r3, [r7, #16]
 800fc9a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800fc9e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	695b      	ldr	r3, [r3, #20]
 800fca4:	019b      	lsls	r3, r3, #6
 800fca6:	693a      	ldr	r2, [r7, #16]
 800fca8:	4313      	orrs	r3, r2
 800fcaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	699b      	ldr	r3, [r3, #24]
 800fcb0:	019b      	lsls	r3, r3, #6
 800fcb2:	693a      	ldr	r2, [r7, #16]
 800fcb4:	4313      	orrs	r3, r2
 800fcb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	693a      	ldr	r2, [r7, #16]
 800fcbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	68fa      	ldr	r2, [r7, #12]
 800fcc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	685a      	ldr	r2, [r3, #4]
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	697a      	ldr	r2, [r7, #20]
 800fcd0:	621a      	str	r2, [r3, #32]
}
 800fcd2:	bf00      	nop
 800fcd4:	371c      	adds	r7, #28
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcdc:	4770      	bx	lr
 800fcde:	bf00      	nop
 800fce0:	40012c00 	.word	0x40012c00
 800fce4:	40013400 	.word	0x40013400
 800fce8:	40015000 	.word	0x40015000
 800fcec:	40014000 	.word	0x40014000
 800fcf0:	40014400 	.word	0x40014400
 800fcf4:	40014800 	.word	0x40014800

0800fcf8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	b087      	sub	sp, #28
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
 800fd00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	6a1b      	ldr	r3, [r3, #32]
 800fd06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	6a1b      	ldr	r3, [r3, #32]
 800fd0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	685b      	ldr	r3, [r3, #4]
 800fd18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fd26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fd2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	68fa      	ldr	r2, [r7, #12]
 800fd32:	4313      	orrs	r3, r2
 800fd34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800fd3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	689b      	ldr	r3, [r3, #8]
 800fd42:	041b      	lsls	r3, r3, #16
 800fd44:	693a      	ldr	r2, [r7, #16]
 800fd46:	4313      	orrs	r3, r2
 800fd48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	4a19      	ldr	r2, [pc, #100]	@ (800fdb4 <TIM_OC5_SetConfig+0xbc>)
 800fd4e:	4293      	cmp	r3, r2
 800fd50:	d013      	beq.n	800fd7a <TIM_OC5_SetConfig+0x82>
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	4a18      	ldr	r2, [pc, #96]	@ (800fdb8 <TIM_OC5_SetConfig+0xc0>)
 800fd56:	4293      	cmp	r3, r2
 800fd58:	d00f      	beq.n	800fd7a <TIM_OC5_SetConfig+0x82>
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	4a17      	ldr	r2, [pc, #92]	@ (800fdbc <TIM_OC5_SetConfig+0xc4>)
 800fd5e:	4293      	cmp	r3, r2
 800fd60:	d00b      	beq.n	800fd7a <TIM_OC5_SetConfig+0x82>
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	4a16      	ldr	r2, [pc, #88]	@ (800fdc0 <TIM_OC5_SetConfig+0xc8>)
 800fd66:	4293      	cmp	r3, r2
 800fd68:	d007      	beq.n	800fd7a <TIM_OC5_SetConfig+0x82>
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	4a15      	ldr	r2, [pc, #84]	@ (800fdc4 <TIM_OC5_SetConfig+0xcc>)
 800fd6e:	4293      	cmp	r3, r2
 800fd70:	d003      	beq.n	800fd7a <TIM_OC5_SetConfig+0x82>
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	4a14      	ldr	r2, [pc, #80]	@ (800fdc8 <TIM_OC5_SetConfig+0xd0>)
 800fd76:	4293      	cmp	r3, r2
 800fd78:	d109      	bne.n	800fd8e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fd80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	695b      	ldr	r3, [r3, #20]
 800fd86:	021b      	lsls	r3, r3, #8
 800fd88:	697a      	ldr	r2, [r7, #20]
 800fd8a:	4313      	orrs	r3, r2
 800fd8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	697a      	ldr	r2, [r7, #20]
 800fd92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	68fa      	ldr	r2, [r7, #12]
 800fd98:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	685a      	ldr	r2, [r3, #4]
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	693a      	ldr	r2, [r7, #16]
 800fda6:	621a      	str	r2, [r3, #32]
}
 800fda8:	bf00      	nop
 800fdaa:	371c      	adds	r7, #28
 800fdac:	46bd      	mov	sp, r7
 800fdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb2:	4770      	bx	lr
 800fdb4:	40012c00 	.word	0x40012c00
 800fdb8:	40013400 	.word	0x40013400
 800fdbc:	40014000 	.word	0x40014000
 800fdc0:	40014400 	.word	0x40014400
 800fdc4:	40014800 	.word	0x40014800
 800fdc8:	40015000 	.word	0x40015000

0800fdcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fdcc:	b480      	push	{r7}
 800fdce:	b087      	sub	sp, #28
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6a1b      	ldr	r3, [r3, #32]
 800fdda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	6a1b      	ldr	r3, [r3, #32]
 800fde0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	685b      	ldr	r3, [r3, #4]
 800fdec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fdf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fdfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fdfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	021b      	lsls	r3, r3, #8
 800fe06:	68fa      	ldr	r2, [r7, #12]
 800fe08:	4313      	orrs	r3, r2
 800fe0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fe0c:	693b      	ldr	r3, [r7, #16]
 800fe0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800fe12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	689b      	ldr	r3, [r3, #8]
 800fe18:	051b      	lsls	r3, r3, #20
 800fe1a:	693a      	ldr	r2, [r7, #16]
 800fe1c:	4313      	orrs	r3, r2
 800fe1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	4a1a      	ldr	r2, [pc, #104]	@ (800fe8c <TIM_OC6_SetConfig+0xc0>)
 800fe24:	4293      	cmp	r3, r2
 800fe26:	d013      	beq.n	800fe50 <TIM_OC6_SetConfig+0x84>
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	4a19      	ldr	r2, [pc, #100]	@ (800fe90 <TIM_OC6_SetConfig+0xc4>)
 800fe2c:	4293      	cmp	r3, r2
 800fe2e:	d00f      	beq.n	800fe50 <TIM_OC6_SetConfig+0x84>
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	4a18      	ldr	r2, [pc, #96]	@ (800fe94 <TIM_OC6_SetConfig+0xc8>)
 800fe34:	4293      	cmp	r3, r2
 800fe36:	d00b      	beq.n	800fe50 <TIM_OC6_SetConfig+0x84>
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	4a17      	ldr	r2, [pc, #92]	@ (800fe98 <TIM_OC6_SetConfig+0xcc>)
 800fe3c:	4293      	cmp	r3, r2
 800fe3e:	d007      	beq.n	800fe50 <TIM_OC6_SetConfig+0x84>
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	4a16      	ldr	r2, [pc, #88]	@ (800fe9c <TIM_OC6_SetConfig+0xd0>)
 800fe44:	4293      	cmp	r3, r2
 800fe46:	d003      	beq.n	800fe50 <TIM_OC6_SetConfig+0x84>
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	4a15      	ldr	r2, [pc, #84]	@ (800fea0 <TIM_OC6_SetConfig+0xd4>)
 800fe4c:	4293      	cmp	r3, r2
 800fe4e:	d109      	bne.n	800fe64 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800fe56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	695b      	ldr	r3, [r3, #20]
 800fe5c:	029b      	lsls	r3, r3, #10
 800fe5e:	697a      	ldr	r2, [r7, #20]
 800fe60:	4313      	orrs	r3, r2
 800fe62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	697a      	ldr	r2, [r7, #20]
 800fe68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	68fa      	ldr	r2, [r7, #12]
 800fe6e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	685a      	ldr	r2, [r3, #4]
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	693a      	ldr	r2, [r7, #16]
 800fe7c:	621a      	str	r2, [r3, #32]
}
 800fe7e:	bf00      	nop
 800fe80:	371c      	adds	r7, #28
 800fe82:	46bd      	mov	sp, r7
 800fe84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe88:	4770      	bx	lr
 800fe8a:	bf00      	nop
 800fe8c:	40012c00 	.word	0x40012c00
 800fe90:	40013400 	.word	0x40013400
 800fe94:	40014000 	.word	0x40014000
 800fe98:	40014400 	.word	0x40014400
 800fe9c:	40014800 	.word	0x40014800
 800fea0:	40015000 	.word	0x40015000

0800fea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fea4:	b480      	push	{r7}
 800fea6:	b087      	sub	sp, #28
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	60f8      	str	r0, [r7, #12]
 800feac:	60b9      	str	r1, [r7, #8]
 800feae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	6a1b      	ldr	r3, [r3, #32]
 800feb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	6a1b      	ldr	r3, [r3, #32]
 800feba:	f023 0201 	bic.w	r2, r3, #1
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	699b      	ldr	r3, [r3, #24]
 800fec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fec8:	693b      	ldr	r3, [r7, #16]
 800feca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	011b      	lsls	r3, r3, #4
 800fed4:	693a      	ldr	r2, [r7, #16]
 800fed6:	4313      	orrs	r3, r2
 800fed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	f023 030a 	bic.w	r3, r3, #10
 800fee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fee2:	697a      	ldr	r2, [r7, #20]
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	4313      	orrs	r3, r2
 800fee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	693a      	ldr	r2, [r7, #16]
 800feee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	697a      	ldr	r2, [r7, #20]
 800fef4:	621a      	str	r2, [r3, #32]
}
 800fef6:	bf00      	nop
 800fef8:	371c      	adds	r7, #28
 800fefa:	46bd      	mov	sp, r7
 800fefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff00:	4770      	bx	lr

0800ff02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ff02:	b480      	push	{r7}
 800ff04:	b087      	sub	sp, #28
 800ff06:	af00      	add	r7, sp, #0
 800ff08:	60f8      	str	r0, [r7, #12]
 800ff0a:	60b9      	str	r1, [r7, #8]
 800ff0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	6a1b      	ldr	r3, [r3, #32]
 800ff12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	6a1b      	ldr	r3, [r3, #32]
 800ff18:	f023 0210 	bic.w	r2, r3, #16
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	699b      	ldr	r3, [r3, #24]
 800ff24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ff26:	693b      	ldr	r3, [r7, #16]
 800ff28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ff2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	031b      	lsls	r3, r3, #12
 800ff32:	693a      	ldr	r2, [r7, #16]
 800ff34:	4313      	orrs	r3, r2
 800ff36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ff38:	697b      	ldr	r3, [r7, #20]
 800ff3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ff3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	011b      	lsls	r3, r3, #4
 800ff44:	697a      	ldr	r2, [r7, #20]
 800ff46:	4313      	orrs	r3, r2
 800ff48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	693a      	ldr	r2, [r7, #16]
 800ff4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	697a      	ldr	r2, [r7, #20]
 800ff54:	621a      	str	r2, [r3, #32]
}
 800ff56:	bf00      	nop
 800ff58:	371c      	adds	r7, #28
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff60:	4770      	bx	lr

0800ff62 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ff62:	b480      	push	{r7}
 800ff64:	b085      	sub	sp, #20
 800ff66:	af00      	add	r7, sp, #0
 800ff68:	6078      	str	r0, [r7, #4]
 800ff6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	689b      	ldr	r3, [r3, #8]
 800ff70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ff78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ff7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ff7e:	683a      	ldr	r2, [r7, #0]
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	4313      	orrs	r3, r2
 800ff84:	f043 0307 	orr.w	r3, r3, #7
 800ff88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	68fa      	ldr	r2, [r7, #12]
 800ff8e:	609a      	str	r2, [r3, #8]
}
 800ff90:	bf00      	nop
 800ff92:	3714      	adds	r7, #20
 800ff94:	46bd      	mov	sp, r7
 800ff96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9a:	4770      	bx	lr

0800ff9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ff9c:	b480      	push	{r7}
 800ff9e:	b087      	sub	sp, #28
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	60f8      	str	r0, [r7, #12]
 800ffa4:	60b9      	str	r1, [r7, #8]
 800ffa6:	607a      	str	r2, [r7, #4]
 800ffa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	689b      	ldr	r3, [r3, #8]
 800ffae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ffb0:	697b      	ldr	r3, [r7, #20]
 800ffb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ffb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ffb8:	683b      	ldr	r3, [r7, #0]
 800ffba:	021a      	lsls	r2, r3, #8
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	431a      	orrs	r2, r3
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	4313      	orrs	r3, r2
 800ffc4:	697a      	ldr	r2, [r7, #20]
 800ffc6:	4313      	orrs	r3, r2
 800ffc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	697a      	ldr	r2, [r7, #20]
 800ffce:	609a      	str	r2, [r3, #8]
}
 800ffd0:	bf00      	nop
 800ffd2:	371c      	adds	r7, #28
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffda:	4770      	bx	lr

0800ffdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ffdc:	b480      	push	{r7}
 800ffde:	b087      	sub	sp, #28
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	60f8      	str	r0, [r7, #12]
 800ffe4:	60b9      	str	r1, [r7, #8]
 800ffe6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	f003 031f 	and.w	r3, r3, #31
 800ffee:	2201      	movs	r2, #1
 800fff0:	fa02 f303 	lsl.w	r3, r2, r3
 800fff4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	6a1a      	ldr	r2, [r3, #32]
 800fffa:	697b      	ldr	r3, [r7, #20]
 800fffc:	43db      	mvns	r3, r3
 800fffe:	401a      	ands	r2, r3
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	6a1a      	ldr	r2, [r3, #32]
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	f003 031f 	and.w	r3, r3, #31
 801000e:	6879      	ldr	r1, [r7, #4]
 8010010:	fa01 f303 	lsl.w	r3, r1, r3
 8010014:	431a      	orrs	r2, r3
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	621a      	str	r2, [r3, #32]
}
 801001a:	bf00      	nop
 801001c:	371c      	adds	r7, #28
 801001e:	46bd      	mov	sp, r7
 8010020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010024:	4770      	bx	lr
	...

08010028 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8010028:	b480      	push	{r7}
 801002a:	b083      	sub	sp, #12
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	4a26      	ldr	r2, [pc, #152]	@ (80100cc <TIM_ResetCallback+0xa4>)
 8010034:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	4a25      	ldr	r2, [pc, #148]	@ (80100d0 <TIM_ResetCallback+0xa8>)
 801003c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	4a24      	ldr	r2, [pc, #144]	@ (80100d4 <TIM_ResetCallback+0xac>)
 8010044:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	4a23      	ldr	r2, [pc, #140]	@ (80100d8 <TIM_ResetCallback+0xb0>)
 801004c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	4a22      	ldr	r2, [pc, #136]	@ (80100dc <TIM_ResetCallback+0xb4>)
 8010054:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	4a21      	ldr	r2, [pc, #132]	@ (80100e0 <TIM_ResetCallback+0xb8>)
 801005c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	4a20      	ldr	r2, [pc, #128]	@ (80100e4 <TIM_ResetCallback+0xbc>)
 8010064:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	4a1f      	ldr	r2, [pc, #124]	@ (80100e8 <TIM_ResetCallback+0xc0>)
 801006c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	4a1e      	ldr	r2, [pc, #120]	@ (80100ec <TIM_ResetCallback+0xc4>)
 8010074:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	4a1d      	ldr	r2, [pc, #116]	@ (80100f0 <TIM_ResetCallback+0xc8>)
 801007c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	4a1c      	ldr	r2, [pc, #112]	@ (80100f4 <TIM_ResetCallback+0xcc>)
 8010084:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	4a1b      	ldr	r2, [pc, #108]	@ (80100f8 <TIM_ResetCallback+0xd0>)
 801008c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	4a1a      	ldr	r2, [pc, #104]	@ (80100fc <TIM_ResetCallback+0xd4>)
 8010094:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	4a19      	ldr	r2, [pc, #100]	@ (8010100 <TIM_ResetCallback+0xd8>)
 801009c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	4a18      	ldr	r2, [pc, #96]	@ (8010104 <TIM_ResetCallback+0xdc>)
 80100a4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	4a17      	ldr	r2, [pc, #92]	@ (8010108 <TIM_ResetCallback+0xe0>)
 80100ac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	4a16      	ldr	r2, [pc, #88]	@ (801010c <TIM_ResetCallback+0xe4>)
 80100b4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	4a15      	ldr	r2, [pc, #84]	@ (8010110 <TIM_ResetCallback+0xe8>)
 80100bc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80100c0:	bf00      	nop
 80100c2:	370c      	adds	r7, #12
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr
 80100cc:	0800889d 	.word	0x0800889d
 80100d0:	0800f375 	.word	0x0800f375
 80100d4:	0800f3ed 	.word	0x0800f3ed
 80100d8:	0800f401 	.word	0x0800f401
 80100dc:	0800f39d 	.word	0x0800f39d
 80100e0:	0800f3b1 	.word	0x0800f3b1
 80100e4:	0800f389 	.word	0x0800f389
 80100e8:	0800f3c5 	.word	0x0800f3c5
 80100ec:	0800f3d9 	.word	0x0800f3d9
 80100f0:	0800f415 	.word	0x0800f415
 80100f4:	08010369 	.word	0x08010369
 80100f8:	0801037d 	.word	0x0801037d
 80100fc:	08010391 	.word	0x08010391
 8010100:	080103a5 	.word	0x080103a5
 8010104:	080103b9 	.word	0x080103b9
 8010108:	080103cd 	.word	0x080103cd
 801010c:	080103e1 	.word	0x080103e1
 8010110:	080103f5 	.word	0x080103f5

08010114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010114:	b480      	push	{r7}
 8010116:	b085      	sub	sp, #20
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
 801011c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010124:	2b01      	cmp	r3, #1
 8010126:	d101      	bne.n	801012c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010128:	2302      	movs	r3, #2
 801012a:	e074      	b.n	8010216 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2201      	movs	r2, #1
 8010130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2202      	movs	r2, #2
 8010138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	689b      	ldr	r3, [r3, #8]
 801014a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	4a34      	ldr	r2, [pc, #208]	@ (8010224 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010152:	4293      	cmp	r3, r2
 8010154:	d009      	beq.n	801016a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	4a33      	ldr	r2, [pc, #204]	@ (8010228 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801015c:	4293      	cmp	r3, r2
 801015e:	d004      	beq.n	801016a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	4a31      	ldr	r2, [pc, #196]	@ (801022c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010166:	4293      	cmp	r3, r2
 8010168:	d108      	bne.n	801017c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8010170:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	685b      	ldr	r3, [r3, #4]
 8010176:	68fa      	ldr	r2, [r7, #12]
 8010178:	4313      	orrs	r3, r2
 801017a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8010182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	68fa      	ldr	r2, [r7, #12]
 801018e:	4313      	orrs	r3, r2
 8010190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	68fa      	ldr	r2, [r7, #12]
 8010198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	4a21      	ldr	r2, [pc, #132]	@ (8010224 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80101a0:	4293      	cmp	r3, r2
 80101a2:	d022      	beq.n	80101ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80101ac:	d01d      	beq.n	80101ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	4a1f      	ldr	r2, [pc, #124]	@ (8010230 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80101b4:	4293      	cmp	r3, r2
 80101b6:	d018      	beq.n	80101ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	4a1d      	ldr	r2, [pc, #116]	@ (8010234 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80101be:	4293      	cmp	r3, r2
 80101c0:	d013      	beq.n	80101ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	4a1c      	ldr	r2, [pc, #112]	@ (8010238 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80101c8:	4293      	cmp	r3, r2
 80101ca:	d00e      	beq.n	80101ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	4a15      	ldr	r2, [pc, #84]	@ (8010228 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80101d2:	4293      	cmp	r3, r2
 80101d4:	d009      	beq.n	80101ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	4a18      	ldr	r2, [pc, #96]	@ (801023c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80101dc:	4293      	cmp	r3, r2
 80101de:	d004      	beq.n	80101ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	4a11      	ldr	r2, [pc, #68]	@ (801022c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80101e6:	4293      	cmp	r3, r2
 80101e8:	d10c      	bne.n	8010204 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80101ea:	68bb      	ldr	r3, [r7, #8]
 80101ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80101f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	689b      	ldr	r3, [r3, #8]
 80101f6:	68ba      	ldr	r2, [r7, #8]
 80101f8:	4313      	orrs	r3, r2
 80101fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	68ba      	ldr	r2, [r7, #8]
 8010202:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	2201      	movs	r2, #1
 8010208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2200      	movs	r2, #0
 8010210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010214:	2300      	movs	r3, #0
}
 8010216:	4618      	mov	r0, r3
 8010218:	3714      	adds	r7, #20
 801021a:	46bd      	mov	sp, r7
 801021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010220:	4770      	bx	lr
 8010222:	bf00      	nop
 8010224:	40012c00 	.word	0x40012c00
 8010228:	40013400 	.word	0x40013400
 801022c:	40015000 	.word	0x40015000
 8010230:	40000400 	.word	0x40000400
 8010234:	40000800 	.word	0x40000800
 8010238:	40000c00 	.word	0x40000c00
 801023c:	40014000 	.word	0x40014000

08010240 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010240:	b480      	push	{r7}
 8010242:	b085      	sub	sp, #20
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
 8010248:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801024a:	2300      	movs	r3, #0
 801024c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010254:	2b01      	cmp	r3, #1
 8010256:	d101      	bne.n	801025c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010258:	2302      	movs	r3, #2
 801025a:	e078      	b.n	801034e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2201      	movs	r2, #1
 8010260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	68db      	ldr	r3, [r3, #12]
 801026e:	4313      	orrs	r3, r2
 8010270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	689b      	ldr	r3, [r3, #8]
 801027c:	4313      	orrs	r3, r2
 801027e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8010286:	683b      	ldr	r3, [r7, #0]
 8010288:	685b      	ldr	r3, [r3, #4]
 801028a:	4313      	orrs	r3, r2
 801028c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010294:	683b      	ldr	r3, [r7, #0]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	4313      	orrs	r3, r2
 801029a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	691b      	ldr	r3, [r3, #16]
 80102a6:	4313      	orrs	r3, r2
 80102a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80102b0:	683b      	ldr	r3, [r7, #0]
 80102b2:	695b      	ldr	r3, [r3, #20]
 80102b4:	4313      	orrs	r3, r2
 80102b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102c2:	4313      	orrs	r3, r2
 80102c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	699b      	ldr	r3, [r3, #24]
 80102d0:	041b      	lsls	r3, r3, #16
 80102d2:	4313      	orrs	r3, r2
 80102d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	69db      	ldr	r3, [r3, #28]
 80102e0:	4313      	orrs	r3, r2
 80102e2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	4a1c      	ldr	r2, [pc, #112]	@ (801035c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80102ea:	4293      	cmp	r3, r2
 80102ec:	d009      	beq.n	8010302 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	4a1b      	ldr	r2, [pc, #108]	@ (8010360 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80102f4:	4293      	cmp	r3, r2
 80102f6:	d004      	beq.n	8010302 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	4a19      	ldr	r2, [pc, #100]	@ (8010364 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80102fe:	4293      	cmp	r3, r2
 8010300:	d11c      	bne.n	801033c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801030c:	051b      	lsls	r3, r3, #20
 801030e:	4313      	orrs	r3, r2
 8010310:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	6a1b      	ldr	r3, [r3, #32]
 801031c:	4313      	orrs	r3, r2
 801031e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801032a:	4313      	orrs	r3, r2
 801032c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010338:	4313      	orrs	r3, r2
 801033a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	68fa      	ldr	r2, [r7, #12]
 8010342:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2200      	movs	r2, #0
 8010348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801034c:	2300      	movs	r3, #0
}
 801034e:	4618      	mov	r0, r3
 8010350:	3714      	adds	r7, #20
 8010352:	46bd      	mov	sp, r7
 8010354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010358:	4770      	bx	lr
 801035a:	bf00      	nop
 801035c:	40012c00 	.word	0x40012c00
 8010360:	40013400 	.word	0x40013400
 8010364:	40015000 	.word	0x40015000

08010368 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010368:	b480      	push	{r7}
 801036a:	b083      	sub	sp, #12
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010370:	bf00      	nop
 8010372:	370c      	adds	r7, #12
 8010374:	46bd      	mov	sp, r7
 8010376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037a:	4770      	bx	lr

0801037c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 801037c:	b480      	push	{r7}
 801037e:	b083      	sub	sp, #12
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8010384:	bf00      	nop
 8010386:	370c      	adds	r7, #12
 8010388:	46bd      	mov	sp, r7
 801038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038e:	4770      	bx	lr

08010390 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010390:	b480      	push	{r7}
 8010392:	b083      	sub	sp, #12
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010398:	bf00      	nop
 801039a:	370c      	adds	r7, #12
 801039c:	46bd      	mov	sp, r7
 801039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a2:	4770      	bx	lr

080103a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80103a4:	b480      	push	{r7}
 80103a6:	b083      	sub	sp, #12
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80103ac:	bf00      	nop
 80103ae:	370c      	adds	r7, #12
 80103b0:	46bd      	mov	sp, r7
 80103b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b6:	4770      	bx	lr

080103b8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80103b8:	b480      	push	{r7}
 80103ba:	b083      	sub	sp, #12
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80103c0:	bf00      	nop
 80103c2:	370c      	adds	r7, #12
 80103c4:	46bd      	mov	sp, r7
 80103c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ca:	4770      	bx	lr

080103cc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80103cc:	b480      	push	{r7}
 80103ce:	b083      	sub	sp, #12
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80103d4:	bf00      	nop
 80103d6:	370c      	adds	r7, #12
 80103d8:	46bd      	mov	sp, r7
 80103da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103de:	4770      	bx	lr

080103e0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80103e0:	b480      	push	{r7}
 80103e2:	b083      	sub	sp, #12
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80103e8:	bf00      	nop
 80103ea:	370c      	adds	r7, #12
 80103ec:	46bd      	mov	sp, r7
 80103ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f2:	4770      	bx	lr

080103f4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80103f4:	b480      	push	{r7}
 80103f6:	b083      	sub	sp, #12
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80103fc:	bf00      	nop
 80103fe:	370c      	adds	r7, #12
 8010400:	46bd      	mov	sp, r7
 8010402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010406:	4770      	bx	lr

08010408 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b082      	sub	sp, #8
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d101      	bne.n	801041a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010416:	2301      	movs	r3, #1
 8010418:	e050      	b.n	80104bc <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010420:	2b00      	cmp	r3, #0
 8010422:	d114      	bne.n	801044e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2200      	movs	r2, #0
 8010428:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f000 fde5 	bl	8010ffc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8010438:	2b00      	cmp	r3, #0
 801043a:	d103      	bne.n	8010444 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	4a21      	ldr	r2, [pc, #132]	@ (80104c4 <HAL_UART_Init+0xbc>)
 8010440:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 801044a:	6878      	ldr	r0, [r7, #4]
 801044c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2224      	movs	r2, #36	@ 0x24
 8010452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	681a      	ldr	r2, [r3, #0]
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	f022 0201 	bic.w	r2, r2, #1
 8010464:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801046a:	2b00      	cmp	r3, #0
 801046c:	d002      	beq.n	8010474 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f001 f912 	bl	8011698 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f000 fe13 	bl	80110a0 <UART_SetConfig>
 801047a:	4603      	mov	r3, r0
 801047c:	2b01      	cmp	r3, #1
 801047e:	d101      	bne.n	8010484 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8010480:	2301      	movs	r3, #1
 8010482:	e01b      	b.n	80104bc <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	685a      	ldr	r2, [r3, #4]
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010492:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	689a      	ldr	r2, [r3, #8]
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80104a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	681a      	ldr	r2, [r3, #0]
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	f042 0201 	orr.w	r2, r2, #1
 80104b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f001 f991 	bl	80117dc <UART_CheckIdleState>
 80104ba:	4603      	mov	r3, r0
}
 80104bc:	4618      	mov	r0, r3
 80104be:	3708      	adds	r7, #8
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}
 80104c4:	0800a8a9 	.word	0x0800a8a9

080104c8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80104c8:	b480      	push	{r7}
 80104ca:	b087      	sub	sp, #28
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	60f8      	str	r0, [r7, #12]
 80104d0:	460b      	mov	r3, r1
 80104d2:	607a      	str	r2, [r7, #4]
 80104d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80104d6:	2300      	movs	r3, #0
 80104d8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d109      	bne.n	80104f4 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80104e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 80104f0:	2301      	movs	r3, #1
 80104f2:	e09c      	b.n	801062e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80104fa:	2b20      	cmp	r3, #32
 80104fc:	d16c      	bne.n	80105d8 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80104fe:	7afb      	ldrb	r3, [r7, #11]
 8010500:	2b0c      	cmp	r3, #12
 8010502:	d85e      	bhi.n	80105c2 <HAL_UART_RegisterCallback+0xfa>
 8010504:	a201      	add	r2, pc, #4	@ (adr r2, 801050c <HAL_UART_RegisterCallback+0x44>)
 8010506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801050a:	bf00      	nop
 801050c:	08010541 	.word	0x08010541
 8010510:	0801054b 	.word	0x0801054b
 8010514:	08010555 	.word	0x08010555
 8010518:	0801055f 	.word	0x0801055f
 801051c:	08010569 	.word	0x08010569
 8010520:	08010573 	.word	0x08010573
 8010524:	0801057d 	.word	0x0801057d
 8010528:	08010587 	.word	0x08010587
 801052c:	08010591 	.word	0x08010591
 8010530:	0801059b 	.word	0x0801059b
 8010534:	080105a5 	.word	0x080105a5
 8010538:	080105af 	.word	0x080105af
 801053c:	080105b9 	.word	0x080105b9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	687a      	ldr	r2, [r7, #4]
 8010544:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8010548:	e070      	b.n	801062c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	687a      	ldr	r2, [r7, #4]
 801054e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8010552:	e06b      	b.n	801062c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	687a      	ldr	r2, [r7, #4]
 8010558:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 801055c:	e066      	b.n	801062c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	687a      	ldr	r2, [r7, #4]
 8010562:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8010566:	e061      	b.n	801062c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	687a      	ldr	r2, [r7, #4]
 801056c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8010570:	e05c      	b.n	801062c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	687a      	ldr	r2, [r7, #4]
 8010576:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 801057a:	e057      	b.n	801062c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	687a      	ldr	r2, [r7, #4]
 8010580:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8010584:	e052      	b.n	801062c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	687a      	ldr	r2, [r7, #4]
 801058a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 801058e:	e04d      	b.n	801062c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	687a      	ldr	r2, [r7, #4]
 8010594:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8010598:	e048      	b.n	801062c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	687a      	ldr	r2, [r7, #4]
 801059e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80105a2:	e043      	b.n	801062c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	687a      	ldr	r2, [r7, #4]
 80105a8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80105ac:	e03e      	b.n	801062c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	687a      	ldr	r2, [r7, #4]
 80105b2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80105b6:	e039      	b.n	801062c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	687a      	ldr	r2, [r7, #4]
 80105bc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80105c0:	e034      	b.n	801062c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80105c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80105d2:	2301      	movs	r3, #1
 80105d4:	75fb      	strb	r3, [r7, #23]
        break;
 80105d6:	e029      	b.n	801062c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d11a      	bne.n	8010618 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80105e2:	7afb      	ldrb	r3, [r7, #11]
 80105e4:	2b0b      	cmp	r3, #11
 80105e6:	d002      	beq.n	80105ee <HAL_UART_RegisterCallback+0x126>
 80105e8:	2b0c      	cmp	r3, #12
 80105ea:	d005      	beq.n	80105f8 <HAL_UART_RegisterCallback+0x130>
 80105ec:	e009      	b.n	8010602 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	687a      	ldr	r2, [r7, #4]
 80105f2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80105f6:	e019      	b.n	801062c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	687a      	ldr	r2, [r7, #4]
 80105fc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8010600:	e014      	b.n	801062c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010608:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8010612:	2301      	movs	r3, #1
 8010614:	75fb      	strb	r3, [r7, #23]
        break;
 8010616:	e009      	b.n	801062c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801061e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8010628:	2301      	movs	r3, #1
 801062a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 801062c:	7dfb      	ldrb	r3, [r7, #23]
}
 801062e:	4618      	mov	r0, r3
 8010630:	371c      	adds	r7, #28
 8010632:	46bd      	mov	sp, r7
 8010634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010638:	4770      	bx	lr
 801063a:	bf00      	nop

0801063c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b08a      	sub	sp, #40	@ 0x28
 8010640:	af00      	add	r7, sp, #0
 8010642:	60f8      	str	r0, [r7, #12]
 8010644:	60b9      	str	r1, [r7, #8]
 8010646:	4613      	mov	r3, r2
 8010648:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010650:	2b20      	cmp	r3, #32
 8010652:	d167      	bne.n	8010724 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d002      	beq.n	8010660 <HAL_UART_Transmit_DMA+0x24>
 801065a:	88fb      	ldrh	r3, [r7, #6]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d101      	bne.n	8010664 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010660:	2301      	movs	r3, #1
 8010662:	e060      	b.n	8010726 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	68ba      	ldr	r2, [r7, #8]
 8010668:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	88fa      	ldrh	r2, [r7, #6]
 801066e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	88fa      	ldrh	r2, [r7, #6]
 8010676:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	2200      	movs	r2, #0
 801067e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	2221      	movs	r2, #33	@ 0x21
 8010686:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801068e:	2b00      	cmp	r3, #0
 8010690:	d028      	beq.n	80106e4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010696:	4a26      	ldr	r2, [pc, #152]	@ (8010730 <HAL_UART_Transmit_DMA+0xf4>)
 8010698:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801069e:	4a25      	ldr	r2, [pc, #148]	@ (8010734 <HAL_UART_Transmit_DMA+0xf8>)
 80106a0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80106a6:	4a24      	ldr	r2, [pc, #144]	@ (8010738 <HAL_UART_Transmit_DMA+0xfc>)
 80106a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80106ae:	2200      	movs	r2, #0
 80106b0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80106ba:	4619      	mov	r1, r3
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	3328      	adds	r3, #40	@ 0x28
 80106c2:	461a      	mov	r2, r3
 80106c4:	88fb      	ldrh	r3, [r7, #6]
 80106c6:	f7fc f919 	bl	800c8fc <HAL_DMA_Start_IT>
 80106ca:	4603      	mov	r3, r0
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d009      	beq.n	80106e4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	2210      	movs	r2, #16
 80106d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	2220      	movs	r2, #32
 80106dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80106e0:	2301      	movs	r3, #1
 80106e2:	e020      	b.n	8010726 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	2240      	movs	r2, #64	@ 0x40
 80106ea:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	3308      	adds	r3, #8
 80106f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106f4:	697b      	ldr	r3, [r7, #20]
 80106f6:	e853 3f00 	ldrex	r3, [r3]
 80106fa:	613b      	str	r3, [r7, #16]
   return(result);
 80106fc:	693b      	ldr	r3, [r7, #16]
 80106fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010702:	627b      	str	r3, [r7, #36]	@ 0x24
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	3308      	adds	r3, #8
 801070a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801070c:	623a      	str	r2, [r7, #32]
 801070e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010710:	69f9      	ldr	r1, [r7, #28]
 8010712:	6a3a      	ldr	r2, [r7, #32]
 8010714:	e841 2300 	strex	r3, r2, [r1]
 8010718:	61bb      	str	r3, [r7, #24]
   return(result);
 801071a:	69bb      	ldr	r3, [r7, #24]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d1e5      	bne.n	80106ec <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8010720:	2300      	movs	r3, #0
 8010722:	e000      	b.n	8010726 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010724:	2302      	movs	r3, #2
  }
}
 8010726:	4618      	mov	r0, r3
 8010728:	3728      	adds	r7, #40	@ 0x28
 801072a:	46bd      	mov	sp, r7
 801072c:	bd80      	pop	{r7, pc}
 801072e:	bf00      	nop
 8010730:	08011ca7 	.word	0x08011ca7
 8010734:	08011d45 	.word	0x08011d45
 8010738:	08011edf 	.word	0x08011edf

0801073c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b08a      	sub	sp, #40	@ 0x28
 8010740:	af00      	add	r7, sp, #0
 8010742:	60f8      	str	r0, [r7, #12]
 8010744:	60b9      	str	r1, [r7, #8]
 8010746:	4613      	mov	r3, r2
 8010748:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010750:	2b20      	cmp	r3, #32
 8010752:	d137      	bne.n	80107c4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d002      	beq.n	8010760 <HAL_UART_Receive_DMA+0x24>
 801075a:	88fb      	ldrh	r3, [r7, #6]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d101      	bne.n	8010764 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8010760:	2301      	movs	r3, #1
 8010762:	e030      	b.n	80107c6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	2200      	movs	r2, #0
 8010768:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	4a18      	ldr	r2, [pc, #96]	@ (80107d0 <HAL_UART_Receive_DMA+0x94>)
 8010770:	4293      	cmp	r3, r2
 8010772:	d01f      	beq.n	80107b4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	685b      	ldr	r3, [r3, #4]
 801077a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801077e:	2b00      	cmp	r3, #0
 8010780:	d018      	beq.n	80107b4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	e853 3f00 	ldrex	r3, [r3]
 801078e:	613b      	str	r3, [r7, #16]
   return(result);
 8010790:	693b      	ldr	r3, [r7, #16]
 8010792:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010796:	627b      	str	r3, [r7, #36]	@ 0x24
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	461a      	mov	r2, r3
 801079e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107a0:	623b      	str	r3, [r7, #32]
 80107a2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107a4:	69f9      	ldr	r1, [r7, #28]
 80107a6:	6a3a      	ldr	r2, [r7, #32]
 80107a8:	e841 2300 	strex	r3, r2, [r1]
 80107ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80107ae:	69bb      	ldr	r3, [r7, #24]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d1e6      	bne.n	8010782 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80107b4:	88fb      	ldrh	r3, [r7, #6]
 80107b6:	461a      	mov	r2, r3
 80107b8:	68b9      	ldr	r1, [r7, #8]
 80107ba:	68f8      	ldr	r0, [r7, #12]
 80107bc:	f001 f926 	bl	8011a0c <UART_Start_Receive_DMA>
 80107c0:	4603      	mov	r3, r0
 80107c2:	e000      	b.n	80107c6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80107c4:	2302      	movs	r3, #2
  }
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	3728      	adds	r7, #40	@ 0x28
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}
 80107ce:	bf00      	nop
 80107d0:	40008000 	.word	0x40008000

080107d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b0ba      	sub	sp, #232	@ 0xe8
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	69db      	ldr	r3, [r3, #28]
 80107e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	689b      	ldr	r3, [r3, #8]
 80107f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80107fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80107fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8010802:	4013      	ands	r3, r2
 8010804:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010808:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801080c:	2b00      	cmp	r3, #0
 801080e:	d11b      	bne.n	8010848 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010814:	f003 0320 	and.w	r3, r3, #32
 8010818:	2b00      	cmp	r3, #0
 801081a:	d015      	beq.n	8010848 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801081c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010820:	f003 0320 	and.w	r3, r3, #32
 8010824:	2b00      	cmp	r3, #0
 8010826:	d105      	bne.n	8010834 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801082c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010830:	2b00      	cmp	r3, #0
 8010832:	d009      	beq.n	8010848 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010838:	2b00      	cmp	r3, #0
 801083a:	f000 8312 	beq.w	8010e62 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	4798      	blx	r3
      }
      return;
 8010846:	e30c      	b.n	8010e62 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010848:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801084c:	2b00      	cmp	r3, #0
 801084e:	f000 8129 	beq.w	8010aa4 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010852:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010856:	4b90      	ldr	r3, [pc, #576]	@ (8010a98 <HAL_UART_IRQHandler+0x2c4>)
 8010858:	4013      	ands	r3, r2
 801085a:	2b00      	cmp	r3, #0
 801085c:	d106      	bne.n	801086c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801085e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8010862:	4b8e      	ldr	r3, [pc, #568]	@ (8010a9c <HAL_UART_IRQHandler+0x2c8>)
 8010864:	4013      	ands	r3, r2
 8010866:	2b00      	cmp	r3, #0
 8010868:	f000 811c 	beq.w	8010aa4 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801086c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010870:	f003 0301 	and.w	r3, r3, #1
 8010874:	2b00      	cmp	r3, #0
 8010876:	d011      	beq.n	801089c <HAL_UART_IRQHandler+0xc8>
 8010878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801087c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010880:	2b00      	cmp	r3, #0
 8010882:	d00b      	beq.n	801089c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	2201      	movs	r2, #1
 801088a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010892:	f043 0201 	orr.w	r2, r3, #1
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801089c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80108a0:	f003 0302 	and.w	r3, r3, #2
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d011      	beq.n	80108cc <HAL_UART_IRQHandler+0xf8>
 80108a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80108ac:	f003 0301 	and.w	r3, r3, #1
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d00b      	beq.n	80108cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	2202      	movs	r2, #2
 80108ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80108c2:	f043 0204 	orr.w	r2, r3, #4
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80108cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80108d0:	f003 0304 	and.w	r3, r3, #4
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d011      	beq.n	80108fc <HAL_UART_IRQHandler+0x128>
 80108d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80108dc:	f003 0301 	and.w	r3, r3, #1
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d00b      	beq.n	80108fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	2204      	movs	r2, #4
 80108ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80108f2:	f043 0202 	orr.w	r2, r3, #2
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80108fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010900:	f003 0308 	and.w	r3, r3, #8
 8010904:	2b00      	cmp	r3, #0
 8010906:	d017      	beq.n	8010938 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801090c:	f003 0320 	and.w	r3, r3, #32
 8010910:	2b00      	cmp	r3, #0
 8010912:	d105      	bne.n	8010920 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010914:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010918:	4b5f      	ldr	r3, [pc, #380]	@ (8010a98 <HAL_UART_IRQHandler+0x2c4>)
 801091a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801091c:	2b00      	cmp	r3, #0
 801091e:	d00b      	beq.n	8010938 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	2208      	movs	r2, #8
 8010926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801092e:	f043 0208 	orr.w	r2, r3, #8
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801093c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010940:	2b00      	cmp	r3, #0
 8010942:	d012      	beq.n	801096a <HAL_UART_IRQHandler+0x196>
 8010944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010948:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801094c:	2b00      	cmp	r3, #0
 801094e:	d00c      	beq.n	801096a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010958:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010960:	f043 0220 	orr.w	r2, r3, #32
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010970:	2b00      	cmp	r3, #0
 8010972:	f000 8278 	beq.w	8010e66 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801097a:	f003 0320 	and.w	r3, r3, #32
 801097e:	2b00      	cmp	r3, #0
 8010980:	d013      	beq.n	80109aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010986:	f003 0320 	and.w	r3, r3, #32
 801098a:	2b00      	cmp	r3, #0
 801098c:	d105      	bne.n	801099a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801098e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010996:	2b00      	cmp	r3, #0
 8010998:	d007      	beq.n	80109aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d003      	beq.n	80109aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80109a6:	6878      	ldr	r0, [r7, #4]
 80109a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80109b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	689b      	ldr	r3, [r3, #8]
 80109ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80109be:	2b40      	cmp	r3, #64	@ 0x40
 80109c0:	d005      	beq.n	80109ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80109c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80109c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d058      	beq.n	8010a80 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80109ce:	6878      	ldr	r0, [r7, #4]
 80109d0:	f001 f903 	bl	8011bda <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	689b      	ldr	r3, [r3, #8]
 80109da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80109de:	2b40      	cmp	r3, #64	@ 0x40
 80109e0:	d148      	bne.n	8010a74 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	3308      	adds	r3, #8
 80109e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80109f0:	e853 3f00 	ldrex	r3, [r3]
 80109f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80109f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80109fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010a00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	3308      	adds	r3, #8
 8010a0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010a0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010a12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010a1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010a1e:	e841 2300 	strex	r3, r2, [r1]
 8010a22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d1d9      	bne.n	80109e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d017      	beq.n	8010a68 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a3e:	4a18      	ldr	r2, [pc, #96]	@ (8010aa0 <HAL_UART_IRQHandler+0x2cc>)
 8010a40:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7fc f82b 	bl	800caa4 <HAL_DMA_Abort_IT>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d01f      	beq.n	8010a94 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a5c:	687a      	ldr	r2, [r7, #4]
 8010a5e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8010a62:	4610      	mov	r0, r2
 8010a64:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a66:	e015      	b.n	8010a94 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a72:	e00f      	b.n	8010a94 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a7e:	e009      	b.n	8010a94 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010a86:	6878      	ldr	r0, [r7, #4]
 8010a88:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8010a92:	e1e8      	b.n	8010e66 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a94:	bf00      	nop
    return;
 8010a96:	e1e6      	b.n	8010e66 <HAL_UART_IRQHandler+0x692>
 8010a98:	10000001 	.word	0x10000001
 8010a9c:	04000120 	.word	0x04000120
 8010aa0:	08011f63 	.word	0x08011f63

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010aa8:	2b01      	cmp	r3, #1
 8010aaa:	f040 8176 	bne.w	8010d9a <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ab2:	f003 0310 	and.w	r3, r3, #16
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	f000 816f 	beq.w	8010d9a <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010ac0:	f003 0310 	and.w	r3, r3, #16
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	f000 8168 	beq.w	8010d9a <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	2210      	movs	r2, #16
 8010ad0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	689b      	ldr	r3, [r3, #8]
 8010ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010adc:	2b40      	cmp	r3, #64	@ 0x40
 8010ade:	f040 80dc 	bne.w	8010c9a <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	685b      	ldr	r3, [r3, #4]
 8010aec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010af0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	f000 80b1 	beq.w	8010c5c <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010b00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010b04:	429a      	cmp	r2, r3
 8010b06:	f080 80a9 	bcs.w	8010c5c <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010b10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	f003 0320 	and.w	r3, r3, #32
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	f040 8087 	bne.w	8010c36 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010b34:	e853 3f00 	ldrex	r3, [r3]
 8010b38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010b40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010b44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	461a      	mov	r2, r3
 8010b4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010b52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010b56:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010b5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010b62:	e841 2300 	strex	r3, r2, [r1]
 8010b66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d1da      	bne.n	8010b28 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	3308      	adds	r3, #8
 8010b78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010b7c:	e853 3f00 	ldrex	r3, [r3]
 8010b80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010b82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010b84:	f023 0301 	bic.w	r3, r3, #1
 8010b88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	3308      	adds	r3, #8
 8010b92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010b96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010b9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010b9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010ba2:	e841 2300 	strex	r3, r2, [r1]
 8010ba6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010ba8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d1e1      	bne.n	8010b72 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	3308      	adds	r3, #8
 8010bb4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010bb8:	e853 3f00 	ldrex	r3, [r3]
 8010bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010bbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010bc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	3308      	adds	r3, #8
 8010bce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010bd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010bd4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bd6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010bd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010bda:	e841 2300 	strex	r3, r2, [r1]
 8010bde:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010be0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d1e3      	bne.n	8010bae <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	2220      	movs	r2, #32
 8010bea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010bfc:	e853 3f00 	ldrex	r3, [r3]
 8010c00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010c02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010c04:	f023 0310 	bic.w	r3, r3, #16
 8010c08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	461a      	mov	r2, r3
 8010c12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010c16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010c18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010c1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010c1e:	e841 2300 	strex	r3, r2, [r1]
 8010c22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010c24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d1e4      	bne.n	8010bf4 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c30:	4618      	mov	r0, r3
 8010c32:	f7fb fede 	bl	800c9f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	2202      	movs	r2, #2
 8010c3a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010c42:	687a      	ldr	r2, [r7, #4]
 8010c44:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8010c48:	687a      	ldr	r2, [r7, #4]
 8010c4a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8010c4e:	b292      	uxth	r2, r2
 8010c50:	1a8a      	subs	r2, r1, r2
 8010c52:	b292      	uxth	r2, r2
 8010c54:	4611      	mov	r1, r2
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8010c5a:	e106      	b.n	8010e6a <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010c62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010c66:	429a      	cmp	r2, r3
 8010c68:	f040 80ff 	bne.w	8010e6a <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	f003 0320 	and.w	r3, r3, #32
 8010c7a:	2b20      	cmp	r3, #32
 8010c7c:	f040 80f5 	bne.w	8010e6a <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	2202      	movs	r2, #2
 8010c84:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010c8c:	687a      	ldr	r2, [r7, #4]
 8010c8e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8010c92:	4611      	mov	r1, r2
 8010c94:	6878      	ldr	r0, [r7, #4]
 8010c96:	4798      	blx	r3
      return;
 8010c98:	e0e7      	b.n	8010e6a <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010ca6:	b29b      	uxth	r3, r3
 8010ca8:	1ad3      	subs	r3, r2, r3
 8010caa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010cb4:	b29b      	uxth	r3, r3
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	f000 80d9 	beq.w	8010e6e <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8010cbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	f000 80d4 	beq.w	8010e6e <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cce:	e853 3f00 	ldrex	r3, [r3]
 8010cd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010cda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	461a      	mov	r2, r3
 8010ce4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010ce8:	647b      	str	r3, [r7, #68]	@ 0x44
 8010cea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010cee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010cf0:	e841 2300 	strex	r3, r2, [r1]
 8010cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d1e4      	bne.n	8010cc6 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	3308      	adds	r3, #8
 8010d02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d06:	e853 3f00 	ldrex	r3, [r3]
 8010d0a:	623b      	str	r3, [r7, #32]
   return(result);
 8010d0c:	6a3b      	ldr	r3, [r7, #32]
 8010d0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010d12:	f023 0301 	bic.w	r3, r3, #1
 8010d16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	3308      	adds	r3, #8
 8010d20:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010d24:	633a      	str	r2, [r7, #48]	@ 0x30
 8010d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d2c:	e841 2300 	strex	r3, r2, [r1]
 8010d30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d1e1      	bne.n	8010cfc <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2220      	movs	r2, #32
 8010d3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	2200      	movs	r2, #0
 8010d44:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	2200      	movs	r2, #0
 8010d4a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d52:	693b      	ldr	r3, [r7, #16]
 8010d54:	e853 3f00 	ldrex	r3, [r3]
 8010d58:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	f023 0310 	bic.w	r3, r3, #16
 8010d60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	461a      	mov	r2, r3
 8010d6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010d6e:	61fb      	str	r3, [r7, #28]
 8010d70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d72:	69b9      	ldr	r1, [r7, #24]
 8010d74:	69fa      	ldr	r2, [r7, #28]
 8010d76:	e841 2300 	strex	r3, r2, [r1]
 8010d7a:	617b      	str	r3, [r7, #20]
   return(result);
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d1e4      	bne.n	8010d4c <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	2202      	movs	r2, #2
 8010d86:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010d8e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8010d92:	4611      	mov	r1, r2
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010d98:	e069      	b.n	8010e6e <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010d9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d010      	beq.n	8010dc8 <HAL_UART_IRQHandler+0x5f4>
 8010da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010daa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d00a      	beq.n	8010dc8 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8010dba:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010dc6:	e055      	b.n	8010e74 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d014      	beq.n	8010dfe <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d105      	bne.n	8010dec <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010de0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010de4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d008      	beq.n	8010dfe <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d03e      	beq.n	8010e72 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010df8:	6878      	ldr	r0, [r7, #4]
 8010dfa:	4798      	blx	r3
    }
    return;
 8010dfc:	e039      	b.n	8010e72 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d009      	beq.n	8010e1e <HAL_UART_IRQHandler+0x64a>
 8010e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d003      	beq.n	8010e1e <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	f001 f8b7 	bl	8011f8a <UART_EndTransmit_IT>
    return;
 8010e1c:	e02a      	b.n	8010e74 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010e22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d00b      	beq.n	8010e42 <HAL_UART_IRQHandler+0x66e>
 8010e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010e2e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d005      	beq.n	8010e42 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010e40:	e018      	b.n	8010e74 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010e46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d012      	beq.n	8010e74 <HAL_UART_IRQHandler+0x6a0>
 8010e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	da0e      	bge.n	8010e74 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010e60:	e008      	b.n	8010e74 <HAL_UART_IRQHandler+0x6a0>
      return;
 8010e62:	bf00      	nop
 8010e64:	e006      	b.n	8010e74 <HAL_UART_IRQHandler+0x6a0>
    return;
 8010e66:	bf00      	nop
 8010e68:	e004      	b.n	8010e74 <HAL_UART_IRQHandler+0x6a0>
      return;
 8010e6a:	bf00      	nop
 8010e6c:	e002      	b.n	8010e74 <HAL_UART_IRQHandler+0x6a0>
      return;
 8010e6e:	bf00      	nop
 8010e70:	e000      	b.n	8010e74 <HAL_UART_IRQHandler+0x6a0>
    return;
 8010e72:	bf00      	nop
  }
}
 8010e74:	37e8      	adds	r7, #232	@ 0xe8
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}
 8010e7a:	bf00      	nop

08010e7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010e7c:	b480      	push	{r7}
 8010e7e:	b083      	sub	sp, #12
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010e84:	bf00      	nop
 8010e86:	370c      	adds	r7, #12
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8e:	4770      	bx	lr

08010e90 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010e90:	b480      	push	{r7}
 8010e92:	b083      	sub	sp, #12
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010e98:	bf00      	nop
 8010e9a:	370c      	adds	r7, #12
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea2:	4770      	bx	lr

08010ea4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010ea4:	b480      	push	{r7}
 8010ea6:	b083      	sub	sp, #12
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8010eac:	bf00      	nop
 8010eae:	370c      	adds	r7, #12
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb6:	4770      	bx	lr

08010eb8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	b083      	sub	sp, #12
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8010ec0:	bf00      	nop
 8010ec2:	370c      	adds	r7, #12
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eca:	4770      	bx	lr

08010ecc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010ecc:	b480      	push	{r7}
 8010ece:	b083      	sub	sp, #12
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010ed4:	bf00      	nop
 8010ed6:	370c      	adds	r7, #12
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ede:	4770      	bx	lr

08010ee0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8010ee0:	b480      	push	{r7}
 8010ee2:	b083      	sub	sp, #12
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8010ee8:	bf00      	nop
 8010eea:	370c      	adds	r7, #12
 8010eec:	46bd      	mov	sp, r7
 8010eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef2:	4770      	bx	lr

08010ef4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b083      	sub	sp, #12
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8010efc:	bf00      	nop
 8010efe:	370c      	adds	r7, #12
 8010f00:	46bd      	mov	sp, r7
 8010f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f06:	4770      	bx	lr

08010f08 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8010f08:	b480      	push	{r7}
 8010f0a:	b083      	sub	sp, #12
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8010f10:	bf00      	nop
 8010f12:	370c      	adds	r7, #12
 8010f14:	46bd      	mov	sp, r7
 8010f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1a:	4770      	bx	lr

08010f1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010f1c:	b480      	push	{r7}
 8010f1e:	b083      	sub	sp, #12
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
 8010f24:	460b      	mov	r3, r1
 8010f26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010f28:	bf00      	nop
 8010f2a:	370c      	adds	r7, #12
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f32:	4770      	bx	lr

08010f34 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8010f34:	b480      	push	{r7}
 8010f36:	b083      	sub	sp, #12
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
 8010f3c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	4a09      	ldr	r2, [pc, #36]	@ (8010f68 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8010f44:	4293      	cmp	r3, r2
 8010f46:	d009      	beq.n	8010f5c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	695b      	ldr	r3, [r3, #20]
 8010f4e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	683a      	ldr	r2, [r7, #0]
 8010f58:	430a      	orrs	r2, r1
 8010f5a:	615a      	str	r2, [r3, #20]
  }
}
 8010f5c:	bf00      	nop
 8010f5e:	370c      	adds	r7, #12
 8010f60:	46bd      	mov	sp, r7
 8010f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f66:	4770      	bx	lr
 8010f68:	40008000 	.word	0x40008000

08010f6c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8010f6c:	b480      	push	{r7}
 8010f6e:	b083      	sub	sp, #12
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	4a18      	ldr	r2, [pc, #96]	@ (8010fdc <HAL_UART_EnableReceiverTimeout+0x70>)
 8010f7a:	4293      	cmp	r3, r2
 8010f7c:	d027      	beq.n	8010fce <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010f84:	2b20      	cmp	r3, #32
 8010f86:	d120      	bne.n	8010fca <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010f8e:	2b01      	cmp	r3, #1
 8010f90:	d101      	bne.n	8010f96 <HAL_UART_EnableReceiverTimeout+0x2a>
 8010f92:	2302      	movs	r3, #2
 8010f94:	e01c      	b.n	8010fd0 <HAL_UART_EnableReceiverTimeout+0x64>
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	2201      	movs	r2, #1
 8010f9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	2224      	movs	r2, #36	@ 0x24
 8010fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	685a      	ldr	r2, [r3, #4]
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8010fb4:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	2220      	movs	r2, #32
 8010fba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	e002      	b.n	8010fd0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8010fca:	2302      	movs	r3, #2
 8010fcc:	e000      	b.n	8010fd0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8010fce:	2301      	movs	r3, #1
  }
}
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	370c      	adds	r7, #12
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fda:	4770      	bx	lr
 8010fdc:	40008000 	.word	0x40008000

08010fe0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8010fe0:	b480      	push	{r7}
 8010fe2:	b083      	sub	sp, #12
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	370c      	adds	r7, #12
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff8:	4770      	bx	lr
	...

08010ffc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8010ffc:	b480      	push	{r7}
 8010ffe:	b083      	sub	sp, #12
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	4a1a      	ldr	r2, [pc, #104]	@ (8011070 <UART_InitCallbacksToDefault+0x74>)
 8011008:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	4a19      	ldr	r2, [pc, #100]	@ (8011074 <UART_InitCallbacksToDefault+0x78>)
 8011010:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	4a18      	ldr	r2, [pc, #96]	@ (8011078 <UART_InitCallbacksToDefault+0x7c>)
 8011018:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	4a17      	ldr	r2, [pc, #92]	@ (801107c <UART_InitCallbacksToDefault+0x80>)
 8011020:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	4a16      	ldr	r2, [pc, #88]	@ (8011080 <UART_InitCallbacksToDefault+0x84>)
 8011028:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	4a15      	ldr	r2, [pc, #84]	@ (8011084 <UART_InitCallbacksToDefault+0x88>)
 8011030:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	4a14      	ldr	r2, [pc, #80]	@ (8011088 <UART_InitCallbacksToDefault+0x8c>)
 8011038:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	4a13      	ldr	r2, [pc, #76]	@ (801108c <UART_InitCallbacksToDefault+0x90>)
 8011040:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	4a12      	ldr	r2, [pc, #72]	@ (8011090 <UART_InitCallbacksToDefault+0x94>)
 8011048:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	4a11      	ldr	r2, [pc, #68]	@ (8011094 <UART_InitCallbacksToDefault+0x98>)
 8011050:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	4a10      	ldr	r2, [pc, #64]	@ (8011098 <UART_InitCallbacksToDefault+0x9c>)
 8011058:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	4a0f      	ldr	r2, [pc, #60]	@ (801109c <UART_InitCallbacksToDefault+0xa0>)
 8011060:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8011064:	bf00      	nop
 8011066:	370c      	adds	r7, #12
 8011068:	46bd      	mov	sp, r7
 801106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106e:	4770      	bx	lr
 8011070:	08010e91 	.word	0x08010e91
 8011074:	08010e7d 	.word	0x08010e7d
 8011078:	08010eb9 	.word	0x08010eb9
 801107c:	08010ea5 	.word	0x08010ea5
 8011080:	08010ecd 	.word	0x08010ecd
 8011084:	08010ee1 	.word	0x08010ee1
 8011088:	08010ef5 	.word	0x08010ef5
 801108c:	08010f09 	.word	0x08010f09
 8011090:	08011fe5 	.word	0x08011fe5
 8011094:	08011ff9 	.word	0x08011ff9
 8011098:	0801200d 	.word	0x0801200d
 801109c:	08010f1d 	.word	0x08010f1d

080110a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80110a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80110a4:	b08c      	sub	sp, #48	@ 0x30
 80110a6:	af00      	add	r7, sp, #0
 80110a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80110aa:	2300      	movs	r3, #0
 80110ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	689a      	ldr	r2, [r3, #8]
 80110b4:	697b      	ldr	r3, [r7, #20]
 80110b6:	691b      	ldr	r3, [r3, #16]
 80110b8:	431a      	orrs	r2, r3
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	695b      	ldr	r3, [r3, #20]
 80110be:	431a      	orrs	r2, r3
 80110c0:	697b      	ldr	r3, [r7, #20]
 80110c2:	69db      	ldr	r3, [r3, #28]
 80110c4:	4313      	orrs	r3, r2
 80110c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80110c8:	697b      	ldr	r3, [r7, #20]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	681a      	ldr	r2, [r3, #0]
 80110ce:	4baa      	ldr	r3, [pc, #680]	@ (8011378 <UART_SetConfig+0x2d8>)
 80110d0:	4013      	ands	r3, r2
 80110d2:	697a      	ldr	r2, [r7, #20]
 80110d4:	6812      	ldr	r2, [r2, #0]
 80110d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80110d8:	430b      	orrs	r3, r1
 80110da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80110dc:	697b      	ldr	r3, [r7, #20]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	685b      	ldr	r3, [r3, #4]
 80110e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80110e6:	697b      	ldr	r3, [r7, #20]
 80110e8:	68da      	ldr	r2, [r3, #12]
 80110ea:	697b      	ldr	r3, [r7, #20]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	430a      	orrs	r2, r1
 80110f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80110f2:	697b      	ldr	r3, [r7, #20]
 80110f4:	699b      	ldr	r3, [r3, #24]
 80110f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	4a9f      	ldr	r2, [pc, #636]	@ (801137c <UART_SetConfig+0x2dc>)
 80110fe:	4293      	cmp	r3, r2
 8011100:	d004      	beq.n	801110c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011102:	697b      	ldr	r3, [r7, #20]
 8011104:	6a1b      	ldr	r3, [r3, #32]
 8011106:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011108:	4313      	orrs	r3, r2
 801110a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801110c:	697b      	ldr	r3, [r7, #20]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	689b      	ldr	r3, [r3, #8]
 8011112:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8011116:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 801111a:	697a      	ldr	r2, [r7, #20]
 801111c:	6812      	ldr	r2, [r2, #0]
 801111e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011120:	430b      	orrs	r3, r1
 8011122:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011124:	697b      	ldr	r3, [r7, #20]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801112a:	f023 010f 	bic.w	r1, r3, #15
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011132:	697b      	ldr	r3, [r7, #20]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	430a      	orrs	r2, r1
 8011138:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801113a:	697b      	ldr	r3, [r7, #20]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	4a90      	ldr	r2, [pc, #576]	@ (8011380 <UART_SetConfig+0x2e0>)
 8011140:	4293      	cmp	r3, r2
 8011142:	d125      	bne.n	8011190 <UART_SetConfig+0xf0>
 8011144:	4b8f      	ldr	r3, [pc, #572]	@ (8011384 <UART_SetConfig+0x2e4>)
 8011146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801114a:	f003 0303 	and.w	r3, r3, #3
 801114e:	2b03      	cmp	r3, #3
 8011150:	d81a      	bhi.n	8011188 <UART_SetConfig+0xe8>
 8011152:	a201      	add	r2, pc, #4	@ (adr r2, 8011158 <UART_SetConfig+0xb8>)
 8011154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011158:	08011169 	.word	0x08011169
 801115c:	08011179 	.word	0x08011179
 8011160:	08011171 	.word	0x08011171
 8011164:	08011181 	.word	0x08011181
 8011168:	2301      	movs	r3, #1
 801116a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801116e:	e116      	b.n	801139e <UART_SetConfig+0x2fe>
 8011170:	2302      	movs	r3, #2
 8011172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011176:	e112      	b.n	801139e <UART_SetConfig+0x2fe>
 8011178:	2304      	movs	r3, #4
 801117a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801117e:	e10e      	b.n	801139e <UART_SetConfig+0x2fe>
 8011180:	2308      	movs	r3, #8
 8011182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011186:	e10a      	b.n	801139e <UART_SetConfig+0x2fe>
 8011188:	2310      	movs	r3, #16
 801118a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801118e:	e106      	b.n	801139e <UART_SetConfig+0x2fe>
 8011190:	697b      	ldr	r3, [r7, #20]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	4a7c      	ldr	r2, [pc, #496]	@ (8011388 <UART_SetConfig+0x2e8>)
 8011196:	4293      	cmp	r3, r2
 8011198:	d138      	bne.n	801120c <UART_SetConfig+0x16c>
 801119a:	4b7a      	ldr	r3, [pc, #488]	@ (8011384 <UART_SetConfig+0x2e4>)
 801119c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80111a0:	f003 030c 	and.w	r3, r3, #12
 80111a4:	2b0c      	cmp	r3, #12
 80111a6:	d82d      	bhi.n	8011204 <UART_SetConfig+0x164>
 80111a8:	a201      	add	r2, pc, #4	@ (adr r2, 80111b0 <UART_SetConfig+0x110>)
 80111aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111ae:	bf00      	nop
 80111b0:	080111e5 	.word	0x080111e5
 80111b4:	08011205 	.word	0x08011205
 80111b8:	08011205 	.word	0x08011205
 80111bc:	08011205 	.word	0x08011205
 80111c0:	080111f5 	.word	0x080111f5
 80111c4:	08011205 	.word	0x08011205
 80111c8:	08011205 	.word	0x08011205
 80111cc:	08011205 	.word	0x08011205
 80111d0:	080111ed 	.word	0x080111ed
 80111d4:	08011205 	.word	0x08011205
 80111d8:	08011205 	.word	0x08011205
 80111dc:	08011205 	.word	0x08011205
 80111e0:	080111fd 	.word	0x080111fd
 80111e4:	2300      	movs	r3, #0
 80111e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80111ea:	e0d8      	b.n	801139e <UART_SetConfig+0x2fe>
 80111ec:	2302      	movs	r3, #2
 80111ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80111f2:	e0d4      	b.n	801139e <UART_SetConfig+0x2fe>
 80111f4:	2304      	movs	r3, #4
 80111f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80111fa:	e0d0      	b.n	801139e <UART_SetConfig+0x2fe>
 80111fc:	2308      	movs	r3, #8
 80111fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011202:	e0cc      	b.n	801139e <UART_SetConfig+0x2fe>
 8011204:	2310      	movs	r3, #16
 8011206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801120a:	e0c8      	b.n	801139e <UART_SetConfig+0x2fe>
 801120c:	697b      	ldr	r3, [r7, #20]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	4a5e      	ldr	r2, [pc, #376]	@ (801138c <UART_SetConfig+0x2ec>)
 8011212:	4293      	cmp	r3, r2
 8011214:	d125      	bne.n	8011262 <UART_SetConfig+0x1c2>
 8011216:	4b5b      	ldr	r3, [pc, #364]	@ (8011384 <UART_SetConfig+0x2e4>)
 8011218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801121c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8011220:	2b30      	cmp	r3, #48	@ 0x30
 8011222:	d016      	beq.n	8011252 <UART_SetConfig+0x1b2>
 8011224:	2b30      	cmp	r3, #48	@ 0x30
 8011226:	d818      	bhi.n	801125a <UART_SetConfig+0x1ba>
 8011228:	2b20      	cmp	r3, #32
 801122a:	d00a      	beq.n	8011242 <UART_SetConfig+0x1a2>
 801122c:	2b20      	cmp	r3, #32
 801122e:	d814      	bhi.n	801125a <UART_SetConfig+0x1ba>
 8011230:	2b00      	cmp	r3, #0
 8011232:	d002      	beq.n	801123a <UART_SetConfig+0x19a>
 8011234:	2b10      	cmp	r3, #16
 8011236:	d008      	beq.n	801124a <UART_SetConfig+0x1aa>
 8011238:	e00f      	b.n	801125a <UART_SetConfig+0x1ba>
 801123a:	2300      	movs	r3, #0
 801123c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011240:	e0ad      	b.n	801139e <UART_SetConfig+0x2fe>
 8011242:	2302      	movs	r3, #2
 8011244:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011248:	e0a9      	b.n	801139e <UART_SetConfig+0x2fe>
 801124a:	2304      	movs	r3, #4
 801124c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011250:	e0a5      	b.n	801139e <UART_SetConfig+0x2fe>
 8011252:	2308      	movs	r3, #8
 8011254:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011258:	e0a1      	b.n	801139e <UART_SetConfig+0x2fe>
 801125a:	2310      	movs	r3, #16
 801125c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011260:	e09d      	b.n	801139e <UART_SetConfig+0x2fe>
 8011262:	697b      	ldr	r3, [r7, #20]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	4a4a      	ldr	r2, [pc, #296]	@ (8011390 <UART_SetConfig+0x2f0>)
 8011268:	4293      	cmp	r3, r2
 801126a:	d125      	bne.n	80112b8 <UART_SetConfig+0x218>
 801126c:	4b45      	ldr	r3, [pc, #276]	@ (8011384 <UART_SetConfig+0x2e4>)
 801126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011272:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8011276:	2bc0      	cmp	r3, #192	@ 0xc0
 8011278:	d016      	beq.n	80112a8 <UART_SetConfig+0x208>
 801127a:	2bc0      	cmp	r3, #192	@ 0xc0
 801127c:	d818      	bhi.n	80112b0 <UART_SetConfig+0x210>
 801127e:	2b80      	cmp	r3, #128	@ 0x80
 8011280:	d00a      	beq.n	8011298 <UART_SetConfig+0x1f8>
 8011282:	2b80      	cmp	r3, #128	@ 0x80
 8011284:	d814      	bhi.n	80112b0 <UART_SetConfig+0x210>
 8011286:	2b00      	cmp	r3, #0
 8011288:	d002      	beq.n	8011290 <UART_SetConfig+0x1f0>
 801128a:	2b40      	cmp	r3, #64	@ 0x40
 801128c:	d008      	beq.n	80112a0 <UART_SetConfig+0x200>
 801128e:	e00f      	b.n	80112b0 <UART_SetConfig+0x210>
 8011290:	2300      	movs	r3, #0
 8011292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011296:	e082      	b.n	801139e <UART_SetConfig+0x2fe>
 8011298:	2302      	movs	r3, #2
 801129a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801129e:	e07e      	b.n	801139e <UART_SetConfig+0x2fe>
 80112a0:	2304      	movs	r3, #4
 80112a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80112a6:	e07a      	b.n	801139e <UART_SetConfig+0x2fe>
 80112a8:	2308      	movs	r3, #8
 80112aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80112ae:	e076      	b.n	801139e <UART_SetConfig+0x2fe>
 80112b0:	2310      	movs	r3, #16
 80112b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80112b6:	e072      	b.n	801139e <UART_SetConfig+0x2fe>
 80112b8:	697b      	ldr	r3, [r7, #20]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	4a35      	ldr	r2, [pc, #212]	@ (8011394 <UART_SetConfig+0x2f4>)
 80112be:	4293      	cmp	r3, r2
 80112c0:	d12a      	bne.n	8011318 <UART_SetConfig+0x278>
 80112c2:	4b30      	ldr	r3, [pc, #192]	@ (8011384 <UART_SetConfig+0x2e4>)
 80112c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80112c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80112cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80112d0:	d01a      	beq.n	8011308 <UART_SetConfig+0x268>
 80112d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80112d6:	d81b      	bhi.n	8011310 <UART_SetConfig+0x270>
 80112d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80112dc:	d00c      	beq.n	80112f8 <UART_SetConfig+0x258>
 80112de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80112e2:	d815      	bhi.n	8011310 <UART_SetConfig+0x270>
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d003      	beq.n	80112f0 <UART_SetConfig+0x250>
 80112e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80112ec:	d008      	beq.n	8011300 <UART_SetConfig+0x260>
 80112ee:	e00f      	b.n	8011310 <UART_SetConfig+0x270>
 80112f0:	2300      	movs	r3, #0
 80112f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80112f6:	e052      	b.n	801139e <UART_SetConfig+0x2fe>
 80112f8:	2302      	movs	r3, #2
 80112fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80112fe:	e04e      	b.n	801139e <UART_SetConfig+0x2fe>
 8011300:	2304      	movs	r3, #4
 8011302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011306:	e04a      	b.n	801139e <UART_SetConfig+0x2fe>
 8011308:	2308      	movs	r3, #8
 801130a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801130e:	e046      	b.n	801139e <UART_SetConfig+0x2fe>
 8011310:	2310      	movs	r3, #16
 8011312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011316:	e042      	b.n	801139e <UART_SetConfig+0x2fe>
 8011318:	697b      	ldr	r3, [r7, #20]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	4a17      	ldr	r2, [pc, #92]	@ (801137c <UART_SetConfig+0x2dc>)
 801131e:	4293      	cmp	r3, r2
 8011320:	d13a      	bne.n	8011398 <UART_SetConfig+0x2f8>
 8011322:	4b18      	ldr	r3, [pc, #96]	@ (8011384 <UART_SetConfig+0x2e4>)
 8011324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011328:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 801132c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011330:	d01a      	beq.n	8011368 <UART_SetConfig+0x2c8>
 8011332:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011336:	d81b      	bhi.n	8011370 <UART_SetConfig+0x2d0>
 8011338:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801133c:	d00c      	beq.n	8011358 <UART_SetConfig+0x2b8>
 801133e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011342:	d815      	bhi.n	8011370 <UART_SetConfig+0x2d0>
 8011344:	2b00      	cmp	r3, #0
 8011346:	d003      	beq.n	8011350 <UART_SetConfig+0x2b0>
 8011348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801134c:	d008      	beq.n	8011360 <UART_SetConfig+0x2c0>
 801134e:	e00f      	b.n	8011370 <UART_SetConfig+0x2d0>
 8011350:	2300      	movs	r3, #0
 8011352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011356:	e022      	b.n	801139e <UART_SetConfig+0x2fe>
 8011358:	2302      	movs	r3, #2
 801135a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801135e:	e01e      	b.n	801139e <UART_SetConfig+0x2fe>
 8011360:	2304      	movs	r3, #4
 8011362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011366:	e01a      	b.n	801139e <UART_SetConfig+0x2fe>
 8011368:	2308      	movs	r3, #8
 801136a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801136e:	e016      	b.n	801139e <UART_SetConfig+0x2fe>
 8011370:	2310      	movs	r3, #16
 8011372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011376:	e012      	b.n	801139e <UART_SetConfig+0x2fe>
 8011378:	cfff69f3 	.word	0xcfff69f3
 801137c:	40008000 	.word	0x40008000
 8011380:	40013800 	.word	0x40013800
 8011384:	40021000 	.word	0x40021000
 8011388:	40004400 	.word	0x40004400
 801138c:	40004800 	.word	0x40004800
 8011390:	40004c00 	.word	0x40004c00
 8011394:	40005000 	.word	0x40005000
 8011398:	2310      	movs	r3, #16
 801139a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801139e:	697b      	ldr	r3, [r7, #20]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	4aae      	ldr	r2, [pc, #696]	@ (801165c <UART_SetConfig+0x5bc>)
 80113a4:	4293      	cmp	r3, r2
 80113a6:	f040 8097 	bne.w	80114d8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80113aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80113ae:	2b08      	cmp	r3, #8
 80113b0:	d823      	bhi.n	80113fa <UART_SetConfig+0x35a>
 80113b2:	a201      	add	r2, pc, #4	@ (adr r2, 80113b8 <UART_SetConfig+0x318>)
 80113b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113b8:	080113dd 	.word	0x080113dd
 80113bc:	080113fb 	.word	0x080113fb
 80113c0:	080113e5 	.word	0x080113e5
 80113c4:	080113fb 	.word	0x080113fb
 80113c8:	080113eb 	.word	0x080113eb
 80113cc:	080113fb 	.word	0x080113fb
 80113d0:	080113fb 	.word	0x080113fb
 80113d4:	080113fb 	.word	0x080113fb
 80113d8:	080113f3 	.word	0x080113f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80113dc:	f7fc fc6c 	bl	800dcb8 <HAL_RCC_GetPCLK1Freq>
 80113e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80113e2:	e010      	b.n	8011406 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80113e4:	4b9e      	ldr	r3, [pc, #632]	@ (8011660 <UART_SetConfig+0x5c0>)
 80113e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80113e8:	e00d      	b.n	8011406 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80113ea:	f7fc fbf7 	bl	800dbdc <HAL_RCC_GetSysClockFreq>
 80113ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80113f0:	e009      	b.n	8011406 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80113f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80113f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80113f8:	e005      	b.n	8011406 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80113fa:	2300      	movs	r3, #0
 80113fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80113fe:	2301      	movs	r3, #1
 8011400:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011404:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011408:	2b00      	cmp	r3, #0
 801140a:	f000 8130 	beq.w	801166e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801140e:	697b      	ldr	r3, [r7, #20]
 8011410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011412:	4a94      	ldr	r2, [pc, #592]	@ (8011664 <UART_SetConfig+0x5c4>)
 8011414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011418:	461a      	mov	r2, r3
 801141a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801141c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011420:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011422:	697b      	ldr	r3, [r7, #20]
 8011424:	685a      	ldr	r2, [r3, #4]
 8011426:	4613      	mov	r3, r2
 8011428:	005b      	lsls	r3, r3, #1
 801142a:	4413      	add	r3, r2
 801142c:	69ba      	ldr	r2, [r7, #24]
 801142e:	429a      	cmp	r2, r3
 8011430:	d305      	bcc.n	801143e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011432:	697b      	ldr	r3, [r7, #20]
 8011434:	685b      	ldr	r3, [r3, #4]
 8011436:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011438:	69ba      	ldr	r2, [r7, #24]
 801143a:	429a      	cmp	r2, r3
 801143c:	d903      	bls.n	8011446 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 801143e:	2301      	movs	r3, #1
 8011440:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011444:	e113      	b.n	801166e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011448:	2200      	movs	r2, #0
 801144a:	60bb      	str	r3, [r7, #8]
 801144c:	60fa      	str	r2, [r7, #12]
 801144e:	697b      	ldr	r3, [r7, #20]
 8011450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011452:	4a84      	ldr	r2, [pc, #528]	@ (8011664 <UART_SetConfig+0x5c4>)
 8011454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011458:	b29b      	uxth	r3, r3
 801145a:	2200      	movs	r2, #0
 801145c:	603b      	str	r3, [r7, #0]
 801145e:	607a      	str	r2, [r7, #4]
 8011460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011464:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011468:	f7ef fbc4 	bl	8000bf4 <__aeabi_uldivmod>
 801146c:	4602      	mov	r2, r0
 801146e:	460b      	mov	r3, r1
 8011470:	4610      	mov	r0, r2
 8011472:	4619      	mov	r1, r3
 8011474:	f04f 0200 	mov.w	r2, #0
 8011478:	f04f 0300 	mov.w	r3, #0
 801147c:	020b      	lsls	r3, r1, #8
 801147e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011482:	0202      	lsls	r2, r0, #8
 8011484:	6979      	ldr	r1, [r7, #20]
 8011486:	6849      	ldr	r1, [r1, #4]
 8011488:	0849      	lsrs	r1, r1, #1
 801148a:	2000      	movs	r0, #0
 801148c:	460c      	mov	r4, r1
 801148e:	4605      	mov	r5, r0
 8011490:	eb12 0804 	adds.w	r8, r2, r4
 8011494:	eb43 0905 	adc.w	r9, r3, r5
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	685b      	ldr	r3, [r3, #4]
 801149c:	2200      	movs	r2, #0
 801149e:	469a      	mov	sl, r3
 80114a0:	4693      	mov	fp, r2
 80114a2:	4652      	mov	r2, sl
 80114a4:	465b      	mov	r3, fp
 80114a6:	4640      	mov	r0, r8
 80114a8:	4649      	mov	r1, r9
 80114aa:	f7ef fba3 	bl	8000bf4 <__aeabi_uldivmod>
 80114ae:	4602      	mov	r2, r0
 80114b0:	460b      	mov	r3, r1
 80114b2:	4613      	mov	r3, r2
 80114b4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80114b6:	6a3b      	ldr	r3, [r7, #32]
 80114b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80114bc:	d308      	bcc.n	80114d0 <UART_SetConfig+0x430>
 80114be:	6a3b      	ldr	r3, [r7, #32]
 80114c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80114c4:	d204      	bcs.n	80114d0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80114c6:	697b      	ldr	r3, [r7, #20]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	6a3a      	ldr	r2, [r7, #32]
 80114cc:	60da      	str	r2, [r3, #12]
 80114ce:	e0ce      	b.n	801166e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80114d0:	2301      	movs	r3, #1
 80114d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80114d6:	e0ca      	b.n	801166e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80114d8:	697b      	ldr	r3, [r7, #20]
 80114da:	69db      	ldr	r3, [r3, #28]
 80114dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80114e0:	d166      	bne.n	80115b0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80114e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80114e6:	2b08      	cmp	r3, #8
 80114e8:	d827      	bhi.n	801153a <UART_SetConfig+0x49a>
 80114ea:	a201      	add	r2, pc, #4	@ (adr r2, 80114f0 <UART_SetConfig+0x450>)
 80114ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114f0:	08011515 	.word	0x08011515
 80114f4:	0801151d 	.word	0x0801151d
 80114f8:	08011525 	.word	0x08011525
 80114fc:	0801153b 	.word	0x0801153b
 8011500:	0801152b 	.word	0x0801152b
 8011504:	0801153b 	.word	0x0801153b
 8011508:	0801153b 	.word	0x0801153b
 801150c:	0801153b 	.word	0x0801153b
 8011510:	08011533 	.word	0x08011533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011514:	f7fc fbd0 	bl	800dcb8 <HAL_RCC_GetPCLK1Freq>
 8011518:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801151a:	e014      	b.n	8011546 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801151c:	f7fc fbe2 	bl	800dce4 <HAL_RCC_GetPCLK2Freq>
 8011520:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011522:	e010      	b.n	8011546 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011524:	4b4e      	ldr	r3, [pc, #312]	@ (8011660 <UART_SetConfig+0x5c0>)
 8011526:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011528:	e00d      	b.n	8011546 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801152a:	f7fc fb57 	bl	800dbdc <HAL_RCC_GetSysClockFreq>
 801152e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011530:	e009      	b.n	8011546 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011536:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011538:	e005      	b.n	8011546 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 801153a:	2300      	movs	r3, #0
 801153c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801153e:	2301      	movs	r3, #1
 8011540:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011544:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011548:	2b00      	cmp	r3, #0
 801154a:	f000 8090 	beq.w	801166e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801154e:	697b      	ldr	r3, [r7, #20]
 8011550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011552:	4a44      	ldr	r2, [pc, #272]	@ (8011664 <UART_SetConfig+0x5c4>)
 8011554:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011558:	461a      	mov	r2, r3
 801155a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801155c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011560:	005a      	lsls	r2, r3, #1
 8011562:	697b      	ldr	r3, [r7, #20]
 8011564:	685b      	ldr	r3, [r3, #4]
 8011566:	085b      	lsrs	r3, r3, #1
 8011568:	441a      	add	r2, r3
 801156a:	697b      	ldr	r3, [r7, #20]
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011572:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011574:	6a3b      	ldr	r3, [r7, #32]
 8011576:	2b0f      	cmp	r3, #15
 8011578:	d916      	bls.n	80115a8 <UART_SetConfig+0x508>
 801157a:	6a3b      	ldr	r3, [r7, #32]
 801157c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011580:	d212      	bcs.n	80115a8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011582:	6a3b      	ldr	r3, [r7, #32]
 8011584:	b29b      	uxth	r3, r3
 8011586:	f023 030f 	bic.w	r3, r3, #15
 801158a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801158c:	6a3b      	ldr	r3, [r7, #32]
 801158e:	085b      	lsrs	r3, r3, #1
 8011590:	b29b      	uxth	r3, r3
 8011592:	f003 0307 	and.w	r3, r3, #7
 8011596:	b29a      	uxth	r2, r3
 8011598:	8bfb      	ldrh	r3, [r7, #30]
 801159a:	4313      	orrs	r3, r2
 801159c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801159e:	697b      	ldr	r3, [r7, #20]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	8bfa      	ldrh	r2, [r7, #30]
 80115a4:	60da      	str	r2, [r3, #12]
 80115a6:	e062      	b.n	801166e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80115a8:	2301      	movs	r3, #1
 80115aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80115ae:	e05e      	b.n	801166e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80115b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80115b4:	2b08      	cmp	r3, #8
 80115b6:	d828      	bhi.n	801160a <UART_SetConfig+0x56a>
 80115b8:	a201      	add	r2, pc, #4	@ (adr r2, 80115c0 <UART_SetConfig+0x520>)
 80115ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115be:	bf00      	nop
 80115c0:	080115e5 	.word	0x080115e5
 80115c4:	080115ed 	.word	0x080115ed
 80115c8:	080115f5 	.word	0x080115f5
 80115cc:	0801160b 	.word	0x0801160b
 80115d0:	080115fb 	.word	0x080115fb
 80115d4:	0801160b 	.word	0x0801160b
 80115d8:	0801160b 	.word	0x0801160b
 80115dc:	0801160b 	.word	0x0801160b
 80115e0:	08011603 	.word	0x08011603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80115e4:	f7fc fb68 	bl	800dcb8 <HAL_RCC_GetPCLK1Freq>
 80115e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80115ea:	e014      	b.n	8011616 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80115ec:	f7fc fb7a 	bl	800dce4 <HAL_RCC_GetPCLK2Freq>
 80115f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80115f2:	e010      	b.n	8011616 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80115f4:	4b1a      	ldr	r3, [pc, #104]	@ (8011660 <UART_SetConfig+0x5c0>)
 80115f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80115f8:	e00d      	b.n	8011616 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80115fa:	f7fc faef 	bl	800dbdc <HAL_RCC_GetSysClockFreq>
 80115fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011600:	e009      	b.n	8011616 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011606:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011608:	e005      	b.n	8011616 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 801160a:	2300      	movs	r3, #0
 801160c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801160e:	2301      	movs	r3, #1
 8011610:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011614:	bf00      	nop
    }

    if (pclk != 0U)
 8011616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011618:	2b00      	cmp	r3, #0
 801161a:	d028      	beq.n	801166e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011620:	4a10      	ldr	r2, [pc, #64]	@ (8011664 <UART_SetConfig+0x5c4>)
 8011622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011626:	461a      	mov	r2, r3
 8011628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801162a:	fbb3 f2f2 	udiv	r2, r3, r2
 801162e:	697b      	ldr	r3, [r7, #20]
 8011630:	685b      	ldr	r3, [r3, #4]
 8011632:	085b      	lsrs	r3, r3, #1
 8011634:	441a      	add	r2, r3
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	685b      	ldr	r3, [r3, #4]
 801163a:	fbb2 f3f3 	udiv	r3, r2, r3
 801163e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011640:	6a3b      	ldr	r3, [r7, #32]
 8011642:	2b0f      	cmp	r3, #15
 8011644:	d910      	bls.n	8011668 <UART_SetConfig+0x5c8>
 8011646:	6a3b      	ldr	r3, [r7, #32]
 8011648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801164c:	d20c      	bcs.n	8011668 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801164e:	6a3b      	ldr	r3, [r7, #32]
 8011650:	b29a      	uxth	r2, r3
 8011652:	697b      	ldr	r3, [r7, #20]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	60da      	str	r2, [r3, #12]
 8011658:	e009      	b.n	801166e <UART_SetConfig+0x5ce>
 801165a:	bf00      	nop
 801165c:	40008000 	.word	0x40008000
 8011660:	00f42400 	.word	0x00f42400
 8011664:	08014cc8 	.word	0x08014cc8
      }
      else
      {
        ret = HAL_ERROR;
 8011668:	2301      	movs	r3, #1
 801166a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801166e:	697b      	ldr	r3, [r7, #20]
 8011670:	2201      	movs	r2, #1
 8011672:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8011676:	697b      	ldr	r3, [r7, #20]
 8011678:	2201      	movs	r2, #1
 801167a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	2200      	movs	r2, #0
 8011682:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	2200      	movs	r2, #0
 8011688:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801168a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 801168e:	4618      	mov	r0, r3
 8011690:	3730      	adds	r7, #48	@ 0x30
 8011692:	46bd      	mov	sp, r7
 8011694:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011698 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011698:	b480      	push	{r7}
 801169a:	b083      	sub	sp, #12
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116a4:	f003 0308 	and.w	r3, r3, #8
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d00a      	beq.n	80116c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	685b      	ldr	r3, [r3, #4]
 80116b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	430a      	orrs	r2, r1
 80116c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116c6:	f003 0301 	and.w	r3, r3, #1
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d00a      	beq.n	80116e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	685b      	ldr	r3, [r3, #4]
 80116d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	430a      	orrs	r2, r1
 80116e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116e8:	f003 0302 	and.w	r3, r3, #2
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d00a      	beq.n	8011706 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	685b      	ldr	r3, [r3, #4]
 80116f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	430a      	orrs	r2, r1
 8011704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801170a:	f003 0304 	and.w	r3, r3, #4
 801170e:	2b00      	cmp	r3, #0
 8011710:	d00a      	beq.n	8011728 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	685b      	ldr	r3, [r3, #4]
 8011718:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	430a      	orrs	r2, r1
 8011726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801172c:	f003 0310 	and.w	r3, r3, #16
 8011730:	2b00      	cmp	r3, #0
 8011732:	d00a      	beq.n	801174a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	689b      	ldr	r3, [r3, #8]
 801173a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	430a      	orrs	r2, r1
 8011748:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801174e:	f003 0320 	and.w	r3, r3, #32
 8011752:	2b00      	cmp	r3, #0
 8011754:	d00a      	beq.n	801176c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	689b      	ldr	r3, [r3, #8]
 801175c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	430a      	orrs	r2, r1
 801176a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011774:	2b00      	cmp	r3, #0
 8011776:	d01a      	beq.n	80117ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	685b      	ldr	r3, [r3, #4]
 801177e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	430a      	orrs	r2, r1
 801178c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011792:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011796:	d10a      	bne.n	80117ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	685b      	ldr	r3, [r3, #4]
 801179e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	430a      	orrs	r2, r1
 80117ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d00a      	beq.n	80117d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	685b      	ldr	r3, [r3, #4]
 80117c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	430a      	orrs	r2, r1
 80117ce:	605a      	str	r2, [r3, #4]
  }
}
 80117d0:	bf00      	nop
 80117d2:	370c      	adds	r7, #12
 80117d4:	46bd      	mov	sp, r7
 80117d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117da:	4770      	bx	lr

080117dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b098      	sub	sp, #96	@ 0x60
 80117e0:	af02      	add	r7, sp, #8
 80117e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2200      	movs	r2, #0
 80117e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80117ec:	f7f9 fa4a 	bl	800ac84 <HAL_GetTick>
 80117f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	f003 0308 	and.w	r3, r3, #8
 80117fc:	2b08      	cmp	r3, #8
 80117fe:	d12f      	bne.n	8011860 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011800:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011804:	9300      	str	r3, [sp, #0]
 8011806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011808:	2200      	movs	r2, #0
 801180a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801180e:	6878      	ldr	r0, [r7, #4]
 8011810:	f000 f88e 	bl	8011930 <UART_WaitOnFlagUntilTimeout>
 8011814:	4603      	mov	r3, r0
 8011816:	2b00      	cmp	r3, #0
 8011818:	d022      	beq.n	8011860 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011822:	e853 3f00 	ldrex	r3, [r3]
 8011826:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801182a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801182e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	461a      	mov	r2, r3
 8011836:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011838:	647b      	str	r3, [r7, #68]	@ 0x44
 801183a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801183c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801183e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011840:	e841 2300 	strex	r3, r2, [r1]
 8011844:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011848:	2b00      	cmp	r3, #0
 801184a:	d1e6      	bne.n	801181a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	2220      	movs	r2, #32
 8011850:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	2200      	movs	r2, #0
 8011858:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801185c:	2303      	movs	r3, #3
 801185e:	e063      	b.n	8011928 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	f003 0304 	and.w	r3, r3, #4
 801186a:	2b04      	cmp	r3, #4
 801186c:	d149      	bne.n	8011902 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801186e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011872:	9300      	str	r3, [sp, #0]
 8011874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011876:	2200      	movs	r2, #0
 8011878:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801187c:	6878      	ldr	r0, [r7, #4]
 801187e:	f000 f857 	bl	8011930 <UART_WaitOnFlagUntilTimeout>
 8011882:	4603      	mov	r3, r0
 8011884:	2b00      	cmp	r3, #0
 8011886:	d03c      	beq.n	8011902 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801188e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011890:	e853 3f00 	ldrex	r3, [r3]
 8011894:	623b      	str	r3, [r7, #32]
   return(result);
 8011896:	6a3b      	ldr	r3, [r7, #32]
 8011898:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801189c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	461a      	mov	r2, r3
 80118a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80118a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80118ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80118ae:	e841 2300 	strex	r3, r2, [r1]
 80118b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80118b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d1e6      	bne.n	8011888 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	3308      	adds	r3, #8
 80118c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118c2:	693b      	ldr	r3, [r7, #16]
 80118c4:	e853 3f00 	ldrex	r3, [r3]
 80118c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	f023 0301 	bic.w	r3, r3, #1
 80118d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	3308      	adds	r3, #8
 80118d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80118da:	61fa      	str	r2, [r7, #28]
 80118dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118de:	69b9      	ldr	r1, [r7, #24]
 80118e0:	69fa      	ldr	r2, [r7, #28]
 80118e2:	e841 2300 	strex	r3, r2, [r1]
 80118e6:	617b      	str	r3, [r7, #20]
   return(result);
 80118e8:	697b      	ldr	r3, [r7, #20]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d1e5      	bne.n	80118ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	2220      	movs	r2, #32
 80118f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	2200      	movs	r2, #0
 80118fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80118fe:	2303      	movs	r3, #3
 8011900:	e012      	b.n	8011928 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2220      	movs	r2, #32
 8011906:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	2220      	movs	r2, #32
 801190e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2200      	movs	r2, #0
 8011916:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2200      	movs	r2, #0
 801191c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	2200      	movs	r2, #0
 8011922:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011926:	2300      	movs	r3, #0
}
 8011928:	4618      	mov	r0, r3
 801192a:	3758      	adds	r7, #88	@ 0x58
 801192c:	46bd      	mov	sp, r7
 801192e:	bd80      	pop	{r7, pc}

08011930 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b084      	sub	sp, #16
 8011934:	af00      	add	r7, sp, #0
 8011936:	60f8      	str	r0, [r7, #12]
 8011938:	60b9      	str	r1, [r7, #8]
 801193a:	603b      	str	r3, [r7, #0]
 801193c:	4613      	mov	r3, r2
 801193e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011940:	e04f      	b.n	80119e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011942:	69bb      	ldr	r3, [r7, #24]
 8011944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011948:	d04b      	beq.n	80119e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801194a:	f7f9 f99b 	bl	800ac84 <HAL_GetTick>
 801194e:	4602      	mov	r2, r0
 8011950:	683b      	ldr	r3, [r7, #0]
 8011952:	1ad3      	subs	r3, r2, r3
 8011954:	69ba      	ldr	r2, [r7, #24]
 8011956:	429a      	cmp	r2, r3
 8011958:	d302      	bcc.n	8011960 <UART_WaitOnFlagUntilTimeout+0x30>
 801195a:	69bb      	ldr	r3, [r7, #24]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d101      	bne.n	8011964 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011960:	2303      	movs	r3, #3
 8011962:	e04e      	b.n	8011a02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	f003 0304 	and.w	r3, r3, #4
 801196e:	2b00      	cmp	r3, #0
 8011970:	d037      	beq.n	80119e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	2b80      	cmp	r3, #128	@ 0x80
 8011976:	d034      	beq.n	80119e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011978:	68bb      	ldr	r3, [r7, #8]
 801197a:	2b40      	cmp	r3, #64	@ 0x40
 801197c:	d031      	beq.n	80119e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	69db      	ldr	r3, [r3, #28]
 8011984:	f003 0308 	and.w	r3, r3, #8
 8011988:	2b08      	cmp	r3, #8
 801198a:	d110      	bne.n	80119ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	2208      	movs	r2, #8
 8011992:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011994:	68f8      	ldr	r0, [r7, #12]
 8011996:	f000 f920 	bl	8011bda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	2208      	movs	r2, #8
 801199e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	2200      	movs	r2, #0
 80119a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80119aa:	2301      	movs	r3, #1
 80119ac:	e029      	b.n	8011a02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	69db      	ldr	r3, [r3, #28]
 80119b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80119b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80119bc:	d111      	bne.n	80119e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80119c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80119c8:	68f8      	ldr	r0, [r7, #12]
 80119ca:	f000 f906 	bl	8011bda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	2220      	movs	r2, #32
 80119d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	2200      	movs	r2, #0
 80119da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80119de:	2303      	movs	r3, #3
 80119e0:	e00f      	b.n	8011a02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	69da      	ldr	r2, [r3, #28]
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	4013      	ands	r3, r2
 80119ec:	68ba      	ldr	r2, [r7, #8]
 80119ee:	429a      	cmp	r2, r3
 80119f0:	bf0c      	ite	eq
 80119f2:	2301      	moveq	r3, #1
 80119f4:	2300      	movne	r3, #0
 80119f6:	b2db      	uxtb	r3, r3
 80119f8:	461a      	mov	r2, r3
 80119fa:	79fb      	ldrb	r3, [r7, #7]
 80119fc:	429a      	cmp	r2, r3
 80119fe:	d0a0      	beq.n	8011942 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011a00:	2300      	movs	r3, #0
}
 8011a02:	4618      	mov	r0, r3
 8011a04:	3710      	adds	r7, #16
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bd80      	pop	{r7, pc}
	...

08011a0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b096      	sub	sp, #88	@ 0x58
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	60f8      	str	r0, [r7, #12]
 8011a14:	60b9      	str	r1, [r7, #8]
 8011a16:	4613      	mov	r3, r2
 8011a18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	68ba      	ldr	r2, [r7, #8]
 8011a1e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	88fa      	ldrh	r2, [r7, #6]
 8011a24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	2222      	movs	r2, #34	@ 0x22
 8011a34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d02d      	beq.n	8011a9e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a48:	4a40      	ldr	r2, [pc, #256]	@ (8011b4c <UART_Start_Receive_DMA+0x140>)
 8011a4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a52:	4a3f      	ldr	r2, [pc, #252]	@ (8011b50 <UART_Start_Receive_DMA+0x144>)
 8011a54:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a5c:	4a3d      	ldr	r2, [pc, #244]	@ (8011b54 <UART_Start_Receive_DMA+0x148>)
 8011a5e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a66:	2200      	movs	r2, #0
 8011a68:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	3324      	adds	r3, #36	@ 0x24
 8011a76:	4619      	mov	r1, r3
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011a7c:	461a      	mov	r2, r3
 8011a7e:	88fb      	ldrh	r3, [r7, #6]
 8011a80:	f7fa ff3c 	bl	800c8fc <HAL_DMA_Start_IT>
 8011a84:	4603      	mov	r3, r0
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d009      	beq.n	8011a9e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	2210      	movs	r2, #16
 8011a8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	2220      	movs	r2, #32
 8011a96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8011a9a:	2301      	movs	r3, #1
 8011a9c:	e051      	b.n	8011b42 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	691b      	ldr	r3, [r3, #16]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d018      	beq.n	8011ad8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011aae:	e853 3f00 	ldrex	r3, [r3]
 8011ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011aba:	657b      	str	r3, [r7, #84]	@ 0x54
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	461a      	mov	r2, r3
 8011ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011ac6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ac8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011aca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011acc:	e841 2300 	strex	r3, r2, [r1]
 8011ad0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8011ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d1e6      	bne.n	8011aa6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	3308      	adds	r3, #8
 8011ade:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ae2:	e853 3f00 	ldrex	r3, [r3]
 8011ae6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aea:	f043 0301 	orr.w	r3, r3, #1
 8011aee:	653b      	str	r3, [r7, #80]	@ 0x50
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	3308      	adds	r3, #8
 8011af6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011af8:	637a      	str	r2, [r7, #52]	@ 0x34
 8011afa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011afc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011afe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011b00:	e841 2300 	strex	r3, r2, [r1]
 8011b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8011b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d1e5      	bne.n	8011ad8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	3308      	adds	r3, #8
 8011b12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b14:	697b      	ldr	r3, [r7, #20]
 8011b16:	e853 3f00 	ldrex	r3, [r3]
 8011b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8011b1c:	693b      	ldr	r3, [r7, #16]
 8011b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	3308      	adds	r3, #8
 8011b2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011b2c:	623a      	str	r2, [r7, #32]
 8011b2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b30:	69f9      	ldr	r1, [r7, #28]
 8011b32:	6a3a      	ldr	r2, [r7, #32]
 8011b34:	e841 2300 	strex	r3, r2, [r1]
 8011b38:	61bb      	str	r3, [r7, #24]
   return(result);
 8011b3a:	69bb      	ldr	r3, [r7, #24]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d1e5      	bne.n	8011b0c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8011b40:	2300      	movs	r3, #0
}
 8011b42:	4618      	mov	r0, r3
 8011b44:	3758      	adds	r7, #88	@ 0x58
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}
 8011b4a:	bf00      	nop
 8011b4c:	08011d65 	.word	0x08011d65
 8011b50:	08011e99 	.word	0x08011e99
 8011b54:	08011edf 	.word	0x08011edf

08011b58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011b58:	b480      	push	{r7}
 8011b5a:	b08f      	sub	sp, #60	@ 0x3c
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b66:	6a3b      	ldr	r3, [r7, #32]
 8011b68:	e853 3f00 	ldrex	r3, [r3]
 8011b6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8011b6e:	69fb      	ldr	r3, [r7, #28]
 8011b70:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011b74:	637b      	str	r3, [r7, #52]	@ 0x34
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	461a      	mov	r2, r3
 8011b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011b80:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011b84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b86:	e841 2300 	strex	r3, r2, [r1]
 8011b8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d1e6      	bne.n	8011b60 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	3308      	adds	r3, #8
 8011b98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	e853 3f00 	ldrex	r3, [r3]
 8011ba0:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ba2:	68bb      	ldr	r3, [r7, #8]
 8011ba4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8011ba8:	633b      	str	r3, [r7, #48]	@ 0x30
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	3308      	adds	r3, #8
 8011bb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011bb2:	61ba      	str	r2, [r7, #24]
 8011bb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bb6:	6979      	ldr	r1, [r7, #20]
 8011bb8:	69ba      	ldr	r2, [r7, #24]
 8011bba:	e841 2300 	strex	r3, r2, [r1]
 8011bbe:	613b      	str	r3, [r7, #16]
   return(result);
 8011bc0:	693b      	ldr	r3, [r7, #16]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d1e5      	bne.n	8011b92 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2220      	movs	r2, #32
 8011bca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8011bce:	bf00      	nop
 8011bd0:	373c      	adds	r7, #60	@ 0x3c
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd8:	4770      	bx	lr

08011bda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011bda:	b480      	push	{r7}
 8011bdc:	b095      	sub	sp, #84	@ 0x54
 8011bde:	af00      	add	r7, sp, #0
 8011be0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bea:	e853 3f00 	ldrex	r3, [r3]
 8011bee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bf2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	461a      	mov	r2, r3
 8011bfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c00:	643b      	str	r3, [r7, #64]	@ 0x40
 8011c02:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011c06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011c08:	e841 2300 	strex	r3, r2, [r1]
 8011c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d1e6      	bne.n	8011be2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	3308      	adds	r3, #8
 8011c1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c1c:	6a3b      	ldr	r3, [r7, #32]
 8011c1e:	e853 3f00 	ldrex	r3, [r3]
 8011c22:	61fb      	str	r3, [r7, #28]
   return(result);
 8011c24:	69fb      	ldr	r3, [r7, #28]
 8011c26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011c2a:	f023 0301 	bic.w	r3, r3, #1
 8011c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	3308      	adds	r3, #8
 8011c36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011c38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011c3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c40:	e841 2300 	strex	r3, r2, [r1]
 8011c44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d1e3      	bne.n	8011c14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c50:	2b01      	cmp	r3, #1
 8011c52:	d118      	bne.n	8011c86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	e853 3f00 	ldrex	r3, [r3]
 8011c60:	60bb      	str	r3, [r7, #8]
   return(result);
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	f023 0310 	bic.w	r3, r3, #16
 8011c68:	647b      	str	r3, [r7, #68]	@ 0x44
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	461a      	mov	r2, r3
 8011c70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c72:	61bb      	str	r3, [r7, #24]
 8011c74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c76:	6979      	ldr	r1, [r7, #20]
 8011c78:	69ba      	ldr	r2, [r7, #24]
 8011c7a:	e841 2300 	strex	r3, r2, [r1]
 8011c7e:	613b      	str	r3, [r7, #16]
   return(result);
 8011c80:	693b      	ldr	r3, [r7, #16]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d1e6      	bne.n	8011c54 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	2220      	movs	r2, #32
 8011c8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	2200      	movs	r2, #0
 8011c92:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	2200      	movs	r2, #0
 8011c98:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011c9a:	bf00      	nop
 8011c9c:	3754      	adds	r7, #84	@ 0x54
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca4:	4770      	bx	lr

08011ca6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011ca6:	b580      	push	{r7, lr}
 8011ca8:	b090      	sub	sp, #64	@ 0x40
 8011caa:	af00      	add	r7, sp, #0
 8011cac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	f003 0320 	and.w	r3, r3, #32
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d137      	bne.n	8011d32 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8011cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	3308      	adds	r3, #8
 8011cd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cd4:	e853 3f00 	ldrex	r3, [r3]
 8011cd8:	623b      	str	r3, [r7, #32]
   return(result);
 8011cda:	6a3b      	ldr	r3, [r7, #32]
 8011cdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	3308      	adds	r3, #8
 8011ce8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011cea:	633a      	str	r2, [r7, #48]	@ 0x30
 8011cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011cf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011cf2:	e841 2300 	strex	r3, r2, [r1]
 8011cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d1e5      	bne.n	8011cca <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d04:	693b      	ldr	r3, [r7, #16]
 8011d06:	e853 3f00 	ldrex	r3, [r3]
 8011d0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d12:	637b      	str	r3, [r7, #52]	@ 0x34
 8011d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	461a      	mov	r2, r3
 8011d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d1c:	61fb      	str	r3, [r7, #28]
 8011d1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d20:	69b9      	ldr	r1, [r7, #24]
 8011d22:	69fa      	ldr	r2, [r7, #28]
 8011d24:	e841 2300 	strex	r3, r2, [r1]
 8011d28:	617b      	str	r3, [r7, #20]
   return(result);
 8011d2a:	697b      	ldr	r3, [r7, #20]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d1e6      	bne.n	8011cfe <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011d30:	e004      	b.n	8011d3c <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8011d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011d38:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011d3a:	4798      	blx	r3
}
 8011d3c:	bf00      	nop
 8011d3e:	3740      	adds	r7, #64	@ 0x40
 8011d40:	46bd      	mov	sp, r7
 8011d42:	bd80      	pop	{r7, pc}

08011d44 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b084      	sub	sp, #16
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d50:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011d58:	68f8      	ldr	r0, [r7, #12]
 8011d5a:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011d5c:	bf00      	nop
 8011d5e:	3710      	adds	r7, #16
 8011d60:	46bd      	mov	sp, r7
 8011d62:	bd80      	pop	{r7, pc}

08011d64 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b09c      	sub	sp, #112	@ 0x70
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d70:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	f003 0320 	and.w	r3, r3, #32
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d171      	bne.n	8011e64 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8011d80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d82:	2200      	movs	r2, #0
 8011d84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011d88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d90:	e853 3f00 	ldrex	r3, [r3]
 8011d94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011d96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011d98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011d9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011d9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	461a      	mov	r2, r3
 8011da4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011da6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011da8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011daa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011dac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011dae:	e841 2300 	strex	r3, r2, [r1]
 8011db2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011db4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d1e6      	bne.n	8011d88 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011dba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	3308      	adds	r3, #8
 8011dc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dc4:	e853 3f00 	ldrex	r3, [r3]
 8011dc8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011dcc:	f023 0301 	bic.w	r3, r3, #1
 8011dd0:	667b      	str	r3, [r7, #100]	@ 0x64
 8011dd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	3308      	adds	r3, #8
 8011dd8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011dda:	647a      	str	r2, [r7, #68]	@ 0x44
 8011ddc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dde:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011de0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011de2:	e841 2300 	strex	r3, r2, [r1]
 8011de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d1e5      	bne.n	8011dba <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011dee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	3308      	adds	r3, #8
 8011df4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011df8:	e853 3f00 	ldrex	r3, [r3]
 8011dfc:	623b      	str	r3, [r7, #32]
   return(result);
 8011dfe:	6a3b      	ldr	r3, [r7, #32]
 8011e00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011e04:	663b      	str	r3, [r7, #96]	@ 0x60
 8011e06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	3308      	adds	r3, #8
 8011e0c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011e0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8011e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011e14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011e16:	e841 2300 	strex	r3, r2, [r1]
 8011e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d1e5      	bne.n	8011dee <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011e22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e24:	2220      	movs	r2, #32
 8011e26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e2e:	2b01      	cmp	r3, #1
 8011e30:	d118      	bne.n	8011e64 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011e32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e38:	693b      	ldr	r3, [r7, #16]
 8011e3a:	e853 3f00 	ldrex	r3, [r3]
 8011e3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	f023 0310 	bic.w	r3, r3, #16
 8011e46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011e48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	461a      	mov	r2, r3
 8011e4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011e50:	61fb      	str	r3, [r7, #28]
 8011e52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e54:	69b9      	ldr	r1, [r7, #24]
 8011e56:	69fa      	ldr	r2, [r7, #28]
 8011e58:	e841 2300 	strex	r3, r2, [r1]
 8011e5c:	617b      	str	r3, [r7, #20]
   return(result);
 8011e5e:	697b      	ldr	r3, [r7, #20]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d1e6      	bne.n	8011e32 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011e64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e66:	2200      	movs	r2, #0
 8011e68:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e6e:	2b01      	cmp	r3, #1
 8011e70:	d109      	bne.n	8011e86 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8011e72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8011e78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011e7a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8011e7e:	4611      	mov	r1, r2
 8011e80:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011e82:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011e84:	e004      	b.n	8011e90 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8011e86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011e8c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011e8e:	4798      	blx	r3
}
 8011e90:	bf00      	nop
 8011e92:	3770      	adds	r7, #112	@ 0x70
 8011e94:	46bd      	mov	sp, r7
 8011e96:	bd80      	pop	{r7, pc}

08011e98 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b084      	sub	sp, #16
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ea4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	2201      	movs	r2, #1
 8011eaa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011eb0:	2b01      	cmp	r3, #1
 8011eb2:	d10b      	bne.n	8011ecc <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8011eba:	68fa      	ldr	r2, [r7, #12]
 8011ebc:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8011ec0:	0852      	lsrs	r2, r2, #1
 8011ec2:	b292      	uxth	r2, r2
 8011ec4:	4611      	mov	r1, r2
 8011ec6:	68f8      	ldr	r0, [r7, #12]
 8011ec8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011eca:	e004      	b.n	8011ed6 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011ed2:	68f8      	ldr	r0, [r7, #12]
 8011ed4:	4798      	blx	r3
}
 8011ed6:	bf00      	nop
 8011ed8:	3710      	adds	r7, #16
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}

08011ede <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011ede:	b580      	push	{r7, lr}
 8011ee0:	b086      	sub	sp, #24
 8011ee2:	af00      	add	r7, sp, #0
 8011ee4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011eea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011eec:	697b      	ldr	r3, [r7, #20]
 8011eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011ef2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011ef4:	697b      	ldr	r3, [r7, #20]
 8011ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011efa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011efc:	697b      	ldr	r3, [r7, #20]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	689b      	ldr	r3, [r3, #8]
 8011f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011f06:	2b80      	cmp	r3, #128	@ 0x80
 8011f08:	d109      	bne.n	8011f1e <UART_DMAError+0x40>
 8011f0a:	693b      	ldr	r3, [r7, #16]
 8011f0c:	2b21      	cmp	r3, #33	@ 0x21
 8011f0e:	d106      	bne.n	8011f1e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011f10:	697b      	ldr	r3, [r7, #20]
 8011f12:	2200      	movs	r2, #0
 8011f14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8011f18:	6978      	ldr	r0, [r7, #20]
 8011f1a:	f7ff fe1d 	bl	8011b58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011f1e:	697b      	ldr	r3, [r7, #20]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	689b      	ldr	r3, [r3, #8]
 8011f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f28:	2b40      	cmp	r3, #64	@ 0x40
 8011f2a:	d109      	bne.n	8011f40 <UART_DMAError+0x62>
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	2b22      	cmp	r3, #34	@ 0x22
 8011f30:	d106      	bne.n	8011f40 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011f32:	697b      	ldr	r3, [r7, #20]
 8011f34:	2200      	movs	r2, #0
 8011f36:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8011f3a:	6978      	ldr	r0, [r7, #20]
 8011f3c:	f7ff fe4d 	bl	8011bda <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011f40:	697b      	ldr	r3, [r7, #20]
 8011f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011f46:	f043 0210 	orr.w	r2, r3, #16
 8011f4a:	697b      	ldr	r3, [r7, #20]
 8011f4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8011f50:	697b      	ldr	r3, [r7, #20]
 8011f52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011f56:	6978      	ldr	r0, [r7, #20]
 8011f58:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011f5a:	bf00      	nop
 8011f5c:	3718      	adds	r7, #24
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}

08011f62 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011f62:	b580      	push	{r7, lr}
 8011f64:	b084      	sub	sp, #16
 8011f66:	af00      	add	r7, sp, #0
 8011f68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	2200      	movs	r2, #0
 8011f74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011f7e:	68f8      	ldr	r0, [r7, #12]
 8011f80:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011f82:	bf00      	nop
 8011f84:	3710      	adds	r7, #16
 8011f86:	46bd      	mov	sp, r7
 8011f88:	bd80      	pop	{r7, pc}

08011f8a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011f8a:	b580      	push	{r7, lr}
 8011f8c:	b088      	sub	sp, #32
 8011f8e:	af00      	add	r7, sp, #0
 8011f90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	e853 3f00 	ldrex	r3, [r3]
 8011f9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011fa0:	68bb      	ldr	r3, [r7, #8]
 8011fa2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011fa6:	61fb      	str	r3, [r7, #28]
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	461a      	mov	r2, r3
 8011fae:	69fb      	ldr	r3, [r7, #28]
 8011fb0:	61bb      	str	r3, [r7, #24]
 8011fb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fb4:	6979      	ldr	r1, [r7, #20]
 8011fb6:	69ba      	ldr	r2, [r7, #24]
 8011fb8:	e841 2300 	strex	r3, r2, [r1]
 8011fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8011fbe:	693b      	ldr	r3, [r7, #16]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d1e6      	bne.n	8011f92 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2220      	movs	r2, #32
 8011fc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2200      	movs	r2, #0
 8011fd0:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011fd8:	6878      	ldr	r0, [r7, #4]
 8011fda:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011fdc:	bf00      	nop
 8011fde:	3720      	adds	r7, #32
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}

08011fe4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011fe4:	b480      	push	{r7}
 8011fe6:	b083      	sub	sp, #12
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011fec:	bf00      	nop
 8011fee:	370c      	adds	r7, #12
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff6:	4770      	bx	lr

08011ff8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011ff8:	b480      	push	{r7}
 8011ffa:	b083      	sub	sp, #12
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012000:	bf00      	nop
 8012002:	370c      	adds	r7, #12
 8012004:	46bd      	mov	sp, r7
 8012006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200a:	4770      	bx	lr

0801200c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801200c:	b480      	push	{r7}
 801200e:	b083      	sub	sp, #12
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012014:	bf00      	nop
 8012016:	370c      	adds	r7, #12
 8012018:	46bd      	mov	sp, r7
 801201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201e:	4770      	bx	lr

08012020 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012020:	b480      	push	{r7}
 8012022:	b085      	sub	sp, #20
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801202e:	2b01      	cmp	r3, #1
 8012030:	d101      	bne.n	8012036 <HAL_UARTEx_DisableFifoMode+0x16>
 8012032:	2302      	movs	r3, #2
 8012034:	e027      	b.n	8012086 <HAL_UARTEx_DisableFifoMode+0x66>
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	2201      	movs	r2, #1
 801203a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	2224      	movs	r2, #36	@ 0x24
 8012042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	681a      	ldr	r2, [r3, #0]
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	f022 0201 	bic.w	r2, r2, #1
 801205c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8012064:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	2200      	movs	r2, #0
 801206a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	68fa      	ldr	r2, [r7, #12]
 8012072:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	2220      	movs	r2, #32
 8012078:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2200      	movs	r2, #0
 8012080:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012084:	2300      	movs	r3, #0
}
 8012086:	4618      	mov	r0, r3
 8012088:	3714      	adds	r7, #20
 801208a:	46bd      	mov	sp, r7
 801208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012090:	4770      	bx	lr

08012092 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012092:	b580      	push	{r7, lr}
 8012094:	b084      	sub	sp, #16
 8012096:	af00      	add	r7, sp, #0
 8012098:	6078      	str	r0, [r7, #4]
 801209a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80120a2:	2b01      	cmp	r3, #1
 80120a4:	d101      	bne.n	80120aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80120a6:	2302      	movs	r3, #2
 80120a8:	e02d      	b.n	8012106 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	2201      	movs	r2, #1
 80120ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	2224      	movs	r2, #36	@ 0x24
 80120b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	681a      	ldr	r2, [r3, #0]
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	f022 0201 	bic.w	r2, r2, #1
 80120d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	689b      	ldr	r3, [r3, #8]
 80120d8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	683a      	ldr	r2, [r7, #0]
 80120e2:	430a      	orrs	r2, r1
 80120e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80120e6:	6878      	ldr	r0, [r7, #4]
 80120e8:	f000 f850 	bl	801218c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	68fa      	ldr	r2, [r7, #12]
 80120f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	2220      	movs	r2, #32
 80120f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	2200      	movs	r2, #0
 8012100:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012104:	2300      	movs	r3, #0
}
 8012106:	4618      	mov	r0, r3
 8012108:	3710      	adds	r7, #16
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}

0801210e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801210e:	b580      	push	{r7, lr}
 8012110:	b084      	sub	sp, #16
 8012112:	af00      	add	r7, sp, #0
 8012114:	6078      	str	r0, [r7, #4]
 8012116:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801211e:	2b01      	cmp	r3, #1
 8012120:	d101      	bne.n	8012126 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012122:	2302      	movs	r3, #2
 8012124:	e02d      	b.n	8012182 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	2201      	movs	r2, #1
 801212a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	2224      	movs	r2, #36	@ 0x24
 8012132:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	681a      	ldr	r2, [r3, #0]
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	f022 0201 	bic.w	r2, r2, #1
 801214c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	689b      	ldr	r3, [r3, #8]
 8012154:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	683a      	ldr	r2, [r7, #0]
 801215e:	430a      	orrs	r2, r1
 8012160:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012162:	6878      	ldr	r0, [r7, #4]
 8012164:	f000 f812 	bl	801218c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	68fa      	ldr	r2, [r7, #12]
 801216e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2220      	movs	r2, #32
 8012174:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2200      	movs	r2, #0
 801217c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012180:	2300      	movs	r3, #0
}
 8012182:	4618      	mov	r0, r3
 8012184:	3710      	adds	r7, #16
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}
	...

0801218c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801218c:	b480      	push	{r7}
 801218e:	b085      	sub	sp, #20
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012198:	2b00      	cmp	r3, #0
 801219a:	d108      	bne.n	80121ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	2201      	movs	r2, #1
 80121a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2201      	movs	r2, #1
 80121a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80121ac:	e031      	b.n	8012212 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80121ae:	2308      	movs	r3, #8
 80121b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80121b2:	2308      	movs	r3, #8
 80121b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	689b      	ldr	r3, [r3, #8]
 80121bc:	0e5b      	lsrs	r3, r3, #25
 80121be:	b2db      	uxtb	r3, r3
 80121c0:	f003 0307 	and.w	r3, r3, #7
 80121c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	689b      	ldr	r3, [r3, #8]
 80121cc:	0f5b      	lsrs	r3, r3, #29
 80121ce:	b2db      	uxtb	r3, r3
 80121d0:	f003 0307 	and.w	r3, r3, #7
 80121d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80121d6:	7bbb      	ldrb	r3, [r7, #14]
 80121d8:	7b3a      	ldrb	r2, [r7, #12]
 80121da:	4911      	ldr	r1, [pc, #68]	@ (8012220 <UARTEx_SetNbDataToProcess+0x94>)
 80121dc:	5c8a      	ldrb	r2, [r1, r2]
 80121de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80121e2:	7b3a      	ldrb	r2, [r7, #12]
 80121e4:	490f      	ldr	r1, [pc, #60]	@ (8012224 <UARTEx_SetNbDataToProcess+0x98>)
 80121e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80121e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80121ec:	b29a      	uxth	r2, r3
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80121f4:	7bfb      	ldrb	r3, [r7, #15]
 80121f6:	7b7a      	ldrb	r2, [r7, #13]
 80121f8:	4909      	ldr	r1, [pc, #36]	@ (8012220 <UARTEx_SetNbDataToProcess+0x94>)
 80121fa:	5c8a      	ldrb	r2, [r1, r2]
 80121fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012200:	7b7a      	ldrb	r2, [r7, #13]
 8012202:	4908      	ldr	r1, [pc, #32]	@ (8012224 <UARTEx_SetNbDataToProcess+0x98>)
 8012204:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012206:	fb93 f3f2 	sdiv	r3, r3, r2
 801220a:	b29a      	uxth	r2, r3
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8012212:	bf00      	nop
 8012214:	3714      	adds	r7, #20
 8012216:	46bd      	mov	sp, r7
 8012218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221c:	4770      	bx	lr
 801221e:	bf00      	nop
 8012220:	08014ce0 	.word	0x08014ce0
 8012224:	08014ce8 	.word	0x08014ce8

08012228 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8012228:	b480      	push	{r7}
 801222a:	b08b      	sub	sp, #44	@ 0x2c
 801222c:	af00      	add	r7, sp, #0
 801222e:	60f8      	str	r0, [r7, #12]
 8012230:	60b9      	str	r1, [r7, #8]
 8012232:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	685b      	ldr	r3, [r3, #4]
 8012238:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	685b      	ldr	r3, [r3, #4]
 801223e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	685b      	ldr	r3, [r3, #4]
 8012244:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	881b      	ldrh	r3, [r3, #0]
 801224a:	461a      	mov	r2, r3
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	885b      	ldrh	r3, [r3, #2]
 8012250:	fb02 f303 	mul.w	r3, r2, r3
 8012254:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8012256:	697b      	ldr	r3, [r7, #20]
 8012258:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 801225a:	e013      	b.n	8012284 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 801225c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801225e:	1d1a      	adds	r2, r3, #4
 8012260:	627a      	str	r2, [r7, #36]	@ 0x24
 8012262:	ed93 7a00 	vldr	s14, [r3]
 8012266:	6a3b      	ldr	r3, [r7, #32]
 8012268:	1d1a      	adds	r2, r3, #4
 801226a:	623a      	str	r2, [r7, #32]
 801226c:	edd3 7a00 	vldr	s15, [r3]
 8012270:	69fb      	ldr	r3, [r7, #28]
 8012272:	1d1a      	adds	r2, r3, #4
 8012274:	61fa      	str	r2, [r7, #28]
 8012276:	ee77 7a27 	vadd.f32	s15, s14, s15
 801227a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 801227e:	69bb      	ldr	r3, [r7, #24]
 8012280:	3b01      	subs	r3, #1
 8012282:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8012284:	69bb      	ldr	r3, [r7, #24]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d1e8      	bne.n	801225c <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 801228a:	2300      	movs	r3, #0
 801228c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 801228e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8012292:	4618      	mov	r0, r3
 8012294:	372c      	adds	r7, #44	@ 0x2c
 8012296:	46bd      	mov	sp, r7
 8012298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229c:	4770      	bx	lr

0801229e <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 801229e:	b480      	push	{r7}
 80122a0:	b085      	sub	sp, #20
 80122a2:	af00      	add	r7, sp, #0
 80122a4:	60f8      	str	r0, [r7, #12]
 80122a6:	607b      	str	r3, [r7, #4]
 80122a8:	460b      	mov	r3, r1
 80122aa:	817b      	strh	r3, [r7, #10]
 80122ac:	4613      	mov	r3, r2
 80122ae:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	897a      	ldrh	r2, [r7, #10]
 80122b4:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	893a      	ldrh	r2, [r7, #8]
 80122ba:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	687a      	ldr	r2, [r7, #4]
 80122c0:	605a      	str	r2, [r3, #4]
}
 80122c2:	bf00      	nop
 80122c4:	3714      	adds	r7, #20
 80122c6:	46bd      	mov	sp, r7
 80122c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122cc:	4770      	bx	lr

080122ce <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 80122ce:	b480      	push	{r7}
 80122d0:	b0bb      	sub	sp, #236	@ 0xec
 80122d2:	af00      	add	r7, sp, #0
 80122d4:	6078      	str	r0, [r7, #4]
 80122d6:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	685b      	ldr	r3, [r3, #4]
 80122dc:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80122de:	683b      	ldr	r3, [r7, #0]
 80122e0:	685b      	ldr	r3, [r3, #4]
 80122e2:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	881b      	ldrh	r3, [r3, #0]
 80122e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	885b      	ldrh	r3, [r3, #2]
 80122ee:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 80122f0:	f04f 0300 	mov.w	r3, #0
 80122f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80122f8:	f04f 0300 	mov.w	r3, #0
 80122fc:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 80122fe:	2300      	movs	r3, #0
 8012300:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 8012304:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012306:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 801230a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801230c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8012310:	e03b      	b.n	801238a <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8012312:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012314:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8012318:	1ad3      	subs	r3, r2, r3
 801231a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 801231e:	e00c      	b.n	801233a <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 8012320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012324:	1d1a      	adds	r2, r3, #4
 8012326:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 801232a:	f04f 0200 	mov.w	r2, #0
 801232e:	601a      	str	r2, [r3, #0]
        j--;
 8012330:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012334:	3b01      	subs	r3, #1
 8012336:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 801233a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801233e:	2b00      	cmp	r3, #0
 8012340:	d1ee      	bne.n	8012320 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 8012342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012346:	1d1a      	adds	r2, r3, #4
 8012348:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 801234c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8012350:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 8012352:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8012356:	3b01      	subs	r3, #1
 8012358:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 801235c:	e00c      	b.n	8012378 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 801235e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012362:	1d1a      	adds	r2, r3, #4
 8012364:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8012368:	f04f 0200 	mov.w	r2, #0
 801236c:	601a      	str	r2, [r3, #0]
        j--;
 801236e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012372:	3b01      	subs	r3, #1
 8012374:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8012378:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801237c:	2b00      	cmp	r3, #0
 801237e:	d1ee      	bne.n	801235e <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 8012380:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8012384:	3b01      	subs	r3, #1
 8012386:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 801238a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801238e:	2b00      	cmp	r3, #0
 8012390:	d1bf      	bne.n	8012312 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 8012392:	2300      	movs	r3, #0
 8012394:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012398:	e2c7      	b.n	801292a <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 801239a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801239e:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	685a      	ldr	r2, [r3, #4]
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	885b      	ldrh	r3, [r3, #2]
 80123a8:	3301      	adds	r3, #1
 80123aa:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 80123ae:	fb01 f303 	mul.w	r3, r1, r3
 80123b2:	009b      	lsls	r3, r3, #2
 80123b4:	4413      	add	r3, r2
 80123b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 80123ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 80123c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80123c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 80123cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80123d0:	3301      	adds	r3, #1
 80123d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80123d6:	e02c      	b.n	8012432 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	685a      	ldr	r2, [r3, #4]
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	885b      	ldrh	r3, [r3, #2]
 80123e0:	4619      	mov	r1, r3
 80123e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80123e6:	fb03 f101 	mul.w	r1, r3, r1
 80123ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80123ee:	440b      	add	r3, r1
 80123f0:	009b      	lsls	r3, r3, #2
 80123f2:	4413      	add	r3, r2
 80123f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 80123f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 8012400:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8012404:	eeb0 7ae7 	vabs.f32	s14, s15
 8012408:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801240c:	eef0 7ae7 	vabs.f32	s15, s15
 8012410:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012418:	dd06      	ble.n	8012428 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 801241a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801241e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 8012422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012424:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8012428:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801242c:	3301      	adds	r3, #1
 801242e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012432:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012436:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012438:	429a      	cmp	r2, r3
 801243a:	d3cd      	bcc.n	80123d8 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 801243c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012440:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012448:	f000 809b 	beq.w	8012582 <arm_mat_inverse_f32+0x2b4>
 801244c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012450:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012454:	429a      	cmp	r2, r3
 8012456:	f000 8094 	beq.w	8012582 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	685b      	ldr	r3, [r3, #4]
 801245e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	685b      	ldr	r3, [r3, #4]
 8012466:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	885b      	ldrh	r3, [r3, #2]
 801246e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012470:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012472:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012476:	1ad3      	subs	r3, r2, r3
 8012478:	64bb      	str	r3, [r7, #72]	@ 0x48
 801247a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801247c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801247e:	fb03 f202 	mul.w	r2, r3, r2
 8012482:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012486:	4413      	add	r3, r2
 8012488:	009b      	lsls	r3, r3, #2
 801248a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801248e:	4413      	add	r3, r2
 8012490:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012494:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012496:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801249a:	fb03 f202 	mul.w	r2, r3, r2
 801249e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80124a2:	4413      	add	r3, r2
 80124a4:	009b      	lsls	r3, r3, #2
 80124a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80124aa:	4413      	add	r3, r2
 80124ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80124b0:	2300      	movs	r3, #0
 80124b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80124b6:	e018      	b.n	80124ea <arm_mat_inverse_f32+0x21c>
 80124b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80124c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80124c4:	1d1a      	adds	r2, r3, #4
 80124c6:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 80124ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80124ce:	6812      	ldr	r2, [r2, #0]
 80124d0:	601a      	str	r2, [r3, #0]
 80124d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80124d6:	1d1a      	adds	r2, r3, #4
 80124d8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80124dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80124de:	601a      	str	r2, [r3, #0]
 80124e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80124e4:	3301      	adds	r3, #1
 80124e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80124ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80124ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80124f0:	429a      	cmp	r2, r3
 80124f2:	dbe1      	blt.n	80124b8 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	685b      	ldr	r3, [r3, #4]
 80124f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80124fc:	683b      	ldr	r3, [r7, #0]
 80124fe:	685b      	ldr	r3, [r3, #4]
 8012500:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012504:	683b      	ldr	r3, [r7, #0]
 8012506:	885b      	ldrh	r3, [r3, #2]
 8012508:	647b      	str	r3, [r7, #68]	@ 0x44
 801250a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801250c:	643b      	str	r3, [r7, #64]	@ 0x40
 801250e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012510:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012512:	fb02 f303 	mul.w	r3, r2, r3
 8012516:	009b      	lsls	r3, r3, #2
 8012518:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801251c:	4413      	add	r3, r2
 801251e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012522:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012524:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012528:	fb02 f303 	mul.w	r3, r2, r3
 801252c:	009b      	lsls	r3, r3, #2
 801252e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012532:	4413      	add	r3, r2
 8012534:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012538:	2300      	movs	r3, #0
 801253a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801253e:	e018      	b.n	8012572 <arm_mat_inverse_f32+0x2a4>
 8012540:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012548:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801254c:	1d1a      	adds	r2, r3, #4
 801254e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8012552:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012556:	6812      	ldr	r2, [r2, #0]
 8012558:	601a      	str	r2, [r3, #0]
 801255a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801255e:	1d1a      	adds	r2, r3, #4
 8012560:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8012564:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012566:	601a      	str	r2, [r3, #0]
 8012568:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801256c:	3301      	adds	r3, #1
 801256e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012572:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8012576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012578:	429a      	cmp	r2, r3
 801257a:	dbe1      	blt.n	8012540 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 801257c:	2301      	movs	r3, #1
 801257e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 8012582:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012586:	2b01      	cmp	r3, #1
 8012588:	d009      	beq.n	801259e <arm_mat_inverse_f32+0x2d0>
 801258a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801258e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012596:	d102      	bne.n	801259e <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 8012598:	f06f 0304 	mvn.w	r3, #4
 801259c:	e208      	b.n	80129b0 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 801259e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80125a2:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 80125a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80125aa:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	685b      	ldr	r3, [r3, #4]
 80125b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	885b      	ldrh	r3, [r3, #2]
 80125ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80125bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80125be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80125c2:	1ad3      	subs	r3, r2, r3
 80125c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80125c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125c8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80125ca:	fb03 f202 	mul.w	r2, r3, r2
 80125ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80125d2:	4413      	add	r3, r2
 80125d4:	009b      	lsls	r3, r3, #2
 80125d6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80125da:	4413      	add	r3, r2
 80125dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80125e0:	2300      	movs	r3, #0
 80125e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80125e6:	e011      	b.n	801260c <arm_mat_inverse_f32+0x33e>
 80125e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80125ec:	1d1a      	adds	r2, r3, #4
 80125ee:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 80125f2:	ed93 7a00 	vldr	s14, [r3]
 80125f6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80125fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80125fe:	edc3 7a00 	vstr	s15, [r3]
 8012602:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012606:	3301      	adds	r3, #1
 8012608:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801260c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8012610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012612:	429a      	cmp	r2, r3
 8012614:	dbe8      	blt.n	80125e8 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	685b      	ldr	r3, [r3, #4]
 801261a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	885b      	ldrh	r3, [r3, #2]
 8012622:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012626:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801262a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801262c:	fb02 f303 	mul.w	r3, r2, r3
 8012630:	009b      	lsls	r3, r3, #2
 8012632:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8012636:	4413      	add	r3, r2
 8012638:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801263c:	2300      	movs	r3, #0
 801263e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012642:	e011      	b.n	8012668 <arm_mat_inverse_f32+0x39a>
 8012644:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012648:	1d1a      	adds	r2, r3, #4
 801264a:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 801264e:	ed93 7a00 	vldr	s14, [r3]
 8012652:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012656:	ee67 7a27 	vmul.f32	s15, s14, s15
 801265a:	edc3 7a00 	vstr	s15, [r3]
 801265e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012662:	3301      	adds	r3, #1
 8012664:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012668:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801266c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801266e:	429a      	cmp	r2, r3
 8012670:	dbe8      	blt.n	8012644 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 8012672:	2300      	movs	r3, #0
 8012674:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 8012678:	e0ae      	b.n	80127d8 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	685a      	ldr	r2, [r3, #4]
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	885b      	ldrh	r3, [r3, #2]
 8012682:	4619      	mov	r1, r3
 8012684:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012688:	fb03 f101 	mul.w	r1, r3, r1
 801268c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012690:	440b      	add	r3, r1
 8012692:	009b      	lsls	r3, r3, #2
 8012694:	4413      	add	r3, r2
 8012696:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 801269a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	685b      	ldr	r3, [r3, #4]
 80126a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	685b      	ldr	r3, [r3, #4]
 80126b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	885b      	ldrh	r3, [r3, #2]
 80126b8:	617b      	str	r3, [r7, #20]
 80126ba:	697a      	ldr	r2, [r7, #20]
 80126bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80126c0:	1ad3      	subs	r3, r2, r3
 80126c2:	613b      	str	r3, [r7, #16]
 80126c4:	697b      	ldr	r3, [r7, #20]
 80126c6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80126ca:	fb03 f202 	mul.w	r2, r3, r2
 80126ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80126d2:	4413      	add	r3, r2
 80126d4:	009b      	lsls	r3, r3, #2
 80126d6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80126da:	4413      	add	r3, r2
 80126dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80126e0:	697b      	ldr	r3, [r7, #20]
 80126e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80126e4:	fb03 f202 	mul.w	r2, r3, r2
 80126e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80126ec:	4413      	add	r3, r2
 80126ee:	009b      	lsls	r3, r3, #2
 80126f0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80126f4:	4413      	add	r3, r2
 80126f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80126fa:	2300      	movs	r3, #0
 80126fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012700:	e01a      	b.n	8012738 <arm_mat_inverse_f32+0x46a>
 8012702:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012706:	1d1a      	adds	r2, r3, #4
 8012708:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801270c:	ed93 7a00 	vldr	s14, [r3]
 8012710:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012718:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801271c:	1d1a      	adds	r2, r3, #4
 801271e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8012722:	ed93 7a00 	vldr	s14, [r3]
 8012726:	ee77 7a67 	vsub.f32	s15, s14, s15
 801272a:	edc3 7a00 	vstr	s15, [r3]
 801272e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012732:	3301      	adds	r3, #1
 8012734:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012738:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801273c:	693b      	ldr	r3, [r7, #16]
 801273e:	429a      	cmp	r2, r3
 8012740:	dbdf      	blt.n	8012702 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	685b      	ldr	r3, [r3, #4]
 8012746:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	685b      	ldr	r3, [r3, #4]
 801274e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	885b      	ldrh	r3, [r3, #2]
 8012756:	60fb      	str	r3, [r7, #12]
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	60bb      	str	r3, [r7, #8]
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012762:	fb02 f303 	mul.w	r3, r2, r3
 8012766:	009b      	lsls	r3, r3, #2
 8012768:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801276c:	4413      	add	r3, r2
 801276e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012776:	fb02 f303 	mul.w	r3, r2, r3
 801277a:	009b      	lsls	r3, r3, #2
 801277c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012780:	4413      	add	r3, r2
 8012782:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012786:	2300      	movs	r3, #0
 8012788:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801278c:	e01a      	b.n	80127c4 <arm_mat_inverse_f32+0x4f6>
 801278e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012792:	1d1a      	adds	r2, r3, #4
 8012794:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012798:	ed93 7a00 	vldr	s14, [r3]
 801279c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80127a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80127a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80127a8:	1d1a      	adds	r2, r3, #4
 80127aa:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80127ae:	ed93 7a00 	vldr	s14, [r3]
 80127b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80127b6:	edc3 7a00 	vstr	s15, [r3]
 80127ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80127be:	3301      	adds	r3, #1
 80127c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80127c4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80127c8:	68bb      	ldr	r3, [r7, #8]
 80127ca:	429a      	cmp	r2, r3
 80127cc:	dbdf      	blt.n	801278e <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 80127ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80127d2:	3301      	adds	r3, #1
 80127d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80127d8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80127dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127de:	429a      	cmp	r2, r3
 80127e0:	f4ff af4b 	bcc.w	801267a <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 80127e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127e6:	3301      	adds	r3, #1
 80127e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80127ec:	e092      	b.n	8012914 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	685a      	ldr	r2, [r3, #4]
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	885b      	ldrh	r3, [r3, #2]
 80127f6:	4619      	mov	r1, r3
 80127f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80127fc:	fb03 f101 	mul.w	r1, r3, r1
 8012800:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012804:	440b      	add	r3, r1
 8012806:	009b      	lsls	r3, r3, #2
 8012808:	4413      	add	r3, r2
 801280a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 801280e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	685b      	ldr	r3, [r3, #4]
 801281c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	685b      	ldr	r3, [r3, #4]
 8012822:	677b      	str	r3, [r7, #116]	@ 0x74
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	885b      	ldrh	r3, [r3, #2]
 8012828:	627b      	str	r3, [r7, #36]	@ 0x24
 801282a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801282c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012830:	1ad3      	subs	r3, r2, r3
 8012832:	623b      	str	r3, [r7, #32]
 8012834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012836:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801283a:	fb03 f202 	mul.w	r2, r3, r2
 801283e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012842:	4413      	add	r3, r2
 8012844:	009b      	lsls	r3, r3, #2
 8012846:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8012848:	4413      	add	r3, r2
 801284a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801284c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801284e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012850:	fb03 f202 	mul.w	r2, r3, r2
 8012854:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012858:	4413      	add	r3, r2
 801285a:	009b      	lsls	r3, r3, #2
 801285c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801285e:	4413      	add	r3, r2
 8012860:	677b      	str	r3, [r7, #116]	@ 0x74
 8012862:	2300      	movs	r3, #0
 8012864:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012866:	e014      	b.n	8012892 <arm_mat_inverse_f32+0x5c4>
 8012868:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801286a:	1d1a      	adds	r2, r3, #4
 801286c:	677a      	str	r2, [r7, #116]	@ 0x74
 801286e:	ed93 7a00 	vldr	s14, [r3]
 8012872:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012876:	ee67 7a27 	vmul.f32	s15, s14, s15
 801287a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801287c:	1d1a      	adds	r2, r3, #4
 801287e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012880:	ed93 7a00 	vldr	s14, [r3]
 8012884:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012888:	edc3 7a00 	vstr	s15, [r3]
 801288c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801288e:	3301      	adds	r3, #1
 8012890:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012892:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8012894:	6a3b      	ldr	r3, [r7, #32]
 8012896:	429a      	cmp	r2, r3
 8012898:	dbe6      	blt.n	8012868 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	685b      	ldr	r3, [r3, #4]
 801289e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80128a0:	683b      	ldr	r3, [r7, #0]
 80128a2:	685b      	ldr	r3, [r3, #4]
 80128a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	885b      	ldrh	r3, [r3, #2]
 80128aa:	61fb      	str	r3, [r7, #28]
 80128ac:	69fb      	ldr	r3, [r7, #28]
 80128ae:	61bb      	str	r3, [r7, #24]
 80128b0:	69fb      	ldr	r3, [r7, #28]
 80128b2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80128b6:	fb02 f303 	mul.w	r3, r2, r3
 80128ba:	009b      	lsls	r3, r3, #2
 80128bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80128be:	4413      	add	r3, r2
 80128c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80128c2:	69fb      	ldr	r3, [r7, #28]
 80128c4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80128c6:	fb02 f303 	mul.w	r3, r2, r3
 80128ca:	009b      	lsls	r3, r3, #2
 80128cc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80128ce:	4413      	add	r3, r2
 80128d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80128d2:	2300      	movs	r3, #0
 80128d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80128d6:	e014      	b.n	8012902 <arm_mat_inverse_f32+0x634>
 80128d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80128da:	1d1a      	adds	r2, r3, #4
 80128dc:	66ba      	str	r2, [r7, #104]	@ 0x68
 80128de:	ed93 7a00 	vldr	s14, [r3]
 80128e2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80128e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80128ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80128ec:	1d1a      	adds	r2, r3, #4
 80128ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80128f0:	ed93 7a00 	vldr	s14, [r3]
 80128f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80128f8:	edc3 7a00 	vstr	s15, [r3]
 80128fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80128fe:	3301      	adds	r3, #1
 8012900:	673b      	str	r3, [r7, #112]	@ 0x70
 8012902:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8012904:	69bb      	ldr	r3, [r7, #24]
 8012906:	429a      	cmp	r2, r3
 8012908:	dbe6      	blt.n	80128d8 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 801290a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801290e:	3301      	adds	r3, #1
 8012910:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012914:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012918:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801291a:	429a      	cmp	r2, r3
 801291c:	f4ff af67 	bcc.w	80127ee <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8012920:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012924:	3301      	adds	r3, #1
 8012926:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801292a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801292e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012930:	429a      	cmp	r2, r3
 8012932:	f4ff ad32 	bcc.w	801239a <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012936:	2300      	movs	r3, #0
 8012938:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 801293c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012940:	2b01      	cmp	r3, #1
 8012942:	d033      	beq.n	80129ac <arm_mat_inverse_f32+0x6de>
 8012944:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012948:	eef5 7a40 	vcmp.f32	s15, #0.0
 801294c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012950:	d12c      	bne.n	80129ac <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	685b      	ldr	r3, [r3, #4]
 8012956:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 8012958:	2300      	movs	r3, #0
 801295a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801295e:	e010      	b.n	8012982 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 8012960:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012964:	009b      	lsls	r3, r3, #2
 8012966:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012968:	4413      	add	r3, r2
 801296a:	edd3 7a00 	vldr	s15, [r3]
 801296e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012976:	d10d      	bne.n	8012994 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 8012978:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801297c:	3301      	adds	r3, #1
 801297e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8012982:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012984:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012986:	fb02 f303 	mul.w	r3, r2, r3
 801298a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801298e:	429a      	cmp	r2, r3
 8012990:	d3e6      	bcc.n	8012960 <arm_mat_inverse_f32+0x692>
 8012992:	e000      	b.n	8012996 <arm_mat_inverse_f32+0x6c8>
            break;
 8012994:	bf00      	nop
      }

      if (i == numRows * numCols)
 8012996:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012998:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801299a:	fb02 f303 	mul.w	r3, r2, r3
 801299e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80129a2:	429a      	cmp	r2, r3
 80129a4:	d102      	bne.n	80129ac <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 80129a6:	23fb      	movs	r3, #251	@ 0xfb
 80129a8:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 80129ac:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 80129b0:	4618      	mov	r0, r3
 80129b2:	37ec      	adds	r7, #236	@ 0xec
 80129b4:	46bd      	mov	sp, r7
 80129b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ba:	4770      	bx	lr

080129bc <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80129bc:	b480      	push	{r7}
 80129be:	b093      	sub	sp, #76	@ 0x4c
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	60f8      	str	r0, [r7, #12]
 80129c4:	60b9      	str	r1, [r7, #8]
 80129c6:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	685b      	ldr	r3, [r3, #4]
 80129cc:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 80129ce:	68bb      	ldr	r3, [r7, #8]
 80129d0:	685b      	ldr	r3, [r3, #4]
 80129d2:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	685b      	ldr	r3, [r3, #4]
 80129d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 80129da:	68bb      	ldr	r3, [r7, #8]
 80129dc:	685b      	ldr	r3, [r3, #4]
 80129de:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	685b      	ldr	r3, [r3, #4]
 80129e4:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	881b      	ldrh	r3, [r3, #0]
 80129ea:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 80129ec:	68bb      	ldr	r3, [r7, #8]
 80129ee:	885b      	ldrh	r3, [r3, #2]
 80129f0:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	885b      	ldrh	r3, [r3, #2]
 80129f6:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 80129f8:	2300      	movs	r3, #0
 80129fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80129fc:	8b7b      	ldrh	r3, [r7, #26]
 80129fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8012a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a02:	009b      	lsls	r3, r3, #2
 8012a04:	69fa      	ldr	r2, [r7, #28]
 8012a06:	4413      	add	r3, r2
 8012a08:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 8012a0a:	8b3b      	ldrh	r3, [r7, #24]
 8012a0c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8012a0e:	68bb      	ldr	r3, [r7, #8]
 8012a10:	685b      	ldr	r3, [r3, #4]
 8012a12:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8012a14:	f04f 0300 	mov.w	r3, #0
 8012a18:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 8012a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a1c:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8012a1e:	8afb      	ldrh	r3, [r7, #22]
 8012a20:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8012a22:	e017      	b.n	8012a54 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8012a24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012a26:	1d1a      	adds	r2, r3, #4
 8012a28:	647a      	str	r2, [r7, #68]	@ 0x44
 8012a2a:	ed93 7a00 	vldr	s14, [r3]
 8012a2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012a30:	edd3 7a00 	vldr	s15, [r3]
 8012a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a38:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8012a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012a40:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 8012a44:	8b3b      	ldrh	r3, [r7, #24]
 8012a46:	009b      	lsls	r3, r3, #2
 8012a48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012a4a:	4413      	add	r3, r2
 8012a4c:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 8012a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a50:	3b01      	subs	r3, #1
 8012a52:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 8012a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d1e4      	bne.n	8012a24 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8012a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a5c:	1d1a      	adds	r2, r3, #4
 8012a5e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8012a60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012a62:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8012a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a66:	3b01      	subs	r3, #1
 8012a68:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8012a6a:	8b3a      	ldrh	r2, [r7, #24]
 8012a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a6e:	1ad3      	subs	r3, r2, r3
 8012a70:	009b      	lsls	r3, r3, #2
 8012a72:	6a3a      	ldr	r2, [r7, #32]
 8012a74:	4413      	add	r3, r2
 8012a76:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 8012a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d1ca      	bne.n	8012a14 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8012a7e:	8b3b      	ldrh	r3, [r7, #24]
 8012a80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012a82:	4413      	add	r3, r2
 8012a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 8012a86:	8afb      	ldrh	r3, [r7, #22]
 8012a88:	009b      	lsls	r3, r3, #2
 8012a8a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012a8c:	4413      	add	r3, r2
 8012a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 8012a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a92:	3b01      	subs	r3, #1
 8012a94:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 8012a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d1b1      	bne.n	8012a00 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8012aa0:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	374c      	adds	r7, #76	@ 0x4c
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aae:	4770      	bx	lr

08012ab0 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8012ab0:	b480      	push	{r7}
 8012ab2:	b08b      	sub	sp, #44	@ 0x2c
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	60f8      	str	r0, [r7, #12]
 8012ab8:	ed87 0a02 	vstr	s0, [r7, #8]
 8012abc:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	685b      	ldr	r3, [r3, #4]
 8012ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	685b      	ldr	r3, [r3, #4]
 8012ac8:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	881b      	ldrh	r3, [r3, #0]
 8012ace:	461a      	mov	r2, r3
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	885b      	ldrh	r3, [r3, #2]
 8012ad4:	fb02 f303 	mul.w	r3, r2, r3
 8012ad8:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8012ada:	69bb      	ldr	r3, [r7, #24]
 8012adc:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8012ade:	e010      	b.n	8012b02 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8012ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ae2:	1d1a      	adds	r2, r3, #4
 8012ae4:	627a      	str	r2, [r7, #36]	@ 0x24
 8012ae6:	ed93 7a00 	vldr	s14, [r3]
 8012aea:	6a3b      	ldr	r3, [r7, #32]
 8012aec:	1d1a      	adds	r2, r3, #4
 8012aee:	623a      	str	r2, [r7, #32]
 8012af0:	edd7 7a02 	vldr	s15, [r7, #8]
 8012af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012af8:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8012afc:	69fb      	ldr	r3, [r7, #28]
 8012afe:	3b01      	subs	r3, #1
 8012b00:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8012b02:	69fb      	ldr	r3, [r7, #28]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d1eb      	bne.n	8012ae0 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012b08:	2300      	movs	r3, #0
 8012b0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8012b0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012b10:	4618      	mov	r0, r3
 8012b12:	372c      	adds	r7, #44	@ 0x2c
 8012b14:	46bd      	mov	sp, r7
 8012b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1a:	4770      	bx	lr

08012b1c <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8012b1c:	b480      	push	{r7}
 8012b1e:	b08b      	sub	sp, #44	@ 0x2c
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	60f8      	str	r0, [r7, #12]
 8012b24:	60b9      	str	r1, [r7, #8]
 8012b26:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	685b      	ldr	r3, [r3, #4]
 8012b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8012b2e:	68bb      	ldr	r3, [r7, #8]
 8012b30:	685b      	ldr	r3, [r3, #4]
 8012b32:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	685b      	ldr	r3, [r3, #4]
 8012b38:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	881b      	ldrh	r3, [r3, #0]
 8012b3e:	461a      	mov	r2, r3
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	885b      	ldrh	r3, [r3, #2]
 8012b44:	fb02 f303 	mul.w	r3, r2, r3
 8012b48:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8012b4a:	697b      	ldr	r3, [r7, #20]
 8012b4c:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8012b4e:	e013      	b.n	8012b78 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8012b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b52:	1d1a      	adds	r2, r3, #4
 8012b54:	627a      	str	r2, [r7, #36]	@ 0x24
 8012b56:	ed93 7a00 	vldr	s14, [r3]
 8012b5a:	6a3b      	ldr	r3, [r7, #32]
 8012b5c:	1d1a      	adds	r2, r3, #4
 8012b5e:	623a      	str	r2, [r7, #32]
 8012b60:	edd3 7a00 	vldr	s15, [r3]
 8012b64:	69fb      	ldr	r3, [r7, #28]
 8012b66:	1d1a      	adds	r2, r3, #4
 8012b68:	61fa      	str	r2, [r7, #28]
 8012b6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b6e:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8012b72:	69bb      	ldr	r3, [r7, #24]
 8012b74:	3b01      	subs	r3, #1
 8012b76:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8012b78:	69bb      	ldr	r3, [r7, #24]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d1e8      	bne.n	8012b50 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012b7e:	2300      	movs	r3, #0
 8012b80:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8012b82:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8012b86:	4618      	mov	r0, r3
 8012b88:	372c      	adds	r7, #44	@ 0x2c
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b90:	4770      	bx	lr

08012b92 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8012b92:	b480      	push	{r7}
 8012b94:	b08b      	sub	sp, #44	@ 0x2c
 8012b96:	af00      	add	r7, sp, #0
 8012b98:	6078      	str	r0, [r7, #4]
 8012b9a:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	685b      	ldr	r3, [r3, #4]
 8012ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	685b      	ldr	r3, [r3, #4]
 8012ba6:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	881b      	ldrh	r3, [r3, #0]
 8012bac:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	885b      	ldrh	r3, [r3, #2]
 8012bb2:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8012bb4:	89fb      	ldrh	r3, [r7, #14]
 8012bb6:	61bb      	str	r3, [r7, #24]
 8012bb8:	2300      	movs	r3, #0
 8012bba:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8012bbc:	697b      	ldr	r3, [r7, #20]
 8012bbe:	009b      	lsls	r3, r3, #2
 8012bc0:	693a      	ldr	r2, [r7, #16]
 8012bc2:	4413      	add	r3, r2
 8012bc4:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8012bc6:	89bb      	ldrh	r3, [r7, #12]
 8012bc8:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8012bca:	e00d      	b.n	8012be8 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8012bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bce:	1d1a      	adds	r2, r3, #4
 8012bd0:	627a      	str	r2, [r7, #36]	@ 0x24
 8012bd2:	681a      	ldr	r2, [r3, #0]
 8012bd4:	6a3b      	ldr	r3, [r7, #32]
 8012bd6:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8012bd8:	89fb      	ldrh	r3, [r7, #14]
 8012bda:	009b      	lsls	r3, r3, #2
 8012bdc:	6a3a      	ldr	r2, [r7, #32]
 8012bde:	4413      	add	r3, r2
 8012be0:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8012be2:	69fb      	ldr	r3, [r7, #28]
 8012be4:	3b01      	subs	r3, #1
 8012be6:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8012be8:	69fb      	ldr	r3, [r7, #28]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d1ee      	bne.n	8012bcc <arm_mat_trans_f32+0x3a>
      }

      i++;
 8012bee:	697b      	ldr	r3, [r7, #20]
 8012bf0:	3301      	adds	r3, #1
 8012bf2:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8012bf4:	69bb      	ldr	r3, [r7, #24]
 8012bf6:	3b01      	subs	r3, #1
 8012bf8:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8012bfa:	69bb      	ldr	r3, [r7, #24]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d1dd      	bne.n	8012bbc <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012c00:	2300      	movs	r3, #0
 8012c02:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8012c04:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012c08:	4618      	mov	r0, r3
 8012c0a:	372c      	adds	r7, #44	@ 0x2c
 8012c0c:	46bd      	mov	sp, r7
 8012c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c12:	4770      	bx	lr

08012c14 <malloc>:
 8012c14:	4b02      	ldr	r3, [pc, #8]	@ (8012c20 <malloc+0xc>)
 8012c16:	4601      	mov	r1, r0
 8012c18:	6818      	ldr	r0, [r3, #0]
 8012c1a:	f000 b825 	b.w	8012c68 <_malloc_r>
 8012c1e:	bf00      	nop
 8012c20:	200005c0 	.word	0x200005c0

08012c24 <sbrk_aligned>:
 8012c24:	b570      	push	{r4, r5, r6, lr}
 8012c26:	4e0f      	ldr	r6, [pc, #60]	@ (8012c64 <sbrk_aligned+0x40>)
 8012c28:	460c      	mov	r4, r1
 8012c2a:	6831      	ldr	r1, [r6, #0]
 8012c2c:	4605      	mov	r5, r0
 8012c2e:	b911      	cbnz	r1, 8012c36 <sbrk_aligned+0x12>
 8012c30:	f000 f8ae 	bl	8012d90 <_sbrk_r>
 8012c34:	6030      	str	r0, [r6, #0]
 8012c36:	4621      	mov	r1, r4
 8012c38:	4628      	mov	r0, r5
 8012c3a:	f000 f8a9 	bl	8012d90 <_sbrk_r>
 8012c3e:	1c43      	adds	r3, r0, #1
 8012c40:	d103      	bne.n	8012c4a <sbrk_aligned+0x26>
 8012c42:	f04f 34ff 	mov.w	r4, #4294967295
 8012c46:	4620      	mov	r0, r4
 8012c48:	bd70      	pop	{r4, r5, r6, pc}
 8012c4a:	1cc4      	adds	r4, r0, #3
 8012c4c:	f024 0403 	bic.w	r4, r4, #3
 8012c50:	42a0      	cmp	r0, r4
 8012c52:	d0f8      	beq.n	8012c46 <sbrk_aligned+0x22>
 8012c54:	1a21      	subs	r1, r4, r0
 8012c56:	4628      	mov	r0, r5
 8012c58:	f000 f89a 	bl	8012d90 <_sbrk_r>
 8012c5c:	3001      	adds	r0, #1
 8012c5e:	d1f2      	bne.n	8012c46 <sbrk_aligned+0x22>
 8012c60:	e7ef      	b.n	8012c42 <sbrk_aligned+0x1e>
 8012c62:	bf00      	nop
 8012c64:	20002720 	.word	0x20002720

08012c68 <_malloc_r>:
 8012c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c6c:	1ccd      	adds	r5, r1, #3
 8012c6e:	f025 0503 	bic.w	r5, r5, #3
 8012c72:	3508      	adds	r5, #8
 8012c74:	2d0c      	cmp	r5, #12
 8012c76:	bf38      	it	cc
 8012c78:	250c      	movcc	r5, #12
 8012c7a:	2d00      	cmp	r5, #0
 8012c7c:	4606      	mov	r6, r0
 8012c7e:	db01      	blt.n	8012c84 <_malloc_r+0x1c>
 8012c80:	42a9      	cmp	r1, r5
 8012c82:	d904      	bls.n	8012c8e <_malloc_r+0x26>
 8012c84:	230c      	movs	r3, #12
 8012c86:	6033      	str	r3, [r6, #0]
 8012c88:	2000      	movs	r0, #0
 8012c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012d64 <_malloc_r+0xfc>
 8012c92:	f000 f869 	bl	8012d68 <__malloc_lock>
 8012c96:	f8d8 3000 	ldr.w	r3, [r8]
 8012c9a:	461c      	mov	r4, r3
 8012c9c:	bb44      	cbnz	r4, 8012cf0 <_malloc_r+0x88>
 8012c9e:	4629      	mov	r1, r5
 8012ca0:	4630      	mov	r0, r6
 8012ca2:	f7ff ffbf 	bl	8012c24 <sbrk_aligned>
 8012ca6:	1c43      	adds	r3, r0, #1
 8012ca8:	4604      	mov	r4, r0
 8012caa:	d158      	bne.n	8012d5e <_malloc_r+0xf6>
 8012cac:	f8d8 4000 	ldr.w	r4, [r8]
 8012cb0:	4627      	mov	r7, r4
 8012cb2:	2f00      	cmp	r7, #0
 8012cb4:	d143      	bne.n	8012d3e <_malloc_r+0xd6>
 8012cb6:	2c00      	cmp	r4, #0
 8012cb8:	d04b      	beq.n	8012d52 <_malloc_r+0xea>
 8012cba:	6823      	ldr	r3, [r4, #0]
 8012cbc:	4639      	mov	r1, r7
 8012cbe:	4630      	mov	r0, r6
 8012cc0:	eb04 0903 	add.w	r9, r4, r3
 8012cc4:	f000 f864 	bl	8012d90 <_sbrk_r>
 8012cc8:	4581      	cmp	r9, r0
 8012cca:	d142      	bne.n	8012d52 <_malloc_r+0xea>
 8012ccc:	6821      	ldr	r1, [r4, #0]
 8012cce:	1a6d      	subs	r5, r5, r1
 8012cd0:	4629      	mov	r1, r5
 8012cd2:	4630      	mov	r0, r6
 8012cd4:	f7ff ffa6 	bl	8012c24 <sbrk_aligned>
 8012cd8:	3001      	adds	r0, #1
 8012cda:	d03a      	beq.n	8012d52 <_malloc_r+0xea>
 8012cdc:	6823      	ldr	r3, [r4, #0]
 8012cde:	442b      	add	r3, r5
 8012ce0:	6023      	str	r3, [r4, #0]
 8012ce2:	f8d8 3000 	ldr.w	r3, [r8]
 8012ce6:	685a      	ldr	r2, [r3, #4]
 8012ce8:	bb62      	cbnz	r2, 8012d44 <_malloc_r+0xdc>
 8012cea:	f8c8 7000 	str.w	r7, [r8]
 8012cee:	e00f      	b.n	8012d10 <_malloc_r+0xa8>
 8012cf0:	6822      	ldr	r2, [r4, #0]
 8012cf2:	1b52      	subs	r2, r2, r5
 8012cf4:	d420      	bmi.n	8012d38 <_malloc_r+0xd0>
 8012cf6:	2a0b      	cmp	r2, #11
 8012cf8:	d917      	bls.n	8012d2a <_malloc_r+0xc2>
 8012cfa:	1961      	adds	r1, r4, r5
 8012cfc:	42a3      	cmp	r3, r4
 8012cfe:	6025      	str	r5, [r4, #0]
 8012d00:	bf18      	it	ne
 8012d02:	6059      	strne	r1, [r3, #4]
 8012d04:	6863      	ldr	r3, [r4, #4]
 8012d06:	bf08      	it	eq
 8012d08:	f8c8 1000 	streq.w	r1, [r8]
 8012d0c:	5162      	str	r2, [r4, r5]
 8012d0e:	604b      	str	r3, [r1, #4]
 8012d10:	4630      	mov	r0, r6
 8012d12:	f000 f82f 	bl	8012d74 <__malloc_unlock>
 8012d16:	f104 000b 	add.w	r0, r4, #11
 8012d1a:	1d23      	adds	r3, r4, #4
 8012d1c:	f020 0007 	bic.w	r0, r0, #7
 8012d20:	1ac2      	subs	r2, r0, r3
 8012d22:	bf1c      	itt	ne
 8012d24:	1a1b      	subne	r3, r3, r0
 8012d26:	50a3      	strne	r3, [r4, r2]
 8012d28:	e7af      	b.n	8012c8a <_malloc_r+0x22>
 8012d2a:	6862      	ldr	r2, [r4, #4]
 8012d2c:	42a3      	cmp	r3, r4
 8012d2e:	bf0c      	ite	eq
 8012d30:	f8c8 2000 	streq.w	r2, [r8]
 8012d34:	605a      	strne	r2, [r3, #4]
 8012d36:	e7eb      	b.n	8012d10 <_malloc_r+0xa8>
 8012d38:	4623      	mov	r3, r4
 8012d3a:	6864      	ldr	r4, [r4, #4]
 8012d3c:	e7ae      	b.n	8012c9c <_malloc_r+0x34>
 8012d3e:	463c      	mov	r4, r7
 8012d40:	687f      	ldr	r7, [r7, #4]
 8012d42:	e7b6      	b.n	8012cb2 <_malloc_r+0x4a>
 8012d44:	461a      	mov	r2, r3
 8012d46:	685b      	ldr	r3, [r3, #4]
 8012d48:	42a3      	cmp	r3, r4
 8012d4a:	d1fb      	bne.n	8012d44 <_malloc_r+0xdc>
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	6053      	str	r3, [r2, #4]
 8012d50:	e7de      	b.n	8012d10 <_malloc_r+0xa8>
 8012d52:	230c      	movs	r3, #12
 8012d54:	6033      	str	r3, [r6, #0]
 8012d56:	4630      	mov	r0, r6
 8012d58:	f000 f80c 	bl	8012d74 <__malloc_unlock>
 8012d5c:	e794      	b.n	8012c88 <_malloc_r+0x20>
 8012d5e:	6005      	str	r5, [r0, #0]
 8012d60:	e7d6      	b.n	8012d10 <_malloc_r+0xa8>
 8012d62:	bf00      	nop
 8012d64:	20002724 	.word	0x20002724

08012d68 <__malloc_lock>:
 8012d68:	4801      	ldr	r0, [pc, #4]	@ (8012d70 <__malloc_lock+0x8>)
 8012d6a:	f000 b84b 	b.w	8012e04 <__retarget_lock_acquire_recursive>
 8012d6e:	bf00      	nop
 8012d70:	20002864 	.word	0x20002864

08012d74 <__malloc_unlock>:
 8012d74:	4801      	ldr	r0, [pc, #4]	@ (8012d7c <__malloc_unlock+0x8>)
 8012d76:	f000 b846 	b.w	8012e06 <__retarget_lock_release_recursive>
 8012d7a:	bf00      	nop
 8012d7c:	20002864 	.word	0x20002864

08012d80 <memset>:
 8012d80:	4402      	add	r2, r0
 8012d82:	4603      	mov	r3, r0
 8012d84:	4293      	cmp	r3, r2
 8012d86:	d100      	bne.n	8012d8a <memset+0xa>
 8012d88:	4770      	bx	lr
 8012d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8012d8e:	e7f9      	b.n	8012d84 <memset+0x4>

08012d90 <_sbrk_r>:
 8012d90:	b538      	push	{r3, r4, r5, lr}
 8012d92:	4d06      	ldr	r5, [pc, #24]	@ (8012dac <_sbrk_r+0x1c>)
 8012d94:	2300      	movs	r3, #0
 8012d96:	4604      	mov	r4, r0
 8012d98:	4608      	mov	r0, r1
 8012d9a:	602b      	str	r3, [r5, #0]
 8012d9c:	f7f7 f846 	bl	8009e2c <_sbrk>
 8012da0:	1c43      	adds	r3, r0, #1
 8012da2:	d102      	bne.n	8012daa <_sbrk_r+0x1a>
 8012da4:	682b      	ldr	r3, [r5, #0]
 8012da6:	b103      	cbz	r3, 8012daa <_sbrk_r+0x1a>
 8012da8:	6023      	str	r3, [r4, #0]
 8012daa:	bd38      	pop	{r3, r4, r5, pc}
 8012dac:	20002860 	.word	0x20002860

08012db0 <__errno>:
 8012db0:	4b01      	ldr	r3, [pc, #4]	@ (8012db8 <__errno+0x8>)
 8012db2:	6818      	ldr	r0, [r3, #0]
 8012db4:	4770      	bx	lr
 8012db6:	bf00      	nop
 8012db8:	200005c0 	.word	0x200005c0

08012dbc <__libc_init_array>:
 8012dbc:	b570      	push	{r4, r5, r6, lr}
 8012dbe:	4d0d      	ldr	r5, [pc, #52]	@ (8012df4 <__libc_init_array+0x38>)
 8012dc0:	4c0d      	ldr	r4, [pc, #52]	@ (8012df8 <__libc_init_array+0x3c>)
 8012dc2:	1b64      	subs	r4, r4, r5
 8012dc4:	10a4      	asrs	r4, r4, #2
 8012dc6:	2600      	movs	r6, #0
 8012dc8:	42a6      	cmp	r6, r4
 8012dca:	d109      	bne.n	8012de0 <__libc_init_array+0x24>
 8012dcc:	4d0b      	ldr	r5, [pc, #44]	@ (8012dfc <__libc_init_array+0x40>)
 8012dce:	4c0c      	ldr	r4, [pc, #48]	@ (8012e00 <__libc_init_array+0x44>)
 8012dd0:	f001 ff32 	bl	8014c38 <_init>
 8012dd4:	1b64      	subs	r4, r4, r5
 8012dd6:	10a4      	asrs	r4, r4, #2
 8012dd8:	2600      	movs	r6, #0
 8012dda:	42a6      	cmp	r6, r4
 8012ddc:	d105      	bne.n	8012dea <__libc_init_array+0x2e>
 8012dde:	bd70      	pop	{r4, r5, r6, pc}
 8012de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8012de4:	4798      	blx	r3
 8012de6:	3601      	adds	r6, #1
 8012de8:	e7ee      	b.n	8012dc8 <__libc_init_array+0xc>
 8012dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8012dee:	4798      	blx	r3
 8012df0:	3601      	adds	r6, #1
 8012df2:	e7f2      	b.n	8012dda <__libc_init_array+0x1e>
 8012df4:	080152a8 	.word	0x080152a8
 8012df8:	080152a8 	.word	0x080152a8
 8012dfc:	080152a8 	.word	0x080152a8
 8012e00:	080152ac 	.word	0x080152ac

08012e04 <__retarget_lock_acquire_recursive>:
 8012e04:	4770      	bx	lr

08012e06 <__retarget_lock_release_recursive>:
 8012e06:	4770      	bx	lr

08012e08 <memcpy>:
 8012e08:	440a      	add	r2, r1
 8012e0a:	4291      	cmp	r1, r2
 8012e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012e10:	d100      	bne.n	8012e14 <memcpy+0xc>
 8012e12:	4770      	bx	lr
 8012e14:	b510      	push	{r4, lr}
 8012e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012e1e:	4291      	cmp	r1, r2
 8012e20:	d1f9      	bne.n	8012e16 <memcpy+0xe>
 8012e22:	bd10      	pop	{r4, pc}
 8012e24:	0000      	movs	r0, r0
	...

08012e28 <cos>:
 8012e28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012e2a:	ec53 2b10 	vmov	r2, r3, d0
 8012e2e:	4826      	ldr	r0, [pc, #152]	@ (8012ec8 <cos+0xa0>)
 8012e30:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012e34:	4281      	cmp	r1, r0
 8012e36:	d806      	bhi.n	8012e46 <cos+0x1e>
 8012e38:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012ec0 <cos+0x98>
 8012e3c:	b005      	add	sp, #20
 8012e3e:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e42:	f000 b9bd 	b.w	80131c0 <__kernel_cos>
 8012e46:	4821      	ldr	r0, [pc, #132]	@ (8012ecc <cos+0xa4>)
 8012e48:	4281      	cmp	r1, r0
 8012e4a:	d908      	bls.n	8012e5e <cos+0x36>
 8012e4c:	4610      	mov	r0, r2
 8012e4e:	4619      	mov	r1, r3
 8012e50:	f7ed f9e6 	bl	8000220 <__aeabi_dsub>
 8012e54:	ec41 0b10 	vmov	d0, r0, r1
 8012e58:	b005      	add	sp, #20
 8012e5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8012e5e:	4668      	mov	r0, sp
 8012e60:	f000 fb32 	bl	80134c8 <__ieee754_rem_pio2>
 8012e64:	f000 0003 	and.w	r0, r0, #3
 8012e68:	2801      	cmp	r0, #1
 8012e6a:	d00b      	beq.n	8012e84 <cos+0x5c>
 8012e6c:	2802      	cmp	r0, #2
 8012e6e:	d015      	beq.n	8012e9c <cos+0x74>
 8012e70:	b9d8      	cbnz	r0, 8012eaa <cos+0x82>
 8012e72:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012e76:	ed9d 0b00 	vldr	d0, [sp]
 8012e7a:	f000 f9a1 	bl	80131c0 <__kernel_cos>
 8012e7e:	ec51 0b10 	vmov	r0, r1, d0
 8012e82:	e7e7      	b.n	8012e54 <cos+0x2c>
 8012e84:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012e88:	ed9d 0b00 	vldr	d0, [sp]
 8012e8c:	f000 fa60 	bl	8013350 <__kernel_sin>
 8012e90:	ec53 2b10 	vmov	r2, r3, d0
 8012e94:	4610      	mov	r0, r2
 8012e96:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012e9a:	e7db      	b.n	8012e54 <cos+0x2c>
 8012e9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012ea0:	ed9d 0b00 	vldr	d0, [sp]
 8012ea4:	f000 f98c 	bl	80131c0 <__kernel_cos>
 8012ea8:	e7f2      	b.n	8012e90 <cos+0x68>
 8012eaa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012eae:	ed9d 0b00 	vldr	d0, [sp]
 8012eb2:	2001      	movs	r0, #1
 8012eb4:	f000 fa4c 	bl	8013350 <__kernel_sin>
 8012eb8:	e7e1      	b.n	8012e7e <cos+0x56>
 8012eba:	bf00      	nop
 8012ebc:	f3af 8000 	nop.w
	...
 8012ec8:	3fe921fb 	.word	0x3fe921fb
 8012ecc:	7fefffff 	.word	0x7fefffff

08012ed0 <sin>:
 8012ed0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012ed2:	ec53 2b10 	vmov	r2, r3, d0
 8012ed6:	4826      	ldr	r0, [pc, #152]	@ (8012f70 <sin+0xa0>)
 8012ed8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012edc:	4281      	cmp	r1, r0
 8012ede:	d807      	bhi.n	8012ef0 <sin+0x20>
 8012ee0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012f68 <sin+0x98>
 8012ee4:	2000      	movs	r0, #0
 8012ee6:	b005      	add	sp, #20
 8012ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012eec:	f000 ba30 	b.w	8013350 <__kernel_sin>
 8012ef0:	4820      	ldr	r0, [pc, #128]	@ (8012f74 <sin+0xa4>)
 8012ef2:	4281      	cmp	r1, r0
 8012ef4:	d908      	bls.n	8012f08 <sin+0x38>
 8012ef6:	4610      	mov	r0, r2
 8012ef8:	4619      	mov	r1, r3
 8012efa:	f7ed f991 	bl	8000220 <__aeabi_dsub>
 8012efe:	ec41 0b10 	vmov	d0, r0, r1
 8012f02:	b005      	add	sp, #20
 8012f04:	f85d fb04 	ldr.w	pc, [sp], #4
 8012f08:	4668      	mov	r0, sp
 8012f0a:	f000 fadd 	bl	80134c8 <__ieee754_rem_pio2>
 8012f0e:	f000 0003 	and.w	r0, r0, #3
 8012f12:	2801      	cmp	r0, #1
 8012f14:	d00c      	beq.n	8012f30 <sin+0x60>
 8012f16:	2802      	cmp	r0, #2
 8012f18:	d011      	beq.n	8012f3e <sin+0x6e>
 8012f1a:	b9e8      	cbnz	r0, 8012f58 <sin+0x88>
 8012f1c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012f20:	ed9d 0b00 	vldr	d0, [sp]
 8012f24:	2001      	movs	r0, #1
 8012f26:	f000 fa13 	bl	8013350 <__kernel_sin>
 8012f2a:	ec51 0b10 	vmov	r0, r1, d0
 8012f2e:	e7e6      	b.n	8012efe <sin+0x2e>
 8012f30:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012f34:	ed9d 0b00 	vldr	d0, [sp]
 8012f38:	f000 f942 	bl	80131c0 <__kernel_cos>
 8012f3c:	e7f5      	b.n	8012f2a <sin+0x5a>
 8012f3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012f42:	ed9d 0b00 	vldr	d0, [sp]
 8012f46:	2001      	movs	r0, #1
 8012f48:	f000 fa02 	bl	8013350 <__kernel_sin>
 8012f4c:	ec53 2b10 	vmov	r2, r3, d0
 8012f50:	4610      	mov	r0, r2
 8012f52:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012f56:	e7d2      	b.n	8012efe <sin+0x2e>
 8012f58:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012f5c:	ed9d 0b00 	vldr	d0, [sp]
 8012f60:	f000 f92e 	bl	80131c0 <__kernel_cos>
 8012f64:	e7f2      	b.n	8012f4c <sin+0x7c>
 8012f66:	bf00      	nop
	...
 8012f70:	3fe921fb 	.word	0x3fe921fb
 8012f74:	7fefffff 	.word	0x7fefffff

08012f78 <fmodf>:
 8012f78:	b508      	push	{r3, lr}
 8012f7a:	ed2d 8b02 	vpush	{d8}
 8012f7e:	eef0 8a40 	vmov.f32	s17, s0
 8012f82:	eeb0 8a60 	vmov.f32	s16, s1
 8012f86:	f000 fd43 	bl	8013a10 <__ieee754_fmodf>
 8012f8a:	eef4 8a48 	vcmp.f32	s17, s16
 8012f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f92:	d60c      	bvs.n	8012fae <fmodf+0x36>
 8012f94:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8012fb4 <fmodf+0x3c>
 8012f98:	eeb4 8a68 	vcmp.f32	s16, s17
 8012f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fa0:	d105      	bne.n	8012fae <fmodf+0x36>
 8012fa2:	f7ff ff05 	bl	8012db0 <__errno>
 8012fa6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012faa:	2321      	movs	r3, #33	@ 0x21
 8012fac:	6003      	str	r3, [r0, #0]
 8012fae:	ecbd 8b02 	vpop	{d8}
 8012fb2:	bd08      	pop	{r3, pc}
 8012fb4:	00000000 	.word	0x00000000

08012fb8 <sqrtf>:
 8012fb8:	b508      	push	{r3, lr}
 8012fba:	ed2d 8b02 	vpush	{d8}
 8012fbe:	eeb0 8a40 	vmov.f32	s16, s0
 8012fc2:	f000 f8f7 	bl	80131b4 <__ieee754_sqrtf>
 8012fc6:	eeb4 8a48 	vcmp.f32	s16, s16
 8012fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fce:	d60c      	bvs.n	8012fea <sqrtf+0x32>
 8012fd0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8012ff0 <sqrtf+0x38>
 8012fd4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fdc:	d505      	bpl.n	8012fea <sqrtf+0x32>
 8012fde:	f7ff fee7 	bl	8012db0 <__errno>
 8012fe2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012fe6:	2321      	movs	r3, #33	@ 0x21
 8012fe8:	6003      	str	r3, [r0, #0]
 8012fea:	ecbd 8b02 	vpop	{d8}
 8012fee:	bd08      	pop	{r3, pc}
 8012ff0:	00000000 	.word	0x00000000

08012ff4 <cosf>:
 8012ff4:	ee10 3a10 	vmov	r3, s0
 8012ff8:	b507      	push	{r0, r1, r2, lr}
 8012ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8013074 <cosf+0x80>)
 8012ffc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013000:	4293      	cmp	r3, r2
 8013002:	d806      	bhi.n	8013012 <cosf+0x1e>
 8013004:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8013078 <cosf+0x84>
 8013008:	b003      	add	sp, #12
 801300a:	f85d eb04 	ldr.w	lr, [sp], #4
 801300e:	f000 bc5f 	b.w	80138d0 <__kernel_cosf>
 8013012:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8013016:	d304      	bcc.n	8013022 <cosf+0x2e>
 8013018:	ee30 0a40 	vsub.f32	s0, s0, s0
 801301c:	b003      	add	sp, #12
 801301e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013022:	4668      	mov	r0, sp
 8013024:	f000 fd76 	bl	8013b14 <__ieee754_rem_pio2f>
 8013028:	f000 0003 	and.w	r0, r0, #3
 801302c:	2801      	cmp	r0, #1
 801302e:	d009      	beq.n	8013044 <cosf+0x50>
 8013030:	2802      	cmp	r0, #2
 8013032:	d010      	beq.n	8013056 <cosf+0x62>
 8013034:	b9b0      	cbnz	r0, 8013064 <cosf+0x70>
 8013036:	eddd 0a01 	vldr	s1, [sp, #4]
 801303a:	ed9d 0a00 	vldr	s0, [sp]
 801303e:	f000 fc47 	bl	80138d0 <__kernel_cosf>
 8013042:	e7eb      	b.n	801301c <cosf+0x28>
 8013044:	eddd 0a01 	vldr	s1, [sp, #4]
 8013048:	ed9d 0a00 	vldr	s0, [sp]
 801304c:	f000 fc98 	bl	8013980 <__kernel_sinf>
 8013050:	eeb1 0a40 	vneg.f32	s0, s0
 8013054:	e7e2      	b.n	801301c <cosf+0x28>
 8013056:	eddd 0a01 	vldr	s1, [sp, #4]
 801305a:	ed9d 0a00 	vldr	s0, [sp]
 801305e:	f000 fc37 	bl	80138d0 <__kernel_cosf>
 8013062:	e7f5      	b.n	8013050 <cosf+0x5c>
 8013064:	eddd 0a01 	vldr	s1, [sp, #4]
 8013068:	ed9d 0a00 	vldr	s0, [sp]
 801306c:	2001      	movs	r0, #1
 801306e:	f000 fc87 	bl	8013980 <__kernel_sinf>
 8013072:	e7d3      	b.n	801301c <cosf+0x28>
 8013074:	3f490fd8 	.word	0x3f490fd8
 8013078:	00000000 	.word	0x00000000

0801307c <sinf>:
 801307c:	ee10 3a10 	vmov	r3, s0
 8013080:	b507      	push	{r0, r1, r2, lr}
 8013082:	4a1f      	ldr	r2, [pc, #124]	@ (8013100 <sinf+0x84>)
 8013084:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013088:	4293      	cmp	r3, r2
 801308a:	d807      	bhi.n	801309c <sinf+0x20>
 801308c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8013104 <sinf+0x88>
 8013090:	2000      	movs	r0, #0
 8013092:	b003      	add	sp, #12
 8013094:	f85d eb04 	ldr.w	lr, [sp], #4
 8013098:	f000 bc72 	b.w	8013980 <__kernel_sinf>
 801309c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80130a0:	d304      	bcc.n	80130ac <sinf+0x30>
 80130a2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80130a6:	b003      	add	sp, #12
 80130a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80130ac:	4668      	mov	r0, sp
 80130ae:	f000 fd31 	bl	8013b14 <__ieee754_rem_pio2f>
 80130b2:	f000 0003 	and.w	r0, r0, #3
 80130b6:	2801      	cmp	r0, #1
 80130b8:	d00a      	beq.n	80130d0 <sinf+0x54>
 80130ba:	2802      	cmp	r0, #2
 80130bc:	d00f      	beq.n	80130de <sinf+0x62>
 80130be:	b9c0      	cbnz	r0, 80130f2 <sinf+0x76>
 80130c0:	eddd 0a01 	vldr	s1, [sp, #4]
 80130c4:	ed9d 0a00 	vldr	s0, [sp]
 80130c8:	2001      	movs	r0, #1
 80130ca:	f000 fc59 	bl	8013980 <__kernel_sinf>
 80130ce:	e7ea      	b.n	80130a6 <sinf+0x2a>
 80130d0:	eddd 0a01 	vldr	s1, [sp, #4]
 80130d4:	ed9d 0a00 	vldr	s0, [sp]
 80130d8:	f000 fbfa 	bl	80138d0 <__kernel_cosf>
 80130dc:	e7e3      	b.n	80130a6 <sinf+0x2a>
 80130de:	eddd 0a01 	vldr	s1, [sp, #4]
 80130e2:	ed9d 0a00 	vldr	s0, [sp]
 80130e6:	2001      	movs	r0, #1
 80130e8:	f000 fc4a 	bl	8013980 <__kernel_sinf>
 80130ec:	eeb1 0a40 	vneg.f32	s0, s0
 80130f0:	e7d9      	b.n	80130a6 <sinf+0x2a>
 80130f2:	eddd 0a01 	vldr	s1, [sp, #4]
 80130f6:	ed9d 0a00 	vldr	s0, [sp]
 80130fa:	f000 fbe9 	bl	80138d0 <__kernel_cosf>
 80130fe:	e7f5      	b.n	80130ec <sinf+0x70>
 8013100:	3f490fd8 	.word	0x3f490fd8
 8013104:	00000000 	.word	0x00000000

08013108 <fmaxf>:
 8013108:	b508      	push	{r3, lr}
 801310a:	ed2d 8b02 	vpush	{d8}
 801310e:	eeb0 8a40 	vmov.f32	s16, s0
 8013112:	eef0 8a60 	vmov.f32	s17, s1
 8013116:	f000 f831 	bl	801317c <__fpclassifyf>
 801311a:	b930      	cbnz	r0, 801312a <fmaxf+0x22>
 801311c:	eeb0 8a68 	vmov.f32	s16, s17
 8013120:	eeb0 0a48 	vmov.f32	s0, s16
 8013124:	ecbd 8b02 	vpop	{d8}
 8013128:	bd08      	pop	{r3, pc}
 801312a:	eeb0 0a68 	vmov.f32	s0, s17
 801312e:	f000 f825 	bl	801317c <__fpclassifyf>
 8013132:	2800      	cmp	r0, #0
 8013134:	d0f4      	beq.n	8013120 <fmaxf+0x18>
 8013136:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801313a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801313e:	dded      	ble.n	801311c <fmaxf+0x14>
 8013140:	e7ee      	b.n	8013120 <fmaxf+0x18>

08013142 <fminf>:
 8013142:	b508      	push	{r3, lr}
 8013144:	ed2d 8b02 	vpush	{d8}
 8013148:	eeb0 8a40 	vmov.f32	s16, s0
 801314c:	eef0 8a60 	vmov.f32	s17, s1
 8013150:	f000 f814 	bl	801317c <__fpclassifyf>
 8013154:	b930      	cbnz	r0, 8013164 <fminf+0x22>
 8013156:	eeb0 8a68 	vmov.f32	s16, s17
 801315a:	eeb0 0a48 	vmov.f32	s0, s16
 801315e:	ecbd 8b02 	vpop	{d8}
 8013162:	bd08      	pop	{r3, pc}
 8013164:	eeb0 0a68 	vmov.f32	s0, s17
 8013168:	f000 f808 	bl	801317c <__fpclassifyf>
 801316c:	2800      	cmp	r0, #0
 801316e:	d0f4      	beq.n	801315a <fminf+0x18>
 8013170:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013178:	d5ed      	bpl.n	8013156 <fminf+0x14>
 801317a:	e7ee      	b.n	801315a <fminf+0x18>

0801317c <__fpclassifyf>:
 801317c:	ee10 3a10 	vmov	r3, s0
 8013180:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8013184:	d00d      	beq.n	80131a2 <__fpclassifyf+0x26>
 8013186:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 801318a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 801318e:	d30a      	bcc.n	80131a6 <__fpclassifyf+0x2a>
 8013190:	4b07      	ldr	r3, [pc, #28]	@ (80131b0 <__fpclassifyf+0x34>)
 8013192:	1e42      	subs	r2, r0, #1
 8013194:	429a      	cmp	r2, r3
 8013196:	d908      	bls.n	80131aa <__fpclassifyf+0x2e>
 8013198:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 801319c:	4258      	negs	r0, r3
 801319e:	4158      	adcs	r0, r3
 80131a0:	4770      	bx	lr
 80131a2:	2002      	movs	r0, #2
 80131a4:	4770      	bx	lr
 80131a6:	2004      	movs	r0, #4
 80131a8:	4770      	bx	lr
 80131aa:	2003      	movs	r0, #3
 80131ac:	4770      	bx	lr
 80131ae:	bf00      	nop
 80131b0:	007ffffe 	.word	0x007ffffe

080131b4 <__ieee754_sqrtf>:
 80131b4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80131b8:	4770      	bx	lr
 80131ba:	0000      	movs	r0, r0
 80131bc:	0000      	movs	r0, r0
	...

080131c0 <__kernel_cos>:
 80131c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131c4:	ec57 6b10 	vmov	r6, r7, d0
 80131c8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80131cc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80131d0:	ed8d 1b00 	vstr	d1, [sp]
 80131d4:	d206      	bcs.n	80131e4 <__kernel_cos+0x24>
 80131d6:	4630      	mov	r0, r6
 80131d8:	4639      	mov	r1, r7
 80131da:	f7ed fc73 	bl	8000ac4 <__aeabi_d2iz>
 80131de:	2800      	cmp	r0, #0
 80131e0:	f000 8088 	beq.w	80132f4 <__kernel_cos+0x134>
 80131e4:	4632      	mov	r2, r6
 80131e6:	463b      	mov	r3, r7
 80131e8:	4630      	mov	r0, r6
 80131ea:	4639      	mov	r1, r7
 80131ec:	f7ed f9d0 	bl	8000590 <__aeabi_dmul>
 80131f0:	4b51      	ldr	r3, [pc, #324]	@ (8013338 <__kernel_cos+0x178>)
 80131f2:	2200      	movs	r2, #0
 80131f4:	4604      	mov	r4, r0
 80131f6:	460d      	mov	r5, r1
 80131f8:	f7ed f9ca 	bl	8000590 <__aeabi_dmul>
 80131fc:	a340      	add	r3, pc, #256	@ (adr r3, 8013300 <__kernel_cos+0x140>)
 80131fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013202:	4682      	mov	sl, r0
 8013204:	468b      	mov	fp, r1
 8013206:	4620      	mov	r0, r4
 8013208:	4629      	mov	r1, r5
 801320a:	f7ed f9c1 	bl	8000590 <__aeabi_dmul>
 801320e:	a33e      	add	r3, pc, #248	@ (adr r3, 8013308 <__kernel_cos+0x148>)
 8013210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013214:	f7ed f806 	bl	8000224 <__adddf3>
 8013218:	4622      	mov	r2, r4
 801321a:	462b      	mov	r3, r5
 801321c:	f7ed f9b8 	bl	8000590 <__aeabi_dmul>
 8013220:	a33b      	add	r3, pc, #236	@ (adr r3, 8013310 <__kernel_cos+0x150>)
 8013222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013226:	f7ec fffb 	bl	8000220 <__aeabi_dsub>
 801322a:	4622      	mov	r2, r4
 801322c:	462b      	mov	r3, r5
 801322e:	f7ed f9af 	bl	8000590 <__aeabi_dmul>
 8013232:	a339      	add	r3, pc, #228	@ (adr r3, 8013318 <__kernel_cos+0x158>)
 8013234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013238:	f7ec fff4 	bl	8000224 <__adddf3>
 801323c:	4622      	mov	r2, r4
 801323e:	462b      	mov	r3, r5
 8013240:	f7ed f9a6 	bl	8000590 <__aeabi_dmul>
 8013244:	a336      	add	r3, pc, #216	@ (adr r3, 8013320 <__kernel_cos+0x160>)
 8013246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801324a:	f7ec ffe9 	bl	8000220 <__aeabi_dsub>
 801324e:	4622      	mov	r2, r4
 8013250:	462b      	mov	r3, r5
 8013252:	f7ed f99d 	bl	8000590 <__aeabi_dmul>
 8013256:	a334      	add	r3, pc, #208	@ (adr r3, 8013328 <__kernel_cos+0x168>)
 8013258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801325c:	f7ec ffe2 	bl	8000224 <__adddf3>
 8013260:	4622      	mov	r2, r4
 8013262:	462b      	mov	r3, r5
 8013264:	f7ed f994 	bl	8000590 <__aeabi_dmul>
 8013268:	4622      	mov	r2, r4
 801326a:	462b      	mov	r3, r5
 801326c:	f7ed f990 	bl	8000590 <__aeabi_dmul>
 8013270:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013274:	4604      	mov	r4, r0
 8013276:	460d      	mov	r5, r1
 8013278:	4630      	mov	r0, r6
 801327a:	4639      	mov	r1, r7
 801327c:	f7ed f988 	bl	8000590 <__aeabi_dmul>
 8013280:	460b      	mov	r3, r1
 8013282:	4602      	mov	r2, r0
 8013284:	4629      	mov	r1, r5
 8013286:	4620      	mov	r0, r4
 8013288:	f7ec ffca 	bl	8000220 <__aeabi_dsub>
 801328c:	4b2b      	ldr	r3, [pc, #172]	@ (801333c <__kernel_cos+0x17c>)
 801328e:	4598      	cmp	r8, r3
 8013290:	4606      	mov	r6, r0
 8013292:	460f      	mov	r7, r1
 8013294:	d810      	bhi.n	80132b8 <__kernel_cos+0xf8>
 8013296:	4602      	mov	r2, r0
 8013298:	460b      	mov	r3, r1
 801329a:	4650      	mov	r0, sl
 801329c:	4659      	mov	r1, fp
 801329e:	f7ec ffbf 	bl	8000220 <__aeabi_dsub>
 80132a2:	460b      	mov	r3, r1
 80132a4:	4926      	ldr	r1, [pc, #152]	@ (8013340 <__kernel_cos+0x180>)
 80132a6:	4602      	mov	r2, r0
 80132a8:	2000      	movs	r0, #0
 80132aa:	f7ec ffb9 	bl	8000220 <__aeabi_dsub>
 80132ae:	ec41 0b10 	vmov	d0, r0, r1
 80132b2:	b003      	add	sp, #12
 80132b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132b8:	4b22      	ldr	r3, [pc, #136]	@ (8013344 <__kernel_cos+0x184>)
 80132ba:	4921      	ldr	r1, [pc, #132]	@ (8013340 <__kernel_cos+0x180>)
 80132bc:	4598      	cmp	r8, r3
 80132be:	bf8c      	ite	hi
 80132c0:	4d21      	ldrhi	r5, [pc, #132]	@ (8013348 <__kernel_cos+0x188>)
 80132c2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80132c6:	2400      	movs	r4, #0
 80132c8:	4622      	mov	r2, r4
 80132ca:	462b      	mov	r3, r5
 80132cc:	2000      	movs	r0, #0
 80132ce:	f7ec ffa7 	bl	8000220 <__aeabi_dsub>
 80132d2:	4622      	mov	r2, r4
 80132d4:	4680      	mov	r8, r0
 80132d6:	4689      	mov	r9, r1
 80132d8:	462b      	mov	r3, r5
 80132da:	4650      	mov	r0, sl
 80132dc:	4659      	mov	r1, fp
 80132de:	f7ec ff9f 	bl	8000220 <__aeabi_dsub>
 80132e2:	4632      	mov	r2, r6
 80132e4:	463b      	mov	r3, r7
 80132e6:	f7ec ff9b 	bl	8000220 <__aeabi_dsub>
 80132ea:	4602      	mov	r2, r0
 80132ec:	460b      	mov	r3, r1
 80132ee:	4640      	mov	r0, r8
 80132f0:	4649      	mov	r1, r9
 80132f2:	e7da      	b.n	80132aa <__kernel_cos+0xea>
 80132f4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8013330 <__kernel_cos+0x170>
 80132f8:	e7db      	b.n	80132b2 <__kernel_cos+0xf2>
 80132fa:	bf00      	nop
 80132fc:	f3af 8000 	nop.w
 8013300:	be8838d4 	.word	0xbe8838d4
 8013304:	bda8fae9 	.word	0xbda8fae9
 8013308:	bdb4b1c4 	.word	0xbdb4b1c4
 801330c:	3e21ee9e 	.word	0x3e21ee9e
 8013310:	809c52ad 	.word	0x809c52ad
 8013314:	3e927e4f 	.word	0x3e927e4f
 8013318:	19cb1590 	.word	0x19cb1590
 801331c:	3efa01a0 	.word	0x3efa01a0
 8013320:	16c15177 	.word	0x16c15177
 8013324:	3f56c16c 	.word	0x3f56c16c
 8013328:	5555554c 	.word	0x5555554c
 801332c:	3fa55555 	.word	0x3fa55555
 8013330:	00000000 	.word	0x00000000
 8013334:	3ff00000 	.word	0x3ff00000
 8013338:	3fe00000 	.word	0x3fe00000
 801333c:	3fd33332 	.word	0x3fd33332
 8013340:	3ff00000 	.word	0x3ff00000
 8013344:	3fe90000 	.word	0x3fe90000
 8013348:	3fd20000 	.word	0x3fd20000
 801334c:	00000000 	.word	0x00000000

08013350 <__kernel_sin>:
 8013350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013354:	ec55 4b10 	vmov	r4, r5, d0
 8013358:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801335c:	b085      	sub	sp, #20
 801335e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8013362:	ed8d 1b02 	vstr	d1, [sp, #8]
 8013366:	4680      	mov	r8, r0
 8013368:	d205      	bcs.n	8013376 <__kernel_sin+0x26>
 801336a:	4620      	mov	r0, r4
 801336c:	4629      	mov	r1, r5
 801336e:	f7ed fba9 	bl	8000ac4 <__aeabi_d2iz>
 8013372:	2800      	cmp	r0, #0
 8013374:	d052      	beq.n	801341c <__kernel_sin+0xcc>
 8013376:	4622      	mov	r2, r4
 8013378:	462b      	mov	r3, r5
 801337a:	4620      	mov	r0, r4
 801337c:	4629      	mov	r1, r5
 801337e:	f7ed f907 	bl	8000590 <__aeabi_dmul>
 8013382:	4682      	mov	sl, r0
 8013384:	468b      	mov	fp, r1
 8013386:	4602      	mov	r2, r0
 8013388:	460b      	mov	r3, r1
 801338a:	4620      	mov	r0, r4
 801338c:	4629      	mov	r1, r5
 801338e:	f7ed f8ff 	bl	8000590 <__aeabi_dmul>
 8013392:	a342      	add	r3, pc, #264	@ (adr r3, 801349c <__kernel_sin+0x14c>)
 8013394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013398:	e9cd 0100 	strd	r0, r1, [sp]
 801339c:	4650      	mov	r0, sl
 801339e:	4659      	mov	r1, fp
 80133a0:	f7ed f8f6 	bl	8000590 <__aeabi_dmul>
 80133a4:	a33f      	add	r3, pc, #252	@ (adr r3, 80134a4 <__kernel_sin+0x154>)
 80133a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133aa:	f7ec ff39 	bl	8000220 <__aeabi_dsub>
 80133ae:	4652      	mov	r2, sl
 80133b0:	465b      	mov	r3, fp
 80133b2:	f7ed f8ed 	bl	8000590 <__aeabi_dmul>
 80133b6:	a33d      	add	r3, pc, #244	@ (adr r3, 80134ac <__kernel_sin+0x15c>)
 80133b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133bc:	f7ec ff32 	bl	8000224 <__adddf3>
 80133c0:	4652      	mov	r2, sl
 80133c2:	465b      	mov	r3, fp
 80133c4:	f7ed f8e4 	bl	8000590 <__aeabi_dmul>
 80133c8:	a33a      	add	r3, pc, #232	@ (adr r3, 80134b4 <__kernel_sin+0x164>)
 80133ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ce:	f7ec ff27 	bl	8000220 <__aeabi_dsub>
 80133d2:	4652      	mov	r2, sl
 80133d4:	465b      	mov	r3, fp
 80133d6:	f7ed f8db 	bl	8000590 <__aeabi_dmul>
 80133da:	a338      	add	r3, pc, #224	@ (adr r3, 80134bc <__kernel_sin+0x16c>)
 80133dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133e0:	f7ec ff20 	bl	8000224 <__adddf3>
 80133e4:	4606      	mov	r6, r0
 80133e6:	460f      	mov	r7, r1
 80133e8:	f1b8 0f00 	cmp.w	r8, #0
 80133ec:	d11b      	bne.n	8013426 <__kernel_sin+0xd6>
 80133ee:	4602      	mov	r2, r0
 80133f0:	460b      	mov	r3, r1
 80133f2:	4650      	mov	r0, sl
 80133f4:	4659      	mov	r1, fp
 80133f6:	f7ed f8cb 	bl	8000590 <__aeabi_dmul>
 80133fa:	a325      	add	r3, pc, #148	@ (adr r3, 8013490 <__kernel_sin+0x140>)
 80133fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013400:	f7ec ff0e 	bl	8000220 <__aeabi_dsub>
 8013404:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013408:	f7ed f8c2 	bl	8000590 <__aeabi_dmul>
 801340c:	4602      	mov	r2, r0
 801340e:	460b      	mov	r3, r1
 8013410:	4620      	mov	r0, r4
 8013412:	4629      	mov	r1, r5
 8013414:	f7ec ff06 	bl	8000224 <__adddf3>
 8013418:	4604      	mov	r4, r0
 801341a:	460d      	mov	r5, r1
 801341c:	ec45 4b10 	vmov	d0, r4, r5
 8013420:	b005      	add	sp, #20
 8013422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801342a:	4b1b      	ldr	r3, [pc, #108]	@ (8013498 <__kernel_sin+0x148>)
 801342c:	2200      	movs	r2, #0
 801342e:	f7ed f8af 	bl	8000590 <__aeabi_dmul>
 8013432:	4632      	mov	r2, r6
 8013434:	4680      	mov	r8, r0
 8013436:	4689      	mov	r9, r1
 8013438:	463b      	mov	r3, r7
 801343a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801343e:	f7ed f8a7 	bl	8000590 <__aeabi_dmul>
 8013442:	4602      	mov	r2, r0
 8013444:	460b      	mov	r3, r1
 8013446:	4640      	mov	r0, r8
 8013448:	4649      	mov	r1, r9
 801344a:	f7ec fee9 	bl	8000220 <__aeabi_dsub>
 801344e:	4652      	mov	r2, sl
 8013450:	465b      	mov	r3, fp
 8013452:	f7ed f89d 	bl	8000590 <__aeabi_dmul>
 8013456:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801345a:	f7ec fee1 	bl	8000220 <__aeabi_dsub>
 801345e:	a30c      	add	r3, pc, #48	@ (adr r3, 8013490 <__kernel_sin+0x140>)
 8013460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013464:	4606      	mov	r6, r0
 8013466:	460f      	mov	r7, r1
 8013468:	e9dd 0100 	ldrd	r0, r1, [sp]
 801346c:	f7ed f890 	bl	8000590 <__aeabi_dmul>
 8013470:	4602      	mov	r2, r0
 8013472:	460b      	mov	r3, r1
 8013474:	4630      	mov	r0, r6
 8013476:	4639      	mov	r1, r7
 8013478:	f7ec fed4 	bl	8000224 <__adddf3>
 801347c:	4602      	mov	r2, r0
 801347e:	460b      	mov	r3, r1
 8013480:	4620      	mov	r0, r4
 8013482:	4629      	mov	r1, r5
 8013484:	f7ec fecc 	bl	8000220 <__aeabi_dsub>
 8013488:	e7c6      	b.n	8013418 <__kernel_sin+0xc8>
 801348a:	bf00      	nop
 801348c:	f3af 8000 	nop.w
 8013490:	55555549 	.word	0x55555549
 8013494:	3fc55555 	.word	0x3fc55555
 8013498:	3fe00000 	.word	0x3fe00000
 801349c:	5acfd57c 	.word	0x5acfd57c
 80134a0:	3de5d93a 	.word	0x3de5d93a
 80134a4:	8a2b9ceb 	.word	0x8a2b9ceb
 80134a8:	3e5ae5e6 	.word	0x3e5ae5e6
 80134ac:	57b1fe7d 	.word	0x57b1fe7d
 80134b0:	3ec71de3 	.word	0x3ec71de3
 80134b4:	19c161d5 	.word	0x19c161d5
 80134b8:	3f2a01a0 	.word	0x3f2a01a0
 80134bc:	1110f8a6 	.word	0x1110f8a6
 80134c0:	3f811111 	.word	0x3f811111
 80134c4:	00000000 	.word	0x00000000

080134c8 <__ieee754_rem_pio2>:
 80134c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134cc:	ec57 6b10 	vmov	r6, r7, d0
 80134d0:	4bc5      	ldr	r3, [pc, #788]	@ (80137e8 <__ieee754_rem_pio2+0x320>)
 80134d2:	b08d      	sub	sp, #52	@ 0x34
 80134d4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80134d8:	4598      	cmp	r8, r3
 80134da:	4604      	mov	r4, r0
 80134dc:	9704      	str	r7, [sp, #16]
 80134de:	d807      	bhi.n	80134f0 <__ieee754_rem_pio2+0x28>
 80134e0:	2200      	movs	r2, #0
 80134e2:	2300      	movs	r3, #0
 80134e4:	ed80 0b00 	vstr	d0, [r0]
 80134e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80134ec:	2500      	movs	r5, #0
 80134ee:	e028      	b.n	8013542 <__ieee754_rem_pio2+0x7a>
 80134f0:	4bbe      	ldr	r3, [pc, #760]	@ (80137ec <__ieee754_rem_pio2+0x324>)
 80134f2:	4598      	cmp	r8, r3
 80134f4:	d878      	bhi.n	80135e8 <__ieee754_rem_pio2+0x120>
 80134f6:	9b04      	ldr	r3, [sp, #16]
 80134f8:	4dbd      	ldr	r5, [pc, #756]	@ (80137f0 <__ieee754_rem_pio2+0x328>)
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	4630      	mov	r0, r6
 80134fe:	a3ac      	add	r3, pc, #688	@ (adr r3, 80137b0 <__ieee754_rem_pio2+0x2e8>)
 8013500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013504:	4639      	mov	r1, r7
 8013506:	dd38      	ble.n	801357a <__ieee754_rem_pio2+0xb2>
 8013508:	f7ec fe8a 	bl	8000220 <__aeabi_dsub>
 801350c:	45a8      	cmp	r8, r5
 801350e:	4606      	mov	r6, r0
 8013510:	460f      	mov	r7, r1
 8013512:	d01a      	beq.n	801354a <__ieee754_rem_pio2+0x82>
 8013514:	a3a8      	add	r3, pc, #672	@ (adr r3, 80137b8 <__ieee754_rem_pio2+0x2f0>)
 8013516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801351a:	f7ec fe81 	bl	8000220 <__aeabi_dsub>
 801351e:	4602      	mov	r2, r0
 8013520:	460b      	mov	r3, r1
 8013522:	4680      	mov	r8, r0
 8013524:	4689      	mov	r9, r1
 8013526:	4630      	mov	r0, r6
 8013528:	4639      	mov	r1, r7
 801352a:	f7ec fe79 	bl	8000220 <__aeabi_dsub>
 801352e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80137b8 <__ieee754_rem_pio2+0x2f0>)
 8013530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013534:	f7ec fe74 	bl	8000220 <__aeabi_dsub>
 8013538:	e9c4 8900 	strd	r8, r9, [r4]
 801353c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013540:	2501      	movs	r5, #1
 8013542:	4628      	mov	r0, r5
 8013544:	b00d      	add	sp, #52	@ 0x34
 8013546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801354a:	a39d      	add	r3, pc, #628	@ (adr r3, 80137c0 <__ieee754_rem_pio2+0x2f8>)
 801354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013550:	f7ec fe66 	bl	8000220 <__aeabi_dsub>
 8013554:	a39c      	add	r3, pc, #624	@ (adr r3, 80137c8 <__ieee754_rem_pio2+0x300>)
 8013556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801355a:	4606      	mov	r6, r0
 801355c:	460f      	mov	r7, r1
 801355e:	f7ec fe5f 	bl	8000220 <__aeabi_dsub>
 8013562:	4602      	mov	r2, r0
 8013564:	460b      	mov	r3, r1
 8013566:	4680      	mov	r8, r0
 8013568:	4689      	mov	r9, r1
 801356a:	4630      	mov	r0, r6
 801356c:	4639      	mov	r1, r7
 801356e:	f7ec fe57 	bl	8000220 <__aeabi_dsub>
 8013572:	a395      	add	r3, pc, #596	@ (adr r3, 80137c8 <__ieee754_rem_pio2+0x300>)
 8013574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013578:	e7dc      	b.n	8013534 <__ieee754_rem_pio2+0x6c>
 801357a:	f7ec fe53 	bl	8000224 <__adddf3>
 801357e:	45a8      	cmp	r8, r5
 8013580:	4606      	mov	r6, r0
 8013582:	460f      	mov	r7, r1
 8013584:	d018      	beq.n	80135b8 <__ieee754_rem_pio2+0xf0>
 8013586:	a38c      	add	r3, pc, #560	@ (adr r3, 80137b8 <__ieee754_rem_pio2+0x2f0>)
 8013588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801358c:	f7ec fe4a 	bl	8000224 <__adddf3>
 8013590:	4602      	mov	r2, r0
 8013592:	460b      	mov	r3, r1
 8013594:	4680      	mov	r8, r0
 8013596:	4689      	mov	r9, r1
 8013598:	4630      	mov	r0, r6
 801359a:	4639      	mov	r1, r7
 801359c:	f7ec fe40 	bl	8000220 <__aeabi_dsub>
 80135a0:	a385      	add	r3, pc, #532	@ (adr r3, 80137b8 <__ieee754_rem_pio2+0x2f0>)
 80135a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135a6:	f7ec fe3d 	bl	8000224 <__adddf3>
 80135aa:	f04f 35ff 	mov.w	r5, #4294967295
 80135ae:	e9c4 8900 	strd	r8, r9, [r4]
 80135b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80135b6:	e7c4      	b.n	8013542 <__ieee754_rem_pio2+0x7a>
 80135b8:	a381      	add	r3, pc, #516	@ (adr r3, 80137c0 <__ieee754_rem_pio2+0x2f8>)
 80135ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135be:	f7ec fe31 	bl	8000224 <__adddf3>
 80135c2:	a381      	add	r3, pc, #516	@ (adr r3, 80137c8 <__ieee754_rem_pio2+0x300>)
 80135c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135c8:	4606      	mov	r6, r0
 80135ca:	460f      	mov	r7, r1
 80135cc:	f7ec fe2a 	bl	8000224 <__adddf3>
 80135d0:	4602      	mov	r2, r0
 80135d2:	460b      	mov	r3, r1
 80135d4:	4680      	mov	r8, r0
 80135d6:	4689      	mov	r9, r1
 80135d8:	4630      	mov	r0, r6
 80135da:	4639      	mov	r1, r7
 80135dc:	f7ec fe20 	bl	8000220 <__aeabi_dsub>
 80135e0:	a379      	add	r3, pc, #484	@ (adr r3, 80137c8 <__ieee754_rem_pio2+0x300>)
 80135e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135e6:	e7de      	b.n	80135a6 <__ieee754_rem_pio2+0xde>
 80135e8:	4b82      	ldr	r3, [pc, #520]	@ (80137f4 <__ieee754_rem_pio2+0x32c>)
 80135ea:	4598      	cmp	r8, r3
 80135ec:	f200 80d1 	bhi.w	8013792 <__ieee754_rem_pio2+0x2ca>
 80135f0:	f000 f966 	bl	80138c0 <fabs>
 80135f4:	ec57 6b10 	vmov	r6, r7, d0
 80135f8:	a375      	add	r3, pc, #468	@ (adr r3, 80137d0 <__ieee754_rem_pio2+0x308>)
 80135fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135fe:	4630      	mov	r0, r6
 8013600:	4639      	mov	r1, r7
 8013602:	f7ec ffc5 	bl	8000590 <__aeabi_dmul>
 8013606:	4b7c      	ldr	r3, [pc, #496]	@ (80137f8 <__ieee754_rem_pio2+0x330>)
 8013608:	2200      	movs	r2, #0
 801360a:	f7ec fe0b 	bl	8000224 <__adddf3>
 801360e:	f7ed fa59 	bl	8000ac4 <__aeabi_d2iz>
 8013612:	4605      	mov	r5, r0
 8013614:	f7ec ff52 	bl	80004bc <__aeabi_i2d>
 8013618:	4602      	mov	r2, r0
 801361a:	460b      	mov	r3, r1
 801361c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013620:	a363      	add	r3, pc, #396	@ (adr r3, 80137b0 <__ieee754_rem_pio2+0x2e8>)
 8013622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013626:	f7ec ffb3 	bl	8000590 <__aeabi_dmul>
 801362a:	4602      	mov	r2, r0
 801362c:	460b      	mov	r3, r1
 801362e:	4630      	mov	r0, r6
 8013630:	4639      	mov	r1, r7
 8013632:	f7ec fdf5 	bl	8000220 <__aeabi_dsub>
 8013636:	a360      	add	r3, pc, #384	@ (adr r3, 80137b8 <__ieee754_rem_pio2+0x2f0>)
 8013638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801363c:	4682      	mov	sl, r0
 801363e:	468b      	mov	fp, r1
 8013640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013644:	f7ec ffa4 	bl	8000590 <__aeabi_dmul>
 8013648:	2d1f      	cmp	r5, #31
 801364a:	4606      	mov	r6, r0
 801364c:	460f      	mov	r7, r1
 801364e:	dc0c      	bgt.n	801366a <__ieee754_rem_pio2+0x1a2>
 8013650:	4b6a      	ldr	r3, [pc, #424]	@ (80137fc <__ieee754_rem_pio2+0x334>)
 8013652:	1e6a      	subs	r2, r5, #1
 8013654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013658:	4543      	cmp	r3, r8
 801365a:	d006      	beq.n	801366a <__ieee754_rem_pio2+0x1a2>
 801365c:	4632      	mov	r2, r6
 801365e:	463b      	mov	r3, r7
 8013660:	4650      	mov	r0, sl
 8013662:	4659      	mov	r1, fp
 8013664:	f7ec fddc 	bl	8000220 <__aeabi_dsub>
 8013668:	e00e      	b.n	8013688 <__ieee754_rem_pio2+0x1c0>
 801366a:	463b      	mov	r3, r7
 801366c:	4632      	mov	r2, r6
 801366e:	4650      	mov	r0, sl
 8013670:	4659      	mov	r1, fp
 8013672:	f7ec fdd5 	bl	8000220 <__aeabi_dsub>
 8013676:	ea4f 5328 	mov.w	r3, r8, asr #20
 801367a:	9305      	str	r3, [sp, #20]
 801367c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013680:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8013684:	2b10      	cmp	r3, #16
 8013686:	dc02      	bgt.n	801368e <__ieee754_rem_pio2+0x1c6>
 8013688:	e9c4 0100 	strd	r0, r1, [r4]
 801368c:	e039      	b.n	8013702 <__ieee754_rem_pio2+0x23a>
 801368e:	a34c      	add	r3, pc, #304	@ (adr r3, 80137c0 <__ieee754_rem_pio2+0x2f8>)
 8013690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013698:	f7ec ff7a 	bl	8000590 <__aeabi_dmul>
 801369c:	4606      	mov	r6, r0
 801369e:	460f      	mov	r7, r1
 80136a0:	4602      	mov	r2, r0
 80136a2:	460b      	mov	r3, r1
 80136a4:	4650      	mov	r0, sl
 80136a6:	4659      	mov	r1, fp
 80136a8:	f7ec fdba 	bl	8000220 <__aeabi_dsub>
 80136ac:	4602      	mov	r2, r0
 80136ae:	460b      	mov	r3, r1
 80136b0:	4680      	mov	r8, r0
 80136b2:	4689      	mov	r9, r1
 80136b4:	4650      	mov	r0, sl
 80136b6:	4659      	mov	r1, fp
 80136b8:	f7ec fdb2 	bl	8000220 <__aeabi_dsub>
 80136bc:	4632      	mov	r2, r6
 80136be:	463b      	mov	r3, r7
 80136c0:	f7ec fdae 	bl	8000220 <__aeabi_dsub>
 80136c4:	a340      	add	r3, pc, #256	@ (adr r3, 80137c8 <__ieee754_rem_pio2+0x300>)
 80136c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ca:	4606      	mov	r6, r0
 80136cc:	460f      	mov	r7, r1
 80136ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80136d2:	f7ec ff5d 	bl	8000590 <__aeabi_dmul>
 80136d6:	4632      	mov	r2, r6
 80136d8:	463b      	mov	r3, r7
 80136da:	f7ec fda1 	bl	8000220 <__aeabi_dsub>
 80136de:	4602      	mov	r2, r0
 80136e0:	460b      	mov	r3, r1
 80136e2:	4606      	mov	r6, r0
 80136e4:	460f      	mov	r7, r1
 80136e6:	4640      	mov	r0, r8
 80136e8:	4649      	mov	r1, r9
 80136ea:	f7ec fd99 	bl	8000220 <__aeabi_dsub>
 80136ee:	9a05      	ldr	r2, [sp, #20]
 80136f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80136f4:	1ad3      	subs	r3, r2, r3
 80136f6:	2b31      	cmp	r3, #49	@ 0x31
 80136f8:	dc20      	bgt.n	801373c <__ieee754_rem_pio2+0x274>
 80136fa:	e9c4 0100 	strd	r0, r1, [r4]
 80136fe:	46c2      	mov	sl, r8
 8013700:	46cb      	mov	fp, r9
 8013702:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013706:	4650      	mov	r0, sl
 8013708:	4642      	mov	r2, r8
 801370a:	464b      	mov	r3, r9
 801370c:	4659      	mov	r1, fp
 801370e:	f7ec fd87 	bl	8000220 <__aeabi_dsub>
 8013712:	463b      	mov	r3, r7
 8013714:	4632      	mov	r2, r6
 8013716:	f7ec fd83 	bl	8000220 <__aeabi_dsub>
 801371a:	9b04      	ldr	r3, [sp, #16]
 801371c:	2b00      	cmp	r3, #0
 801371e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013722:	f6bf af0e 	bge.w	8013542 <__ieee754_rem_pio2+0x7a>
 8013726:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801372a:	6063      	str	r3, [r4, #4]
 801372c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013730:	f8c4 8000 	str.w	r8, [r4]
 8013734:	60a0      	str	r0, [r4, #8]
 8013736:	60e3      	str	r3, [r4, #12]
 8013738:	426d      	negs	r5, r5
 801373a:	e702      	b.n	8013542 <__ieee754_rem_pio2+0x7a>
 801373c:	a326      	add	r3, pc, #152	@ (adr r3, 80137d8 <__ieee754_rem_pio2+0x310>)
 801373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013746:	f7ec ff23 	bl	8000590 <__aeabi_dmul>
 801374a:	4606      	mov	r6, r0
 801374c:	460f      	mov	r7, r1
 801374e:	4602      	mov	r2, r0
 8013750:	460b      	mov	r3, r1
 8013752:	4640      	mov	r0, r8
 8013754:	4649      	mov	r1, r9
 8013756:	f7ec fd63 	bl	8000220 <__aeabi_dsub>
 801375a:	4602      	mov	r2, r0
 801375c:	460b      	mov	r3, r1
 801375e:	4682      	mov	sl, r0
 8013760:	468b      	mov	fp, r1
 8013762:	4640      	mov	r0, r8
 8013764:	4649      	mov	r1, r9
 8013766:	f7ec fd5b 	bl	8000220 <__aeabi_dsub>
 801376a:	4632      	mov	r2, r6
 801376c:	463b      	mov	r3, r7
 801376e:	f7ec fd57 	bl	8000220 <__aeabi_dsub>
 8013772:	a31b      	add	r3, pc, #108	@ (adr r3, 80137e0 <__ieee754_rem_pio2+0x318>)
 8013774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013778:	4606      	mov	r6, r0
 801377a:	460f      	mov	r7, r1
 801377c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013780:	f7ec ff06 	bl	8000590 <__aeabi_dmul>
 8013784:	4632      	mov	r2, r6
 8013786:	463b      	mov	r3, r7
 8013788:	f7ec fd4a 	bl	8000220 <__aeabi_dsub>
 801378c:	4606      	mov	r6, r0
 801378e:	460f      	mov	r7, r1
 8013790:	e764      	b.n	801365c <__ieee754_rem_pio2+0x194>
 8013792:	4b1b      	ldr	r3, [pc, #108]	@ (8013800 <__ieee754_rem_pio2+0x338>)
 8013794:	4598      	cmp	r8, r3
 8013796:	d935      	bls.n	8013804 <__ieee754_rem_pio2+0x33c>
 8013798:	4632      	mov	r2, r6
 801379a:	463b      	mov	r3, r7
 801379c:	4630      	mov	r0, r6
 801379e:	4639      	mov	r1, r7
 80137a0:	f7ec fd3e 	bl	8000220 <__aeabi_dsub>
 80137a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80137a8:	e9c4 0100 	strd	r0, r1, [r4]
 80137ac:	e69e      	b.n	80134ec <__ieee754_rem_pio2+0x24>
 80137ae:	bf00      	nop
 80137b0:	54400000 	.word	0x54400000
 80137b4:	3ff921fb 	.word	0x3ff921fb
 80137b8:	1a626331 	.word	0x1a626331
 80137bc:	3dd0b461 	.word	0x3dd0b461
 80137c0:	1a600000 	.word	0x1a600000
 80137c4:	3dd0b461 	.word	0x3dd0b461
 80137c8:	2e037073 	.word	0x2e037073
 80137cc:	3ba3198a 	.word	0x3ba3198a
 80137d0:	6dc9c883 	.word	0x6dc9c883
 80137d4:	3fe45f30 	.word	0x3fe45f30
 80137d8:	2e000000 	.word	0x2e000000
 80137dc:	3ba3198a 	.word	0x3ba3198a
 80137e0:	252049c1 	.word	0x252049c1
 80137e4:	397b839a 	.word	0x397b839a
 80137e8:	3fe921fb 	.word	0x3fe921fb
 80137ec:	4002d97b 	.word	0x4002d97b
 80137f0:	3ff921fb 	.word	0x3ff921fb
 80137f4:	413921fb 	.word	0x413921fb
 80137f8:	3fe00000 	.word	0x3fe00000
 80137fc:	08014cf0 	.word	0x08014cf0
 8013800:	7fefffff 	.word	0x7fefffff
 8013804:	ea4f 5528 	mov.w	r5, r8, asr #20
 8013808:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801380c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8013810:	4630      	mov	r0, r6
 8013812:	460f      	mov	r7, r1
 8013814:	f7ed f956 	bl	8000ac4 <__aeabi_d2iz>
 8013818:	f7ec fe50 	bl	80004bc <__aeabi_i2d>
 801381c:	4602      	mov	r2, r0
 801381e:	460b      	mov	r3, r1
 8013820:	4630      	mov	r0, r6
 8013822:	4639      	mov	r1, r7
 8013824:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013828:	f7ec fcfa 	bl	8000220 <__aeabi_dsub>
 801382c:	4b22      	ldr	r3, [pc, #136]	@ (80138b8 <__ieee754_rem_pio2+0x3f0>)
 801382e:	2200      	movs	r2, #0
 8013830:	f7ec feae 	bl	8000590 <__aeabi_dmul>
 8013834:	460f      	mov	r7, r1
 8013836:	4606      	mov	r6, r0
 8013838:	f7ed f944 	bl	8000ac4 <__aeabi_d2iz>
 801383c:	f7ec fe3e 	bl	80004bc <__aeabi_i2d>
 8013840:	4602      	mov	r2, r0
 8013842:	460b      	mov	r3, r1
 8013844:	4630      	mov	r0, r6
 8013846:	4639      	mov	r1, r7
 8013848:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801384c:	f7ec fce8 	bl	8000220 <__aeabi_dsub>
 8013850:	4b19      	ldr	r3, [pc, #100]	@ (80138b8 <__ieee754_rem_pio2+0x3f0>)
 8013852:	2200      	movs	r2, #0
 8013854:	f7ec fe9c 	bl	8000590 <__aeabi_dmul>
 8013858:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801385c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8013860:	f04f 0803 	mov.w	r8, #3
 8013864:	2600      	movs	r6, #0
 8013866:	2700      	movs	r7, #0
 8013868:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801386c:	4632      	mov	r2, r6
 801386e:	463b      	mov	r3, r7
 8013870:	46c2      	mov	sl, r8
 8013872:	f108 38ff 	add.w	r8, r8, #4294967295
 8013876:	f7ed f8f3 	bl	8000a60 <__aeabi_dcmpeq>
 801387a:	2800      	cmp	r0, #0
 801387c:	d1f4      	bne.n	8013868 <__ieee754_rem_pio2+0x3a0>
 801387e:	4b0f      	ldr	r3, [pc, #60]	@ (80138bc <__ieee754_rem_pio2+0x3f4>)
 8013880:	9301      	str	r3, [sp, #4]
 8013882:	2302      	movs	r3, #2
 8013884:	9300      	str	r3, [sp, #0]
 8013886:	462a      	mov	r2, r5
 8013888:	4653      	mov	r3, sl
 801388a:	4621      	mov	r1, r4
 801388c:	a806      	add	r0, sp, #24
 801388e:	f000 fb5b 	bl	8013f48 <__kernel_rem_pio2>
 8013892:	9b04      	ldr	r3, [sp, #16]
 8013894:	2b00      	cmp	r3, #0
 8013896:	4605      	mov	r5, r0
 8013898:	f6bf ae53 	bge.w	8013542 <__ieee754_rem_pio2+0x7a>
 801389c:	e9d4 2100 	ldrd	r2, r1, [r4]
 80138a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80138a4:	e9c4 2300 	strd	r2, r3, [r4]
 80138a8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80138ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80138b0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80138b4:	e740      	b.n	8013738 <__ieee754_rem_pio2+0x270>
 80138b6:	bf00      	nop
 80138b8:	41700000 	.word	0x41700000
 80138bc:	08014d70 	.word	0x08014d70

080138c0 <fabs>:
 80138c0:	ec51 0b10 	vmov	r0, r1, d0
 80138c4:	4602      	mov	r2, r0
 80138c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80138ca:	ec43 2b10 	vmov	d0, r2, r3
 80138ce:	4770      	bx	lr

080138d0 <__kernel_cosf>:
 80138d0:	ee10 3a10 	vmov	r3, s0
 80138d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80138d8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80138dc:	eef0 6a40 	vmov.f32	s13, s0
 80138e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80138e4:	d204      	bcs.n	80138f0 <__kernel_cosf+0x20>
 80138e6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80138ea:	ee17 2a90 	vmov	r2, s15
 80138ee:	b342      	cbz	r2, 8013942 <__kernel_cosf+0x72>
 80138f0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80138f4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8013960 <__kernel_cosf+0x90>
 80138f8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8013964 <__kernel_cosf+0x94>
 80138fc:	4a1a      	ldr	r2, [pc, #104]	@ (8013968 <__kernel_cosf+0x98>)
 80138fe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013902:	4293      	cmp	r3, r2
 8013904:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801396c <__kernel_cosf+0x9c>
 8013908:	eee6 7a07 	vfma.f32	s15, s12, s14
 801390c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8013970 <__kernel_cosf+0xa0>
 8013910:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013914:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8013974 <__kernel_cosf+0xa4>
 8013918:	eee6 7a07 	vfma.f32	s15, s12, s14
 801391c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8013978 <__kernel_cosf+0xa8>
 8013920:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013924:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8013928:	ee26 6a07 	vmul.f32	s12, s12, s14
 801392c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013930:	eee7 0a06 	vfma.f32	s1, s14, s12
 8013934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013938:	d804      	bhi.n	8013944 <__kernel_cosf+0x74>
 801393a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801393e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013942:	4770      	bx	lr
 8013944:	4a0d      	ldr	r2, [pc, #52]	@ (801397c <__kernel_cosf+0xac>)
 8013946:	4293      	cmp	r3, r2
 8013948:	bf9a      	itte	ls
 801394a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801394e:	ee07 3a10 	vmovls	s14, r3
 8013952:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8013956:	ee30 0a47 	vsub.f32	s0, s0, s14
 801395a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801395e:	e7ec      	b.n	801393a <__kernel_cosf+0x6a>
 8013960:	ad47d74e 	.word	0xad47d74e
 8013964:	310f74f6 	.word	0x310f74f6
 8013968:	3e999999 	.word	0x3e999999
 801396c:	b493f27c 	.word	0xb493f27c
 8013970:	37d00d01 	.word	0x37d00d01
 8013974:	bab60b61 	.word	0xbab60b61
 8013978:	3d2aaaab 	.word	0x3d2aaaab
 801397c:	3f480000 	.word	0x3f480000

08013980 <__kernel_sinf>:
 8013980:	ee10 3a10 	vmov	r3, s0
 8013984:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013988:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801398c:	d204      	bcs.n	8013998 <__kernel_sinf+0x18>
 801398e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013992:	ee17 3a90 	vmov	r3, s15
 8013996:	b35b      	cbz	r3, 80139f0 <__kernel_sinf+0x70>
 8013998:	ee20 7a00 	vmul.f32	s14, s0, s0
 801399c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80139f4 <__kernel_sinf+0x74>
 80139a0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80139f8 <__kernel_sinf+0x78>
 80139a4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80139a8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80139fc <__kernel_sinf+0x7c>
 80139ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 80139b0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8013a00 <__kernel_sinf+0x80>
 80139b4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80139b8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8013a04 <__kernel_sinf+0x84>
 80139bc:	ee60 6a07 	vmul.f32	s13, s0, s14
 80139c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80139c4:	b930      	cbnz	r0, 80139d4 <__kernel_sinf+0x54>
 80139c6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8013a08 <__kernel_sinf+0x88>
 80139ca:	eea7 6a27 	vfma.f32	s12, s14, s15
 80139ce:	eea6 0a26 	vfma.f32	s0, s12, s13
 80139d2:	4770      	bx	lr
 80139d4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80139d8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80139dc:	eee0 7a86 	vfma.f32	s15, s1, s12
 80139e0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80139e4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8013a0c <__kernel_sinf+0x8c>
 80139e8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80139ec:	ee30 0a60 	vsub.f32	s0, s0, s1
 80139f0:	4770      	bx	lr
 80139f2:	bf00      	nop
 80139f4:	2f2ec9d3 	.word	0x2f2ec9d3
 80139f8:	b2d72f34 	.word	0xb2d72f34
 80139fc:	3638ef1b 	.word	0x3638ef1b
 8013a00:	b9500d01 	.word	0xb9500d01
 8013a04:	3c088889 	.word	0x3c088889
 8013a08:	be2aaaab 	.word	0xbe2aaaab
 8013a0c:	3e2aaaab 	.word	0x3e2aaaab

08013a10 <__ieee754_fmodf>:
 8013a10:	b570      	push	{r4, r5, r6, lr}
 8013a12:	ee10 6a90 	vmov	r6, s1
 8013a16:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013a1a:	1e5a      	subs	r2, r3, #1
 8013a1c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8013a20:	d206      	bcs.n	8013a30 <__ieee754_fmodf+0x20>
 8013a22:	ee10 4a10 	vmov	r4, s0
 8013a26:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 8013a2a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8013a2e:	d304      	bcc.n	8013a3a <__ieee754_fmodf+0x2a>
 8013a30:	ee60 0a20 	vmul.f32	s1, s0, s1
 8013a34:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8013a38:	bd70      	pop	{r4, r5, r6, pc}
 8013a3a:	4299      	cmp	r1, r3
 8013a3c:	dbfc      	blt.n	8013a38 <__ieee754_fmodf+0x28>
 8013a3e:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 8013a42:	d105      	bne.n	8013a50 <__ieee754_fmodf+0x40>
 8013a44:	4b32      	ldr	r3, [pc, #200]	@ (8013b10 <__ieee754_fmodf+0x100>)
 8013a46:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 8013a4a:	ed93 0a00 	vldr	s0, [r3]
 8013a4e:	e7f3      	b.n	8013a38 <__ieee754_fmodf+0x28>
 8013a50:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8013a54:	d146      	bne.n	8013ae4 <__ieee754_fmodf+0xd4>
 8013a56:	020a      	lsls	r2, r1, #8
 8013a58:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 8013a5c:	2a00      	cmp	r2, #0
 8013a5e:	dc3e      	bgt.n	8013ade <__ieee754_fmodf+0xce>
 8013a60:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8013a64:	bf01      	itttt	eq
 8013a66:	021a      	lsleq	r2, r3, #8
 8013a68:	fab2 f282 	clzeq	r2, r2
 8013a6c:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 8013a70:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 8013a74:	bf16      	itet	ne
 8013a76:	15da      	asrne	r2, r3, #23
 8013a78:	3282      	addeq	r2, #130	@ 0x82
 8013a7a:	3a7f      	subne	r2, #127	@ 0x7f
 8013a7c:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 8013a80:	bfbb      	ittet	lt
 8013a82:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8013a86:	1a24      	sublt	r4, r4, r0
 8013a88:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8013a8c:	40a1      	lsllt	r1, r4
 8013a8e:	bfa8      	it	ge
 8013a90:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 8013a94:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8013a98:	bfb5      	itete	lt
 8013a9a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8013a9e:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 8013aa2:	1aa4      	sublt	r4, r4, r2
 8013aa4:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 8013aa8:	bfb8      	it	lt
 8013aaa:	fa03 f404 	lsllt.w	r4, r3, r4
 8013aae:	1a80      	subs	r0, r0, r2
 8013ab0:	1b0b      	subs	r3, r1, r4
 8013ab2:	b9d0      	cbnz	r0, 8013aea <__ieee754_fmodf+0xda>
 8013ab4:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8013ab8:	bf28      	it	cs
 8013aba:	460b      	movcs	r3, r1
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d0c1      	beq.n	8013a44 <__ieee754_fmodf+0x34>
 8013ac0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013ac4:	db19      	blt.n	8013afa <__ieee754_fmodf+0xea>
 8013ac6:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8013aca:	db19      	blt.n	8013b00 <__ieee754_fmodf+0xf0>
 8013acc:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8013ad0:	327f      	adds	r2, #127	@ 0x7f
 8013ad2:	432b      	orrs	r3, r5
 8013ad4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8013ad8:	ee00 3a10 	vmov	s0, r3
 8013adc:	e7ac      	b.n	8013a38 <__ieee754_fmodf+0x28>
 8013ade:	3801      	subs	r0, #1
 8013ae0:	0052      	lsls	r2, r2, #1
 8013ae2:	e7bb      	b.n	8013a5c <__ieee754_fmodf+0x4c>
 8013ae4:	15c8      	asrs	r0, r1, #23
 8013ae6:	387f      	subs	r0, #127	@ 0x7f
 8013ae8:	e7ba      	b.n	8013a60 <__ieee754_fmodf+0x50>
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	da02      	bge.n	8013af4 <__ieee754_fmodf+0xe4>
 8013aee:	0049      	lsls	r1, r1, #1
 8013af0:	3801      	subs	r0, #1
 8013af2:	e7dd      	b.n	8013ab0 <__ieee754_fmodf+0xa0>
 8013af4:	d0a6      	beq.n	8013a44 <__ieee754_fmodf+0x34>
 8013af6:	0059      	lsls	r1, r3, #1
 8013af8:	e7fa      	b.n	8013af0 <__ieee754_fmodf+0xe0>
 8013afa:	005b      	lsls	r3, r3, #1
 8013afc:	3a01      	subs	r2, #1
 8013afe:	e7df      	b.n	8013ac0 <__ieee754_fmodf+0xb0>
 8013b00:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 8013b04:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8013b08:	3282      	adds	r2, #130	@ 0x82
 8013b0a:	4113      	asrs	r3, r2
 8013b0c:	432b      	orrs	r3, r5
 8013b0e:	e7e3      	b.n	8013ad8 <__ieee754_fmodf+0xc8>
 8013b10:	08014e78 	.word	0x08014e78

08013b14 <__ieee754_rem_pio2f>:
 8013b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b16:	ee10 6a10 	vmov	r6, s0
 8013b1a:	4b88      	ldr	r3, [pc, #544]	@ (8013d3c <__ieee754_rem_pio2f+0x228>)
 8013b1c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8013b20:	429d      	cmp	r5, r3
 8013b22:	b087      	sub	sp, #28
 8013b24:	4604      	mov	r4, r0
 8013b26:	d805      	bhi.n	8013b34 <__ieee754_rem_pio2f+0x20>
 8013b28:	2300      	movs	r3, #0
 8013b2a:	ed80 0a00 	vstr	s0, [r0]
 8013b2e:	6043      	str	r3, [r0, #4]
 8013b30:	2000      	movs	r0, #0
 8013b32:	e022      	b.n	8013b7a <__ieee754_rem_pio2f+0x66>
 8013b34:	4b82      	ldr	r3, [pc, #520]	@ (8013d40 <__ieee754_rem_pio2f+0x22c>)
 8013b36:	429d      	cmp	r5, r3
 8013b38:	d83a      	bhi.n	8013bb0 <__ieee754_rem_pio2f+0x9c>
 8013b3a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013b3e:	2e00      	cmp	r6, #0
 8013b40:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8013d44 <__ieee754_rem_pio2f+0x230>
 8013b44:	4a80      	ldr	r2, [pc, #512]	@ (8013d48 <__ieee754_rem_pio2f+0x234>)
 8013b46:	f023 030f 	bic.w	r3, r3, #15
 8013b4a:	dd18      	ble.n	8013b7e <__ieee754_rem_pio2f+0x6a>
 8013b4c:	4293      	cmp	r3, r2
 8013b4e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8013b52:	bf09      	itett	eq
 8013b54:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8013d4c <__ieee754_rem_pio2f+0x238>
 8013b58:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8013d50 <__ieee754_rem_pio2f+0x23c>
 8013b5c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8013d54 <__ieee754_rem_pio2f+0x240>
 8013b60:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8013b64:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8013b68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013b6c:	ed80 7a00 	vstr	s14, [r0]
 8013b70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013b74:	edc0 7a01 	vstr	s15, [r0, #4]
 8013b78:	2001      	movs	r0, #1
 8013b7a:	b007      	add	sp, #28
 8013b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b7e:	4293      	cmp	r3, r2
 8013b80:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013b84:	bf09      	itett	eq
 8013b86:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8013d4c <__ieee754_rem_pio2f+0x238>
 8013b8a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8013d50 <__ieee754_rem_pio2f+0x23c>
 8013b8e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8013d54 <__ieee754_rem_pio2f+0x240>
 8013b92:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8013b96:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013b9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013b9e:	ed80 7a00 	vstr	s14, [r0]
 8013ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ba6:	edc0 7a01 	vstr	s15, [r0, #4]
 8013baa:	f04f 30ff 	mov.w	r0, #4294967295
 8013bae:	e7e4      	b.n	8013b7a <__ieee754_rem_pio2f+0x66>
 8013bb0:	4b69      	ldr	r3, [pc, #420]	@ (8013d58 <__ieee754_rem_pio2f+0x244>)
 8013bb2:	429d      	cmp	r5, r3
 8013bb4:	d873      	bhi.n	8013c9e <__ieee754_rem_pio2f+0x18a>
 8013bb6:	f000 f8dd 	bl	8013d74 <fabsf>
 8013bba:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8013d5c <__ieee754_rem_pio2f+0x248>
 8013bbe:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013bc2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013bc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013bca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013bce:	ee17 0a90 	vmov	r0, s15
 8013bd2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8013d44 <__ieee754_rem_pio2f+0x230>
 8013bd6:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013bda:	281f      	cmp	r0, #31
 8013bdc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8013d50 <__ieee754_rem_pio2f+0x23c>
 8013be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013be4:	eeb1 6a47 	vneg.f32	s12, s14
 8013be8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013bec:	ee16 1a90 	vmov	r1, s13
 8013bf0:	dc09      	bgt.n	8013c06 <__ieee754_rem_pio2f+0xf2>
 8013bf2:	4a5b      	ldr	r2, [pc, #364]	@ (8013d60 <__ieee754_rem_pio2f+0x24c>)
 8013bf4:	1e47      	subs	r7, r0, #1
 8013bf6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013bfa:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8013bfe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8013c02:	4293      	cmp	r3, r2
 8013c04:	d107      	bne.n	8013c16 <__ieee754_rem_pio2f+0x102>
 8013c06:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8013c0a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8013c0e:	2a08      	cmp	r2, #8
 8013c10:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8013c14:	dc14      	bgt.n	8013c40 <__ieee754_rem_pio2f+0x12c>
 8013c16:	6021      	str	r1, [r4, #0]
 8013c18:	ed94 7a00 	vldr	s14, [r4]
 8013c1c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013c20:	2e00      	cmp	r6, #0
 8013c22:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013c26:	ed84 0a01 	vstr	s0, [r4, #4]
 8013c2a:	daa6      	bge.n	8013b7a <__ieee754_rem_pio2f+0x66>
 8013c2c:	eeb1 7a47 	vneg.f32	s14, s14
 8013c30:	eeb1 0a40 	vneg.f32	s0, s0
 8013c34:	ed84 7a00 	vstr	s14, [r4]
 8013c38:	ed84 0a01 	vstr	s0, [r4, #4]
 8013c3c:	4240      	negs	r0, r0
 8013c3e:	e79c      	b.n	8013b7a <__ieee754_rem_pio2f+0x66>
 8013c40:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8013d4c <__ieee754_rem_pio2f+0x238>
 8013c44:	eef0 6a40 	vmov.f32	s13, s0
 8013c48:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013c4c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8013c50:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013c54:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8013d54 <__ieee754_rem_pio2f+0x240>
 8013c58:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8013c5c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013c60:	ee15 2a90 	vmov	r2, s11
 8013c64:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013c68:	1a5b      	subs	r3, r3, r1
 8013c6a:	2b19      	cmp	r3, #25
 8013c6c:	dc04      	bgt.n	8013c78 <__ieee754_rem_pio2f+0x164>
 8013c6e:	edc4 5a00 	vstr	s11, [r4]
 8013c72:	eeb0 0a66 	vmov.f32	s0, s13
 8013c76:	e7cf      	b.n	8013c18 <__ieee754_rem_pio2f+0x104>
 8013c78:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8013d64 <__ieee754_rem_pio2f+0x250>
 8013c7c:	eeb0 0a66 	vmov.f32	s0, s13
 8013c80:	eea6 0a25 	vfma.f32	s0, s12, s11
 8013c84:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013c88:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8013d68 <__ieee754_rem_pio2f+0x254>
 8013c8c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013c90:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013c94:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013c98:	ed84 7a00 	vstr	s14, [r4]
 8013c9c:	e7bc      	b.n	8013c18 <__ieee754_rem_pio2f+0x104>
 8013c9e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8013ca2:	d306      	bcc.n	8013cb2 <__ieee754_rem_pio2f+0x19e>
 8013ca4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013ca8:	edc0 7a01 	vstr	s15, [r0, #4]
 8013cac:	edc0 7a00 	vstr	s15, [r0]
 8013cb0:	e73e      	b.n	8013b30 <__ieee754_rem_pio2f+0x1c>
 8013cb2:	15ea      	asrs	r2, r5, #23
 8013cb4:	3a86      	subs	r2, #134	@ 0x86
 8013cb6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013cba:	ee07 3a90 	vmov	s15, r3
 8013cbe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013cc2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8013d6c <__ieee754_rem_pio2f+0x258>
 8013cc6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013cca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013cce:	ed8d 7a03 	vstr	s14, [sp, #12]
 8013cd2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013cd6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013cda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013cde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013ce2:	ed8d 7a04 	vstr	s14, [sp, #16]
 8013ce6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013cea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cf2:	edcd 7a05 	vstr	s15, [sp, #20]
 8013cf6:	d11e      	bne.n	8013d36 <__ieee754_rem_pio2f+0x222>
 8013cf8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d00:	bf0c      	ite	eq
 8013d02:	2301      	moveq	r3, #1
 8013d04:	2302      	movne	r3, #2
 8013d06:	491a      	ldr	r1, [pc, #104]	@ (8013d70 <__ieee754_rem_pio2f+0x25c>)
 8013d08:	9101      	str	r1, [sp, #4]
 8013d0a:	2102      	movs	r1, #2
 8013d0c:	9100      	str	r1, [sp, #0]
 8013d0e:	a803      	add	r0, sp, #12
 8013d10:	4621      	mov	r1, r4
 8013d12:	f000 fc69 	bl	80145e8 <__kernel_rem_pio2f>
 8013d16:	2e00      	cmp	r6, #0
 8013d18:	f6bf af2f 	bge.w	8013b7a <__ieee754_rem_pio2f+0x66>
 8013d1c:	edd4 7a00 	vldr	s15, [r4]
 8013d20:	eef1 7a67 	vneg.f32	s15, s15
 8013d24:	edc4 7a00 	vstr	s15, [r4]
 8013d28:	edd4 7a01 	vldr	s15, [r4, #4]
 8013d2c:	eef1 7a67 	vneg.f32	s15, s15
 8013d30:	edc4 7a01 	vstr	s15, [r4, #4]
 8013d34:	e782      	b.n	8013c3c <__ieee754_rem_pio2f+0x128>
 8013d36:	2303      	movs	r3, #3
 8013d38:	e7e5      	b.n	8013d06 <__ieee754_rem_pio2f+0x1f2>
 8013d3a:	bf00      	nop
 8013d3c:	3f490fd8 	.word	0x3f490fd8
 8013d40:	4016cbe3 	.word	0x4016cbe3
 8013d44:	3fc90f80 	.word	0x3fc90f80
 8013d48:	3fc90fd0 	.word	0x3fc90fd0
 8013d4c:	37354400 	.word	0x37354400
 8013d50:	37354443 	.word	0x37354443
 8013d54:	2e85a308 	.word	0x2e85a308
 8013d58:	43490f80 	.word	0x43490f80
 8013d5c:	3f22f984 	.word	0x3f22f984
 8013d60:	08014e80 	.word	0x08014e80
 8013d64:	2e85a300 	.word	0x2e85a300
 8013d68:	248d3132 	.word	0x248d3132
 8013d6c:	43800000 	.word	0x43800000
 8013d70:	08014f00 	.word	0x08014f00

08013d74 <fabsf>:
 8013d74:	ee10 3a10 	vmov	r3, s0
 8013d78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013d7c:	ee00 3a10 	vmov	s0, r3
 8013d80:	4770      	bx	lr
 8013d82:	0000      	movs	r0, r0
 8013d84:	0000      	movs	r0, r0
	...

08013d88 <scalbn>:
 8013d88:	b570      	push	{r4, r5, r6, lr}
 8013d8a:	ec55 4b10 	vmov	r4, r5, d0
 8013d8e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013d92:	4606      	mov	r6, r0
 8013d94:	462b      	mov	r3, r5
 8013d96:	b991      	cbnz	r1, 8013dbe <scalbn+0x36>
 8013d98:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013d9c:	4323      	orrs	r3, r4
 8013d9e:	d03b      	beq.n	8013e18 <scalbn+0x90>
 8013da0:	4b33      	ldr	r3, [pc, #204]	@ (8013e70 <scalbn+0xe8>)
 8013da2:	4620      	mov	r0, r4
 8013da4:	4629      	mov	r1, r5
 8013da6:	2200      	movs	r2, #0
 8013da8:	f7ec fbf2 	bl	8000590 <__aeabi_dmul>
 8013dac:	4b31      	ldr	r3, [pc, #196]	@ (8013e74 <scalbn+0xec>)
 8013dae:	429e      	cmp	r6, r3
 8013db0:	4604      	mov	r4, r0
 8013db2:	460d      	mov	r5, r1
 8013db4:	da0f      	bge.n	8013dd6 <scalbn+0x4e>
 8013db6:	a326      	add	r3, pc, #152	@ (adr r3, 8013e50 <scalbn+0xc8>)
 8013db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dbc:	e01e      	b.n	8013dfc <scalbn+0x74>
 8013dbe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8013dc2:	4291      	cmp	r1, r2
 8013dc4:	d10b      	bne.n	8013dde <scalbn+0x56>
 8013dc6:	4622      	mov	r2, r4
 8013dc8:	4620      	mov	r0, r4
 8013dca:	4629      	mov	r1, r5
 8013dcc:	f7ec fa2a 	bl	8000224 <__adddf3>
 8013dd0:	4604      	mov	r4, r0
 8013dd2:	460d      	mov	r5, r1
 8013dd4:	e020      	b.n	8013e18 <scalbn+0x90>
 8013dd6:	460b      	mov	r3, r1
 8013dd8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013ddc:	3936      	subs	r1, #54	@ 0x36
 8013dde:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8013de2:	4296      	cmp	r6, r2
 8013de4:	dd0d      	ble.n	8013e02 <scalbn+0x7a>
 8013de6:	2d00      	cmp	r5, #0
 8013de8:	a11b      	add	r1, pc, #108	@ (adr r1, 8013e58 <scalbn+0xd0>)
 8013dea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013dee:	da02      	bge.n	8013df6 <scalbn+0x6e>
 8013df0:	a11b      	add	r1, pc, #108	@ (adr r1, 8013e60 <scalbn+0xd8>)
 8013df2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013df6:	a318      	add	r3, pc, #96	@ (adr r3, 8013e58 <scalbn+0xd0>)
 8013df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dfc:	f7ec fbc8 	bl	8000590 <__aeabi_dmul>
 8013e00:	e7e6      	b.n	8013dd0 <scalbn+0x48>
 8013e02:	1872      	adds	r2, r6, r1
 8013e04:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013e08:	428a      	cmp	r2, r1
 8013e0a:	dcec      	bgt.n	8013de6 <scalbn+0x5e>
 8013e0c:	2a00      	cmp	r2, #0
 8013e0e:	dd06      	ble.n	8013e1e <scalbn+0x96>
 8013e10:	f36f 531e 	bfc	r3, #20, #11
 8013e14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013e18:	ec45 4b10 	vmov	d0, r4, r5
 8013e1c:	bd70      	pop	{r4, r5, r6, pc}
 8013e1e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8013e22:	da08      	bge.n	8013e36 <scalbn+0xae>
 8013e24:	2d00      	cmp	r5, #0
 8013e26:	a10a      	add	r1, pc, #40	@ (adr r1, 8013e50 <scalbn+0xc8>)
 8013e28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e2c:	dac3      	bge.n	8013db6 <scalbn+0x2e>
 8013e2e:	a10e      	add	r1, pc, #56	@ (adr r1, 8013e68 <scalbn+0xe0>)
 8013e30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e34:	e7bf      	b.n	8013db6 <scalbn+0x2e>
 8013e36:	3236      	adds	r2, #54	@ 0x36
 8013e38:	f36f 531e 	bfc	r3, #20, #11
 8013e3c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013e40:	4620      	mov	r0, r4
 8013e42:	4b0d      	ldr	r3, [pc, #52]	@ (8013e78 <scalbn+0xf0>)
 8013e44:	4629      	mov	r1, r5
 8013e46:	2200      	movs	r2, #0
 8013e48:	e7d8      	b.n	8013dfc <scalbn+0x74>
 8013e4a:	bf00      	nop
 8013e4c:	f3af 8000 	nop.w
 8013e50:	c2f8f359 	.word	0xc2f8f359
 8013e54:	01a56e1f 	.word	0x01a56e1f
 8013e58:	8800759c 	.word	0x8800759c
 8013e5c:	7e37e43c 	.word	0x7e37e43c
 8013e60:	8800759c 	.word	0x8800759c
 8013e64:	fe37e43c 	.word	0xfe37e43c
 8013e68:	c2f8f359 	.word	0xc2f8f359
 8013e6c:	81a56e1f 	.word	0x81a56e1f
 8013e70:	43500000 	.word	0x43500000
 8013e74:	ffff3cb0 	.word	0xffff3cb0
 8013e78:	3c900000 	.word	0x3c900000

08013e7c <scalbnf>:
 8013e7c:	ee10 3a10 	vmov	r3, s0
 8013e80:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8013e84:	d02b      	beq.n	8013ede <scalbnf+0x62>
 8013e86:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8013e8a:	d302      	bcc.n	8013e92 <scalbnf+0x16>
 8013e8c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013e90:	4770      	bx	lr
 8013e92:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8013e96:	d123      	bne.n	8013ee0 <scalbnf+0x64>
 8013e98:	4b24      	ldr	r3, [pc, #144]	@ (8013f2c <scalbnf+0xb0>)
 8013e9a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8013f30 <scalbnf+0xb4>
 8013e9e:	4298      	cmp	r0, r3
 8013ea0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013ea4:	db17      	blt.n	8013ed6 <scalbnf+0x5a>
 8013ea6:	ee10 3a10 	vmov	r3, s0
 8013eaa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013eae:	3a19      	subs	r2, #25
 8013eb0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8013eb4:	4288      	cmp	r0, r1
 8013eb6:	dd15      	ble.n	8013ee4 <scalbnf+0x68>
 8013eb8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8013f34 <scalbnf+0xb8>
 8013ebc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8013f38 <scalbnf+0xbc>
 8013ec0:	ee10 3a10 	vmov	r3, s0
 8013ec4:	eeb0 7a67 	vmov.f32	s14, s15
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	bfb8      	it	lt
 8013ecc:	eef0 7a66 	vmovlt.f32	s15, s13
 8013ed0:	ee27 0a87 	vmul.f32	s0, s15, s14
 8013ed4:	4770      	bx	lr
 8013ed6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013f3c <scalbnf+0xc0>
 8013eda:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013ede:	4770      	bx	lr
 8013ee0:	0dd2      	lsrs	r2, r2, #23
 8013ee2:	e7e5      	b.n	8013eb0 <scalbnf+0x34>
 8013ee4:	4410      	add	r0, r2
 8013ee6:	28fe      	cmp	r0, #254	@ 0xfe
 8013ee8:	dce6      	bgt.n	8013eb8 <scalbnf+0x3c>
 8013eea:	2800      	cmp	r0, #0
 8013eec:	dd06      	ble.n	8013efc <scalbnf+0x80>
 8013eee:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013ef2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013ef6:	ee00 3a10 	vmov	s0, r3
 8013efa:	4770      	bx	lr
 8013efc:	f110 0f16 	cmn.w	r0, #22
 8013f00:	da09      	bge.n	8013f16 <scalbnf+0x9a>
 8013f02:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8013f3c <scalbnf+0xc0>
 8013f06:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8013f40 <scalbnf+0xc4>
 8013f0a:	ee10 3a10 	vmov	r3, s0
 8013f0e:	eeb0 7a67 	vmov.f32	s14, s15
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	e7d9      	b.n	8013eca <scalbnf+0x4e>
 8013f16:	3019      	adds	r0, #25
 8013f18:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013f1c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013f20:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8013f44 <scalbnf+0xc8>
 8013f24:	ee07 3a90 	vmov	s15, r3
 8013f28:	e7d7      	b.n	8013eda <scalbnf+0x5e>
 8013f2a:	bf00      	nop
 8013f2c:	ffff3cb0 	.word	0xffff3cb0
 8013f30:	4c000000 	.word	0x4c000000
 8013f34:	7149f2ca 	.word	0x7149f2ca
 8013f38:	f149f2ca 	.word	0xf149f2ca
 8013f3c:	0da24260 	.word	0x0da24260
 8013f40:	8da24260 	.word	0x8da24260
 8013f44:	33000000 	.word	0x33000000

08013f48 <__kernel_rem_pio2>:
 8013f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f4c:	ed2d 8b02 	vpush	{d8}
 8013f50:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8013f54:	f112 0f14 	cmn.w	r2, #20
 8013f58:	9306      	str	r3, [sp, #24]
 8013f5a:	9104      	str	r1, [sp, #16]
 8013f5c:	4bc2      	ldr	r3, [pc, #776]	@ (8014268 <__kernel_rem_pio2+0x320>)
 8013f5e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8013f60:	9008      	str	r0, [sp, #32]
 8013f62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013f66:	9300      	str	r3, [sp, #0]
 8013f68:	9b06      	ldr	r3, [sp, #24]
 8013f6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8013f6e:	bfa8      	it	ge
 8013f70:	1ed4      	subge	r4, r2, #3
 8013f72:	9305      	str	r3, [sp, #20]
 8013f74:	bfb2      	itee	lt
 8013f76:	2400      	movlt	r4, #0
 8013f78:	2318      	movge	r3, #24
 8013f7a:	fb94 f4f3 	sdivge	r4, r4, r3
 8013f7e:	f06f 0317 	mvn.w	r3, #23
 8013f82:	fb04 3303 	mla	r3, r4, r3, r3
 8013f86:	eb03 0b02 	add.w	fp, r3, r2
 8013f8a:	9b00      	ldr	r3, [sp, #0]
 8013f8c:	9a05      	ldr	r2, [sp, #20]
 8013f8e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8014258 <__kernel_rem_pio2+0x310>
 8013f92:	eb03 0802 	add.w	r8, r3, r2
 8013f96:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8013f98:	1aa7      	subs	r7, r4, r2
 8013f9a:	ae20      	add	r6, sp, #128	@ 0x80
 8013f9c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013fa0:	2500      	movs	r5, #0
 8013fa2:	4545      	cmp	r5, r8
 8013fa4:	dd12      	ble.n	8013fcc <__kernel_rem_pio2+0x84>
 8013fa6:	9b06      	ldr	r3, [sp, #24]
 8013fa8:	aa20      	add	r2, sp, #128	@ 0x80
 8013faa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8013fae:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8013fb2:	2700      	movs	r7, #0
 8013fb4:	9b00      	ldr	r3, [sp, #0]
 8013fb6:	429f      	cmp	r7, r3
 8013fb8:	dc2e      	bgt.n	8014018 <__kernel_rem_pio2+0xd0>
 8013fba:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8014258 <__kernel_rem_pio2+0x310>
 8013fbe:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013fc2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013fc6:	46a8      	mov	r8, r5
 8013fc8:	2600      	movs	r6, #0
 8013fca:	e01b      	b.n	8014004 <__kernel_rem_pio2+0xbc>
 8013fcc:	42ef      	cmn	r7, r5
 8013fce:	d407      	bmi.n	8013fe0 <__kernel_rem_pio2+0x98>
 8013fd0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013fd4:	f7ec fa72 	bl	80004bc <__aeabi_i2d>
 8013fd8:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013fdc:	3501      	adds	r5, #1
 8013fde:	e7e0      	b.n	8013fa2 <__kernel_rem_pio2+0x5a>
 8013fe0:	ec51 0b18 	vmov	r0, r1, d8
 8013fe4:	e7f8      	b.n	8013fd8 <__kernel_rem_pio2+0x90>
 8013fe6:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8013fea:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013fee:	f7ec facf 	bl	8000590 <__aeabi_dmul>
 8013ff2:	4602      	mov	r2, r0
 8013ff4:	460b      	mov	r3, r1
 8013ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ffa:	f7ec f913 	bl	8000224 <__adddf3>
 8013ffe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014002:	3601      	adds	r6, #1
 8014004:	9b05      	ldr	r3, [sp, #20]
 8014006:	429e      	cmp	r6, r3
 8014008:	dded      	ble.n	8013fe6 <__kernel_rem_pio2+0x9e>
 801400a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801400e:	3701      	adds	r7, #1
 8014010:	ecaa 7b02 	vstmia	sl!, {d7}
 8014014:	3508      	adds	r5, #8
 8014016:	e7cd      	b.n	8013fb4 <__kernel_rem_pio2+0x6c>
 8014018:	9b00      	ldr	r3, [sp, #0]
 801401a:	f8dd 8000 	ldr.w	r8, [sp]
 801401e:	aa0c      	add	r2, sp, #48	@ 0x30
 8014020:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014024:	930a      	str	r3, [sp, #40]	@ 0x28
 8014026:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8014028:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801402c:	9309      	str	r3, [sp, #36]	@ 0x24
 801402e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8014032:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014034:	ab98      	add	r3, sp, #608	@ 0x260
 8014036:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801403a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801403e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014042:	ac0c      	add	r4, sp, #48	@ 0x30
 8014044:	ab70      	add	r3, sp, #448	@ 0x1c0
 8014046:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801404a:	46a1      	mov	r9, r4
 801404c:	46c2      	mov	sl, r8
 801404e:	f1ba 0f00 	cmp.w	sl, #0
 8014052:	dc77      	bgt.n	8014144 <__kernel_rem_pio2+0x1fc>
 8014054:	4658      	mov	r0, fp
 8014056:	ed9d 0b02 	vldr	d0, [sp, #8]
 801405a:	f7ff fe95 	bl	8013d88 <scalbn>
 801405e:	ec57 6b10 	vmov	r6, r7, d0
 8014062:	2200      	movs	r2, #0
 8014064:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8014068:	4630      	mov	r0, r6
 801406a:	4639      	mov	r1, r7
 801406c:	f7ec fa90 	bl	8000590 <__aeabi_dmul>
 8014070:	ec41 0b10 	vmov	d0, r0, r1
 8014074:	f000 fd20 	bl	8014ab8 <floor>
 8014078:	4b7c      	ldr	r3, [pc, #496]	@ (801426c <__kernel_rem_pio2+0x324>)
 801407a:	ec51 0b10 	vmov	r0, r1, d0
 801407e:	2200      	movs	r2, #0
 8014080:	f7ec fa86 	bl	8000590 <__aeabi_dmul>
 8014084:	4602      	mov	r2, r0
 8014086:	460b      	mov	r3, r1
 8014088:	4630      	mov	r0, r6
 801408a:	4639      	mov	r1, r7
 801408c:	f7ec f8c8 	bl	8000220 <__aeabi_dsub>
 8014090:	460f      	mov	r7, r1
 8014092:	4606      	mov	r6, r0
 8014094:	f7ec fd16 	bl	8000ac4 <__aeabi_d2iz>
 8014098:	9002      	str	r0, [sp, #8]
 801409a:	f7ec fa0f 	bl	80004bc <__aeabi_i2d>
 801409e:	4602      	mov	r2, r0
 80140a0:	460b      	mov	r3, r1
 80140a2:	4630      	mov	r0, r6
 80140a4:	4639      	mov	r1, r7
 80140a6:	f7ec f8bb 	bl	8000220 <__aeabi_dsub>
 80140aa:	f1bb 0f00 	cmp.w	fp, #0
 80140ae:	4606      	mov	r6, r0
 80140b0:	460f      	mov	r7, r1
 80140b2:	dd6c      	ble.n	801418e <__kernel_rem_pio2+0x246>
 80140b4:	f108 31ff 	add.w	r1, r8, #4294967295
 80140b8:	ab0c      	add	r3, sp, #48	@ 0x30
 80140ba:	9d02      	ldr	r5, [sp, #8]
 80140bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80140c0:	f1cb 0018 	rsb	r0, fp, #24
 80140c4:	fa43 f200 	asr.w	r2, r3, r0
 80140c8:	4415      	add	r5, r2
 80140ca:	4082      	lsls	r2, r0
 80140cc:	1a9b      	subs	r3, r3, r2
 80140ce:	aa0c      	add	r2, sp, #48	@ 0x30
 80140d0:	9502      	str	r5, [sp, #8]
 80140d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80140d6:	f1cb 0217 	rsb	r2, fp, #23
 80140da:	fa43 f902 	asr.w	r9, r3, r2
 80140de:	f1b9 0f00 	cmp.w	r9, #0
 80140e2:	dd64      	ble.n	80141ae <__kernel_rem_pio2+0x266>
 80140e4:	9b02      	ldr	r3, [sp, #8]
 80140e6:	2200      	movs	r2, #0
 80140e8:	3301      	adds	r3, #1
 80140ea:	9302      	str	r3, [sp, #8]
 80140ec:	4615      	mov	r5, r2
 80140ee:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80140f2:	4590      	cmp	r8, r2
 80140f4:	f300 80a1 	bgt.w	801423a <__kernel_rem_pio2+0x2f2>
 80140f8:	f1bb 0f00 	cmp.w	fp, #0
 80140fc:	dd07      	ble.n	801410e <__kernel_rem_pio2+0x1c6>
 80140fe:	f1bb 0f01 	cmp.w	fp, #1
 8014102:	f000 80c1 	beq.w	8014288 <__kernel_rem_pio2+0x340>
 8014106:	f1bb 0f02 	cmp.w	fp, #2
 801410a:	f000 80c8 	beq.w	801429e <__kernel_rem_pio2+0x356>
 801410e:	f1b9 0f02 	cmp.w	r9, #2
 8014112:	d14c      	bne.n	80141ae <__kernel_rem_pio2+0x266>
 8014114:	4632      	mov	r2, r6
 8014116:	463b      	mov	r3, r7
 8014118:	4955      	ldr	r1, [pc, #340]	@ (8014270 <__kernel_rem_pio2+0x328>)
 801411a:	2000      	movs	r0, #0
 801411c:	f7ec f880 	bl	8000220 <__aeabi_dsub>
 8014120:	4606      	mov	r6, r0
 8014122:	460f      	mov	r7, r1
 8014124:	2d00      	cmp	r5, #0
 8014126:	d042      	beq.n	80141ae <__kernel_rem_pio2+0x266>
 8014128:	4658      	mov	r0, fp
 801412a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8014260 <__kernel_rem_pio2+0x318>
 801412e:	f7ff fe2b 	bl	8013d88 <scalbn>
 8014132:	4630      	mov	r0, r6
 8014134:	4639      	mov	r1, r7
 8014136:	ec53 2b10 	vmov	r2, r3, d0
 801413a:	f7ec f871 	bl	8000220 <__aeabi_dsub>
 801413e:	4606      	mov	r6, r0
 8014140:	460f      	mov	r7, r1
 8014142:	e034      	b.n	80141ae <__kernel_rem_pio2+0x266>
 8014144:	4b4b      	ldr	r3, [pc, #300]	@ (8014274 <__kernel_rem_pio2+0x32c>)
 8014146:	2200      	movs	r2, #0
 8014148:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801414c:	f7ec fa20 	bl	8000590 <__aeabi_dmul>
 8014150:	f7ec fcb8 	bl	8000ac4 <__aeabi_d2iz>
 8014154:	f7ec f9b2 	bl	80004bc <__aeabi_i2d>
 8014158:	4b47      	ldr	r3, [pc, #284]	@ (8014278 <__kernel_rem_pio2+0x330>)
 801415a:	2200      	movs	r2, #0
 801415c:	4606      	mov	r6, r0
 801415e:	460f      	mov	r7, r1
 8014160:	f7ec fa16 	bl	8000590 <__aeabi_dmul>
 8014164:	4602      	mov	r2, r0
 8014166:	460b      	mov	r3, r1
 8014168:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801416c:	f7ec f858 	bl	8000220 <__aeabi_dsub>
 8014170:	f7ec fca8 	bl	8000ac4 <__aeabi_d2iz>
 8014174:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8014178:	f849 0b04 	str.w	r0, [r9], #4
 801417c:	4639      	mov	r1, r7
 801417e:	4630      	mov	r0, r6
 8014180:	f7ec f850 	bl	8000224 <__adddf3>
 8014184:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014188:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801418c:	e75f      	b.n	801404e <__kernel_rem_pio2+0x106>
 801418e:	d107      	bne.n	80141a0 <__kernel_rem_pio2+0x258>
 8014190:	f108 33ff 	add.w	r3, r8, #4294967295
 8014194:	aa0c      	add	r2, sp, #48	@ 0x30
 8014196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801419a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801419e:	e79e      	b.n	80140de <__kernel_rem_pio2+0x196>
 80141a0:	4b36      	ldr	r3, [pc, #216]	@ (801427c <__kernel_rem_pio2+0x334>)
 80141a2:	2200      	movs	r2, #0
 80141a4:	f7ec fc7a 	bl	8000a9c <__aeabi_dcmpge>
 80141a8:	2800      	cmp	r0, #0
 80141aa:	d143      	bne.n	8014234 <__kernel_rem_pio2+0x2ec>
 80141ac:	4681      	mov	r9, r0
 80141ae:	2200      	movs	r2, #0
 80141b0:	2300      	movs	r3, #0
 80141b2:	4630      	mov	r0, r6
 80141b4:	4639      	mov	r1, r7
 80141b6:	f7ec fc53 	bl	8000a60 <__aeabi_dcmpeq>
 80141ba:	2800      	cmp	r0, #0
 80141bc:	f000 80c1 	beq.w	8014342 <__kernel_rem_pio2+0x3fa>
 80141c0:	f108 33ff 	add.w	r3, r8, #4294967295
 80141c4:	2200      	movs	r2, #0
 80141c6:	9900      	ldr	r1, [sp, #0]
 80141c8:	428b      	cmp	r3, r1
 80141ca:	da70      	bge.n	80142ae <__kernel_rem_pio2+0x366>
 80141cc:	2a00      	cmp	r2, #0
 80141ce:	f000 808b 	beq.w	80142e8 <__kernel_rem_pio2+0x3a0>
 80141d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80141d6:	ab0c      	add	r3, sp, #48	@ 0x30
 80141d8:	f1ab 0b18 	sub.w	fp, fp, #24
 80141dc:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d0f6      	beq.n	80141d2 <__kernel_rem_pio2+0x28a>
 80141e4:	4658      	mov	r0, fp
 80141e6:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8014260 <__kernel_rem_pio2+0x318>
 80141ea:	f7ff fdcd 	bl	8013d88 <scalbn>
 80141ee:	f108 0301 	add.w	r3, r8, #1
 80141f2:	00da      	lsls	r2, r3, #3
 80141f4:	9205      	str	r2, [sp, #20]
 80141f6:	ec55 4b10 	vmov	r4, r5, d0
 80141fa:	aa70      	add	r2, sp, #448	@ 0x1c0
 80141fc:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8014274 <__kernel_rem_pio2+0x32c>
 8014200:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8014204:	4646      	mov	r6, r8
 8014206:	f04f 0a00 	mov.w	sl, #0
 801420a:	2e00      	cmp	r6, #0
 801420c:	f280 80d1 	bge.w	80143b2 <__kernel_rem_pio2+0x46a>
 8014210:	4644      	mov	r4, r8
 8014212:	2c00      	cmp	r4, #0
 8014214:	f2c0 80ff 	blt.w	8014416 <__kernel_rem_pio2+0x4ce>
 8014218:	4b19      	ldr	r3, [pc, #100]	@ (8014280 <__kernel_rem_pio2+0x338>)
 801421a:	461f      	mov	r7, r3
 801421c:	ab70      	add	r3, sp, #448	@ 0x1c0
 801421e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014222:	9306      	str	r3, [sp, #24]
 8014224:	f04f 0a00 	mov.w	sl, #0
 8014228:	f04f 0b00 	mov.w	fp, #0
 801422c:	2600      	movs	r6, #0
 801422e:	eba8 0504 	sub.w	r5, r8, r4
 8014232:	e0e4      	b.n	80143fe <__kernel_rem_pio2+0x4b6>
 8014234:	f04f 0902 	mov.w	r9, #2
 8014238:	e754      	b.n	80140e4 <__kernel_rem_pio2+0x19c>
 801423a:	f854 3b04 	ldr.w	r3, [r4], #4
 801423e:	bb0d      	cbnz	r5, 8014284 <__kernel_rem_pio2+0x33c>
 8014240:	b123      	cbz	r3, 801424c <__kernel_rem_pio2+0x304>
 8014242:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8014246:	f844 3c04 	str.w	r3, [r4, #-4]
 801424a:	2301      	movs	r3, #1
 801424c:	3201      	adds	r2, #1
 801424e:	461d      	mov	r5, r3
 8014250:	e74f      	b.n	80140f2 <__kernel_rem_pio2+0x1aa>
 8014252:	bf00      	nop
 8014254:	f3af 8000 	nop.w
	...
 8014264:	3ff00000 	.word	0x3ff00000
 8014268:	08015258 	.word	0x08015258
 801426c:	40200000 	.word	0x40200000
 8014270:	3ff00000 	.word	0x3ff00000
 8014274:	3e700000 	.word	0x3e700000
 8014278:	41700000 	.word	0x41700000
 801427c:	3fe00000 	.word	0x3fe00000
 8014280:	08015218 	.word	0x08015218
 8014284:	1acb      	subs	r3, r1, r3
 8014286:	e7de      	b.n	8014246 <__kernel_rem_pio2+0x2fe>
 8014288:	f108 32ff 	add.w	r2, r8, #4294967295
 801428c:	ab0c      	add	r3, sp, #48	@ 0x30
 801428e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014292:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014296:	a90c      	add	r1, sp, #48	@ 0x30
 8014298:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801429c:	e737      	b.n	801410e <__kernel_rem_pio2+0x1c6>
 801429e:	f108 32ff 	add.w	r2, r8, #4294967295
 80142a2:	ab0c      	add	r3, sp, #48	@ 0x30
 80142a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80142ac:	e7f3      	b.n	8014296 <__kernel_rem_pio2+0x34e>
 80142ae:	a90c      	add	r1, sp, #48	@ 0x30
 80142b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80142b4:	3b01      	subs	r3, #1
 80142b6:	430a      	orrs	r2, r1
 80142b8:	e785      	b.n	80141c6 <__kernel_rem_pio2+0x27e>
 80142ba:	3401      	adds	r4, #1
 80142bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80142c0:	2a00      	cmp	r2, #0
 80142c2:	d0fa      	beq.n	80142ba <__kernel_rem_pio2+0x372>
 80142c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80142c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80142ca:	eb0d 0503 	add.w	r5, sp, r3
 80142ce:	9b06      	ldr	r3, [sp, #24]
 80142d0:	aa20      	add	r2, sp, #128	@ 0x80
 80142d2:	4443      	add	r3, r8
 80142d4:	f108 0701 	add.w	r7, r8, #1
 80142d8:	3d98      	subs	r5, #152	@ 0x98
 80142da:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80142de:	4444      	add	r4, r8
 80142e0:	42bc      	cmp	r4, r7
 80142e2:	da04      	bge.n	80142ee <__kernel_rem_pio2+0x3a6>
 80142e4:	46a0      	mov	r8, r4
 80142e6:	e6a2      	b.n	801402e <__kernel_rem_pio2+0xe6>
 80142e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80142ea:	2401      	movs	r4, #1
 80142ec:	e7e6      	b.n	80142bc <__kernel_rem_pio2+0x374>
 80142ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142f0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80142f4:	f7ec f8e2 	bl	80004bc <__aeabi_i2d>
 80142f8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 80145b8 <__kernel_rem_pio2+0x670>
 80142fc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014300:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014304:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014308:	46b2      	mov	sl, r6
 801430a:	f04f 0800 	mov.w	r8, #0
 801430e:	9b05      	ldr	r3, [sp, #20]
 8014310:	4598      	cmp	r8, r3
 8014312:	dd05      	ble.n	8014320 <__kernel_rem_pio2+0x3d8>
 8014314:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014318:	3701      	adds	r7, #1
 801431a:	eca5 7b02 	vstmia	r5!, {d7}
 801431e:	e7df      	b.n	80142e0 <__kernel_rem_pio2+0x398>
 8014320:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8014324:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014328:	f7ec f932 	bl	8000590 <__aeabi_dmul>
 801432c:	4602      	mov	r2, r0
 801432e:	460b      	mov	r3, r1
 8014330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014334:	f7eb ff76 	bl	8000224 <__adddf3>
 8014338:	f108 0801 	add.w	r8, r8, #1
 801433c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014340:	e7e5      	b.n	801430e <__kernel_rem_pio2+0x3c6>
 8014342:	f1cb 0000 	rsb	r0, fp, #0
 8014346:	ec47 6b10 	vmov	d0, r6, r7
 801434a:	f7ff fd1d 	bl	8013d88 <scalbn>
 801434e:	ec55 4b10 	vmov	r4, r5, d0
 8014352:	4b9b      	ldr	r3, [pc, #620]	@ (80145c0 <__kernel_rem_pio2+0x678>)
 8014354:	2200      	movs	r2, #0
 8014356:	4620      	mov	r0, r4
 8014358:	4629      	mov	r1, r5
 801435a:	f7ec fb9f 	bl	8000a9c <__aeabi_dcmpge>
 801435e:	b300      	cbz	r0, 80143a2 <__kernel_rem_pio2+0x45a>
 8014360:	4b98      	ldr	r3, [pc, #608]	@ (80145c4 <__kernel_rem_pio2+0x67c>)
 8014362:	2200      	movs	r2, #0
 8014364:	4620      	mov	r0, r4
 8014366:	4629      	mov	r1, r5
 8014368:	f7ec f912 	bl	8000590 <__aeabi_dmul>
 801436c:	f7ec fbaa 	bl	8000ac4 <__aeabi_d2iz>
 8014370:	4606      	mov	r6, r0
 8014372:	f7ec f8a3 	bl	80004bc <__aeabi_i2d>
 8014376:	4b92      	ldr	r3, [pc, #584]	@ (80145c0 <__kernel_rem_pio2+0x678>)
 8014378:	2200      	movs	r2, #0
 801437a:	f7ec f909 	bl	8000590 <__aeabi_dmul>
 801437e:	460b      	mov	r3, r1
 8014380:	4602      	mov	r2, r0
 8014382:	4629      	mov	r1, r5
 8014384:	4620      	mov	r0, r4
 8014386:	f7eb ff4b 	bl	8000220 <__aeabi_dsub>
 801438a:	f7ec fb9b 	bl	8000ac4 <__aeabi_d2iz>
 801438e:	ab0c      	add	r3, sp, #48	@ 0x30
 8014390:	f10b 0b18 	add.w	fp, fp, #24
 8014394:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8014398:	f108 0801 	add.w	r8, r8, #1
 801439c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80143a0:	e720      	b.n	80141e4 <__kernel_rem_pio2+0x29c>
 80143a2:	4620      	mov	r0, r4
 80143a4:	4629      	mov	r1, r5
 80143a6:	f7ec fb8d 	bl	8000ac4 <__aeabi_d2iz>
 80143aa:	ab0c      	add	r3, sp, #48	@ 0x30
 80143ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80143b0:	e718      	b.n	80141e4 <__kernel_rem_pio2+0x29c>
 80143b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80143b4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80143b8:	f7ec f880 	bl	80004bc <__aeabi_i2d>
 80143bc:	4622      	mov	r2, r4
 80143be:	462b      	mov	r3, r5
 80143c0:	f7ec f8e6 	bl	8000590 <__aeabi_dmul>
 80143c4:	4652      	mov	r2, sl
 80143c6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80143ca:	465b      	mov	r3, fp
 80143cc:	4620      	mov	r0, r4
 80143ce:	4629      	mov	r1, r5
 80143d0:	f7ec f8de 	bl	8000590 <__aeabi_dmul>
 80143d4:	3e01      	subs	r6, #1
 80143d6:	4604      	mov	r4, r0
 80143d8:	460d      	mov	r5, r1
 80143da:	e716      	b.n	801420a <__kernel_rem_pio2+0x2c2>
 80143dc:	9906      	ldr	r1, [sp, #24]
 80143de:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80143e2:	9106      	str	r1, [sp, #24]
 80143e4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80143e8:	f7ec f8d2 	bl	8000590 <__aeabi_dmul>
 80143ec:	4602      	mov	r2, r0
 80143ee:	460b      	mov	r3, r1
 80143f0:	4650      	mov	r0, sl
 80143f2:	4659      	mov	r1, fp
 80143f4:	f7eb ff16 	bl	8000224 <__adddf3>
 80143f8:	3601      	adds	r6, #1
 80143fa:	4682      	mov	sl, r0
 80143fc:	468b      	mov	fp, r1
 80143fe:	9b00      	ldr	r3, [sp, #0]
 8014400:	429e      	cmp	r6, r3
 8014402:	dc01      	bgt.n	8014408 <__kernel_rem_pio2+0x4c0>
 8014404:	42ae      	cmp	r6, r5
 8014406:	dde9      	ble.n	80143dc <__kernel_rem_pio2+0x494>
 8014408:	ab48      	add	r3, sp, #288	@ 0x120
 801440a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801440e:	e9c5 ab00 	strd	sl, fp, [r5]
 8014412:	3c01      	subs	r4, #1
 8014414:	e6fd      	b.n	8014212 <__kernel_rem_pio2+0x2ca>
 8014416:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8014418:	2b02      	cmp	r3, #2
 801441a:	dc0b      	bgt.n	8014434 <__kernel_rem_pio2+0x4ec>
 801441c:	2b00      	cmp	r3, #0
 801441e:	dc35      	bgt.n	801448c <__kernel_rem_pio2+0x544>
 8014420:	d059      	beq.n	80144d6 <__kernel_rem_pio2+0x58e>
 8014422:	9b02      	ldr	r3, [sp, #8]
 8014424:	f003 0007 	and.w	r0, r3, #7
 8014428:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801442c:	ecbd 8b02 	vpop	{d8}
 8014430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014434:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8014436:	2b03      	cmp	r3, #3
 8014438:	d1f3      	bne.n	8014422 <__kernel_rem_pio2+0x4da>
 801443a:	9b05      	ldr	r3, [sp, #20]
 801443c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014440:	eb0d 0403 	add.w	r4, sp, r3
 8014444:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8014448:	4625      	mov	r5, r4
 801444a:	46c2      	mov	sl, r8
 801444c:	f1ba 0f00 	cmp.w	sl, #0
 8014450:	dc69      	bgt.n	8014526 <__kernel_rem_pio2+0x5de>
 8014452:	4645      	mov	r5, r8
 8014454:	2d01      	cmp	r5, #1
 8014456:	f300 8087 	bgt.w	8014568 <__kernel_rem_pio2+0x620>
 801445a:	9c05      	ldr	r4, [sp, #20]
 801445c:	ab48      	add	r3, sp, #288	@ 0x120
 801445e:	441c      	add	r4, r3
 8014460:	2000      	movs	r0, #0
 8014462:	2100      	movs	r1, #0
 8014464:	f1b8 0f01 	cmp.w	r8, #1
 8014468:	f300 809c 	bgt.w	80145a4 <__kernel_rem_pio2+0x65c>
 801446c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8014470:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8014474:	f1b9 0f00 	cmp.w	r9, #0
 8014478:	f040 80a6 	bne.w	80145c8 <__kernel_rem_pio2+0x680>
 801447c:	9b04      	ldr	r3, [sp, #16]
 801447e:	e9c3 5600 	strd	r5, r6, [r3]
 8014482:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8014486:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801448a:	e7ca      	b.n	8014422 <__kernel_rem_pio2+0x4da>
 801448c:	9d05      	ldr	r5, [sp, #20]
 801448e:	ab48      	add	r3, sp, #288	@ 0x120
 8014490:	441d      	add	r5, r3
 8014492:	4644      	mov	r4, r8
 8014494:	2000      	movs	r0, #0
 8014496:	2100      	movs	r1, #0
 8014498:	2c00      	cmp	r4, #0
 801449a:	da35      	bge.n	8014508 <__kernel_rem_pio2+0x5c0>
 801449c:	f1b9 0f00 	cmp.w	r9, #0
 80144a0:	d038      	beq.n	8014514 <__kernel_rem_pio2+0x5cc>
 80144a2:	4602      	mov	r2, r0
 80144a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80144a8:	9c04      	ldr	r4, [sp, #16]
 80144aa:	e9c4 2300 	strd	r2, r3, [r4]
 80144ae:	4602      	mov	r2, r0
 80144b0:	460b      	mov	r3, r1
 80144b2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80144b6:	f7eb feb3 	bl	8000220 <__aeabi_dsub>
 80144ba:	ad4a      	add	r5, sp, #296	@ 0x128
 80144bc:	2401      	movs	r4, #1
 80144be:	45a0      	cmp	r8, r4
 80144c0:	da2b      	bge.n	801451a <__kernel_rem_pio2+0x5d2>
 80144c2:	f1b9 0f00 	cmp.w	r9, #0
 80144c6:	d002      	beq.n	80144ce <__kernel_rem_pio2+0x586>
 80144c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80144cc:	4619      	mov	r1, r3
 80144ce:	9b04      	ldr	r3, [sp, #16]
 80144d0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80144d4:	e7a5      	b.n	8014422 <__kernel_rem_pio2+0x4da>
 80144d6:	9c05      	ldr	r4, [sp, #20]
 80144d8:	ab48      	add	r3, sp, #288	@ 0x120
 80144da:	441c      	add	r4, r3
 80144dc:	2000      	movs	r0, #0
 80144de:	2100      	movs	r1, #0
 80144e0:	f1b8 0f00 	cmp.w	r8, #0
 80144e4:	da09      	bge.n	80144fa <__kernel_rem_pio2+0x5b2>
 80144e6:	f1b9 0f00 	cmp.w	r9, #0
 80144ea:	d002      	beq.n	80144f2 <__kernel_rem_pio2+0x5aa>
 80144ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80144f0:	4619      	mov	r1, r3
 80144f2:	9b04      	ldr	r3, [sp, #16]
 80144f4:	e9c3 0100 	strd	r0, r1, [r3]
 80144f8:	e793      	b.n	8014422 <__kernel_rem_pio2+0x4da>
 80144fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80144fe:	f7eb fe91 	bl	8000224 <__adddf3>
 8014502:	f108 38ff 	add.w	r8, r8, #4294967295
 8014506:	e7eb      	b.n	80144e0 <__kernel_rem_pio2+0x598>
 8014508:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801450c:	f7eb fe8a 	bl	8000224 <__adddf3>
 8014510:	3c01      	subs	r4, #1
 8014512:	e7c1      	b.n	8014498 <__kernel_rem_pio2+0x550>
 8014514:	4602      	mov	r2, r0
 8014516:	460b      	mov	r3, r1
 8014518:	e7c6      	b.n	80144a8 <__kernel_rem_pio2+0x560>
 801451a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801451e:	f7eb fe81 	bl	8000224 <__adddf3>
 8014522:	3401      	adds	r4, #1
 8014524:	e7cb      	b.n	80144be <__kernel_rem_pio2+0x576>
 8014526:	ed35 7b02 	vldmdb	r5!, {d7}
 801452a:	ed8d 7b00 	vstr	d7, [sp]
 801452e:	ed95 7b02 	vldr	d7, [r5, #8]
 8014532:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014536:	ec53 2b17 	vmov	r2, r3, d7
 801453a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801453e:	f7eb fe71 	bl	8000224 <__adddf3>
 8014542:	4602      	mov	r2, r0
 8014544:	460b      	mov	r3, r1
 8014546:	4606      	mov	r6, r0
 8014548:	460f      	mov	r7, r1
 801454a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801454e:	f7eb fe67 	bl	8000220 <__aeabi_dsub>
 8014552:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014556:	f7eb fe65 	bl	8000224 <__adddf3>
 801455a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801455e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8014562:	e9c5 6700 	strd	r6, r7, [r5]
 8014566:	e771      	b.n	801444c <__kernel_rem_pio2+0x504>
 8014568:	ed34 7b02 	vldmdb	r4!, {d7}
 801456c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8014570:	ec51 0b17 	vmov	r0, r1, d7
 8014574:	4652      	mov	r2, sl
 8014576:	465b      	mov	r3, fp
 8014578:	ed8d 7b00 	vstr	d7, [sp]
 801457c:	f7eb fe52 	bl	8000224 <__adddf3>
 8014580:	4602      	mov	r2, r0
 8014582:	460b      	mov	r3, r1
 8014584:	4606      	mov	r6, r0
 8014586:	460f      	mov	r7, r1
 8014588:	e9dd 0100 	ldrd	r0, r1, [sp]
 801458c:	f7eb fe48 	bl	8000220 <__aeabi_dsub>
 8014590:	4652      	mov	r2, sl
 8014592:	465b      	mov	r3, fp
 8014594:	f7eb fe46 	bl	8000224 <__adddf3>
 8014598:	3d01      	subs	r5, #1
 801459a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801459e:	e9c4 6700 	strd	r6, r7, [r4]
 80145a2:	e757      	b.n	8014454 <__kernel_rem_pio2+0x50c>
 80145a4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80145a8:	f7eb fe3c 	bl	8000224 <__adddf3>
 80145ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80145b0:	e758      	b.n	8014464 <__kernel_rem_pio2+0x51c>
 80145b2:	bf00      	nop
 80145b4:	f3af 8000 	nop.w
	...
 80145c0:	41700000 	.word	0x41700000
 80145c4:	3e700000 	.word	0x3e700000
 80145c8:	9b04      	ldr	r3, [sp, #16]
 80145ca:	9a04      	ldr	r2, [sp, #16]
 80145cc:	601d      	str	r5, [r3, #0]
 80145ce:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 80145d2:	605c      	str	r4, [r3, #4]
 80145d4:	609f      	str	r7, [r3, #8]
 80145d6:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 80145da:	60d3      	str	r3, [r2, #12]
 80145dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80145e0:	6110      	str	r0, [r2, #16]
 80145e2:	6153      	str	r3, [r2, #20]
 80145e4:	e71d      	b.n	8014422 <__kernel_rem_pio2+0x4da>
 80145e6:	bf00      	nop

080145e8 <__kernel_rem_pio2f>:
 80145e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145ec:	ed2d 8b04 	vpush	{d8-d9}
 80145f0:	b0d9      	sub	sp, #356	@ 0x164
 80145f2:	4690      	mov	r8, r2
 80145f4:	9001      	str	r0, [sp, #4]
 80145f6:	4ab6      	ldr	r2, [pc, #728]	@ (80148d0 <__kernel_rem_pio2f+0x2e8>)
 80145f8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80145fa:	f118 0f04 	cmn.w	r8, #4
 80145fe:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8014602:	460f      	mov	r7, r1
 8014604:	f103 3bff 	add.w	fp, r3, #4294967295
 8014608:	db26      	blt.n	8014658 <__kernel_rem_pio2f+0x70>
 801460a:	f1b8 0203 	subs.w	r2, r8, #3
 801460e:	bf48      	it	mi
 8014610:	f108 0204 	addmi.w	r2, r8, #4
 8014614:	10d2      	asrs	r2, r2, #3
 8014616:	1c55      	adds	r5, r2, #1
 8014618:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801461a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80148e0 <__kernel_rem_pio2f+0x2f8>
 801461e:	00e8      	lsls	r0, r5, #3
 8014620:	eba2 060b 	sub.w	r6, r2, fp
 8014624:	9002      	str	r0, [sp, #8]
 8014626:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801462a:	eb0a 0c0b 	add.w	ip, sl, fp
 801462e:	ac1c      	add	r4, sp, #112	@ 0x70
 8014630:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8014634:	2000      	movs	r0, #0
 8014636:	4560      	cmp	r0, ip
 8014638:	dd10      	ble.n	801465c <__kernel_rem_pio2f+0x74>
 801463a:	a91c      	add	r1, sp, #112	@ 0x70
 801463c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8014640:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8014644:	2600      	movs	r6, #0
 8014646:	4556      	cmp	r6, sl
 8014648:	dc24      	bgt.n	8014694 <__kernel_rem_pio2f+0xac>
 801464a:	f8dd e004 	ldr.w	lr, [sp, #4]
 801464e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80148e0 <__kernel_rem_pio2f+0x2f8>
 8014652:	4684      	mov	ip, r0
 8014654:	2400      	movs	r4, #0
 8014656:	e016      	b.n	8014686 <__kernel_rem_pio2f+0x9e>
 8014658:	2200      	movs	r2, #0
 801465a:	e7dc      	b.n	8014616 <__kernel_rem_pio2f+0x2e>
 801465c:	42c6      	cmn	r6, r0
 801465e:	bf5d      	ittte	pl
 8014660:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8014664:	ee07 1a90 	vmovpl	s15, r1
 8014668:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801466c:	eef0 7a47 	vmovmi.f32	s15, s14
 8014670:	ece4 7a01 	vstmia	r4!, {s15}
 8014674:	3001      	adds	r0, #1
 8014676:	e7de      	b.n	8014636 <__kernel_rem_pio2f+0x4e>
 8014678:	ecfe 6a01 	vldmia	lr!, {s13}
 801467c:	ed3c 7a01 	vldmdb	ip!, {s14}
 8014680:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014684:	3401      	adds	r4, #1
 8014686:	455c      	cmp	r4, fp
 8014688:	ddf6      	ble.n	8014678 <__kernel_rem_pio2f+0x90>
 801468a:	ece9 7a01 	vstmia	r9!, {s15}
 801468e:	3601      	adds	r6, #1
 8014690:	3004      	adds	r0, #4
 8014692:	e7d8      	b.n	8014646 <__kernel_rem_pio2f+0x5e>
 8014694:	a908      	add	r1, sp, #32
 8014696:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801469a:	9104      	str	r1, [sp, #16]
 801469c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801469e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80148dc <__kernel_rem_pio2f+0x2f4>
 80146a2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80148d8 <__kernel_rem_pio2f+0x2f0>
 80146a6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80146aa:	9203      	str	r2, [sp, #12]
 80146ac:	4654      	mov	r4, sl
 80146ae:	00a2      	lsls	r2, r4, #2
 80146b0:	9205      	str	r2, [sp, #20]
 80146b2:	aa58      	add	r2, sp, #352	@ 0x160
 80146b4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80146b8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80146bc:	a944      	add	r1, sp, #272	@ 0x110
 80146be:	aa08      	add	r2, sp, #32
 80146c0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80146c4:	4694      	mov	ip, r2
 80146c6:	4626      	mov	r6, r4
 80146c8:	2e00      	cmp	r6, #0
 80146ca:	dc4c      	bgt.n	8014766 <__kernel_rem_pio2f+0x17e>
 80146cc:	4628      	mov	r0, r5
 80146ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80146d2:	f7ff fbd3 	bl	8013e7c <scalbnf>
 80146d6:	eeb0 8a40 	vmov.f32	s16, s0
 80146da:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80146de:	ee28 0a00 	vmul.f32	s0, s16, s0
 80146e2:	f000 fa65 	bl	8014bb0 <floorf>
 80146e6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80146ea:	eea0 8a67 	vfms.f32	s16, s0, s15
 80146ee:	2d00      	cmp	r5, #0
 80146f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80146f4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80146f8:	ee17 9a90 	vmov	r9, s15
 80146fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014700:	ee38 8a67 	vsub.f32	s16, s16, s15
 8014704:	dd41      	ble.n	801478a <__kernel_rem_pio2f+0x1a2>
 8014706:	f104 3cff 	add.w	ip, r4, #4294967295
 801470a:	a908      	add	r1, sp, #32
 801470c:	f1c5 0e08 	rsb	lr, r5, #8
 8014710:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8014714:	fa46 f00e 	asr.w	r0, r6, lr
 8014718:	4481      	add	r9, r0
 801471a:	fa00 f00e 	lsl.w	r0, r0, lr
 801471e:	1a36      	subs	r6, r6, r0
 8014720:	f1c5 0007 	rsb	r0, r5, #7
 8014724:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8014728:	4106      	asrs	r6, r0
 801472a:	2e00      	cmp	r6, #0
 801472c:	dd3c      	ble.n	80147a8 <__kernel_rem_pio2f+0x1c0>
 801472e:	f04f 0e00 	mov.w	lr, #0
 8014732:	f109 0901 	add.w	r9, r9, #1
 8014736:	4670      	mov	r0, lr
 8014738:	4574      	cmp	r4, lr
 801473a:	dc68      	bgt.n	801480e <__kernel_rem_pio2f+0x226>
 801473c:	2d00      	cmp	r5, #0
 801473e:	dd03      	ble.n	8014748 <__kernel_rem_pio2f+0x160>
 8014740:	2d01      	cmp	r5, #1
 8014742:	d074      	beq.n	801482e <__kernel_rem_pio2f+0x246>
 8014744:	2d02      	cmp	r5, #2
 8014746:	d07d      	beq.n	8014844 <__kernel_rem_pio2f+0x25c>
 8014748:	2e02      	cmp	r6, #2
 801474a:	d12d      	bne.n	80147a8 <__kernel_rem_pio2f+0x1c0>
 801474c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014750:	ee30 8a48 	vsub.f32	s16, s0, s16
 8014754:	b340      	cbz	r0, 80147a8 <__kernel_rem_pio2f+0x1c0>
 8014756:	4628      	mov	r0, r5
 8014758:	9306      	str	r3, [sp, #24]
 801475a:	f7ff fb8f 	bl	8013e7c <scalbnf>
 801475e:	9b06      	ldr	r3, [sp, #24]
 8014760:	ee38 8a40 	vsub.f32	s16, s16, s0
 8014764:	e020      	b.n	80147a8 <__kernel_rem_pio2f+0x1c0>
 8014766:	ee60 7a28 	vmul.f32	s15, s0, s17
 801476a:	3e01      	subs	r6, #1
 801476c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014774:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8014778:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801477c:	ecac 0a01 	vstmia	ip!, {s0}
 8014780:	ed30 0a01 	vldmdb	r0!, {s0}
 8014784:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014788:	e79e      	b.n	80146c8 <__kernel_rem_pio2f+0xe0>
 801478a:	d105      	bne.n	8014798 <__kernel_rem_pio2f+0x1b0>
 801478c:	1e60      	subs	r0, r4, #1
 801478e:	a908      	add	r1, sp, #32
 8014790:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8014794:	11f6      	asrs	r6, r6, #7
 8014796:	e7c8      	b.n	801472a <__kernel_rem_pio2f+0x142>
 8014798:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801479c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80147a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147a4:	da31      	bge.n	801480a <__kernel_rem_pio2f+0x222>
 80147a6:	2600      	movs	r6, #0
 80147a8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80147ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147b0:	f040 8098 	bne.w	80148e4 <__kernel_rem_pio2f+0x2fc>
 80147b4:	1e60      	subs	r0, r4, #1
 80147b6:	2200      	movs	r2, #0
 80147b8:	4550      	cmp	r0, sl
 80147ba:	da4b      	bge.n	8014854 <__kernel_rem_pio2f+0x26c>
 80147bc:	2a00      	cmp	r2, #0
 80147be:	d065      	beq.n	801488c <__kernel_rem_pio2f+0x2a4>
 80147c0:	3c01      	subs	r4, #1
 80147c2:	ab08      	add	r3, sp, #32
 80147c4:	3d08      	subs	r5, #8
 80147c6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d0f8      	beq.n	80147c0 <__kernel_rem_pio2f+0x1d8>
 80147ce:	4628      	mov	r0, r5
 80147d0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80147d4:	f7ff fb52 	bl	8013e7c <scalbnf>
 80147d8:	1c63      	adds	r3, r4, #1
 80147da:	aa44      	add	r2, sp, #272	@ 0x110
 80147dc:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80148dc <__kernel_rem_pio2f+0x2f4>
 80147e0:	0099      	lsls	r1, r3, #2
 80147e2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80147e6:	4623      	mov	r3, r4
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	f280 80a9 	bge.w	8014940 <__kernel_rem_pio2f+0x358>
 80147ee:	4623      	mov	r3, r4
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	f2c0 80c7 	blt.w	8014984 <__kernel_rem_pio2f+0x39c>
 80147f6:	aa44      	add	r2, sp, #272	@ 0x110
 80147f8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80147fc:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80148d4 <__kernel_rem_pio2f+0x2ec>
 8014800:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80148e0 <__kernel_rem_pio2f+0x2f8>
 8014804:	2000      	movs	r0, #0
 8014806:	1ae2      	subs	r2, r4, r3
 8014808:	e0b1      	b.n	801496e <__kernel_rem_pio2f+0x386>
 801480a:	2602      	movs	r6, #2
 801480c:	e78f      	b.n	801472e <__kernel_rem_pio2f+0x146>
 801480e:	f852 1b04 	ldr.w	r1, [r2], #4
 8014812:	b948      	cbnz	r0, 8014828 <__kernel_rem_pio2f+0x240>
 8014814:	b121      	cbz	r1, 8014820 <__kernel_rem_pio2f+0x238>
 8014816:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801481a:	f842 1c04 	str.w	r1, [r2, #-4]
 801481e:	2101      	movs	r1, #1
 8014820:	f10e 0e01 	add.w	lr, lr, #1
 8014824:	4608      	mov	r0, r1
 8014826:	e787      	b.n	8014738 <__kernel_rem_pio2f+0x150>
 8014828:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801482c:	e7f5      	b.n	801481a <__kernel_rem_pio2f+0x232>
 801482e:	f104 3cff 	add.w	ip, r4, #4294967295
 8014832:	aa08      	add	r2, sp, #32
 8014834:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8014838:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801483c:	a908      	add	r1, sp, #32
 801483e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8014842:	e781      	b.n	8014748 <__kernel_rem_pio2f+0x160>
 8014844:	f104 3cff 	add.w	ip, r4, #4294967295
 8014848:	aa08      	add	r2, sp, #32
 801484a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801484e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8014852:	e7f3      	b.n	801483c <__kernel_rem_pio2f+0x254>
 8014854:	a908      	add	r1, sp, #32
 8014856:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801485a:	3801      	subs	r0, #1
 801485c:	430a      	orrs	r2, r1
 801485e:	e7ab      	b.n	80147b8 <__kernel_rem_pio2f+0x1d0>
 8014860:	3201      	adds	r2, #1
 8014862:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8014866:	2e00      	cmp	r6, #0
 8014868:	d0fa      	beq.n	8014860 <__kernel_rem_pio2f+0x278>
 801486a:	9905      	ldr	r1, [sp, #20]
 801486c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8014870:	eb0d 0001 	add.w	r0, sp, r1
 8014874:	18e6      	adds	r6, r4, r3
 8014876:	a91c      	add	r1, sp, #112	@ 0x70
 8014878:	f104 0c01 	add.w	ip, r4, #1
 801487c:	384c      	subs	r0, #76	@ 0x4c
 801487e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8014882:	4422      	add	r2, r4
 8014884:	4562      	cmp	r2, ip
 8014886:	da04      	bge.n	8014892 <__kernel_rem_pio2f+0x2aa>
 8014888:	4614      	mov	r4, r2
 801488a:	e710      	b.n	80146ae <__kernel_rem_pio2f+0xc6>
 801488c:	9804      	ldr	r0, [sp, #16]
 801488e:	2201      	movs	r2, #1
 8014890:	e7e7      	b.n	8014862 <__kernel_rem_pio2f+0x27a>
 8014892:	9903      	ldr	r1, [sp, #12]
 8014894:	f8dd e004 	ldr.w	lr, [sp, #4]
 8014898:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801489c:	9105      	str	r1, [sp, #20]
 801489e:	ee07 1a90 	vmov	s15, r1
 80148a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80148a6:	2400      	movs	r4, #0
 80148a8:	ece6 7a01 	vstmia	r6!, {s15}
 80148ac:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80148e0 <__kernel_rem_pio2f+0x2f8>
 80148b0:	46b1      	mov	r9, r6
 80148b2:	455c      	cmp	r4, fp
 80148b4:	dd04      	ble.n	80148c0 <__kernel_rem_pio2f+0x2d8>
 80148b6:	ece0 7a01 	vstmia	r0!, {s15}
 80148ba:	f10c 0c01 	add.w	ip, ip, #1
 80148be:	e7e1      	b.n	8014884 <__kernel_rem_pio2f+0x29c>
 80148c0:	ecfe 6a01 	vldmia	lr!, {s13}
 80148c4:	ed39 7a01 	vldmdb	r9!, {s14}
 80148c8:	3401      	adds	r4, #1
 80148ca:	eee6 7a87 	vfma.f32	s15, s13, s14
 80148ce:	e7f0      	b.n	80148b2 <__kernel_rem_pio2f+0x2ca>
 80148d0:	08015294 	.word	0x08015294
 80148d4:	08015268 	.word	0x08015268
 80148d8:	43800000 	.word	0x43800000
 80148dc:	3b800000 	.word	0x3b800000
 80148e0:	00000000 	.word	0x00000000
 80148e4:	9b02      	ldr	r3, [sp, #8]
 80148e6:	eeb0 0a48 	vmov.f32	s0, s16
 80148ea:	eba3 0008 	sub.w	r0, r3, r8
 80148ee:	f7ff fac5 	bl	8013e7c <scalbnf>
 80148f2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80148d8 <__kernel_rem_pio2f+0x2f0>
 80148f6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80148fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148fe:	db19      	blt.n	8014934 <__kernel_rem_pio2f+0x34c>
 8014900:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80148dc <__kernel_rem_pio2f+0x2f4>
 8014904:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014908:	aa08      	add	r2, sp, #32
 801490a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801490e:	3508      	adds	r5, #8
 8014910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014914:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014918:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801491c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014920:	ee10 3a10 	vmov	r3, s0
 8014924:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014928:	ee17 3a90 	vmov	r3, s15
 801492c:	3401      	adds	r4, #1
 801492e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014932:	e74c      	b.n	80147ce <__kernel_rem_pio2f+0x1e6>
 8014934:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014938:	aa08      	add	r2, sp, #32
 801493a:	ee10 3a10 	vmov	r3, s0
 801493e:	e7f6      	b.n	801492e <__kernel_rem_pio2f+0x346>
 8014940:	a808      	add	r0, sp, #32
 8014942:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8014946:	9001      	str	r0, [sp, #4]
 8014948:	ee07 0a90 	vmov	s15, r0
 801494c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014950:	3b01      	subs	r3, #1
 8014952:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014956:	ee20 0a07 	vmul.f32	s0, s0, s14
 801495a:	ed62 7a01 	vstmdb	r2!, {s15}
 801495e:	e743      	b.n	80147e8 <__kernel_rem_pio2f+0x200>
 8014960:	ecfc 6a01 	vldmia	ip!, {s13}
 8014964:	ecb5 7a01 	vldmia	r5!, {s14}
 8014968:	eee6 7a87 	vfma.f32	s15, s13, s14
 801496c:	3001      	adds	r0, #1
 801496e:	4550      	cmp	r0, sl
 8014970:	dc01      	bgt.n	8014976 <__kernel_rem_pio2f+0x38e>
 8014972:	4290      	cmp	r0, r2
 8014974:	ddf4      	ble.n	8014960 <__kernel_rem_pio2f+0x378>
 8014976:	a858      	add	r0, sp, #352	@ 0x160
 8014978:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801497c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8014980:	3b01      	subs	r3, #1
 8014982:	e735      	b.n	80147f0 <__kernel_rem_pio2f+0x208>
 8014984:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8014986:	2b02      	cmp	r3, #2
 8014988:	dc09      	bgt.n	801499e <__kernel_rem_pio2f+0x3b6>
 801498a:	2b00      	cmp	r3, #0
 801498c:	dc27      	bgt.n	80149de <__kernel_rem_pio2f+0x3f6>
 801498e:	d040      	beq.n	8014a12 <__kernel_rem_pio2f+0x42a>
 8014990:	f009 0007 	and.w	r0, r9, #7
 8014994:	b059      	add	sp, #356	@ 0x164
 8014996:	ecbd 8b04 	vpop	{d8-d9}
 801499a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801499e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80149a0:	2b03      	cmp	r3, #3
 80149a2:	d1f5      	bne.n	8014990 <__kernel_rem_pio2f+0x3a8>
 80149a4:	aa30      	add	r2, sp, #192	@ 0xc0
 80149a6:	1f0b      	subs	r3, r1, #4
 80149a8:	4413      	add	r3, r2
 80149aa:	461a      	mov	r2, r3
 80149ac:	4620      	mov	r0, r4
 80149ae:	2800      	cmp	r0, #0
 80149b0:	dc50      	bgt.n	8014a54 <__kernel_rem_pio2f+0x46c>
 80149b2:	4622      	mov	r2, r4
 80149b4:	2a01      	cmp	r2, #1
 80149b6:	dc5d      	bgt.n	8014a74 <__kernel_rem_pio2f+0x48c>
 80149b8:	ab30      	add	r3, sp, #192	@ 0xc0
 80149ba:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80148e0 <__kernel_rem_pio2f+0x2f8>
 80149be:	440b      	add	r3, r1
 80149c0:	2c01      	cmp	r4, #1
 80149c2:	dc67      	bgt.n	8014a94 <__kernel_rem_pio2f+0x4ac>
 80149c4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80149c8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80149cc:	2e00      	cmp	r6, #0
 80149ce:	d167      	bne.n	8014aa0 <__kernel_rem_pio2f+0x4b8>
 80149d0:	edc7 6a00 	vstr	s13, [r7]
 80149d4:	ed87 7a01 	vstr	s14, [r7, #4]
 80149d8:	edc7 7a02 	vstr	s15, [r7, #8]
 80149dc:	e7d8      	b.n	8014990 <__kernel_rem_pio2f+0x3a8>
 80149de:	ab30      	add	r3, sp, #192	@ 0xc0
 80149e0:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80148e0 <__kernel_rem_pio2f+0x2f8>
 80149e4:	440b      	add	r3, r1
 80149e6:	4622      	mov	r2, r4
 80149e8:	2a00      	cmp	r2, #0
 80149ea:	da24      	bge.n	8014a36 <__kernel_rem_pio2f+0x44e>
 80149ec:	b34e      	cbz	r6, 8014a42 <__kernel_rem_pio2f+0x45a>
 80149ee:	eef1 7a47 	vneg.f32	s15, s14
 80149f2:	edc7 7a00 	vstr	s15, [r7]
 80149f6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80149fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80149fe:	aa31      	add	r2, sp, #196	@ 0xc4
 8014a00:	2301      	movs	r3, #1
 8014a02:	429c      	cmp	r4, r3
 8014a04:	da20      	bge.n	8014a48 <__kernel_rem_pio2f+0x460>
 8014a06:	b10e      	cbz	r6, 8014a0c <__kernel_rem_pio2f+0x424>
 8014a08:	eef1 7a67 	vneg.f32	s15, s15
 8014a0c:	edc7 7a01 	vstr	s15, [r7, #4]
 8014a10:	e7be      	b.n	8014990 <__kernel_rem_pio2f+0x3a8>
 8014a12:	ab30      	add	r3, sp, #192	@ 0xc0
 8014a14:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80148e0 <__kernel_rem_pio2f+0x2f8>
 8014a18:	440b      	add	r3, r1
 8014a1a:	2c00      	cmp	r4, #0
 8014a1c:	da05      	bge.n	8014a2a <__kernel_rem_pio2f+0x442>
 8014a1e:	b10e      	cbz	r6, 8014a24 <__kernel_rem_pio2f+0x43c>
 8014a20:	eef1 7a67 	vneg.f32	s15, s15
 8014a24:	edc7 7a00 	vstr	s15, [r7]
 8014a28:	e7b2      	b.n	8014990 <__kernel_rem_pio2f+0x3a8>
 8014a2a:	ed33 7a01 	vldmdb	r3!, {s14}
 8014a2e:	3c01      	subs	r4, #1
 8014a30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014a34:	e7f1      	b.n	8014a1a <__kernel_rem_pio2f+0x432>
 8014a36:	ed73 7a01 	vldmdb	r3!, {s15}
 8014a3a:	3a01      	subs	r2, #1
 8014a3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014a40:	e7d2      	b.n	80149e8 <__kernel_rem_pio2f+0x400>
 8014a42:	eef0 7a47 	vmov.f32	s15, s14
 8014a46:	e7d4      	b.n	80149f2 <__kernel_rem_pio2f+0x40a>
 8014a48:	ecb2 7a01 	vldmia	r2!, {s14}
 8014a4c:	3301      	adds	r3, #1
 8014a4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014a52:	e7d6      	b.n	8014a02 <__kernel_rem_pio2f+0x41a>
 8014a54:	ed72 7a01 	vldmdb	r2!, {s15}
 8014a58:	edd2 6a01 	vldr	s13, [r2, #4]
 8014a5c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014a60:	3801      	subs	r0, #1
 8014a62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014a66:	ed82 7a00 	vstr	s14, [r2]
 8014a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014a6e:	edc2 7a01 	vstr	s15, [r2, #4]
 8014a72:	e79c      	b.n	80149ae <__kernel_rem_pio2f+0x3c6>
 8014a74:	ed73 7a01 	vldmdb	r3!, {s15}
 8014a78:	edd3 6a01 	vldr	s13, [r3, #4]
 8014a7c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014a80:	3a01      	subs	r2, #1
 8014a82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014a86:	ed83 7a00 	vstr	s14, [r3]
 8014a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014a8e:	edc3 7a01 	vstr	s15, [r3, #4]
 8014a92:	e78f      	b.n	80149b4 <__kernel_rem_pio2f+0x3cc>
 8014a94:	ed33 7a01 	vldmdb	r3!, {s14}
 8014a98:	3c01      	subs	r4, #1
 8014a9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014a9e:	e78f      	b.n	80149c0 <__kernel_rem_pio2f+0x3d8>
 8014aa0:	eef1 6a66 	vneg.f32	s13, s13
 8014aa4:	eeb1 7a47 	vneg.f32	s14, s14
 8014aa8:	edc7 6a00 	vstr	s13, [r7]
 8014aac:	ed87 7a01 	vstr	s14, [r7, #4]
 8014ab0:	eef1 7a67 	vneg.f32	s15, s15
 8014ab4:	e790      	b.n	80149d8 <__kernel_rem_pio2f+0x3f0>
 8014ab6:	bf00      	nop

08014ab8 <floor>:
 8014ab8:	ec51 0b10 	vmov	r0, r1, d0
 8014abc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ac4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8014ac8:	2e13      	cmp	r6, #19
 8014aca:	460c      	mov	r4, r1
 8014acc:	4605      	mov	r5, r0
 8014ace:	4680      	mov	r8, r0
 8014ad0:	dc34      	bgt.n	8014b3c <floor+0x84>
 8014ad2:	2e00      	cmp	r6, #0
 8014ad4:	da17      	bge.n	8014b06 <floor+0x4e>
 8014ad6:	a332      	add	r3, pc, #200	@ (adr r3, 8014ba0 <floor+0xe8>)
 8014ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014adc:	f7eb fba2 	bl	8000224 <__adddf3>
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	f7eb ffe4 	bl	8000ab0 <__aeabi_dcmpgt>
 8014ae8:	b150      	cbz	r0, 8014b00 <floor+0x48>
 8014aea:	2c00      	cmp	r4, #0
 8014aec:	da55      	bge.n	8014b9a <floor+0xe2>
 8014aee:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8014af2:	432c      	orrs	r4, r5
 8014af4:	2500      	movs	r5, #0
 8014af6:	42ac      	cmp	r4, r5
 8014af8:	4c2b      	ldr	r4, [pc, #172]	@ (8014ba8 <floor+0xf0>)
 8014afa:	bf08      	it	eq
 8014afc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8014b00:	4621      	mov	r1, r4
 8014b02:	4628      	mov	r0, r5
 8014b04:	e023      	b.n	8014b4e <floor+0x96>
 8014b06:	4f29      	ldr	r7, [pc, #164]	@ (8014bac <floor+0xf4>)
 8014b08:	4137      	asrs	r7, r6
 8014b0a:	ea01 0307 	and.w	r3, r1, r7
 8014b0e:	4303      	orrs	r3, r0
 8014b10:	d01d      	beq.n	8014b4e <floor+0x96>
 8014b12:	a323      	add	r3, pc, #140	@ (adr r3, 8014ba0 <floor+0xe8>)
 8014b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b18:	f7eb fb84 	bl	8000224 <__adddf3>
 8014b1c:	2200      	movs	r2, #0
 8014b1e:	2300      	movs	r3, #0
 8014b20:	f7eb ffc6 	bl	8000ab0 <__aeabi_dcmpgt>
 8014b24:	2800      	cmp	r0, #0
 8014b26:	d0eb      	beq.n	8014b00 <floor+0x48>
 8014b28:	2c00      	cmp	r4, #0
 8014b2a:	bfbe      	ittt	lt
 8014b2c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8014b30:	4133      	asrlt	r3, r6
 8014b32:	18e4      	addlt	r4, r4, r3
 8014b34:	ea24 0407 	bic.w	r4, r4, r7
 8014b38:	2500      	movs	r5, #0
 8014b3a:	e7e1      	b.n	8014b00 <floor+0x48>
 8014b3c:	2e33      	cmp	r6, #51	@ 0x33
 8014b3e:	dd0a      	ble.n	8014b56 <floor+0x9e>
 8014b40:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8014b44:	d103      	bne.n	8014b4e <floor+0x96>
 8014b46:	4602      	mov	r2, r0
 8014b48:	460b      	mov	r3, r1
 8014b4a:	f7eb fb6b 	bl	8000224 <__adddf3>
 8014b4e:	ec41 0b10 	vmov	d0, r0, r1
 8014b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b56:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8014b5a:	f04f 37ff 	mov.w	r7, #4294967295
 8014b5e:	40df      	lsrs	r7, r3
 8014b60:	4207      	tst	r7, r0
 8014b62:	d0f4      	beq.n	8014b4e <floor+0x96>
 8014b64:	a30e      	add	r3, pc, #56	@ (adr r3, 8014ba0 <floor+0xe8>)
 8014b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b6a:	f7eb fb5b 	bl	8000224 <__adddf3>
 8014b6e:	2200      	movs	r2, #0
 8014b70:	2300      	movs	r3, #0
 8014b72:	f7eb ff9d 	bl	8000ab0 <__aeabi_dcmpgt>
 8014b76:	2800      	cmp	r0, #0
 8014b78:	d0c2      	beq.n	8014b00 <floor+0x48>
 8014b7a:	2c00      	cmp	r4, #0
 8014b7c:	da0a      	bge.n	8014b94 <floor+0xdc>
 8014b7e:	2e14      	cmp	r6, #20
 8014b80:	d101      	bne.n	8014b86 <floor+0xce>
 8014b82:	3401      	adds	r4, #1
 8014b84:	e006      	b.n	8014b94 <floor+0xdc>
 8014b86:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8014b8a:	2301      	movs	r3, #1
 8014b8c:	40b3      	lsls	r3, r6
 8014b8e:	441d      	add	r5, r3
 8014b90:	4545      	cmp	r5, r8
 8014b92:	d3f6      	bcc.n	8014b82 <floor+0xca>
 8014b94:	ea25 0507 	bic.w	r5, r5, r7
 8014b98:	e7b2      	b.n	8014b00 <floor+0x48>
 8014b9a:	2500      	movs	r5, #0
 8014b9c:	462c      	mov	r4, r5
 8014b9e:	e7af      	b.n	8014b00 <floor+0x48>
 8014ba0:	8800759c 	.word	0x8800759c
 8014ba4:	7e37e43c 	.word	0x7e37e43c
 8014ba8:	bff00000 	.word	0xbff00000
 8014bac:	000fffff 	.word	0x000fffff

08014bb0 <floorf>:
 8014bb0:	ee10 3a10 	vmov	r3, s0
 8014bb4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014bb8:	3a7f      	subs	r2, #127	@ 0x7f
 8014bba:	2a16      	cmp	r2, #22
 8014bbc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014bc0:	dc2b      	bgt.n	8014c1a <floorf+0x6a>
 8014bc2:	2a00      	cmp	r2, #0
 8014bc4:	da12      	bge.n	8014bec <floorf+0x3c>
 8014bc6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8014c2c <floorf+0x7c>
 8014bca:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014bce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bd6:	dd06      	ble.n	8014be6 <floorf+0x36>
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	da24      	bge.n	8014c26 <floorf+0x76>
 8014bdc:	2900      	cmp	r1, #0
 8014bde:	4b14      	ldr	r3, [pc, #80]	@ (8014c30 <floorf+0x80>)
 8014be0:	bf08      	it	eq
 8014be2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8014be6:	ee00 3a10 	vmov	s0, r3
 8014bea:	4770      	bx	lr
 8014bec:	4911      	ldr	r1, [pc, #68]	@ (8014c34 <floorf+0x84>)
 8014bee:	4111      	asrs	r1, r2
 8014bf0:	420b      	tst	r3, r1
 8014bf2:	d0fa      	beq.n	8014bea <floorf+0x3a>
 8014bf4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8014c2c <floorf+0x7c>
 8014bf8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014bfc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c04:	ddef      	ble.n	8014be6 <floorf+0x36>
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	bfbe      	ittt	lt
 8014c0a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8014c0e:	fa40 f202 	asrlt.w	r2, r0, r2
 8014c12:	189b      	addlt	r3, r3, r2
 8014c14:	ea23 0301 	bic.w	r3, r3, r1
 8014c18:	e7e5      	b.n	8014be6 <floorf+0x36>
 8014c1a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8014c1e:	d3e4      	bcc.n	8014bea <floorf+0x3a>
 8014c20:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014c24:	4770      	bx	lr
 8014c26:	2300      	movs	r3, #0
 8014c28:	e7dd      	b.n	8014be6 <floorf+0x36>
 8014c2a:	bf00      	nop
 8014c2c:	7149f2ca 	.word	0x7149f2ca
 8014c30:	bf800000 	.word	0xbf800000
 8014c34:	007fffff 	.word	0x007fffff

08014c38 <_init>:
 8014c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c3a:	bf00      	nop
 8014c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c3e:	bc08      	pop	{r3}
 8014c40:	469e      	mov	lr, r3
 8014c42:	4770      	bx	lr

08014c44 <_fini>:
 8014c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c46:	bf00      	nop
 8014c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c4a:	bc08      	pop	{r3}
 8014c4c:	469e      	mov	lr, r3
 8014c4e:	4770      	bx	lr
