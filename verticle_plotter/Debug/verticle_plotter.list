
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba84  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800bc5c  0800bc5c  0000cc5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0ac  0800c0ac  0000e3b4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c0ac  0800c0ac  0000d0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0b4  0800c0b4  0000e3b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0b4  0800c0b4  0000d0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c0b8  0800c0b8  0000d0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003b4  20000000  0800c0bc  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b34  200003b4  0800c470  0000e3b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ee8  0800c470  0000eee8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e3b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000286c9  00000000  00000000  0000e3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b92  00000000  00000000  00036aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  0003b640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000145b  00000000  00000000  0003d090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c556  00000000  00000000  0003e4eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002681d  00000000  00000000  0006aa41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001188d8  00000000  00000000  0009125e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a9b36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007558  00000000  00000000  001a9b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001b10d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200003b4 	.word	0x200003b4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bc44 	.word	0x0800bc44

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200003b8 	.word	0x200003b8
 8000214:	0800bc44 	.word	0x0800bc44

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b988 	b.w	8000d1c <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9d08      	ldr	r5, [sp, #32]
 8000a2a:	468e      	mov	lr, r1
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	4688      	mov	r8, r1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d14a      	bne.n	8000aca <__udivmoddi4+0xa6>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4617      	mov	r7, r2
 8000a38:	d962      	bls.n	8000b00 <__udivmoddi4+0xdc>
 8000a3a:	fab2 f682 	clz	r6, r2
 8000a3e:	b14e      	cbz	r6, 8000a54 <__udivmoddi4+0x30>
 8000a40:	f1c6 0320 	rsb	r3, r6, #32
 8000a44:	fa01 f806 	lsl.w	r8, r1, r6
 8000a48:	fa20 f303 	lsr.w	r3, r0, r3
 8000a4c:	40b7      	lsls	r7, r6
 8000a4e:	ea43 0808 	orr.w	r8, r3, r8
 8000a52:	40b4      	lsls	r4, r6
 8000a54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a58:	fa1f fc87 	uxth.w	ip, r7
 8000a5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a60:	0c23      	lsrs	r3, r4, #16
 8000a62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d909      	bls.n	8000a86 <__udivmoddi4+0x62>
 8000a72:	18fb      	adds	r3, r7, r3
 8000a74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a78:	f080 80ea 	bcs.w	8000c50 <__udivmoddi4+0x22c>
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	f240 80e7 	bls.w	8000c50 <__udivmoddi4+0x22c>
 8000a82:	3902      	subs	r1, #2
 8000a84:	443b      	add	r3, r7
 8000a86:	1a9a      	subs	r2, r3, r2
 8000a88:	b2a3      	uxth	r3, r4
 8000a8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a9a:	459c      	cmp	ip, r3
 8000a9c:	d909      	bls.n	8000ab2 <__udivmoddi4+0x8e>
 8000a9e:	18fb      	adds	r3, r7, r3
 8000aa0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa4:	f080 80d6 	bcs.w	8000c54 <__udivmoddi4+0x230>
 8000aa8:	459c      	cmp	ip, r3
 8000aaa:	f240 80d3 	bls.w	8000c54 <__udivmoddi4+0x230>
 8000aae:	443b      	add	r3, r7
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ab6:	eba3 030c 	sub.w	r3, r3, ip
 8000aba:	2100      	movs	r1, #0
 8000abc:	b11d      	cbz	r5, 8000ac6 <__udivmoddi4+0xa2>
 8000abe:	40f3      	lsrs	r3, r6
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d905      	bls.n	8000ada <__udivmoddi4+0xb6>
 8000ace:	b10d      	cbz	r5, 8000ad4 <__udivmoddi4+0xb0>
 8000ad0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4608      	mov	r0, r1
 8000ad8:	e7f5      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000ada:	fab3 f183 	clz	r1, r3
 8000ade:	2900      	cmp	r1, #0
 8000ae0:	d146      	bne.n	8000b70 <__udivmoddi4+0x14c>
 8000ae2:	4573      	cmp	r3, lr
 8000ae4:	d302      	bcc.n	8000aec <__udivmoddi4+0xc8>
 8000ae6:	4282      	cmp	r2, r0
 8000ae8:	f200 8105 	bhi.w	8000cf6 <__udivmoddi4+0x2d2>
 8000aec:	1a84      	subs	r4, r0, r2
 8000aee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000af2:	2001      	movs	r0, #1
 8000af4:	4690      	mov	r8, r2
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	d0e5      	beq.n	8000ac6 <__udivmoddi4+0xa2>
 8000afa:	e9c5 4800 	strd	r4, r8, [r5]
 8000afe:	e7e2      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000b00:	2a00      	cmp	r2, #0
 8000b02:	f000 8090 	beq.w	8000c26 <__udivmoddi4+0x202>
 8000b06:	fab2 f682 	clz	r6, r2
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	f040 80a4 	bne.w	8000c58 <__udivmoddi4+0x234>
 8000b10:	1a8a      	subs	r2, r1, r2
 8000b12:	0c03      	lsrs	r3, r0, #16
 8000b14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b18:	b280      	uxth	r0, r0
 8000b1a:	b2bc      	uxth	r4, r7
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d907      	bls.n	8000b42 <__udivmoddi4+0x11e>
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x11c>
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	f200 80e0 	bhi.w	8000d00 <__udivmoddi4+0x2dc>
 8000b40:	46c4      	mov	ip, r8
 8000b42:	1a9b      	subs	r3, r3, r2
 8000b44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b50:	fb02 f404 	mul.w	r4, r2, r4
 8000b54:	429c      	cmp	r4, r3
 8000b56:	d907      	bls.n	8000b68 <__udivmoddi4+0x144>
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x142>
 8000b60:	429c      	cmp	r4, r3
 8000b62:	f200 80ca 	bhi.w	8000cfa <__udivmoddi4+0x2d6>
 8000b66:	4602      	mov	r2, r0
 8000b68:	1b1b      	subs	r3, r3, r4
 8000b6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b6e:	e7a5      	b.n	8000abc <__udivmoddi4+0x98>
 8000b70:	f1c1 0620 	rsb	r6, r1, #32
 8000b74:	408b      	lsls	r3, r1
 8000b76:	fa22 f706 	lsr.w	r7, r2, r6
 8000b7a:	431f      	orrs	r7, r3
 8000b7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000b80:	fa20 f306 	lsr.w	r3, r0, r6
 8000b84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b8c:	4323      	orrs	r3, r4
 8000b8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b92:	fa1f fc87 	uxth.w	ip, r7
 8000b96:	fbbe f0f9 	udiv	r0, lr, r9
 8000b9a:	0c1c      	lsrs	r4, r3, #16
 8000b9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ba0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ba4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	fa02 f201 	lsl.w	r2, r2, r1
 8000bae:	d909      	bls.n	8000bc4 <__udivmoddi4+0x1a0>
 8000bb0:	193c      	adds	r4, r7, r4
 8000bb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000bb6:	f080 809c 	bcs.w	8000cf2 <__udivmoddi4+0x2ce>
 8000bba:	45a6      	cmp	lr, r4
 8000bbc:	f240 8099 	bls.w	8000cf2 <__udivmoddi4+0x2ce>
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	443c      	add	r4, r7
 8000bc4:	eba4 040e 	sub.w	r4, r4, lr
 8000bc8:	fa1f fe83 	uxth.w	lr, r3
 8000bcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000bd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000bd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bdc:	45a4      	cmp	ip, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x1ce>
 8000be0:	193c      	adds	r4, r7, r4
 8000be2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000be6:	f080 8082 	bcs.w	8000cee <__udivmoddi4+0x2ca>
 8000bea:	45a4      	cmp	ip, r4
 8000bec:	d97f      	bls.n	8000cee <__udivmoddi4+0x2ca>
 8000bee:	3b02      	subs	r3, #2
 8000bf0:	443c      	add	r4, r7
 8000bf2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bf6:	eba4 040c 	sub.w	r4, r4, ip
 8000bfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bfe:	4564      	cmp	r4, ip
 8000c00:	4673      	mov	r3, lr
 8000c02:	46e1      	mov	r9, ip
 8000c04:	d362      	bcc.n	8000ccc <__udivmoddi4+0x2a8>
 8000c06:	d05f      	beq.n	8000cc8 <__udivmoddi4+0x2a4>
 8000c08:	b15d      	cbz	r5, 8000c22 <__udivmoddi4+0x1fe>
 8000c0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c12:	fa04 f606 	lsl.w	r6, r4, r6
 8000c16:	fa22 f301 	lsr.w	r3, r2, r1
 8000c1a:	431e      	orrs	r6, r3
 8000c1c:	40cc      	lsrs	r4, r1
 8000c1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c22:	2100      	movs	r1, #0
 8000c24:	e74f      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000c26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c2a:	0c01      	lsrs	r1, r0, #16
 8000c2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c30:	b280      	uxth	r0, r0
 8000c32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c36:	463b      	mov	r3, r7
 8000c38:	4638      	mov	r0, r7
 8000c3a:	463c      	mov	r4, r7
 8000c3c:	46b8      	mov	r8, r7
 8000c3e:	46be      	mov	lr, r7
 8000c40:	2620      	movs	r6, #32
 8000c42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c46:	eba2 0208 	sub.w	r2, r2, r8
 8000c4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c4e:	e766      	b.n	8000b1e <__udivmoddi4+0xfa>
 8000c50:	4601      	mov	r1, r0
 8000c52:	e718      	b.n	8000a86 <__udivmoddi4+0x62>
 8000c54:	4610      	mov	r0, r2
 8000c56:	e72c      	b.n	8000ab2 <__udivmoddi4+0x8e>
 8000c58:	f1c6 0220 	rsb	r2, r6, #32
 8000c5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000c60:	40b7      	lsls	r7, r6
 8000c62:	40b1      	lsls	r1, r6
 8000c64:	fa20 f202 	lsr.w	r2, r0, r2
 8000c68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c72:	b2bc      	uxth	r4, r7
 8000c74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c78:	0c11      	lsrs	r1, r2, #16
 8000c7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7e:	fb08 f904 	mul.w	r9, r8, r4
 8000c82:	40b0      	lsls	r0, r6
 8000c84:	4589      	cmp	r9, r1
 8000c86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c8a:	b280      	uxth	r0, r0
 8000c8c:	d93e      	bls.n	8000d0c <__udivmoddi4+0x2e8>
 8000c8e:	1879      	adds	r1, r7, r1
 8000c90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c94:	d201      	bcs.n	8000c9a <__udivmoddi4+0x276>
 8000c96:	4589      	cmp	r9, r1
 8000c98:	d81f      	bhi.n	8000cda <__udivmoddi4+0x2b6>
 8000c9a:	eba1 0109 	sub.w	r1, r1, r9
 8000c9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ca2:	fb09 f804 	mul.w	r8, r9, r4
 8000ca6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000caa:	b292      	uxth	r2, r2
 8000cac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cb0:	4542      	cmp	r2, r8
 8000cb2:	d229      	bcs.n	8000d08 <__udivmoddi4+0x2e4>
 8000cb4:	18ba      	adds	r2, r7, r2
 8000cb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000cba:	d2c4      	bcs.n	8000c46 <__udivmoddi4+0x222>
 8000cbc:	4542      	cmp	r2, r8
 8000cbe:	d2c2      	bcs.n	8000c46 <__udivmoddi4+0x222>
 8000cc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000cc4:	443a      	add	r2, r7
 8000cc6:	e7be      	b.n	8000c46 <__udivmoddi4+0x222>
 8000cc8:	45f0      	cmp	r8, lr
 8000cca:	d29d      	bcs.n	8000c08 <__udivmoddi4+0x1e4>
 8000ccc:	ebbe 0302 	subs.w	r3, lr, r2
 8000cd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000cd4:	3801      	subs	r0, #1
 8000cd6:	46e1      	mov	r9, ip
 8000cd8:	e796      	b.n	8000c08 <__udivmoddi4+0x1e4>
 8000cda:	eba7 0909 	sub.w	r9, r7, r9
 8000cde:	4449      	add	r1, r9
 8000ce0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ce4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ce8:	fb09 f804 	mul.w	r8, r9, r4
 8000cec:	e7db      	b.n	8000ca6 <__udivmoddi4+0x282>
 8000cee:	4673      	mov	r3, lr
 8000cf0:	e77f      	b.n	8000bf2 <__udivmoddi4+0x1ce>
 8000cf2:	4650      	mov	r0, sl
 8000cf4:	e766      	b.n	8000bc4 <__udivmoddi4+0x1a0>
 8000cf6:	4608      	mov	r0, r1
 8000cf8:	e6fd      	b.n	8000af6 <__udivmoddi4+0xd2>
 8000cfa:	443b      	add	r3, r7
 8000cfc:	3a02      	subs	r2, #2
 8000cfe:	e733      	b.n	8000b68 <__udivmoddi4+0x144>
 8000d00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d04:	443b      	add	r3, r7
 8000d06:	e71c      	b.n	8000b42 <__udivmoddi4+0x11e>
 8000d08:	4649      	mov	r1, r9
 8000d0a:	e79c      	b.n	8000c46 <__udivmoddi4+0x222>
 8000d0c:	eba1 0109 	sub.w	r1, r1, r9
 8000d10:	46c4      	mov	ip, r8
 8000d12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d16:	fb09 f804 	mul.w	r8, r9, r4
 8000d1a:	e7c4      	b.n	8000ca6 <__udivmoddi4+0x282>

08000d1c <__aeabi_idiv0>:
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	@ 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6178      	str	r0, [r7, #20]
 8000d28:	6139      	str	r1, [r7, #16]
 8000d2a:	60fa      	str	r2, [r7, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	68ba      	ldr	r2, [r7, #8]
 8000d46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000d4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	683a      	ldr	r2, [r7, #0]
 8000d5a:	615a      	str	r2, [r3, #20]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	e008      	b.n	8000d74 <ADC_DMA_Init+0x54>
        buffer[i] = 0;
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	4413      	add	r3, r2
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3301      	adds	r3, #1
 8000d72:	61fb      	str	r3, [r7, #28]
 8000d74:	69fa      	ldr	r2, [r7, #28]
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d3f2      	bcc.n	8000d62 <ADC_DMA_Init+0x42>
    }
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	3724      	adds	r7, #36	@ 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	217f      	movs	r1, #127	@ 0x7f
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f004 f851 	bl	8004e40 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6818      	ldr	r0, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6859      	ldr	r1, [r3, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	461a      	mov	r2, r3
 8000dac:	f003 f93a 	bl	8004024 <HAL_ADC_Start_DMA>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <PID_CONTROLLER_Init>:
  if (_u > _upper_limit) return _upper_limit;
  else if (_u < _lower_limit) return _lower_limit;
  return (int32_t)_u;
}

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 8000db8:	b480      	push	{r7}
 8000dba:	b087      	sub	sp, #28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6178      	str	r0, [r7, #20]
 8000dc0:	ed87 0a04 	vstr	s0, [r7, #16]
 8000dc4:	edc7 0a03 	vstr	s1, [r7, #12]
 8000dc8:	ed87 1a02 	vstr	s2, [r7, #8]
 8000dcc:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f04f 0200 	mov.w	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	f04f 0200 	mov.w	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]

}
 8000e00:	bf00      	nop
 8000e02:	371c      	adds	r7, #28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	88fa      	ldrh	r2, [r7, #6]
 8000e26:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3328      	adds	r3, #40	@ 0x28
 8000e2c:	88fa      	ldrh	r2, [r7, #6]
 8000e2e:	68b9      	ldr	r1, [r7, #8]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 fd91 	bl	8001958 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	8b3a      	ldrh	r2, [r7, #24]
 8000e40:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2201      	movs	r2, #1
 8000e48:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e60:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d15f      	bne.n	8000f2e <MDXX_set_range+0xda>
		if (duty == 0) {
 8000e6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7a:	d115      	bne.n	8000ea8 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	3310      	adds	r3, #16
 8000e80:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001000 <MDXX_set_range+0x1ac>
 8000e84:	ed97 0a02 	vldr	s0, [r7, #8]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 fd89 	bl	80019a0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	3328      	adds	r3, #40	@ 0x28
 8000e92:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001000 <MDXX_set_range+0x1ac>
 8000e96:	ed97 0a02 	vldr	s0, [r7, #8]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fd80 	bl	80019a0 <PWM_write_range>
			mdxx->cmd = 0;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 8000ea6:	e0a6      	b.n	8000ff6 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8000ea8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb4:	dd1a      	ble.n	8000eec <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	3310      	adds	r3, #16
 8000eba:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001000 <MDXX_set_range+0x1ac>
 8000ebe:	ed97 0a02 	vldr	s0, [r7, #8]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 fd6c 	bl	80019a0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	3328      	adds	r3, #40	@ 0x28
 8000ecc:	edd7 0a01 	vldr	s1, [r7, #4]
 8000ed0:	ed97 0a02 	vldr	s0, [r7, #8]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 fd63 	bl	80019a0 <PWM_write_range>
			mdxx->cmd = duty;
 8000eda:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ede:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee2:	ee17 2a90 	vmov	r2, s15
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000eea:	e084      	b.n	8000ff6 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	3310      	adds	r3, #16
 8000ef0:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001004 <MDXX_set_range+0x1b0>
 8000ef4:	ed97 0a02 	vldr	s0, [r7, #8]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 fd51 	bl	80019a0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	3328      	adds	r3, #40	@ 0x28
 8000f02:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f06:	eef0 7ae7 	vabs.f32	s15, s15
 8000f0a:	eef0 0a67 	vmov.f32	s1, s15
 8000f0e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 fd44 	bl	80019a0 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8000f18:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f1c:	eef0 7ae7 	vabs.f32	s15, s15
 8000f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f24:	ee17 2a90 	vmov	r2, s15
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f2c:	e063      	b.n	8000ff6 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d15e      	bne.n	8000ff6 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8000f38:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f3c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f44:	d115      	bne.n	8000f72 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8000f50:	2200      	movs	r2, #0
 8000f52:	4619      	mov	r1, r3
 8000f54:	f004 fea2 	bl	8005c9c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3328      	adds	r3, #40	@ 0x28
 8000f5c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001000 <MDXX_set_range+0x1ac>
 8000f60:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fd1b 	bl	80019a0 <PWM_write_range>
			mdxx->cmd = 0;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f70:	e041      	b.n	8000ff6 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8000f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7e:	dd1a      	ble.n	8000fb6 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f004 fe85 	bl	8005c9c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	3328      	adds	r3, #40	@ 0x28
 8000f96:	edd7 0a01 	vldr	s1, [r7, #4]
 8000f9a:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fcfe 	bl	80019a0 <PWM_write_range>
			mdxx->cmd = duty;
 8000fa4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fac:	ee17 2a90 	vmov	r2, s15
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000fb4:	e01f      	b.n	8000ff6 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f004 fe6a 	bl	8005c9c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3328      	adds	r3, #40	@ 0x28
 8000fcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd0:	eef0 7ae7 	vabs.f32	s15, s15
 8000fd4:	eef0 0a67 	vmov.f32	s1, s15
 8000fd8:	ed97 0a02 	vldr	s0, [r7, #8]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 fcdf 	bl	80019a0 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8000fe2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fe6:	eef0 7ae7 	vabs.f32	s15, s15
 8000fea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fee:	ee17 2a90 	vmov	r2, s15
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	00000000 	.word	0x00000000
 8001004:	42c80000 	.word	0x42c80000

08001008 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, // kg
    .c = 64.83e-3,           // m
    .prismatic_pulley = 1.5915e-2 // m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	601a      	str	r2, [r3, #0]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <REVOLUTE_MOTOR_DFD_Init>:
    float v = qd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	605a      	str	r2, [r3, #4]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <PRISMATIC_MOTOR_FFD_Init>:
    float v = (gravity_compensate_plotter + gravity_compensate_rail + mass_torque) * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	601a      	str	r2, [r3, #0]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <PRISMATIC_MOTOR_DFD_Init>:
    float v = sd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	605a      	str	r2, [r3, #4]
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001088:	b580      	push	{r7, lr}
 800108a:	ed2d 8b02 	vpush	{d8}
 800108e:	b08a      	sub	sp, #40	@ 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	460b      	mov	r3, r1
 8001096:	ed87 0a01 	vstr	s0, [r7, #4]
 800109a:	edc7 0a00 	vstr	s1, [r7]
 800109e:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 80010a0:	897b      	ldrh	r3, [r7, #10]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <FIR_init+0x2a>
        numTaps += 1;
 80010ac:	897b      	ldrh	r3, [r7, #10]
 80010ae:	3301      	adds	r3, #1
 80010b0:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	897a      	ldrh	r2, [r7, #10]
 80010b6:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2200      	movs	r2, #0
 80010bc:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 80010be:	897b      	ldrh	r3, [r7, #10]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4618      	mov	r0, r3
 80010c4:	f009 ff42 	bl	800af4c <malloc>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 80010d0:	897b      	ldrh	r3, [r7, #10]
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4618      	mov	r0, r3
 80010d6:	f009 ff39 	bl	800af4c <malloc>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 80e0 	beq.w	80012ac <FIR_init+0x224>
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 80db 	beq.w	80012ac <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 80010f6:	2300      	movs	r3, #0
 80010f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80010fa:	e00a      	b.n	8001112 <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 800110c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800110e:	3301      	adds	r3, #1
 8001110:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001112:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001114:	897b      	ldrh	r3, [r7, #10]
 8001116:	429a      	cmp	r2, r3
 8001118:	d3f0      	bcc.n	80010fc <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 800111a:	edd7 6a01 	vldr	s13, [r7, #4]
 800111e:	ed97 7a00 	vldr	s14, [r7]
 8001122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001126:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 800112a:	897b      	ldrh	r3, [r7, #10]
 800112c:	085b      	lsrs	r3, r3, #1
 800112e:	b29b      	uxth	r3, r3
 8001130:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001132:	2300      	movs	r3, #0
 8001134:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001136:	e077      	b.n	8001228 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001138:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800113c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001140:	429a      	cmp	r2, r3
 8001142:	d10c      	bne.n	800115e <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	edd7 7a06 	vldr	s15, [r7, #24]
 8001154:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001158:	edc3 7a00 	vstr	s15, [r3]
 800115c:	e02c      	b.n	80011b8 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 800115e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001160:	8afb      	ldrh	r3, [r7, #22]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	b29b      	uxth	r3, r3
 8001166:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001168:	edd7 7a06 	vldr	s15, [r7, #24]
 800116c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80012b8 <FIR_init+0x230>
 8001170:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001174:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001178:	ee07 3a90 	vmov	s15, r3
 800117c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001184:	eeb0 0a67 	vmov.f32	s0, s15
 8001188:	f00a f82c 	bl	800b1e4 <sinf>
 800118c:	eef0 6a40 	vmov.f32	s13, s0
 8001190:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001194:	ee07 3a90 	vmov	s15, r3
 8001198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800119c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80012bc <FIR_init+0x234>
 80011a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b4:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	ed93 8a00 	vldr	s16, [r3]
 80011c8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80011cc:	ee07 3a90 	vmov	s15, r3
 80011d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80012b8 <FIR_init+0x230>
 80011d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011dc:	897b      	ldrh	r3, [r7, #10]
 80011de:	3b01      	subs	r3, #1
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011ec:	eeb0 0a66 	vmov.f32	s0, s13
 80011f0:	f009 ffb4 	bl	800b15c <cosf>
 80011f4:	eef0 7a40 	vmov.f32	s15, s0
 80011f8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80012c0 <FIR_init+0x238>
 80011fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001200:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80012c4 <FIR_init+0x23c>
 8001204:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001218:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 800121c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001220:	b29b      	uxth	r3, r3
 8001222:	3301      	adds	r3, #1
 8001224:	b29b      	uxth	r3, r3
 8001226:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001228:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800122c:	897b      	ldrh	r3, [r7, #10]
 800122e:	429a      	cmp	r2, r3
 8001230:	db82      	blt.n	8001138 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001238:	2300      	movs	r3, #0
 800123a:	83fb      	strh	r3, [r7, #30]
 800123c:	e00f      	b.n	800125e <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	8bfb      	ldrh	r3, [r7, #30]
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	edd3 7a00 	vldr	s15, [r3]
 800124c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001254:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001258:	8bfb      	ldrh	r3, [r7, #30]
 800125a:	3301      	adds	r3, #1
 800125c:	83fb      	strh	r3, [r7, #30]
 800125e:	8bfa      	ldrh	r2, [r7, #30]
 8001260:	897b      	ldrh	r3, [r7, #10]
 8001262:	429a      	cmp	r2, r3
 8001264:	d3eb      	bcc.n	800123e <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001266:	edd7 7a08 	vldr	s15, [r7, #32]
 800126a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800126e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001272:	d01b      	beq.n	80012ac <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001274:	2300      	movs	r3, #0
 8001276:	83bb      	strh	r3, [r7, #28]
 8001278:	e014      	b.n	80012a4 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	8bbb      	ldrh	r3, [r7, #28]
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	edd3 6a00 	vldr	s13, [r3]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	8bbb      	ldrh	r3, [r7, #28]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	ed97 7a08 	vldr	s14, [r7, #32]
 8001296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800129a:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 800129e:	8bbb      	ldrh	r3, [r7, #28]
 80012a0:	3301      	adds	r3, #1
 80012a2:	83bb      	strh	r3, [r7, #28]
 80012a4:	8bba      	ldrh	r2, [r7, #28]
 80012a6:	897b      	ldrh	r3, [r7, #10]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d3e6      	bcc.n	800127a <FIR_init+0x1f2>
            }
        }
    }
}
 80012ac:	bf00      	nop
 80012ae:	3728      	adds	r7, #40	@ 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	ecbd 8b02 	vpop	{d8}
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40c90fdb 	.word	0x40c90fdb
 80012bc:	40490fdb 	.word	0x40490fdb
 80012c0:	3eeb851f 	.word	0x3eeb851f
 80012c4:	3f0a3d71 	.word	0x3f0a3d71

080012c8 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80012cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <modbus_1t5_Timeout+0x3c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2201      	movs	r2, #1
 80012d2:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80012d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <modbus_1t5_Timeout+0x3c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2200      	movs	r2, #0
 80012de:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 80012e0:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <modbus_1t5_Timeout+0x3c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <modbus_1t5_Timeout+0x3c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0201 	orr.w	r2, r2, #1
 80012f6:	601a      	str	r2, [r3, #0]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	200003d0 	.word	0x200003d0

08001308 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001310:	4b04      	ldr	r3, [pc, #16]	@ (8001324 <modbus_3t5_Timeout+0x1c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2201      	movs	r2, #1
 8001316:	755a      	strb	r2, [r3, #21]

}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	200003d0 	.word	0x200003d0

08001328 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f008 fccf 	bl	8009cd4 <HAL_UART_GetError>
 8001336:	4603      	mov	r3, r0
 8001338:	2b20      	cmp	r3, #32
 800133a:	d101      	bne.n	8001340 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 800133c:	f7ff ffc4 	bl	80012c8 <modbus_1t5_Timeout>

	}
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
 8001354:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001356:	4a2d      	ldr	r2, [pc, #180]	@ (800140c <Modbus_init+0xc4>)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 800135c:	4b2b      	ldr	r3, [pc, #172]	@ (800140c <Modbus_init+0xc4>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001364:	4b29      	ldr	r3, [pc, #164]	@ (800140c <Modbus_init+0xc4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 800136c:	4b27      	ldr	r3, [pc, #156]	@ (800140c <Modbus_init+0xc4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001374:	4b25      	ldr	r3, [pc, #148]	@ (800140c <Modbus_init+0xc4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	7e3a      	ldrb	r2, [r7, #24]
 800137a:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 800137c:	4b23      	ldr	r3, [pc, #140]	@ (800140c <Modbus_init+0xc4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	69fa      	ldr	r2, [r7, #28]
 8001382:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	4a21      	ldr	r2, [pc, #132]	@ (8001410 <Modbus_init+0xc8>)
 800138a:	210e      	movs	r1, #14
 800138c:	4618      	mov	r0, r3
 800138e:	f006 fecf 	bl	8008130 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	2110      	movs	r1, #16
 8001398:	4618      	mov	r0, r3
 800139a:	f008 fc45 	bl	8009c28 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f008 fc5c 	bl	8009c60 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	4a19      	ldr	r2, [pc, #100]	@ (8001414 <Modbus_init+0xcc>)
 80013ae:	2104      	movs	r1, #4
 80013b0:	4618      	mov	r0, r3
 80013b2:	f007 ff0d 	bl	80091d0 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80013b6:	4b15      	ldr	r3, [pc, #84]	@ (800140c <Modbus_init+0xc4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80013bc:	4b13      	ldr	r3, [pc, #76]	@ (800140c <Modbus_init+0xc4>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b12      	ldr	r3, [pc, #72]	@ (800140c <Modbus_init+0xc4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80013c8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80013cc:	4413      	add	r3, r2
 80013ce:	3302      	adds	r3, #2
 80013d0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80013d4:	4619      	mov	r1, r3
 80013d6:	f008 f835 	bl	8009444 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80013da:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <Modbus_init+0xc4>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d10c      	bne.n	8001404 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80013ea:	4b08      	ldr	r3, [pc, #32]	@ (800140c <Modbus_init+0xc4>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f005 fd87 	bl	8006f04 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80013f6:	4b05      	ldr	r3, [pc, #20]	@ (800140c <Modbus_init+0xc4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f006 f84e 	bl	80074a0 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200003d0 	.word	0x200003d0
 8001410:	08001309 	.word	0x08001309
 8001414:	08001329 	.word	0x08001329

08001418 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001424:	23ff      	movs	r3, #255	@ 0xff
 8001426:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001428:	23ff      	movs	r3, #255	@ 0xff
 800142a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800142c:	e013      	b.n	8001456 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	781a      	ldrb	r2, [r3, #0]
 8001436:	7bbb      	ldrb	r3, [r7, #14]
 8001438:	4053      	eors	r3, r2
 800143a:	b2db      	uxtb	r3, r3
 800143c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800143e:	4a10      	ldr	r2, [pc, #64]	@ (8001480 <CRC16+0x68>)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	4413      	add	r3, r2
 8001444:	781a      	ldrb	r2, [r3, #0]
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	4053      	eors	r3, r2
 800144a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800144c:	4a0d      	ldr	r2, [pc, #52]	@ (8001484 <CRC16+0x6c>)
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	4413      	add	r3, r2
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001456:	883b      	ldrh	r3, [r7, #0]
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	803a      	strh	r2, [r7, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1e6      	bne.n	800142e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	b21b      	sxth	r3, r3
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	b21a      	sxth	r2, r3
 8001468:	7bbb      	ldrb	r3, [r7, #14]
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b21b      	sxth	r3, r3
 8001470:	b29b      	uxth	r3, r3
}
 8001472:	4618      	mov	r0, r3
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	200001b8 	.word	0x200001b8
 8001484:	200000b8 	.word	0x200000b8

08001488 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800148e:	4b7e      	ldr	r3, [pc, #504]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	7ddb      	ldrb	r3, [r3, #23]
 8001494:	3b01      	subs	r3, #1
 8001496:	2b03      	cmp	r3, #3
 8001498:	d80a      	bhi.n	80014b0 <Modbus_Protocal_Worker+0x28>
 800149a:	a201      	add	r2, pc, #4	@ (adr r2, 80014a0 <Modbus_Protocal_Worker+0x18>)
 800149c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a0:	080014bb 	.word	0x080014bb
 80014a4:	0800164f 	.word	0x0800164f
 80014a8:	08001547 	.word	0x08001547
 80014ac:	0800158b 	.word	0x0800158b
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80014b0:	4b75      	ldr	r3, [pc, #468]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2201      	movs	r2, #1
 80014b6:	75da      	strb	r2, [r3, #23]
		break;
 80014b8:	e0e1      	b.n	800167e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80014ba:	4b73      	ldr	r3, [pc, #460]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d006      	beq.n	80014d4 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80014c6:	4b70      	ldr	r3, [pc, #448]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2202      	movs	r2, #2
 80014cc:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80014ce:	f000 f9cd 	bl	800186c <Modbus_Emission>
 80014d2:	e018      	b.n	8001506 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80014d4:	4b6c      	ldr	r3, [pc, #432]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80014de:	4b6a      	ldr	r3, [pc, #424]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d00b      	beq.n	8001506 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80014ee:	4b66      	ldr	r3, [pc, #408]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2200      	movs	r2, #0
 80014f4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80014f6:	4b64      	ldr	r3, [pc, #400]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2200      	movs	r2, #0
 80014fc:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80014fe:	4b62      	ldr	r3, [pc, #392]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2203      	movs	r2, #3
 8001504:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001506:	4b60      	ldr	r3, [pc, #384]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001510:	2b20      	cmp	r3, #32
 8001512:	f040 80ad 	bne.w	8001670 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001516:	4b5c      	ldr	r3, [pc, #368]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2200      	movs	r2, #0
 800151c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001520:	4b59      	ldr	r3, [pc, #356]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001526:	4b58      	ldr	r3, [pc, #352]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4b57      	ldr	r3, [pc, #348]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001532:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001536:	4413      	add	r3, r2
 8001538:	3302      	adds	r3, #2
 800153a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800153e:	4619      	mov	r1, r3
 8001540:	f007 ff80 	bl	8009444 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001544:	e094      	b.n	8001670 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001546:	4b50      	ldr	r3, [pc, #320]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	7d1b      	ldrb	r3, [r3, #20]
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 8091 	beq.w	8001674 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001552:	4b4d      	ldr	r3, [pc, #308]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	22fe      	movs	r2, #254	@ 0xfe
 8001558:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800155a:	4b4b      	ldr	r3, [pc, #300]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001564:	4b48      	ldr	r3, [pc, #288]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001574:	4b44      	ldr	r3, [pc, #272]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 8001576:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001578:	1a8a      	subs	r2, r1, r2
 800157a:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 800157c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001580:	4b41      	ldr	r3, [pc, #260]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2204      	movs	r2, #4
 8001586:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001588:	e074      	b.n	8001674 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800158a:	4b3f      	ldr	r3, [pc, #252]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001592:	f113 0f02 	cmn.w	r3, #2
 8001596:	d150      	bne.n	800163a <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001598:	4b3b      	ldr	r3, [pc, #236]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2200      	movs	r2, #0
 800159e:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80015a0:	4b39      	ldr	r3, [pc, #228]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80015a8:	4b37      	ldr	r3, [pc, #220]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80015b0:	3b02      	subs	r3, #2
 80015b2:	4619      	mov	r1, r3
 80015b4:	4610      	mov	r0, r2
 80015b6:	f7ff ff2f 	bl	8001418 <CRC16>
 80015ba:	4603      	mov	r3, r0
 80015bc:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80015be:	793a      	ldrb	r2, [r7, #4]
 80015c0:	4b31      	ldr	r3, [pc, #196]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 80015c2:	6819      	ldr	r1, [r3, #0]
 80015c4:	4b30      	ldr	r3, [pc, #192]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80015cc:	3b02      	subs	r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d10c      	bne.n	80015f2 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80015d8:	797a      	ldrb	r2, [r7, #5]
 80015da:	4b2b      	ldr	r3, [pc, #172]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 80015dc:	6819      	ldr	r1, [r3, #0]
 80015de:	4b2a      	ldr	r3, [pc, #168]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80015e6:	3b01      	subs	r3, #1
 80015e8:	440b      	add	r3, r1
 80015ea:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d004      	beq.n	80015fc <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80015f2:	4b25      	ldr	r3, [pc, #148]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	22ff      	movs	r2, #255	@ 0xff
 80015f8:	759a      	strb	r2, [r3, #22]
				break;
 80015fa:	e040      	b.n	800167e <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80015fc:	4b22      	ldr	r3, [pc, #136]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001604:	4b20      	ldr	r3, [pc, #128]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d113      	bne.n	8001636 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800160e:	4b1e      	ldr	r3, [pc, #120]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001616:	4b1c      	ldr	r3, [pc, #112]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800161e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001620:	4b19      	ldr	r3, [pc, #100]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001628:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800162a:	461a      	mov	r2, r3
 800162c:	f009 fd88 	bl	800b140 <memcpy>

			//execute command
			Modbus_frame_response();
 8001630:	f000 f904 	bl	800183c <Modbus_frame_response>
 8001634:	e001      	b.n	800163a <Modbus_Protocal_Worker+0x1b2>
				break;
 8001636:	bf00      	nop
					}
		break;


	}
}
 8001638:	e021      	b.n	800167e <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800163a:	4b13      	ldr	r3, [pc, #76]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	7d5b      	ldrb	r3, [r3, #21]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d019      	beq.n	8001678 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001644:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2201      	movs	r2, #1
 800164a:	75da      	strb	r2, [r3, #23]
		break;
 800164c:	e014      	b.n	8001678 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800164e:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001658:	2b20      	cmp	r3, #32
 800165a:	d10f      	bne.n	800167c <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 800165c:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001666:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <Modbus_Protocal_Worker+0x200>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2201      	movs	r2, #1
 800166c:	75da      	strb	r2, [r3, #23]
		break;
 800166e:	e005      	b.n	800167c <Modbus_Protocal_Worker+0x1f4>
		break;
 8001670:	bf00      	nop
 8001672:	e004      	b.n	800167e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001674:	bf00      	nop
 8001676:	e002      	b.n	800167e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001678:	bf00      	nop
 800167a:	e000      	b.n	800167e <Modbus_Protocal_Worker+0x1f6>
		break;
 800167c:	bf00      	nop
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200003d0 	.word	0x200003d0

0800168c <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001692:	4b1d      	ldr	r3, [pc, #116]	@ (8001708 <modbusWrite1Register+0x7c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	7e5b      	ldrb	r3, [r3, #25]
 8001698:	021b      	lsls	r3, r3, #8
 800169a:	b29b      	uxth	r3, r3
 800169c:	4a1a      	ldr	r2, [pc, #104]	@ (8001708 <modbusWrite1Register+0x7c>)
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	7e92      	ldrb	r2, [r2, #26]
 80016a2:	4413      	add	r3, r2
 80016a4:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80016a6:	88fa      	ldrh	r2, [r7, #6]
 80016a8:	4b17      	ldr	r3, [pc, #92]	@ (8001708 <modbusWrite1Register+0x7c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d903      	bls.n	80016ba <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80016b2:	2002      	movs	r0, #2
 80016b4:	f000 f8a0 	bl	80017f8 <ModbusErrorReply>
			 return;
 80016b8:	e023      	b.n	8001702 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80016ba:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <modbusWrite1Register+0x7c>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <modbusWrite1Register+0x7c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	440b      	add	r3, r1
 80016ca:	7ed2      	ldrb	r2, [r2, #27]
 80016cc:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80016ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001708 <modbusWrite1Register+0x7c>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001708 <modbusWrite1Register+0x7c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6859      	ldr	r1, [r3, #4]
 80016d8:	88fb      	ldrh	r3, [r7, #6]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	440b      	add	r3, r1
 80016de:	7f12      	ldrb	r2, [r2, #28]
 80016e0:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80016e2:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <modbusWrite1Register+0x7c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80016ea:	4b07      	ldr	r3, [pc, #28]	@ (8001708 <modbusWrite1Register+0x7c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 80016f0:	2208      	movs	r2, #8
 80016f2:	4619      	mov	r1, r3
 80016f4:	f009 fd24 	bl	800b140 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80016f8:	4b03      	ldr	r3, [pc, #12]	@ (8001708 <modbusWrite1Register+0x7c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2205      	movs	r2, #5
 80016fe:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200003d0 	.word	0x200003d0

0800170c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800170c:	b590      	push	{r4, r7, lr}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001712:	4b38      	ldr	r3, [pc, #224]	@ (80017f4 <modbusRead1Register+0xe8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	7edb      	ldrb	r3, [r3, #27]
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	b29b      	uxth	r3, r3
 800171c:	4a35      	ldr	r2, [pc, #212]	@ (80017f4 <modbusRead1Register+0xe8>)
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	7f12      	ldrb	r2, [r2, #28]
 8001722:	4413      	add	r3, r2
 8001724:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001726:	4b33      	ldr	r3, [pc, #204]	@ (80017f4 <modbusRead1Register+0xe8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	7e5b      	ldrb	r3, [r3, #25]
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	b29b      	uxth	r3, r3
 8001730:	4a30      	ldr	r2, [pc, #192]	@ (80017f4 <modbusRead1Register+0xe8>)
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	7e92      	ldrb	r2, [r2, #26]
 8001736:	4413      	add	r3, r2
 8001738:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <modbusRead1Register+0x3a>
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	2b7d      	cmp	r3, #125	@ 0x7d
 8001744:	d903      	bls.n	800174e <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001746:	2003      	movs	r0, #3
 8001748:	f000 f856 	bl	80017f8 <ModbusErrorReply>
		 return;
 800174c:	e04e      	b.n	80017ec <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800174e:	88ba      	ldrh	r2, [r7, #4]
 8001750:	4b28      	ldr	r3, [pc, #160]	@ (80017f4 <modbusRead1Register+0xe8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	429a      	cmp	r2, r3
 8001758:	d808      	bhi.n	800176c <modbusRead1Register+0x60>
 800175a:	88ba      	ldrh	r2, [r7, #4]
 800175c:	88fb      	ldrh	r3, [r7, #6]
 800175e:	4413      	add	r3, r2
 8001760:	461a      	mov	r2, r3
 8001762:	4b24      	ldr	r3, [pc, #144]	@ (80017f4 <modbusRead1Register+0xe8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	429a      	cmp	r2, r3
 800176a:	d903      	bls.n	8001774 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800176c:	2002      	movs	r0, #2
 800176e:	f000 f843 	bl	80017f8 <ModbusErrorReply>
		 return;
 8001772:	e03b      	b.n	80017ec <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001774:	4b1f      	ldr	r3, [pc, #124]	@ (80017f4 <modbusRead1Register+0xe8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2203      	movs	r2, #3
 800177a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4b1c      	ldr	r3, [pc, #112]	@ (80017f4 <modbusRead1Register+0xe8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	0052      	lsls	r2, r2, #1
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800178e:	2400      	movs	r4, #0
 8001790:	e020      	b.n	80017d4 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001792:	4b18      	ldr	r3, [pc, #96]	@ (80017f4 <modbusRead1Register+0xe8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	88bb      	ldrh	r3, [r7, #4]
 800179a:	4423      	add	r3, r4
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	18d1      	adds	r1, r2, r3
 80017a0:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <modbusRead1Register+0xe8>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	1c63      	adds	r3, r4, #1
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	7849      	ldrb	r1, [r1, #1]
 80017aa:	4413      	add	r3, r2
 80017ac:	460a      	mov	r2, r1
 80017ae:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80017b2:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <modbusRead1Register+0xe8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	88bb      	ldrh	r3, [r7, #4]
 80017ba:	4423      	add	r3, r4
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	18d1      	adds	r1, r2, r3
 80017c0:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <modbusRead1Register+0xe8>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	0063      	lsls	r3, r4, #1
 80017c6:	3303      	adds	r3, #3
 80017c8:	7809      	ldrb	r1, [r1, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	460a      	mov	r2, r1
 80017ce:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80017d2:	3401      	adds	r4, #1
 80017d4:	88fb      	ldrh	r3, [r7, #6]
 80017d6:	429c      	cmp	r4, r3
 80017d8:	dbdb      	blt.n	8001792 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	3301      	adds	r3, #1
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <modbusRead1Register+0xe8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	0052      	lsls	r2, r2, #1
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd90      	pop	{r4, r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200003d0 	.word	0x200003d0

080017f8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001802:	4b0d      	ldr	r3, [pc, #52]	@ (8001838 <ModbusErrorReply+0x40>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	7e1a      	ldrb	r2, [r3, #24]
 8001808:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <ModbusErrorReply+0x40>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001816:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <ModbusErrorReply+0x40>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	79fa      	ldrb	r2, [r7, #7]
 800181c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001820:	4b05      	ldr	r3, [pc, #20]	@ (8001838 <ModbusErrorReply+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2202      	movs	r2, #2
 8001826:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	200003d0 	.word	0x200003d0

0800183c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001840:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <Modbus_frame_response+0x2c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	7e1b      	ldrb	r3, [r3, #24]
 8001846:	2b03      	cmp	r3, #3
 8001848:	d004      	beq.n	8001854 <Modbus_frame_response+0x18>
 800184a:	2b06      	cmp	r3, #6
 800184c:	d105      	bne.n	800185a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800184e:	f7ff ff1d 	bl	800168c <modbusWrite1Register>
		break;
 8001852:	e006      	b.n	8001862 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001854:	f7ff ff5a 	bl	800170c <modbusRead1Register>
		break;
 8001858:	e003      	b.n	8001862 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800185a:	2001      	movs	r0, #1
 800185c:	f7ff ffcc 	bl	80017f8 <ModbusErrorReply>
		break;
 8001860:	bf00      	nop

	}
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200003d0 	.word	0x200003d0

0800186c <Modbus_Emission>:

void Modbus_Emission()
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001872:	4b38      	ldr	r3, [pc, #224]	@ (8001954 <Modbus_Emission+0xe8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800187c:	2b20      	cmp	r3, #32
 800187e:	d15d      	bne.n	800193c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001880:	4b34      	ldr	r3, [pc, #208]	@ (8001954 <Modbus_Emission+0xe8>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b33      	ldr	r3, [pc, #204]	@ (8001954 <Modbus_Emission+0xe8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	7812      	ldrb	r2, [r2, #0]
 800188a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800188e:	4b31      	ldr	r3, [pc, #196]	@ (8001954 <Modbus_Emission+0xe8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001896:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001898:	4b2e      	ldr	r3, [pc, #184]	@ (8001954 <Modbus_Emission+0xe8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 80018a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001954 <Modbus_Emission+0xe8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 80018a8:	461a      	mov	r2, r3
 80018aa:	f009 fc49 	bl	800b140 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80018ae:	4b29      	ldr	r3, [pc, #164]	@ (8001954 <Modbus_Emission+0xe8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b26      	ldr	r3, [pc, #152]	@ (8001954 <Modbus_Emission+0xe8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	3203      	adds	r2, #3
 80018be:	b292      	uxth	r2, r2
 80018c0:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80018c4:	4b23      	ldr	r3, [pc, #140]	@ (8001954 <Modbus_Emission+0xe8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80018cc:	4b21      	ldr	r3, [pc, #132]	@ (8001954 <Modbus_Emission+0xe8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80018d4:	3b02      	subs	r3, #2
 80018d6:	4619      	mov	r1, r3
 80018d8:	4610      	mov	r0, r2
 80018da:	f7ff fd9d 	bl	8001418 <CRC16>
 80018de:	4603      	mov	r3, r0
 80018e0:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80018e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001954 <Modbus_Emission+0xe8>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001954 <Modbus_Emission+0xe8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80018ee:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80018f0:	7939      	ldrb	r1, [r7, #4]
 80018f2:	4413      	add	r3, r2
 80018f4:	460a      	mov	r2, r1
 80018f6:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80018fa:	4b16      	ldr	r3, [pc, #88]	@ (8001954 <Modbus_Emission+0xe8>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <Modbus_Emission+0xe8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001906:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001908:	7979      	ldrb	r1, [r7, #5]
 800190a:	4413      	add	r3, r2
 800190c:	460a      	mov	r2, r1
 800190e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001912:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <Modbus_Emission+0xe8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800191c:	2b20      	cmp	r3, #32
 800191e:	d10d      	bne.n	800193c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001920:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <Modbus_Emission+0xe8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001926:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <Modbus_Emission+0xe8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800192e:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <Modbus_Emission+0xe8>)
 8001930:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001932:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001936:	461a      	mov	r2, r3
 8001938:	f007 fd04 	bl	8009344 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 800193c:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <Modbus_Emission+0xe8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2200      	movs	r2, #0
 8001942:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001944:	4b03      	ldr	r3, [pc, #12]	@ (8001954 <Modbus_Emission+0xe8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2200      	movs	r2, #0
 800194a:	755a      	strb	r2, [r3, #21]

}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	200003d0 	.word	0x200003d0

08001958 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	4613      	mov	r3, r2
 8001964:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4a0b      	ldr	r2, [pc, #44]	@ (8001998 <PWM_init+0x40>)
 800196a:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	88fa      	ldrh	r2, [r7, #6]
 8001976:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 800197e:	68b8      	ldr	r0, [r7, #8]
 8001980:	f005 fa50 	bl	8006e24 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8001984:	88fb      	ldrh	r3, [r7, #6]
 8001986:	4619      	mov	r1, r3
 8001988:	68b8      	ldr	r0, [r7, #8]
 800198a:	f005 fc0f 	bl	80071ac <HAL_TIM_PWM_Start>
}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	0a21fe80 	.word	0x0a21fe80
 800199c:	00000000 	.word	0x00000000

080019a0 <PWM_write_range>:
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}

void PWM_write_range(PWM* pwm, float freq, float duty){
 80019a0:	b5b0      	push	{r4, r5, r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80019ac:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 80019b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80019b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019bc:	d137      	bne.n	8001a2e <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	889b      	ldrh	r3, [r3, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d105      	bne.n	80019d2 <PWM_write_range+0x32>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2200      	movs	r2, #0
 80019ce:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 80019d0:	e0e1      	b.n	8001b96 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	889b      	ldrh	r3, [r3, #4]
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d105      	bne.n	80019e6 <PWM_write_range+0x46>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2300      	movs	r3, #0
 80019e2:	6393      	str	r3, [r2, #56]	@ 0x38
 80019e4:	e0d7      	b.n	8001b96 <PWM_write_range+0x1f6>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	889b      	ldrh	r3, [r3, #4]
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d105      	bne.n	80019fa <PWM_write_range+0x5a>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2300      	movs	r3, #0
 80019f6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80019f8:	e0cd      	b.n	8001b96 <PWM_write_range+0x1f6>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	889b      	ldrh	r3, [r3, #4]
 80019fe:	2b0c      	cmp	r3, #12
 8001a00:	d105      	bne.n	8001a0e <PWM_write_range+0x6e>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a0c:	e0c3      	b.n	8001b96 <PWM_write_range+0x1f6>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	889b      	ldrh	r3, [r3, #4]
 8001a12:	2b10      	cmp	r3, #16
 8001a14:	d105      	bne.n	8001a22 <PWM_write_range+0x82>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a20:	e0b9      	b.n	8001b96 <PWM_write_range+0x1f6>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001a2c:	e0b3      	b.n	8001b96 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	ee07 3a90 	vmov	s15, r3
 8001a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a3a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a46:	ee17 2a90 	vmov	r2, s15
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001a56:	33fe      	adds	r3, #254	@ 0xfe
 8001a58:	4a53      	ldr	r2, [pc, #332]	@ (8001ba8 <PWM_write_range+0x208>)
 8001a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5e:	0bdb      	lsrs	r3, r3, #15
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	3b01      	subs	r3, #1
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	ee07 3a90 	vmov	s15, r3
 8001a72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	899b      	ldrh	r3, [r3, #12]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	ee07 3a90 	vmov	s15, r3
 8001a80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a88:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a9c:	ee17 3a90 	vmov	r3, s15
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	89db      	ldrh	r3, [r3, #14]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fd06 	bl	80004bc <__aeabi_i2d>
 8001ab0:	4604      	mov	r4, r0
 8001ab2:	460d      	mov	r5, r1
 8001ab4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ab8:	eef0 7ae7 	vabs.f32	s15, s15
 8001abc:	ee17 0a90 	vmov	r0, s15
 8001ac0:	f7fe fd0e 	bl	80004e0 <__aeabi_f2d>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4620      	mov	r0, r4
 8001aca:	4629      	mov	r1, r5
 8001acc:	f7fe fd60 	bl	8000590 <__aeabi_dmul>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	a331      	add	r3, pc, #196	@ (adr r3, 8001ba0 <PWM_write_range+0x200>)
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	f7fe fe81 	bl	80007e4 <__aeabi_ddiv>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f7fe ff63 	bl	80009b4 <__aeabi_d2uiz>
 8001aee:	4603      	mov	r3, r0
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	461a      	mov	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	899a      	ldrh	r2, [r3, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	89da      	ldrh	r2, [r3, #14]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	89da      	ldrh	r2, [r3, #14]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	889b      	ldrh	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d106      	bne.n	8001b30 <PWM_write_range+0x190>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	6952      	ldr	r2, [r2, #20]
 8001b2c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001b2e:	e032      	b.n	8001b96 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	889b      	ldrh	r3, [r3, #4]
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d106      	bne.n	8001b46 <PWM_write_range+0x1a6>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001b44:	e027      	b.n	8001b96 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	889b      	ldrh	r3, [r3, #4]
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d106      	bne.n	8001b5c <PWM_write_range+0x1bc>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001b5a:	e01c      	b.n	8001b96 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	889b      	ldrh	r3, [r3, #4]
 8001b60:	2b0c      	cmp	r3, #12
 8001b62:	d106      	bne.n	8001b72 <PWM_write_range+0x1d2>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001b70:	e011      	b.n	8001b96 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	889b      	ldrh	r3, [r3, #4]
 8001b76:	2b10      	cmp	r3, #16
 8001b78:	d106      	bne.n	8001b88 <PWM_write_range+0x1e8>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001b86:	e006      	b.n	8001b96 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001b94:	e7ff      	b.n	8001b96 <PWM_write_range+0x1f6>
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	40efffe0 	.word	0x40efffe0
 8001ba8:	80008001 	.word	0x80008001

08001bac <QEI_init>:
* Created on: Mar 30, 2024
* Author: beamk
*/
#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6178      	str	r0, [r7, #20]
 8001bb4:	6139      	str	r1, [r7, #16]
 8001bb6:	60fa      	str	r2, [r7, #12]
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	ed87 0a01 	vstr	s0, [r7, #4]
    qei->htimx = htimx;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	611a      	str	r2, [r3, #16]
    qei->ppr = ppr;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	619a      	str	r2, [r3, #24]
    qei->freq = freq;
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	621a      	str	r2, [r3, #32]
    qei->c[NOW] = 0;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	605a      	str	r2, [r3, #4]
    qei->pps = 0;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = 0;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->enc_period = 65536 - (65536 % ppr);
 8001bf4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	fb93 f2f2 	sdiv	r2, r3, r2
 8001bfe:	68f9      	ldr	r1, [r7, #12]
 8001c00:	fb01 f202 	mul.w	r2, r1, r2
 8001c04:	1a9b      	subs	r3, r3, r2
 8001c06:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	615a      	str	r2, [r3, #20]
    qei->pulses = 0;
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2200      	movs	r2, #0
 8001c12:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf = 0;
    qei->revs = 0;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->rads = 0;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->mm = 0;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mmps = 0;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	645a      	str	r2, [r3, #68]	@ 0x44

    qei->ratio = ratio;  // Gear ratio or scaling factor
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	649a      	str	r2, [r3, #72]	@ 0x48
    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001c3a:	213c      	movs	r1, #60	@ 0x3c
 8001c3c:	6938      	ldr	r0, [r7, #16]
 8001c3e:	f005 fd71 	bl	8007724 <HAL_TIM_Encoder_Start>
}
 8001c42:	bf00      	nop
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08c      	sub	sp, #48	@ 0x30
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001c52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	2220      	movs	r2, #32
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f009 fa27 	bl	800b0b8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c6a:	4b47      	ldr	r3, [pc, #284]	@ (8001d88 <MX_ADC1_Init+0x13c>)
 8001c6c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001c70:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c72:	4b45      	ldr	r3, [pc, #276]	@ (8001d88 <MX_ADC1_Init+0x13c>)
 8001c74:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001c78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c7a:	4b43      	ldr	r3, [pc, #268]	@ (8001d88 <MX_ADC1_Init+0x13c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c80:	4b41      	ldr	r3, [pc, #260]	@ (8001d88 <MX_ADC1_Init+0x13c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001c86:	4b40      	ldr	r3, [pc, #256]	@ (8001d88 <MX_ADC1_Init+0x13c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001c8c:	4b3e      	ldr	r3, [pc, #248]	@ (8001d88 <MX_ADC1_Init+0x13c>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c92:	4b3d      	ldr	r3, [pc, #244]	@ (8001d88 <MX_ADC1_Init+0x13c>)
 8001c94:	2204      	movs	r2, #4
 8001c96:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c98:	4b3b      	ldr	r3, [pc, #236]	@ (8001d88 <MX_ADC1_Init+0x13c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c9e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d88 <MX_ADC1_Init+0x13c>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8001ca4:	4b38      	ldr	r3, [pc, #224]	@ (8001d88 <MX_ADC1_Init+0x13c>)
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001caa:	4b37      	ldr	r3, [pc, #220]	@ (8001d88 <MX_ADC1_Init+0x13c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cb2:	4b35      	ldr	r3, [pc, #212]	@ (8001d88 <MX_ADC1_Init+0x13c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cb8:	4b33      	ldr	r3, [pc, #204]	@ (8001d88 <MX_ADC1_Init+0x13c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001cbe:	4b32      	ldr	r3, [pc, #200]	@ (8001d88 <MX_ADC1_Init+0x13c>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001cc6:	4b30      	ldr	r3, [pc, #192]	@ (8001d88 <MX_ADC1_Init+0x13c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001ccc:	4b2e      	ldr	r3, [pc, #184]	@ (8001d88 <MX_ADC1_Init+0x13c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cd4:	482c      	ldr	r0, [pc, #176]	@ (8001d88 <MX_ADC1_Init+0x13c>)
 8001cd6:	f001 ffe9 	bl	8003cac <HAL_ADC_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001ce0:	f000 fcdc 	bl	800269c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001ce8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cec:	4619      	mov	r1, r3
 8001cee:	4826      	ldr	r0, [pc, #152]	@ (8001d88 <MX_ADC1_Init+0x13c>)
 8001cf0:	f003 f908 	bl	8004f04 <HAL_ADCEx_MultiModeConfigChannel>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001cfa:	f000 fccf 	bl	800269c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001cfe:	4b23      	ldr	r3, [pc, #140]	@ (8001d8c <MX_ADC1_Init+0x140>)
 8001d00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d02:	2306      	movs	r3, #6
 8001d04:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001d06:	2307      	movs	r3, #7
 8001d08:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d0a:	237f      	movs	r3, #127	@ 0x7f
 8001d0c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d0e:	2304      	movs	r3, #4
 8001d10:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	4619      	mov	r1, r3
 8001d1a:	481b      	ldr	r0, [pc, #108]	@ (8001d88 <MX_ADC1_Init+0x13c>)
 8001d1c:	f002 fa74 	bl	8004208 <HAL_ADC_ConfigChannel>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001d26:	f000 fcb9 	bl	800269c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001d2a:	4b19      	ldr	r3, [pc, #100]	@ (8001d90 <MX_ADC1_Init+0x144>)
 8001d2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001d2e:	230c      	movs	r3, #12
 8001d30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	4619      	mov	r1, r3
 8001d36:	4814      	ldr	r0, [pc, #80]	@ (8001d88 <MX_ADC1_Init+0x13c>)
 8001d38:	f002 fa66 	bl	8004208 <HAL_ADC_ConfigChannel>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001d42:	f000 fcab 	bl	800269c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001d46:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <MX_ADC1_Init+0x148>)
 8001d48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001d4a:	2312      	movs	r3, #18
 8001d4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d4e:	1d3b      	adds	r3, r7, #4
 8001d50:	4619      	mov	r1, r3
 8001d52:	480d      	ldr	r0, [pc, #52]	@ (8001d88 <MX_ADC1_Init+0x13c>)
 8001d54:	f002 fa58 	bl	8004208 <HAL_ADC_ConfigChannel>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001d5e:	f000 fc9d 	bl	800269c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001d62:	4b0d      	ldr	r3, [pc, #52]	@ (8001d98 <MX_ADC1_Init+0x14c>)
 8001d64:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001d66:	2318      	movs	r3, #24
 8001d68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4806      	ldr	r0, [pc, #24]	@ (8001d88 <MX_ADC1_Init+0x13c>)
 8001d70:	f002 fa4a 	bl	8004208 <HAL_ADC_ConfigChannel>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001d7a:	f000 fc8f 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d7e:	bf00      	nop
 8001d80:	3730      	adds	r7, #48	@ 0x30
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200003d4 	.word	0x200003d4
 8001d8c:	19200040 	.word	0x19200040
 8001d90:	1d500080 	.word	0x1d500080
 8001d94:	21800100 	.word	0x21800100
 8001d98:	3ef08000 	.word	0x3ef08000

08001d9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b0a0      	sub	sp, #128	@ 0x80
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001db4:	f107 0318 	add.w	r3, r7, #24
 8001db8:	2254      	movs	r2, #84	@ 0x54
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f009 f97b 	bl	800b0b8 <memset>
  if(adcHandle->Instance==ADC1)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dca:	d176      	bne.n	8001eba <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001dcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001dd0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001dd2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001dd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dd8:	f107 0318 	add.w	r3, r7, #24
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f004 fd6f 	bl	80068c0 <HAL_RCCEx_PeriphCLKConfig>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001de8:	f000 fc58 	bl	800269c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001dec:	4b35      	ldr	r3, [pc, #212]	@ (8001ec4 <HAL_ADC_MspInit+0x128>)
 8001dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df0:	4a34      	ldr	r2, [pc, #208]	@ (8001ec4 <HAL_ADC_MspInit+0x128>)
 8001df2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001df6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001df8:	4b32      	ldr	r3, [pc, #200]	@ (8001ec4 <HAL_ADC_MspInit+0x128>)
 8001dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e04:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec4 <HAL_ADC_MspInit+0x128>)
 8001e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e08:	4a2e      	ldr	r2, [pc, #184]	@ (8001ec4 <HAL_ADC_MspInit+0x128>)
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e10:	4b2c      	ldr	r3, [pc, #176]	@ (8001ec4 <HAL_ADC_MspInit+0x128>)
 8001e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1c:	4b29      	ldr	r3, [pc, #164]	@ (8001ec4 <HAL_ADC_MspInit+0x128>)
 8001e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e20:	4a28      	ldr	r2, [pc, #160]	@ (8001ec4 <HAL_ADC_MspInit+0x128>)
 8001e22:	f043 0302 	orr.w	r3, r3, #2
 8001e26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e28:	4b26      	ldr	r3, [pc, #152]	@ (8001ec4 <HAL_ADC_MspInit+0x128>)
 8001e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001e34:	2307      	movs	r3, #7
 8001e36:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e40:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e44:	4619      	mov	r1, r3
 8001e46:	4820      	ldr	r0, [pc, #128]	@ (8001ec8 <HAL_ADC_MspInit+0x12c>)
 8001e48:	f003 fda6 	bl	8005998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e50:	2303      	movs	r3, #3
 8001e52:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e58:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	481b      	ldr	r0, [pc, #108]	@ (8001ecc <HAL_ADC_MspInit+0x130>)
 8001e60:	f003 fd9a 	bl	8005998 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed0 <HAL_ADC_MspInit+0x134>)
 8001e66:	4a1b      	ldr	r2, [pc, #108]	@ (8001ed4 <HAL_ADC_MspInit+0x138>)
 8001e68:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001e6a:	4b19      	ldr	r3, [pc, #100]	@ (8001ed0 <HAL_ADC_MspInit+0x134>)
 8001e6c:	2205      	movs	r2, #5
 8001e6e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e70:	4b17      	ldr	r3, [pc, #92]	@ (8001ed0 <HAL_ADC_MspInit+0x134>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e76:	4b16      	ldr	r3, [pc, #88]	@ (8001ed0 <HAL_ADC_MspInit+0x134>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ed0 <HAL_ADC_MspInit+0x134>)
 8001e7e:	2280      	movs	r2, #128	@ 0x80
 8001e80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e82:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <HAL_ADC_MspInit+0x134>)
 8001e84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <HAL_ADC_MspInit+0x134>)
 8001e8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed0 <HAL_ADC_MspInit+0x134>)
 8001e94:	2220      	movs	r2, #32
 8001e96:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e98:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed0 <HAL_ADC_MspInit+0x134>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e9e:	480c      	ldr	r0, [pc, #48]	@ (8001ed0 <HAL_ADC_MspInit+0x134>)
 8001ea0:	f003 fa48 	bl	8005334 <HAL_DMA_Init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_ADC_MspInit+0x112>
    {
      Error_Handler();
 8001eaa:	f000 fbf7 	bl	800269c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a07      	ldr	r2, [pc, #28]	@ (8001ed0 <HAL_ADC_MspInit+0x134>)
 8001eb2:	655a      	str	r2, [r3, #84]	@ 0x54
 8001eb4:	4a06      	ldr	r2, [pc, #24]	@ (8001ed0 <HAL_ADC_MspInit+0x134>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001eba:	bf00      	nop
 8001ebc:	3780      	adds	r7, #128	@ 0x80
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	48000800 	.word	0x48000800
 8001ecc:	48000400 	.word	0x48000400
 8001ed0:	20000440 	.word	0x20000440
 8001ed4:	40020008 	.word	0x40020008

08001ed8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001ede:	4b1a      	ldr	r3, [pc, #104]	@ (8001f48 <MX_DMA_Init+0x70>)
 8001ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ee2:	4a19      	ldr	r2, [pc, #100]	@ (8001f48 <MX_DMA_Init+0x70>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	6493      	str	r3, [r2, #72]	@ 0x48
 8001eea:	4b17      	ldr	r3, [pc, #92]	@ (8001f48 <MX_DMA_Init+0x70>)
 8001eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ef6:	4b14      	ldr	r3, [pc, #80]	@ (8001f48 <MX_DMA_Init+0x70>)
 8001ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001efa:	4a13      	ldr	r2, [pc, #76]	@ (8001f48 <MX_DMA_Init+0x70>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f02:	4b11      	ldr	r3, [pc, #68]	@ (8001f48 <MX_DMA_Init+0x70>)
 8001f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2100      	movs	r1, #0
 8001f12:	200b      	movs	r0, #11
 8001f14:	f003 f9d9 	bl	80052ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f18:	200b      	movs	r0, #11
 8001f1a:	f003 f9f0 	bl	80052fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2100      	movs	r1, #0
 8001f22:	200c      	movs	r0, #12
 8001f24:	f003 f9d1 	bl	80052ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001f28:	200c      	movs	r0, #12
 8001f2a:	f003 f9e8 	bl	80052fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2100      	movs	r1, #0
 8001f32:	200d      	movs	r0, #13
 8001f34:	f003 f9c9 	bl	80052ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001f38:	200d      	movs	r0, #13
 8001f3a:	f003 f9e0 	bl	80052fe <HAL_NVIC_EnableIRQ>

}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000

08001f4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	@ 0x28
 8001f50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
 8001f5e:	60da      	str	r2, [r3, #12]
 8001f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f62:	4b4f      	ldr	r3, [pc, #316]	@ (80020a0 <MX_GPIO_Init+0x154>)
 8001f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f66:	4a4e      	ldr	r2, [pc, #312]	@ (80020a0 <MX_GPIO_Init+0x154>)
 8001f68:	f043 0304 	orr.w	r3, r3, #4
 8001f6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f6e:	4b4c      	ldr	r3, [pc, #304]	@ (80020a0 <MX_GPIO_Init+0x154>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f7a:	4b49      	ldr	r3, [pc, #292]	@ (80020a0 <MX_GPIO_Init+0x154>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7e:	4a48      	ldr	r2, [pc, #288]	@ (80020a0 <MX_GPIO_Init+0x154>)
 8001f80:	f043 0320 	orr.w	r3, r3, #32
 8001f84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f86:	4b46      	ldr	r3, [pc, #280]	@ (80020a0 <MX_GPIO_Init+0x154>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8a:	f003 0320 	and.w	r3, r3, #32
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	4b43      	ldr	r3, [pc, #268]	@ (80020a0 <MX_GPIO_Init+0x154>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f96:	4a42      	ldr	r2, [pc, #264]	@ (80020a0 <MX_GPIO_Init+0x154>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f9e:	4b40      	ldr	r3, [pc, #256]	@ (80020a0 <MX_GPIO_Init+0x154>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001faa:	4b3d      	ldr	r3, [pc, #244]	@ (80020a0 <MX_GPIO_Init+0x154>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fae:	4a3c      	ldr	r2, [pc, #240]	@ (80020a0 <MX_GPIO_Init+0x154>)
 8001fb0:	f043 0302 	orr.w	r3, r3, #2
 8001fb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80020a0 <MX_GPIO_Init+0x154>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8001fc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fcc:	f003 fe66 	bl	8005c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fd6:	4833      	ldr	r0, [pc, #204]	@ (80020a4 <MX_GPIO_Init+0x158>)
 8001fd8:	f003 fe60 	bl	8005c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fdc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fe2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	482c      	ldr	r0, [pc, #176]	@ (80020a4 <MX_GPIO_Init+0x158>)
 8001ff4:	f003 fcd0 	bl	8005998 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|GPIO_PIN_10;
 8001ff8:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8001ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffe:	2301      	movs	r3, #1
 8002000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	4619      	mov	r1, r3
 8002010:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002014:	f003 fcc0 	bl	8005998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 EMER_Pin
                           PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|EMER_Pin
 8002018:	f641 43b0 	movw	r3, #7344	@ 0x1cb0
 800201c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800201e:	2300      	movs	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002026:	f107 0314 	add.w	r3, r7, #20
 800202a:	4619      	mov	r1, r3
 800202c:	481e      	ldr	r0, [pc, #120]	@ (80020a8 <MX_GPIO_Init+0x15c>)
 800202e:	f003 fcb3 	bl	8005998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002032:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002038:	2301      	movs	r3, #1
 800203a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002040:	2300      	movs	r3, #0
 8002042:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4619      	mov	r1, r3
 800204a:	4816      	ldr	r0, [pc, #88]	@ (80020a4 <MX_GPIO_Init+0x158>)
 800204c:	f003 fca4 	bl	8005998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002050:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	4619      	mov	r1, r3
 8002064:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002068:	f003 fc96 	bl	8005998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800206c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	4619      	mov	r1, r3
 8002080:	4808      	ldr	r0, [pc, #32]	@ (80020a4 <MX_GPIO_Init+0x158>)
 8002082:	f003 fc89 	bl	8005998 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	2100      	movs	r1, #0
 800208a:	2028      	movs	r0, #40	@ 0x28
 800208c:	f003 f91d 	bl	80052ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002090:	2028      	movs	r0, #40	@ 0x28
 8002092:	f003 f934 	bl	80052fe <HAL_NVIC_EnableIRQ>

}
 8002096:	bf00      	nop
 8002098:	3728      	adds	r7, #40	@ 0x28
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000
 80020a4:	48000800 	.word	0x48000800
 80020a8:	48000400 	.word	0x48000400

080020ac <Kalman_Start>:
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
	  filter->Kalman_Speed = filter->X_k[1];
	  return  filter->Kalman_Speed;
}

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix){
 80020ac:	b5b0      	push	{r4, r5, r7, lr}
 80020ae:	b0a2      	sub	sp, #136	@ 0x88
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
	filter->Q = 0.05f; //0.05
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4a38      	ldr	r2, [pc, #224]	@ (800219c <Kalman_Start+0xf0>)
 80020bc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = 1.0f;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80020c6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {0.0f, 1.0f, 0.0f, 0.0f};
 80020ca:	f04f 0300 	mov.w	r3, #0
 80020ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80020d0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80020d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80020d6:	f04f 0300 	mov.w	r3, #0
 80020da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

	float32_t g[4] = {0.0f,
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80020ea:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80020ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80020f0:	f04f 0300 	mov.w	r3, #0
 80020f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	673b      	str	r3, [r7, #112]	@ 0x70
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 80020fc:	4b28      	ldr	r3, [pc, #160]	@ (80021a0 <Kalman_Start+0xf4>)
 80020fe:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002102:	461d      	mov	r5, r3
 8002104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800210a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800210c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800210e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002110:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002114:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002136:	e028      	b.n	800218a <Kalman_Start+0xde>
	{
		filter->A[i] = A_matrix[i];
 8002138:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	4413      	add	r3, r2
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68f9      	ldr	r1, [r7, #12]
 8002146:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800214a:	3314      	adds	r3, #20
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8002152:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	3388      	adds	r3, #136	@ 0x88
 800215a:	443b      	add	r3, r7
 800215c:	3b64      	subs	r3, #100	@ 0x64
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68f9      	ldr	r1, [r7, #12]
 8002162:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002166:	3398      	adds	r3, #152	@ 0x98
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002174:	3304      	adds	r3, #4
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8002180:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002184:	3301      	adds	r3, #1
 8002186:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800218a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800218e:	2b0f      	cmp	r3, #15
 8002190:	ddd2      	ble.n	8002138 <Kalman_Start+0x8c>
	}

	for(i=0;i<4;i++)
 8002192:	2300      	movs	r3, #0
 8002194:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002198:	e03f      	b.n	800221a <Kalman_Start+0x16e>
 800219a:	bf00      	nop
 800219c:	3d4ccccd 	.word	0x3d4ccccd
 80021a0:	0800bc5c 	.word	0x0800bc5c
	{
		filter->X_k[i] = x_k[i];
 80021a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	3388      	adds	r3, #136	@ 0x88
 80021ac:	443b      	add	r3, r7
 80021ae:	3b74      	subs	r3, #116	@ 0x74
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68f9      	ldr	r1, [r7, #12]
 80021b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 80021be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	4413      	add	r3, r2
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68f9      	ldr	r1, [r7, #12]
 80021cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021d0:	3324      	adds	r3, #36	@ 0x24
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 80021d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	3388      	adds	r3, #136	@ 0x88
 80021e0:	443b      	add	r3, r7
 80021e2:	3b14      	subs	r3, #20
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68f9      	ldr	r1, [r7, #12]
 80021e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021ec:	3328      	adds	r3, #40	@ 0x28
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 80021f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	3388      	adds	r3, #136	@ 0x88
 80021fc:	443b      	add	r3, r7
 80021fe:	3b24      	subs	r3, #36	@ 0x24
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68f9      	ldr	r1, [r7, #12]
 8002204:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002208:	332c      	adds	r3, #44	@ 0x2c
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8002210:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002214:	3301      	adds	r3, #1
 8002216:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800221a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800221e:	2b03      	cmp	r3, #3
 8002220:	ddc0      	ble.n	80021a4 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2201      	movs	r2, #1
 800222c:	2104      	movs	r1, #4
 800222e:	f008 fe75 	bl	800af1c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	3310      	adds	r3, #16
 800223c:	2204      	movs	r2, #4
 800223e:	2104      	movs	r1, #4
 8002240:	f008 fe6c 	bl	800af1c <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	3350      	adds	r3, #80	@ 0x50
 800224e:	2204      	movs	r2, #4
 8002250:	2104      	movs	r1, #4
 8002252:	f008 fe63 	bl	800af1c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	3390      	adds	r3, #144	@ 0x90
 8002260:	2201      	movs	r2, #1
 8002262:	2104      	movs	r1, #4
 8002264:	f008 fe5a 	bl	800af1c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	33a0      	adds	r3, #160	@ 0xa0
 8002272:	2204      	movs	r2, #4
 8002274:	2101      	movs	r1, #1
 8002276:	f008 fe51 	bl	800af1c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	33b0      	adds	r3, #176	@ 0xb0
 8002284:	2201      	movs	r2, #1
 8002286:	2104      	movs	r1, #4
 8002288:	f008 fe48 	bl	800af1c <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	33c8      	adds	r3, #200	@ 0xc8
 8002296:	2204      	movs	r2, #4
 8002298:	2104      	movs	r1, #4
 800229a:	f008 fe3f 	bl	800af1c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80022aa:	2201      	movs	r2, #1
 80022ac:	2104      	movs	r1, #4
 80022ae:	f008 fe35 	bl	800af1c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80022be:	2204      	movs	r2, #4
 80022c0:	2101      	movs	r1, #1
 80022c2:	f008 fe2b 	bl	800af1c <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80022d2:	2204      	movs	r2, #4
 80022d4:	2104      	movs	r1, #4
 80022d6:	f008 fe21 	bl	800af1c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80022e6:	2204      	movs	r2, #4
 80022e8:	2104      	movs	r1, #4
 80022ea:	f008 fe17 	bl	800af1c <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80022fa:	2201      	movs	r2, #1
 80022fc:	2104      	movs	r1, #4
 80022fe:	f008 fe0d 	bl	800af1c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 800230e:	2201      	movs	r2, #1
 8002310:	2104      	movs	r1, #4
 8002312:	f008 fe03 	bl	800af1c <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002322:	2204      	movs	r2, #4
 8002324:	2101      	movs	r1, #1
 8002326:	f008 fdf9 	bl	800af1c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8002336:	2201      	movs	r2, #1
 8002338:	2101      	movs	r1, #1
 800233a:	f008 fdef 	bl	800af1c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800234a:	2201      	movs	r2, #1
 800234c:	2101      	movs	r1, #1
 800234e:	f008 fde5 	bl	800af1c <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800235e:	2201      	movs	r2, #1
 8002360:	2104      	movs	r1, #4
 8002362:	f008 fddb 	bl	800af1c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8002372:	2201      	movs	r2, #1
 8002374:	2104      	movs	r1, #4
 8002376:	f008 fdd1 	bl	800af1c <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8002386:	2201      	movs	r2, #1
 8002388:	2101      	movs	r1, #1
 800238a:	f008 fdc7 	bl	800af1c <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800239a:	2201      	movs	r2, #1
 800239c:	2101      	movs	r1, #1
 800239e:	f008 fdbd 	bl	800af1c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80023ae:	2201      	movs	r2, #1
 80023b0:	2101      	movs	r1, #1
 80023b2:	f008 fdb3 	bl	800af1c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80023c2:	2201      	movs	r2, #1
 80023c4:	2104      	movs	r1, #4
 80023c6:	f008 fda9 	bl	800af1c <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80023d6:	2201      	movs	r2, #1
 80023d8:	2101      	movs	r1, #1
 80023da:	f008 fd9f 	bl	800af1c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80023ea:	2204      	movs	r2, #4
 80023ec:	2104      	movs	r1, #4
 80023ee:	f008 fd95 	bl	800af1c <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	33c4      	adds	r3, #196	@ 0xc4
 80023fc:	2201      	movs	r2, #1
 80023fe:	2101      	movs	r1, #1
 8002400:	f008 fd8c 	bl	800af1c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8002410:	2201      	movs	r2, #1
 8002412:	2101      	movs	r1, #1
 8002414:	f008 fd82 	bl	800af1c <arm_mat_init_f32>
}
 8002418:	bf00      	nop
 800241a:	3788      	adds	r7, #136	@ 0x88
 800241c:	46bd      	mov	sp, r7
 800241e:	bdb0      	pop	{r4, r5, r7, pc}

08002420 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002424:	f001 f98d 	bl	8003742 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002428:	f000 f818 	bl	800245c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800242c:	f7ff fd8e 	bl	8001f4c <MX_GPIO_Init>
	MX_DMA_Init();
 8002430:	f7ff fd52 	bl	8001ed8 <MX_DMA_Init>
	MX_ADC1_Init();
 8002434:	f7ff fc0a 	bl	8001c4c <MX_ADC1_Init>
	MX_TIM2_Init();
 8002438:	f000 fcd4 	bl	8002de4 <MX_TIM2_Init>
	MX_TIM3_Init();
 800243c:	f000 fd20 	bl	8002e80 <MX_TIM3_Init>
	MX_TIM4_Init();
 8002440:	f000 fd74 	bl	8002f2c <MX_TIM4_Init>
	MX_TIM5_Init();
 8002444:	f000 fdc8 	bl	8002fd8 <MX_TIM5_Init>
	MX_TIM8_Init();
 8002448:	f000 fe14 	bl	8003074 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 800244c:	f001 f846 	bl	80034dc <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8002450:	f000 fee2 	bl	8003218 <MX_TIM16_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 8002454:	f000 f928 	bl	80026a8 <plotter_begin>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <main+0x38>

0800245c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800245c:	b580      	push	{r7, lr}
 800245e:	b094      	sub	sp, #80	@ 0x50
 8002460:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002462:	f107 0318 	add.w	r3, r7, #24
 8002466:	2238      	movs	r2, #56	@ 0x38
 8002468:	2100      	movs	r1, #0
 800246a:	4618      	mov	r0, r3
 800246c:	f008 fe24 	bl	800b0b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	60da      	str	r2, [r3, #12]
 800247c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800247e:	2000      	movs	r0, #0
 8002480:	f003 fc3c 	bl	8005cfc <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002484:	2302      	movs	r3, #2
 8002486:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002488:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800248c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800248e:	2340      	movs	r3, #64	@ 0x40
 8002490:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002492:	2302      	movs	r3, #2
 8002494:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002496:	2302      	movs	r3, #2
 8002498:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800249a:	2304      	movs	r3, #4
 800249c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800249e:	2355      	movs	r3, #85	@ 0x55
 80024a0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024a2:	2302      	movs	r3, #2
 80024a4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80024a6:	2302      	movs	r3, #2
 80024a8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80024aa:	2302      	movs	r3, #2
 80024ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80024ae:	f107 0318 	add.w	r3, r7, #24
 80024b2:	4618      	mov	r0, r3
 80024b4:	f003 fcd6 	bl	8005e64 <HAL_RCC_OscConfig>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <SystemClock_Config+0x66>
		Error_Handler();
 80024be:	f000 f8ed 	bl	800269c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80024c2:	230f      	movs	r3, #15
 80024c4:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024c6:	2303      	movs	r3, #3
 80024c8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	2104      	movs	r1, #4
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 ffd4 	bl	8006488 <HAL_RCC_ClockConfig>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <SystemClock_Config+0x8e>
		Error_Handler();
 80024e6:	f000 f8d9 	bl	800269c <Error_Handler>
	}
}
 80024ea:	bf00      	nop
 80024ec:	3750      	adds	r7, #80	@ 0x50
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	4603      	mov	r3, r0
 80024fa:	80fb      	strh	r3, [r7, #6]

}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]

}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a5b      	ldr	r2, [pc, #364]	@ (8002694 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002528:	4293      	cmp	r3, r2
 800252a:	f040 80af 	bne.w	800268c <HAL_TIM_PeriodElapsedCallback+0x170>
		Modbus_Protocal_Worker();
 800252e:	f7fe ffab 	bl	8001488 <Modbus_Protocal_Worker>

		//--Modbus Protocol--//

		registerFrame[Heartbeat_Protocol].U16 = 22881;
 8002532:	4b59      	ldr	r3, [pc, #356]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002534:	f645 1261 	movw	r2, #22881	@ 0x5961
 8002538:	801a      	strh	r2, [r3, #0]
		if (registerFrame[Servo_UP].U16 == 1) {
 800253a:	4b57      	ldr	r3, [pc, #348]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800253c:	891b      	ldrh	r3, [r3, #8]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d102      	bne.n	8002548 <HAL_TIM_PeriodElapsedCallback+0x2c>

			// servo up command
			registerFrame[LimitSwitch_Status].U16 = 1;
 8002542:	4b55      	ldr	r3, [pc, #340]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002544:	2201      	movs	r2, #1
 8002546:	80da      	strh	r2, [r3, #6]
		}
		if (registerFrame[Servo_Down].U16 == 1) {
 8002548:	4b53      	ldr	r3, [pc, #332]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800254a:	895b      	ldrh	r3, [r3, #10]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d102      	bne.n	8002556 <HAL_TIM_PeriodElapsedCallback+0x3a>
			// servo down command
			registerFrame[LimitSwitch_Status].U16 = 2;
 8002550:	4b51      	ldr	r3, [pc, #324]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002552:	2202      	movs	r2, #2
 8002554:	80da      	strh	r2, [r3, #6]
		}

		if (registerFrame[BaseSystem_Status].U16 == 1) {// homing
 8002556:	4b50      	ldr	r3, [pc, #320]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002558:	885b      	ldrh	r3, [r3, #2]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d11a      	bne.n	8002594 <HAL_TIM_PeriodElapsedCallback+0x78>

			registerFrame[R_Theta_Status].U16 = 1;
 800255e:	4b4e      	ldr	r3, [pc, #312]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002560:	2201      	movs	r2, #1
 8002562:	841a      	strh	r2, [r3, #32]
			//reset Arm Position command

			//--tell Arm Status--//
			registerFrame[R_Axis_Actual_Position].U16 = 1; //Rev Pos
 8002564:	4b4c      	ldr	r3, [pc, #304]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002566:	2201      	movs	r2, #1
 8002568:	845a      	strh	r2, [r3, #34]	@ 0x22
			registerFrame[Theta_Axis_Actual_Position].U16 = 1; //pris Pos
 800256a:	4b4b      	ldr	r3, [pc, #300]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800256c:	2201      	movs	r2, #1
 800256e:	849a      	strh	r2, [r3, #36]	@ 0x24
			registerFrame[R_Axis_Actual_Speed].U16 = 1; //Rev speed
 8002570:	4b49      	ldr	r3, [pc, #292]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002572:	2201      	movs	r2, #1
 8002574:	84da      	strh	r2, [r3, #38]	@ 0x26
			registerFrame[Theta_Axis_Actual_Speed].U16 = 1; //pris speed
 8002576:	4b48      	ldr	r3, [pc, #288]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002578:	2201      	movs	r2, #1
 800257a:	851a      	strh	r2, [r3, #40]	@ 0x28
			registerFrame[R_Axis_Acceleration].U16 = 1; //Rev Acc
 800257c:	4b46      	ldr	r3, [pc, #280]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800257e:	2201      	movs	r2, #1
 8002580:	855a      	strh	r2, [r3, #42]	@ 0x2a
			registerFrame[Theta_Axis_Acceleration].U16 = 1; //pris Acc
 8002582:	4b45      	ldr	r3, [pc, #276]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002584:	2201      	movs	r2, #1
 8002586:	859a      	strh	r2, [r3, #44]	@ 0x2c
			//if finish
			registerFrame[BaseSystem_Status].U16 = 0;
 8002588:	4b43      	ldr	r3, [pc, #268]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800258a:	2200      	movs	r2, #0
 800258c:	805a      	strh	r2, [r3, #2]
			registerFrame[R_Theta_Status].U16 = 0;
 800258e:	4b42      	ldr	r3, [pc, #264]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002590:	2200      	movs	r2, #0
 8002592:	841a      	strh	r2, [r3, #32]
		}
		if (registerFrame[BaseSystem_Status].U16 == 2) {//joy
 8002594:	4b40      	ldr	r3, [pc, #256]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002596:	885b      	ldrh	r3, [r3, #2]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d11a      	bne.n	80025d2 <HAL_TIM_PeriodElapsedCallback+0xb6>

			registerFrame[R_Theta_Status].U16 = 2;
 800259c:	4b3e      	ldr	r3, [pc, #248]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800259e:	2202      	movs	r2, #2
 80025a0:	841a      	strh	r2, [r3, #32]
			//joystick control command

			//--tell Arm Status--//
			registerFrame[R_Axis_Actual_Position].U16 = 2; //Rev Pos
 80025a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80025a4:	2202      	movs	r2, #2
 80025a6:	845a      	strh	r2, [r3, #34]	@ 0x22
			registerFrame[Theta_Axis_Actual_Position].U16 = 2; //pris Pos
 80025a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80025aa:	2202      	movs	r2, #2
 80025ac:	849a      	strh	r2, [r3, #36]	@ 0x24
			registerFrame[R_Axis_Actual_Speed].U16 = 2; //Rev speed
 80025ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80025b0:	2202      	movs	r2, #2
 80025b2:	84da      	strh	r2, [r3, #38]	@ 0x26
			registerFrame[Theta_Axis_Actual_Speed].U16 = 2; //pris speed
 80025b4:	4b38      	ldr	r3, [pc, #224]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80025b6:	2202      	movs	r2, #2
 80025b8:	851a      	strh	r2, [r3, #40]	@ 0x28
			registerFrame[R_Axis_Acceleration].U16 = 2; //Rev Acc
 80025ba:	4b37      	ldr	r3, [pc, #220]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80025bc:	2202      	movs	r2, #2
 80025be:	855a      	strh	r2, [r3, #42]	@ 0x2a
			registerFrame[Theta_Axis_Acceleration].U16 = 2; //pris Acc
 80025c0:	4b35      	ldr	r3, [pc, #212]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80025c2:	2202      	movs	r2, #2
 80025c4:	859a      	strh	r2, [r3, #44]	@ 0x2c

			//if finish
			registerFrame[BaseSystem_Status].U16 = 0;
 80025c6:	4b34      	ldr	r3, [pc, #208]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	805a      	strh	r2, [r3, #2]
			registerFrame[R_Theta_Status].U16 = 0;
 80025cc:	4b32      	ldr	r3, [pc, #200]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	841a      	strh	r2, [r3, #32]
		}
		if (registerFrame[BaseSystem_Status].U16 == 4) {//point
 80025d2:	4b31      	ldr	r3, [pc, #196]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80025d4:	885b      	ldrh	r3, [r3, #2]
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d11a      	bne.n	8002610 <HAL_TIM_PeriodElapsedCallback+0xf4>

			registerFrame[R_Theta_Status].U16 = 4;
 80025da:	4b2f      	ldr	r3, [pc, #188]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80025dc:	2204      	movs	r2, #4
 80025de:	841a      	strh	r2, [r3, #32]
			//Point mode command



			//--tell Arm Status--//
			registerFrame[R_Axis_Actual_Position].U16 = 3; //Rev Pos
 80025e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80025e2:	2203      	movs	r2, #3
 80025e4:	845a      	strh	r2, [r3, #34]	@ 0x22
			registerFrame[Theta_Axis_Actual_Position].U16 = 3; //pris Pos
 80025e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80025e8:	2203      	movs	r2, #3
 80025ea:	849a      	strh	r2, [r3, #36]	@ 0x24
			registerFrame[R_Axis_Actual_Speed].U16 = 3; //Rev speed
 80025ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80025ee:	2203      	movs	r2, #3
 80025f0:	84da      	strh	r2, [r3, #38]	@ 0x26
			registerFrame[Theta_Axis_Actual_Speed].U16 = 3; //pris speed
 80025f2:	4b29      	ldr	r3, [pc, #164]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80025f4:	2203      	movs	r2, #3
 80025f6:	851a      	strh	r2, [r3, #40]	@ 0x28
			registerFrame[R_Axis_Acceleration].U16 = 3; //Rev Acc
 80025f8:	4b27      	ldr	r3, [pc, #156]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80025fa:	2203      	movs	r2, #3
 80025fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
			registerFrame[Theta_Axis_Acceleration].U16 = 3; //pris Acc
 80025fe:	4b26      	ldr	r3, [pc, #152]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002600:	2203      	movs	r2, #3
 8002602:	859a      	strh	r2, [r3, #44]	@ 0x2c

			//if finish
			registerFrame[BaseSystem_Status].U16 = 0;
 8002604:	4b24      	ldr	r3, [pc, #144]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002606:	2200      	movs	r2, #0
 8002608:	805a      	strh	r2, [r3, #2]
			registerFrame[R_Theta_Status].U16 = 0;
 800260a:	4b23      	ldr	r3, [pc, #140]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800260c:	2200      	movs	r2, #0
 800260e:	841a      	strh	r2, [r3, #32]
		}
		if (registerFrame[BaseSystem_Status].U16 == 8) {//go to
 8002610:	4b21      	ldr	r3, [pc, #132]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002612:	885b      	ldrh	r3, [r3, #2]
 8002614:	2b08      	cmp	r3, #8
 8002616:	d11a      	bne.n	800264e <HAL_TIM_PeriodElapsedCallback+0x132>

			registerFrame[R_Theta_Status].U16 = 8;
 8002618:	4b1f      	ldr	r3, [pc, #124]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800261a:	2208      	movs	r2, #8
 800261c:	841a      	strh	r2, [r3, #32]
			//send Arm to target command

			// goto registerFrame[Goal_R].U16,registerFrame[Goal_Theta].U16

			//--tell Arm Status--//
			registerFrame[R_Axis_Actual_Position].U16 = 4; //Rev Pos
 800261e:	4b1e      	ldr	r3, [pc, #120]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002620:	2204      	movs	r2, #4
 8002622:	845a      	strh	r2, [r3, #34]	@ 0x22
			registerFrame[Theta_Axis_Actual_Position].U16 = 4; //pris Pos
 8002624:	4b1c      	ldr	r3, [pc, #112]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002626:	2204      	movs	r2, #4
 8002628:	849a      	strh	r2, [r3, #36]	@ 0x24
			registerFrame[R_Axis_Actual_Speed].U16 = 4; //Rev speed
 800262a:	4b1b      	ldr	r3, [pc, #108]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800262c:	2204      	movs	r2, #4
 800262e:	84da      	strh	r2, [r3, #38]	@ 0x26
			registerFrame[Theta_Axis_Actual_Speed].U16 = 4; //pris speed
 8002630:	4b19      	ldr	r3, [pc, #100]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002632:	2204      	movs	r2, #4
 8002634:	851a      	strh	r2, [r3, #40]	@ 0x28
			registerFrame[R_Axis_Acceleration].U16 = 4; //Rev Acc
 8002636:	4b18      	ldr	r3, [pc, #96]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002638:	2204      	movs	r2, #4
 800263a:	855a      	strh	r2, [r3, #42]	@ 0x2a
			registerFrame[Theta_Axis_Acceleration].U16 = 4; //pris Acc
 800263c:	4b16      	ldr	r3, [pc, #88]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800263e:	2204      	movs	r2, #4
 8002640:	859a      	strh	r2, [r3, #44]	@ 0x2c

			//if finish
			registerFrame[BaseSystem_Status].U16 = 0;
 8002642:	4b15      	ldr	r3, [pc, #84]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002644:	2200      	movs	r2, #0
 8002646:	805a      	strh	r2, [r3, #2]
			registerFrame[R_Theta_Status].U16 = 0;
 8002648:	4b13      	ldr	r3, [pc, #76]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800264a:	2200      	movs	r2, #0
 800264c:	841a      	strh	r2, [r3, #32]

		}
		if (registerFrame[BaseSystem_Status].U16 == 16) {//stop
 800264e:	4b12      	ldr	r3, [pc, #72]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002650:	885b      	ldrh	r3, [r3, #2]
 8002652:	2b10      	cmp	r3, #16
 8002654:	d11a      	bne.n	800268c <HAL_TIM_PeriodElapsedCallback+0x170>

			registerFrame[R_Theta_Status].U16 = 16;
 8002656:	4b10      	ldr	r3, [pc, #64]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002658:	2210      	movs	r2, #16
 800265a:	841a      	strh	r2, [r3, #32]
			//send Arm to target command

			//--tell Arm Status--//
			registerFrame[R_Axis_Actual_Position].U16 = 5; //Rev Pos
 800265c:	4b0e      	ldr	r3, [pc, #56]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800265e:	2205      	movs	r2, #5
 8002660:	845a      	strh	r2, [r3, #34]	@ 0x22
			registerFrame[Theta_Axis_Actual_Position].U16 = 5; //pris Pos
 8002662:	4b0d      	ldr	r3, [pc, #52]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002664:	2205      	movs	r2, #5
 8002666:	849a      	strh	r2, [r3, #36]	@ 0x24
			registerFrame[R_Axis_Actual_Speed].U16 = 0; //Rev speed
 8002668:	4b0b      	ldr	r3, [pc, #44]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800266a:	2200      	movs	r2, #0
 800266c:	84da      	strh	r2, [r3, #38]	@ 0x26
			registerFrame[Theta_Axis_Actual_Speed].U16 = 0; //pris speed
 800266e:	4b0a      	ldr	r3, [pc, #40]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002670:	2200      	movs	r2, #0
 8002672:	851a      	strh	r2, [r3, #40]	@ 0x28
			registerFrame[R_Axis_Acceleration].U16 = 0; //Rev Acc
 8002674:	4b08      	ldr	r3, [pc, #32]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002676:	2200      	movs	r2, #0
 8002678:	855a      	strh	r2, [r3, #42]	@ 0x2a
			registerFrame[Theta_Axis_Acceleration].U16 = 0; //pris Acc
 800267a:	4b07      	ldr	r3, [pc, #28]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800267c:	2200      	movs	r2, #0
 800267e:	859a      	strh	r2, [r3, #44]	@ 0x2c

			//if finish
			registerFrame[BaseSystem_Status].U16 = 0;
 8002680:	4b05      	ldr	r3, [pc, #20]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002682:	2200      	movs	r2, #0
 8002684:	805a      	strh	r2, [r3, #2]
			registerFrame[R_Theta_Status].U16 = 0;
 8002686:	4b04      	ldr	r3, [pc, #16]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002688:	2200      	movs	r2, #0
 800268a:	841a      	strh	r2, [r3, #32]

		}

	}
}
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20001748 	.word	0x20001748
 8002698:	200015b4 	.word	0x200015b4

0800269c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026a0:	b672      	cpsid	i
}
 80026a2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <Error_Handler+0x8>

080026a8 <plotter_begin>:
float joystick_x = 0.0f;
float joystick_y = 0.0f;
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

void plotter_begin() {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af02      	add	r7, sp, #8
	SIGNAL_init(&sine_sg, SIGNAL_SINE);
 80026ae:	2100      	movs	r1, #0
 80026b0:	4896      	ldr	r0, [pc, #600]	@ (800290c <plotter_begin+0x264>)
 80026b2:	f000 f995 	bl	80029e0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE, SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);
 80026b6:	eddf 2a96 	vldr	s5, [pc, #600]	@ 8002910 <plotter_begin+0x268>
 80026ba:	ed9f 2a96 	vldr	s4, [pc, #600]	@ 8002914 <plotter_begin+0x26c>
 80026be:	eddf 1a96 	vldr	s3, [pc, #600]	@ 8002918 <plotter_begin+0x270>
 80026c2:	ed9f 1a95 	vldr	s2, [pc, #596]	@ 8002918 <plotter_begin+0x270>
 80026c6:	eddf 0a95 	vldr	s1, [pc, #596]	@ 800291c <plotter_begin+0x274>
 80026ca:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 8002910 <plotter_begin+0x268>
 80026ce:	488f      	ldr	r0, [pc, #572]	@ (800290c <plotter_begin+0x264>)
 80026d0:	f000 f9e4 	bl	8002a9c <SIGNAL_config_sine>

	SIGNAL_init(&chirp_linear_sg, SIGNAL_CHIRP);
 80026d4:	2101      	movs	r1, #1
 80026d6:	4892      	ldr	r0, [pc, #584]	@ (8002920 <plotter_begin+0x278>)
 80026d8:	f000 f982 	bl	80029e0 <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_linear_sg, CHIRP_LINEAR_AMPLITUDE, CHIRP_LINEAR_START_FREQ,
 80026dc:	eddf 2a8c 	vldr	s5, [pc, #560]	@ 8002910 <plotter_begin+0x268>
 80026e0:	ed9f 2a8c 	vldr	s4, [pc, #560]	@ 8002914 <plotter_begin+0x26c>
 80026e4:	2100      	movs	r1, #0
 80026e6:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 80026ea:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 80026ee:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80026f2:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 8002910 <plotter_begin+0x268>
 80026f6:	488a      	ldr	r0, [pc, #552]	@ (8002920 <plotter_begin+0x278>)
 80026f8:	f000 f9fb 	bl	8002af2 <SIGNAL_config_chirp>
	                   CHIRP_LINEAR_END_FREQ, CHIRP_LINEAR_DURATION, CHIRP_LINEAR,
	                   CHIRP_LINEAR_MIN_SETPOINT, CHIRP_LINEAR_MAX_SETPOINT);

	SIGNAL_init(&chirp_log_sg, SIGNAL_CHIRP);
 80026fc:	2101      	movs	r1, #1
 80026fe:	4889      	ldr	r0, [pc, #548]	@ (8002924 <plotter_begin+0x27c>)
 8002700:	f000 f96e 	bl	80029e0 <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_log_sg, CHIRP_LOG_AMPLITUDE, CHIRP_LOG_START_FREQ,
 8002704:	eddf 2a82 	vldr	s5, [pc, #520]	@ 8002910 <plotter_begin+0x268>
 8002708:	ed9f 2a82 	vldr	s4, [pc, #520]	@ 8002914 <plotter_begin+0x26c>
 800270c:	2101      	movs	r1, #1
 800270e:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8002712:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8002716:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800271a:	ed9f 0a7d 	vldr	s0, [pc, #500]	@ 8002910 <plotter_begin+0x268>
 800271e:	4881      	ldr	r0, [pc, #516]	@ (8002924 <plotter_begin+0x27c>)
 8002720:	f000 f9e7 	bl	8002af2 <SIGNAL_config_chirp>
	                   CHIRP_LOG_END_FREQ, CHIRP_LOG_DURATION, CHIRP_LOGARITHMIC,
	                   CHIRP_LOG_MIN_SETPOINT, CHIRP_LOG_MAX_SETPOINT);

	SIGNAL_init(&square_sg, SIGNAL_SQUARE);
 8002724:	2102      	movs	r1, #2
 8002726:	4880      	ldr	r0, [pc, #512]	@ (8002928 <plotter_begin+0x280>)
 8002728:	f000 f95a 	bl	80029e0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 800272c:	ed9f 3a78 	vldr	s6, [pc, #480]	@ 8002910 <plotter_begin+0x268>
 8002730:	eddf 2a78 	vldr	s5, [pc, #480]	@ 8002914 <plotter_begin+0x26c>
 8002734:	ed9f 2a78 	vldr	s4, [pc, #480]	@ 8002918 <plotter_begin+0x270>
 8002738:	eddf 1a77 	vldr	s3, [pc, #476]	@ 8002918 <plotter_begin+0x270>
 800273c:	ed9f 1a7b 	vldr	s2, [pc, #492]	@ 800292c <plotter_begin+0x284>
 8002740:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002744:	ed9f 0a72 	vldr	s0, [pc, #456]	@ 8002910 <plotter_begin+0x268>
 8002748:	4877      	ldr	r0, [pc, #476]	@ (8002928 <plotter_begin+0x280>)
 800274a:	f000 fa06 	bl	8002b5a <SIGNAL_config_square>
	                    SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	                    SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&ramp_sg, SIGNAL_RAMP);
 800274e:	2103      	movs	r1, #3
 8002750:	4877      	ldr	r0, [pc, #476]	@ (8002930 <plotter_begin+0x288>)
 8002752:	f000 f945 	bl	80029e0 <SIGNAL_init>
	SIGNAL_config_ramp(&ramp_sg, RAMP_AMPLITUDE, RAMP_FREQUENCY,
 8002756:	eddf 3a6e 	vldr	s7, [pc, #440]	@ 8002910 <plotter_begin+0x268>
 800275a:	ed9f 3a6e 	vldr	s6, [pc, #440]	@ 8002914 <plotter_begin+0x26c>
 800275e:	eddf 2a6e 	vldr	s5, [pc, #440]	@ 8002918 <plotter_begin+0x270>
 8002762:	ed9f 2a6d 	vldr	s4, [pc, #436]	@ 8002918 <plotter_begin+0x270>
 8002766:	eddf 1a6a 	vldr	s3, [pc, #424]	@ 8002910 <plotter_begin+0x268>
 800276a:	ed9f 1a6a 	vldr	s2, [pc, #424]	@ 8002914 <plotter_begin+0x26c>
 800276e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002772:	ed9f 0a67 	vldr	s0, [pc, #412]	@ 8002910 <plotter_begin+0x268>
 8002776:	486e      	ldr	r0, [pc, #440]	@ (8002930 <plotter_begin+0x288>)
 8002778:	f000 fa1f 	bl	8002bba <SIGNAL_config_ramp>
	                  RAMP_START, RAMP_END, RAMP_PHASE, RAMP_OFFSET,
	                  RAMP_MIN_SETPOINT, RAMP_MAX_SETPOINT);

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR_RATIO1);
 800277c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002780:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002784:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002788:	496a      	ldr	r1, [pc, #424]	@ (8002934 <plotter_begin+0x28c>)
 800278a:	486b      	ldr	r0, [pc, #428]	@ (8002938 <plotter_begin+0x290>)
 800278c:	f7ff fa0e 	bl	8001bac <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR_RATIO2);
 8002790:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002794:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002798:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800279c:	4967      	ldr	r1, [pc, #412]	@ (800293c <plotter_begin+0x294>)
 800279e:	4868      	ldr	r0, [pc, #416]	@ (8002940 <plotter_begin+0x298>)
 80027a0:	f7ff fa04 	bl	8001bac <QEI_init>

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx, MOTOR1_GPIO_Pin);
 80027a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	4b66      	ldr	r3, [pc, #408]	@ (8002944 <plotter_begin+0x29c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	4966      	ldr	r1, [pc, #408]	@ (8002948 <plotter_begin+0x2a0>)
 80027b0:	4866      	ldr	r0, [pc, #408]	@ (800294c <plotter_begin+0x2a4>)
 80027b2:	f7fe fb2b 	bl	8000e0c <MDXX_GPIO_init>
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx, MOTOR2_GPIO_Pin);
 80027b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80027c0:	2204      	movs	r2, #4
 80027c2:	4961      	ldr	r1, [pc, #388]	@ (8002948 <plotter_begin+0x2a0>)
 80027c4:	4862      	ldr	r0, [pc, #392]	@ (8002950 <plotter_begin+0x2a8>)
 80027c6:	f7fe fb21 	bl	8000e0c <MDXX_GPIO_init>

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 80027ca:	2208      	movs	r2, #8
 80027cc:	495e      	ldr	r1, [pc, #376]	@ (8002948 <plotter_begin+0x2a0>)
 80027ce:	4861      	ldr	r0, [pc, #388]	@ (8002954 <plotter_begin+0x2ac>)
 80027d0:	f7ff f8c2 	bl	8001958 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 80027d4:	eddf 0a50 	vldr	s1, [pc, #320]	@ 8002918 <plotter_begin+0x270>
 80027d8:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 8002958 <plotter_begin+0x2b0>
 80027dc:	485b      	ldr	r0, [pc, #364]	@ (800294c <plotter_begin+0x2a4>)
 80027de:	f7fe fb39 	bl	8000e54 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 80027e2:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 8002918 <plotter_begin+0x270>
 80027e6:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 8002958 <plotter_begin+0x2b0>
 80027ea:	4859      	ldr	r0, [pc, #356]	@ (8002950 <plotter_begin+0x2a8>)
 80027ec:	f7fe fb32 	bl	8000e54 <MDXX_set_range>
	PWM_write_range(&servo, 2000, 0);
 80027f0:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8002918 <plotter_begin+0x270>
 80027f4:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8002958 <plotter_begin+0x2b0>
 80027f8:	4856      	ldr	r0, [pc, #344]	@ (8002954 <plotter_begin+0x2ac>)
 80027fa:	f7ff f8d1 	bl	80019a0 <PWM_write_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 0, 0, 0, 65535);
 80027fe:	eddf 1a57 	vldr	s3, [pc, #348]	@ 800295c <plotter_begin+0x2b4>
 8002802:	ed9f 1a45 	vldr	s2, [pc, #276]	@ 8002918 <plotter_begin+0x270>
 8002806:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8002918 <plotter_begin+0x270>
 800280a:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8002918 <plotter_begin+0x270>
 800280e:	4854      	ldr	r0, [pc, #336]	@ (8002960 <plotter_begin+0x2b8>)
 8002810:	f7fe fad2 	bl	8000db8 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 0, 0, 0, 65535);
 8002814:	eddf 1a51 	vldr	s3, [pc, #324]	@ 800295c <plotter_begin+0x2b4>
 8002818:	ed9f 1a3f 	vldr	s2, [pc, #252]	@ 8002918 <plotter_begin+0x270>
 800281c:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8002918 <plotter_begin+0x270>
 8002820:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 8002918 <plotter_begin+0x270>
 8002824:	484f      	ldr	r0, [pc, #316]	@ (8002964 <plotter_begin+0x2bc>)
 8002826:	f7fe fac7 	bl	8000db8 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 0, 0, 0, 65535);
 800282a:	eddf 1a4c 	vldr	s3, [pc, #304]	@ 800295c <plotter_begin+0x2b4>
 800282e:	ed9f 1a3a 	vldr	s2, [pc, #232]	@ 8002918 <plotter_begin+0x270>
 8002832:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8002918 <plotter_begin+0x270>
 8002836:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8002918 <plotter_begin+0x270>
 800283a:	484b      	ldr	r0, [pc, #300]	@ (8002968 <plotter_begin+0x2c0>)
 800283c:	f7fe fabc 	bl	8000db8 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 0, 0, 0, 65535);
 8002840:	eddf 1a46 	vldr	s3, [pc, #280]	@ 800295c <plotter_begin+0x2b4>
 8002844:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 8002918 <plotter_begin+0x270>
 8002848:	eddf 0a33 	vldr	s1, [pc, #204]	@ 8002918 <plotter_begin+0x270>
 800284c:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8002918 <plotter_begin+0x270>
 8002850:	4846      	ldr	r0, [pc, #280]	@ (800296c <plotter_begin+0x2c4>)
 8002852:	f7fe fab1 	bl	8000db8 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8002856:	4946      	ldr	r1, [pc, #280]	@ (8002970 <plotter_begin+0x2c8>)
 8002858:	4846      	ldr	r0, [pc, #280]	@ (8002974 <plotter_begin+0x2cc>)
 800285a:	f7fe fbd5 	bl	8001008 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 800285e:	4946      	ldr	r1, [pc, #280]	@ (8002978 <plotter_begin+0x2d0>)
 8002860:	4846      	ldr	r0, [pc, #280]	@ (800297c <plotter_begin+0x2d4>)
 8002862:	f7fe fbf1 	bl	8001048 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant, &Disturbance_Constant);
 8002866:	4a46      	ldr	r2, [pc, #280]	@ (8002980 <plotter_begin+0x2d8>)
 8002868:	4941      	ldr	r1, [pc, #260]	@ (8002970 <plotter_begin+0x2c8>)
 800286a:	4846      	ldr	r0, [pc, #280]	@ (8002984 <plotter_begin+0x2dc>)
 800286c:	f7fe fbda 	bl	8001024 <REVOLUTE_MOTOR_DFD_Init>
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant, &Disturbance_Constant);
 8002870:	4a43      	ldr	r2, [pc, #268]	@ (8002980 <plotter_begin+0x2d8>)
 8002872:	4941      	ldr	r1, [pc, #260]	@ (8002978 <plotter_begin+0x2d0>)
 8002874:	4844      	ldr	r0, [pc, #272]	@ (8002988 <plotter_begin+0x2e0>)
 8002876:	f7fe fbf5 	bl	8001064 <PRISMATIC_MOTOR_DFD_Init>

	ADC_DMA_Init(&adc_dma, &hadc1, adc_dma_buffer, ADC_BUFFER_SIZE, ADC_CHANNELS, 3.3f, 4095.0f);
 800287a:	2304      	movs	r3, #4
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	eddf 0a43 	vldr	s1, [pc, #268]	@ 800298c <plotter_begin+0x2e4>
 8002882:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8002990 <plotter_begin+0x2e8>
 8002886:	23c8      	movs	r3, #200	@ 0xc8
 8002888:	4a42      	ldr	r2, [pc, #264]	@ (8002994 <plotter_begin+0x2ec>)
 800288a:	4943      	ldr	r1, [pc, #268]	@ (8002998 <plotter_begin+0x2f0>)
 800288c:	4843      	ldr	r0, [pc, #268]	@ (800299c <plotter_begin+0x2f4>)
 800288e:	f7fe fa47 	bl	8000d20 <ADC_DMA_Init>
	ADC_DMA_Start(&adc_dma);
 8002892:	4842      	ldr	r0, [pc, #264]	@ (800299c <plotter_begin+0x2f4>)
 8002894:	f7fe fa79 	bl	8000d8a <ADC_DMA_Start>

	FIR_init(&LP_prismatic_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002898:	eddf 0a41 	vldr	s1, [pc, #260]	@ 80029a0 <plotter_begin+0x2f8>
 800289c:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80028a0:	211f      	movs	r1, #31
 80028a2:	4840      	ldr	r0, [pc, #256]	@ (80029a4 <plotter_begin+0x2fc>)
 80028a4:	f7fe fbf0 	bl	8001088 <FIR_init>
	FIR_init(&LP_prismatic_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80028a8:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 80029a0 <plotter_begin+0x2f8>
 80028ac:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80028b0:	211f      	movs	r1, #31
 80028b2:	483d      	ldr	r0, [pc, #244]	@ (80029a8 <plotter_begin+0x300>)
 80028b4:	f7fe fbe8 	bl	8001088 <FIR_init>
	FIR_init(&LP_revolute_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80028b8:	eddf 0a39 	vldr	s1, [pc, #228]	@ 80029a0 <plotter_begin+0x2f8>
 80028bc:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80028c0:	211f      	movs	r1, #31
 80028c2:	483a      	ldr	r0, [pc, #232]	@ (80029ac <plotter_begin+0x304>)
 80028c4:	f7fe fbe0 	bl	8001088 <FIR_init>
	FIR_init(&LP_revolute_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80028c8:	eddf 0a35 	vldr	s1, [pc, #212]	@ 80029a0 <plotter_begin+0x2f8>
 80028cc:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80028d0:	211f      	movs	r1, #31
 80028d2:	4837      	ldr	r0, [pc, #220]	@ (80029b0 <plotter_begin+0x308>)
 80028d4:	f7fe fbd8 	bl	8001088 <FIR_init>

	Kalman_Start(&flit_revolute_velocity, revolute_A, revolute_B);
 80028d8:	4a36      	ldr	r2, [pc, #216]	@ (80029b4 <plotter_begin+0x30c>)
 80028da:	4937      	ldr	r1, [pc, #220]	@ (80029b8 <plotter_begin+0x310>)
 80028dc:	4837      	ldr	r0, [pc, #220]	@ (80029bc <plotter_begin+0x314>)
 80028de:	f7ff fbe5 	bl	80020ac <Kalman_Start>
	Kalman_Start(&flit_prismatic_velocity, prismatic_A, prismatic_B);
 80028e2:	4a37      	ldr	r2, [pc, #220]	@ (80029c0 <plotter_begin+0x318>)
 80028e4:	4937      	ldr	r1, [pc, #220]	@ (80029c4 <plotter_begin+0x31c>)
 80028e6:	4838      	ldr	r0, [pc, #224]	@ (80029c8 <plotter_begin+0x320>)
 80028e8:	f7ff fbe0 	bl	80020ac <Kalman_Start>

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM, registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);
 80028ec:	23c8      	movs	r3, #200	@ 0xc8
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	2315      	movs	r3, #21
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	4b35      	ldr	r3, [pc, #212]	@ (80029cc <plotter_begin+0x324>)
 80028f6:	4a36      	ldr	r2, [pc, #216]	@ (80029d0 <plotter_begin+0x328>)
 80028f8:	4936      	ldr	r1, [pc, #216]	@ (80029d4 <plotter_begin+0x32c>)
 80028fa:	4837      	ldr	r0, [pc, #220]	@ (80029d8 <plotter_begin+0x330>)
 80028fc:	f7fe fd24 	bl	8001348 <Modbus_init>

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8002900:	4836      	ldr	r0, [pc, #216]	@ (80029dc <plotter_begin+0x334>)
 8002902:	f004 faff 	bl	8006f04 <HAL_TIM_Base_Start_IT>
}
 8002906:	bf00      	nop
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	200006c8 	.word	0x200006c8
 8002910:	3e6eeeef 	.word	0x3e6eeeef
 8002914:	be6eeeef 	.word	0xbe6eeeef
 8002918:	00000000 	.word	0x00000000
 800291c:	3d4ccccd 	.word	0x3d4ccccd
 8002920:	2000070c 	.word	0x2000070c
 8002924:	20000750 	.word	0x20000750
 8002928:	20000794 	.word	0x20000794
 800292c:	3e99999a 	.word	0x3e99999a
 8002930:	200007d8 	.word	0x200007d8
 8002934:	20001814 	.word	0x20001814
 8002938:	20000538 	.word	0x20000538
 800293c:	200018e0 	.word	0x200018e0
 8002940:	20000584 	.word	0x20000584
 8002944:	48000800 	.word	0x48000800
 8002948:	20001a78 	.word	0x20001a78
 800294c:	200004a0 	.word	0x200004a0
 8002950:	200004ec 	.word	0x200004ec
 8002954:	20000698 	.word	0x20000698
 8002958:	44fa0000 	.word	0x44fa0000
 800295c:	477fff00 	.word	0x477fff00
 8002960:	200005d0 	.word	0x200005d0
 8002964:	200005fc 	.word	0x200005fc
 8002968:	20000628 	.word	0x20000628
 800296c:	20000654 	.word	0x20000654
 8002970:	20000000 	.word	0x20000000
 8002974:	2000068c 	.word	0x2000068c
 8002978:	20000048 	.word	0x20000048
 800297c:	20000680 	.word	0x20000680
 8002980:	20000090 	.word	0x20000090
 8002984:	20000690 	.word	0x20000690
 8002988:	20000684 	.word	0x20000684
 800298c:	457ff000 	.word	0x457ff000
 8002990:	40533333 	.word	0x40533333
 8002994:	20000f4c 	.word	0x20000f4c
 8002998:	200003d4 	.word	0x200003d4
 800299c:	200006b0 	.word	0x200006b0
 80029a0:	447a0000 	.word	0x447a0000
 80029a4:	20000828 	.word	0x20000828
 80029a8:	2000081c 	.word	0x2000081c
 80029ac:	20000840 	.word	0x20000840
 80029b0:	20000834 	.word	0x20000834
 80029b4:	20000348 	.word	0x20000348
 80029b8:	20000308 	.word	0x20000308
 80029bc:	20000bcc 	.word	0x20000bcc
 80029c0:	200002f8 	.word	0x200002f8
 80029c4:	200002b8 	.word	0x200002b8
 80029c8:	2000084c 	.word	0x2000084c
 80029cc:	200015b4 	.word	0x200015b4
 80029d0:	20001b44 	.word	0x20001b44
 80029d4:	20001c10 	.word	0x20001c10
 80029d8:	200010dc 	.word	0x200010dc
 80029dc:	20001748 	.word	0x20001748

080029e0 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	78fa      	ldrb	r2, [r7, #3]
 80029f0:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80029f8:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002a00:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a1b      	ldr	r2, [pc, #108]	@ (8002a94 <SIGNAL_init+0xb4>)
 8002a26:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002a2e:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	2b03      	cmp	r3, #3
 8002a34:	d828      	bhi.n	8002a88 <SIGNAL_init+0xa8>
 8002a36:	a201      	add	r2, pc, #4	@ (adr r2, 8002a3c <SIGNAL_init+0x5c>)
 8002a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3c:	08002a87 	.word	0x08002a87
 8002a40:	08002a4d 	.word	0x08002a4d
 8002a44:	08002a6b 	.word	0x08002a6b
 8002a48:	08002a75 	.word	0x08002a75
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002a58:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a0e      	ldr	r2, [pc, #56]	@ (8002a98 <SIGNAL_init+0xb8>)
 8002a5e:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002a66:	621a      	str	r2, [r3, #32]
            break;
 8002a68:	e00e      	b.n	8002a88 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002a70:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8002a72:	e009      	b.n	8002a88 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002a82:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8002a84:	e000      	b.n	8002a88 <SIGNAL_init+0xa8>
            break;
 8002a86:	bf00      	nop
    }
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	bf800000 	.word	0xbf800000
 8002a98:	41200000 	.word	0x41200000

08002a9c <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8002a9c:	b480      	push	{r7}
 8002a9e:	b089      	sub	sp, #36	@ 0x24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	61f8      	str	r0, [r7, #28]
 8002aa4:	ed87 0a06 	vstr	s0, [r7, #24]
 8002aa8:	edc7 0a05 	vstr	s1, [r7, #20]
 8002aac:	ed87 1a04 	vstr	s2, [r7, #16]
 8002ab0:	edc7 1a03 	vstr	s3, [r7, #12]
 8002ab4:	ed87 2a02 	vstr	s4, [r7, #8]
 8002ab8:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002ae6:	bf00      	nop
 8002ae8:	3724      	adds	r7, #36	@ 0x24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <SIGNAL_config_chirp>:
                         float32_t f_start,
                         float32_t f_end,
                         float32_t duration,
                         ChirpType chirp_type,
                         float32_t min_setpoint,
                         float32_t max_setpoint) {
 8002af2:	b480      	push	{r7}
 8002af4:	b089      	sub	sp, #36	@ 0x24
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	61f8      	str	r0, [r7, #28]
 8002afa:	ed87 0a06 	vstr	s0, [r7, #24]
 8002afe:	edc7 0a05 	vstr	s1, [r7, #20]
 8002b02:	ed87 1a04 	vstr	s2, [r7, #16]
 8002b06:	edc7 1a03 	vstr	s3, [r7, #12]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	ed87 2a01 	vstr	s4, [r7, #4]
 8002b10:	edc7 2a00 	vstr	s5, [r7]
 8002b14:	72fb      	strb	r3, [r7, #11]
    sg->type = SIGNAL_CHIRP;
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	605a      	str	r2, [r3, #4]
    sg->f_start = f_start;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	619a      	str	r2, [r3, #24]
    sg->f_end = f_end;
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	61da      	str	r2, [r3, #28]
    sg->duration = duration;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	621a      	str	r2, [r3, #32]
    sg->chirp_type = chirp_type;
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	7afa      	ldrb	r2, [r7, #11]
 8002b38:	751a      	strb	r2, [r3, #20]
    sg->t = 0.0f;
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	625a      	str	r2, [r3, #36]	@ 0x24
    sg->min_setpoint = min_setpoint;
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002b4e:	bf00      	nop
 8002b50:	3724      	adds	r7, #36	@ 0x24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8002b5a:	b480      	push	{r7}
 8002b5c:	b089      	sub	sp, #36	@ 0x24
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	61f8      	str	r0, [r7, #28]
 8002b62:	ed87 0a06 	vstr	s0, [r7, #24]
 8002b66:	edc7 0a05 	vstr	s1, [r7, #20]
 8002b6a:	ed87 1a04 	vstr	s2, [r7, #16]
 8002b6e:	edc7 1a03 	vstr	s3, [r7, #12]
 8002b72:	ed87 2a02 	vstr	s4, [r7, #8]
 8002b76:	edc7 2a01 	vstr	s5, [r7, #4]
 8002b7a:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	2202      	movs	r2, #2
 8002b82:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002bae:	bf00      	nop
 8002bb0:	3724      	adds	r7, #36	@ 0x24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <SIGNAL_config_ramp>:
                        float32_t ramp_start,
                        float32_t ramp_end,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8002bba:	b480      	push	{r7}
 8002bbc:	b08b      	sub	sp, #44	@ 0x2c
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6278      	str	r0, [r7, #36]	@ 0x24
 8002bc2:	ed87 0a08 	vstr	s0, [r7, #32]
 8002bc6:	edc7 0a07 	vstr	s1, [r7, #28]
 8002bca:	ed87 1a06 	vstr	s2, [r7, #24]
 8002bce:	edc7 1a05 	vstr	s3, [r7, #20]
 8002bd2:	ed87 2a04 	vstr	s4, [r7, #16]
 8002bd6:	edc7 2a03 	vstr	s5, [r7, #12]
 8002bda:	ed87 3a02 	vstr	s6, [r7, #8]
 8002bde:	edc7 3a01 	vstr	s7, [r7, #4]
    sg->type = SIGNAL_RAMP;
 8002be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be4:	2203      	movs	r2, #3
 8002be6:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8002be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bea:	6a3a      	ldr	r2, [r7, #32]
 8002bec:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	609a      	str	r2, [r3, #8]
    sg->ramp_start = ramp_start;
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	62da      	str	r2, [r3, #44]	@ 0x2c
    sg->ramp_end = ramp_end;
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	631a      	str	r2, [r3, #48]	@ 0x30
    sg->phase = phase;
 8002c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8002c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8002c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002c18:	bf00      	nop
 8002c1a:	372c      	adds	r7, #44	@ 0x2c
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c68 <HAL_MspInit+0x44>)
 8002c2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c2e:	4a0e      	ldr	r2, [pc, #56]	@ (8002c68 <HAL_MspInit+0x44>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c36:	4b0c      	ldr	r3, [pc, #48]	@ (8002c68 <HAL_MspInit+0x44>)
 8002c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	607b      	str	r3, [r7, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c42:	4b09      	ldr	r3, [pc, #36]	@ (8002c68 <HAL_MspInit+0x44>)
 8002c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c46:	4a08      	ldr	r2, [pc, #32]	@ (8002c68 <HAL_MspInit+0x44>)
 8002c48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c4e:	4b06      	ldr	r3, [pc, #24]	@ (8002c68 <HAL_MspInit+0x44>)
 8002c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002c5a:	f003 f8f3 	bl	8005e44 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40021000 	.word	0x40021000

08002c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c70:	bf00      	nop
 8002c72:	e7fd      	b.n	8002c70 <NMI_Handler+0x4>

08002c74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c78:	bf00      	nop
 8002c7a:	e7fd      	b.n	8002c78 <HardFault_Handler+0x4>

08002c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c80:	bf00      	nop
 8002c82:	e7fd      	b.n	8002c80 <MemManage_Handler+0x4>

08002c84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c88:	bf00      	nop
 8002c8a:	e7fd      	b.n	8002c88 <BusFault_Handler+0x4>

08002c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c90:	bf00      	nop
 8002c92:	e7fd      	b.n	8002c90 <UsageFault_Handler+0x4>

08002c94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cc2:	f000 fd91 	bl	80037e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002cd0:	4802      	ldr	r0, [pc, #8]	@ (8002cdc <DMA1_Channel1_IRQHandler+0x10>)
 8002cd2:	f002 fd12 	bl	80056fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000440 	.word	0x20000440

08002ce0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002ce4:	4802      	ldr	r0, [pc, #8]	@ (8002cf0 <DMA1_Channel2_IRQHandler+0x10>)
 8002ce6:	f002 fd08 	bl	80056fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20001cdc 	.word	0x20001cdc

08002cf4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002cf8:	4802      	ldr	r0, [pc, #8]	@ (8002d04 <DMA1_Channel3_IRQHandler+0x10>)
 8002cfa:	f002 fcfe 	bl	80056fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20001d3c 	.word	0x20001d3c

08002d08 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002d0c:	4802      	ldr	r0, [pc, #8]	@ (8002d18 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002d0e:	f004 fd97 	bl	8007840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20001b44 	.word	0x20001b44

08002d1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d20:	4802      	ldr	r0, [pc, #8]	@ (8002d2c <TIM2_IRQHandler+0x10>)
 8002d22:	f004 fd8d 	bl	8007840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20001748 	.word	0x20001748

08002d30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d34:	4802      	ldr	r0, [pc, #8]	@ (8002d40 <USART2_IRQHandler+0x10>)
 8002d36:	f006 fbd1 	bl	80094dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20001c10 	.word	0x20001c10

08002d44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002d48:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002d4c:	f002 ffbe 	bl	8005ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d50:	bf00      	nop
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d5c:	4a14      	ldr	r2, [pc, #80]	@ (8002db0 <_sbrk+0x5c>)
 8002d5e:	4b15      	ldr	r3, [pc, #84]	@ (8002db4 <_sbrk+0x60>)
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d68:	4b13      	ldr	r3, [pc, #76]	@ (8002db8 <_sbrk+0x64>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d102      	bne.n	8002d76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d70:	4b11      	ldr	r3, [pc, #68]	@ (8002db8 <_sbrk+0x64>)
 8002d72:	4a12      	ldr	r2, [pc, #72]	@ (8002dbc <_sbrk+0x68>)
 8002d74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d76:	4b10      	ldr	r3, [pc, #64]	@ (8002db8 <_sbrk+0x64>)
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d207      	bcs.n	8002d94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d84:	f008 f9b0 	bl	800b0e8 <__errno>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	220c      	movs	r2, #12
 8002d8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d92:	e009      	b.n	8002da8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d94:	4b08      	ldr	r3, [pc, #32]	@ (8002db8 <_sbrk+0x64>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d9a:	4b07      	ldr	r3, [pc, #28]	@ (8002db8 <_sbrk+0x64>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4413      	add	r3, r2
 8002da2:	4a05      	ldr	r2, [pc, #20]	@ (8002db8 <_sbrk+0x64>)
 8002da4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002da6:	68fb      	ldr	r3, [r7, #12]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20020000 	.word	0x20020000
 8002db4:	00000400 	.word	0x00000400
 8002db8:	20001744 	.word	0x20001744
 8002dbc:	20001ee8 	.word	0x20001ee8

08002dc0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002dc4:	4b06      	ldr	r3, [pc, #24]	@ (8002de0 <SystemInit+0x20>)
 8002dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dca:	4a05      	ldr	r2, [pc, #20]	@ (8002de0 <SystemInit+0x20>)
 8002dcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002dd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dea:	f107 0310 	add.w	r3, r7, #16
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	605a      	str	r2, [r3, #4]
 8002df4:	609a      	str	r2, [r3, #8]
 8002df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002df8:	1d3b      	adds	r3, r7, #4
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	605a      	str	r2, [r3, #4]
 8002e00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e02:	4b1e      	ldr	r3, [pc, #120]	@ (8002e7c <MX_TIM2_Init+0x98>)
 8002e04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8002e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002e7c <MX_TIM2_Init+0x98>)
 8002e0c:	22a9      	movs	r2, #169	@ 0xa9
 8002e0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e10:	4b1a      	ldr	r3, [pc, #104]	@ (8002e7c <MX_TIM2_Init+0x98>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002e16:	4b19      	ldr	r3, [pc, #100]	@ (8002e7c <MX_TIM2_Init+0x98>)
 8002e18:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002e1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e1e:	4b17      	ldr	r3, [pc, #92]	@ (8002e7c <MX_TIM2_Init+0x98>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e24:	4b15      	ldr	r3, [pc, #84]	@ (8002e7c <MX_TIM2_Init+0x98>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e2a:	4814      	ldr	r0, [pc, #80]	@ (8002e7c <MX_TIM2_Init+0x98>)
 8002e2c:	f003 ff96 	bl	8006d5c <HAL_TIM_Base_Init>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002e36:	f7ff fc31 	bl	800269c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e40:	f107 0310 	add.w	r3, r7, #16
 8002e44:	4619      	mov	r1, r3
 8002e46:	480d      	ldr	r0, [pc, #52]	@ (8002e7c <MX_TIM2_Init+0x98>)
 8002e48:	f005 f802 	bl	8007e50 <HAL_TIM_ConfigClockSource>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002e52:	f7ff fc23 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e56:	2300      	movs	r3, #0
 8002e58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e5e:	1d3b      	adds	r3, r7, #4
 8002e60:	4619      	mov	r1, r3
 8002e62:	4806      	ldr	r0, [pc, #24]	@ (8002e7c <MX_TIM2_Init+0x98>)
 8002e64:	f005 ffda 	bl	8008e1c <HAL_TIMEx_MasterConfigSynchronization>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002e6e:	f7ff fc15 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e72:	bf00      	nop
 8002e74:	3720      	adds	r7, #32
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20001748 	.word	0x20001748

08002e80 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08c      	sub	sp, #48	@ 0x30
 8002e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e86:	f107 030c 	add.w	r3, r7, #12
 8002e8a:	2224      	movs	r2, #36	@ 0x24
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f008 f912 	bl	800b0b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e94:	463b      	mov	r3, r7
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	605a      	str	r2, [r3, #4]
 8002e9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e9e:	4b21      	ldr	r3, [pc, #132]	@ (8002f24 <MX_TIM3_Init+0xa4>)
 8002ea0:	4a21      	ldr	r2, [pc, #132]	@ (8002f28 <MX_TIM3_Init+0xa8>)
 8002ea2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8002f24 <MX_TIM3_Init+0xa4>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8002f24 <MX_TIM3_Init+0xa4>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8002f24 <MX_TIM3_Init+0xa4>)
 8002eb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002eb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f24 <MX_TIM3_Init+0xa4>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ebe:	4b19      	ldr	r3, [pc, #100]	@ (8002f24 <MX_TIM3_Init+0xa4>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002edc:	2301      	movs	r3, #1
 8002ede:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002ee8:	f107 030c 	add.w	r3, r7, #12
 8002eec:	4619      	mov	r1, r3
 8002eee:	480d      	ldr	r0, [pc, #52]	@ (8002f24 <MX_TIM3_Init+0xa4>)
 8002ef0:	f004 fb64 	bl	80075bc <HAL_TIM_Encoder_Init>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002efa:	f7ff fbcf 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002efe:	2300      	movs	r3, #0
 8002f00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f02:	2300      	movs	r3, #0
 8002f04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f06:	463b      	mov	r3, r7
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4806      	ldr	r0, [pc, #24]	@ (8002f24 <MX_TIM3_Init+0xa4>)
 8002f0c:	f005 ff86 	bl	8008e1c <HAL_TIMEx_MasterConfigSynchronization>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002f16:	f7ff fbc1 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f1a:	bf00      	nop
 8002f1c:	3730      	adds	r7, #48	@ 0x30
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20001814 	.word	0x20001814
 8002f28:	40000400 	.word	0x40000400

08002f2c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08c      	sub	sp, #48	@ 0x30
 8002f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f32:	f107 030c 	add.w	r3, r7, #12
 8002f36:	2224      	movs	r2, #36	@ 0x24
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f008 f8bc 	bl	800b0b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f40:	463b      	mov	r3, r7
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	605a      	str	r2, [r3, #4]
 8002f48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f4a:	4b21      	ldr	r3, [pc, #132]	@ (8002fd0 <MX_TIM4_Init+0xa4>)
 8002f4c:	4a21      	ldr	r2, [pc, #132]	@ (8002fd4 <MX_TIM4_Init+0xa8>)
 8002f4e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002f50:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd0 <MX_TIM4_Init+0xa4>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f56:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd0 <MX_TIM4_Init+0xa4>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8002fd0 <MX_TIM4_Init+0xa4>)
 8002f5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f62:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f64:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd0 <MX_TIM4_Init+0xa4>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f6a:	4b19      	ldr	r3, [pc, #100]	@ (8002fd0 <MX_TIM4_Init+0xa4>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002f70:	2303      	movs	r3, #3
 8002f72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f74:	2300      	movs	r3, #0
 8002f76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f84:	2300      	movs	r3, #0
 8002f86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002f94:	f107 030c 	add.w	r3, r7, #12
 8002f98:	4619      	mov	r1, r3
 8002f9a:	480d      	ldr	r0, [pc, #52]	@ (8002fd0 <MX_TIM4_Init+0xa4>)
 8002f9c:	f004 fb0e 	bl	80075bc <HAL_TIM_Encoder_Init>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002fa6:	f7ff fb79 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002faa:	2300      	movs	r3, #0
 8002fac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002fb2:	463b      	mov	r3, r7
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4806      	ldr	r0, [pc, #24]	@ (8002fd0 <MX_TIM4_Init+0xa4>)
 8002fb8:	f005 ff30 	bl	8008e1c <HAL_TIMEx_MasterConfigSynchronization>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002fc2:	f7ff fb6b 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002fc6:	bf00      	nop
 8002fc8:	3730      	adds	r7, #48	@ 0x30
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	200018e0 	.word	0x200018e0
 8002fd4:	40000800 	.word	0x40000800

08002fd8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fde:	f107 0310 	add.w	r3, r7, #16
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	605a      	str	r2, [r3, #4]
 8002fe8:	609a      	str	r2, [r3, #8]
 8002fea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fec:	1d3b      	adds	r3, r7, #4
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	605a      	str	r2, [r3, #4]
 8002ff4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800306c <MX_TIM5_Init+0x94>)
 8002ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8003070 <MX_TIM5_Init+0x98>)
 8002ffa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800306c <MX_TIM5_Init+0x94>)
 8002ffe:	22a9      	movs	r2, #169	@ 0xa9
 8003000:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003002:	4b1a      	ldr	r3, [pc, #104]	@ (800306c <MX_TIM5_Init+0x94>)
 8003004:	2200      	movs	r2, #0
 8003006:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003008:	4b18      	ldr	r3, [pc, #96]	@ (800306c <MX_TIM5_Init+0x94>)
 800300a:	f04f 32ff 	mov.w	r2, #4294967295
 800300e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003010:	4b16      	ldr	r3, [pc, #88]	@ (800306c <MX_TIM5_Init+0x94>)
 8003012:	2200      	movs	r2, #0
 8003014:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003016:	4b15      	ldr	r3, [pc, #84]	@ (800306c <MX_TIM5_Init+0x94>)
 8003018:	2200      	movs	r2, #0
 800301a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800301c:	4813      	ldr	r0, [pc, #76]	@ (800306c <MX_TIM5_Init+0x94>)
 800301e:	f003 fe9d 	bl	8006d5c <HAL_TIM_Base_Init>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003028:	f7ff fb38 	bl	800269c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800302c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003030:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003032:	f107 0310 	add.w	r3, r7, #16
 8003036:	4619      	mov	r1, r3
 8003038:	480c      	ldr	r0, [pc, #48]	@ (800306c <MX_TIM5_Init+0x94>)
 800303a:	f004 ff09 	bl	8007e50 <HAL_TIM_ConfigClockSource>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003044:	f7ff fb2a 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003048:	2300      	movs	r3, #0
 800304a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003050:	1d3b      	adds	r3, r7, #4
 8003052:	4619      	mov	r1, r3
 8003054:	4805      	ldr	r0, [pc, #20]	@ (800306c <MX_TIM5_Init+0x94>)
 8003056:	f005 fee1 	bl	8008e1c <HAL_TIMEx_MasterConfigSynchronization>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003060:	f7ff fb1c 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003064:	bf00      	nop
 8003066:	3720      	adds	r7, #32
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	200019ac 	.word	0x200019ac
 8003070:	40000c00 	.word	0x40000c00

08003074 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b09c      	sub	sp, #112	@ 0x70
 8003078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800307a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	605a      	str	r2, [r3, #4]
 8003084:	609a      	str	r2, [r3, #8]
 8003086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003088:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003094:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	611a      	str	r2, [r3, #16]
 80030a4:	615a      	str	r2, [r3, #20]
 80030a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80030a8:	1d3b      	adds	r3, r7, #4
 80030aa:	2234      	movs	r2, #52	@ 0x34
 80030ac:	2100      	movs	r1, #0
 80030ae:	4618      	mov	r0, r3
 80030b0:	f008 f802 	bl	800b0b8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80030b4:	4b56      	ldr	r3, [pc, #344]	@ (8003210 <MX_TIM8_Init+0x19c>)
 80030b6:	4a57      	ldr	r2, [pc, #348]	@ (8003214 <MX_TIM8_Init+0x1a0>)
 80030b8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80030ba:	4b55      	ldr	r3, [pc, #340]	@ (8003210 <MX_TIM8_Init+0x19c>)
 80030bc:	2200      	movs	r2, #0
 80030be:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030c0:	4b53      	ldr	r3, [pc, #332]	@ (8003210 <MX_TIM8_Init+0x19c>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80030c6:	4b52      	ldr	r3, [pc, #328]	@ (8003210 <MX_TIM8_Init+0x19c>)
 80030c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030cc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ce:	4b50      	ldr	r3, [pc, #320]	@ (8003210 <MX_TIM8_Init+0x19c>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80030d4:	4b4e      	ldr	r3, [pc, #312]	@ (8003210 <MX_TIM8_Init+0x19c>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030da:	4b4d      	ldr	r3, [pc, #308]	@ (8003210 <MX_TIM8_Init+0x19c>)
 80030dc:	2200      	movs	r2, #0
 80030de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80030e0:	484b      	ldr	r0, [pc, #300]	@ (8003210 <MX_TIM8_Init+0x19c>)
 80030e2:	f003 fe3b 	bl	8006d5c <HAL_TIM_Base_Init>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80030ec:	f7ff fad6 	bl	800269c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030f4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80030f6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80030fa:	4619      	mov	r1, r3
 80030fc:	4844      	ldr	r0, [pc, #272]	@ (8003210 <MX_TIM8_Init+0x19c>)
 80030fe:	f004 fea7 	bl	8007e50 <HAL_TIM_ConfigClockSource>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8003108:	f7ff fac8 	bl	800269c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800310c:	4840      	ldr	r0, [pc, #256]	@ (8003210 <MX_TIM8_Init+0x19c>)
 800310e:	f003 ffdf 	bl	80070d0 <HAL_TIM_PWM_Init>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8003118:	f7ff fac0 	bl	800269c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800311c:	483c      	ldr	r0, [pc, #240]	@ (8003210 <MX_TIM8_Init+0x19c>)
 800311e:	f003 ff69 	bl	8006ff4 <HAL_TIM_OC_Init>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8003128:	f7ff fab8 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800312c:	2300      	movs	r3, #0
 800312e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003130:	2300      	movs	r3, #0
 8003132:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003134:	2300      	movs	r3, #0
 8003136:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003138:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800313c:	4619      	mov	r1, r3
 800313e:	4834      	ldr	r0, [pc, #208]	@ (8003210 <MX_TIM8_Init+0x19c>)
 8003140:	f005 fe6c 	bl	8008e1c <HAL_TIMEx_MasterConfigSynchronization>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 800314a:	f7ff faa7 	bl	800269c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800314e:	2360      	movs	r3, #96	@ 0x60
 8003150:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003156:	2300      	movs	r3, #0
 8003158:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800315a:	2300      	movs	r3, #0
 800315c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800315e:	2300      	movs	r3, #0
 8003160:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003162:	2300      	movs	r3, #0
 8003164:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003166:	2300      	movs	r3, #0
 8003168:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800316a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800316e:	2200      	movs	r2, #0
 8003170:	4619      	mov	r1, r3
 8003172:	4827      	ldr	r0, [pc, #156]	@ (8003210 <MX_TIM8_Init+0x19c>)
 8003174:	f004 fd58 	bl	8007c28 <HAL_TIM_PWM_ConfigChannel>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 800317e:	f7ff fa8d 	bl	800269c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003182:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003186:	2204      	movs	r2, #4
 8003188:	4619      	mov	r1, r3
 800318a:	4821      	ldr	r0, [pc, #132]	@ (8003210 <MX_TIM8_Init+0x19c>)
 800318c:	f004 fd4c 	bl	8007c28 <HAL_TIM_PWM_ConfigChannel>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8003196:	f7ff fa81 	bl	800269c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800319a:	2300      	movs	r3, #0
 800319c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800319e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80031a2:	2208      	movs	r2, #8
 80031a4:	4619      	mov	r1, r3
 80031a6:	481a      	ldr	r0, [pc, #104]	@ (8003210 <MX_TIM8_Init+0x19c>)
 80031a8:	f004 fcc4 	bl	8007b34 <HAL_TIM_OC_ConfigChannel>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80031b2:	f7ff fa73 	bl	800269c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80031b6:	2300      	movs	r3, #0
 80031b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80031ba:	2300      	movs	r3, #0
 80031bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80031ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80031ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80031d4:	2300      	movs	r3, #0
 80031d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80031d8:	2300      	movs	r3, #0
 80031da:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80031dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80031e6:	2300      	movs	r3, #0
 80031e8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80031ee:	1d3b      	adds	r3, r7, #4
 80031f0:	4619      	mov	r1, r3
 80031f2:	4807      	ldr	r0, [pc, #28]	@ (8003210 <MX_TIM8_Init+0x19c>)
 80031f4:	f005 fea8 	bl	8008f48 <HAL_TIMEx_ConfigBreakDeadTime>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <MX_TIM8_Init+0x18e>
  {
    Error_Handler();
 80031fe:	f7ff fa4d 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003202:	4803      	ldr	r0, [pc, #12]	@ (8003210 <MX_TIM8_Init+0x19c>)
 8003204:	f000 f914 	bl	8003430 <HAL_TIM_MspPostInit>

}
 8003208:	bf00      	nop
 800320a:	3770      	adds	r7, #112	@ 0x70
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	20001a78 	.word	0x20001a78
 8003214:	40013400 	.word	0x40013400

08003218 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800321c:	4b14      	ldr	r3, [pc, #80]	@ (8003270 <MX_TIM16_Init+0x58>)
 800321e:	4a15      	ldr	r2, [pc, #84]	@ (8003274 <MX_TIM16_Init+0x5c>)
 8003220:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8003222:	4b13      	ldr	r3, [pc, #76]	@ (8003270 <MX_TIM16_Init+0x58>)
 8003224:	22a9      	movs	r2, #169	@ 0xa9
 8003226:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003228:	4b11      	ldr	r3, [pc, #68]	@ (8003270 <MX_TIM16_Init+0x58>)
 800322a:	2200      	movs	r2, #0
 800322c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800322e:	4b10      	ldr	r3, [pc, #64]	@ (8003270 <MX_TIM16_Init+0x58>)
 8003230:	f240 4279 	movw	r2, #1145	@ 0x479
 8003234:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003236:	4b0e      	ldr	r3, [pc, #56]	@ (8003270 <MX_TIM16_Init+0x58>)
 8003238:	2200      	movs	r2, #0
 800323a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800323c:	4b0c      	ldr	r3, [pc, #48]	@ (8003270 <MX_TIM16_Init+0x58>)
 800323e:	2200      	movs	r2, #0
 8003240:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003242:	4b0b      	ldr	r3, [pc, #44]	@ (8003270 <MX_TIM16_Init+0x58>)
 8003244:	2200      	movs	r2, #0
 8003246:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003248:	4809      	ldr	r0, [pc, #36]	@ (8003270 <MX_TIM16_Init+0x58>)
 800324a:	f003 fd87 	bl	8006d5c <HAL_TIM_Base_Init>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003254:	f7ff fa22 	bl	800269c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8003258:	2108      	movs	r1, #8
 800325a:	4805      	ldr	r0, [pc, #20]	@ (8003270 <MX_TIM16_Init+0x58>)
 800325c:	f004 f8b8 	bl	80073d0 <HAL_TIM_OnePulse_Init>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8003266:	f7ff fa19 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800326a:	bf00      	nop
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20001b44 	.word	0x20001b44
 8003274:	40014400 	.word	0x40014400

08003278 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003288:	d114      	bne.n	80032b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800328a:	4b2b      	ldr	r3, [pc, #172]	@ (8003338 <HAL_TIM_Base_MspInit+0xc0>)
 800328c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328e:	4a2a      	ldr	r2, [pc, #168]	@ (8003338 <HAL_TIM_Base_MspInit+0xc0>)
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	6593      	str	r3, [r2, #88]	@ 0x58
 8003296:	4b28      	ldr	r3, [pc, #160]	@ (8003338 <HAL_TIM_Base_MspInit+0xc0>)
 8003298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80032a2:	2200      	movs	r2, #0
 80032a4:	2100      	movs	r1, #0
 80032a6:	201c      	movs	r0, #28
 80032a8:	f002 f80f 	bl	80052ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80032ac:	201c      	movs	r0, #28
 80032ae:	f002 f826 	bl	80052fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80032b2:	e03c      	b.n	800332e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a20      	ldr	r2, [pc, #128]	@ (800333c <HAL_TIM_Base_MspInit+0xc4>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d10c      	bne.n	80032d8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80032be:	4b1e      	ldr	r3, [pc, #120]	@ (8003338 <HAL_TIM_Base_MspInit+0xc0>)
 80032c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003338 <HAL_TIM_Base_MspInit+0xc0>)
 80032c4:	f043 0308 	orr.w	r3, r3, #8
 80032c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80032ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003338 <HAL_TIM_Base_MspInit+0xc0>)
 80032cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	693b      	ldr	r3, [r7, #16]
}
 80032d6:	e02a      	b.n	800332e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a18      	ldr	r2, [pc, #96]	@ (8003340 <HAL_TIM_Base_MspInit+0xc8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d10c      	bne.n	80032fc <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80032e2:	4b15      	ldr	r3, [pc, #84]	@ (8003338 <HAL_TIM_Base_MspInit+0xc0>)
 80032e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032e6:	4a14      	ldr	r2, [pc, #80]	@ (8003338 <HAL_TIM_Base_MspInit+0xc0>)
 80032e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80032ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80032ee:	4b12      	ldr	r3, [pc, #72]	@ (8003338 <HAL_TIM_Base_MspInit+0xc0>)
 80032f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
}
 80032fa:	e018      	b.n	800332e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM16)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a10      	ldr	r2, [pc, #64]	@ (8003344 <HAL_TIM_Base_MspInit+0xcc>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d113      	bne.n	800332e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003306:	4b0c      	ldr	r3, [pc, #48]	@ (8003338 <HAL_TIM_Base_MspInit+0xc0>)
 8003308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800330a:	4a0b      	ldr	r2, [pc, #44]	@ (8003338 <HAL_TIM_Base_MspInit+0xc0>)
 800330c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003310:	6613      	str	r3, [r2, #96]	@ 0x60
 8003312:	4b09      	ldr	r3, [pc, #36]	@ (8003338 <HAL_TIM_Base_MspInit+0xc0>)
 8003314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800331e:	2200      	movs	r2, #0
 8003320:	2100      	movs	r1, #0
 8003322:	2019      	movs	r0, #25
 8003324:	f001 ffd1 	bl	80052ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003328:	2019      	movs	r0, #25
 800332a:	f001 ffe8 	bl	80052fe <HAL_NVIC_EnableIRQ>
}
 800332e:	bf00      	nop
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40021000 	.word	0x40021000
 800333c:	40000c00 	.word	0x40000c00
 8003340:	40013400 	.word	0x40013400
 8003344:	40014400 	.word	0x40014400

08003348 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08c      	sub	sp, #48	@ 0x30
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003350:	f107 031c 	add.w	r3, r7, #28
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	60da      	str	r2, [r3, #12]
 800335e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a2f      	ldr	r2, [pc, #188]	@ (8003424 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d129      	bne.n	80033be <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800336a:	4b2f      	ldr	r3, [pc, #188]	@ (8003428 <HAL_TIM_Encoder_MspInit+0xe0>)
 800336c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800336e:	4a2e      	ldr	r2, [pc, #184]	@ (8003428 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003370:	f043 0302 	orr.w	r3, r3, #2
 8003374:	6593      	str	r3, [r2, #88]	@ 0x58
 8003376:	4b2c      	ldr	r3, [pc, #176]	@ (8003428 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	61bb      	str	r3, [r7, #24]
 8003380:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003382:	4b29      	ldr	r3, [pc, #164]	@ (8003428 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003386:	4a28      	ldr	r2, [pc, #160]	@ (8003428 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800338e:	4b26      	ldr	r3, [pc, #152]	@ (8003428 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800339a:	23c0      	movs	r3, #192	@ 0xc0
 800339c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339e:	2302      	movs	r3, #2
 80033a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a6:	2300      	movs	r3, #0
 80033a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033aa:	2302      	movs	r3, #2
 80033ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ae:	f107 031c 	add.w	r3, r7, #28
 80033b2:	4619      	mov	r1, r3
 80033b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033b8:	f002 faee 	bl	8005998 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80033bc:	e02e      	b.n	800341c <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM4)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a1a      	ldr	r2, [pc, #104]	@ (800342c <HAL_TIM_Encoder_MspInit+0xe4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d129      	bne.n	800341c <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033c8:	4b17      	ldr	r3, [pc, #92]	@ (8003428 <HAL_TIM_Encoder_MspInit+0xe0>)
 80033ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033cc:	4a16      	ldr	r2, [pc, #88]	@ (8003428 <HAL_TIM_Encoder_MspInit+0xe0>)
 80033ce:	f043 0304 	orr.w	r3, r3, #4
 80033d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80033d4:	4b14      	ldr	r3, [pc, #80]	@ (8003428 <HAL_TIM_Encoder_MspInit+0xe0>)
 80033d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e0:	4b11      	ldr	r3, [pc, #68]	@ (8003428 <HAL_TIM_Encoder_MspInit+0xe0>)
 80033e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e4:	4a10      	ldr	r2, [pc, #64]	@ (8003428 <HAL_TIM_Encoder_MspInit+0xe0>)
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003428 <HAL_TIM_Encoder_MspInit+0xe0>)
 80033ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80033f8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80033fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fe:	2302      	movs	r3, #2
 8003400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003402:	2300      	movs	r3, #0
 8003404:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003406:	2300      	movs	r3, #0
 8003408:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800340a:	230a      	movs	r3, #10
 800340c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800340e:	f107 031c 	add.w	r3, r7, #28
 8003412:	4619      	mov	r1, r3
 8003414:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003418:	f002 fabe 	bl	8005998 <HAL_GPIO_Init>
}
 800341c:	bf00      	nop
 800341e:	3730      	adds	r7, #48	@ 0x30
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40000400 	.word	0x40000400
 8003428:	40021000 	.word	0x40021000
 800342c:	40000800 	.word	0x40000800

08003430 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08a      	sub	sp, #40	@ 0x28
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003438:	f107 0314 	add.w	r3, r7, #20
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	60da      	str	r2, [r3, #12]
 8003446:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1f      	ldr	r2, [pc, #124]	@ (80034cc <HAL_TIM_MspPostInit+0x9c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d138      	bne.n	80034c4 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003452:	4b1f      	ldr	r3, [pc, #124]	@ (80034d0 <HAL_TIM_MspPostInit+0xa0>)
 8003454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003456:	4a1e      	ldr	r2, [pc, #120]	@ (80034d0 <HAL_TIM_MspPostInit+0xa0>)
 8003458:	f043 0304 	orr.w	r3, r3, #4
 800345c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800345e:	4b1c      	ldr	r3, [pc, #112]	@ (80034d0 <HAL_TIM_MspPostInit+0xa0>)
 8003460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800346a:	4b19      	ldr	r3, [pc, #100]	@ (80034d0 <HAL_TIM_MspPostInit+0xa0>)
 800346c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346e:	4a18      	ldr	r2, [pc, #96]	@ (80034d0 <HAL_TIM_MspPostInit+0xa0>)
 8003470:	f043 0302 	orr.w	r3, r3, #2
 8003474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003476:	4b16      	ldr	r3, [pc, #88]	@ (80034d0 <HAL_TIM_MspPostInit+0xa0>)
 8003478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003482:	23c0      	movs	r3, #192	@ 0xc0
 8003484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003486:	2302      	movs	r3, #2
 8003488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348e:	2300      	movs	r3, #0
 8003490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003492:	2304      	movs	r3, #4
 8003494:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003496:	f107 0314 	add.w	r3, r7, #20
 800349a:	4619      	mov	r1, r3
 800349c:	480d      	ldr	r0, [pc, #52]	@ (80034d4 <HAL_TIM_MspPostInit+0xa4>)
 800349e:	f002 fa7b 	bl	8005998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80034a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a8:	2302      	movs	r3, #2
 80034aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b0:	2300      	movs	r3, #0
 80034b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80034b4:	230a      	movs	r3, #10
 80034b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b8:	f107 0314 	add.w	r3, r7, #20
 80034bc:	4619      	mov	r1, r3
 80034be:	4806      	ldr	r0, [pc, #24]	@ (80034d8 <HAL_TIM_MspPostInit+0xa8>)
 80034c0:	f002 fa6a 	bl	8005998 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80034c4:	bf00      	nop
 80034c6:	3728      	adds	r7, #40	@ 0x28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40013400 	.word	0x40013400
 80034d0:	40021000 	.word	0x40021000
 80034d4:	48000800 	.word	0x48000800
 80034d8:	48000400 	.word	0x48000400

080034dc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034e0:	4b23      	ldr	r3, [pc, #140]	@ (8003570 <MX_USART2_UART_Init+0x94>)
 80034e2:	4a24      	ldr	r2, [pc, #144]	@ (8003574 <MX_USART2_UART_Init+0x98>)
 80034e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80034e6:	4b22      	ldr	r3, [pc, #136]	@ (8003570 <MX_USART2_UART_Init+0x94>)
 80034e8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80034ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80034ee:	4b20      	ldr	r3, [pc, #128]	@ (8003570 <MX_USART2_UART_Init+0x94>)
 80034f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80034f4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003570 <MX_USART2_UART_Init+0x94>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80034fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003570 <MX_USART2_UART_Init+0x94>)
 80034fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003502:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003504:	4b1a      	ldr	r3, [pc, #104]	@ (8003570 <MX_USART2_UART_Init+0x94>)
 8003506:	220c      	movs	r2, #12
 8003508:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800350a:	4b19      	ldr	r3, [pc, #100]	@ (8003570 <MX_USART2_UART_Init+0x94>)
 800350c:	2200      	movs	r2, #0
 800350e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003510:	4b17      	ldr	r3, [pc, #92]	@ (8003570 <MX_USART2_UART_Init+0x94>)
 8003512:	2200      	movs	r2, #0
 8003514:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003516:	4b16      	ldr	r3, [pc, #88]	@ (8003570 <MX_USART2_UART_Init+0x94>)
 8003518:	2200      	movs	r2, #0
 800351a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800351c:	4b14      	ldr	r3, [pc, #80]	@ (8003570 <MX_USART2_UART_Init+0x94>)
 800351e:	2200      	movs	r2, #0
 8003520:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003522:	4b13      	ldr	r3, [pc, #76]	@ (8003570 <MX_USART2_UART_Init+0x94>)
 8003524:	2200      	movs	r2, #0
 8003526:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003528:	4811      	ldr	r0, [pc, #68]	@ (8003570 <MX_USART2_UART_Init+0x94>)
 800352a:	f005 fdf1 	bl	8009110 <HAL_UART_Init>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8003534:	f7ff f8b2 	bl	800269c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003538:	2100      	movs	r1, #0
 800353a:	480d      	ldr	r0, [pc, #52]	@ (8003570 <MX_USART2_UART_Init+0x94>)
 800353c:	f007 fc23 	bl	800ad86 <HAL_UARTEx_SetTxFifoThreshold>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8003546:	f7ff f8a9 	bl	800269c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800354a:	2100      	movs	r1, #0
 800354c:	4808      	ldr	r0, [pc, #32]	@ (8003570 <MX_USART2_UART_Init+0x94>)
 800354e:	f007 fc58 	bl	800ae02 <HAL_UARTEx_SetRxFifoThreshold>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8003558:	f7ff f8a0 	bl	800269c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800355c:	4804      	ldr	r0, [pc, #16]	@ (8003570 <MX_USART2_UART_Init+0x94>)
 800355e:	f007 fbd9 	bl	800ad14 <HAL_UARTEx_DisableFifoMode>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8003568:	f7ff f898 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800356c:	bf00      	nop
 800356e:	bd80      	pop	{r7, pc}
 8003570:	20001c10 	.word	0x20001c10
 8003574:	40004400 	.word	0x40004400

08003578 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b09e      	sub	sp, #120	@ 0x78
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003580:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003590:	f107 0310 	add.w	r3, r7, #16
 8003594:	2254      	movs	r2, #84	@ 0x54
 8003596:	2100      	movs	r1, #0
 8003598:	4618      	mov	r0, r3
 800359a:	f007 fd8d 	bl	800b0b8 <memset>
  if(uartHandle->Instance==USART2)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a4d      	ldr	r2, [pc, #308]	@ (80036d8 <HAL_UART_MspInit+0x160>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	f040 8092 	bne.w	80036ce <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80035aa:	2302      	movs	r3, #2
 80035ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035b2:	f107 0310 	add.w	r3, r7, #16
 80035b6:	4618      	mov	r0, r3
 80035b8:	f003 f982 	bl	80068c0 <HAL_RCCEx_PeriphCLKConfig>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80035c2:	f7ff f86b 	bl	800269c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035c6:	4b45      	ldr	r3, [pc, #276]	@ (80036dc <HAL_UART_MspInit+0x164>)
 80035c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ca:	4a44      	ldr	r2, [pc, #272]	@ (80036dc <HAL_UART_MspInit+0x164>)
 80035cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80035d2:	4b42      	ldr	r3, [pc, #264]	@ (80036dc <HAL_UART_MspInit+0x164>)
 80035d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035de:	4b3f      	ldr	r3, [pc, #252]	@ (80036dc <HAL_UART_MspInit+0x164>)
 80035e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e2:	4a3e      	ldr	r2, [pc, #248]	@ (80036dc <HAL_UART_MspInit+0x164>)
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035ea:	4b3c      	ldr	r3, [pc, #240]	@ (80036dc <HAL_UART_MspInit+0x164>)
 80035ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	60bb      	str	r3, [r7, #8]
 80035f4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80035f6:	230c      	movs	r3, #12
 80035f8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fa:	2302      	movs	r3, #2
 80035fc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003602:	2300      	movs	r3, #0
 8003604:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003606:	2307      	movs	r3, #7
 8003608:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800360a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800360e:	4619      	mov	r1, r3
 8003610:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003614:	f002 f9c0 	bl	8005998 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8003618:	4b31      	ldr	r3, [pc, #196]	@ (80036e0 <HAL_UART_MspInit+0x168>)
 800361a:	4a32      	ldr	r2, [pc, #200]	@ (80036e4 <HAL_UART_MspInit+0x16c>)
 800361c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800361e:	4b30      	ldr	r3, [pc, #192]	@ (80036e0 <HAL_UART_MspInit+0x168>)
 8003620:	221a      	movs	r2, #26
 8003622:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003624:	4b2e      	ldr	r3, [pc, #184]	@ (80036e0 <HAL_UART_MspInit+0x168>)
 8003626:	2200      	movs	r2, #0
 8003628:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800362a:	4b2d      	ldr	r3, [pc, #180]	@ (80036e0 <HAL_UART_MspInit+0x168>)
 800362c:	2200      	movs	r2, #0
 800362e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003630:	4b2b      	ldr	r3, [pc, #172]	@ (80036e0 <HAL_UART_MspInit+0x168>)
 8003632:	2280      	movs	r2, #128	@ 0x80
 8003634:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003636:	4b2a      	ldr	r3, [pc, #168]	@ (80036e0 <HAL_UART_MspInit+0x168>)
 8003638:	2200      	movs	r2, #0
 800363a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800363c:	4b28      	ldr	r3, [pc, #160]	@ (80036e0 <HAL_UART_MspInit+0x168>)
 800363e:	2200      	movs	r2, #0
 8003640:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003642:	4b27      	ldr	r3, [pc, #156]	@ (80036e0 <HAL_UART_MspInit+0x168>)
 8003644:	2200      	movs	r2, #0
 8003646:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003648:	4b25      	ldr	r3, [pc, #148]	@ (80036e0 <HAL_UART_MspInit+0x168>)
 800364a:	2200      	movs	r2, #0
 800364c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800364e:	4824      	ldr	r0, [pc, #144]	@ (80036e0 <HAL_UART_MspInit+0x168>)
 8003650:	f001 fe70 	bl	8005334 <HAL_DMA_Init>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800365a:	f7ff f81f 	bl	800269c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a1f      	ldr	r2, [pc, #124]	@ (80036e0 <HAL_UART_MspInit+0x168>)
 8003662:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003666:	4a1e      	ldr	r2, [pc, #120]	@ (80036e0 <HAL_UART_MspInit+0x168>)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 800366c:	4b1e      	ldr	r3, [pc, #120]	@ (80036e8 <HAL_UART_MspInit+0x170>)
 800366e:	4a1f      	ldr	r2, [pc, #124]	@ (80036ec <HAL_UART_MspInit+0x174>)
 8003670:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003672:	4b1d      	ldr	r3, [pc, #116]	@ (80036e8 <HAL_UART_MspInit+0x170>)
 8003674:	221b      	movs	r2, #27
 8003676:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003678:	4b1b      	ldr	r3, [pc, #108]	@ (80036e8 <HAL_UART_MspInit+0x170>)
 800367a:	2210      	movs	r2, #16
 800367c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800367e:	4b1a      	ldr	r3, [pc, #104]	@ (80036e8 <HAL_UART_MspInit+0x170>)
 8003680:	2200      	movs	r2, #0
 8003682:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003684:	4b18      	ldr	r3, [pc, #96]	@ (80036e8 <HAL_UART_MspInit+0x170>)
 8003686:	2280      	movs	r2, #128	@ 0x80
 8003688:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800368a:	4b17      	ldr	r3, [pc, #92]	@ (80036e8 <HAL_UART_MspInit+0x170>)
 800368c:	2200      	movs	r2, #0
 800368e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003690:	4b15      	ldr	r3, [pc, #84]	@ (80036e8 <HAL_UART_MspInit+0x170>)
 8003692:	2200      	movs	r2, #0
 8003694:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003696:	4b14      	ldr	r3, [pc, #80]	@ (80036e8 <HAL_UART_MspInit+0x170>)
 8003698:	2200      	movs	r2, #0
 800369a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800369c:	4b12      	ldr	r3, [pc, #72]	@ (80036e8 <HAL_UART_MspInit+0x170>)
 800369e:	2200      	movs	r2, #0
 80036a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80036a2:	4811      	ldr	r0, [pc, #68]	@ (80036e8 <HAL_UART_MspInit+0x170>)
 80036a4:	f001 fe46 	bl	8005334 <HAL_DMA_Init>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80036ae:	f7fe fff5 	bl	800269c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a0c      	ldr	r2, [pc, #48]	@ (80036e8 <HAL_UART_MspInit+0x170>)
 80036b6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80036b8:	4a0b      	ldr	r2, [pc, #44]	@ (80036e8 <HAL_UART_MspInit+0x170>)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80036be:	2200      	movs	r2, #0
 80036c0:	2100      	movs	r1, #0
 80036c2:	2026      	movs	r0, #38	@ 0x26
 80036c4:	f001 fe01 	bl	80052ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036c8:	2026      	movs	r0, #38	@ 0x26
 80036ca:	f001 fe18 	bl	80052fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80036ce:	bf00      	nop
 80036d0:	3778      	adds	r7, #120	@ 0x78
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40004400 	.word	0x40004400
 80036dc:	40021000 	.word	0x40021000
 80036e0:	20001cdc 	.word	0x20001cdc
 80036e4:	4002001c 	.word	0x4002001c
 80036e8:	20001d3c 	.word	0x20001d3c
 80036ec:	40020030 	.word	0x40020030

080036f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036f0:	480d      	ldr	r0, [pc, #52]	@ (8003728 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80036f4:	f7ff fb64 	bl	8002dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036f8:	480c      	ldr	r0, [pc, #48]	@ (800372c <LoopForever+0x6>)
  ldr r1, =_edata
 80036fa:	490d      	ldr	r1, [pc, #52]	@ (8003730 <LoopForever+0xa>)
  ldr r2, =_sidata
 80036fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003734 <LoopForever+0xe>)
  movs r3, #0
 80036fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003700:	e002      	b.n	8003708 <LoopCopyDataInit>

08003702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003706:	3304      	adds	r3, #4

08003708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800370a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800370c:	d3f9      	bcc.n	8003702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800370e:	4a0a      	ldr	r2, [pc, #40]	@ (8003738 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003710:	4c0a      	ldr	r4, [pc, #40]	@ (800373c <LoopForever+0x16>)
  movs r3, #0
 8003712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003714:	e001      	b.n	800371a <LoopFillZerobss>

08003716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003718:	3204      	adds	r2, #4

0800371a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800371a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800371c:	d3fb      	bcc.n	8003716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800371e:	f007 fce9 	bl	800b0f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003722:	f7fe fe7d 	bl	8002420 <main>

08003726 <LoopForever>:

LoopForever:
    b LoopForever
 8003726:	e7fe      	b.n	8003726 <LoopForever>
  ldr   r0, =_estack
 8003728:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800372c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003730:	200003b4 	.word	0x200003b4
  ldr r2, =_sidata
 8003734:	0800c0bc 	.word	0x0800c0bc
  ldr r2, =_sbss
 8003738:	200003b4 	.word	0x200003b4
  ldr r4, =_ebss
 800373c:	20001ee8 	.word	0x20001ee8

08003740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003740:	e7fe      	b.n	8003740 <ADC1_2_IRQHandler>

08003742 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003748:	2300      	movs	r3, #0
 800374a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800374c:	2003      	movs	r0, #3
 800374e:	f001 fdb1 	bl	80052b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003752:	2000      	movs	r0, #0
 8003754:	f000 f80e 	bl	8003774 <HAL_InitTick>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	71fb      	strb	r3, [r7, #7]
 8003762:	e001      	b.n	8003768 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003764:	f7ff fa5e 	bl	8002c24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003768:	79fb      	ldrb	r3, [r7, #7]

}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003780:	4b16      	ldr	r3, [pc, #88]	@ (80037dc <HAL_InitTick+0x68>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d022      	beq.n	80037ce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003788:	4b15      	ldr	r3, [pc, #84]	@ (80037e0 <HAL_InitTick+0x6c>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	4b13      	ldr	r3, [pc, #76]	@ (80037dc <HAL_InitTick+0x68>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003794:	fbb1 f3f3 	udiv	r3, r1, r3
 8003798:	fbb2 f3f3 	udiv	r3, r2, r3
 800379c:	4618      	mov	r0, r3
 800379e:	f001 fdbc 	bl	800531a <HAL_SYSTICK_Config>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10f      	bne.n	80037c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b0f      	cmp	r3, #15
 80037ac:	d809      	bhi.n	80037c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037ae:	2200      	movs	r2, #0
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	f04f 30ff 	mov.w	r0, #4294967295
 80037b6:	f001 fd88 	bl	80052ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037ba:	4a0a      	ldr	r2, [pc, #40]	@ (80037e4 <HAL_InitTick+0x70>)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	e007      	b.n	80037d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
 80037c6:	e004      	b.n	80037d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
 80037cc:	e001      	b.n	80037d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20000360 	.word	0x20000360
 80037e0:	20000358 	.word	0x20000358
 80037e4:	2000035c 	.word	0x2000035c

080037e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037ec:	4b05      	ldr	r3, [pc, #20]	@ (8003804 <HAL_IncTick+0x1c>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4b05      	ldr	r3, [pc, #20]	@ (8003808 <HAL_IncTick+0x20>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4413      	add	r3, r2
 80037f6:	4a03      	ldr	r2, [pc, #12]	@ (8003804 <HAL_IncTick+0x1c>)
 80037f8:	6013      	str	r3, [r2, #0]
}
 80037fa:	bf00      	nop
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	20001d9c 	.word	0x20001d9c
 8003808:	20000360 	.word	0x20000360

0800380c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return uwTick;
 8003810:	4b03      	ldr	r3, [pc, #12]	@ (8003820 <HAL_GetTick+0x14>)
 8003812:	681b      	ldr	r3, [r3, #0]
}
 8003814:	4618      	mov	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	20001d9c 	.word	0x20001d9c

08003824 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	609a      	str	r2, [r3, #8]
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	609a      	str	r2, [r3, #8]
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	3360      	adds	r3, #96	@ 0x60
 800389e:	461a      	mov	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	4b08      	ldr	r3, [pc, #32]	@ (80038d0 <LL_ADC_SetOffset+0x44>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80038c4:	bf00      	nop
 80038c6:	371c      	adds	r7, #28
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	03fff000 	.word	0x03fff000

080038d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3360      	adds	r3, #96	@ 0x60
 80038e2:	461a      	mov	r2, r3
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	3360      	adds	r3, #96	@ 0x60
 8003910:	461a      	mov	r2, r3
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	431a      	orrs	r2, r3
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800392a:	bf00      	nop
 800392c:	371c      	adds	r7, #28
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003936:	b480      	push	{r7}
 8003938:	b087      	sub	sp, #28
 800393a:	af00      	add	r7, sp, #0
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	3360      	adds	r3, #96	@ 0x60
 8003946:	461a      	mov	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	431a      	orrs	r2, r3
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003960:	bf00      	nop
 8003962:	371c      	adds	r7, #28
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	3360      	adds	r3, #96	@ 0x60
 800397c:	461a      	mov	r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	431a      	orrs	r2, r3
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
 80039aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	615a      	str	r2, [r3, #20]
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80039dc:	2301      	movs	r3, #1
 80039de:	e000      	b.n	80039e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b087      	sub	sp, #28
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3330      	adds	r3, #48	@ 0x30
 80039fe:	461a      	mov	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	0a1b      	lsrs	r3, r3, #8
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	4413      	add	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	211f      	movs	r1, #31
 8003a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	401a      	ands	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	0e9b      	lsrs	r3, r3, #26
 8003a26:	f003 011f 	and.w	r1, r3, #31
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f003 031f 	and.w	r3, r3, #31
 8003a30:	fa01 f303 	lsl.w	r3, r1, r3
 8003a34:	431a      	orrs	r2, r3
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a3a:	bf00      	nop
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b087      	sub	sp, #28
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	3314      	adds	r3, #20
 8003a56:	461a      	mov	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	0e5b      	lsrs	r3, r3, #25
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	4413      	add	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	0d1b      	lsrs	r3, r3, #20
 8003a6e:	f003 031f 	and.w	r3, r3, #31
 8003a72:	2107      	movs	r1, #7
 8003a74:	fa01 f303 	lsl.w	r3, r1, r3
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	401a      	ands	r2, r3
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	0d1b      	lsrs	r3, r3, #20
 8003a80:	f003 031f 	and.w	r3, r3, #31
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a90:	bf00      	nop
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	401a      	ands	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f003 0318 	and.w	r3, r3, #24
 8003abe:	4908      	ldr	r1, [pc, #32]	@ (8003ae0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003ac0:	40d9      	lsrs	r1, r3
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	400b      	ands	r3, r1
 8003ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aca:	431a      	orrs	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003ad2:	bf00      	nop
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	0007ffff 	.word	0x0007ffff

08003ae4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 031f 	and.w	r3, r3, #31
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003b10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6093      	str	r3, [r2, #8]
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b38:	d101      	bne.n	8003b3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003b5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b60:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b88:	d101      	bne.n	8003b8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003bac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bb0:	f043 0201 	orr.w	r2, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003bd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bd8:	f043 0202 	orr.w	r2, r3, #2
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <LL_ADC_IsEnabled+0x18>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <LL_ADC_IsEnabled+0x1a>
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d101      	bne.n	8003c2a <LL_ADC_IsDisableOngoing+0x18>
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <LL_ADC_IsDisableOngoing+0x1a>
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c4c:	f043 0204 	orr.w	r2, r3, #4
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d101      	bne.n	8003c78 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c74:	2301      	movs	r3, #1
 8003c76:	e000      	b.n	8003c7a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d101      	bne.n	8003c9e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003cac:	b590      	push	{r4, r7, lr}
 8003cae:	b089      	sub	sp, #36	@ 0x24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e1a9      	b.n	800401a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d109      	bne.n	8003ce8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7fe f861 	bl	8001d9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff ff19 	bl	8003b24 <LL_ADC_IsDeepPowerDownEnabled>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d004      	beq.n	8003d02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff feff 	bl	8003b00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff ff34 	bl	8003b74 <LL_ADC_IsInternalRegulatorEnabled>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d115      	bne.n	8003d3e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff ff18 	bl	8003b4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d1c:	4b9c      	ldr	r3, [pc, #624]	@ (8003f90 <HAL_ADC_Init+0x2e4>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	099b      	lsrs	r3, r3, #6
 8003d22:	4a9c      	ldr	r2, [pc, #624]	@ (8003f94 <HAL_ADC_Init+0x2e8>)
 8003d24:	fba2 2303 	umull	r2, r3, r2, r3
 8003d28:	099b      	lsrs	r3, r3, #6
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d30:	e002      	b.n	8003d38 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f9      	bne.n	8003d32 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff ff16 	bl	8003b74 <LL_ADC_IsInternalRegulatorEnabled>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10d      	bne.n	8003d6a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d52:	f043 0210 	orr.w	r2, r3, #16
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d5e:	f043 0201 	orr.w	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff ff76 	bl	8003c60 <LL_ADC_REG_IsConversionOngoing>
 8003d74:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7a:	f003 0310 	and.w	r3, r3, #16
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f040 8142 	bne.w	8004008 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f040 813e 	bne.w	8004008 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d90:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003d94:	f043 0202 	orr.w	r2, r3, #2
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff ff23 	bl	8003bec <LL_ADC_IsEnabled>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d141      	bne.n	8003e30 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003db4:	d004      	beq.n	8003dc0 <HAL_ADC_Init+0x114>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a77      	ldr	r2, [pc, #476]	@ (8003f98 <HAL_ADC_Init+0x2ec>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d10f      	bne.n	8003de0 <HAL_ADC_Init+0x134>
 8003dc0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003dc4:	f7ff ff12 	bl	8003bec <LL_ADC_IsEnabled>
 8003dc8:	4604      	mov	r4, r0
 8003dca:	4873      	ldr	r0, [pc, #460]	@ (8003f98 <HAL_ADC_Init+0x2ec>)
 8003dcc:	f7ff ff0e 	bl	8003bec <LL_ADC_IsEnabled>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	4323      	orrs	r3, r4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	bf0c      	ite	eq
 8003dd8:	2301      	moveq	r3, #1
 8003dda:	2300      	movne	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	e012      	b.n	8003e06 <HAL_ADC_Init+0x15a>
 8003de0:	486e      	ldr	r0, [pc, #440]	@ (8003f9c <HAL_ADC_Init+0x2f0>)
 8003de2:	f7ff ff03 	bl	8003bec <LL_ADC_IsEnabled>
 8003de6:	4604      	mov	r4, r0
 8003de8:	486d      	ldr	r0, [pc, #436]	@ (8003fa0 <HAL_ADC_Init+0x2f4>)
 8003dea:	f7ff feff 	bl	8003bec <LL_ADC_IsEnabled>
 8003dee:	4603      	mov	r3, r0
 8003df0:	431c      	orrs	r4, r3
 8003df2:	486c      	ldr	r0, [pc, #432]	@ (8003fa4 <HAL_ADC_Init+0x2f8>)
 8003df4:	f7ff fefa 	bl	8003bec <LL_ADC_IsEnabled>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	4323      	orrs	r3, r4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bf0c      	ite	eq
 8003e00:	2301      	moveq	r3, #1
 8003e02:	2300      	movne	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d012      	beq.n	8003e30 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e12:	d004      	beq.n	8003e1e <HAL_ADC_Init+0x172>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a5f      	ldr	r2, [pc, #380]	@ (8003f98 <HAL_ADC_Init+0x2ec>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d101      	bne.n	8003e22 <HAL_ADC_Init+0x176>
 8003e1e:	4a62      	ldr	r2, [pc, #392]	@ (8003fa8 <HAL_ADC_Init+0x2fc>)
 8003e20:	e000      	b.n	8003e24 <HAL_ADC_Init+0x178>
 8003e22:	4a62      	ldr	r2, [pc, #392]	@ (8003fac <HAL_ADC_Init+0x300>)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	f7ff fcfa 	bl	8003824 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	7f5b      	ldrb	r3, [r3, #29]
 8003e34:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e3a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003e40:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003e46:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e4e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e50:	4313      	orrs	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d106      	bne.n	8003e6c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e62:	3b01      	subs	r3, #1
 8003e64:	045b      	lsls	r3, r3, #17
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d009      	beq.n	8003e88 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e78:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e80:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	4b48      	ldr	r3, [pc, #288]	@ (8003fb0 <HAL_ADC_Init+0x304>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6812      	ldr	r2, [r2, #0]
 8003e96:	69b9      	ldr	r1, [r7, #24]
 8003e98:	430b      	orrs	r3, r1
 8003e9a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff fee5 	bl	8003c86 <LL_ADC_INJ_IsConversionOngoing>
 8003ebc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d17f      	bne.n	8003fc4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d17c      	bne.n	8003fc4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ece:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003ed6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ee6:	f023 0302 	bic.w	r3, r3, #2
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6812      	ldr	r2, [r2, #0]
 8003eee:	69b9      	ldr	r1, [r7, #24]
 8003ef0:	430b      	orrs	r3, r1
 8003ef2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d017      	beq.n	8003f2c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003f0a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003f14:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003f18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6911      	ldr	r1, [r2, #16]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	430b      	orrs	r3, r1
 8003f26:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003f2a:	e013      	b.n	8003f54 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691a      	ldr	r2, [r3, #16]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003f3a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6812      	ldr	r2, [r2, #0]
 8003f48:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003f4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f50:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d12a      	bne.n	8003fb4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003f68:	f023 0304 	bic.w	r3, r3, #4
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f74:	4311      	orrs	r1, r2
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003f7a:	4311      	orrs	r1, r2
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f80:	430a      	orrs	r2, r1
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f042 0201 	orr.w	r2, r2, #1
 8003f8c:	611a      	str	r2, [r3, #16]
 8003f8e:	e019      	b.n	8003fc4 <HAL_ADC_Init+0x318>
 8003f90:	20000358 	.word	0x20000358
 8003f94:	053e2d63 	.word	0x053e2d63
 8003f98:	50000100 	.word	0x50000100
 8003f9c:	50000400 	.word	0x50000400
 8003fa0:	50000500 	.word	0x50000500
 8003fa4:	50000600 	.word	0x50000600
 8003fa8:	50000300 	.word	0x50000300
 8003fac:	50000700 	.word	0x50000700
 8003fb0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0201 	bic.w	r2, r2, #1
 8003fc2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d10c      	bne.n	8003fe6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd2:	f023 010f 	bic.w	r1, r3, #15
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	1e5a      	subs	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fe4:	e007      	b.n	8003ff6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 020f 	bic.w	r2, r2, #15
 8003ff4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ffa:	f023 0303 	bic.w	r3, r3, #3
 8003ffe:	f043 0201 	orr.w	r2, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004006:	e007      	b.n	8004018 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400c:	f043 0210 	orr.w	r2, r3, #16
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004018:	7ffb      	ldrb	r3, [r7, #31]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3724      	adds	r7, #36	@ 0x24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd90      	pop	{r4, r7, pc}
 8004022:	bf00      	nop

08004024 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004038:	d004      	beq.n	8004044 <HAL_ADC_Start_DMA+0x20>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a5a      	ldr	r2, [pc, #360]	@ (80041a8 <HAL_ADC_Start_DMA+0x184>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d101      	bne.n	8004048 <HAL_ADC_Start_DMA+0x24>
 8004044:	4b59      	ldr	r3, [pc, #356]	@ (80041ac <HAL_ADC_Start_DMA+0x188>)
 8004046:	e000      	b.n	800404a <HAL_ADC_Start_DMA+0x26>
 8004048:	4b59      	ldr	r3, [pc, #356]	@ (80041b0 <HAL_ADC_Start_DMA+0x18c>)
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fd4a 	bl	8003ae4 <LL_ADC_GetMultimode>
 8004050:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff fe02 	bl	8003c60 <LL_ADC_REG_IsConversionOngoing>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	f040 809b 	bne.w	800419a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_ADC_Start_DMA+0x4e>
 800406e:	2302      	movs	r3, #2
 8004070:	e096      	b.n	80041a0 <HAL_ADC_Start_DMA+0x17c>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a4d      	ldr	r2, [pc, #308]	@ (80041b4 <HAL_ADC_Start_DMA+0x190>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d008      	beq.n	8004096 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d005      	beq.n	8004096 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	2b05      	cmp	r3, #5
 800408e:	d002      	beq.n	8004096 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	2b09      	cmp	r3, #9
 8004094:	d17a      	bne.n	800418c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 fcf6 	bl	8004a88 <ADC_Enable>
 800409c:	4603      	mov	r3, r0
 800409e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80040a0:	7dfb      	ldrb	r3, [r7, #23]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d16d      	bne.n	8004182 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040aa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80040ae:	f023 0301 	bic.w	r3, r3, #1
 80040b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a3a      	ldr	r2, [pc, #232]	@ (80041a8 <HAL_ADC_Start_DMA+0x184>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d009      	beq.n	80040d8 <HAL_ADC_Start_DMA+0xb4>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a3b      	ldr	r2, [pc, #236]	@ (80041b8 <HAL_ADC_Start_DMA+0x194>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d002      	beq.n	80040d4 <HAL_ADC_Start_DMA+0xb0>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	e003      	b.n	80040dc <HAL_ADC_Start_DMA+0xb8>
 80040d4:	4b39      	ldr	r3, [pc, #228]	@ (80041bc <HAL_ADC_Start_DMA+0x198>)
 80040d6:	e001      	b.n	80040dc <HAL_ADC_Start_DMA+0xb8>
 80040d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d002      	beq.n	80040ea <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d105      	bne.n	80040f6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ee:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d006      	beq.n	8004110 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004106:	f023 0206 	bic.w	r2, r3, #6
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	661a      	str	r2, [r3, #96]	@ 0x60
 800410e:	e002      	b.n	8004116 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800411a:	4a29      	ldr	r2, [pc, #164]	@ (80041c0 <HAL_ADC_Start_DMA+0x19c>)
 800411c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004122:	4a28      	ldr	r2, [pc, #160]	@ (80041c4 <HAL_ADC_Start_DMA+0x1a0>)
 8004124:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800412a:	4a27      	ldr	r2, [pc, #156]	@ (80041c8 <HAL_ADC_Start_DMA+0x1a4>)
 800412c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	221c      	movs	r2, #28
 8004134:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f042 0210 	orr.w	r2, r2, #16
 800414c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 0201 	orr.w	r2, r2, #1
 800415c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3340      	adds	r3, #64	@ 0x40
 8004168:	4619      	mov	r1, r3
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f001 f989 	bl	8005484 <HAL_DMA_Start_IT>
 8004172:	4603      	mov	r3, r0
 8004174:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff fd5c 	bl	8003c38 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004180:	e00d      	b.n	800419e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800418a:	e008      	b.n	800419e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004198:	e001      	b.n	800419e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800419a:	2302      	movs	r3, #2
 800419c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800419e:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	50000100 	.word	0x50000100
 80041ac:	50000300 	.word	0x50000300
 80041b0:	50000700 	.word	0x50000700
 80041b4:	50000600 	.word	0x50000600
 80041b8:	50000500 	.word	0x50000500
 80041bc:	50000400 	.word	0x50000400
 80041c0:	08004c73 	.word	0x08004c73
 80041c4:	08004d4b 	.word	0x08004d4b
 80041c8:	08004d67 	.word	0x08004d67

080041cc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b0b6      	sub	sp, #216	@ 0xd8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004222:	2b01      	cmp	r3, #1
 8004224:	d102      	bne.n	800422c <HAL_ADC_ConfigChannel+0x24>
 8004226:	2302      	movs	r3, #2
 8004228:	f000 bc13 	b.w	8004a52 <HAL_ADC_ConfigChannel+0x84a>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff fd11 	bl	8003c60 <LL_ADC_REG_IsConversionOngoing>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	f040 83f3 	bne.w	8004a2c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6818      	ldr	r0, [r3, #0]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	6859      	ldr	r1, [r3, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	461a      	mov	r2, r3
 8004254:	f7ff fbcb 	bl	80039ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff fcff 	bl	8003c60 <LL_ADC_REG_IsConversionOngoing>
 8004262:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff fd0b 	bl	8003c86 <LL_ADC_INJ_IsConversionOngoing>
 8004270:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004274:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004278:	2b00      	cmp	r3, #0
 800427a:	f040 81d9 	bne.w	8004630 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800427e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004282:	2b00      	cmp	r3, #0
 8004284:	f040 81d4 	bne.w	8004630 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004290:	d10f      	bne.n	80042b2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6818      	ldr	r0, [r3, #0]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2200      	movs	r2, #0
 800429c:	4619      	mov	r1, r3
 800429e:	f7ff fbd2 	bl	8003a46 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff fb79 	bl	80039a2 <LL_ADC_SetSamplingTimeCommonConfig>
 80042b0:	e00e      	b.n	80042d0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6818      	ldr	r0, [r3, #0]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6819      	ldr	r1, [r3, #0]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	461a      	mov	r2, r3
 80042c0:	f7ff fbc1 	bl	8003a46 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2100      	movs	r1, #0
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff fb69 	bl	80039a2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	695a      	ldr	r2, [r3, #20]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	08db      	lsrs	r3, r3, #3
 80042dc:	f003 0303 	and.w	r3, r3, #3
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d022      	beq.n	8004338 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6818      	ldr	r0, [r3, #0]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	6919      	ldr	r1, [r3, #16]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004302:	f7ff fac3 	bl	800388c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6919      	ldr	r1, [r3, #16]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	461a      	mov	r2, r3
 8004314:	f7ff fb0f 	bl	8003936 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004324:	2b01      	cmp	r3, #1
 8004326:	d102      	bne.n	800432e <HAL_ADC_ConfigChannel+0x126>
 8004328:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800432c:	e000      	b.n	8004330 <HAL_ADC_ConfigChannel+0x128>
 800432e:	2300      	movs	r3, #0
 8004330:	461a      	mov	r2, r3
 8004332:	f7ff fb1b 	bl	800396c <LL_ADC_SetOffsetSaturation>
 8004336:	e17b      	b.n	8004630 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2100      	movs	r1, #0
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff fac8 	bl	80038d4 <LL_ADC_GetOffsetChannel>
 8004344:	4603      	mov	r3, r0
 8004346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10a      	bne.n	8004364 <HAL_ADC_ConfigChannel+0x15c>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2100      	movs	r1, #0
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff fabd 	bl	80038d4 <LL_ADC_GetOffsetChannel>
 800435a:	4603      	mov	r3, r0
 800435c:	0e9b      	lsrs	r3, r3, #26
 800435e:	f003 021f 	and.w	r2, r3, #31
 8004362:	e01e      	b.n	80043a2 <HAL_ADC_ConfigChannel+0x19a>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2100      	movs	r1, #0
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff fab2 	bl	80038d4 <LL_ADC_GetOffsetChannel>
 8004370:	4603      	mov	r3, r0
 8004372:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004376:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800437a:	fa93 f3a3 	rbit	r3, r3
 800437e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004382:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004386:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800438a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004392:	2320      	movs	r3, #32
 8004394:	e004      	b.n	80043a0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004396:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800439a:	fab3 f383 	clz	r3, r3
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d105      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x1b2>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	0e9b      	lsrs	r3, r3, #26
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	e018      	b.n	80043ec <HAL_ADC_ConfigChannel+0x1e4>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80043c6:	fa93 f3a3 	rbit	r3, r3
 80043ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80043ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80043d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80043de:	2320      	movs	r3, #32
 80043e0:	e004      	b.n	80043ec <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80043e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80043e6:	fab3 f383 	clz	r3, r3
 80043ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d106      	bne.n	80043fe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2200      	movs	r2, #0
 80043f6:	2100      	movs	r1, #0
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff fa81 	bl	8003900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2101      	movs	r1, #1
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff fa65 	bl	80038d4 <LL_ADC_GetOffsetChannel>
 800440a:	4603      	mov	r3, r0
 800440c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10a      	bne.n	800442a <HAL_ADC_ConfigChannel+0x222>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2101      	movs	r1, #1
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff fa5a 	bl	80038d4 <LL_ADC_GetOffsetChannel>
 8004420:	4603      	mov	r3, r0
 8004422:	0e9b      	lsrs	r3, r3, #26
 8004424:	f003 021f 	and.w	r2, r3, #31
 8004428:	e01e      	b.n	8004468 <HAL_ADC_ConfigChannel+0x260>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2101      	movs	r1, #1
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff fa4f 	bl	80038d4 <LL_ADC_GetOffsetChannel>
 8004436:	4603      	mov	r3, r0
 8004438:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004440:	fa93 f3a3 	rbit	r3, r3
 8004444:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004448:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800444c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004450:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004458:	2320      	movs	r3, #32
 800445a:	e004      	b.n	8004466 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800445c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004460:	fab3 f383 	clz	r3, r3
 8004464:	b2db      	uxtb	r3, r3
 8004466:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004470:	2b00      	cmp	r3, #0
 8004472:	d105      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x278>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	0e9b      	lsrs	r3, r3, #26
 800447a:	f003 031f 	and.w	r3, r3, #31
 800447e:	e018      	b.n	80044b2 <HAL_ADC_ConfigChannel+0x2aa>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004488:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800448c:	fa93 f3a3 	rbit	r3, r3
 8004490:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004494:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004498:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800449c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80044a4:	2320      	movs	r3, #32
 80044a6:	e004      	b.n	80044b2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80044a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044ac:	fab3 f383 	clz	r3, r3
 80044b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d106      	bne.n	80044c4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2200      	movs	r2, #0
 80044bc:	2101      	movs	r1, #1
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff fa1e 	bl	8003900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2102      	movs	r1, #2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff fa02 	bl	80038d4 <LL_ADC_GetOffsetChannel>
 80044d0:	4603      	mov	r3, r0
 80044d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10a      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x2e8>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2102      	movs	r1, #2
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff f9f7 	bl	80038d4 <LL_ADC_GetOffsetChannel>
 80044e6:	4603      	mov	r3, r0
 80044e8:	0e9b      	lsrs	r3, r3, #26
 80044ea:	f003 021f 	and.w	r2, r3, #31
 80044ee:	e01e      	b.n	800452e <HAL_ADC_ConfigChannel+0x326>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2102      	movs	r1, #2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff f9ec 	bl	80038d4 <LL_ADC_GetOffsetChannel>
 80044fc:	4603      	mov	r3, r0
 80044fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004502:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004506:	fa93 f3a3 	rbit	r3, r3
 800450a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800450e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004512:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004516:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800451e:	2320      	movs	r3, #32
 8004520:	e004      	b.n	800452c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004522:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004526:	fab3 f383 	clz	r3, r3
 800452a:	b2db      	uxtb	r3, r3
 800452c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004536:	2b00      	cmp	r3, #0
 8004538:	d105      	bne.n	8004546 <HAL_ADC_ConfigChannel+0x33e>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	0e9b      	lsrs	r3, r3, #26
 8004540:	f003 031f 	and.w	r3, r3, #31
 8004544:	e016      	b.n	8004574 <HAL_ADC_ConfigChannel+0x36c>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004552:	fa93 f3a3 	rbit	r3, r3
 8004556:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004558:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800455a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800455e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004566:	2320      	movs	r3, #32
 8004568:	e004      	b.n	8004574 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800456a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800456e:	fab3 f383 	clz	r3, r3
 8004572:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004574:	429a      	cmp	r2, r3
 8004576:	d106      	bne.n	8004586 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2200      	movs	r2, #0
 800457e:	2102      	movs	r1, #2
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff f9bd 	bl	8003900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2103      	movs	r1, #3
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff f9a1 	bl	80038d4 <LL_ADC_GetOffsetChannel>
 8004592:	4603      	mov	r3, r0
 8004594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x3aa>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2103      	movs	r1, #3
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff f996 	bl	80038d4 <LL_ADC_GetOffsetChannel>
 80045a8:	4603      	mov	r3, r0
 80045aa:	0e9b      	lsrs	r3, r3, #26
 80045ac:	f003 021f 	and.w	r2, r3, #31
 80045b0:	e017      	b.n	80045e2 <HAL_ADC_ConfigChannel+0x3da>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2103      	movs	r1, #3
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff f98b 	bl	80038d4 <LL_ADC_GetOffsetChannel>
 80045be:	4603      	mov	r3, r0
 80045c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045c4:	fa93 f3a3 	rbit	r3, r3
 80045c8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80045ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045cc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80045ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80045d4:	2320      	movs	r3, #32
 80045d6:	e003      	b.n	80045e0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80045d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045da:	fab3 f383 	clz	r3, r3
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d105      	bne.n	80045fa <HAL_ADC_ConfigChannel+0x3f2>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	0e9b      	lsrs	r3, r3, #26
 80045f4:	f003 031f 	and.w	r3, r3, #31
 80045f8:	e011      	b.n	800461e <HAL_ADC_ConfigChannel+0x416>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004600:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004602:	fa93 f3a3 	rbit	r3, r3
 8004606:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004608:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800460a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800460c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004612:	2320      	movs	r3, #32
 8004614:	e003      	b.n	800461e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004616:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004618:	fab3 f383 	clz	r3, r3
 800461c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800461e:	429a      	cmp	r2, r3
 8004620:	d106      	bne.n	8004630 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2200      	movs	r2, #0
 8004628:	2103      	movs	r1, #3
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff f968 	bl	8003900 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff fad9 	bl	8003bec <LL_ADC_IsEnabled>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	f040 813d 	bne.w	80048bc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6819      	ldr	r1, [r3, #0]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	461a      	mov	r2, r3
 8004650:	f7ff fa24 	bl	8003a9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4aa2      	ldr	r2, [pc, #648]	@ (80048e4 <HAL_ADC_ConfigChannel+0x6dc>)
 800465a:	4293      	cmp	r3, r2
 800465c:	f040 812e 	bne.w	80048bc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10b      	bne.n	8004688 <HAL_ADC_ConfigChannel+0x480>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	0e9b      	lsrs	r3, r3, #26
 8004676:	3301      	adds	r3, #1
 8004678:	f003 031f 	and.w	r3, r3, #31
 800467c:	2b09      	cmp	r3, #9
 800467e:	bf94      	ite	ls
 8004680:	2301      	movls	r3, #1
 8004682:	2300      	movhi	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	e019      	b.n	80046bc <HAL_ADC_ConfigChannel+0x4b4>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004690:	fa93 f3a3 	rbit	r3, r3
 8004694:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004696:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004698:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800469a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80046a0:	2320      	movs	r3, #32
 80046a2:	e003      	b.n	80046ac <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80046a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046a6:	fab3 f383 	clz	r3, r3
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	3301      	adds	r3, #1
 80046ae:	f003 031f 	and.w	r3, r3, #31
 80046b2:	2b09      	cmp	r3, #9
 80046b4:	bf94      	ite	ls
 80046b6:	2301      	movls	r3, #1
 80046b8:	2300      	movhi	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d079      	beq.n	80047b4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d107      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x4d4>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	0e9b      	lsrs	r3, r3, #26
 80046d2:	3301      	adds	r3, #1
 80046d4:	069b      	lsls	r3, r3, #26
 80046d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046da:	e015      	b.n	8004708 <HAL_ADC_ConfigChannel+0x500>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046e4:	fa93 f3a3 	rbit	r3, r3
 80046e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80046ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80046ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80046f4:	2320      	movs	r3, #32
 80046f6:	e003      	b.n	8004700 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80046f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046fa:	fab3 f383 	clz	r3, r3
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	3301      	adds	r3, #1
 8004702:	069b      	lsls	r3, r3, #26
 8004704:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004710:	2b00      	cmp	r3, #0
 8004712:	d109      	bne.n	8004728 <HAL_ADC_ConfigChannel+0x520>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	0e9b      	lsrs	r3, r3, #26
 800471a:	3301      	adds	r3, #1
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	2101      	movs	r1, #1
 8004722:	fa01 f303 	lsl.w	r3, r1, r3
 8004726:	e017      	b.n	8004758 <HAL_ADC_ConfigChannel+0x550>
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004730:	fa93 f3a3 	rbit	r3, r3
 8004734:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004736:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004738:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800473a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004740:	2320      	movs	r3, #32
 8004742:	e003      	b.n	800474c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004744:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004746:	fab3 f383 	clz	r3, r3
 800474a:	b2db      	uxtb	r3, r3
 800474c:	3301      	adds	r3, #1
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	2101      	movs	r1, #1
 8004754:	fa01 f303 	lsl.w	r3, r1, r3
 8004758:	ea42 0103 	orr.w	r1, r2, r3
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10a      	bne.n	800477e <HAL_ADC_ConfigChannel+0x576>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	0e9b      	lsrs	r3, r3, #26
 800476e:	3301      	adds	r3, #1
 8004770:	f003 021f 	and.w	r2, r3, #31
 8004774:	4613      	mov	r3, r2
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	4413      	add	r3, r2
 800477a:	051b      	lsls	r3, r3, #20
 800477c:	e018      	b.n	80047b0 <HAL_ADC_ConfigChannel+0x5a8>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004786:	fa93 f3a3 	rbit	r3, r3
 800478a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800478c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800478e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004796:	2320      	movs	r3, #32
 8004798:	e003      	b.n	80047a2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800479a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800479c:	fab3 f383 	clz	r3, r3
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	3301      	adds	r3, #1
 80047a4:	f003 021f 	and.w	r2, r3, #31
 80047a8:	4613      	mov	r3, r2
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	4413      	add	r3, r2
 80047ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047b0:	430b      	orrs	r3, r1
 80047b2:	e07e      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d107      	bne.n	80047d0 <HAL_ADC_ConfigChannel+0x5c8>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	0e9b      	lsrs	r3, r3, #26
 80047c6:	3301      	adds	r3, #1
 80047c8:	069b      	lsls	r3, r3, #26
 80047ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047ce:	e015      	b.n	80047fc <HAL_ADC_ConfigChannel+0x5f4>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d8:	fa93 f3a3 	rbit	r3, r3
 80047dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80047de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80047e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80047e8:	2320      	movs	r3, #32
 80047ea:	e003      	b.n	80047f4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80047ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ee:	fab3 f383 	clz	r3, r3
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	3301      	adds	r3, #1
 80047f6:	069b      	lsls	r3, r3, #26
 80047f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004804:	2b00      	cmp	r3, #0
 8004806:	d109      	bne.n	800481c <HAL_ADC_ConfigChannel+0x614>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	0e9b      	lsrs	r3, r3, #26
 800480e:	3301      	adds	r3, #1
 8004810:	f003 031f 	and.w	r3, r3, #31
 8004814:	2101      	movs	r1, #1
 8004816:	fa01 f303 	lsl.w	r3, r1, r3
 800481a:	e017      	b.n	800484c <HAL_ADC_ConfigChannel+0x644>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	fa93 f3a3 	rbit	r3, r3
 8004828:	61fb      	str	r3, [r7, #28]
  return result;
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004834:	2320      	movs	r3, #32
 8004836:	e003      	b.n	8004840 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483a:	fab3 f383 	clz	r3, r3
 800483e:	b2db      	uxtb	r3, r3
 8004840:	3301      	adds	r3, #1
 8004842:	f003 031f 	and.w	r3, r3, #31
 8004846:	2101      	movs	r1, #1
 8004848:	fa01 f303 	lsl.w	r3, r1, r3
 800484c:	ea42 0103 	orr.w	r1, r2, r3
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10d      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x670>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	0e9b      	lsrs	r3, r3, #26
 8004862:	3301      	adds	r3, #1
 8004864:	f003 021f 	and.w	r2, r3, #31
 8004868:	4613      	mov	r3, r2
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	4413      	add	r3, r2
 800486e:	3b1e      	subs	r3, #30
 8004870:	051b      	lsls	r3, r3, #20
 8004872:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004876:	e01b      	b.n	80048b0 <HAL_ADC_ConfigChannel+0x6a8>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	fa93 f3a3 	rbit	r3, r3
 8004884:	613b      	str	r3, [r7, #16]
  return result;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004890:	2320      	movs	r3, #32
 8004892:	e003      	b.n	800489c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	fab3 f383 	clz	r3, r3
 800489a:	b2db      	uxtb	r3, r3
 800489c:	3301      	adds	r3, #1
 800489e:	f003 021f 	and.w	r2, r3, #31
 80048a2:	4613      	mov	r3, r2
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	4413      	add	r3, r2
 80048a8:	3b1e      	subs	r3, #30
 80048aa:	051b      	lsls	r3, r3, #20
 80048ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048b6:	4619      	mov	r1, r3
 80048b8:	f7ff f8c5 	bl	8003a46 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4b09      	ldr	r3, [pc, #36]	@ (80048e8 <HAL_ADC_ConfigChannel+0x6e0>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 80be 	beq.w	8004a46 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048d2:	d004      	beq.n	80048de <HAL_ADC_ConfigChannel+0x6d6>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a04      	ldr	r2, [pc, #16]	@ (80048ec <HAL_ADC_ConfigChannel+0x6e4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d10a      	bne.n	80048f4 <HAL_ADC_ConfigChannel+0x6ec>
 80048de:	4b04      	ldr	r3, [pc, #16]	@ (80048f0 <HAL_ADC_ConfigChannel+0x6e8>)
 80048e0:	e009      	b.n	80048f6 <HAL_ADC_ConfigChannel+0x6ee>
 80048e2:	bf00      	nop
 80048e4:	407f0000 	.word	0x407f0000
 80048e8:	80080000 	.word	0x80080000
 80048ec:	50000100 	.word	0x50000100
 80048f0:	50000300 	.word	0x50000300
 80048f4:	4b59      	ldr	r3, [pc, #356]	@ (8004a5c <HAL_ADC_ConfigChannel+0x854>)
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fe ffba 	bl	8003870 <LL_ADC_GetCommonPathInternalCh>
 80048fc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a56      	ldr	r2, [pc, #344]	@ (8004a60 <HAL_ADC_ConfigChannel+0x858>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d004      	beq.n	8004914 <HAL_ADC_ConfigChannel+0x70c>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a55      	ldr	r2, [pc, #340]	@ (8004a64 <HAL_ADC_ConfigChannel+0x85c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d13a      	bne.n	800498a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004914:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004918:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d134      	bne.n	800498a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004928:	d005      	beq.n	8004936 <HAL_ADC_ConfigChannel+0x72e>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a4e      	ldr	r2, [pc, #312]	@ (8004a68 <HAL_ADC_ConfigChannel+0x860>)
 8004930:	4293      	cmp	r3, r2
 8004932:	f040 8085 	bne.w	8004a40 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800493e:	d004      	beq.n	800494a <HAL_ADC_ConfigChannel+0x742>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a49      	ldr	r2, [pc, #292]	@ (8004a6c <HAL_ADC_ConfigChannel+0x864>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d101      	bne.n	800494e <HAL_ADC_ConfigChannel+0x746>
 800494a:	4a49      	ldr	r2, [pc, #292]	@ (8004a70 <HAL_ADC_ConfigChannel+0x868>)
 800494c:	e000      	b.n	8004950 <HAL_ADC_ConfigChannel+0x748>
 800494e:	4a43      	ldr	r2, [pc, #268]	@ (8004a5c <HAL_ADC_ConfigChannel+0x854>)
 8004950:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004954:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004958:	4619      	mov	r1, r3
 800495a:	4610      	mov	r0, r2
 800495c:	f7fe ff75 	bl	800384a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004960:	4b44      	ldr	r3, [pc, #272]	@ (8004a74 <HAL_ADC_ConfigChannel+0x86c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	099b      	lsrs	r3, r3, #6
 8004966:	4a44      	ldr	r2, [pc, #272]	@ (8004a78 <HAL_ADC_ConfigChannel+0x870>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	099b      	lsrs	r3, r3, #6
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	4613      	mov	r3, r2
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800497a:	e002      	b.n	8004982 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	3b01      	subs	r3, #1
 8004980:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1f9      	bne.n	800497c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004988:	e05a      	b.n	8004a40 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a3b      	ldr	r2, [pc, #236]	@ (8004a7c <HAL_ADC_ConfigChannel+0x874>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d125      	bne.n	80049e0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004994:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004998:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d11f      	bne.n	80049e0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a31      	ldr	r2, [pc, #196]	@ (8004a6c <HAL_ADC_ConfigChannel+0x864>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d104      	bne.n	80049b4 <HAL_ADC_ConfigChannel+0x7ac>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a34      	ldr	r2, [pc, #208]	@ (8004a80 <HAL_ADC_ConfigChannel+0x878>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d047      	beq.n	8004a44 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049bc:	d004      	beq.n	80049c8 <HAL_ADC_ConfigChannel+0x7c0>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a2a      	ldr	r2, [pc, #168]	@ (8004a6c <HAL_ADC_ConfigChannel+0x864>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d101      	bne.n	80049cc <HAL_ADC_ConfigChannel+0x7c4>
 80049c8:	4a29      	ldr	r2, [pc, #164]	@ (8004a70 <HAL_ADC_ConfigChannel+0x868>)
 80049ca:	e000      	b.n	80049ce <HAL_ADC_ConfigChannel+0x7c6>
 80049cc:	4a23      	ldr	r2, [pc, #140]	@ (8004a5c <HAL_ADC_ConfigChannel+0x854>)
 80049ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049d6:	4619      	mov	r1, r3
 80049d8:	4610      	mov	r0, r2
 80049da:	f7fe ff36 	bl	800384a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049de:	e031      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a27      	ldr	r2, [pc, #156]	@ (8004a84 <HAL_ADC_ConfigChannel+0x87c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d12d      	bne.n	8004a46 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80049ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d127      	bne.n	8004a46 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a1c      	ldr	r2, [pc, #112]	@ (8004a6c <HAL_ADC_ConfigChannel+0x864>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d022      	beq.n	8004a46 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a08:	d004      	beq.n	8004a14 <HAL_ADC_ConfigChannel+0x80c>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a17      	ldr	r2, [pc, #92]	@ (8004a6c <HAL_ADC_ConfigChannel+0x864>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d101      	bne.n	8004a18 <HAL_ADC_ConfigChannel+0x810>
 8004a14:	4a16      	ldr	r2, [pc, #88]	@ (8004a70 <HAL_ADC_ConfigChannel+0x868>)
 8004a16:	e000      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x812>
 8004a18:	4a10      	ldr	r2, [pc, #64]	@ (8004a5c <HAL_ADC_ConfigChannel+0x854>)
 8004a1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a1e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a22:	4619      	mov	r1, r3
 8004a24:	4610      	mov	r0, r2
 8004a26:	f7fe ff10 	bl	800384a <LL_ADC_SetCommonPathInternalCh>
 8004a2a:	e00c      	b.n	8004a46 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a30:	f043 0220 	orr.w	r2, r3, #32
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004a3e:	e002      	b.n	8004a46 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a40:	bf00      	nop
 8004a42:	e000      	b.n	8004a46 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a4e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	37d8      	adds	r7, #216	@ 0xd8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	50000700 	.word	0x50000700
 8004a60:	c3210000 	.word	0xc3210000
 8004a64:	90c00010 	.word	0x90c00010
 8004a68:	50000600 	.word	0x50000600
 8004a6c:	50000100 	.word	0x50000100
 8004a70:	50000300 	.word	0x50000300
 8004a74:	20000358 	.word	0x20000358
 8004a78:	053e2d63 	.word	0x053e2d63
 8004a7c:	c7520000 	.word	0xc7520000
 8004a80:	50000500 	.word	0x50000500
 8004a84:	cb840000 	.word	0xcb840000

08004a88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004a90:	2300      	movs	r3, #0
 8004a92:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff f8a7 	bl	8003bec <LL_ADC_IsEnabled>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d176      	bne.n	8004b92 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	4b3c      	ldr	r3, [pc, #240]	@ (8004b9c <ADC_Enable+0x114>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00d      	beq.n	8004ace <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab6:	f043 0210 	orr.w	r2, r3, #16
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ac2:	f043 0201 	orr.w	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e062      	b.n	8004b94 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff f862 	bl	8003b9c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ae0:	d004      	beq.n	8004aec <ADC_Enable+0x64>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a2e      	ldr	r2, [pc, #184]	@ (8004ba0 <ADC_Enable+0x118>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d101      	bne.n	8004af0 <ADC_Enable+0x68>
 8004aec:	4b2d      	ldr	r3, [pc, #180]	@ (8004ba4 <ADC_Enable+0x11c>)
 8004aee:	e000      	b.n	8004af2 <ADC_Enable+0x6a>
 8004af0:	4b2d      	ldr	r3, [pc, #180]	@ (8004ba8 <ADC_Enable+0x120>)
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fe febc 	bl	8003870 <LL_ADC_GetCommonPathInternalCh>
 8004af8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004afa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d013      	beq.n	8004b2a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b02:	4b2a      	ldr	r3, [pc, #168]	@ (8004bac <ADC_Enable+0x124>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	099b      	lsrs	r3, r3, #6
 8004b08:	4a29      	ldr	r2, [pc, #164]	@ (8004bb0 <ADC_Enable+0x128>)
 8004b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0e:	099b      	lsrs	r3, r3, #6
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	4613      	mov	r3, r2
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	4413      	add	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b1c:	e002      	b.n	8004b24 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f9      	bne.n	8004b1e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004b2a:	f7fe fe6f 	bl	800380c <HAL_GetTick>
 8004b2e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b30:	e028      	b.n	8004b84 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff f858 	bl	8003bec <LL_ADC_IsEnabled>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d104      	bne.n	8004b4c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7ff f828 	bl	8003b9c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b4c:	f7fe fe5e 	bl	800380c <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d914      	bls.n	8004b84 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d00d      	beq.n	8004b84 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b6c:	f043 0210 	orr.w	r2, r3, #16
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b78:	f043 0201 	orr.w	r2, r3, #1
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e007      	b.n	8004b94 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d1cf      	bne.n	8004b32 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	8000003f 	.word	0x8000003f
 8004ba0:	50000100 	.word	0x50000100
 8004ba4:	50000300 	.word	0x50000300
 8004ba8:	50000700 	.word	0x50000700
 8004bac:	20000358 	.word	0x20000358
 8004bb0:	053e2d63 	.word	0x053e2d63

08004bb4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff f826 	bl	8003c12 <LL_ADC_IsDisableOngoing>
 8004bc6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7ff f80d 	bl	8003bec <LL_ADC_IsEnabled>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d047      	beq.n	8004c68 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d144      	bne.n	8004c68 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 030d 	and.w	r3, r3, #13
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d10c      	bne.n	8004c06 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fe ffe7 	bl	8003bc4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2203      	movs	r2, #3
 8004bfc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004bfe:	f7fe fe05 	bl	800380c <HAL_GetTick>
 8004c02:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c04:	e029      	b.n	8004c5a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c0a:	f043 0210 	orr.w	r2, r3, #16
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c16:	f043 0201 	orr.w	r2, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e023      	b.n	8004c6a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c22:	f7fe fdf3 	bl	800380c <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d914      	bls.n	8004c5a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00d      	beq.n	8004c5a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c42:	f043 0210 	orr.w	r2, r3, #16
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c4e:	f043 0201 	orr.w	r2, r3, #1
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e007      	b.n	8004c6a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1dc      	bne.n	8004c22 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b084      	sub	sp, #16
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c84:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d14b      	bne.n	8004d24 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c90:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d021      	beq.n	8004cea <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fe fe8c 	bl	80039c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d032      	beq.n	8004d1c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d12b      	bne.n	8004d1c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d11f      	bne.n	8004d1c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce0:	f043 0201 	orr.w	r2, r3, #1
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ce8:	e018      	b.n	8004d1c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d111      	bne.n	8004d1c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d105      	bne.n	8004d1c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d14:	f043 0201 	orr.w	r2, r3, #1
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f7ff fa55 	bl	80041cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d22:	e00e      	b.n	8004d42 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d28:	f003 0310 	and.w	r3, r3, #16
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f7ff fa5f 	bl	80041f4 <HAL_ADC_ErrorCallback>
}
 8004d36:	e004      	b.n	8004d42 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	4798      	blx	r3
}
 8004d42:	bf00      	nop
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b084      	sub	sp, #16
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f7ff fa41 	bl	80041e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d5e:	bf00      	nop
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d84:	f043 0204 	orr.w	r2, r3, #4
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f7ff fa31 	bl	80041f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d92:	bf00      	nop
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <LL_ADC_IsEnabled>:
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d101      	bne.n	8004db2 <LL_ADC_IsEnabled+0x18>
 8004dae:	2301      	movs	r3, #1
 8004db0:	e000      	b.n	8004db4 <LL_ADC_IsEnabled+0x1a>
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <LL_ADC_StartCalibration>:
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004dd2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	609a      	str	r2, [r3, #8]
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <LL_ADC_IsCalibrationOnGoing>:
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e06:	d101      	bne.n	8004e0c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e000      	b.n	8004e0e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <LL_ADC_REG_IsConversionOngoing>:
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 0304 	and.w	r3, r3, #4
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d101      	bne.n	8004e32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e000      	b.n	8004e34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <HAL_ADCEx_Calibration_Start+0x1c>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	e04d      	b.n	8004ef8 <HAL_ADCEx_Calibration_Start+0xb8>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff fea5 	bl	8004bb4 <ADC_Disable>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d136      	bne.n	8004ee2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e78:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004e7c:	f023 0302 	bic.w	r3, r3, #2
 8004e80:	f043 0202 	orr.w	r2, r3, #2
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6839      	ldr	r1, [r7, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff ff96 	bl	8004dc0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e94:	e014      	b.n	8004ec0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	4a18      	ldr	r2, [pc, #96]	@ (8004f00 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d90d      	bls.n	8004ec0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea8:	f023 0312 	bic.w	r3, r3, #18
 8004eac:	f043 0210 	orr.w	r2, r3, #16
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e01b      	b.n	8004ef8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff ff94 	bl	8004df2 <LL_ADC_IsCalibrationOnGoing>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1e2      	bne.n	8004e96 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ed4:	f023 0303 	bic.w	r3, r3, #3
 8004ed8:	f043 0201 	orr.w	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ee0:	e005      	b.n	8004eee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee6:	f043 0210 	orr.w	r2, r3, #16
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	0004de01 	.word	0x0004de01

08004f04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004f04:	b590      	push	{r4, r7, lr}
 8004f06:	b0a1      	sub	sp, #132	@ 0x84
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d101      	bne.n	8004f22 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e0e7      	b.n	80050f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004f2e:	2300      	movs	r3, #0
 8004f30:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f3a:	d102      	bne.n	8004f42 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004f3c:	4b6f      	ldr	r3, [pc, #444]	@ (80050fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004f3e:	60bb      	str	r3, [r7, #8]
 8004f40:	e009      	b.n	8004f56 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a6e      	ldr	r2, [pc, #440]	@ (8005100 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d102      	bne.n	8004f52 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004f4c:	4b6d      	ldr	r3, [pc, #436]	@ (8005104 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004f4e:	60bb      	str	r3, [r7, #8]
 8004f50:	e001      	b.n	8004f56 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004f52:	2300      	movs	r3, #0
 8004f54:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10b      	bne.n	8004f74 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f60:	f043 0220 	orr.w	r2, r3, #32
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0be      	b.n	80050f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7ff ff4f 	bl	8004e1a <LL_ADC_REG_IsConversionOngoing>
 8004f7c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7ff ff49 	bl	8004e1a <LL_ADC_REG_IsConversionOngoing>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f040 80a0 	bne.w	80050d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004f90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f040 809c 	bne.w	80050d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fa0:	d004      	beq.n	8004fac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a55      	ldr	r2, [pc, #340]	@ (80050fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d101      	bne.n	8004fb0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004fac:	4b56      	ldr	r3, [pc, #344]	@ (8005108 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004fae:	e000      	b.n	8004fb2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004fb0:	4b56      	ldr	r3, [pc, #344]	@ (800510c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004fb2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d04b      	beq.n	8005054 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004fbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	6859      	ldr	r1, [r3, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004fce:	035b      	lsls	r3, r3, #13
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fd6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fe0:	d004      	beq.n	8004fec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a45      	ldr	r2, [pc, #276]	@ (80050fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d10f      	bne.n	800500c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004fec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004ff0:	f7ff fed3 	bl	8004d9a <LL_ADC_IsEnabled>
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	4841      	ldr	r0, [pc, #260]	@ (80050fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ff8:	f7ff fecf 	bl	8004d9a <LL_ADC_IsEnabled>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	4323      	orrs	r3, r4
 8005000:	2b00      	cmp	r3, #0
 8005002:	bf0c      	ite	eq
 8005004:	2301      	moveq	r3, #1
 8005006:	2300      	movne	r3, #0
 8005008:	b2db      	uxtb	r3, r3
 800500a:	e012      	b.n	8005032 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800500c:	483c      	ldr	r0, [pc, #240]	@ (8005100 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800500e:	f7ff fec4 	bl	8004d9a <LL_ADC_IsEnabled>
 8005012:	4604      	mov	r4, r0
 8005014:	483b      	ldr	r0, [pc, #236]	@ (8005104 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005016:	f7ff fec0 	bl	8004d9a <LL_ADC_IsEnabled>
 800501a:	4603      	mov	r3, r0
 800501c:	431c      	orrs	r4, r3
 800501e:	483c      	ldr	r0, [pc, #240]	@ (8005110 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005020:	f7ff febb 	bl	8004d9a <LL_ADC_IsEnabled>
 8005024:	4603      	mov	r3, r0
 8005026:	4323      	orrs	r3, r4
 8005028:	2b00      	cmp	r3, #0
 800502a:	bf0c      	ite	eq
 800502c:	2301      	moveq	r3, #1
 800502e:	2300      	movne	r3, #0
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d056      	beq.n	80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005036:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800503e:	f023 030f 	bic.w	r3, r3, #15
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	6811      	ldr	r1, [r2, #0]
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	6892      	ldr	r2, [r2, #8]
 800504a:	430a      	orrs	r2, r1
 800504c:	431a      	orrs	r2, r3
 800504e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005050:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005052:	e047      	b.n	80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005054:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800505c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800505e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005068:	d004      	beq.n	8005074 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a23      	ldr	r2, [pc, #140]	@ (80050fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d10f      	bne.n	8005094 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005074:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005078:	f7ff fe8f 	bl	8004d9a <LL_ADC_IsEnabled>
 800507c:	4604      	mov	r4, r0
 800507e:	481f      	ldr	r0, [pc, #124]	@ (80050fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005080:	f7ff fe8b 	bl	8004d9a <LL_ADC_IsEnabled>
 8005084:	4603      	mov	r3, r0
 8005086:	4323      	orrs	r3, r4
 8005088:	2b00      	cmp	r3, #0
 800508a:	bf0c      	ite	eq
 800508c:	2301      	moveq	r3, #1
 800508e:	2300      	movne	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	e012      	b.n	80050ba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005094:	481a      	ldr	r0, [pc, #104]	@ (8005100 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005096:	f7ff fe80 	bl	8004d9a <LL_ADC_IsEnabled>
 800509a:	4604      	mov	r4, r0
 800509c:	4819      	ldr	r0, [pc, #100]	@ (8005104 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800509e:	f7ff fe7c 	bl	8004d9a <LL_ADC_IsEnabled>
 80050a2:	4603      	mov	r3, r0
 80050a4:	431c      	orrs	r4, r3
 80050a6:	481a      	ldr	r0, [pc, #104]	@ (8005110 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80050a8:	f7ff fe77 	bl	8004d9a <LL_ADC_IsEnabled>
 80050ac:	4603      	mov	r3, r0
 80050ae:	4323      	orrs	r3, r4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	bf0c      	ite	eq
 80050b4:	2301      	moveq	r3, #1
 80050b6:	2300      	movne	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d012      	beq.n	80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80050be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80050c6:	f023 030f 	bic.w	r3, r3, #15
 80050ca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80050cc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050ce:	e009      	b.n	80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050d4:	f043 0220 	orr.w	r2, r3, #32
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80050e2:	e000      	b.n	80050e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80050ee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3784      	adds	r7, #132	@ 0x84
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd90      	pop	{r4, r7, pc}
 80050fa:	bf00      	nop
 80050fc:	50000100 	.word	0x50000100
 8005100:	50000400 	.word	0x50000400
 8005104:	50000500 	.word	0x50000500
 8005108:	50000300 	.word	0x50000300
 800510c:	50000700 	.word	0x50000700
 8005110:	50000600 	.word	0x50000600

08005114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f003 0307 	and.w	r3, r3, #7
 8005122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005124:	4b0c      	ldr	r3, [pc, #48]	@ (8005158 <__NVIC_SetPriorityGrouping+0x44>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005130:	4013      	ands	r3, r2
 8005132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800513c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005146:	4a04      	ldr	r2, [pc, #16]	@ (8005158 <__NVIC_SetPriorityGrouping+0x44>)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	60d3      	str	r3, [r2, #12]
}
 800514c:	bf00      	nop
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	e000ed00 	.word	0xe000ed00

0800515c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005160:	4b04      	ldr	r3, [pc, #16]	@ (8005174 <__NVIC_GetPriorityGrouping+0x18>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	0a1b      	lsrs	r3, r3, #8
 8005166:	f003 0307 	and.w	r3, r3, #7
}
 800516a:	4618      	mov	r0, r3
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	e000ed00 	.word	0xe000ed00

08005178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	4603      	mov	r3, r0
 8005180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005186:	2b00      	cmp	r3, #0
 8005188:	db0b      	blt.n	80051a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	f003 021f 	and.w	r2, r3, #31
 8005190:	4907      	ldr	r1, [pc, #28]	@ (80051b0 <__NVIC_EnableIRQ+0x38>)
 8005192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005196:	095b      	lsrs	r3, r3, #5
 8005198:	2001      	movs	r0, #1
 800519a:	fa00 f202 	lsl.w	r2, r0, r2
 800519e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	e000e100 	.word	0xe000e100

080051b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	4603      	mov	r3, r0
 80051bc:	6039      	str	r1, [r7, #0]
 80051be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	db0a      	blt.n	80051de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	490c      	ldr	r1, [pc, #48]	@ (8005200 <__NVIC_SetPriority+0x4c>)
 80051ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d2:	0112      	lsls	r2, r2, #4
 80051d4:	b2d2      	uxtb	r2, r2
 80051d6:	440b      	add	r3, r1
 80051d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051dc:	e00a      	b.n	80051f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	4908      	ldr	r1, [pc, #32]	@ (8005204 <__NVIC_SetPriority+0x50>)
 80051e4:	79fb      	ldrb	r3, [r7, #7]
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	3b04      	subs	r3, #4
 80051ec:	0112      	lsls	r2, r2, #4
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	440b      	add	r3, r1
 80051f2:	761a      	strb	r2, [r3, #24]
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	e000e100 	.word	0xe000e100
 8005204:	e000ed00 	.word	0xe000ed00

08005208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005208:	b480      	push	{r7}
 800520a:	b089      	sub	sp, #36	@ 0x24
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f1c3 0307 	rsb	r3, r3, #7
 8005222:	2b04      	cmp	r3, #4
 8005224:	bf28      	it	cs
 8005226:	2304      	movcs	r3, #4
 8005228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	3304      	adds	r3, #4
 800522e:	2b06      	cmp	r3, #6
 8005230:	d902      	bls.n	8005238 <NVIC_EncodePriority+0x30>
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	3b03      	subs	r3, #3
 8005236:	e000      	b.n	800523a <NVIC_EncodePriority+0x32>
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800523c:	f04f 32ff 	mov.w	r2, #4294967295
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	fa02 f303 	lsl.w	r3, r2, r3
 8005246:	43da      	mvns	r2, r3
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	401a      	ands	r2, r3
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005250:	f04f 31ff 	mov.w	r1, #4294967295
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	fa01 f303 	lsl.w	r3, r1, r3
 800525a:	43d9      	mvns	r1, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005260:	4313      	orrs	r3, r2
         );
}
 8005262:	4618      	mov	r0, r3
 8005264:	3724      	adds	r7, #36	@ 0x24
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
	...

08005270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3b01      	subs	r3, #1
 800527c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005280:	d301      	bcc.n	8005286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005282:	2301      	movs	r3, #1
 8005284:	e00f      	b.n	80052a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005286:	4a0a      	ldr	r2, [pc, #40]	@ (80052b0 <SysTick_Config+0x40>)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3b01      	subs	r3, #1
 800528c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800528e:	210f      	movs	r1, #15
 8005290:	f04f 30ff 	mov.w	r0, #4294967295
 8005294:	f7ff ff8e 	bl	80051b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005298:	4b05      	ldr	r3, [pc, #20]	@ (80052b0 <SysTick_Config+0x40>)
 800529a:	2200      	movs	r2, #0
 800529c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800529e:	4b04      	ldr	r3, [pc, #16]	@ (80052b0 <SysTick_Config+0x40>)
 80052a0:	2207      	movs	r2, #7
 80052a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	e000e010 	.word	0xe000e010

080052b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7ff ff29 	bl	8005114 <__NVIC_SetPriorityGrouping>
}
 80052c2:	bf00      	nop
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b086      	sub	sp, #24
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	4603      	mov	r3, r0
 80052d2:	60b9      	str	r1, [r7, #8]
 80052d4:	607a      	str	r2, [r7, #4]
 80052d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80052d8:	f7ff ff40 	bl	800515c <__NVIC_GetPriorityGrouping>
 80052dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	6978      	ldr	r0, [r7, #20]
 80052e4:	f7ff ff90 	bl	8005208 <NVIC_EncodePriority>
 80052e8:	4602      	mov	r2, r0
 80052ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ee:	4611      	mov	r1, r2
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff ff5f 	bl	80051b4 <__NVIC_SetPriority>
}
 80052f6:	bf00      	nop
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b082      	sub	sp, #8
 8005302:	af00      	add	r7, sp, #0
 8005304:	4603      	mov	r3, r0
 8005306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800530c:	4618      	mov	r0, r3
 800530e:	f7ff ff33 	bl	8005178 <__NVIC_EnableIRQ>
}
 8005312:	bf00      	nop
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b082      	sub	sp, #8
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7ff ffa4 	bl	8005270 <SysTick_Config>
 8005328:	4603      	mov	r3, r0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e08d      	b.n	8005462 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	4b47      	ldr	r3, [pc, #284]	@ (800546c <HAL_DMA_Init+0x138>)
 800534e:	429a      	cmp	r2, r3
 8005350:	d80f      	bhi.n	8005372 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	4b45      	ldr	r3, [pc, #276]	@ (8005470 <HAL_DMA_Init+0x13c>)
 800535a:	4413      	add	r3, r2
 800535c:	4a45      	ldr	r2, [pc, #276]	@ (8005474 <HAL_DMA_Init+0x140>)
 800535e:	fba2 2303 	umull	r2, r3, r2, r3
 8005362:	091b      	lsrs	r3, r3, #4
 8005364:	009a      	lsls	r2, r3, #2
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a42      	ldr	r2, [pc, #264]	@ (8005478 <HAL_DMA_Init+0x144>)
 800536e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005370:	e00e      	b.n	8005390 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	461a      	mov	r2, r3
 8005378:	4b40      	ldr	r3, [pc, #256]	@ (800547c <HAL_DMA_Init+0x148>)
 800537a:	4413      	add	r3, r2
 800537c:	4a3d      	ldr	r2, [pc, #244]	@ (8005474 <HAL_DMA_Init+0x140>)
 800537e:	fba2 2303 	umull	r2, r3, r2, r3
 8005382:	091b      	lsrs	r3, r3, #4
 8005384:	009a      	lsls	r2, r3, #2
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a3c      	ldr	r2, [pc, #240]	@ (8005480 <HAL_DMA_Init+0x14c>)
 800538e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80053a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80053b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fa76 	bl	80058d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053f0:	d102      	bne.n	80053f8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005400:	b2d2      	uxtb	r2, r2
 8005402:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800540c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d010      	beq.n	8005438 <HAL_DMA_Init+0x104>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b04      	cmp	r3, #4
 800541c:	d80c      	bhi.n	8005438 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fa96 	bl	8005950 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005434:	605a      	str	r2, [r3, #4]
 8005436:	e008      	b.n	800544a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	40020407 	.word	0x40020407
 8005470:	bffdfff8 	.word	0xbffdfff8
 8005474:	cccccccd 	.word	0xcccccccd
 8005478:	40020000 	.word	0x40020000
 800547c:	bffdfbf8 	.word	0xbffdfbf8
 8005480:	40020400 	.word	0x40020400

08005484 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005492:	2300      	movs	r3, #0
 8005494:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800549c:	2b01      	cmp	r3, #1
 800549e:	d101      	bne.n	80054a4 <HAL_DMA_Start_IT+0x20>
 80054a0:	2302      	movs	r3, #2
 80054a2:	e066      	b.n	8005572 <HAL_DMA_Start_IT+0xee>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d155      	bne.n	8005564 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 0201 	bic.w	r2, r2, #1
 80054d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	68b9      	ldr	r1, [r7, #8]
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 f9bb 	bl	8005858 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d008      	beq.n	80054fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f042 020e 	orr.w	r2, r2, #14
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	e00f      	b.n	800551c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0204 	bic.w	r2, r2, #4
 800550a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 020a 	orr.w	r2, r2, #10
 800551a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d007      	beq.n	800553a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005534:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005538:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800553e:	2b00      	cmp	r3, #0
 8005540:	d007      	beq.n	8005552 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005550:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f042 0201 	orr.w	r2, r2, #1
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	e005      	b.n	8005570 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800556c:	2302      	movs	r3, #2
 800556e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005570:	7dfb      	ldrb	r3, [r7, #23]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800557a:	b480      	push	{r7}
 800557c:	b085      	sub	sp, #20
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d005      	beq.n	800559e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2204      	movs	r2, #4
 8005596:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	73fb      	strb	r3, [r7, #15]
 800559c:	e037      	b.n	800560e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 020e 	bic.w	r2, r2, #14
 80055ac:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055bc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0201 	bic.w	r2, r2, #1
 80055cc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055d2:	f003 021f 	and.w	r2, r3, #31
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055da:	2101      	movs	r1, #1
 80055dc:	fa01 f202 	lsl.w	r2, r1, r2
 80055e0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80055ea:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00c      	beq.n	800560e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005602:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800560c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800561e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d00d      	beq.n	8005660 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2204      	movs	r2, #4
 8005648:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	73fb      	strb	r3, [r7, #15]
 800565e:	e047      	b.n	80056f0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 020e 	bic.w	r2, r2, #14
 800566e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 0201 	bic.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800568a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800568e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005694:	f003 021f 	and.w	r2, r3, #31
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569c:	2101      	movs	r1, #1
 800569e:	fa01 f202 	lsl.w	r2, r1, r2
 80056a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80056ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00c      	beq.n	80056d0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80056ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	4798      	blx	r3
    }
  }
  return status;
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b084      	sub	sp, #16
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005716:	f003 031f 	and.w	r3, r3, #31
 800571a:	2204      	movs	r2, #4
 800571c:	409a      	lsls	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4013      	ands	r3, r2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d026      	beq.n	8005774 <HAL_DMA_IRQHandler+0x7a>
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d021      	beq.n	8005774 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0320 	and.w	r3, r3, #32
 800573a:	2b00      	cmp	r3, #0
 800573c:	d107      	bne.n	800574e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0204 	bic.w	r2, r2, #4
 800574c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005752:	f003 021f 	and.w	r2, r3, #31
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575a:	2104      	movs	r1, #4
 800575c:	fa01 f202 	lsl.w	r2, r1, r2
 8005760:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005766:	2b00      	cmp	r3, #0
 8005768:	d071      	beq.n	800584e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005772:	e06c      	b.n	800584e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005778:	f003 031f 	and.w	r3, r3, #31
 800577c:	2202      	movs	r2, #2
 800577e:	409a      	lsls	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4013      	ands	r3, r2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d02e      	beq.n	80057e6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d029      	beq.n	80057e6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10b      	bne.n	80057b8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 020a 	bic.w	r2, r2, #10
 80057ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057bc:	f003 021f 	and.w	r2, r3, #31
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c4:	2102      	movs	r1, #2
 80057c6:	fa01 f202 	lsl.w	r2, r1, r2
 80057ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d038      	beq.n	800584e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80057e4:	e033      	b.n	800584e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ea:	f003 031f 	and.w	r3, r3, #31
 80057ee:	2208      	movs	r2, #8
 80057f0:	409a      	lsls	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4013      	ands	r3, r2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d02a      	beq.n	8005850 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f003 0308 	and.w	r3, r3, #8
 8005800:	2b00      	cmp	r3, #0
 8005802:	d025      	beq.n	8005850 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 020e 	bic.w	r2, r2, #14
 8005812:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005818:	f003 021f 	and.w	r2, r3, #31
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005820:	2101      	movs	r1, #1
 8005822:	fa01 f202 	lsl.w	r2, r1, r2
 8005826:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005842:	2b00      	cmp	r3, #0
 8005844:	d004      	beq.n	8005850 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800584e:	bf00      	nop
 8005850:	bf00      	nop
}
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800586e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005874:	2b00      	cmp	r3, #0
 8005876:	d004      	beq.n	8005882 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005880:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005886:	f003 021f 	and.w	r2, r3, #31
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588e:	2101      	movs	r1, #1
 8005890:	fa01 f202 	lsl.w	r2, r1, r2
 8005894:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	2b10      	cmp	r3, #16
 80058a4:	d108      	bne.n	80058b8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80058b6:	e007      	b.n	80058c8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	60da      	str	r2, [r3, #12]
}
 80058c8:	bf00      	nop
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	461a      	mov	r2, r3
 80058e2:	4b16      	ldr	r3, [pc, #88]	@ (800593c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d802      	bhi.n	80058ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80058e8:	4b15      	ldr	r3, [pc, #84]	@ (8005940 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80058ea:	617b      	str	r3, [r7, #20]
 80058ec:	e001      	b.n	80058f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80058ee:	4b15      	ldr	r3, [pc, #84]	@ (8005944 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80058f0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	3b08      	subs	r3, #8
 80058fe:	4a12      	ldr	r2, [pc, #72]	@ (8005948 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005900:	fba2 2303 	umull	r2, r3, r2, r3
 8005904:	091b      	lsrs	r3, r3, #4
 8005906:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590c:	089b      	lsrs	r3, r3, #2
 800590e:	009a      	lsls	r2, r3, #2
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	4413      	add	r3, r2
 8005914:	461a      	mov	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a0b      	ldr	r2, [pc, #44]	@ (800594c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800591e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f003 031f 	and.w	r3, r3, #31
 8005926:	2201      	movs	r2, #1
 8005928:	409a      	lsls	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800592e:	bf00      	nop
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40020407 	.word	0x40020407
 8005940:	40020800 	.word	0x40020800
 8005944:	40020820 	.word	0x40020820
 8005948:	cccccccd 	.word	0xcccccccd
 800594c:	40020880 	.word	0x40020880

08005950 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	b2db      	uxtb	r3, r3
 800595e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4b0b      	ldr	r3, [pc, #44]	@ (8005990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005964:	4413      	add	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	461a      	mov	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a08      	ldr	r2, [pc, #32]	@ (8005994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005972:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	3b01      	subs	r3, #1
 8005978:	f003 031f 	and.w	r3, r3, #31
 800597c:	2201      	movs	r2, #1
 800597e:	409a      	lsls	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005984:	bf00      	nop
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	1000823f 	.word	0x1000823f
 8005994:	40020940 	.word	0x40020940

08005998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80059a6:	e15a      	b.n	8005c5e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	2101      	movs	r1, #1
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	fa01 f303 	lsl.w	r3, r1, r3
 80059b4:	4013      	ands	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 814c 	beq.w	8005c58 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f003 0303 	and.w	r3, r3, #3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d005      	beq.n	80059d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d130      	bne.n	8005a3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	2203      	movs	r2, #3
 80059e4:	fa02 f303 	lsl.w	r3, r2, r3
 80059e8:	43db      	mvns	r3, r3
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4013      	ands	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	fa02 f303 	lsl.w	r3, r2, r3
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a0e:	2201      	movs	r2, #1
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	43db      	mvns	r3, r3
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	091b      	lsrs	r3, r3, #4
 8005a24:	f003 0201 	and.w	r2, r3, #1
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f003 0303 	and.w	r3, r3, #3
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d017      	beq.n	8005a76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	2203      	movs	r2, #3
 8005a52:	fa02 f303 	lsl.w	r3, r2, r3
 8005a56:	43db      	mvns	r3, r3
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d123      	bne.n	8005aca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	08da      	lsrs	r2, r3, #3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	3208      	adds	r2, #8
 8005a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	220f      	movs	r2, #15
 8005a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9e:	43db      	mvns	r3, r3
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	691a      	ldr	r2, [r3, #16]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	08da      	lsrs	r2, r3, #3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3208      	adds	r2, #8
 8005ac4:	6939      	ldr	r1, [r7, #16]
 8005ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	2203      	movs	r2, #3
 8005ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ada:	43db      	mvns	r3, r3
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f003 0203 	and.w	r2, r3, #3
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	fa02 f303 	lsl.w	r3, r2, r3
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 80a6 	beq.w	8005c58 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b0c:	4b5b      	ldr	r3, [pc, #364]	@ (8005c7c <HAL_GPIO_Init+0x2e4>)
 8005b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b10:	4a5a      	ldr	r2, [pc, #360]	@ (8005c7c <HAL_GPIO_Init+0x2e4>)
 8005b12:	f043 0301 	orr.w	r3, r3, #1
 8005b16:	6613      	str	r3, [r2, #96]	@ 0x60
 8005b18:	4b58      	ldr	r3, [pc, #352]	@ (8005c7c <HAL_GPIO_Init+0x2e4>)
 8005b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	60bb      	str	r3, [r7, #8]
 8005b22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b24:	4a56      	ldr	r2, [pc, #344]	@ (8005c80 <HAL_GPIO_Init+0x2e8>)
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	089b      	lsrs	r3, r3, #2
 8005b2a:	3302      	adds	r3, #2
 8005b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f003 0303 	and.w	r3, r3, #3
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	220f      	movs	r2, #15
 8005b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b40:	43db      	mvns	r3, r3
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	4013      	ands	r3, r2
 8005b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005b4e:	d01f      	beq.n	8005b90 <HAL_GPIO_Init+0x1f8>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a4c      	ldr	r2, [pc, #304]	@ (8005c84 <HAL_GPIO_Init+0x2ec>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d019      	beq.n	8005b8c <HAL_GPIO_Init+0x1f4>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a4b      	ldr	r2, [pc, #300]	@ (8005c88 <HAL_GPIO_Init+0x2f0>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d013      	beq.n	8005b88 <HAL_GPIO_Init+0x1f0>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a4a      	ldr	r2, [pc, #296]	@ (8005c8c <HAL_GPIO_Init+0x2f4>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d00d      	beq.n	8005b84 <HAL_GPIO_Init+0x1ec>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a49      	ldr	r2, [pc, #292]	@ (8005c90 <HAL_GPIO_Init+0x2f8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d007      	beq.n	8005b80 <HAL_GPIO_Init+0x1e8>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a48      	ldr	r2, [pc, #288]	@ (8005c94 <HAL_GPIO_Init+0x2fc>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d101      	bne.n	8005b7c <HAL_GPIO_Init+0x1e4>
 8005b78:	2305      	movs	r3, #5
 8005b7a:	e00a      	b.n	8005b92 <HAL_GPIO_Init+0x1fa>
 8005b7c:	2306      	movs	r3, #6
 8005b7e:	e008      	b.n	8005b92 <HAL_GPIO_Init+0x1fa>
 8005b80:	2304      	movs	r3, #4
 8005b82:	e006      	b.n	8005b92 <HAL_GPIO_Init+0x1fa>
 8005b84:	2303      	movs	r3, #3
 8005b86:	e004      	b.n	8005b92 <HAL_GPIO_Init+0x1fa>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	e002      	b.n	8005b92 <HAL_GPIO_Init+0x1fa>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e000      	b.n	8005b92 <HAL_GPIO_Init+0x1fa>
 8005b90:	2300      	movs	r3, #0
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	f002 0203 	and.w	r2, r2, #3
 8005b98:	0092      	lsls	r2, r2, #2
 8005b9a:	4093      	lsls	r3, r2
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ba2:	4937      	ldr	r1, [pc, #220]	@ (8005c80 <HAL_GPIO_Init+0x2e8>)
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	089b      	lsrs	r3, r3, #2
 8005ba8:	3302      	adds	r3, #2
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bb0:	4b39      	ldr	r3, [pc, #228]	@ (8005c98 <HAL_GPIO_Init+0x300>)
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	43db      	mvns	r3, r3
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005bd4:	4a30      	ldr	r2, [pc, #192]	@ (8005c98 <HAL_GPIO_Init+0x300>)
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005bda:	4b2f      	ldr	r3, [pc, #188]	@ (8005c98 <HAL_GPIO_Init+0x300>)
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	43db      	mvns	r3, r3
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	4013      	ands	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005bfe:	4a26      	ldr	r2, [pc, #152]	@ (8005c98 <HAL_GPIO_Init+0x300>)
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005c04:	4b24      	ldr	r3, [pc, #144]	@ (8005c98 <HAL_GPIO_Init+0x300>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	43db      	mvns	r3, r3
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4013      	ands	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005c28:	4a1b      	ldr	r2, [pc, #108]	@ (8005c98 <HAL_GPIO_Init+0x300>)
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8005c98 <HAL_GPIO_Init+0x300>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	43db      	mvns	r3, r3
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005c52:	4a11      	ldr	r2, [pc, #68]	@ (8005c98 <HAL_GPIO_Init+0x300>)
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	fa22 f303 	lsr.w	r3, r2, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f47f ae9d 	bne.w	80059a8 <HAL_GPIO_Init+0x10>
  }
}
 8005c6e:	bf00      	nop
 8005c70:	bf00      	nop
 8005c72:	371c      	adds	r7, #28
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	40010000 	.word	0x40010000
 8005c84:	48000400 	.word	0x48000400
 8005c88:	48000800 	.word	0x48000800
 8005c8c:	48000c00 	.word	0x48000c00
 8005c90:	48001000 	.word	0x48001000
 8005c94:	48001400 	.word	0x48001400
 8005c98:	40010400 	.word	0x40010400

08005c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	807b      	strh	r3, [r7, #2]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005cac:	787b      	ldrb	r3, [r7, #1]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005cb2:	887a      	ldrh	r2, [r7, #2]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005cb8:	e002      	b.n	8005cc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005cba:	887a      	ldrh	r2, [r7, #2]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005cd6:	4b08      	ldr	r3, [pc, #32]	@ (8005cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005cd8:	695a      	ldr	r2, [r3, #20]
 8005cda:	88fb      	ldrh	r3, [r7, #6]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d006      	beq.n	8005cf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ce2:	4a05      	ldr	r2, [pc, #20]	@ (8005cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ce4:	88fb      	ldrh	r3, [r7, #6]
 8005ce6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ce8:	88fb      	ldrh	r3, [r7, #6]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fc fc01 	bl	80024f2 <HAL_GPIO_EXTI_Callback>
  }
}
 8005cf0:	bf00      	nop
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	40010400 	.word	0x40010400

08005cfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d141      	bne.n	8005d8e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d0a:	4b4b      	ldr	r3, [pc, #300]	@ (8005e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d16:	d131      	bne.n	8005d7c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d18:	4b47      	ldr	r3, [pc, #284]	@ (8005e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d1e:	4a46      	ldr	r2, [pc, #280]	@ (8005e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d28:	4b43      	ldr	r3, [pc, #268]	@ (8005e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d30:	4a41      	ldr	r2, [pc, #260]	@ (8005e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d38:	4b40      	ldr	r3, [pc, #256]	@ (8005e3c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2232      	movs	r2, #50	@ 0x32
 8005d3e:	fb02 f303 	mul.w	r3, r2, r3
 8005d42:	4a3f      	ldr	r2, [pc, #252]	@ (8005e40 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d44:	fba2 2303 	umull	r2, r3, r2, r3
 8005d48:	0c9b      	lsrs	r3, r3, #18
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d4e:	e002      	b.n	8005d56 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d56:	4b38      	ldr	r3, [pc, #224]	@ (8005e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d62:	d102      	bne.n	8005d6a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1f2      	bne.n	8005d50 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d6a:	4b33      	ldr	r3, [pc, #204]	@ (8005e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d76:	d158      	bne.n	8005e2a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e057      	b.n	8005e2c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8005e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d82:	4a2d      	ldr	r2, [pc, #180]	@ (8005e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005d8c:	e04d      	b.n	8005e2a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d94:	d141      	bne.n	8005e1a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d96:	4b28      	ldr	r3, [pc, #160]	@ (8005e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005da2:	d131      	bne.n	8005e08 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005da4:	4b24      	ldr	r3, [pc, #144]	@ (8005e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005daa:	4a23      	ldr	r2, [pc, #140]	@ (8005e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005db0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005db4:	4b20      	ldr	r3, [pc, #128]	@ (8005e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005dbc:	4a1e      	ldr	r2, [pc, #120]	@ (8005e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005dc2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8005e3c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2232      	movs	r2, #50	@ 0x32
 8005dca:	fb02 f303 	mul.w	r3, r2, r3
 8005dce:	4a1c      	ldr	r2, [pc, #112]	@ (8005e40 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd4:	0c9b      	lsrs	r3, r3, #18
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dda:	e002      	b.n	8005de2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005de2:	4b15      	ldr	r3, [pc, #84]	@ (8005e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dee:	d102      	bne.n	8005df6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1f2      	bne.n	8005ddc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005df6:	4b10      	ldr	r3, [pc, #64]	@ (8005e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e02:	d112      	bne.n	8005e2a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e011      	b.n	8005e2c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e08:	4b0b      	ldr	r3, [pc, #44]	@ (8005e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8005e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005e18:	e007      	b.n	8005e2a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e1a:	4b07      	ldr	r3, [pc, #28]	@ (8005e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e22:	4a05      	ldr	r2, [pc, #20]	@ (8005e38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e24:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e28:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	40007000 	.word	0x40007000
 8005e3c:	20000358 	.word	0x20000358
 8005e40:	431bde83 	.word	0x431bde83

08005e44 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005e48:	4b05      	ldr	r3, [pc, #20]	@ (8005e60 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	4a04      	ldr	r2, [pc, #16]	@ (8005e60 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005e4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e52:	6093      	str	r3, [r2, #8]
}
 8005e54:	bf00      	nop
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	40007000 	.word	0x40007000

08005e64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b088      	sub	sp, #32
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e2fe      	b.n	8006474 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d075      	beq.n	8005f6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e82:	4b97      	ldr	r3, [pc, #604]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f003 030c 	and.w	r3, r3, #12
 8005e8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e8c:	4b94      	ldr	r3, [pc, #592]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f003 0303 	and.w	r3, r3, #3
 8005e94:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	2b0c      	cmp	r3, #12
 8005e9a:	d102      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x3e>
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	2b03      	cmp	r3, #3
 8005ea0:	d002      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x44>
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	2b08      	cmp	r3, #8
 8005ea6:	d10b      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ea8:	4b8d      	ldr	r3, [pc, #564]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d05b      	beq.n	8005f6c <HAL_RCC_OscConfig+0x108>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d157      	bne.n	8005f6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e2d9      	b.n	8006474 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ec8:	d106      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x74>
 8005eca:	4b85      	ldr	r3, [pc, #532]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a84      	ldr	r2, [pc, #528]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8005ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	e01d      	b.n	8005f14 <HAL_RCC_OscConfig+0xb0>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ee0:	d10c      	bne.n	8005efc <HAL_RCC_OscConfig+0x98>
 8005ee2:	4b7f      	ldr	r3, [pc, #508]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a7e      	ldr	r2, [pc, #504]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8005ee8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	4b7c      	ldr	r3, [pc, #496]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a7b      	ldr	r2, [pc, #492]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8005ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ef8:	6013      	str	r3, [r2, #0]
 8005efa:	e00b      	b.n	8005f14 <HAL_RCC_OscConfig+0xb0>
 8005efc:	4b78      	ldr	r3, [pc, #480]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a77      	ldr	r2, [pc, #476]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8005f02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	4b75      	ldr	r3, [pc, #468]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a74      	ldr	r2, [pc, #464]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8005f0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d013      	beq.n	8005f44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f1c:	f7fd fc76 	bl	800380c <HAL_GetTick>
 8005f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f22:	e008      	b.n	8005f36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f24:	f7fd fc72 	bl	800380c <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b64      	cmp	r3, #100	@ 0x64
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e29e      	b.n	8006474 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f36:	4b6a      	ldr	r3, [pc, #424]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d0f0      	beq.n	8005f24 <HAL_RCC_OscConfig+0xc0>
 8005f42:	e014      	b.n	8005f6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f44:	f7fd fc62 	bl	800380c <HAL_GetTick>
 8005f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f4a:	e008      	b.n	8005f5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f4c:	f7fd fc5e 	bl	800380c <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b64      	cmp	r3, #100	@ 0x64
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e28a      	b.n	8006474 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f5e:	4b60      	ldr	r3, [pc, #384]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1f0      	bne.n	8005f4c <HAL_RCC_OscConfig+0xe8>
 8005f6a:	e000      	b.n	8005f6e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d075      	beq.n	8006066 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f7a:	4b59      	ldr	r3, [pc, #356]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 030c 	and.w	r3, r3, #12
 8005f82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f84:	4b56      	ldr	r3, [pc, #344]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f003 0303 	and.w	r3, r3, #3
 8005f8c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	2b0c      	cmp	r3, #12
 8005f92:	d102      	bne.n	8005f9a <HAL_RCC_OscConfig+0x136>
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d002      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x13c>
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	2b04      	cmp	r3, #4
 8005f9e:	d11f      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fa0:	4b4f      	ldr	r3, [pc, #316]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d005      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x154>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e25d      	b.n	8006474 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fb8:	4b49      	ldr	r3, [pc, #292]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	061b      	lsls	r3, r3, #24
 8005fc6:	4946      	ldr	r1, [pc, #280]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005fcc:	4b45      	ldr	r3, [pc, #276]	@ (80060e4 <HAL_RCC_OscConfig+0x280>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fd fbcf 	bl	8003774 <HAL_InitTick>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d043      	beq.n	8006064 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e249      	b.n	8006474 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d023      	beq.n	8006030 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fe8:	4b3d      	ldr	r3, [pc, #244]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a3c      	ldr	r2, [pc, #240]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8005fee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff4:	f7fd fc0a 	bl	800380c <HAL_GetTick>
 8005ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ffa:	e008      	b.n	800600e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ffc:	f7fd fc06 	bl	800380c <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b02      	cmp	r3, #2
 8006008:	d901      	bls.n	800600e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e232      	b.n	8006474 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800600e:	4b34      	ldr	r3, [pc, #208]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006016:	2b00      	cmp	r3, #0
 8006018:	d0f0      	beq.n	8005ffc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800601a:	4b31      	ldr	r3, [pc, #196]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	061b      	lsls	r3, r3, #24
 8006028:	492d      	ldr	r1, [pc, #180]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 800602a:	4313      	orrs	r3, r2
 800602c:	604b      	str	r3, [r1, #4]
 800602e:	e01a      	b.n	8006066 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006030:	4b2b      	ldr	r3, [pc, #172]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a2a      	ldr	r2, [pc, #168]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8006036:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800603a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603c:	f7fd fbe6 	bl	800380c <HAL_GetTick>
 8006040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006042:	e008      	b.n	8006056 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006044:	f7fd fbe2 	bl	800380c <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b02      	cmp	r3, #2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e20e      	b.n	8006474 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006056:	4b22      	ldr	r3, [pc, #136]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1f0      	bne.n	8006044 <HAL_RCC_OscConfig+0x1e0>
 8006062:	e000      	b.n	8006066 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006064:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0308 	and.w	r3, r3, #8
 800606e:	2b00      	cmp	r3, #0
 8006070:	d041      	beq.n	80060f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d01c      	beq.n	80060b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800607a:	4b19      	ldr	r3, [pc, #100]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 800607c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006080:	4a17      	ldr	r2, [pc, #92]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 8006082:	f043 0301 	orr.w	r3, r3, #1
 8006086:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800608a:	f7fd fbbf 	bl	800380c <HAL_GetTick>
 800608e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006090:	e008      	b.n	80060a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006092:	f7fd fbbb 	bl	800380c <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b02      	cmp	r3, #2
 800609e:	d901      	bls.n	80060a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e1e7      	b.n	8006474 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060a4:	4b0e      	ldr	r3, [pc, #56]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 80060a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0ef      	beq.n	8006092 <HAL_RCC_OscConfig+0x22e>
 80060b2:	e020      	b.n	80060f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060b4:	4b0a      	ldr	r3, [pc, #40]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 80060b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060ba:	4a09      	ldr	r2, [pc, #36]	@ (80060e0 <HAL_RCC_OscConfig+0x27c>)
 80060bc:	f023 0301 	bic.w	r3, r3, #1
 80060c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060c4:	f7fd fba2 	bl	800380c <HAL_GetTick>
 80060c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060ca:	e00d      	b.n	80060e8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060cc:	f7fd fb9e 	bl	800380c <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d906      	bls.n	80060e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e1ca      	b.n	8006474 <HAL_RCC_OscConfig+0x610>
 80060de:	bf00      	nop
 80060e0:	40021000 	.word	0x40021000
 80060e4:	2000035c 	.word	0x2000035c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060e8:	4b8c      	ldr	r3, [pc, #560]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 80060ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1ea      	bne.n	80060cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0304 	and.w	r3, r3, #4
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 80a6 	beq.w	8006250 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006104:	2300      	movs	r3, #0
 8006106:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006108:	4b84      	ldr	r3, [pc, #528]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 800610a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800610c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <HAL_RCC_OscConfig+0x2b4>
 8006114:	2301      	movs	r3, #1
 8006116:	e000      	b.n	800611a <HAL_RCC_OscConfig+0x2b6>
 8006118:	2300      	movs	r3, #0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00d      	beq.n	800613a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800611e:	4b7f      	ldr	r3, [pc, #508]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 8006120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006122:	4a7e      	ldr	r2, [pc, #504]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 8006124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006128:	6593      	str	r3, [r2, #88]	@ 0x58
 800612a:	4b7c      	ldr	r3, [pc, #496]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 800612c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800612e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006136:	2301      	movs	r3, #1
 8006138:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800613a:	4b79      	ldr	r3, [pc, #484]	@ (8006320 <HAL_RCC_OscConfig+0x4bc>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006142:	2b00      	cmp	r3, #0
 8006144:	d118      	bne.n	8006178 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006146:	4b76      	ldr	r3, [pc, #472]	@ (8006320 <HAL_RCC_OscConfig+0x4bc>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a75      	ldr	r2, [pc, #468]	@ (8006320 <HAL_RCC_OscConfig+0x4bc>)
 800614c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006152:	f7fd fb5b 	bl	800380c <HAL_GetTick>
 8006156:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006158:	e008      	b.n	800616c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800615a:	f7fd fb57 	bl	800380c <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	2b02      	cmp	r3, #2
 8006166:	d901      	bls.n	800616c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e183      	b.n	8006474 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800616c:	4b6c      	ldr	r3, [pc, #432]	@ (8006320 <HAL_RCC_OscConfig+0x4bc>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006174:	2b00      	cmp	r3, #0
 8006176:	d0f0      	beq.n	800615a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d108      	bne.n	8006192 <HAL_RCC_OscConfig+0x32e>
 8006180:	4b66      	ldr	r3, [pc, #408]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 8006182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006186:	4a65      	ldr	r2, [pc, #404]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 8006188:	f043 0301 	orr.w	r3, r3, #1
 800618c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006190:	e024      	b.n	80061dc <HAL_RCC_OscConfig+0x378>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	2b05      	cmp	r3, #5
 8006198:	d110      	bne.n	80061bc <HAL_RCC_OscConfig+0x358>
 800619a:	4b60      	ldr	r3, [pc, #384]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 800619c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061a0:	4a5e      	ldr	r2, [pc, #376]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 80061a2:	f043 0304 	orr.w	r3, r3, #4
 80061a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80061aa:	4b5c      	ldr	r3, [pc, #368]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 80061ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b0:	4a5a      	ldr	r2, [pc, #360]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 80061b2:	f043 0301 	orr.w	r3, r3, #1
 80061b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80061ba:	e00f      	b.n	80061dc <HAL_RCC_OscConfig+0x378>
 80061bc:	4b57      	ldr	r3, [pc, #348]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 80061be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061c2:	4a56      	ldr	r2, [pc, #344]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 80061c4:	f023 0301 	bic.w	r3, r3, #1
 80061c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80061cc:	4b53      	ldr	r3, [pc, #332]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 80061ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061d2:	4a52      	ldr	r2, [pc, #328]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 80061d4:	f023 0304 	bic.w	r3, r3, #4
 80061d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d016      	beq.n	8006212 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061e4:	f7fd fb12 	bl	800380c <HAL_GetTick>
 80061e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061ea:	e00a      	b.n	8006202 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061ec:	f7fd fb0e 	bl	800380c <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d901      	bls.n	8006202 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e138      	b.n	8006474 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006202:	4b46      	ldr	r3, [pc, #280]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 8006204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d0ed      	beq.n	80061ec <HAL_RCC_OscConfig+0x388>
 8006210:	e015      	b.n	800623e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006212:	f7fd fafb 	bl	800380c <HAL_GetTick>
 8006216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006218:	e00a      	b.n	8006230 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800621a:	f7fd faf7 	bl	800380c <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006228:	4293      	cmp	r3, r2
 800622a:	d901      	bls.n	8006230 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e121      	b.n	8006474 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006230:	4b3a      	ldr	r3, [pc, #232]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 8006232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1ed      	bne.n	800621a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800623e:	7ffb      	ldrb	r3, [r7, #31]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d105      	bne.n	8006250 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006244:	4b35      	ldr	r3, [pc, #212]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 8006246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006248:	4a34      	ldr	r2, [pc, #208]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 800624a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800624e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0320 	and.w	r3, r3, #32
 8006258:	2b00      	cmp	r3, #0
 800625a:	d03c      	beq.n	80062d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01c      	beq.n	800629e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006264:	4b2d      	ldr	r3, [pc, #180]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 8006266:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800626a:	4a2c      	ldr	r2, [pc, #176]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 800626c:	f043 0301 	orr.w	r3, r3, #1
 8006270:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006274:	f7fd faca 	bl	800380c <HAL_GetTick>
 8006278:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800627a:	e008      	b.n	800628e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800627c:	f7fd fac6 	bl	800380c <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b02      	cmp	r3, #2
 8006288:	d901      	bls.n	800628e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e0f2      	b.n	8006474 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800628e:	4b23      	ldr	r3, [pc, #140]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 8006290:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d0ef      	beq.n	800627c <HAL_RCC_OscConfig+0x418>
 800629c:	e01b      	b.n	80062d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800629e:	4b1f      	ldr	r3, [pc, #124]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 80062a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062a4:	4a1d      	ldr	r2, [pc, #116]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 80062a6:	f023 0301 	bic.w	r3, r3, #1
 80062aa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ae:	f7fd faad 	bl	800380c <HAL_GetTick>
 80062b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80062b4:	e008      	b.n	80062c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062b6:	f7fd faa9 	bl	800380c <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d901      	bls.n	80062c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e0d5      	b.n	8006474 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80062c8:	4b14      	ldr	r3, [pc, #80]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 80062ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1ef      	bne.n	80062b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 80c9 	beq.w	8006472 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062e0:	4b0e      	ldr	r3, [pc, #56]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f003 030c 	and.w	r3, r3, #12
 80062e8:	2b0c      	cmp	r3, #12
 80062ea:	f000 8083 	beq.w	80063f4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d15e      	bne.n	80063b4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062f6:	4b09      	ldr	r3, [pc, #36]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a08      	ldr	r2, [pc, #32]	@ (800631c <HAL_RCC_OscConfig+0x4b8>)
 80062fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006302:	f7fd fa83 	bl	800380c <HAL_GetTick>
 8006306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006308:	e00c      	b.n	8006324 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800630a:	f7fd fa7f 	bl	800380c <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	2b02      	cmp	r3, #2
 8006316:	d905      	bls.n	8006324 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e0ab      	b.n	8006474 <HAL_RCC_OscConfig+0x610>
 800631c:	40021000 	.word	0x40021000
 8006320:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006324:	4b55      	ldr	r3, [pc, #340]	@ (800647c <HAL_RCC_OscConfig+0x618>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1ec      	bne.n	800630a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006330:	4b52      	ldr	r3, [pc, #328]	@ (800647c <HAL_RCC_OscConfig+0x618>)
 8006332:	68da      	ldr	r2, [r3, #12]
 8006334:	4b52      	ldr	r3, [pc, #328]	@ (8006480 <HAL_RCC_OscConfig+0x61c>)
 8006336:	4013      	ands	r3, r2
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	6a11      	ldr	r1, [r2, #32]
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006340:	3a01      	subs	r2, #1
 8006342:	0112      	lsls	r2, r2, #4
 8006344:	4311      	orrs	r1, r2
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800634a:	0212      	lsls	r2, r2, #8
 800634c:	4311      	orrs	r1, r2
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006352:	0852      	lsrs	r2, r2, #1
 8006354:	3a01      	subs	r2, #1
 8006356:	0552      	lsls	r2, r2, #21
 8006358:	4311      	orrs	r1, r2
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800635e:	0852      	lsrs	r2, r2, #1
 8006360:	3a01      	subs	r2, #1
 8006362:	0652      	lsls	r2, r2, #25
 8006364:	4311      	orrs	r1, r2
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800636a:	06d2      	lsls	r2, r2, #27
 800636c:	430a      	orrs	r2, r1
 800636e:	4943      	ldr	r1, [pc, #268]	@ (800647c <HAL_RCC_OscConfig+0x618>)
 8006370:	4313      	orrs	r3, r2
 8006372:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006374:	4b41      	ldr	r3, [pc, #260]	@ (800647c <HAL_RCC_OscConfig+0x618>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a40      	ldr	r2, [pc, #256]	@ (800647c <HAL_RCC_OscConfig+0x618>)
 800637a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800637e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006380:	4b3e      	ldr	r3, [pc, #248]	@ (800647c <HAL_RCC_OscConfig+0x618>)
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	4a3d      	ldr	r2, [pc, #244]	@ (800647c <HAL_RCC_OscConfig+0x618>)
 8006386:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800638a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800638c:	f7fd fa3e 	bl	800380c <HAL_GetTick>
 8006390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006394:	f7fd fa3a 	bl	800380c <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e066      	b.n	8006474 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063a6:	4b35      	ldr	r3, [pc, #212]	@ (800647c <HAL_RCC_OscConfig+0x618>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d0f0      	beq.n	8006394 <HAL_RCC_OscConfig+0x530>
 80063b2:	e05e      	b.n	8006472 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063b4:	4b31      	ldr	r3, [pc, #196]	@ (800647c <HAL_RCC_OscConfig+0x618>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a30      	ldr	r2, [pc, #192]	@ (800647c <HAL_RCC_OscConfig+0x618>)
 80063ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c0:	f7fd fa24 	bl	800380c <HAL_GetTick>
 80063c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063c6:	e008      	b.n	80063da <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063c8:	f7fd fa20 	bl	800380c <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e04c      	b.n	8006474 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063da:	4b28      	ldr	r3, [pc, #160]	@ (800647c <HAL_RCC_OscConfig+0x618>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1f0      	bne.n	80063c8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80063e6:	4b25      	ldr	r3, [pc, #148]	@ (800647c <HAL_RCC_OscConfig+0x618>)
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	4924      	ldr	r1, [pc, #144]	@ (800647c <HAL_RCC_OscConfig+0x618>)
 80063ec:	4b25      	ldr	r3, [pc, #148]	@ (8006484 <HAL_RCC_OscConfig+0x620>)
 80063ee:	4013      	ands	r3, r2
 80063f0:	60cb      	str	r3, [r1, #12]
 80063f2:	e03e      	b.n	8006472 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	69db      	ldr	r3, [r3, #28]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d101      	bne.n	8006400 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e039      	b.n	8006474 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006400:	4b1e      	ldr	r3, [pc, #120]	@ (800647c <HAL_RCC_OscConfig+0x618>)
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f003 0203 	and.w	r2, r3, #3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	429a      	cmp	r2, r3
 8006412:	d12c      	bne.n	800646e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641e:	3b01      	subs	r3, #1
 8006420:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006422:	429a      	cmp	r2, r3
 8006424:	d123      	bne.n	800646e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006430:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006432:	429a      	cmp	r2, r3
 8006434:	d11b      	bne.n	800646e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006440:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006442:	429a      	cmp	r2, r3
 8006444:	d113      	bne.n	800646e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006450:	085b      	lsrs	r3, r3, #1
 8006452:	3b01      	subs	r3, #1
 8006454:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006456:	429a      	cmp	r2, r3
 8006458:	d109      	bne.n	800646e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006464:	085b      	lsrs	r3, r3, #1
 8006466:	3b01      	subs	r3, #1
 8006468:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800646a:	429a      	cmp	r2, r3
 800646c:	d001      	beq.n	8006472 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e000      	b.n	8006474 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3720      	adds	r7, #32
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	40021000 	.word	0x40021000
 8006480:	019f800c 	.word	0x019f800c
 8006484:	feeefffc 	.word	0xfeeefffc

08006488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006492:	2300      	movs	r3, #0
 8006494:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e11e      	b.n	80066de <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064a0:	4b91      	ldr	r3, [pc, #580]	@ (80066e8 <HAL_RCC_ClockConfig+0x260>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 030f 	and.w	r3, r3, #15
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d910      	bls.n	80064d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ae:	4b8e      	ldr	r3, [pc, #568]	@ (80066e8 <HAL_RCC_ClockConfig+0x260>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f023 020f 	bic.w	r2, r3, #15
 80064b6:	498c      	ldr	r1, [pc, #560]	@ (80066e8 <HAL_RCC_ClockConfig+0x260>)
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064be:	4b8a      	ldr	r3, [pc, #552]	@ (80066e8 <HAL_RCC_ClockConfig+0x260>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 030f 	and.w	r3, r3, #15
 80064c6:	683a      	ldr	r2, [r7, #0]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d001      	beq.n	80064d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e106      	b.n	80066de <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d073      	beq.n	80065c4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	2b03      	cmp	r3, #3
 80064e2:	d129      	bne.n	8006538 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064e4:	4b81      	ldr	r3, [pc, #516]	@ (80066ec <HAL_RCC_ClockConfig+0x264>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d101      	bne.n	80064f4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e0f4      	b.n	80066de <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80064f4:	f000 f99e 	bl	8006834 <RCC_GetSysClockFreqFromPLLSource>
 80064f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	4a7c      	ldr	r2, [pc, #496]	@ (80066f0 <HAL_RCC_ClockConfig+0x268>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d93f      	bls.n	8006582 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006502:	4b7a      	ldr	r3, [pc, #488]	@ (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d009      	beq.n	8006522 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006516:	2b00      	cmp	r3, #0
 8006518:	d033      	beq.n	8006582 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800651e:	2b00      	cmp	r3, #0
 8006520:	d12f      	bne.n	8006582 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006522:	4b72      	ldr	r3, [pc, #456]	@ (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800652a:	4a70      	ldr	r2, [pc, #448]	@ (80066ec <HAL_RCC_ClockConfig+0x264>)
 800652c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006530:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006532:	2380      	movs	r3, #128	@ 0x80
 8006534:	617b      	str	r3, [r7, #20]
 8006536:	e024      	b.n	8006582 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	2b02      	cmp	r3, #2
 800653e:	d107      	bne.n	8006550 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006540:	4b6a      	ldr	r3, [pc, #424]	@ (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d109      	bne.n	8006560 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e0c6      	b.n	80066de <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006550:	4b66      	ldr	r3, [pc, #408]	@ (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e0be      	b.n	80066de <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006560:	f000 f8ce 	bl	8006700 <HAL_RCC_GetSysClockFreq>
 8006564:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	4a61      	ldr	r2, [pc, #388]	@ (80066f0 <HAL_RCC_ClockConfig+0x268>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d909      	bls.n	8006582 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800656e:	4b5f      	ldr	r3, [pc, #380]	@ (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006576:	4a5d      	ldr	r2, [pc, #372]	@ (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006578:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800657c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800657e:	2380      	movs	r3, #128	@ 0x80
 8006580:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006582:	4b5a      	ldr	r3, [pc, #360]	@ (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f023 0203 	bic.w	r2, r3, #3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	4957      	ldr	r1, [pc, #348]	@ (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006590:	4313      	orrs	r3, r2
 8006592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006594:	f7fd f93a 	bl	800380c <HAL_GetTick>
 8006598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800659a:	e00a      	b.n	80065b2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800659c:	f7fd f936 	bl	800380c <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e095      	b.n	80066de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065b2:	4b4e      	ldr	r3, [pc, #312]	@ (80066ec <HAL_RCC_ClockConfig+0x264>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f003 020c 	and.w	r2, r3, #12
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d1eb      	bne.n	800659c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d023      	beq.n	8006618 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d005      	beq.n	80065e8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065dc:	4b43      	ldr	r3, [pc, #268]	@ (80066ec <HAL_RCC_ClockConfig+0x264>)
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	4a42      	ldr	r2, [pc, #264]	@ (80066ec <HAL_RCC_ClockConfig+0x264>)
 80065e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80065e6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d007      	beq.n	8006604 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80065f4:	4b3d      	ldr	r3, [pc, #244]	@ (80066ec <HAL_RCC_ClockConfig+0x264>)
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80065fc:	4a3b      	ldr	r2, [pc, #236]	@ (80066ec <HAL_RCC_ClockConfig+0x264>)
 80065fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006602:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006604:	4b39      	ldr	r3, [pc, #228]	@ (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	4936      	ldr	r1, [pc, #216]	@ (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006612:	4313      	orrs	r3, r2
 8006614:	608b      	str	r3, [r1, #8]
 8006616:	e008      	b.n	800662a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	2b80      	cmp	r3, #128	@ 0x80
 800661c:	d105      	bne.n	800662a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800661e:	4b33      	ldr	r3, [pc, #204]	@ (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	4a32      	ldr	r2, [pc, #200]	@ (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006624:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006628:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800662a:	4b2f      	ldr	r3, [pc, #188]	@ (80066e8 <HAL_RCC_ClockConfig+0x260>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 030f 	and.w	r3, r3, #15
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	429a      	cmp	r2, r3
 8006636:	d21d      	bcs.n	8006674 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006638:	4b2b      	ldr	r3, [pc, #172]	@ (80066e8 <HAL_RCC_ClockConfig+0x260>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f023 020f 	bic.w	r2, r3, #15
 8006640:	4929      	ldr	r1, [pc, #164]	@ (80066e8 <HAL_RCC_ClockConfig+0x260>)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	4313      	orrs	r3, r2
 8006646:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006648:	f7fd f8e0 	bl	800380c <HAL_GetTick>
 800664c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800664e:	e00a      	b.n	8006666 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006650:	f7fd f8dc 	bl	800380c <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800665e:	4293      	cmp	r3, r2
 8006660:	d901      	bls.n	8006666 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e03b      	b.n	80066de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006666:	4b20      	ldr	r3, [pc, #128]	@ (80066e8 <HAL_RCC_ClockConfig+0x260>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 030f 	and.w	r3, r3, #15
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	429a      	cmp	r2, r3
 8006672:	d1ed      	bne.n	8006650 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0304 	and.w	r3, r3, #4
 800667c:	2b00      	cmp	r3, #0
 800667e:	d008      	beq.n	8006692 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006680:	4b1a      	ldr	r3, [pc, #104]	@ (80066ec <HAL_RCC_ClockConfig+0x264>)
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	4917      	ldr	r1, [pc, #92]	@ (80066ec <HAL_RCC_ClockConfig+0x264>)
 800668e:	4313      	orrs	r3, r2
 8006690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0308 	and.w	r3, r3, #8
 800669a:	2b00      	cmp	r3, #0
 800669c:	d009      	beq.n	80066b2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800669e:	4b13      	ldr	r3, [pc, #76]	@ (80066ec <HAL_RCC_ClockConfig+0x264>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	00db      	lsls	r3, r3, #3
 80066ac:	490f      	ldr	r1, [pc, #60]	@ (80066ec <HAL_RCC_ClockConfig+0x264>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80066b2:	f000 f825 	bl	8006700 <HAL_RCC_GetSysClockFreq>
 80066b6:	4602      	mov	r2, r0
 80066b8:	4b0c      	ldr	r3, [pc, #48]	@ (80066ec <HAL_RCC_ClockConfig+0x264>)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	091b      	lsrs	r3, r3, #4
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	490c      	ldr	r1, [pc, #48]	@ (80066f4 <HAL_RCC_ClockConfig+0x26c>)
 80066c4:	5ccb      	ldrb	r3, [r1, r3]
 80066c6:	f003 031f 	and.w	r3, r3, #31
 80066ca:	fa22 f303 	lsr.w	r3, r2, r3
 80066ce:	4a0a      	ldr	r2, [pc, #40]	@ (80066f8 <HAL_RCC_ClockConfig+0x270>)
 80066d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80066d2:	4b0a      	ldr	r3, [pc, #40]	@ (80066fc <HAL_RCC_ClockConfig+0x274>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fd f84c 	bl	8003774 <HAL_InitTick>
 80066dc:	4603      	mov	r3, r0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3718      	adds	r7, #24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	40022000 	.word	0x40022000
 80066ec:	40021000 	.word	0x40021000
 80066f0:	04c4b400 	.word	0x04c4b400
 80066f4:	0800bc9c 	.word	0x0800bc9c
 80066f8:	20000358 	.word	0x20000358
 80066fc:	2000035c 	.word	0x2000035c

08006700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006706:	4b2c      	ldr	r3, [pc, #176]	@ (80067b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f003 030c 	and.w	r3, r3, #12
 800670e:	2b04      	cmp	r3, #4
 8006710:	d102      	bne.n	8006718 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006712:	4b2a      	ldr	r3, [pc, #168]	@ (80067bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006714:	613b      	str	r3, [r7, #16]
 8006716:	e047      	b.n	80067a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006718:	4b27      	ldr	r3, [pc, #156]	@ (80067b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f003 030c 	and.w	r3, r3, #12
 8006720:	2b08      	cmp	r3, #8
 8006722:	d102      	bne.n	800672a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006724:	4b26      	ldr	r3, [pc, #152]	@ (80067c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006726:	613b      	str	r3, [r7, #16]
 8006728:	e03e      	b.n	80067a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800672a:	4b23      	ldr	r3, [pc, #140]	@ (80067b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f003 030c 	and.w	r3, r3, #12
 8006732:	2b0c      	cmp	r3, #12
 8006734:	d136      	bne.n	80067a4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006736:	4b20      	ldr	r3, [pc, #128]	@ (80067b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f003 0303 	and.w	r3, r3, #3
 800673e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006740:	4b1d      	ldr	r3, [pc, #116]	@ (80067b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	091b      	lsrs	r3, r3, #4
 8006746:	f003 030f 	and.w	r3, r3, #15
 800674a:	3301      	adds	r3, #1
 800674c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2b03      	cmp	r3, #3
 8006752:	d10c      	bne.n	800676e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006754:	4a1a      	ldr	r2, [pc, #104]	@ (80067c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	fbb2 f3f3 	udiv	r3, r2, r3
 800675c:	4a16      	ldr	r2, [pc, #88]	@ (80067b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800675e:	68d2      	ldr	r2, [r2, #12]
 8006760:	0a12      	lsrs	r2, r2, #8
 8006762:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006766:	fb02 f303 	mul.w	r3, r2, r3
 800676a:	617b      	str	r3, [r7, #20]
      break;
 800676c:	e00c      	b.n	8006788 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800676e:	4a13      	ldr	r2, [pc, #76]	@ (80067bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	fbb2 f3f3 	udiv	r3, r2, r3
 8006776:	4a10      	ldr	r2, [pc, #64]	@ (80067b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006778:	68d2      	ldr	r2, [r2, #12]
 800677a:	0a12      	lsrs	r2, r2, #8
 800677c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006780:	fb02 f303 	mul.w	r3, r2, r3
 8006784:	617b      	str	r3, [r7, #20]
      break;
 8006786:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006788:	4b0b      	ldr	r3, [pc, #44]	@ (80067b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	0e5b      	lsrs	r3, r3, #25
 800678e:	f003 0303 	and.w	r3, r3, #3
 8006792:	3301      	adds	r3, #1
 8006794:	005b      	lsls	r3, r3, #1
 8006796:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a0:	613b      	str	r3, [r7, #16]
 80067a2:	e001      	b.n	80067a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80067a8:	693b      	ldr	r3, [r7, #16]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	371c      	adds	r7, #28
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	40021000 	.word	0x40021000
 80067bc:	00f42400 	.word	0x00f42400
 80067c0:	016e3600 	.word	0x016e3600

080067c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067c4:	b480      	push	{r7}
 80067c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067c8:	4b03      	ldr	r3, [pc, #12]	@ (80067d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80067ca:	681b      	ldr	r3, [r3, #0]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	20000358 	.word	0x20000358

080067dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80067e0:	f7ff fff0 	bl	80067c4 <HAL_RCC_GetHCLKFreq>
 80067e4:	4602      	mov	r2, r0
 80067e6:	4b06      	ldr	r3, [pc, #24]	@ (8006800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	0a1b      	lsrs	r3, r3, #8
 80067ec:	f003 0307 	and.w	r3, r3, #7
 80067f0:	4904      	ldr	r1, [pc, #16]	@ (8006804 <HAL_RCC_GetPCLK1Freq+0x28>)
 80067f2:	5ccb      	ldrb	r3, [r1, r3]
 80067f4:	f003 031f 	and.w	r3, r3, #31
 80067f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	40021000 	.word	0x40021000
 8006804:	0800bcac 	.word	0x0800bcac

08006808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800680c:	f7ff ffda 	bl	80067c4 <HAL_RCC_GetHCLKFreq>
 8006810:	4602      	mov	r2, r0
 8006812:	4b06      	ldr	r3, [pc, #24]	@ (800682c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	0adb      	lsrs	r3, r3, #11
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	4904      	ldr	r1, [pc, #16]	@ (8006830 <HAL_RCC_GetPCLK2Freq+0x28>)
 800681e:	5ccb      	ldrb	r3, [r1, r3]
 8006820:	f003 031f 	and.w	r3, r3, #31
 8006824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006828:	4618      	mov	r0, r3
 800682a:	bd80      	pop	{r7, pc}
 800682c:	40021000 	.word	0x40021000
 8006830:	0800bcac 	.word	0x0800bcac

08006834 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800683a:	4b1e      	ldr	r3, [pc, #120]	@ (80068b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f003 0303 	and.w	r3, r3, #3
 8006842:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006844:	4b1b      	ldr	r3, [pc, #108]	@ (80068b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	091b      	lsrs	r3, r3, #4
 800684a:	f003 030f 	and.w	r3, r3, #15
 800684e:	3301      	adds	r3, #1
 8006850:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	2b03      	cmp	r3, #3
 8006856:	d10c      	bne.n	8006872 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006858:	4a17      	ldr	r2, [pc, #92]	@ (80068b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006860:	4a14      	ldr	r2, [pc, #80]	@ (80068b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006862:	68d2      	ldr	r2, [r2, #12]
 8006864:	0a12      	lsrs	r2, r2, #8
 8006866:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800686a:	fb02 f303 	mul.w	r3, r2, r3
 800686e:	617b      	str	r3, [r7, #20]
    break;
 8006870:	e00c      	b.n	800688c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006872:	4a12      	ldr	r2, [pc, #72]	@ (80068bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	fbb2 f3f3 	udiv	r3, r2, r3
 800687a:	4a0e      	ldr	r2, [pc, #56]	@ (80068b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800687c:	68d2      	ldr	r2, [r2, #12]
 800687e:	0a12      	lsrs	r2, r2, #8
 8006880:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006884:	fb02 f303 	mul.w	r3, r2, r3
 8006888:	617b      	str	r3, [r7, #20]
    break;
 800688a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800688c:	4b09      	ldr	r3, [pc, #36]	@ (80068b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	0e5b      	lsrs	r3, r3, #25
 8006892:	f003 0303 	and.w	r3, r3, #3
 8006896:	3301      	adds	r3, #1
 8006898:	005b      	lsls	r3, r3, #1
 800689a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80068a6:	687b      	ldr	r3, [r7, #4]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	371c      	adds	r7, #28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	40021000 	.word	0x40021000
 80068b8:	016e3600 	.word	0x016e3600
 80068bc:	00f42400 	.word	0x00f42400

080068c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80068c8:	2300      	movs	r3, #0
 80068ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80068cc:	2300      	movs	r3, #0
 80068ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 8098 	beq.w	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068de:	2300      	movs	r3, #0
 80068e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068e2:	4b43      	ldr	r3, [pc, #268]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10d      	bne.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068ee:	4b40      	ldr	r3, [pc, #256]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068f2:	4a3f      	ldr	r2, [pc, #252]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80068fa:	4b3d      	ldr	r3, [pc, #244]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006902:	60bb      	str	r3, [r7, #8]
 8006904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006906:	2301      	movs	r3, #1
 8006908:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800690a:	4b3a      	ldr	r3, [pc, #232]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a39      	ldr	r2, [pc, #228]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006914:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006916:	f7fc ff79 	bl	800380c <HAL_GetTick>
 800691a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800691c:	e009      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800691e:	f7fc ff75 	bl	800380c <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d902      	bls.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	74fb      	strb	r3, [r7, #19]
        break;
 8006930:	e005      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006932:	4b30      	ldr	r3, [pc, #192]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0ef      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800693e:	7cfb      	ldrb	r3, [r7, #19]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d159      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006944:	4b2a      	ldr	r3, [pc, #168]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800694a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800694e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d01e      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	429a      	cmp	r2, r3
 800695e:	d019      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006960:	4b23      	ldr	r3, [pc, #140]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800696a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800696c:	4b20      	ldr	r3, [pc, #128]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800696e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006972:	4a1f      	ldr	r2, [pc, #124]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006978:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800697c:	4b1c      	ldr	r3, [pc, #112]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800697e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006982:	4a1b      	ldr	r2, [pc, #108]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006984:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006988:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800698c:	4a18      	ldr	r2, [pc, #96]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	d016      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699e:	f7fc ff35 	bl	800380c <HAL_GetTick>
 80069a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069a4:	e00b      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069a6:	f7fc ff31 	bl	800380c <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d902      	bls.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	74fb      	strb	r3, [r7, #19]
            break;
 80069bc:	e006      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069be:	4b0c      	ldr	r3, [pc, #48]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d0ec      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80069cc:	7cfb      	ldrb	r3, [r7, #19]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10b      	bne.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069d2:	4b07      	ldr	r3, [pc, #28]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069e0:	4903      	ldr	r1, [pc, #12]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80069e8:	e008      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069ea:	7cfb      	ldrb	r3, [r7, #19]
 80069ec:	74bb      	strb	r3, [r7, #18]
 80069ee:	e005      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80069f0:	40021000 	.word	0x40021000
 80069f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f8:	7cfb      	ldrb	r3, [r7, #19]
 80069fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069fc:	7c7b      	ldrb	r3, [r7, #17]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d105      	bne.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a02:	4ba7      	ldr	r3, [pc, #668]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a06:	4aa6      	ldr	r2, [pc, #664]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a0c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00a      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a1a:	4ba1      	ldr	r3, [pc, #644]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a20:	f023 0203 	bic.w	r2, r3, #3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	499d      	ldr	r1, [pc, #628]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00a      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a3c:	4b98      	ldr	r3, [pc, #608]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a42:	f023 020c 	bic.w	r2, r3, #12
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	4995      	ldr	r1, [pc, #596]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0304 	and.w	r3, r3, #4
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00a      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a5e:	4b90      	ldr	r3, [pc, #576]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a64:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	498c      	ldr	r1, [pc, #560]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0308 	and.w	r3, r3, #8
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00a      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a80:	4b87      	ldr	r3, [pc, #540]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a86:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	4984      	ldr	r1, [pc, #528]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0310 	and.w	r3, r3, #16
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006aa2:	4b7f      	ldr	r3, [pc, #508]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aa8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	497b      	ldr	r1, [pc, #492]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0320 	and.w	r3, r3, #32
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ac4:	4b76      	ldr	r3, [pc, #472]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	4973      	ldr	r1, [pc, #460]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ae6:	4b6e      	ldr	r3, [pc, #440]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	496a      	ldr	r1, [pc, #424]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b08:	4b65      	ldr	r3, [pc, #404]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b0e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	4962      	ldr	r1, [pc, #392]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b2a:	4b5d      	ldr	r3, [pc, #372]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b38:	4959      	ldr	r1, [pc, #356]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b4c:	4b54      	ldr	r3, [pc, #336]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b52:	f023 0203 	bic.w	r2, r3, #3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b5a:	4951      	ldr	r1, [pc, #324]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b6e:	4b4c      	ldr	r3, [pc, #304]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b74:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b7c:	4948      	ldr	r1, [pc, #288]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d015      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b90:	4b43      	ldr	r3, [pc, #268]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b9e:	4940      	ldr	r1, [pc, #256]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bae:	d105      	bne.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bb0:	4b3b      	ldr	r3, [pc, #236]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	4a3a      	ldr	r2, [pc, #232]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bba:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d015      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006bc8:	4b35      	ldr	r3, [pc, #212]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bd6:	4932      	ldr	r1, [pc, #200]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006be2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006be6:	d105      	bne.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006be8:	4b2d      	ldr	r3, [pc, #180]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	4a2c      	ldr	r2, [pc, #176]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bf2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d015      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c00:	4b27      	ldr	r3, [pc, #156]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c06:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c0e:	4924      	ldr	r1, [pc, #144]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c1e:	d105      	bne.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c20:	4b1f      	ldr	r3, [pc, #124]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	4a1e      	ldr	r2, [pc, #120]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c2a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d015      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c38:	4b19      	ldr	r3, [pc, #100]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c46:	4916      	ldr	r1, [pc, #88]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c56:	d105      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c58:	4b11      	ldr	r3, [pc, #68]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	4a10      	ldr	r2, [pc, #64]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c62:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d019      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c70:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7e:	4908      	ldr	r1, [pc, #32]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c8e:	d109      	bne.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c90:	4b03      	ldr	r3, [pc, #12]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	4a02      	ldr	r2, [pc, #8]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c9a:	60d3      	str	r3, [r2, #12]
 8006c9c:	e002      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006c9e:	bf00      	nop
 8006ca0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d015      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006cb0:	4b29      	ldr	r3, [pc, #164]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cbe:	4926      	ldr	r1, [pc, #152]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cce:	d105      	bne.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006cd0:	4b21      	ldr	r3, [pc, #132]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	4a20      	ldr	r2, [pc, #128]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cda:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d015      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cee:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cf6:	4918      	ldr	r1, [pc, #96]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d06:	d105      	bne.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006d08:	4b13      	ldr	r3, [pc, #76]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	4a12      	ldr	r2, [pc, #72]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d12:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d015      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006d20:	4b0d      	ldr	r3, [pc, #52]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d2e:	490a      	ldr	r1, [pc, #40]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d3e:	d105      	bne.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d40:	4b05      	ldr	r3, [pc, #20]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	4a04      	ldr	r2, [pc, #16]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d4a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006d4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	40021000 	.word	0x40021000

08006d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d101      	bne.n	8006d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e054      	b.n	8006e18 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d111      	bne.n	8006d9e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f001 ffd4 	bl	8008d30 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d102      	bne.n	8006d96 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a23      	ldr	r2, [pc, #140]	@ (8006e20 <HAL_TIM_Base_Init+0xc4>)
 8006d94:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2202      	movs	r2, #2
 8006da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	3304      	adds	r3, #4
 8006dae:	4619      	mov	r1, r3
 8006db0:	4610      	mov	r0, r2
 8006db2:	f001 fb1d 	bl	80083f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	08003279 	.word	0x08003279

08006e24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d001      	beq.n	8006e3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e04c      	b.n	8006ed6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a26      	ldr	r2, [pc, #152]	@ (8006ee4 <HAL_TIM_Base_Start+0xc0>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d022      	beq.n	8006e94 <HAL_TIM_Base_Start+0x70>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e56:	d01d      	beq.n	8006e94 <HAL_TIM_Base_Start+0x70>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a22      	ldr	r2, [pc, #136]	@ (8006ee8 <HAL_TIM_Base_Start+0xc4>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d018      	beq.n	8006e94 <HAL_TIM_Base_Start+0x70>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a21      	ldr	r2, [pc, #132]	@ (8006eec <HAL_TIM_Base_Start+0xc8>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d013      	beq.n	8006e94 <HAL_TIM_Base_Start+0x70>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a1f      	ldr	r2, [pc, #124]	@ (8006ef0 <HAL_TIM_Base_Start+0xcc>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d00e      	beq.n	8006e94 <HAL_TIM_Base_Start+0x70>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8006ef4 <HAL_TIM_Base_Start+0xd0>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d009      	beq.n	8006e94 <HAL_TIM_Base_Start+0x70>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a1c      	ldr	r2, [pc, #112]	@ (8006ef8 <HAL_TIM_Base_Start+0xd4>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d004      	beq.n	8006e94 <HAL_TIM_Base_Start+0x70>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a1b      	ldr	r2, [pc, #108]	@ (8006efc <HAL_TIM_Base_Start+0xd8>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d115      	bne.n	8006ec0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	4b19      	ldr	r3, [pc, #100]	@ (8006f00 <HAL_TIM_Base_Start+0xdc>)
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2b06      	cmp	r3, #6
 8006ea4:	d015      	beq.n	8006ed2 <HAL_TIM_Base_Start+0xae>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eac:	d011      	beq.n	8006ed2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f042 0201 	orr.w	r2, r2, #1
 8006ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ebe:	e008      	b.n	8006ed2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f042 0201 	orr.w	r2, r2, #1
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	e000      	b.n	8006ed4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ed2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	40012c00 	.word	0x40012c00
 8006ee8:	40000400 	.word	0x40000400
 8006eec:	40000800 	.word	0x40000800
 8006ef0:	40000c00 	.word	0x40000c00
 8006ef4:	40013400 	.word	0x40013400
 8006ef8:	40014000 	.word	0x40014000
 8006efc:	40015000 	.word	0x40015000
 8006f00:	00010007 	.word	0x00010007

08006f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d001      	beq.n	8006f1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e054      	b.n	8006fc6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2202      	movs	r2, #2
 8006f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68da      	ldr	r2, [r3, #12]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f042 0201 	orr.w	r2, r2, #1
 8006f32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a26      	ldr	r2, [pc, #152]	@ (8006fd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d022      	beq.n	8006f84 <HAL_TIM_Base_Start_IT+0x80>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f46:	d01d      	beq.n	8006f84 <HAL_TIM_Base_Start_IT+0x80>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a22      	ldr	r2, [pc, #136]	@ (8006fd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d018      	beq.n	8006f84 <HAL_TIM_Base_Start_IT+0x80>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a21      	ldr	r2, [pc, #132]	@ (8006fdc <HAL_TIM_Base_Start_IT+0xd8>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d013      	beq.n	8006f84 <HAL_TIM_Base_Start_IT+0x80>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a1f      	ldr	r2, [pc, #124]	@ (8006fe0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d00e      	beq.n	8006f84 <HAL_TIM_Base_Start_IT+0x80>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8006fe4 <HAL_TIM_Base_Start_IT+0xe0>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d009      	beq.n	8006f84 <HAL_TIM_Base_Start_IT+0x80>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a1c      	ldr	r2, [pc, #112]	@ (8006fe8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d004      	beq.n	8006f84 <HAL_TIM_Base_Start_IT+0x80>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a1b      	ldr	r2, [pc, #108]	@ (8006fec <HAL_TIM_Base_Start_IT+0xe8>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d115      	bne.n	8006fb0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	4b19      	ldr	r3, [pc, #100]	@ (8006ff0 <HAL_TIM_Base_Start_IT+0xec>)
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2b06      	cmp	r3, #6
 8006f94:	d015      	beq.n	8006fc2 <HAL_TIM_Base_Start_IT+0xbe>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f9c:	d011      	beq.n	8006fc2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f042 0201 	orr.w	r2, r2, #1
 8006fac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fae:	e008      	b.n	8006fc2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f042 0201 	orr.w	r2, r2, #1
 8006fbe:	601a      	str	r2, [r3, #0]
 8006fc0:	e000      	b.n	8006fc4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	40012c00 	.word	0x40012c00
 8006fd8:	40000400 	.word	0x40000400
 8006fdc:	40000800 	.word	0x40000800
 8006fe0:	40000c00 	.word	0x40000c00
 8006fe4:	40013400 	.word	0x40013400
 8006fe8:	40014000 	.word	0x40014000
 8006fec:	40015000 	.word	0x40015000
 8006ff0:	00010007 	.word	0x00010007

08006ff4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e054      	b.n	80070b0 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d111      	bne.n	8007036 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f001 fe88 	bl	8008d30 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007024:	2b00      	cmp	r3, #0
 8007026:	d102      	bne.n	800702e <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a23      	ldr	r2, [pc, #140]	@ (80070b8 <HAL_TIM_OC_Init+0xc4>)
 800702c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2202      	movs	r2, #2
 800703a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	3304      	adds	r3, #4
 8007046:	4619      	mov	r1, r3
 8007048:	4610      	mov	r0, r2
 800704a:	f001 f9d1 	bl	80083f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	080070bd 	.word	0x080070bd

080070bc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e054      	b.n	800718c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d111      	bne.n	8007112 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f001 fe1a 	bl	8008d30 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007100:	2b00      	cmp	r3, #0
 8007102:	d102      	bne.n	800710a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a23      	ldr	r2, [pc, #140]	@ (8007194 <HAL_TIM_PWM_Init+0xc4>)
 8007108:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2202      	movs	r2, #2
 8007116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	3304      	adds	r3, #4
 8007122:	4619      	mov	r1, r3
 8007124:	4610      	mov	r0, r2
 8007126:	f001 f963 	bl	80083f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	08007199 	.word	0x08007199

08007198 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d109      	bne.n	80071d0 <HAL_TIM_PWM_Start+0x24>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	bf14      	ite	ne
 80071c8:	2301      	movne	r3, #1
 80071ca:	2300      	moveq	r3, #0
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	e03c      	b.n	800724a <HAL_TIM_PWM_Start+0x9e>
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	d109      	bne.n	80071ea <HAL_TIM_PWM_Start+0x3e>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b01      	cmp	r3, #1
 80071e0:	bf14      	ite	ne
 80071e2:	2301      	movne	r3, #1
 80071e4:	2300      	moveq	r3, #0
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	e02f      	b.n	800724a <HAL_TIM_PWM_Start+0x9e>
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2b08      	cmp	r3, #8
 80071ee:	d109      	bne.n	8007204 <HAL_TIM_PWM_Start+0x58>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	bf14      	ite	ne
 80071fc:	2301      	movne	r3, #1
 80071fe:	2300      	moveq	r3, #0
 8007200:	b2db      	uxtb	r3, r3
 8007202:	e022      	b.n	800724a <HAL_TIM_PWM_Start+0x9e>
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	2b0c      	cmp	r3, #12
 8007208:	d109      	bne.n	800721e <HAL_TIM_PWM_Start+0x72>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b01      	cmp	r3, #1
 8007214:	bf14      	ite	ne
 8007216:	2301      	movne	r3, #1
 8007218:	2300      	moveq	r3, #0
 800721a:	b2db      	uxtb	r3, r3
 800721c:	e015      	b.n	800724a <HAL_TIM_PWM_Start+0x9e>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b10      	cmp	r3, #16
 8007222:	d109      	bne.n	8007238 <HAL_TIM_PWM_Start+0x8c>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800722a:	b2db      	uxtb	r3, r3
 800722c:	2b01      	cmp	r3, #1
 800722e:	bf14      	ite	ne
 8007230:	2301      	movne	r3, #1
 8007232:	2300      	moveq	r3, #0
 8007234:	b2db      	uxtb	r3, r3
 8007236:	e008      	b.n	800724a <HAL_TIM_PWM_Start+0x9e>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b01      	cmp	r3, #1
 8007242:	bf14      	ite	ne
 8007244:	2301      	movne	r3, #1
 8007246:	2300      	moveq	r3, #0
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d001      	beq.n	8007252 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e0a6      	b.n	80073a0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d104      	bne.n	8007262 <HAL_TIM_PWM_Start+0xb6>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007260:	e023      	b.n	80072aa <HAL_TIM_PWM_Start+0xfe>
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	2b04      	cmp	r3, #4
 8007266:	d104      	bne.n	8007272 <HAL_TIM_PWM_Start+0xc6>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007270:	e01b      	b.n	80072aa <HAL_TIM_PWM_Start+0xfe>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b08      	cmp	r3, #8
 8007276:	d104      	bne.n	8007282 <HAL_TIM_PWM_Start+0xd6>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2202      	movs	r2, #2
 800727c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007280:	e013      	b.n	80072aa <HAL_TIM_PWM_Start+0xfe>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b0c      	cmp	r3, #12
 8007286:	d104      	bne.n	8007292 <HAL_TIM_PWM_Start+0xe6>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2202      	movs	r2, #2
 800728c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007290:	e00b      	b.n	80072aa <HAL_TIM_PWM_Start+0xfe>
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b10      	cmp	r3, #16
 8007296:	d104      	bne.n	80072a2 <HAL_TIM_PWM_Start+0xf6>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2202      	movs	r2, #2
 800729c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072a0:	e003      	b.n	80072aa <HAL_TIM_PWM_Start+0xfe>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2202      	movs	r2, #2
 80072a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2201      	movs	r2, #1
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f001 fd16 	bl	8008ce4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a3a      	ldr	r2, [pc, #232]	@ (80073a8 <HAL_TIM_PWM_Start+0x1fc>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d018      	beq.n	80072f4 <HAL_TIM_PWM_Start+0x148>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a39      	ldr	r2, [pc, #228]	@ (80073ac <HAL_TIM_PWM_Start+0x200>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d013      	beq.n	80072f4 <HAL_TIM_PWM_Start+0x148>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a37      	ldr	r2, [pc, #220]	@ (80073b0 <HAL_TIM_PWM_Start+0x204>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d00e      	beq.n	80072f4 <HAL_TIM_PWM_Start+0x148>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a36      	ldr	r2, [pc, #216]	@ (80073b4 <HAL_TIM_PWM_Start+0x208>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d009      	beq.n	80072f4 <HAL_TIM_PWM_Start+0x148>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a34      	ldr	r2, [pc, #208]	@ (80073b8 <HAL_TIM_PWM_Start+0x20c>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d004      	beq.n	80072f4 <HAL_TIM_PWM_Start+0x148>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a33      	ldr	r2, [pc, #204]	@ (80073bc <HAL_TIM_PWM_Start+0x210>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d101      	bne.n	80072f8 <HAL_TIM_PWM_Start+0x14c>
 80072f4:	2301      	movs	r3, #1
 80072f6:	e000      	b.n	80072fa <HAL_TIM_PWM_Start+0x14e>
 80072f8:	2300      	movs	r3, #0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d007      	beq.n	800730e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800730c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a25      	ldr	r2, [pc, #148]	@ (80073a8 <HAL_TIM_PWM_Start+0x1fc>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d022      	beq.n	800735e <HAL_TIM_PWM_Start+0x1b2>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007320:	d01d      	beq.n	800735e <HAL_TIM_PWM_Start+0x1b2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a26      	ldr	r2, [pc, #152]	@ (80073c0 <HAL_TIM_PWM_Start+0x214>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d018      	beq.n	800735e <HAL_TIM_PWM_Start+0x1b2>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a24      	ldr	r2, [pc, #144]	@ (80073c4 <HAL_TIM_PWM_Start+0x218>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d013      	beq.n	800735e <HAL_TIM_PWM_Start+0x1b2>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a23      	ldr	r2, [pc, #140]	@ (80073c8 <HAL_TIM_PWM_Start+0x21c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d00e      	beq.n	800735e <HAL_TIM_PWM_Start+0x1b2>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a19      	ldr	r2, [pc, #100]	@ (80073ac <HAL_TIM_PWM_Start+0x200>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d009      	beq.n	800735e <HAL_TIM_PWM_Start+0x1b2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a18      	ldr	r2, [pc, #96]	@ (80073b0 <HAL_TIM_PWM_Start+0x204>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d004      	beq.n	800735e <HAL_TIM_PWM_Start+0x1b2>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a18      	ldr	r2, [pc, #96]	@ (80073bc <HAL_TIM_PWM_Start+0x210>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d115      	bne.n	800738a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689a      	ldr	r2, [r3, #8]
 8007364:	4b19      	ldr	r3, [pc, #100]	@ (80073cc <HAL_TIM_PWM_Start+0x220>)
 8007366:	4013      	ands	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2b06      	cmp	r3, #6
 800736e:	d015      	beq.n	800739c <HAL_TIM_PWM_Start+0x1f0>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007376:	d011      	beq.n	800739c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f042 0201 	orr.w	r2, r2, #1
 8007386:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007388:	e008      	b.n	800739c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f042 0201 	orr.w	r2, r2, #1
 8007398:	601a      	str	r2, [r3, #0]
 800739a:	e000      	b.n	800739e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800739c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	40012c00 	.word	0x40012c00
 80073ac:	40013400 	.word	0x40013400
 80073b0:	40014000 	.word	0x40014000
 80073b4:	40014400 	.word	0x40014400
 80073b8:	40014800 	.word	0x40014800
 80073bc:	40015000 	.word	0x40015000
 80073c0:	40000400 	.word	0x40000400
 80073c4:	40000800 	.word	0x40000800
 80073c8:	40000c00 	.word	0x40000c00
 80073cc:	00010007 	.word	0x00010007

080073d0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e04c      	b.n	800747e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d111      	bne.n	8007414 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f001 fc99 	bl	8008d30 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007402:	2b00      	cmp	r3, #0
 8007404:	d102      	bne.n	800740c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a1f      	ldr	r2, [pc, #124]	@ (8007488 <HAL_TIM_OnePulse_Init+0xb8>)
 800740a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2202      	movs	r2, #2
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	3304      	adds	r3, #4
 8007424:	4619      	mov	r1, r3
 8007426:	4610      	mov	r0, r2
 8007428:	f000 ffe2 	bl	80083f0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f022 0208 	bic.w	r2, r2, #8
 800743a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	6819      	ldr	r1, [r3, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	430a      	orrs	r2, r1
 800744a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	0800748d 	.word	0x0800748d

0800748c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80074b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074c8:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d108      	bne.n	80074e2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80074d0:	7bbb      	ldrb	r3, [r7, #14]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d105      	bne.n	80074e2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074d6:	7b7b      	ldrb	r3, [r7, #13]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d102      	bne.n	80074e2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80074dc:	7b3b      	ldrb	r3, [r7, #12]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d001      	beq.n	80074e6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e059      	b.n	800759a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2202      	movs	r2, #2
 80074ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2202      	movs	r2, #2
 80074f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2202      	movs	r2, #2
 80074fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2202      	movs	r2, #2
 8007502:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68da      	ldr	r2, [r3, #12]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f042 0202 	orr.w	r2, r2, #2
 8007514:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68da      	ldr	r2, [r3, #12]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f042 0204 	orr.w	r2, r2, #4
 8007524:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2201      	movs	r2, #1
 800752c:	2100      	movs	r1, #0
 800752e:	4618      	mov	r0, r3
 8007530:	f001 fbd8 	bl	8008ce4 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2201      	movs	r2, #1
 800753a:	2104      	movs	r1, #4
 800753c:	4618      	mov	r0, r3
 800753e:	f001 fbd1 	bl	8008ce4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a17      	ldr	r2, [pc, #92]	@ (80075a4 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d018      	beq.n	800757e <HAL_TIM_OnePulse_Start_IT+0xde>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a15      	ldr	r2, [pc, #84]	@ (80075a8 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d013      	beq.n	800757e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a14      	ldr	r2, [pc, #80]	@ (80075ac <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d00e      	beq.n	800757e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a12      	ldr	r2, [pc, #72]	@ (80075b0 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d009      	beq.n	800757e <HAL_TIM_OnePulse_Start_IT+0xde>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a11      	ldr	r2, [pc, #68]	@ (80075b4 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d004      	beq.n	800757e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a0f      	ldr	r2, [pc, #60]	@ (80075b8 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d101      	bne.n	8007582 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800757e:	2301      	movs	r3, #1
 8007580:	e000      	b.n	8007584 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8007582:	2300      	movs	r3, #0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d007      	beq.n	8007598 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007596:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	40012c00 	.word	0x40012c00
 80075a8:	40013400 	.word	0x40013400
 80075ac:	40014000 	.word	0x40014000
 80075b0:	40014400 	.word	0x40014400
 80075b4:	40014800 	.word	0x40014800
 80075b8:	40015000 	.word	0x40015000

080075bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e0a2      	b.n	8007716 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d111      	bne.n	8007600 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f001 fba3 	bl	8008d30 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d102      	bne.n	80075f8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a4a      	ldr	r2, [pc, #296]	@ (8007720 <HAL_TIM_Encoder_Init+0x164>)
 80075f6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2202      	movs	r2, #2
 8007604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	6812      	ldr	r2, [r2, #0]
 8007612:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007616:	f023 0307 	bic.w	r3, r3, #7
 800761a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	3304      	adds	r3, #4
 8007624:	4619      	mov	r1, r3
 8007626:	4610      	mov	r0, r2
 8007628:	f000 fee2 	bl	80083f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	4313      	orrs	r3, r2
 800764c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007654:	f023 0303 	bic.w	r3, r3, #3
 8007658:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	689a      	ldr	r2, [r3, #8]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	021b      	lsls	r3, r3, #8
 8007664:	4313      	orrs	r3, r2
 8007666:	693a      	ldr	r2, [r7, #16]
 8007668:	4313      	orrs	r3, r2
 800766a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007672:	f023 030c 	bic.w	r3, r3, #12
 8007676:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800767e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	68da      	ldr	r2, [r3, #12]
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	021b      	lsls	r3, r3, #8
 800768e:	4313      	orrs	r3, r2
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	4313      	orrs	r3, r2
 8007694:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	011a      	lsls	r2, r3, #4
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	031b      	lsls	r3, r3, #12
 80076a2:	4313      	orrs	r3, r2
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80076b0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80076b8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	011b      	lsls	r3, r3, #4
 80076c4:	4313      	orrs	r3, r2
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	08003349 	.word	0x08003349

08007724 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007734:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800773c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007744:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800774c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d110      	bne.n	8007776 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007754:	7bfb      	ldrb	r3, [r7, #15]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d102      	bne.n	8007760 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800775a:	7b7b      	ldrb	r3, [r7, #13]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d001      	beq.n	8007764 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e069      	b.n	8007838 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2202      	movs	r2, #2
 8007768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2202      	movs	r2, #2
 8007770:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007774:	e031      	b.n	80077da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	2b04      	cmp	r3, #4
 800777a:	d110      	bne.n	800779e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800777c:	7bbb      	ldrb	r3, [r7, #14]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d102      	bne.n	8007788 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007782:	7b3b      	ldrb	r3, [r7, #12]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d001      	beq.n	800778c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e055      	b.n	8007838 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2202      	movs	r2, #2
 8007790:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2202      	movs	r2, #2
 8007798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800779c:	e01d      	b.n	80077da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800779e:	7bfb      	ldrb	r3, [r7, #15]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d108      	bne.n	80077b6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80077a4:	7bbb      	ldrb	r3, [r7, #14]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d105      	bne.n	80077b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80077aa:	7b7b      	ldrb	r3, [r7, #13]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d102      	bne.n	80077b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80077b0:	7b3b      	ldrb	r3, [r7, #12]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d001      	beq.n	80077ba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e03e      	b.n	8007838 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2202      	movs	r2, #2
 80077be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2202      	movs	r2, #2
 80077c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2202      	movs	r2, #2
 80077ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2202      	movs	r2, #2
 80077d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d003      	beq.n	80077e8 <HAL_TIM_Encoder_Start+0xc4>
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	2b04      	cmp	r3, #4
 80077e4:	d008      	beq.n	80077f8 <HAL_TIM_Encoder_Start+0xd4>
 80077e6:	e00f      	b.n	8007808 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2201      	movs	r2, #1
 80077ee:	2100      	movs	r1, #0
 80077f0:	4618      	mov	r0, r3
 80077f2:	f001 fa77 	bl	8008ce4 <TIM_CCxChannelCmd>
      break;
 80077f6:	e016      	b.n	8007826 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2201      	movs	r2, #1
 80077fe:	2104      	movs	r1, #4
 8007800:	4618      	mov	r0, r3
 8007802:	f001 fa6f 	bl	8008ce4 <TIM_CCxChannelCmd>
      break;
 8007806:	e00e      	b.n	8007826 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2201      	movs	r2, #1
 800780e:	2100      	movs	r1, #0
 8007810:	4618      	mov	r0, r3
 8007812:	f001 fa67 	bl	8008ce4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2201      	movs	r2, #1
 800781c:	2104      	movs	r1, #4
 800781e:	4618      	mov	r0, r3
 8007820:	f001 fa60 	bl	8008ce4 <TIM_CCxChannelCmd>
      break;
 8007824:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f042 0201 	orr.w	r2, r2, #1
 8007834:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	f003 0302 	and.w	r3, r3, #2
 800785e:	2b00      	cmp	r3, #0
 8007860:	d026      	beq.n	80078b0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f003 0302 	and.w	r3, r3, #2
 8007868:	2b00      	cmp	r3, #0
 800786a:	d021      	beq.n	80078b0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f06f 0202 	mvn.w	r2, #2
 8007874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	f003 0303 	and.w	r3, r3, #3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d005      	beq.n	8007896 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	4798      	blx	r3
 8007894:	e009      	b.n	80078aa <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	f003 0304 	and.w	r3, r3, #4
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d026      	beq.n	8007908 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f003 0304 	and.w	r3, r3, #4
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d021      	beq.n	8007908 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f06f 0204 	mvn.w	r2, #4
 80078cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2202      	movs	r2, #2
 80078d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d005      	beq.n	80078ee <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	4798      	blx	r3
 80078ec:	e009      	b.n	8007902 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f003 0308 	and.w	r3, r3, #8
 800790e:	2b00      	cmp	r3, #0
 8007910:	d026      	beq.n	8007960 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f003 0308 	and.w	r3, r3, #8
 8007918:	2b00      	cmp	r3, #0
 800791a:	d021      	beq.n	8007960 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f06f 0208 	mvn.w	r2, #8
 8007924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2204      	movs	r2, #4
 800792a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	f003 0303 	and.w	r3, r3, #3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d005      	beq.n	8007946 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	4798      	blx	r3
 8007944:	e009      	b.n	800795a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	f003 0310 	and.w	r3, r3, #16
 8007966:	2b00      	cmp	r3, #0
 8007968:	d026      	beq.n	80079b8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f003 0310 	and.w	r3, r3, #16
 8007970:	2b00      	cmp	r3, #0
 8007972:	d021      	beq.n	80079b8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f06f 0210 	mvn.w	r2, #16
 800797c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2208      	movs	r2, #8
 8007982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800798e:	2b00      	cmp	r3, #0
 8007990:	d005      	beq.n	800799e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	4798      	blx	r3
 800799c:	e009      	b.n	80079b2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00e      	beq.n	80079e0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f003 0301 	and.w	r3, r3, #1
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d009      	beq.n	80079e0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f06f 0201 	mvn.w	r2, #1
 80079d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d104      	bne.n	80079f4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00e      	beq.n	8007a12 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d009      	beq.n	8007a12 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00e      	beq.n	8007a3a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d009      	beq.n	8007a3a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00e      	beq.n	8007a62 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d009      	beq.n	8007a62 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	f003 0320 	and.w	r3, r3, #32
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00e      	beq.n	8007a8a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f003 0320 	and.w	r3, r3, #32
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d009      	beq.n	8007a8a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f06f 0220 	mvn.w	r2, #32
 8007a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00e      	beq.n	8007ab2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d009      	beq.n	8007ab2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00e      	beq.n	8007ada <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d009      	beq.n	8007ada <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00e      	beq.n	8007b02 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d009      	beq.n	8007b02 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00e      	beq.n	8007b2a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d009      	beq.n	8007b2a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b2a:	bf00      	nop
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
	...

08007b34 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b40:	2300      	movs	r3, #0
 8007b42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d101      	bne.n	8007b52 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007b4e:	2302      	movs	r3, #2
 8007b50:	e066      	b.n	8007c20 <HAL_TIM_OC_ConfigChannel+0xec>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b14      	cmp	r3, #20
 8007b5e:	d857      	bhi.n	8007c10 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007b60:	a201      	add	r2, pc, #4	@ (adr r2, 8007b68 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b66:	bf00      	nop
 8007b68:	08007bbd 	.word	0x08007bbd
 8007b6c:	08007c11 	.word	0x08007c11
 8007b70:	08007c11 	.word	0x08007c11
 8007b74:	08007c11 	.word	0x08007c11
 8007b78:	08007bcb 	.word	0x08007bcb
 8007b7c:	08007c11 	.word	0x08007c11
 8007b80:	08007c11 	.word	0x08007c11
 8007b84:	08007c11 	.word	0x08007c11
 8007b88:	08007bd9 	.word	0x08007bd9
 8007b8c:	08007c11 	.word	0x08007c11
 8007b90:	08007c11 	.word	0x08007c11
 8007b94:	08007c11 	.word	0x08007c11
 8007b98:	08007be7 	.word	0x08007be7
 8007b9c:	08007c11 	.word	0x08007c11
 8007ba0:	08007c11 	.word	0x08007c11
 8007ba4:	08007c11 	.word	0x08007c11
 8007ba8:	08007bf5 	.word	0x08007bf5
 8007bac:	08007c11 	.word	0x08007c11
 8007bb0:	08007c11 	.word	0x08007c11
 8007bb4:	08007c11 	.word	0x08007c11
 8007bb8:	08007c03 	.word	0x08007c03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68b9      	ldr	r1, [r7, #8]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 fcc8 	bl	8008558 <TIM_OC1_SetConfig>
      break;
 8007bc8:	e025      	b.n	8007c16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68b9      	ldr	r1, [r7, #8]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f000 fd5b 	bl	800868c <TIM_OC2_SetConfig>
      break;
 8007bd6:	e01e      	b.n	8007c16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68b9      	ldr	r1, [r7, #8]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 fde8 	bl	80087b4 <TIM_OC3_SetConfig>
      break;
 8007be4:	e017      	b.n	8007c16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68b9      	ldr	r1, [r7, #8]
 8007bec:	4618      	mov	r0, r3
 8007bee:	f000 fe73 	bl	80088d8 <TIM_OC4_SetConfig>
      break;
 8007bf2:	e010      	b.n	8007c16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68b9      	ldr	r1, [r7, #8]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 ff00 	bl	8008a00 <TIM_OC5_SetConfig>
      break;
 8007c00:	e009      	b.n	8007c16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68b9      	ldr	r1, [r7, #8]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f000 ff63 	bl	8008ad4 <TIM_OC6_SetConfig>
      break;
 8007c0e:	e002      	b.n	8007c16 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	75fb      	strb	r3, [r7, #23]
      break;
 8007c14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3718      	adds	r7, #24
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b086      	sub	sp, #24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c34:	2300      	movs	r3, #0
 8007c36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d101      	bne.n	8007c46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007c42:	2302      	movs	r3, #2
 8007c44:	e0ff      	b.n	8007e46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2b14      	cmp	r3, #20
 8007c52:	f200 80f0 	bhi.w	8007e36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007c56:	a201      	add	r2, pc, #4	@ (adr r2, 8007c5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5c:	08007cb1 	.word	0x08007cb1
 8007c60:	08007e37 	.word	0x08007e37
 8007c64:	08007e37 	.word	0x08007e37
 8007c68:	08007e37 	.word	0x08007e37
 8007c6c:	08007cf1 	.word	0x08007cf1
 8007c70:	08007e37 	.word	0x08007e37
 8007c74:	08007e37 	.word	0x08007e37
 8007c78:	08007e37 	.word	0x08007e37
 8007c7c:	08007d33 	.word	0x08007d33
 8007c80:	08007e37 	.word	0x08007e37
 8007c84:	08007e37 	.word	0x08007e37
 8007c88:	08007e37 	.word	0x08007e37
 8007c8c:	08007d73 	.word	0x08007d73
 8007c90:	08007e37 	.word	0x08007e37
 8007c94:	08007e37 	.word	0x08007e37
 8007c98:	08007e37 	.word	0x08007e37
 8007c9c:	08007db5 	.word	0x08007db5
 8007ca0:	08007e37 	.word	0x08007e37
 8007ca4:	08007e37 	.word	0x08007e37
 8007ca8:	08007e37 	.word	0x08007e37
 8007cac:	08007df5 	.word	0x08007df5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68b9      	ldr	r1, [r7, #8]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f000 fc4e 	bl	8008558 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	699a      	ldr	r2, [r3, #24]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f042 0208 	orr.w	r2, r2, #8
 8007cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	699a      	ldr	r2, [r3, #24]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f022 0204 	bic.w	r2, r2, #4
 8007cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6999      	ldr	r1, [r3, #24]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	691a      	ldr	r2, [r3, #16]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	430a      	orrs	r2, r1
 8007cec:	619a      	str	r2, [r3, #24]
      break;
 8007cee:	e0a5      	b.n	8007e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68b9      	ldr	r1, [r7, #8]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 fcc8 	bl	800868c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	699a      	ldr	r2, [r3, #24]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	699a      	ldr	r2, [r3, #24]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6999      	ldr	r1, [r3, #24]
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	021a      	lsls	r2, r3, #8
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	619a      	str	r2, [r3, #24]
      break;
 8007d30:	e084      	b.n	8007e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68b9      	ldr	r1, [r7, #8]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 fd3b 	bl	80087b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	69da      	ldr	r2, [r3, #28]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f042 0208 	orr.w	r2, r2, #8
 8007d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	69da      	ldr	r2, [r3, #28]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f022 0204 	bic.w	r2, r2, #4
 8007d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	69d9      	ldr	r1, [r3, #28]
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	691a      	ldr	r2, [r3, #16]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	430a      	orrs	r2, r1
 8007d6e:	61da      	str	r2, [r3, #28]
      break;
 8007d70:	e064      	b.n	8007e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68b9      	ldr	r1, [r7, #8]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 fdad 	bl	80088d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	69da      	ldr	r2, [r3, #28]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	69da      	ldr	r2, [r3, #28]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	69d9      	ldr	r1, [r3, #28]
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	021a      	lsls	r2, r3, #8
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	430a      	orrs	r2, r1
 8007db0:	61da      	str	r2, [r3, #28]
      break;
 8007db2:	e043      	b.n	8007e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68b9      	ldr	r1, [r7, #8]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f000 fe20 	bl	8008a00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f042 0208 	orr.w	r2, r2, #8
 8007dce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f022 0204 	bic.w	r2, r2, #4
 8007dde:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	691a      	ldr	r2, [r3, #16]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	430a      	orrs	r2, r1
 8007df0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007df2:	e023      	b.n	8007e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68b9      	ldr	r1, [r7, #8]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f000 fe6a 	bl	8008ad4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e0e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e1e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	021a      	lsls	r2, r3, #8
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	430a      	orrs	r2, r1
 8007e32:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007e34:	e002      	b.n	8007e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	75fb      	strb	r3, [r7, #23]
      break;
 8007e3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3718      	adds	r7, #24
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop

08007e50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d101      	bne.n	8007e6c <HAL_TIM_ConfigClockSource+0x1c>
 8007e68:	2302      	movs	r3, #2
 8007e6a:	e0f6      	b.n	800805a <HAL_TIM_ConfigClockSource+0x20a>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2202      	movs	r2, #2
 8007e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007e8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007e8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a6f      	ldr	r2, [pc, #444]	@ (8008064 <HAL_TIM_ConfigClockSource+0x214>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	f000 80c1 	beq.w	800802e <HAL_TIM_ConfigClockSource+0x1de>
 8007eac:	4a6d      	ldr	r2, [pc, #436]	@ (8008064 <HAL_TIM_ConfigClockSource+0x214>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	f200 80c6 	bhi.w	8008040 <HAL_TIM_ConfigClockSource+0x1f0>
 8007eb4:	4a6c      	ldr	r2, [pc, #432]	@ (8008068 <HAL_TIM_ConfigClockSource+0x218>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	f000 80b9 	beq.w	800802e <HAL_TIM_ConfigClockSource+0x1de>
 8007ebc:	4a6a      	ldr	r2, [pc, #424]	@ (8008068 <HAL_TIM_ConfigClockSource+0x218>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	f200 80be 	bhi.w	8008040 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ec4:	4a69      	ldr	r2, [pc, #420]	@ (800806c <HAL_TIM_ConfigClockSource+0x21c>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	f000 80b1 	beq.w	800802e <HAL_TIM_ConfigClockSource+0x1de>
 8007ecc:	4a67      	ldr	r2, [pc, #412]	@ (800806c <HAL_TIM_ConfigClockSource+0x21c>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	f200 80b6 	bhi.w	8008040 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ed4:	4a66      	ldr	r2, [pc, #408]	@ (8008070 <HAL_TIM_ConfigClockSource+0x220>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	f000 80a9 	beq.w	800802e <HAL_TIM_ConfigClockSource+0x1de>
 8007edc:	4a64      	ldr	r2, [pc, #400]	@ (8008070 <HAL_TIM_ConfigClockSource+0x220>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	f200 80ae 	bhi.w	8008040 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ee4:	4a63      	ldr	r2, [pc, #396]	@ (8008074 <HAL_TIM_ConfigClockSource+0x224>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	f000 80a1 	beq.w	800802e <HAL_TIM_ConfigClockSource+0x1de>
 8007eec:	4a61      	ldr	r2, [pc, #388]	@ (8008074 <HAL_TIM_ConfigClockSource+0x224>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	f200 80a6 	bhi.w	8008040 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ef4:	4a60      	ldr	r2, [pc, #384]	@ (8008078 <HAL_TIM_ConfigClockSource+0x228>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	f000 8099 	beq.w	800802e <HAL_TIM_ConfigClockSource+0x1de>
 8007efc:	4a5e      	ldr	r2, [pc, #376]	@ (8008078 <HAL_TIM_ConfigClockSource+0x228>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	f200 809e 	bhi.w	8008040 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f04:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007f08:	f000 8091 	beq.w	800802e <HAL_TIM_ConfigClockSource+0x1de>
 8007f0c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007f10:	f200 8096 	bhi.w	8008040 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f18:	f000 8089 	beq.w	800802e <HAL_TIM_ConfigClockSource+0x1de>
 8007f1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f20:	f200 808e 	bhi.w	8008040 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f28:	d03e      	beq.n	8007fa8 <HAL_TIM_ConfigClockSource+0x158>
 8007f2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f2e:	f200 8087 	bhi.w	8008040 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f36:	f000 8086 	beq.w	8008046 <HAL_TIM_ConfigClockSource+0x1f6>
 8007f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f3e:	d87f      	bhi.n	8008040 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f40:	2b70      	cmp	r3, #112	@ 0x70
 8007f42:	d01a      	beq.n	8007f7a <HAL_TIM_ConfigClockSource+0x12a>
 8007f44:	2b70      	cmp	r3, #112	@ 0x70
 8007f46:	d87b      	bhi.n	8008040 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f48:	2b60      	cmp	r3, #96	@ 0x60
 8007f4a:	d050      	beq.n	8007fee <HAL_TIM_ConfigClockSource+0x19e>
 8007f4c:	2b60      	cmp	r3, #96	@ 0x60
 8007f4e:	d877      	bhi.n	8008040 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f50:	2b50      	cmp	r3, #80	@ 0x50
 8007f52:	d03c      	beq.n	8007fce <HAL_TIM_ConfigClockSource+0x17e>
 8007f54:	2b50      	cmp	r3, #80	@ 0x50
 8007f56:	d873      	bhi.n	8008040 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f58:	2b40      	cmp	r3, #64	@ 0x40
 8007f5a:	d058      	beq.n	800800e <HAL_TIM_ConfigClockSource+0x1be>
 8007f5c:	2b40      	cmp	r3, #64	@ 0x40
 8007f5e:	d86f      	bhi.n	8008040 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f60:	2b30      	cmp	r3, #48	@ 0x30
 8007f62:	d064      	beq.n	800802e <HAL_TIM_ConfigClockSource+0x1de>
 8007f64:	2b30      	cmp	r3, #48	@ 0x30
 8007f66:	d86b      	bhi.n	8008040 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f68:	2b20      	cmp	r3, #32
 8007f6a:	d060      	beq.n	800802e <HAL_TIM_ConfigClockSource+0x1de>
 8007f6c:	2b20      	cmp	r3, #32
 8007f6e:	d867      	bhi.n	8008040 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d05c      	beq.n	800802e <HAL_TIM_ConfigClockSource+0x1de>
 8007f74:	2b10      	cmp	r3, #16
 8007f76:	d05a      	beq.n	800802e <HAL_TIM_ConfigClockSource+0x1de>
 8007f78:	e062      	b.n	8008040 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f8a:	f000 fe8b 	bl	8008ca4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007f9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	609a      	str	r2, [r3, #8]
      break;
 8007fa6:	e04f      	b.n	8008048 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fb8:	f000 fe74 	bl	8008ca4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	689a      	ldr	r2, [r3, #8]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007fca:	609a      	str	r2, [r3, #8]
      break;
 8007fcc:	e03c      	b.n	8008048 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f000 fde6 	bl	8008bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2150      	movs	r1, #80	@ 0x50
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 fe3f 	bl	8008c6a <TIM_ITRx_SetConfig>
      break;
 8007fec:	e02c      	b.n	8008048 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	f000 fe05 	bl	8008c0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2160      	movs	r1, #96	@ 0x60
 8008006:	4618      	mov	r0, r3
 8008008:	f000 fe2f 	bl	8008c6a <TIM_ITRx_SetConfig>
      break;
 800800c:	e01c      	b.n	8008048 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800801a:	461a      	mov	r2, r3
 800801c:	f000 fdc6 	bl	8008bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2140      	movs	r1, #64	@ 0x40
 8008026:	4618      	mov	r0, r3
 8008028:	f000 fe1f 	bl	8008c6a <TIM_ITRx_SetConfig>
      break;
 800802c:	e00c      	b.n	8008048 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4619      	mov	r1, r3
 8008038:	4610      	mov	r0, r2
 800803a:	f000 fe16 	bl	8008c6a <TIM_ITRx_SetConfig>
      break;
 800803e:	e003      	b.n	8008048 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	73fb      	strb	r3, [r7, #15]
      break;
 8008044:	e000      	b.n	8008048 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008046:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008058:	7bfb      	ldrb	r3, [r7, #15]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	00100070 	.word	0x00100070
 8008068:	00100060 	.word	0x00100060
 800806c:	00100050 	.word	0x00100050
 8008070:	00100040 	.word	0x00100040
 8008074:	00100030 	.word	0x00100030
 8008078:	00100020 	.word	0x00100020

0800807c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80080c0:	bf00      	nop
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080d4:	bf00      	nop
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008130:	b480      	push	{r7}
 8008132:	b087      	sub	sp, #28
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	460b      	mov	r3, r1
 800813a:	607a      	str	r2, [r7, #4]
 800813c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d101      	bne.n	800814c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e14a      	b.n	80083e2 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008152:	b2db      	uxtb	r3, r3
 8008154:	2b01      	cmp	r3, #1
 8008156:	f040 80dd 	bne.w	8008314 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800815a:	7afb      	ldrb	r3, [r7, #11]
 800815c:	2b1f      	cmp	r3, #31
 800815e:	f200 80d6 	bhi.w	800830e <HAL_TIM_RegisterCallback+0x1de>
 8008162:	a201      	add	r2, pc, #4	@ (adr r2, 8008168 <HAL_TIM_RegisterCallback+0x38>)
 8008164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008168:	080081e9 	.word	0x080081e9
 800816c:	080081f1 	.word	0x080081f1
 8008170:	080081f9 	.word	0x080081f9
 8008174:	08008201 	.word	0x08008201
 8008178:	08008209 	.word	0x08008209
 800817c:	08008211 	.word	0x08008211
 8008180:	08008219 	.word	0x08008219
 8008184:	08008221 	.word	0x08008221
 8008188:	08008229 	.word	0x08008229
 800818c:	08008231 	.word	0x08008231
 8008190:	08008239 	.word	0x08008239
 8008194:	08008241 	.word	0x08008241
 8008198:	08008249 	.word	0x08008249
 800819c:	08008251 	.word	0x08008251
 80081a0:	0800825b 	.word	0x0800825b
 80081a4:	08008265 	.word	0x08008265
 80081a8:	0800826f 	.word	0x0800826f
 80081ac:	08008279 	.word	0x08008279
 80081b0:	08008283 	.word	0x08008283
 80081b4:	0800828d 	.word	0x0800828d
 80081b8:	08008297 	.word	0x08008297
 80081bc:	080082a1 	.word	0x080082a1
 80081c0:	080082ab 	.word	0x080082ab
 80081c4:	080082b5 	.word	0x080082b5
 80081c8:	080082bf 	.word	0x080082bf
 80081cc:	080082c9 	.word	0x080082c9
 80081d0:	080082d3 	.word	0x080082d3
 80081d4:	080082dd 	.word	0x080082dd
 80081d8:	080082e7 	.word	0x080082e7
 80081dc:	080082f1 	.word	0x080082f1
 80081e0:	080082fb 	.word	0x080082fb
 80081e4:	08008305 	.word	0x08008305
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80081ee:	e0f7      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80081f6:	e0f3      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80081fe:	e0ef      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008206:	e0eb      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800820e:	e0e7      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008216:	e0e3      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800821e:	e0df      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008226:	e0db      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800822e:	e0d7      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008236:	e0d3      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800823e:	e0cf      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008246:	e0cb      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800824e:	e0c7      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008258:	e0c2      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8008262:	e0bd      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800826c:	e0b8      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8008276:	e0b3      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008280:	e0ae      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800828a:	e0a9      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008294:	e0a4      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800829e:	e09f      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80082a8:	e09a      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80082b2:	e095      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80082bc:	e090      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80082c6:	e08b      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80082d0:	e086      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80082da:	e081      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80082e4:	e07c      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80082ee:	e077      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80082f8:	e072      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008302:	e06d      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800830c:	e068      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	75fb      	strb	r3, [r7, #23]
        break;
 8008312:	e065      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2b00      	cmp	r3, #0
 800831e:	d15d      	bne.n	80083dc <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008320:	7afb      	ldrb	r3, [r7, #11]
 8008322:	2b0d      	cmp	r3, #13
 8008324:	d857      	bhi.n	80083d6 <HAL_TIM_RegisterCallback+0x2a6>
 8008326:	a201      	add	r2, pc, #4	@ (adr r2, 800832c <HAL_TIM_RegisterCallback+0x1fc>)
 8008328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832c:	08008365 	.word	0x08008365
 8008330:	0800836d 	.word	0x0800836d
 8008334:	08008375 	.word	0x08008375
 8008338:	0800837d 	.word	0x0800837d
 800833c:	08008385 	.word	0x08008385
 8008340:	0800838d 	.word	0x0800838d
 8008344:	08008395 	.word	0x08008395
 8008348:	0800839d 	.word	0x0800839d
 800834c:	080083a5 	.word	0x080083a5
 8008350:	080083ad 	.word	0x080083ad
 8008354:	080083b5 	.word	0x080083b5
 8008358:	080083bd 	.word	0x080083bd
 800835c:	080083c5 	.word	0x080083c5
 8008360:	080083cd 	.word	0x080083cd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800836a:	e039      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008372:	e035      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800837a:	e031      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008382:	e02d      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800838a:	e029      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008392:	e025      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800839a:	e021      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80083a2:	e01d      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80083aa:	e019      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80083b2:	e015      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80083ba:	e011      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80083c2:	e00d      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80083ca:	e009      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80083d4:	e004      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	75fb      	strb	r3, [r7, #23]
        break;
 80083da:	e001      	b.n	80083e0 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80083e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	371c      	adds	r7, #28
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop

080083f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a4c      	ldr	r2, [pc, #304]	@ (8008534 <TIM_Base_SetConfig+0x144>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d017      	beq.n	8008438 <TIM_Base_SetConfig+0x48>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800840e:	d013      	beq.n	8008438 <TIM_Base_SetConfig+0x48>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a49      	ldr	r2, [pc, #292]	@ (8008538 <TIM_Base_SetConfig+0x148>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d00f      	beq.n	8008438 <TIM_Base_SetConfig+0x48>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a48      	ldr	r2, [pc, #288]	@ (800853c <TIM_Base_SetConfig+0x14c>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d00b      	beq.n	8008438 <TIM_Base_SetConfig+0x48>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a47      	ldr	r2, [pc, #284]	@ (8008540 <TIM_Base_SetConfig+0x150>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d007      	beq.n	8008438 <TIM_Base_SetConfig+0x48>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a46      	ldr	r2, [pc, #280]	@ (8008544 <TIM_Base_SetConfig+0x154>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d003      	beq.n	8008438 <TIM_Base_SetConfig+0x48>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a45      	ldr	r2, [pc, #276]	@ (8008548 <TIM_Base_SetConfig+0x158>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d108      	bne.n	800844a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800843e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	4313      	orrs	r3, r2
 8008448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a39      	ldr	r2, [pc, #228]	@ (8008534 <TIM_Base_SetConfig+0x144>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d023      	beq.n	800849a <TIM_Base_SetConfig+0xaa>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008458:	d01f      	beq.n	800849a <TIM_Base_SetConfig+0xaa>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a36      	ldr	r2, [pc, #216]	@ (8008538 <TIM_Base_SetConfig+0x148>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d01b      	beq.n	800849a <TIM_Base_SetConfig+0xaa>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a35      	ldr	r2, [pc, #212]	@ (800853c <TIM_Base_SetConfig+0x14c>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d017      	beq.n	800849a <TIM_Base_SetConfig+0xaa>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a34      	ldr	r2, [pc, #208]	@ (8008540 <TIM_Base_SetConfig+0x150>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d013      	beq.n	800849a <TIM_Base_SetConfig+0xaa>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a33      	ldr	r2, [pc, #204]	@ (8008544 <TIM_Base_SetConfig+0x154>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d00f      	beq.n	800849a <TIM_Base_SetConfig+0xaa>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a33      	ldr	r2, [pc, #204]	@ (800854c <TIM_Base_SetConfig+0x15c>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d00b      	beq.n	800849a <TIM_Base_SetConfig+0xaa>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a32      	ldr	r2, [pc, #200]	@ (8008550 <TIM_Base_SetConfig+0x160>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d007      	beq.n	800849a <TIM_Base_SetConfig+0xaa>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a31      	ldr	r2, [pc, #196]	@ (8008554 <TIM_Base_SetConfig+0x164>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d003      	beq.n	800849a <TIM_Base_SetConfig+0xaa>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a2c      	ldr	r2, [pc, #176]	@ (8008548 <TIM_Base_SetConfig+0x158>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d108      	bne.n	80084ac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	689a      	ldr	r2, [r3, #8]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4a18      	ldr	r2, [pc, #96]	@ (8008534 <TIM_Base_SetConfig+0x144>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d013      	beq.n	8008500 <TIM_Base_SetConfig+0x110>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a1a      	ldr	r2, [pc, #104]	@ (8008544 <TIM_Base_SetConfig+0x154>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d00f      	beq.n	8008500 <TIM_Base_SetConfig+0x110>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a1a      	ldr	r2, [pc, #104]	@ (800854c <TIM_Base_SetConfig+0x15c>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d00b      	beq.n	8008500 <TIM_Base_SetConfig+0x110>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a19      	ldr	r2, [pc, #100]	@ (8008550 <TIM_Base_SetConfig+0x160>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d007      	beq.n	8008500 <TIM_Base_SetConfig+0x110>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a18      	ldr	r2, [pc, #96]	@ (8008554 <TIM_Base_SetConfig+0x164>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d003      	beq.n	8008500 <TIM_Base_SetConfig+0x110>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a13      	ldr	r2, [pc, #76]	@ (8008548 <TIM_Base_SetConfig+0x158>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d103      	bne.n	8008508 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	691a      	ldr	r2, [r3, #16]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	f003 0301 	and.w	r3, r3, #1
 8008516:	2b01      	cmp	r3, #1
 8008518:	d105      	bne.n	8008526 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	f023 0201 	bic.w	r2, r3, #1
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	611a      	str	r2, [r3, #16]
  }
}
 8008526:	bf00      	nop
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	40012c00 	.word	0x40012c00
 8008538:	40000400 	.word	0x40000400
 800853c:	40000800 	.word	0x40000800
 8008540:	40000c00 	.word	0x40000c00
 8008544:	40013400 	.word	0x40013400
 8008548:	40015000 	.word	0x40015000
 800854c:	40014000 	.word	0x40014000
 8008550:	40014400 	.word	0x40014400
 8008554:	40014800 	.word	0x40014800

08008558 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a1b      	ldr	r3, [r3, #32]
 8008566:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a1b      	ldr	r3, [r3, #32]
 800856c:	f023 0201 	bic.w	r2, r3, #1
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800858a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f023 0303 	bic.w	r3, r3, #3
 8008592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	4313      	orrs	r3, r2
 800859c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f023 0302 	bic.w	r3, r3, #2
 80085a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a30      	ldr	r2, [pc, #192]	@ (8008674 <TIM_OC1_SetConfig+0x11c>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d013      	beq.n	80085e0 <TIM_OC1_SetConfig+0x88>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a2f      	ldr	r2, [pc, #188]	@ (8008678 <TIM_OC1_SetConfig+0x120>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d00f      	beq.n	80085e0 <TIM_OC1_SetConfig+0x88>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a2e      	ldr	r2, [pc, #184]	@ (800867c <TIM_OC1_SetConfig+0x124>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d00b      	beq.n	80085e0 <TIM_OC1_SetConfig+0x88>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a2d      	ldr	r2, [pc, #180]	@ (8008680 <TIM_OC1_SetConfig+0x128>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d007      	beq.n	80085e0 <TIM_OC1_SetConfig+0x88>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a2c      	ldr	r2, [pc, #176]	@ (8008684 <TIM_OC1_SetConfig+0x12c>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d003      	beq.n	80085e0 <TIM_OC1_SetConfig+0x88>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a2b      	ldr	r2, [pc, #172]	@ (8008688 <TIM_OC1_SetConfig+0x130>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d10c      	bne.n	80085fa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	f023 0308 	bic.w	r3, r3, #8
 80085e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	697a      	ldr	r2, [r7, #20]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f023 0304 	bic.w	r3, r3, #4
 80085f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a1d      	ldr	r2, [pc, #116]	@ (8008674 <TIM_OC1_SetConfig+0x11c>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d013      	beq.n	800862a <TIM_OC1_SetConfig+0xd2>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a1c      	ldr	r2, [pc, #112]	@ (8008678 <TIM_OC1_SetConfig+0x120>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d00f      	beq.n	800862a <TIM_OC1_SetConfig+0xd2>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a1b      	ldr	r2, [pc, #108]	@ (800867c <TIM_OC1_SetConfig+0x124>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d00b      	beq.n	800862a <TIM_OC1_SetConfig+0xd2>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a1a      	ldr	r2, [pc, #104]	@ (8008680 <TIM_OC1_SetConfig+0x128>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d007      	beq.n	800862a <TIM_OC1_SetConfig+0xd2>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a19      	ldr	r2, [pc, #100]	@ (8008684 <TIM_OC1_SetConfig+0x12c>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d003      	beq.n	800862a <TIM_OC1_SetConfig+0xd2>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a18      	ldr	r2, [pc, #96]	@ (8008688 <TIM_OC1_SetConfig+0x130>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d111      	bne.n	800864e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	695b      	ldr	r3, [r3, #20]
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	4313      	orrs	r3, r2
 8008642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	4313      	orrs	r3, r2
 800864c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	693a      	ldr	r2, [r7, #16]
 8008652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	685a      	ldr	r2, [r3, #4]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	697a      	ldr	r2, [r7, #20]
 8008666:	621a      	str	r2, [r3, #32]
}
 8008668:	bf00      	nop
 800866a:	371c      	adds	r7, #28
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr
 8008674:	40012c00 	.word	0x40012c00
 8008678:	40013400 	.word	0x40013400
 800867c:	40014000 	.word	0x40014000
 8008680:	40014400 	.word	0x40014400
 8008684:	40014800 	.word	0x40014800
 8008688:	40015000 	.word	0x40015000

0800868c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800868c:	b480      	push	{r7}
 800868e:	b087      	sub	sp, #28
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a1b      	ldr	r3, [r3, #32]
 800869a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6a1b      	ldr	r3, [r3, #32]
 80086a0:	f023 0210 	bic.w	r2, r3, #16
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80086ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	021b      	lsls	r3, r3, #8
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	f023 0320 	bic.w	r3, r3, #32
 80086da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	011b      	lsls	r3, r3, #4
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a2c      	ldr	r2, [pc, #176]	@ (800879c <TIM_OC2_SetConfig+0x110>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d007      	beq.n	8008700 <TIM_OC2_SetConfig+0x74>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a2b      	ldr	r2, [pc, #172]	@ (80087a0 <TIM_OC2_SetConfig+0x114>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d003      	beq.n	8008700 <TIM_OC2_SetConfig+0x74>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a2a      	ldr	r2, [pc, #168]	@ (80087a4 <TIM_OC2_SetConfig+0x118>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d10d      	bne.n	800871c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	011b      	lsls	r3, r3, #4
 800870e:	697a      	ldr	r2, [r7, #20]
 8008710:	4313      	orrs	r3, r2
 8008712:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800871a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a1f      	ldr	r2, [pc, #124]	@ (800879c <TIM_OC2_SetConfig+0x110>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d013      	beq.n	800874c <TIM_OC2_SetConfig+0xc0>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a1e      	ldr	r2, [pc, #120]	@ (80087a0 <TIM_OC2_SetConfig+0x114>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d00f      	beq.n	800874c <TIM_OC2_SetConfig+0xc0>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a1e      	ldr	r2, [pc, #120]	@ (80087a8 <TIM_OC2_SetConfig+0x11c>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d00b      	beq.n	800874c <TIM_OC2_SetConfig+0xc0>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a1d      	ldr	r2, [pc, #116]	@ (80087ac <TIM_OC2_SetConfig+0x120>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d007      	beq.n	800874c <TIM_OC2_SetConfig+0xc0>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a1c      	ldr	r2, [pc, #112]	@ (80087b0 <TIM_OC2_SetConfig+0x124>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d003      	beq.n	800874c <TIM_OC2_SetConfig+0xc0>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a17      	ldr	r2, [pc, #92]	@ (80087a4 <TIM_OC2_SetConfig+0x118>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d113      	bne.n	8008774 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008752:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800875a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	693a      	ldr	r2, [r7, #16]
 8008764:	4313      	orrs	r3, r2
 8008766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	4313      	orrs	r3, r2
 8008772:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	693a      	ldr	r2, [r7, #16]
 8008778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	685a      	ldr	r2, [r3, #4]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	621a      	str	r2, [r3, #32]
}
 800878e:	bf00      	nop
 8008790:	371c      	adds	r7, #28
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	40012c00 	.word	0x40012c00
 80087a0:	40013400 	.word	0x40013400
 80087a4:	40015000 	.word	0x40015000
 80087a8:	40014000 	.word	0x40014000
 80087ac:	40014400 	.word	0x40014400
 80087b0:	40014800 	.word	0x40014800

080087b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b087      	sub	sp, #28
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a1b      	ldr	r3, [r3, #32]
 80087c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6a1b      	ldr	r3, [r3, #32]
 80087c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	69db      	ldr	r3, [r3, #28]
 80087da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f023 0303 	bic.w	r3, r3, #3
 80087ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	021b      	lsls	r3, r3, #8
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	4313      	orrs	r3, r2
 800880c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a2b      	ldr	r2, [pc, #172]	@ (80088c0 <TIM_OC3_SetConfig+0x10c>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d007      	beq.n	8008826 <TIM_OC3_SetConfig+0x72>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a2a      	ldr	r2, [pc, #168]	@ (80088c4 <TIM_OC3_SetConfig+0x110>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d003      	beq.n	8008826 <TIM_OC3_SetConfig+0x72>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a29      	ldr	r2, [pc, #164]	@ (80088c8 <TIM_OC3_SetConfig+0x114>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d10d      	bne.n	8008842 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800882c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	021b      	lsls	r3, r3, #8
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	4313      	orrs	r3, r2
 8008838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a1e      	ldr	r2, [pc, #120]	@ (80088c0 <TIM_OC3_SetConfig+0x10c>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d013      	beq.n	8008872 <TIM_OC3_SetConfig+0xbe>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a1d      	ldr	r2, [pc, #116]	@ (80088c4 <TIM_OC3_SetConfig+0x110>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d00f      	beq.n	8008872 <TIM_OC3_SetConfig+0xbe>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a1d      	ldr	r2, [pc, #116]	@ (80088cc <TIM_OC3_SetConfig+0x118>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d00b      	beq.n	8008872 <TIM_OC3_SetConfig+0xbe>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a1c      	ldr	r2, [pc, #112]	@ (80088d0 <TIM_OC3_SetConfig+0x11c>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d007      	beq.n	8008872 <TIM_OC3_SetConfig+0xbe>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a1b      	ldr	r2, [pc, #108]	@ (80088d4 <TIM_OC3_SetConfig+0x120>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d003      	beq.n	8008872 <TIM_OC3_SetConfig+0xbe>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a16      	ldr	r2, [pc, #88]	@ (80088c8 <TIM_OC3_SetConfig+0x114>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d113      	bne.n	800889a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	011b      	lsls	r3, r3, #4
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	4313      	orrs	r3, r2
 800888c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	011b      	lsls	r3, r3, #4
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	4313      	orrs	r3, r2
 8008898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	685a      	ldr	r2, [r3, #4]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	697a      	ldr	r2, [r7, #20]
 80088b2:	621a      	str	r2, [r3, #32]
}
 80088b4:	bf00      	nop
 80088b6:	371c      	adds	r7, #28
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr
 80088c0:	40012c00 	.word	0x40012c00
 80088c4:	40013400 	.word	0x40013400
 80088c8:	40015000 	.word	0x40015000
 80088cc:	40014000 	.word	0x40014000
 80088d0:	40014400 	.word	0x40014400
 80088d4:	40014800 	.word	0x40014800

080088d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088d8:	b480      	push	{r7}
 80088da:	b087      	sub	sp, #28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a1b      	ldr	r3, [r3, #32]
 80088ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008906:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800890a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008912:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	021b      	lsls	r3, r3, #8
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	4313      	orrs	r3, r2
 800891e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008926:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	031b      	lsls	r3, r3, #12
 800892e:	697a      	ldr	r2, [r7, #20]
 8008930:	4313      	orrs	r3, r2
 8008932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a2c      	ldr	r2, [pc, #176]	@ (80089e8 <TIM_OC4_SetConfig+0x110>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d007      	beq.n	800894c <TIM_OC4_SetConfig+0x74>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a2b      	ldr	r2, [pc, #172]	@ (80089ec <TIM_OC4_SetConfig+0x114>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d003      	beq.n	800894c <TIM_OC4_SetConfig+0x74>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a2a      	ldr	r2, [pc, #168]	@ (80089f0 <TIM_OC4_SetConfig+0x118>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d10d      	bne.n	8008968 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	031b      	lsls	r3, r3, #12
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	4313      	orrs	r3, r2
 800895e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008966:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a1f      	ldr	r2, [pc, #124]	@ (80089e8 <TIM_OC4_SetConfig+0x110>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d013      	beq.n	8008998 <TIM_OC4_SetConfig+0xc0>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a1e      	ldr	r2, [pc, #120]	@ (80089ec <TIM_OC4_SetConfig+0x114>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d00f      	beq.n	8008998 <TIM_OC4_SetConfig+0xc0>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a1e      	ldr	r2, [pc, #120]	@ (80089f4 <TIM_OC4_SetConfig+0x11c>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d00b      	beq.n	8008998 <TIM_OC4_SetConfig+0xc0>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a1d      	ldr	r2, [pc, #116]	@ (80089f8 <TIM_OC4_SetConfig+0x120>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d007      	beq.n	8008998 <TIM_OC4_SetConfig+0xc0>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a1c      	ldr	r2, [pc, #112]	@ (80089fc <TIM_OC4_SetConfig+0x124>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d003      	beq.n	8008998 <TIM_OC4_SetConfig+0xc0>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a17      	ldr	r2, [pc, #92]	@ (80089f0 <TIM_OC4_SetConfig+0x118>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d113      	bne.n	80089c0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800899e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80089a6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	695b      	ldr	r3, [r3, #20]
 80089ac:	019b      	lsls	r3, r3, #6
 80089ae:	693a      	ldr	r2, [r7, #16]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	019b      	lsls	r3, r3, #6
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	4313      	orrs	r3, r2
 80089be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	693a      	ldr	r2, [r7, #16]
 80089c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	685a      	ldr	r2, [r3, #4]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	621a      	str	r2, [r3, #32]
}
 80089da:	bf00      	nop
 80089dc:	371c      	adds	r7, #28
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	40012c00 	.word	0x40012c00
 80089ec:	40013400 	.word	0x40013400
 80089f0:	40015000 	.word	0x40015000
 80089f4:	40014000 	.word	0x40014000
 80089f8:	40014400 	.word	0x40014400
 80089fc:	40014800 	.word	0x40014800

08008a00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b087      	sub	sp, #28
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a1b      	ldr	r3, [r3, #32]
 8008a0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a1b      	ldr	r3, [r3, #32]
 8008a14:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008a44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	041b      	lsls	r3, r3, #16
 8008a4c:	693a      	ldr	r2, [r7, #16]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a19      	ldr	r2, [pc, #100]	@ (8008abc <TIM_OC5_SetConfig+0xbc>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d013      	beq.n	8008a82 <TIM_OC5_SetConfig+0x82>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a18      	ldr	r2, [pc, #96]	@ (8008ac0 <TIM_OC5_SetConfig+0xc0>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d00f      	beq.n	8008a82 <TIM_OC5_SetConfig+0x82>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a17      	ldr	r2, [pc, #92]	@ (8008ac4 <TIM_OC5_SetConfig+0xc4>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d00b      	beq.n	8008a82 <TIM_OC5_SetConfig+0x82>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a16      	ldr	r2, [pc, #88]	@ (8008ac8 <TIM_OC5_SetConfig+0xc8>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d007      	beq.n	8008a82 <TIM_OC5_SetConfig+0x82>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a15      	ldr	r2, [pc, #84]	@ (8008acc <TIM_OC5_SetConfig+0xcc>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d003      	beq.n	8008a82 <TIM_OC5_SetConfig+0x82>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a14      	ldr	r2, [pc, #80]	@ (8008ad0 <TIM_OC5_SetConfig+0xd0>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d109      	bne.n	8008a96 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	695b      	ldr	r3, [r3, #20]
 8008a8e:	021b      	lsls	r3, r3, #8
 8008a90:	697a      	ldr	r2, [r7, #20]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	685a      	ldr	r2, [r3, #4]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	693a      	ldr	r2, [r7, #16]
 8008aae:	621a      	str	r2, [r3, #32]
}
 8008ab0:	bf00      	nop
 8008ab2:	371c      	adds	r7, #28
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr
 8008abc:	40012c00 	.word	0x40012c00
 8008ac0:	40013400 	.word	0x40013400
 8008ac4:	40014000 	.word	0x40014000
 8008ac8:	40014400 	.word	0x40014400
 8008acc:	40014800 	.word	0x40014800
 8008ad0:	40015000 	.word	0x40015000

08008ad4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b087      	sub	sp, #28
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a1b      	ldr	r3, [r3, #32]
 8008ae2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6a1b      	ldr	r3, [r3, #32]
 8008ae8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	021b      	lsls	r3, r3, #8
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008b1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	051b      	lsls	r3, r3, #20
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a1a      	ldr	r2, [pc, #104]	@ (8008b94 <TIM_OC6_SetConfig+0xc0>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d013      	beq.n	8008b58 <TIM_OC6_SetConfig+0x84>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a19      	ldr	r2, [pc, #100]	@ (8008b98 <TIM_OC6_SetConfig+0xc4>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d00f      	beq.n	8008b58 <TIM_OC6_SetConfig+0x84>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a18      	ldr	r2, [pc, #96]	@ (8008b9c <TIM_OC6_SetConfig+0xc8>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d00b      	beq.n	8008b58 <TIM_OC6_SetConfig+0x84>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a17      	ldr	r2, [pc, #92]	@ (8008ba0 <TIM_OC6_SetConfig+0xcc>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d007      	beq.n	8008b58 <TIM_OC6_SetConfig+0x84>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a16      	ldr	r2, [pc, #88]	@ (8008ba4 <TIM_OC6_SetConfig+0xd0>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d003      	beq.n	8008b58 <TIM_OC6_SetConfig+0x84>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a15      	ldr	r2, [pc, #84]	@ (8008ba8 <TIM_OC6_SetConfig+0xd4>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d109      	bne.n	8008b6c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	695b      	ldr	r3, [r3, #20]
 8008b64:	029b      	lsls	r3, r3, #10
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	621a      	str	r2, [r3, #32]
}
 8008b86:	bf00      	nop
 8008b88:	371c      	adds	r7, #28
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	40012c00 	.word	0x40012c00
 8008b98:	40013400 	.word	0x40013400
 8008b9c:	40014000 	.word	0x40014000
 8008ba0:	40014400 	.word	0x40014400
 8008ba4:	40014800 	.word	0x40014800
 8008ba8:	40015000 	.word	0x40015000

08008bac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b087      	sub	sp, #28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6a1b      	ldr	r3, [r3, #32]
 8008bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	f023 0201 	bic.w	r2, r3, #1
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	011b      	lsls	r3, r3, #4
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	f023 030a 	bic.w	r3, r3, #10
 8008be8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008bea:	697a      	ldr	r2, [r7, #20]
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	693a      	ldr	r2, [r7, #16]
 8008bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	621a      	str	r2, [r3, #32]
}
 8008bfe:	bf00      	nop
 8008c00:	371c      	adds	r7, #28
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr

08008c0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c0a:	b480      	push	{r7}
 8008c0c:	b087      	sub	sp, #28
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	60f8      	str	r0, [r7, #12]
 8008c12:	60b9      	str	r1, [r7, #8]
 8008c14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6a1b      	ldr	r3, [r3, #32]
 8008c1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
 8008c20:	f023 0210 	bic.w	r2, r3, #16
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	699b      	ldr	r3, [r3, #24]
 8008c2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008c34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	031b      	lsls	r3, r3, #12
 8008c3a:	693a      	ldr	r2, [r7, #16]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008c46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	011b      	lsls	r3, r3, #4
 8008c4c:	697a      	ldr	r2, [r7, #20]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	621a      	str	r2, [r3, #32]
}
 8008c5e:	bf00      	nop
 8008c60:	371c      	adds	r7, #28
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr

08008c6a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b085      	sub	sp, #20
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008c80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	f043 0307 	orr.w	r3, r3, #7
 8008c90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	609a      	str	r2, [r3, #8]
}
 8008c98:	bf00      	nop
 8008c9a:	3714      	adds	r7, #20
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b087      	sub	sp, #28
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
 8008cb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008cbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	021a      	lsls	r2, r3, #8
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	431a      	orrs	r2, r3
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	697a      	ldr	r2, [r7, #20]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	697a      	ldr	r2, [r7, #20]
 8008cd6:	609a      	str	r2, [r3, #8]
}
 8008cd8:	bf00      	nop
 8008cda:	371c      	adds	r7, #28
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b087      	sub	sp, #28
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	f003 031f 	and.w	r3, r3, #31
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6a1a      	ldr	r2, [r3, #32]
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	43db      	mvns	r3, r3
 8008d06:	401a      	ands	r2, r3
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6a1a      	ldr	r2, [r3, #32]
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	f003 031f 	and.w	r3, r3, #31
 8008d16:	6879      	ldr	r1, [r7, #4]
 8008d18:	fa01 f303 	lsl.w	r3, r1, r3
 8008d1c:	431a      	orrs	r2, r3
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	621a      	str	r2, [r3, #32]
}
 8008d22:	bf00      	nop
 8008d24:	371c      	adds	r7, #28
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
	...

08008d30 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a26      	ldr	r2, [pc, #152]	@ (8008dd4 <TIM_ResetCallback+0xa4>)
 8008d3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a25      	ldr	r2, [pc, #148]	@ (8008dd8 <TIM_ResetCallback+0xa8>)
 8008d44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a24      	ldr	r2, [pc, #144]	@ (8008ddc <TIM_ResetCallback+0xac>)
 8008d4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a23      	ldr	r2, [pc, #140]	@ (8008de0 <TIM_ResetCallback+0xb0>)
 8008d54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a22      	ldr	r2, [pc, #136]	@ (8008de4 <TIM_ResetCallback+0xb4>)
 8008d5c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a21      	ldr	r2, [pc, #132]	@ (8008de8 <TIM_ResetCallback+0xb8>)
 8008d64:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a20      	ldr	r2, [pc, #128]	@ (8008dec <TIM_ResetCallback+0xbc>)
 8008d6c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a1f      	ldr	r2, [pc, #124]	@ (8008df0 <TIM_ResetCallback+0xc0>)
 8008d74:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a1e      	ldr	r2, [pc, #120]	@ (8008df4 <TIM_ResetCallback+0xc4>)
 8008d7c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a1d      	ldr	r2, [pc, #116]	@ (8008df8 <TIM_ResetCallback+0xc8>)
 8008d84:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8008dfc <TIM_ResetCallback+0xcc>)
 8008d8c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a1b      	ldr	r2, [pc, #108]	@ (8008e00 <TIM_ResetCallback+0xd0>)
 8008d94:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a1a      	ldr	r2, [pc, #104]	@ (8008e04 <TIM_ResetCallback+0xd4>)
 8008d9c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a19      	ldr	r2, [pc, #100]	@ (8008e08 <TIM_ResetCallback+0xd8>)
 8008da4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a18      	ldr	r2, [pc, #96]	@ (8008e0c <TIM_ResetCallback+0xdc>)
 8008dac:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a17      	ldr	r2, [pc, #92]	@ (8008e10 <TIM_ResetCallback+0xe0>)
 8008db4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a16      	ldr	r2, [pc, #88]	@ (8008e14 <TIM_ResetCallback+0xe4>)
 8008dbc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a15      	ldr	r2, [pc, #84]	@ (8008e18 <TIM_ResetCallback+0xe8>)
 8008dc4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008dc8:	bf00      	nop
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr
 8008dd4:	0800251d 	.word	0x0800251d
 8008dd8:	0800807d 	.word	0x0800807d
 8008ddc:	080080f5 	.word	0x080080f5
 8008de0:	08008109 	.word	0x08008109
 8008de4:	080080a5 	.word	0x080080a5
 8008de8:	080080b9 	.word	0x080080b9
 8008dec:	08008091 	.word	0x08008091
 8008df0:	080080cd 	.word	0x080080cd
 8008df4:	080080e1 	.word	0x080080e1
 8008df8:	0800811d 	.word	0x0800811d
 8008dfc:	08009071 	.word	0x08009071
 8008e00:	08009085 	.word	0x08009085
 8008e04:	08009099 	.word	0x08009099
 8008e08:	080090ad 	.word	0x080090ad
 8008e0c:	080090c1 	.word	0x080090c1
 8008e10:	080090d5 	.word	0x080090d5
 8008e14:	080090e9 	.word	0x080090e9
 8008e18:	080090fd 	.word	0x080090fd

08008e1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d101      	bne.n	8008e34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e30:	2302      	movs	r3, #2
 8008e32:	e074      	b.n	8008f1e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2202      	movs	r2, #2
 8008e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a34      	ldr	r2, [pc, #208]	@ (8008f2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d009      	beq.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a33      	ldr	r2, [pc, #204]	@ (8008f30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d004      	beq.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a31      	ldr	r2, [pc, #196]	@ (8008f34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d108      	bne.n	8008e84 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008e78:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	68fa      	ldr	r2, [r7, #12]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a21      	ldr	r2, [pc, #132]	@ (8008f2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d022      	beq.n	8008ef2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008eb4:	d01d      	beq.n	8008ef2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a1f      	ldr	r2, [pc, #124]	@ (8008f38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d018      	beq.n	8008ef2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8008f3c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d013      	beq.n	8008ef2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a1c      	ldr	r2, [pc, #112]	@ (8008f40 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d00e      	beq.n	8008ef2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a15      	ldr	r2, [pc, #84]	@ (8008f30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d009      	beq.n	8008ef2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a18      	ldr	r2, [pc, #96]	@ (8008f44 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d004      	beq.n	8008ef2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a11      	ldr	r2, [pc, #68]	@ (8008f34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d10c      	bne.n	8008f0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ef8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3714      	adds	r7, #20
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	40012c00 	.word	0x40012c00
 8008f30:	40013400 	.word	0x40013400
 8008f34:	40015000 	.word	0x40015000
 8008f38:	40000400 	.word	0x40000400
 8008f3c:	40000800 	.word	0x40000800
 8008f40:	40000c00 	.word	0x40000c00
 8008f44:	40014000 	.word	0x40014000

08008f48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008f52:	2300      	movs	r3, #0
 8008f54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d101      	bne.n	8008f64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008f60:	2302      	movs	r3, #2
 8008f62:	e078      	b.n	8009056 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	695b      	ldr	r3, [r3, #20]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	041b      	lsls	r3, r3, #16
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	69db      	ldr	r3, [r3, #28]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a1c      	ldr	r2, [pc, #112]	@ (8009064 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d009      	beq.n	800900a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a1b      	ldr	r2, [pc, #108]	@ (8009068 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d004      	beq.n	800900a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a19      	ldr	r2, [pc, #100]	@ (800906c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d11c      	bne.n	8009044 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009014:	051b      	lsls	r3, r3, #20
 8009016:	4313      	orrs	r3, r2
 8009018:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	6a1b      	ldr	r3, [r3, #32]
 8009024:	4313      	orrs	r3, r2
 8009026:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009032:	4313      	orrs	r3, r2
 8009034:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009040:	4313      	orrs	r3, r2
 8009042:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3714      	adds	r7, #20
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	40012c00 	.word	0x40012c00
 8009068:	40013400 	.word	0x40013400
 800906c:	40015000 	.word	0x40015000

08009070 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009104:	bf00      	nop
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	e050      	b.n	80091c4 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009128:	2b00      	cmp	r3, #0
 800912a:	d114      	bne.n	8009156 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fddb 	bl	8009cf0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009140:	2b00      	cmp	r3, #0
 8009142:	d103      	bne.n	800914c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a21      	ldr	r2, [pc, #132]	@ (80091cc <HAL_UART_Init+0xbc>)
 8009148:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2224      	movs	r2, #36	@ 0x24
 800915a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f022 0201 	bic.w	r2, r2, #1
 800916c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009172:	2b00      	cmp	r3, #0
 8009174:	d002      	beq.n	800917c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f001 f908 	bl	800a38c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fe09 	bl	8009d94 <UART_SetConfig>
 8009182:	4603      	mov	r3, r0
 8009184:	2b01      	cmp	r3, #1
 8009186:	d101      	bne.n	800918c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e01b      	b.n	80091c4 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	685a      	ldr	r2, [r3, #4]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800919a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	689a      	ldr	r2, [r3, #8]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80091aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f042 0201 	orr.w	r2, r2, #1
 80091ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f001 f987 	bl	800a4d0 <UART_CheckIdleState>
 80091c2:	4603      	mov	r3, r0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3708      	adds	r7, #8
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	08003579 	.word	0x08003579

080091d0 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b087      	sub	sp, #28
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	460b      	mov	r3, r1
 80091da:	607a      	str	r2, [r7, #4]
 80091dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d109      	bne.n	80091fc <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e09c      	b.n	8009336 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009202:	2b20      	cmp	r3, #32
 8009204:	d16c      	bne.n	80092e0 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009206:	7afb      	ldrb	r3, [r7, #11]
 8009208:	2b0c      	cmp	r3, #12
 800920a:	d85e      	bhi.n	80092ca <HAL_UART_RegisterCallback+0xfa>
 800920c:	a201      	add	r2, pc, #4	@ (adr r2, 8009214 <HAL_UART_RegisterCallback+0x44>)
 800920e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009212:	bf00      	nop
 8009214:	08009249 	.word	0x08009249
 8009218:	08009253 	.word	0x08009253
 800921c:	0800925d 	.word	0x0800925d
 8009220:	08009267 	.word	0x08009267
 8009224:	08009271 	.word	0x08009271
 8009228:	0800927b 	.word	0x0800927b
 800922c:	08009285 	.word	0x08009285
 8009230:	0800928f 	.word	0x0800928f
 8009234:	08009299 	.word	0x08009299
 8009238:	080092a3 	.word	0x080092a3
 800923c:	080092ad 	.word	0x080092ad
 8009240:	080092b7 	.word	0x080092b7
 8009244:	080092c1 	.word	0x080092c1
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009250:	e070      	b.n	8009334 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800925a:	e06b      	b.n	8009334 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009264:	e066      	b.n	8009334 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800926e:	e061      	b.n	8009334 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009278:	e05c      	b.n	8009334 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009282:	e057      	b.n	8009334 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800928c:	e052      	b.n	8009334 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009296:	e04d      	b.n	8009334 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80092a0:	e048      	b.n	8009334 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80092aa:	e043      	b.n	8009334 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80092b4:	e03e      	b.n	8009334 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80092be:	e039      	b.n	8009334 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80092c8:	e034      	b.n	8009334 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	75fb      	strb	r3, [r7, #23]
        break;
 80092de:	e029      	b.n	8009334 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d11a      	bne.n	8009320 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80092ea:	7afb      	ldrb	r3, [r7, #11]
 80092ec:	2b0b      	cmp	r3, #11
 80092ee:	d002      	beq.n	80092f6 <HAL_UART_RegisterCallback+0x126>
 80092f0:	2b0c      	cmp	r3, #12
 80092f2:	d005      	beq.n	8009300 <HAL_UART_RegisterCallback+0x130>
 80092f4:	e009      	b.n	800930a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80092fe:	e019      	b.n	8009334 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009308:	e014      	b.n	8009334 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009310:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	75fb      	strb	r3, [r7, #23]
        break;
 800931e:	e009      	b.n	8009334 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009326:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009334:	7dfb      	ldrb	r3, [r7, #23]
}
 8009336:	4618      	mov	r0, r3
 8009338:	371c      	adds	r7, #28
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop

08009344 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b08a      	sub	sp, #40	@ 0x28
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	4613      	mov	r3, r2
 8009350:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009358:	2b20      	cmp	r3, #32
 800935a:	d167      	bne.n	800942c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d002      	beq.n	8009368 <HAL_UART_Transmit_DMA+0x24>
 8009362:	88fb      	ldrh	r3, [r7, #6]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d101      	bne.n	800936c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	e060      	b.n	800942e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	88fa      	ldrh	r2, [r7, #6]
 8009376:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	88fa      	ldrh	r2, [r7, #6]
 800937e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2221      	movs	r2, #33	@ 0x21
 800938e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009396:	2b00      	cmp	r3, #0
 8009398:	d028      	beq.n	80093ec <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800939e:	4a26      	ldr	r2, [pc, #152]	@ (8009438 <HAL_UART_Transmit_DMA+0xf4>)
 80093a0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093a6:	4a25      	ldr	r2, [pc, #148]	@ (800943c <HAL_UART_Transmit_DMA+0xf8>)
 80093a8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093ae:	4a24      	ldr	r2, [pc, #144]	@ (8009440 <HAL_UART_Transmit_DMA+0xfc>)
 80093b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093b6:	2200      	movs	r2, #0
 80093b8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093c2:	4619      	mov	r1, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	3328      	adds	r3, #40	@ 0x28
 80093ca:	461a      	mov	r2, r3
 80093cc:	88fb      	ldrh	r3, [r7, #6]
 80093ce:	f7fc f859 	bl	8005484 <HAL_DMA_Start_IT>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d009      	beq.n	80093ec <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2210      	movs	r2, #16
 80093dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2220      	movs	r2, #32
 80093e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	e020      	b.n	800942e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2240      	movs	r2, #64	@ 0x40
 80093f2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	3308      	adds	r3, #8
 80093fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	e853 3f00 	ldrex	r3, [r3]
 8009402:	613b      	str	r3, [r7, #16]
   return(result);
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800940a:	627b      	str	r3, [r7, #36]	@ 0x24
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	3308      	adds	r3, #8
 8009412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009414:	623a      	str	r2, [r7, #32]
 8009416:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009418:	69f9      	ldr	r1, [r7, #28]
 800941a:	6a3a      	ldr	r2, [r7, #32]
 800941c:	e841 2300 	strex	r3, r2, [r1]
 8009420:	61bb      	str	r3, [r7, #24]
   return(result);
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1e5      	bne.n	80093f4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	e000      	b.n	800942e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800942c:	2302      	movs	r3, #2
  }
}
 800942e:	4618      	mov	r0, r3
 8009430:	3728      	adds	r7, #40	@ 0x28
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	0800a99b 	.word	0x0800a99b
 800943c:	0800aa39 	.word	0x0800aa39
 8009440:	0800abd3 	.word	0x0800abd3

08009444 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b08a      	sub	sp, #40	@ 0x28
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	4613      	mov	r3, r2
 8009450:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009458:	2b20      	cmp	r3, #32
 800945a:	d137      	bne.n	80094cc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d002      	beq.n	8009468 <HAL_UART_Receive_DMA+0x24>
 8009462:	88fb      	ldrh	r3, [r7, #6]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d101      	bne.n	800946c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	e030      	b.n	80094ce <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2200      	movs	r2, #0
 8009470:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a18      	ldr	r2, [pc, #96]	@ (80094d8 <HAL_UART_Receive_DMA+0x94>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d01f      	beq.n	80094bc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009486:	2b00      	cmp	r3, #0
 8009488:	d018      	beq.n	80094bc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	e853 3f00 	ldrex	r3, [r3]
 8009496:	613b      	str	r3, [r7, #16]
   return(result);
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800949e:	627b      	str	r3, [r7, #36]	@ 0x24
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	461a      	mov	r2, r3
 80094a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a8:	623b      	str	r3, [r7, #32]
 80094aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ac:	69f9      	ldr	r1, [r7, #28]
 80094ae:	6a3a      	ldr	r2, [r7, #32]
 80094b0:	e841 2300 	strex	r3, r2, [r1]
 80094b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1e6      	bne.n	800948a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80094bc:	88fb      	ldrh	r3, [r7, #6]
 80094be:	461a      	mov	r2, r3
 80094c0:	68b9      	ldr	r1, [r7, #8]
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f001 f91c 	bl	800a700 <UART_Start_Receive_DMA>
 80094c8:	4603      	mov	r3, r0
 80094ca:	e000      	b.n	80094ce <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80094cc:	2302      	movs	r3, #2
  }
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3728      	adds	r7, #40	@ 0x28
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	40008000 	.word	0x40008000

080094dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b0ba      	sub	sp, #232	@ 0xe8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	69db      	ldr	r3, [r3, #28]
 80094ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009502:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009506:	f640 030f 	movw	r3, #2063	@ 0x80f
 800950a:	4013      	ands	r3, r2
 800950c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009510:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009514:	2b00      	cmp	r3, #0
 8009516:	d11b      	bne.n	8009550 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800951c:	f003 0320 	and.w	r3, r3, #32
 8009520:	2b00      	cmp	r3, #0
 8009522:	d015      	beq.n	8009550 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009528:	f003 0320 	and.w	r3, r3, #32
 800952c:	2b00      	cmp	r3, #0
 800952e:	d105      	bne.n	800953c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009538:	2b00      	cmp	r3, #0
 800953a:	d009      	beq.n	8009550 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009540:	2b00      	cmp	r3, #0
 8009542:	f000 8312 	beq.w	8009b6a <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	4798      	blx	r3
      }
      return;
 800954e:	e30c      	b.n	8009b6a <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009550:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009554:	2b00      	cmp	r3, #0
 8009556:	f000 8129 	beq.w	80097ac <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800955a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800955e:	4b90      	ldr	r3, [pc, #576]	@ (80097a0 <HAL_UART_IRQHandler+0x2c4>)
 8009560:	4013      	ands	r3, r2
 8009562:	2b00      	cmp	r3, #0
 8009564:	d106      	bne.n	8009574 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009566:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800956a:	4b8e      	ldr	r3, [pc, #568]	@ (80097a4 <HAL_UART_IRQHandler+0x2c8>)
 800956c:	4013      	ands	r3, r2
 800956e:	2b00      	cmp	r3, #0
 8009570:	f000 811c 	beq.w	80097ac <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	2b00      	cmp	r3, #0
 800957e:	d011      	beq.n	80095a4 <HAL_UART_IRQHandler+0xc8>
 8009580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00b      	beq.n	80095a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2201      	movs	r2, #1
 8009592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800959a:	f043 0201 	orr.w	r2, r3, #1
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095a8:	f003 0302 	and.w	r3, r3, #2
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d011      	beq.n	80095d4 <HAL_UART_IRQHandler+0xf8>
 80095b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095b4:	f003 0301 	and.w	r3, r3, #1
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00b      	beq.n	80095d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2202      	movs	r2, #2
 80095c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ca:	f043 0204 	orr.w	r2, r3, #4
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095d8:	f003 0304 	and.w	r3, r3, #4
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d011      	beq.n	8009604 <HAL_UART_IRQHandler+0x128>
 80095e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095e4:	f003 0301 	and.w	r3, r3, #1
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00b      	beq.n	8009604 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2204      	movs	r2, #4
 80095f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095fa:	f043 0202 	orr.w	r2, r3, #2
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009608:	f003 0308 	and.w	r3, r3, #8
 800960c:	2b00      	cmp	r3, #0
 800960e:	d017      	beq.n	8009640 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009614:	f003 0320 	and.w	r3, r3, #32
 8009618:	2b00      	cmp	r3, #0
 800961a:	d105      	bne.n	8009628 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800961c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009620:	4b5f      	ldr	r3, [pc, #380]	@ (80097a0 <HAL_UART_IRQHandler+0x2c4>)
 8009622:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00b      	beq.n	8009640 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2208      	movs	r2, #8
 800962e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009636:	f043 0208 	orr.w	r2, r3, #8
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009644:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009648:	2b00      	cmp	r3, #0
 800964a:	d012      	beq.n	8009672 <HAL_UART_IRQHandler+0x196>
 800964c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009650:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00c      	beq.n	8009672 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009660:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009668:	f043 0220 	orr.w	r2, r3, #32
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009678:	2b00      	cmp	r3, #0
 800967a:	f000 8278 	beq.w	8009b6e <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800967e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009682:	f003 0320 	and.w	r3, r3, #32
 8009686:	2b00      	cmp	r3, #0
 8009688:	d013      	beq.n	80096b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800968a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800968e:	f003 0320 	and.w	r3, r3, #32
 8009692:	2b00      	cmp	r3, #0
 8009694:	d105      	bne.n	80096a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800969a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d007      	beq.n	80096b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d003      	beq.n	80096b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096c6:	2b40      	cmp	r3, #64	@ 0x40
 80096c8:	d005      	beq.n	80096d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80096ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80096ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d058      	beq.n	8009788 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f001 f8f9 	bl	800a8ce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096e6:	2b40      	cmp	r3, #64	@ 0x40
 80096e8:	d148      	bne.n	800977c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	3308      	adds	r3, #8
 80096f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80096f8:	e853 3f00 	ldrex	r3, [r3]
 80096fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009700:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009704:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009708:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	3308      	adds	r3, #8
 8009712:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009716:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800971a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009722:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009726:	e841 2300 	strex	r3, r2, [r1]
 800972a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800972e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1d9      	bne.n	80096ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800973c:	2b00      	cmp	r3, #0
 800973e:	d017      	beq.n	8009770 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009746:	4a18      	ldr	r2, [pc, #96]	@ (80097a8 <HAL_UART_IRQHandler+0x2cc>)
 8009748:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009750:	4618      	mov	r0, r3
 8009752:	f7fb ff6b 	bl	800562c <HAL_DMA_Abort_IT>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d01f      	beq.n	800979c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800976a:	4610      	mov	r0, r2
 800976c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800976e:	e015      	b.n	800979c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800977a:	e00f      	b.n	800979c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009786:	e009      	b.n	800979c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800979a:	e1e8      	b.n	8009b6e <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800979c:	bf00      	nop
    return;
 800979e:	e1e6      	b.n	8009b6e <HAL_UART_IRQHandler+0x692>
 80097a0:	10000001 	.word	0x10000001
 80097a4:	04000120 	.word	0x04000120
 80097a8:	0800ac57 	.word	0x0800ac57

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	f040 8176 	bne.w	8009aa2 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80097b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097ba:	f003 0310 	and.w	r3, r3, #16
 80097be:	2b00      	cmp	r3, #0
 80097c0:	f000 816f 	beq.w	8009aa2 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80097c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097c8:	f003 0310 	and.w	r3, r3, #16
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f000 8168 	beq.w	8009aa2 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2210      	movs	r2, #16
 80097d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097e4:	2b40      	cmp	r3, #64	@ 0x40
 80097e6:	f040 80dc 	bne.w	80099a2 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80097f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f000 80b1 	beq.w	8009964 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009808:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800980c:	429a      	cmp	r2, r3
 800980e:	f080 80a9 	bcs.w	8009964 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009818:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f003 0320 	and.w	r3, r3, #32
 800982a:	2b00      	cmp	r3, #0
 800982c:	f040 8087 	bne.w	800993e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009838:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800983c:	e853 3f00 	ldrex	r3, [r3]
 8009840:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009844:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800984c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	461a      	mov	r2, r3
 8009856:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800985a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800985e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009862:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009866:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800986a:	e841 2300 	strex	r3, r2, [r1]
 800986e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009872:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1da      	bne.n	8009830 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3308      	adds	r3, #8
 8009880:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009882:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009884:	e853 3f00 	ldrex	r3, [r3]
 8009888:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800988a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800988c:	f023 0301 	bic.w	r3, r3, #1
 8009890:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	3308      	adds	r3, #8
 800989a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800989e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80098a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80098a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80098aa:	e841 2300 	strex	r3, r2, [r1]
 80098ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80098b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1e1      	bne.n	800987a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	3308      	adds	r3, #8
 80098bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098c0:	e853 3f00 	ldrex	r3, [r3]
 80098c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80098c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	3308      	adds	r3, #8
 80098d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80098da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80098dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80098e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80098e2:	e841 2300 	strex	r3, r2, [r1]
 80098e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80098e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1e3      	bne.n	80098b6 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2220      	movs	r2, #32
 80098f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009904:	e853 3f00 	ldrex	r3, [r3]
 8009908:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800990a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800990c:	f023 0310 	bic.w	r3, r3, #16
 8009910:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	461a      	mov	r2, r3
 800991a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800991e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009920:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009922:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009924:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009926:	e841 2300 	strex	r3, r2, [r1]
 800992a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800992c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1e4      	bne.n	80098fc <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009938:	4618      	mov	r0, r3
 800993a:	f7fb fe1e 	bl	800557a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2202      	movs	r2, #2
 8009942:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009956:	b292      	uxth	r2, r2
 8009958:	1a8a      	subs	r2, r1, r2
 800995a:	b292      	uxth	r2, r2
 800995c:	4611      	mov	r1, r2
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009962:	e106      	b.n	8009b72 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800996a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800996e:	429a      	cmp	r2, r3
 8009970:	f040 80ff 	bne.w	8009b72 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f003 0320 	and.w	r3, r3, #32
 8009982:	2b20      	cmp	r3, #32
 8009984:	f040 80f5 	bne.w	8009b72 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2202      	movs	r2, #2
 800998c:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800999a:	4611      	mov	r1, r2
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	4798      	blx	r3
      return;
 80099a0:	e0e7      	b.n	8009b72 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099bc:	b29b      	uxth	r3, r3
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f000 80d9 	beq.w	8009b76 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 80099c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f000 80d4 	beq.w	8009b76 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d6:	e853 3f00 	ldrex	r3, [r3]
 80099da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80099dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	461a      	mov	r2, r3
 80099ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80099f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80099f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80099f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099f8:	e841 2300 	strex	r3, r2, [r1]
 80099fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80099fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1e4      	bne.n	80099ce <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	3308      	adds	r3, #8
 8009a0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a0e:	e853 3f00 	ldrex	r3, [r3]
 8009a12:	623b      	str	r3, [r7, #32]
   return(result);
 8009a14:	6a3b      	ldr	r3, [r7, #32]
 8009a16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a1a:	f023 0301 	bic.w	r3, r3, #1
 8009a1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	3308      	adds	r3, #8
 8009a28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009a2c:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a34:	e841 2300 	strex	r3, r2, [r1]
 8009a38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1e1      	bne.n	8009a04 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2220      	movs	r2, #32
 8009a44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	e853 3f00 	ldrex	r3, [r3]
 8009a60:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f023 0310 	bic.w	r3, r3, #16
 8009a68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	461a      	mov	r2, r3
 8009a72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009a76:	61fb      	str	r3, [r7, #28]
 8009a78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7a:	69b9      	ldr	r1, [r7, #24]
 8009a7c:	69fa      	ldr	r2, [r7, #28]
 8009a7e:	e841 2300 	strex	r3, r2, [r1]
 8009a82:	617b      	str	r3, [r7, #20]
   return(result);
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1e4      	bne.n	8009a54 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2202      	movs	r2, #2
 8009a8e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009a96:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009a9a:	4611      	mov	r1, r2
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009aa0:	e069      	b.n	8009b76 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009aa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d010      	beq.n	8009ad0 <HAL_UART_IRQHandler+0x5f4>
 8009aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d00a      	beq.n	8009ad0 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009ac2:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ace:	e055      	b.n	8009b7c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d014      	beq.n	8009b06 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d105      	bne.n	8009af4 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009aec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d008      	beq.n	8009b06 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d03e      	beq.n	8009b7a <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	4798      	blx	r3
    }
    return;
 8009b04:	e039      	b.n	8009b7a <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d009      	beq.n	8009b26 <HAL_UART_IRQHandler+0x64a>
 8009b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d003      	beq.n	8009b26 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f001 f8ad 	bl	800ac7e <UART_EndTransmit_IT>
    return;
 8009b24:	e02a      	b.n	8009b7c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00b      	beq.n	8009b4a <HAL_UART_IRQHandler+0x66e>
 8009b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b36:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d005      	beq.n	8009b4a <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b48:	e018      	b.n	8009b7c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d012      	beq.n	8009b7c <HAL_UART_IRQHandler+0x6a0>
 8009b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	da0e      	bge.n	8009b7c <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b68:	e008      	b.n	8009b7c <HAL_UART_IRQHandler+0x6a0>
      return;
 8009b6a:	bf00      	nop
 8009b6c:	e006      	b.n	8009b7c <HAL_UART_IRQHandler+0x6a0>
    return;
 8009b6e:	bf00      	nop
 8009b70:	e004      	b.n	8009b7c <HAL_UART_IRQHandler+0x6a0>
      return;
 8009b72:	bf00      	nop
 8009b74:	e002      	b.n	8009b7c <HAL_UART_IRQHandler+0x6a0>
      return;
 8009b76:	bf00      	nop
 8009b78:	e000      	b.n	8009b7c <HAL_UART_IRQHandler+0x6a0>
    return;
 8009b7a:	bf00      	nop
  }
}
 8009b7c:	37e8      	adds	r7, #232	@ 0xe8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop

08009b84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009b8c:	bf00      	nop
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009bc8:	bf00      	nop
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	460b      	mov	r3, r1
 8009c1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c1c:	bf00      	nop
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a09      	ldr	r2, [pc, #36]	@ (8009c5c <HAL_UART_ReceiverTimeout_Config+0x34>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d009      	beq.n	8009c50 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	695b      	ldr	r3, [r3, #20]
 8009c42:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	683a      	ldr	r2, [r7, #0]
 8009c4c:	430a      	orrs	r2, r1
 8009c4e:	615a      	str	r2, [r3, #20]
  }
}
 8009c50:	bf00      	nop
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr
 8009c5c:	40008000 	.word	0x40008000

08009c60 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a18      	ldr	r2, [pc, #96]	@ (8009cd0 <HAL_UART_EnableReceiverTimeout+0x70>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d027      	beq.n	8009cc2 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c78:	2b20      	cmp	r3, #32
 8009c7a:	d120      	bne.n	8009cbe <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d101      	bne.n	8009c8a <HAL_UART_EnableReceiverTimeout+0x2a>
 8009c86:	2302      	movs	r3, #2
 8009c88:	e01c      	b.n	8009cc4 <HAL_UART_EnableReceiverTimeout+0x64>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2224      	movs	r2, #36	@ 0x24
 8009c96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	685a      	ldr	r2, [r3, #4]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009ca8:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2220      	movs	r2, #32
 8009cae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	e002      	b.n	8009cc4 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8009cbe:	2302      	movs	r3, #2
 8009cc0:	e000      	b.n	8009cc4 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
  }
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr
 8009cd0:	40008000 	.word	0x40008000

08009cd4 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	370c      	adds	r7, #12
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
	...

08009cf0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8009d64 <UART_InitCallbacksToDefault+0x74>)
 8009cfc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a19      	ldr	r2, [pc, #100]	@ (8009d68 <UART_InitCallbacksToDefault+0x78>)
 8009d04:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a18      	ldr	r2, [pc, #96]	@ (8009d6c <UART_InitCallbacksToDefault+0x7c>)
 8009d0c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a17      	ldr	r2, [pc, #92]	@ (8009d70 <UART_InitCallbacksToDefault+0x80>)
 8009d14:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a16      	ldr	r2, [pc, #88]	@ (8009d74 <UART_InitCallbacksToDefault+0x84>)
 8009d1c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a15      	ldr	r2, [pc, #84]	@ (8009d78 <UART_InitCallbacksToDefault+0x88>)
 8009d24:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a14      	ldr	r2, [pc, #80]	@ (8009d7c <UART_InitCallbacksToDefault+0x8c>)
 8009d2c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a13      	ldr	r2, [pc, #76]	@ (8009d80 <UART_InitCallbacksToDefault+0x90>)
 8009d34:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a12      	ldr	r2, [pc, #72]	@ (8009d84 <UART_InitCallbacksToDefault+0x94>)
 8009d3c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a11      	ldr	r2, [pc, #68]	@ (8009d88 <UART_InitCallbacksToDefault+0x98>)
 8009d44:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a10      	ldr	r2, [pc, #64]	@ (8009d8c <UART_InitCallbacksToDefault+0x9c>)
 8009d4c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a0f      	ldr	r2, [pc, #60]	@ (8009d90 <UART_InitCallbacksToDefault+0xa0>)
 8009d54:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009d58:	bf00      	nop
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr
 8009d64:	08009b99 	.word	0x08009b99
 8009d68:	08009b85 	.word	0x08009b85
 8009d6c:	08009bad 	.word	0x08009bad
 8009d70:	08002509 	.word	0x08002509
 8009d74:	08009bc1 	.word	0x08009bc1
 8009d78:	08009bd5 	.word	0x08009bd5
 8009d7c:	08009be9 	.word	0x08009be9
 8009d80:	08009bfd 	.word	0x08009bfd
 8009d84:	0800acd9 	.word	0x0800acd9
 8009d88:	0800aced 	.word	0x0800aced
 8009d8c:	0800ad01 	.word	0x0800ad01
 8009d90:	08009c11 	.word	0x08009c11

08009d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d98:	b08c      	sub	sp, #48	@ 0x30
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	689a      	ldr	r2, [r3, #8]
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	691b      	ldr	r3, [r3, #16]
 8009dac:	431a      	orrs	r2, r3
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	695b      	ldr	r3, [r3, #20]
 8009db2:	431a      	orrs	r2, r3
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	69db      	ldr	r3, [r3, #28]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	4baa      	ldr	r3, [pc, #680]	@ (800a06c <UART_SetConfig+0x2d8>)
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	697a      	ldr	r2, [r7, #20]
 8009dc8:	6812      	ldr	r2, [r2, #0]
 8009dca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009dcc:	430b      	orrs	r3, r1
 8009dce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	68da      	ldr	r2, [r3, #12]
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	430a      	orrs	r2, r1
 8009de4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a9f      	ldr	r2, [pc, #636]	@ (800a070 <UART_SetConfig+0x2dc>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d004      	beq.n	8009e00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	6a1b      	ldr	r3, [r3, #32]
 8009dfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009e0a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009e0e:	697a      	ldr	r2, [r7, #20]
 8009e10:	6812      	ldr	r2, [r2, #0]
 8009e12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e14:	430b      	orrs	r3, r1
 8009e16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e1e:	f023 010f 	bic.w	r1, r3, #15
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	430a      	orrs	r2, r1
 8009e2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a90      	ldr	r2, [pc, #576]	@ (800a074 <UART_SetConfig+0x2e0>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d125      	bne.n	8009e84 <UART_SetConfig+0xf0>
 8009e38:	4b8f      	ldr	r3, [pc, #572]	@ (800a078 <UART_SetConfig+0x2e4>)
 8009e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e3e:	f003 0303 	and.w	r3, r3, #3
 8009e42:	2b03      	cmp	r3, #3
 8009e44:	d81a      	bhi.n	8009e7c <UART_SetConfig+0xe8>
 8009e46:	a201      	add	r2, pc, #4	@ (adr r2, 8009e4c <UART_SetConfig+0xb8>)
 8009e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4c:	08009e5d 	.word	0x08009e5d
 8009e50:	08009e6d 	.word	0x08009e6d
 8009e54:	08009e65 	.word	0x08009e65
 8009e58:	08009e75 	.word	0x08009e75
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e62:	e116      	b.n	800a092 <UART_SetConfig+0x2fe>
 8009e64:	2302      	movs	r3, #2
 8009e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e6a:	e112      	b.n	800a092 <UART_SetConfig+0x2fe>
 8009e6c:	2304      	movs	r3, #4
 8009e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e72:	e10e      	b.n	800a092 <UART_SetConfig+0x2fe>
 8009e74:	2308      	movs	r3, #8
 8009e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e7a:	e10a      	b.n	800a092 <UART_SetConfig+0x2fe>
 8009e7c:	2310      	movs	r3, #16
 8009e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e82:	e106      	b.n	800a092 <UART_SetConfig+0x2fe>
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a7c      	ldr	r2, [pc, #496]	@ (800a07c <UART_SetConfig+0x2e8>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d138      	bne.n	8009f00 <UART_SetConfig+0x16c>
 8009e8e:	4b7a      	ldr	r3, [pc, #488]	@ (800a078 <UART_SetConfig+0x2e4>)
 8009e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e94:	f003 030c 	and.w	r3, r3, #12
 8009e98:	2b0c      	cmp	r3, #12
 8009e9a:	d82d      	bhi.n	8009ef8 <UART_SetConfig+0x164>
 8009e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8009ea4 <UART_SetConfig+0x110>)
 8009e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea2:	bf00      	nop
 8009ea4:	08009ed9 	.word	0x08009ed9
 8009ea8:	08009ef9 	.word	0x08009ef9
 8009eac:	08009ef9 	.word	0x08009ef9
 8009eb0:	08009ef9 	.word	0x08009ef9
 8009eb4:	08009ee9 	.word	0x08009ee9
 8009eb8:	08009ef9 	.word	0x08009ef9
 8009ebc:	08009ef9 	.word	0x08009ef9
 8009ec0:	08009ef9 	.word	0x08009ef9
 8009ec4:	08009ee1 	.word	0x08009ee1
 8009ec8:	08009ef9 	.word	0x08009ef9
 8009ecc:	08009ef9 	.word	0x08009ef9
 8009ed0:	08009ef9 	.word	0x08009ef9
 8009ed4:	08009ef1 	.word	0x08009ef1
 8009ed8:	2300      	movs	r3, #0
 8009eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ede:	e0d8      	b.n	800a092 <UART_SetConfig+0x2fe>
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ee6:	e0d4      	b.n	800a092 <UART_SetConfig+0x2fe>
 8009ee8:	2304      	movs	r3, #4
 8009eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eee:	e0d0      	b.n	800a092 <UART_SetConfig+0x2fe>
 8009ef0:	2308      	movs	r3, #8
 8009ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ef6:	e0cc      	b.n	800a092 <UART_SetConfig+0x2fe>
 8009ef8:	2310      	movs	r3, #16
 8009efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009efe:	e0c8      	b.n	800a092 <UART_SetConfig+0x2fe>
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a5e      	ldr	r2, [pc, #376]	@ (800a080 <UART_SetConfig+0x2ec>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d125      	bne.n	8009f56 <UART_SetConfig+0x1c2>
 8009f0a:	4b5b      	ldr	r3, [pc, #364]	@ (800a078 <UART_SetConfig+0x2e4>)
 8009f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f10:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009f14:	2b30      	cmp	r3, #48	@ 0x30
 8009f16:	d016      	beq.n	8009f46 <UART_SetConfig+0x1b2>
 8009f18:	2b30      	cmp	r3, #48	@ 0x30
 8009f1a:	d818      	bhi.n	8009f4e <UART_SetConfig+0x1ba>
 8009f1c:	2b20      	cmp	r3, #32
 8009f1e:	d00a      	beq.n	8009f36 <UART_SetConfig+0x1a2>
 8009f20:	2b20      	cmp	r3, #32
 8009f22:	d814      	bhi.n	8009f4e <UART_SetConfig+0x1ba>
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d002      	beq.n	8009f2e <UART_SetConfig+0x19a>
 8009f28:	2b10      	cmp	r3, #16
 8009f2a:	d008      	beq.n	8009f3e <UART_SetConfig+0x1aa>
 8009f2c:	e00f      	b.n	8009f4e <UART_SetConfig+0x1ba>
 8009f2e:	2300      	movs	r3, #0
 8009f30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f34:	e0ad      	b.n	800a092 <UART_SetConfig+0x2fe>
 8009f36:	2302      	movs	r3, #2
 8009f38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f3c:	e0a9      	b.n	800a092 <UART_SetConfig+0x2fe>
 8009f3e:	2304      	movs	r3, #4
 8009f40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f44:	e0a5      	b.n	800a092 <UART_SetConfig+0x2fe>
 8009f46:	2308      	movs	r3, #8
 8009f48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f4c:	e0a1      	b.n	800a092 <UART_SetConfig+0x2fe>
 8009f4e:	2310      	movs	r3, #16
 8009f50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f54:	e09d      	b.n	800a092 <UART_SetConfig+0x2fe>
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a4a      	ldr	r2, [pc, #296]	@ (800a084 <UART_SetConfig+0x2f0>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d125      	bne.n	8009fac <UART_SetConfig+0x218>
 8009f60:	4b45      	ldr	r3, [pc, #276]	@ (800a078 <UART_SetConfig+0x2e4>)
 8009f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f66:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009f6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f6c:	d016      	beq.n	8009f9c <UART_SetConfig+0x208>
 8009f6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f70:	d818      	bhi.n	8009fa4 <UART_SetConfig+0x210>
 8009f72:	2b80      	cmp	r3, #128	@ 0x80
 8009f74:	d00a      	beq.n	8009f8c <UART_SetConfig+0x1f8>
 8009f76:	2b80      	cmp	r3, #128	@ 0x80
 8009f78:	d814      	bhi.n	8009fa4 <UART_SetConfig+0x210>
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d002      	beq.n	8009f84 <UART_SetConfig+0x1f0>
 8009f7e:	2b40      	cmp	r3, #64	@ 0x40
 8009f80:	d008      	beq.n	8009f94 <UART_SetConfig+0x200>
 8009f82:	e00f      	b.n	8009fa4 <UART_SetConfig+0x210>
 8009f84:	2300      	movs	r3, #0
 8009f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f8a:	e082      	b.n	800a092 <UART_SetConfig+0x2fe>
 8009f8c:	2302      	movs	r3, #2
 8009f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f92:	e07e      	b.n	800a092 <UART_SetConfig+0x2fe>
 8009f94:	2304      	movs	r3, #4
 8009f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f9a:	e07a      	b.n	800a092 <UART_SetConfig+0x2fe>
 8009f9c:	2308      	movs	r3, #8
 8009f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fa2:	e076      	b.n	800a092 <UART_SetConfig+0x2fe>
 8009fa4:	2310      	movs	r3, #16
 8009fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009faa:	e072      	b.n	800a092 <UART_SetConfig+0x2fe>
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a35      	ldr	r2, [pc, #212]	@ (800a088 <UART_SetConfig+0x2f4>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d12a      	bne.n	800a00c <UART_SetConfig+0x278>
 8009fb6:	4b30      	ldr	r3, [pc, #192]	@ (800a078 <UART_SetConfig+0x2e4>)
 8009fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009fc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fc4:	d01a      	beq.n	8009ffc <UART_SetConfig+0x268>
 8009fc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fca:	d81b      	bhi.n	800a004 <UART_SetConfig+0x270>
 8009fcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fd0:	d00c      	beq.n	8009fec <UART_SetConfig+0x258>
 8009fd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fd6:	d815      	bhi.n	800a004 <UART_SetConfig+0x270>
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d003      	beq.n	8009fe4 <UART_SetConfig+0x250>
 8009fdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fe0:	d008      	beq.n	8009ff4 <UART_SetConfig+0x260>
 8009fe2:	e00f      	b.n	800a004 <UART_SetConfig+0x270>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fea:	e052      	b.n	800a092 <UART_SetConfig+0x2fe>
 8009fec:	2302      	movs	r3, #2
 8009fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ff2:	e04e      	b.n	800a092 <UART_SetConfig+0x2fe>
 8009ff4:	2304      	movs	r3, #4
 8009ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ffa:	e04a      	b.n	800a092 <UART_SetConfig+0x2fe>
 8009ffc:	2308      	movs	r3, #8
 8009ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a002:	e046      	b.n	800a092 <UART_SetConfig+0x2fe>
 800a004:	2310      	movs	r3, #16
 800a006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a00a:	e042      	b.n	800a092 <UART_SetConfig+0x2fe>
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a17      	ldr	r2, [pc, #92]	@ (800a070 <UART_SetConfig+0x2dc>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d13a      	bne.n	800a08c <UART_SetConfig+0x2f8>
 800a016:	4b18      	ldr	r3, [pc, #96]	@ (800a078 <UART_SetConfig+0x2e4>)
 800a018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a01c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a020:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a024:	d01a      	beq.n	800a05c <UART_SetConfig+0x2c8>
 800a026:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a02a:	d81b      	bhi.n	800a064 <UART_SetConfig+0x2d0>
 800a02c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a030:	d00c      	beq.n	800a04c <UART_SetConfig+0x2b8>
 800a032:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a036:	d815      	bhi.n	800a064 <UART_SetConfig+0x2d0>
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d003      	beq.n	800a044 <UART_SetConfig+0x2b0>
 800a03c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a040:	d008      	beq.n	800a054 <UART_SetConfig+0x2c0>
 800a042:	e00f      	b.n	800a064 <UART_SetConfig+0x2d0>
 800a044:	2300      	movs	r3, #0
 800a046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a04a:	e022      	b.n	800a092 <UART_SetConfig+0x2fe>
 800a04c:	2302      	movs	r3, #2
 800a04e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a052:	e01e      	b.n	800a092 <UART_SetConfig+0x2fe>
 800a054:	2304      	movs	r3, #4
 800a056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a05a:	e01a      	b.n	800a092 <UART_SetConfig+0x2fe>
 800a05c:	2308      	movs	r3, #8
 800a05e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a062:	e016      	b.n	800a092 <UART_SetConfig+0x2fe>
 800a064:	2310      	movs	r3, #16
 800a066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a06a:	e012      	b.n	800a092 <UART_SetConfig+0x2fe>
 800a06c:	cfff69f3 	.word	0xcfff69f3
 800a070:	40008000 	.word	0x40008000
 800a074:	40013800 	.word	0x40013800
 800a078:	40021000 	.word	0x40021000
 800a07c:	40004400 	.word	0x40004400
 800a080:	40004800 	.word	0x40004800
 800a084:	40004c00 	.word	0x40004c00
 800a088:	40005000 	.word	0x40005000
 800a08c:	2310      	movs	r3, #16
 800a08e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4aae      	ldr	r2, [pc, #696]	@ (800a350 <UART_SetConfig+0x5bc>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	f040 8097 	bne.w	800a1cc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a09e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a0a2:	2b08      	cmp	r3, #8
 800a0a4:	d823      	bhi.n	800a0ee <UART_SetConfig+0x35a>
 800a0a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a0ac <UART_SetConfig+0x318>)
 800a0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ac:	0800a0d1 	.word	0x0800a0d1
 800a0b0:	0800a0ef 	.word	0x0800a0ef
 800a0b4:	0800a0d9 	.word	0x0800a0d9
 800a0b8:	0800a0ef 	.word	0x0800a0ef
 800a0bc:	0800a0df 	.word	0x0800a0df
 800a0c0:	0800a0ef 	.word	0x0800a0ef
 800a0c4:	0800a0ef 	.word	0x0800a0ef
 800a0c8:	0800a0ef 	.word	0x0800a0ef
 800a0cc:	0800a0e7 	.word	0x0800a0e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0d0:	f7fc fb84 	bl	80067dc <HAL_RCC_GetPCLK1Freq>
 800a0d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0d6:	e010      	b.n	800a0fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0d8:	4b9e      	ldr	r3, [pc, #632]	@ (800a354 <UART_SetConfig+0x5c0>)
 800a0da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a0dc:	e00d      	b.n	800a0fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0de:	f7fc fb0f 	bl	8006700 <HAL_RCC_GetSysClockFreq>
 800a0e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0e4:	e009      	b.n	800a0fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a0ec:	e005      	b.n	800a0fa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a0f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f000 8130 	beq.w	800a362 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a106:	4a94      	ldr	r2, [pc, #592]	@ (800a358 <UART_SetConfig+0x5c4>)
 800a108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a10c:	461a      	mov	r2, r3
 800a10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a110:	fbb3 f3f2 	udiv	r3, r3, r2
 800a114:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	685a      	ldr	r2, [r3, #4]
 800a11a:	4613      	mov	r3, r2
 800a11c:	005b      	lsls	r3, r3, #1
 800a11e:	4413      	add	r3, r2
 800a120:	69ba      	ldr	r2, [r7, #24]
 800a122:	429a      	cmp	r2, r3
 800a124:	d305      	bcc.n	800a132 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a12c:	69ba      	ldr	r2, [r7, #24]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d903      	bls.n	800a13a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a138:	e113      	b.n	800a362 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a13c:	2200      	movs	r2, #0
 800a13e:	60bb      	str	r3, [r7, #8]
 800a140:	60fa      	str	r2, [r7, #12]
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a146:	4a84      	ldr	r2, [pc, #528]	@ (800a358 <UART_SetConfig+0x5c4>)
 800a148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	2200      	movs	r2, #0
 800a150:	603b      	str	r3, [r7, #0]
 800a152:	607a      	str	r2, [r7, #4]
 800a154:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a158:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a15c:	f7f6 fc4a 	bl	80009f4 <__aeabi_uldivmod>
 800a160:	4602      	mov	r2, r0
 800a162:	460b      	mov	r3, r1
 800a164:	4610      	mov	r0, r2
 800a166:	4619      	mov	r1, r3
 800a168:	f04f 0200 	mov.w	r2, #0
 800a16c:	f04f 0300 	mov.w	r3, #0
 800a170:	020b      	lsls	r3, r1, #8
 800a172:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a176:	0202      	lsls	r2, r0, #8
 800a178:	6979      	ldr	r1, [r7, #20]
 800a17a:	6849      	ldr	r1, [r1, #4]
 800a17c:	0849      	lsrs	r1, r1, #1
 800a17e:	2000      	movs	r0, #0
 800a180:	460c      	mov	r4, r1
 800a182:	4605      	mov	r5, r0
 800a184:	eb12 0804 	adds.w	r8, r2, r4
 800a188:	eb43 0905 	adc.w	r9, r3, r5
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	469a      	mov	sl, r3
 800a194:	4693      	mov	fp, r2
 800a196:	4652      	mov	r2, sl
 800a198:	465b      	mov	r3, fp
 800a19a:	4640      	mov	r0, r8
 800a19c:	4649      	mov	r1, r9
 800a19e:	f7f6 fc29 	bl	80009f4 <__aeabi_uldivmod>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	4613      	mov	r3, r2
 800a1a8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1aa:	6a3b      	ldr	r3, [r7, #32]
 800a1ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1b0:	d308      	bcc.n	800a1c4 <UART_SetConfig+0x430>
 800a1b2:	6a3b      	ldr	r3, [r7, #32]
 800a1b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1b8:	d204      	bcs.n	800a1c4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	6a3a      	ldr	r2, [r7, #32]
 800a1c0:	60da      	str	r2, [r3, #12]
 800a1c2:	e0ce      	b.n	800a362 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a1ca:	e0ca      	b.n	800a362 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	69db      	ldr	r3, [r3, #28]
 800a1d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1d4:	d166      	bne.n	800a2a4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a1d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a1da:	2b08      	cmp	r3, #8
 800a1dc:	d827      	bhi.n	800a22e <UART_SetConfig+0x49a>
 800a1de:	a201      	add	r2, pc, #4	@ (adr r2, 800a1e4 <UART_SetConfig+0x450>)
 800a1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e4:	0800a209 	.word	0x0800a209
 800a1e8:	0800a211 	.word	0x0800a211
 800a1ec:	0800a219 	.word	0x0800a219
 800a1f0:	0800a22f 	.word	0x0800a22f
 800a1f4:	0800a21f 	.word	0x0800a21f
 800a1f8:	0800a22f 	.word	0x0800a22f
 800a1fc:	0800a22f 	.word	0x0800a22f
 800a200:	0800a22f 	.word	0x0800a22f
 800a204:	0800a227 	.word	0x0800a227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a208:	f7fc fae8 	bl	80067dc <HAL_RCC_GetPCLK1Freq>
 800a20c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a20e:	e014      	b.n	800a23a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a210:	f7fc fafa 	bl	8006808 <HAL_RCC_GetPCLK2Freq>
 800a214:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a216:	e010      	b.n	800a23a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a218:	4b4e      	ldr	r3, [pc, #312]	@ (800a354 <UART_SetConfig+0x5c0>)
 800a21a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a21c:	e00d      	b.n	800a23a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a21e:	f7fc fa6f 	bl	8006700 <HAL_RCC_GetSysClockFreq>
 800a222:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a224:	e009      	b.n	800a23a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a226:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a22a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a22c:	e005      	b.n	800a23a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a22e:	2300      	movs	r3, #0
 800a230:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a238:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f000 8090 	beq.w	800a362 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a246:	4a44      	ldr	r2, [pc, #272]	@ (800a358 <UART_SetConfig+0x5c4>)
 800a248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a24c:	461a      	mov	r2, r3
 800a24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a250:	fbb3 f3f2 	udiv	r3, r3, r2
 800a254:	005a      	lsls	r2, r3, #1
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	085b      	lsrs	r3, r3, #1
 800a25c:	441a      	add	r2, r3
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	fbb2 f3f3 	udiv	r3, r2, r3
 800a266:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a268:	6a3b      	ldr	r3, [r7, #32]
 800a26a:	2b0f      	cmp	r3, #15
 800a26c:	d916      	bls.n	800a29c <UART_SetConfig+0x508>
 800a26e:	6a3b      	ldr	r3, [r7, #32]
 800a270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a274:	d212      	bcs.n	800a29c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a276:	6a3b      	ldr	r3, [r7, #32]
 800a278:	b29b      	uxth	r3, r3
 800a27a:	f023 030f 	bic.w	r3, r3, #15
 800a27e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a280:	6a3b      	ldr	r3, [r7, #32]
 800a282:	085b      	lsrs	r3, r3, #1
 800a284:	b29b      	uxth	r3, r3
 800a286:	f003 0307 	and.w	r3, r3, #7
 800a28a:	b29a      	uxth	r2, r3
 800a28c:	8bfb      	ldrh	r3, [r7, #30]
 800a28e:	4313      	orrs	r3, r2
 800a290:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	8bfa      	ldrh	r2, [r7, #30]
 800a298:	60da      	str	r2, [r3, #12]
 800a29a:	e062      	b.n	800a362 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a29c:	2301      	movs	r3, #1
 800a29e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a2a2:	e05e      	b.n	800a362 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2a4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a2a8:	2b08      	cmp	r3, #8
 800a2aa:	d828      	bhi.n	800a2fe <UART_SetConfig+0x56a>
 800a2ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a2b4 <UART_SetConfig+0x520>)
 800a2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b2:	bf00      	nop
 800a2b4:	0800a2d9 	.word	0x0800a2d9
 800a2b8:	0800a2e1 	.word	0x0800a2e1
 800a2bc:	0800a2e9 	.word	0x0800a2e9
 800a2c0:	0800a2ff 	.word	0x0800a2ff
 800a2c4:	0800a2ef 	.word	0x0800a2ef
 800a2c8:	0800a2ff 	.word	0x0800a2ff
 800a2cc:	0800a2ff 	.word	0x0800a2ff
 800a2d0:	0800a2ff 	.word	0x0800a2ff
 800a2d4:	0800a2f7 	.word	0x0800a2f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2d8:	f7fc fa80 	bl	80067dc <HAL_RCC_GetPCLK1Freq>
 800a2dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a2de:	e014      	b.n	800a30a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2e0:	f7fc fa92 	bl	8006808 <HAL_RCC_GetPCLK2Freq>
 800a2e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a2e6:	e010      	b.n	800a30a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2e8:	4b1a      	ldr	r3, [pc, #104]	@ (800a354 <UART_SetConfig+0x5c0>)
 800a2ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a2ec:	e00d      	b.n	800a30a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2ee:	f7fc fa07 	bl	8006700 <HAL_RCC_GetSysClockFreq>
 800a2f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a2f4:	e009      	b.n	800a30a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a2fc:	e005      	b.n	800a30a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a2fe:	2300      	movs	r3, #0
 800a300:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a308:	bf00      	nop
    }

    if (pclk != 0U)
 800a30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d028      	beq.n	800a362 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a314:	4a10      	ldr	r2, [pc, #64]	@ (800a358 <UART_SetConfig+0x5c4>)
 800a316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a31a:	461a      	mov	r2, r3
 800a31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	085b      	lsrs	r3, r3, #1
 800a328:	441a      	add	r2, r3
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a332:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a334:	6a3b      	ldr	r3, [r7, #32]
 800a336:	2b0f      	cmp	r3, #15
 800a338:	d910      	bls.n	800a35c <UART_SetConfig+0x5c8>
 800a33a:	6a3b      	ldr	r3, [r7, #32]
 800a33c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a340:	d20c      	bcs.n	800a35c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a342:	6a3b      	ldr	r3, [r7, #32]
 800a344:	b29a      	uxth	r2, r3
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	60da      	str	r2, [r3, #12]
 800a34c:	e009      	b.n	800a362 <UART_SetConfig+0x5ce>
 800a34e:	bf00      	nop
 800a350:	40008000 	.word	0x40008000
 800a354:	00f42400 	.word	0x00f42400
 800a358:	0800bcb4 	.word	0x0800bcb4
      }
      else
      {
        ret = HAL_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	2201      	movs	r2, #1
 800a366:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	2201      	movs	r2, #1
 800a36e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	2200      	movs	r2, #0
 800a376:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	2200      	movs	r2, #0
 800a37c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a37e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a382:	4618      	mov	r0, r3
 800a384:	3730      	adds	r7, #48	@ 0x30
 800a386:	46bd      	mov	sp, r7
 800a388:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a38c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a398:	f003 0308 	and.w	r3, r3, #8
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00a      	beq.n	800a3b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	430a      	orrs	r2, r1
 800a3b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ba:	f003 0301 	and.w	r3, r3, #1
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00a      	beq.n	800a3d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	430a      	orrs	r2, r1
 800a3d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3dc:	f003 0302 	and.w	r3, r3, #2
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d00a      	beq.n	800a3fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	430a      	orrs	r2, r1
 800a3f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3fe:	f003 0304 	and.w	r3, r3, #4
 800a402:	2b00      	cmp	r3, #0
 800a404:	d00a      	beq.n	800a41c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	430a      	orrs	r2, r1
 800a41a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a420:	f003 0310 	and.w	r3, r3, #16
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00a      	beq.n	800a43e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	430a      	orrs	r2, r1
 800a43c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a442:	f003 0320 	and.w	r3, r3, #32
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00a      	beq.n	800a460 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	430a      	orrs	r2, r1
 800a45e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d01a      	beq.n	800a4a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	430a      	orrs	r2, r1
 800a480:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a486:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a48a:	d10a      	bne.n	800a4a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	430a      	orrs	r2, r1
 800a4a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00a      	beq.n	800a4c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	430a      	orrs	r2, r1
 800a4c2:	605a      	str	r2, [r3, #4]
  }
}
 800a4c4:	bf00      	nop
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b098      	sub	sp, #96	@ 0x60
 800a4d4:	af02      	add	r7, sp, #8
 800a4d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4e0:	f7f9 f994 	bl	800380c <HAL_GetTick>
 800a4e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 0308 	and.w	r3, r3, #8
 800a4f0:	2b08      	cmp	r3, #8
 800a4f2:	d12f      	bne.n	800a554 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 f88e 	bl	800a624 <UART_WaitOnFlagUntilTimeout>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d022      	beq.n	800a554 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a516:	e853 3f00 	ldrex	r3, [r3]
 800a51a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a51c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a51e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a522:	653b      	str	r3, [r7, #80]	@ 0x50
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	461a      	mov	r2, r3
 800a52a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a52c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a52e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a530:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a532:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a534:	e841 2300 	strex	r3, r2, [r1]
 800a538:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a53a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d1e6      	bne.n	800a50e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2220      	movs	r2, #32
 800a544:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a550:	2303      	movs	r3, #3
 800a552:	e063      	b.n	800a61c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f003 0304 	and.w	r3, r3, #4
 800a55e:	2b04      	cmp	r3, #4
 800a560:	d149      	bne.n	800a5f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a562:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a566:	9300      	str	r3, [sp, #0]
 800a568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a56a:	2200      	movs	r2, #0
 800a56c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 f857 	bl	800a624 <UART_WaitOnFlagUntilTimeout>
 800a576:	4603      	mov	r3, r0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d03c      	beq.n	800a5f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a584:	e853 3f00 	ldrex	r3, [r3]
 800a588:	623b      	str	r3, [r7, #32]
   return(result);
 800a58a:	6a3b      	ldr	r3, [r7, #32]
 800a58c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a590:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	461a      	mov	r2, r3
 800a598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a59a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a59c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a59e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5a2:	e841 2300 	strex	r3, r2, [r1]
 800a5a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d1e6      	bne.n	800a57c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	3308      	adds	r3, #8
 800a5b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	e853 3f00 	ldrex	r3, [r3]
 800a5bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f023 0301 	bic.w	r3, r3, #1
 800a5c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	3308      	adds	r3, #8
 800a5cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5ce:	61fa      	str	r2, [r7, #28]
 800a5d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d2:	69b9      	ldr	r1, [r7, #24]
 800a5d4:	69fa      	ldr	r2, [r7, #28]
 800a5d6:	e841 2300 	strex	r3, r2, [r1]
 800a5da:	617b      	str	r3, [r7, #20]
   return(result);
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d1e5      	bne.n	800a5ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2220      	movs	r2, #32
 800a5e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	e012      	b.n	800a61c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2220      	movs	r2, #32
 800a5fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2220      	movs	r2, #32
 800a602:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2200      	movs	r2, #0
 800a60a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a61a:	2300      	movs	r3, #0
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3758      	adds	r7, #88	@ 0x58
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	603b      	str	r3, [r7, #0]
 800a630:	4613      	mov	r3, r2
 800a632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a634:	e04f      	b.n	800a6d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a63c:	d04b      	beq.n	800a6d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a63e:	f7f9 f8e5 	bl	800380c <HAL_GetTick>
 800a642:	4602      	mov	r2, r0
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	1ad3      	subs	r3, r2, r3
 800a648:	69ba      	ldr	r2, [r7, #24]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d302      	bcc.n	800a654 <UART_WaitOnFlagUntilTimeout+0x30>
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d101      	bne.n	800a658 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a654:	2303      	movs	r3, #3
 800a656:	e04e      	b.n	800a6f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f003 0304 	and.w	r3, r3, #4
 800a662:	2b00      	cmp	r3, #0
 800a664:	d037      	beq.n	800a6d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	2b80      	cmp	r3, #128	@ 0x80
 800a66a:	d034      	beq.n	800a6d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	2b40      	cmp	r3, #64	@ 0x40
 800a670:	d031      	beq.n	800a6d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	69db      	ldr	r3, [r3, #28]
 800a678:	f003 0308 	and.w	r3, r3, #8
 800a67c:	2b08      	cmp	r3, #8
 800a67e:	d110      	bne.n	800a6a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2208      	movs	r2, #8
 800a686:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	f000 f920 	bl	800a8ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2208      	movs	r2, #8
 800a692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e029      	b.n	800a6f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	69db      	ldr	r3, [r3, #28]
 800a6a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6b0:	d111      	bne.n	800a6d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a6ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f000 f906 	bl	800a8ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2220      	movs	r2, #32
 800a6c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	e00f      	b.n	800a6f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	69da      	ldr	r2, [r3, #28]
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	4013      	ands	r3, r2
 800a6e0:	68ba      	ldr	r2, [r7, #8]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	bf0c      	ite	eq
 800a6e6:	2301      	moveq	r3, #1
 800a6e8:	2300      	movne	r3, #0
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	79fb      	ldrb	r3, [r7, #7]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d0a0      	beq.n	800a636 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
	...

0800a700 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b096      	sub	sp, #88	@ 0x58
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	4613      	mov	r3, r2
 800a70c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	68ba      	ldr	r2, [r7, #8]
 800a712:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	88fa      	ldrh	r2, [r7, #6]
 800a718:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2200      	movs	r2, #0
 800a720:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2222      	movs	r2, #34	@ 0x22
 800a728:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a732:	2b00      	cmp	r3, #0
 800a734:	d02d      	beq.n	800a792 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a73c:	4a40      	ldr	r2, [pc, #256]	@ (800a840 <UART_Start_Receive_DMA+0x140>)
 800a73e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a746:	4a3f      	ldr	r2, [pc, #252]	@ (800a844 <UART_Start_Receive_DMA+0x144>)
 800a748:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a750:	4a3d      	ldr	r2, [pc, #244]	@ (800a848 <UART_Start_Receive_DMA+0x148>)
 800a752:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a75a:	2200      	movs	r2, #0
 800a75c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	3324      	adds	r3, #36	@ 0x24
 800a76a:	4619      	mov	r1, r3
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a770:	461a      	mov	r2, r3
 800a772:	88fb      	ldrh	r3, [r7, #6]
 800a774:	f7fa fe86 	bl	8005484 <HAL_DMA_Start_IT>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d009      	beq.n	800a792 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2210      	movs	r2, #16
 800a782:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2220      	movs	r2, #32
 800a78a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a78e:	2301      	movs	r3, #1
 800a790:	e051      	b.n	800a836 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d018      	beq.n	800a7cc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7a2:	e853 3f00 	ldrex	r3, [r3]
 800a7a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a7ae:	657b      	str	r3, [r7, #84]	@ 0x54
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7ba:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a7be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7c0:	e841 2300 	strex	r3, r2, [r1]
 800a7c4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a7c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d1e6      	bne.n	800a79a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	3308      	adds	r3, #8
 800a7d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d6:	e853 3f00 	ldrex	r3, [r3]
 800a7da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7de:	f043 0301 	orr.w	r3, r3, #1
 800a7e2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	3308      	adds	r3, #8
 800a7ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a7ec:	637a      	str	r2, [r7, #52]	@ 0x34
 800a7ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a7f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a7f4:	e841 2300 	strex	r3, r2, [r1]
 800a7f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d1e5      	bne.n	800a7cc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	3308      	adds	r3, #8
 800a806:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	e853 3f00 	ldrex	r3, [r3]
 800a80e:	613b      	str	r3, [r7, #16]
   return(result);
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	3308      	adds	r3, #8
 800a81e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a820:	623a      	str	r2, [r7, #32]
 800a822:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a824:	69f9      	ldr	r1, [r7, #28]
 800a826:	6a3a      	ldr	r2, [r7, #32]
 800a828:	e841 2300 	strex	r3, r2, [r1]
 800a82c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d1e5      	bne.n	800a800 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3758      	adds	r7, #88	@ 0x58
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	0800aa59 	.word	0x0800aa59
 800a844:	0800ab8d 	.word	0x0800ab8d
 800a848:	0800abd3 	.word	0x0800abd3

0800a84c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b08f      	sub	sp, #60	@ 0x3c
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a85a:	6a3b      	ldr	r3, [r7, #32]
 800a85c:	e853 3f00 	ldrex	r3, [r3]
 800a860:	61fb      	str	r3, [r7, #28]
   return(result);
 800a862:	69fb      	ldr	r3, [r7, #28]
 800a864:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a868:	637b      	str	r3, [r7, #52]	@ 0x34
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	461a      	mov	r2, r3
 800a870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a872:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a874:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a876:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a878:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a87a:	e841 2300 	strex	r3, r2, [r1]
 800a87e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1e6      	bne.n	800a854 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	3308      	adds	r3, #8
 800a88c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	e853 3f00 	ldrex	r3, [r3]
 800a894:	60bb      	str	r3, [r7, #8]
   return(result);
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a89c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	3308      	adds	r3, #8
 800a8a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8a6:	61ba      	str	r2, [r7, #24]
 800a8a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8aa:	6979      	ldr	r1, [r7, #20]
 800a8ac:	69ba      	ldr	r2, [r7, #24]
 800a8ae:	e841 2300 	strex	r3, r2, [r1]
 800a8b2:	613b      	str	r3, [r7, #16]
   return(result);
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1e5      	bne.n	800a886 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2220      	movs	r2, #32
 800a8be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a8c2:	bf00      	nop
 800a8c4:	373c      	adds	r7, #60	@ 0x3c
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr

0800a8ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8ce:	b480      	push	{r7}
 800a8d0:	b095      	sub	sp, #84	@ 0x54
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8de:	e853 3f00 	ldrex	r3, [r3]
 800a8e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8f4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a8fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a8fc:	e841 2300 	strex	r3, r2, [r1]
 800a900:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a904:	2b00      	cmp	r3, #0
 800a906:	d1e6      	bne.n	800a8d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	3308      	adds	r3, #8
 800a90e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a910:	6a3b      	ldr	r3, [r7, #32]
 800a912:	e853 3f00 	ldrex	r3, [r3]
 800a916:	61fb      	str	r3, [r7, #28]
   return(result);
 800a918:	69fb      	ldr	r3, [r7, #28]
 800a91a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a91e:	f023 0301 	bic.w	r3, r3, #1
 800a922:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	3308      	adds	r3, #8
 800a92a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a92c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a92e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a930:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a932:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a934:	e841 2300 	strex	r3, r2, [r1]
 800a938:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d1e3      	bne.n	800a908 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a944:	2b01      	cmp	r3, #1
 800a946:	d118      	bne.n	800a97a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	e853 3f00 	ldrex	r3, [r3]
 800a954:	60bb      	str	r3, [r7, #8]
   return(result);
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	f023 0310 	bic.w	r3, r3, #16
 800a95c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	461a      	mov	r2, r3
 800a964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a966:	61bb      	str	r3, [r7, #24]
 800a968:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a96a:	6979      	ldr	r1, [r7, #20]
 800a96c:	69ba      	ldr	r2, [r7, #24]
 800a96e:	e841 2300 	strex	r3, r2, [r1]
 800a972:	613b      	str	r3, [r7, #16]
   return(result);
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d1e6      	bne.n	800a948 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2220      	movs	r2, #32
 800a97e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a98e:	bf00      	nop
 800a990:	3754      	adds	r7, #84	@ 0x54
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr

0800a99a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b090      	sub	sp, #64	@ 0x40
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9a6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f003 0320 	and.w	r3, r3, #32
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d137      	bne.n	800aa26 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a9b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a9be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	3308      	adds	r3, #8
 800a9c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c8:	e853 3f00 	ldrex	r3, [r3]
 800a9cc:	623b      	str	r3, [r7, #32]
   return(result);
 800a9ce:	6a3b      	ldr	r3, [r7, #32]
 800a9d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a9d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	3308      	adds	r3, #8
 800a9dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9de:	633a      	str	r2, [r7, #48]	@ 0x30
 800a9e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9e6:	e841 2300 	strex	r3, r2, [r1]
 800a9ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1e5      	bne.n	800a9be <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	e853 3f00 	ldrex	r3, [r3]
 800a9fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa06:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa10:	61fb      	str	r3, [r7, #28]
 800aa12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa14:	69b9      	ldr	r1, [r7, #24]
 800aa16:	69fa      	ldr	r2, [r7, #28]
 800aa18:	e841 2300 	strex	r3, r2, [r1]
 800aa1c:	617b      	str	r3, [r7, #20]
   return(result);
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d1e6      	bne.n	800a9f2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa24:	e004      	b.n	800aa30 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800aa26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aa2c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800aa2e:	4798      	blx	r3
}
 800aa30:	bf00      	nop
 800aa32:	3740      	adds	r7, #64	@ 0x40
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa44:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa50:	bf00      	nop
 800aa52:	3710      	adds	r7, #16
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b09c      	sub	sp, #112	@ 0x70
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa64:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f003 0320 	and.w	r3, r3, #32
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d171      	bne.n	800ab58 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800aa74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa76:	2200      	movs	r2, #0
 800aa78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa84:	e853 3f00 	ldrex	r3, [r3]
 800aa88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aa8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa90:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	461a      	mov	r2, r3
 800aa98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa9c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aaa0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aaa2:	e841 2300 	strex	r3, r2, [r1]
 800aaa6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aaa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d1e6      	bne.n	800aa7c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	3308      	adds	r3, #8
 800aab4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aab8:	e853 3f00 	ldrex	r3, [r3]
 800aabc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aabe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aac0:	f023 0301 	bic.w	r3, r3, #1
 800aac4:	667b      	str	r3, [r7, #100]	@ 0x64
 800aac6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	3308      	adds	r3, #8
 800aacc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aace:	647a      	str	r2, [r7, #68]	@ 0x44
 800aad0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aad4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aad6:	e841 2300 	strex	r3, r2, [r1]
 800aada:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aadc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1e5      	bne.n	800aaae <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aae2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	3308      	adds	r3, #8
 800aae8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaec:	e853 3f00 	ldrex	r3, [r3]
 800aaf0:	623b      	str	r3, [r7, #32]
   return(result);
 800aaf2:	6a3b      	ldr	r3, [r7, #32]
 800aaf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aaf8:	663b      	str	r3, [r7, #96]	@ 0x60
 800aafa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	3308      	adds	r3, #8
 800ab00:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ab02:	633a      	str	r2, [r7, #48]	@ 0x30
 800ab04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab0a:	e841 2300 	strex	r3, r2, [r1]
 800ab0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1e5      	bne.n	800aae2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab18:	2220      	movs	r2, #32
 800ab1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d118      	bne.n	800ab58 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	e853 3f00 	ldrex	r3, [r3]
 800ab32:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f023 0310 	bic.w	r3, r3, #16
 800ab3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	461a      	mov	r2, r3
 800ab42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab44:	61fb      	str	r3, [r7, #28]
 800ab46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab48:	69b9      	ldr	r1, [r7, #24]
 800ab4a:	69fa      	ldr	r2, [r7, #28]
 800ab4c:	e841 2300 	strex	r3, r2, [r1]
 800ab50:	617b      	str	r3, [r7, #20]
   return(result);
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d1e6      	bne.n	800ab26 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d109      	bne.n	800ab7a <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800ab66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ab6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ab6e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800ab72:	4611      	mov	r1, r2
 800ab74:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab76:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab78:	e004      	b.n	800ab84 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800ab7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab80:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab82:	4798      	blx	r3
}
 800ab84:	bf00      	nop
 800ab86:	3770      	adds	r7, #112	@ 0x70
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab98:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d10b      	bne.n	800abc0 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800abb4:	0852      	lsrs	r2, r2, #1
 800abb6:	b292      	uxth	r2, r2
 800abb8:	4611      	mov	r1, r2
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abbe:	e004      	b.n	800abca <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	4798      	blx	r3
}
 800abca:	bf00      	nop
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b086      	sub	sp, #24
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abde:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abe6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abfa:	2b80      	cmp	r3, #128	@ 0x80
 800abfc:	d109      	bne.n	800ac12 <UART_DMAError+0x40>
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	2b21      	cmp	r3, #33	@ 0x21
 800ac02:	d106      	bne.n	800ac12 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ac0c:	6978      	ldr	r0, [r7, #20]
 800ac0e:	f7ff fe1d 	bl	800a84c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac1c:	2b40      	cmp	r3, #64	@ 0x40
 800ac1e:	d109      	bne.n	800ac34 <UART_DMAError+0x62>
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2b22      	cmp	r3, #34	@ 0x22
 800ac24:	d106      	bne.n	800ac34 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ac2e:	6978      	ldr	r0, [r7, #20]
 800ac30:	f7ff fe4d 	bl	800a8ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac3a:	f043 0210 	orr.w	r2, r3, #16
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ac4a:	6978      	ldr	r0, [r7, #20]
 800ac4c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac4e:	bf00      	nop
 800ac50:	3718      	adds	r7, #24
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b084      	sub	sp, #16
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2200      	movs	r2, #0
 800ac68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ac72:	68f8      	ldr	r0, [r7, #12]
 800ac74:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac76:	bf00      	nop
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b088      	sub	sp, #32
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	e853 3f00 	ldrex	r3, [r3]
 800ac92:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac9a:	61fb      	str	r3, [r7, #28]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	461a      	mov	r2, r3
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	61bb      	str	r3, [r7, #24]
 800aca6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca8:	6979      	ldr	r1, [r7, #20]
 800acaa:	69ba      	ldr	r2, [r7, #24]
 800acac:	e841 2300 	strex	r3, r2, [r1]
 800acb0:	613b      	str	r3, [r7, #16]
   return(result);
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d1e6      	bne.n	800ac86 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2220      	movs	r2, #32
 800acbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2200      	movs	r2, #0
 800acc4:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acd0:	bf00      	nop
 800acd2:	3720      	adds	r7, #32
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ace0:	bf00      	nop
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800acf4:	bf00      	nop
 800acf6:	370c      	adds	r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ad08:	bf00      	nop
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d101      	bne.n	800ad2a <HAL_UARTEx_DisableFifoMode+0x16>
 800ad26:	2302      	movs	r3, #2
 800ad28:	e027      	b.n	800ad7a <HAL_UARTEx_DisableFifoMode+0x66>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2224      	movs	r2, #36	@ 0x24
 800ad36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f022 0201 	bic.w	r2, r2, #1
 800ad50:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ad58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2220      	movs	r2, #32
 800ad6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad78:	2300      	movs	r3, #0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3714      	adds	r7, #20
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr

0800ad86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b084      	sub	sp, #16
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
 800ad8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d101      	bne.n	800ad9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ad9a:	2302      	movs	r3, #2
 800ad9c:	e02d      	b.n	800adfa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2201      	movs	r2, #1
 800ada2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2224      	movs	r2, #36	@ 0x24
 800adaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f022 0201 	bic.w	r2, r2, #1
 800adc4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	683a      	ldr	r2, [r7, #0]
 800add6:	430a      	orrs	r2, r1
 800add8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f850 	bl	800ae80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2220      	movs	r2, #32
 800adec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b084      	sub	sp, #16
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
 800ae0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d101      	bne.n	800ae1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ae16:	2302      	movs	r3, #2
 800ae18:	e02d      	b.n	800ae76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2224      	movs	r2, #36	@ 0x24
 800ae26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f022 0201 	bic.w	r2, r2, #1
 800ae40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	683a      	ldr	r2, [r7, #0]
 800ae52:	430a      	orrs	r2, r1
 800ae54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 f812 	bl	800ae80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	68fa      	ldr	r2, [r7, #12]
 800ae62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2220      	movs	r2, #32
 800ae68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
	...

0800ae80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d108      	bne.n	800aea2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2201      	movs	r2, #1
 800ae94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aea0:	e031      	b.n	800af06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aea2:	2308      	movs	r3, #8
 800aea4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aea6:	2308      	movs	r3, #8
 800aea8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	0e5b      	lsrs	r3, r3, #25
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	f003 0307 	and.w	r3, r3, #7
 800aeb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	0f5b      	lsrs	r3, r3, #29
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	f003 0307 	and.w	r3, r3, #7
 800aec8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aeca:	7bbb      	ldrb	r3, [r7, #14]
 800aecc:	7b3a      	ldrb	r2, [r7, #12]
 800aece:	4911      	ldr	r1, [pc, #68]	@ (800af14 <UARTEx_SetNbDataToProcess+0x94>)
 800aed0:	5c8a      	ldrb	r2, [r1, r2]
 800aed2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aed6:	7b3a      	ldrb	r2, [r7, #12]
 800aed8:	490f      	ldr	r1, [pc, #60]	@ (800af18 <UARTEx_SetNbDataToProcess+0x98>)
 800aeda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aedc:	fb93 f3f2 	sdiv	r3, r3, r2
 800aee0:	b29a      	uxth	r2, r3
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aee8:	7bfb      	ldrb	r3, [r7, #15]
 800aeea:	7b7a      	ldrb	r2, [r7, #13]
 800aeec:	4909      	ldr	r1, [pc, #36]	@ (800af14 <UARTEx_SetNbDataToProcess+0x94>)
 800aeee:	5c8a      	ldrb	r2, [r1, r2]
 800aef0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aef4:	7b7a      	ldrb	r2, [r7, #13]
 800aef6:	4908      	ldr	r1, [pc, #32]	@ (800af18 <UARTEx_SetNbDataToProcess+0x98>)
 800aef8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aefa:	fb93 f3f2 	sdiv	r3, r3, r2
 800aefe:	b29a      	uxth	r2, r3
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800af06:	bf00      	nop
 800af08:	3714      	adds	r7, #20
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	0800bccc 	.word	0x0800bccc
 800af18:	0800bcd4 	.word	0x0800bcd4

0800af1c <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b085      	sub	sp, #20
 800af20:	af00      	add	r7, sp, #0
 800af22:	60f8      	str	r0, [r7, #12]
 800af24:	607b      	str	r3, [r7, #4]
 800af26:	460b      	mov	r3, r1
 800af28:	817b      	strh	r3, [r7, #10]
 800af2a:	4613      	mov	r3, r2
 800af2c:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	897a      	ldrh	r2, [r7, #10]
 800af32:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	893a      	ldrh	r2, [r7, #8]
 800af38:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	605a      	str	r2, [r3, #4]
}
 800af40:	bf00      	nop
 800af42:	3714      	adds	r7, #20
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <malloc>:
 800af4c:	4b02      	ldr	r3, [pc, #8]	@ (800af58 <malloc+0xc>)
 800af4e:	4601      	mov	r1, r0
 800af50:	6818      	ldr	r0, [r3, #0]
 800af52:	f000 b825 	b.w	800afa0 <_malloc_r>
 800af56:	bf00      	nop
 800af58:	20000364 	.word	0x20000364

0800af5c <sbrk_aligned>:
 800af5c:	b570      	push	{r4, r5, r6, lr}
 800af5e:	4e0f      	ldr	r6, [pc, #60]	@ (800af9c <sbrk_aligned+0x40>)
 800af60:	460c      	mov	r4, r1
 800af62:	6831      	ldr	r1, [r6, #0]
 800af64:	4605      	mov	r5, r0
 800af66:	b911      	cbnz	r1, 800af6e <sbrk_aligned+0x12>
 800af68:	f000 f8ae 	bl	800b0c8 <_sbrk_r>
 800af6c:	6030      	str	r0, [r6, #0]
 800af6e:	4621      	mov	r1, r4
 800af70:	4628      	mov	r0, r5
 800af72:	f000 f8a9 	bl	800b0c8 <_sbrk_r>
 800af76:	1c43      	adds	r3, r0, #1
 800af78:	d103      	bne.n	800af82 <sbrk_aligned+0x26>
 800af7a:	f04f 34ff 	mov.w	r4, #4294967295
 800af7e:	4620      	mov	r0, r4
 800af80:	bd70      	pop	{r4, r5, r6, pc}
 800af82:	1cc4      	adds	r4, r0, #3
 800af84:	f024 0403 	bic.w	r4, r4, #3
 800af88:	42a0      	cmp	r0, r4
 800af8a:	d0f8      	beq.n	800af7e <sbrk_aligned+0x22>
 800af8c:	1a21      	subs	r1, r4, r0
 800af8e:	4628      	mov	r0, r5
 800af90:	f000 f89a 	bl	800b0c8 <_sbrk_r>
 800af94:	3001      	adds	r0, #1
 800af96:	d1f2      	bne.n	800af7e <sbrk_aligned+0x22>
 800af98:	e7ef      	b.n	800af7a <sbrk_aligned+0x1e>
 800af9a:	bf00      	nop
 800af9c:	20001da0 	.word	0x20001da0

0800afa0 <_malloc_r>:
 800afa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afa4:	1ccd      	adds	r5, r1, #3
 800afa6:	f025 0503 	bic.w	r5, r5, #3
 800afaa:	3508      	adds	r5, #8
 800afac:	2d0c      	cmp	r5, #12
 800afae:	bf38      	it	cc
 800afb0:	250c      	movcc	r5, #12
 800afb2:	2d00      	cmp	r5, #0
 800afb4:	4606      	mov	r6, r0
 800afb6:	db01      	blt.n	800afbc <_malloc_r+0x1c>
 800afb8:	42a9      	cmp	r1, r5
 800afba:	d904      	bls.n	800afc6 <_malloc_r+0x26>
 800afbc:	230c      	movs	r3, #12
 800afbe:	6033      	str	r3, [r6, #0]
 800afc0:	2000      	movs	r0, #0
 800afc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b09c <_malloc_r+0xfc>
 800afca:	f000 f869 	bl	800b0a0 <__malloc_lock>
 800afce:	f8d8 3000 	ldr.w	r3, [r8]
 800afd2:	461c      	mov	r4, r3
 800afd4:	bb44      	cbnz	r4, 800b028 <_malloc_r+0x88>
 800afd6:	4629      	mov	r1, r5
 800afd8:	4630      	mov	r0, r6
 800afda:	f7ff ffbf 	bl	800af5c <sbrk_aligned>
 800afde:	1c43      	adds	r3, r0, #1
 800afe0:	4604      	mov	r4, r0
 800afe2:	d158      	bne.n	800b096 <_malloc_r+0xf6>
 800afe4:	f8d8 4000 	ldr.w	r4, [r8]
 800afe8:	4627      	mov	r7, r4
 800afea:	2f00      	cmp	r7, #0
 800afec:	d143      	bne.n	800b076 <_malloc_r+0xd6>
 800afee:	2c00      	cmp	r4, #0
 800aff0:	d04b      	beq.n	800b08a <_malloc_r+0xea>
 800aff2:	6823      	ldr	r3, [r4, #0]
 800aff4:	4639      	mov	r1, r7
 800aff6:	4630      	mov	r0, r6
 800aff8:	eb04 0903 	add.w	r9, r4, r3
 800affc:	f000 f864 	bl	800b0c8 <_sbrk_r>
 800b000:	4581      	cmp	r9, r0
 800b002:	d142      	bne.n	800b08a <_malloc_r+0xea>
 800b004:	6821      	ldr	r1, [r4, #0]
 800b006:	1a6d      	subs	r5, r5, r1
 800b008:	4629      	mov	r1, r5
 800b00a:	4630      	mov	r0, r6
 800b00c:	f7ff ffa6 	bl	800af5c <sbrk_aligned>
 800b010:	3001      	adds	r0, #1
 800b012:	d03a      	beq.n	800b08a <_malloc_r+0xea>
 800b014:	6823      	ldr	r3, [r4, #0]
 800b016:	442b      	add	r3, r5
 800b018:	6023      	str	r3, [r4, #0]
 800b01a:	f8d8 3000 	ldr.w	r3, [r8]
 800b01e:	685a      	ldr	r2, [r3, #4]
 800b020:	bb62      	cbnz	r2, 800b07c <_malloc_r+0xdc>
 800b022:	f8c8 7000 	str.w	r7, [r8]
 800b026:	e00f      	b.n	800b048 <_malloc_r+0xa8>
 800b028:	6822      	ldr	r2, [r4, #0]
 800b02a:	1b52      	subs	r2, r2, r5
 800b02c:	d420      	bmi.n	800b070 <_malloc_r+0xd0>
 800b02e:	2a0b      	cmp	r2, #11
 800b030:	d917      	bls.n	800b062 <_malloc_r+0xc2>
 800b032:	1961      	adds	r1, r4, r5
 800b034:	42a3      	cmp	r3, r4
 800b036:	6025      	str	r5, [r4, #0]
 800b038:	bf18      	it	ne
 800b03a:	6059      	strne	r1, [r3, #4]
 800b03c:	6863      	ldr	r3, [r4, #4]
 800b03e:	bf08      	it	eq
 800b040:	f8c8 1000 	streq.w	r1, [r8]
 800b044:	5162      	str	r2, [r4, r5]
 800b046:	604b      	str	r3, [r1, #4]
 800b048:	4630      	mov	r0, r6
 800b04a:	f000 f82f 	bl	800b0ac <__malloc_unlock>
 800b04e:	f104 000b 	add.w	r0, r4, #11
 800b052:	1d23      	adds	r3, r4, #4
 800b054:	f020 0007 	bic.w	r0, r0, #7
 800b058:	1ac2      	subs	r2, r0, r3
 800b05a:	bf1c      	itt	ne
 800b05c:	1a1b      	subne	r3, r3, r0
 800b05e:	50a3      	strne	r3, [r4, r2]
 800b060:	e7af      	b.n	800afc2 <_malloc_r+0x22>
 800b062:	6862      	ldr	r2, [r4, #4]
 800b064:	42a3      	cmp	r3, r4
 800b066:	bf0c      	ite	eq
 800b068:	f8c8 2000 	streq.w	r2, [r8]
 800b06c:	605a      	strne	r2, [r3, #4]
 800b06e:	e7eb      	b.n	800b048 <_malloc_r+0xa8>
 800b070:	4623      	mov	r3, r4
 800b072:	6864      	ldr	r4, [r4, #4]
 800b074:	e7ae      	b.n	800afd4 <_malloc_r+0x34>
 800b076:	463c      	mov	r4, r7
 800b078:	687f      	ldr	r7, [r7, #4]
 800b07a:	e7b6      	b.n	800afea <_malloc_r+0x4a>
 800b07c:	461a      	mov	r2, r3
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	42a3      	cmp	r3, r4
 800b082:	d1fb      	bne.n	800b07c <_malloc_r+0xdc>
 800b084:	2300      	movs	r3, #0
 800b086:	6053      	str	r3, [r2, #4]
 800b088:	e7de      	b.n	800b048 <_malloc_r+0xa8>
 800b08a:	230c      	movs	r3, #12
 800b08c:	6033      	str	r3, [r6, #0]
 800b08e:	4630      	mov	r0, r6
 800b090:	f000 f80c 	bl	800b0ac <__malloc_unlock>
 800b094:	e794      	b.n	800afc0 <_malloc_r+0x20>
 800b096:	6005      	str	r5, [r0, #0]
 800b098:	e7d6      	b.n	800b048 <_malloc_r+0xa8>
 800b09a:	bf00      	nop
 800b09c:	20001da4 	.word	0x20001da4

0800b0a0 <__malloc_lock>:
 800b0a0:	4801      	ldr	r0, [pc, #4]	@ (800b0a8 <__malloc_lock+0x8>)
 800b0a2:	f000 b84b 	b.w	800b13c <__retarget_lock_acquire_recursive>
 800b0a6:	bf00      	nop
 800b0a8:	20001ee4 	.word	0x20001ee4

0800b0ac <__malloc_unlock>:
 800b0ac:	4801      	ldr	r0, [pc, #4]	@ (800b0b4 <__malloc_unlock+0x8>)
 800b0ae:	f000 b846 	b.w	800b13e <__retarget_lock_release_recursive>
 800b0b2:	bf00      	nop
 800b0b4:	20001ee4 	.word	0x20001ee4

0800b0b8 <memset>:
 800b0b8:	4402      	add	r2, r0
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d100      	bne.n	800b0c2 <memset+0xa>
 800b0c0:	4770      	bx	lr
 800b0c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b0c6:	e7f9      	b.n	800b0bc <memset+0x4>

0800b0c8 <_sbrk_r>:
 800b0c8:	b538      	push	{r3, r4, r5, lr}
 800b0ca:	4d06      	ldr	r5, [pc, #24]	@ (800b0e4 <_sbrk_r+0x1c>)
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	4608      	mov	r0, r1
 800b0d2:	602b      	str	r3, [r5, #0]
 800b0d4:	f7f7 fe3e 	bl	8002d54 <_sbrk>
 800b0d8:	1c43      	adds	r3, r0, #1
 800b0da:	d102      	bne.n	800b0e2 <_sbrk_r+0x1a>
 800b0dc:	682b      	ldr	r3, [r5, #0]
 800b0de:	b103      	cbz	r3, 800b0e2 <_sbrk_r+0x1a>
 800b0e0:	6023      	str	r3, [r4, #0]
 800b0e2:	bd38      	pop	{r3, r4, r5, pc}
 800b0e4:	20001ee0 	.word	0x20001ee0

0800b0e8 <__errno>:
 800b0e8:	4b01      	ldr	r3, [pc, #4]	@ (800b0f0 <__errno+0x8>)
 800b0ea:	6818      	ldr	r0, [r3, #0]
 800b0ec:	4770      	bx	lr
 800b0ee:	bf00      	nop
 800b0f0:	20000364 	.word	0x20000364

0800b0f4 <__libc_init_array>:
 800b0f4:	b570      	push	{r4, r5, r6, lr}
 800b0f6:	4d0d      	ldr	r5, [pc, #52]	@ (800b12c <__libc_init_array+0x38>)
 800b0f8:	4c0d      	ldr	r4, [pc, #52]	@ (800b130 <__libc_init_array+0x3c>)
 800b0fa:	1b64      	subs	r4, r4, r5
 800b0fc:	10a4      	asrs	r4, r4, #2
 800b0fe:	2600      	movs	r6, #0
 800b100:	42a6      	cmp	r6, r4
 800b102:	d109      	bne.n	800b118 <__libc_init_array+0x24>
 800b104:	4d0b      	ldr	r5, [pc, #44]	@ (800b134 <__libc_init_array+0x40>)
 800b106:	4c0c      	ldr	r4, [pc, #48]	@ (800b138 <__libc_init_array+0x44>)
 800b108:	f000 fd9c 	bl	800bc44 <_init>
 800b10c:	1b64      	subs	r4, r4, r5
 800b10e:	10a4      	asrs	r4, r4, #2
 800b110:	2600      	movs	r6, #0
 800b112:	42a6      	cmp	r6, r4
 800b114:	d105      	bne.n	800b122 <__libc_init_array+0x2e>
 800b116:	bd70      	pop	{r4, r5, r6, pc}
 800b118:	f855 3b04 	ldr.w	r3, [r5], #4
 800b11c:	4798      	blx	r3
 800b11e:	3601      	adds	r6, #1
 800b120:	e7ee      	b.n	800b100 <__libc_init_array+0xc>
 800b122:	f855 3b04 	ldr.w	r3, [r5], #4
 800b126:	4798      	blx	r3
 800b128:	3601      	adds	r6, #1
 800b12a:	e7f2      	b.n	800b112 <__libc_init_array+0x1e>
 800b12c:	0800c0b4 	.word	0x0800c0b4
 800b130:	0800c0b4 	.word	0x0800c0b4
 800b134:	0800c0b4 	.word	0x0800c0b4
 800b138:	0800c0b8 	.word	0x0800c0b8

0800b13c <__retarget_lock_acquire_recursive>:
 800b13c:	4770      	bx	lr

0800b13e <__retarget_lock_release_recursive>:
 800b13e:	4770      	bx	lr

0800b140 <memcpy>:
 800b140:	440a      	add	r2, r1
 800b142:	4291      	cmp	r1, r2
 800b144:	f100 33ff 	add.w	r3, r0, #4294967295
 800b148:	d100      	bne.n	800b14c <memcpy+0xc>
 800b14a:	4770      	bx	lr
 800b14c:	b510      	push	{r4, lr}
 800b14e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b152:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b156:	4291      	cmp	r1, r2
 800b158:	d1f9      	bne.n	800b14e <memcpy+0xe>
 800b15a:	bd10      	pop	{r4, pc}

0800b15c <cosf>:
 800b15c:	ee10 3a10 	vmov	r3, s0
 800b160:	b507      	push	{r0, r1, r2, lr}
 800b162:	4a1e      	ldr	r2, [pc, #120]	@ (800b1dc <cosf+0x80>)
 800b164:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b168:	4293      	cmp	r3, r2
 800b16a:	d806      	bhi.n	800b17a <cosf+0x1e>
 800b16c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800b1e0 <cosf+0x84>
 800b170:	b003      	add	sp, #12
 800b172:	f85d eb04 	ldr.w	lr, [sp], #4
 800b176:	f000 b87b 	b.w	800b270 <__kernel_cosf>
 800b17a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b17e:	d304      	bcc.n	800b18a <cosf+0x2e>
 800b180:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b184:	b003      	add	sp, #12
 800b186:	f85d fb04 	ldr.w	pc, [sp], #4
 800b18a:	4668      	mov	r0, sp
 800b18c:	f000 f910 	bl	800b3b0 <__ieee754_rem_pio2f>
 800b190:	f000 0003 	and.w	r0, r0, #3
 800b194:	2801      	cmp	r0, #1
 800b196:	d009      	beq.n	800b1ac <cosf+0x50>
 800b198:	2802      	cmp	r0, #2
 800b19a:	d010      	beq.n	800b1be <cosf+0x62>
 800b19c:	b9b0      	cbnz	r0, 800b1cc <cosf+0x70>
 800b19e:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1a2:	ed9d 0a00 	vldr	s0, [sp]
 800b1a6:	f000 f863 	bl	800b270 <__kernel_cosf>
 800b1aa:	e7eb      	b.n	800b184 <cosf+0x28>
 800b1ac:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1b0:	ed9d 0a00 	vldr	s0, [sp]
 800b1b4:	f000 f8b4 	bl	800b320 <__kernel_sinf>
 800b1b8:	eeb1 0a40 	vneg.f32	s0, s0
 800b1bc:	e7e2      	b.n	800b184 <cosf+0x28>
 800b1be:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1c2:	ed9d 0a00 	vldr	s0, [sp]
 800b1c6:	f000 f853 	bl	800b270 <__kernel_cosf>
 800b1ca:	e7f5      	b.n	800b1b8 <cosf+0x5c>
 800b1cc:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1d0:	ed9d 0a00 	vldr	s0, [sp]
 800b1d4:	2001      	movs	r0, #1
 800b1d6:	f000 f8a3 	bl	800b320 <__kernel_sinf>
 800b1da:	e7d3      	b.n	800b184 <cosf+0x28>
 800b1dc:	3f490fd8 	.word	0x3f490fd8
 800b1e0:	00000000 	.word	0x00000000

0800b1e4 <sinf>:
 800b1e4:	ee10 3a10 	vmov	r3, s0
 800b1e8:	b507      	push	{r0, r1, r2, lr}
 800b1ea:	4a1f      	ldr	r2, [pc, #124]	@ (800b268 <sinf+0x84>)
 800b1ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d807      	bhi.n	800b204 <sinf+0x20>
 800b1f4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800b26c <sinf+0x88>
 800b1f8:	2000      	movs	r0, #0
 800b1fa:	b003      	add	sp, #12
 800b1fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b200:	f000 b88e 	b.w	800b320 <__kernel_sinf>
 800b204:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b208:	d304      	bcc.n	800b214 <sinf+0x30>
 800b20a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b20e:	b003      	add	sp, #12
 800b210:	f85d fb04 	ldr.w	pc, [sp], #4
 800b214:	4668      	mov	r0, sp
 800b216:	f000 f8cb 	bl	800b3b0 <__ieee754_rem_pio2f>
 800b21a:	f000 0003 	and.w	r0, r0, #3
 800b21e:	2801      	cmp	r0, #1
 800b220:	d00a      	beq.n	800b238 <sinf+0x54>
 800b222:	2802      	cmp	r0, #2
 800b224:	d00f      	beq.n	800b246 <sinf+0x62>
 800b226:	b9c0      	cbnz	r0, 800b25a <sinf+0x76>
 800b228:	eddd 0a01 	vldr	s1, [sp, #4]
 800b22c:	ed9d 0a00 	vldr	s0, [sp]
 800b230:	2001      	movs	r0, #1
 800b232:	f000 f875 	bl	800b320 <__kernel_sinf>
 800b236:	e7ea      	b.n	800b20e <sinf+0x2a>
 800b238:	eddd 0a01 	vldr	s1, [sp, #4]
 800b23c:	ed9d 0a00 	vldr	s0, [sp]
 800b240:	f000 f816 	bl	800b270 <__kernel_cosf>
 800b244:	e7e3      	b.n	800b20e <sinf+0x2a>
 800b246:	eddd 0a01 	vldr	s1, [sp, #4]
 800b24a:	ed9d 0a00 	vldr	s0, [sp]
 800b24e:	2001      	movs	r0, #1
 800b250:	f000 f866 	bl	800b320 <__kernel_sinf>
 800b254:	eeb1 0a40 	vneg.f32	s0, s0
 800b258:	e7d9      	b.n	800b20e <sinf+0x2a>
 800b25a:	eddd 0a01 	vldr	s1, [sp, #4]
 800b25e:	ed9d 0a00 	vldr	s0, [sp]
 800b262:	f000 f805 	bl	800b270 <__kernel_cosf>
 800b266:	e7f5      	b.n	800b254 <sinf+0x70>
 800b268:	3f490fd8 	.word	0x3f490fd8
 800b26c:	00000000 	.word	0x00000000

0800b270 <__kernel_cosf>:
 800b270:	ee10 3a10 	vmov	r3, s0
 800b274:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b278:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b27c:	eef0 6a40 	vmov.f32	s13, s0
 800b280:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b284:	d204      	bcs.n	800b290 <__kernel_cosf+0x20>
 800b286:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b28a:	ee17 2a90 	vmov	r2, s15
 800b28e:	b342      	cbz	r2, 800b2e2 <__kernel_cosf+0x72>
 800b290:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b294:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800b300 <__kernel_cosf+0x90>
 800b298:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800b304 <__kernel_cosf+0x94>
 800b29c:	4a1a      	ldr	r2, [pc, #104]	@ (800b308 <__kernel_cosf+0x98>)
 800b29e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b30c <__kernel_cosf+0x9c>
 800b2a8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b2ac:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800b310 <__kernel_cosf+0xa0>
 800b2b0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b2b4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800b314 <__kernel_cosf+0xa4>
 800b2b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b2bc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800b318 <__kernel_cosf+0xa8>
 800b2c0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b2c4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800b2c8:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b2cc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b2d0:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b2d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2d8:	d804      	bhi.n	800b2e4 <__kernel_cosf+0x74>
 800b2da:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b2de:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b2e2:	4770      	bx	lr
 800b2e4:	4a0d      	ldr	r2, [pc, #52]	@ (800b31c <__kernel_cosf+0xac>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	bf9a      	itte	ls
 800b2ea:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800b2ee:	ee07 3a10 	vmovls	s14, r3
 800b2f2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800b2f6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b2fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b2fe:	e7ec      	b.n	800b2da <__kernel_cosf+0x6a>
 800b300:	ad47d74e 	.word	0xad47d74e
 800b304:	310f74f6 	.word	0x310f74f6
 800b308:	3e999999 	.word	0x3e999999
 800b30c:	b493f27c 	.word	0xb493f27c
 800b310:	37d00d01 	.word	0x37d00d01
 800b314:	bab60b61 	.word	0xbab60b61
 800b318:	3d2aaaab 	.word	0x3d2aaaab
 800b31c:	3f480000 	.word	0x3f480000

0800b320 <__kernel_sinf>:
 800b320:	ee10 3a10 	vmov	r3, s0
 800b324:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b328:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b32c:	d204      	bcs.n	800b338 <__kernel_sinf+0x18>
 800b32e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b332:	ee17 3a90 	vmov	r3, s15
 800b336:	b35b      	cbz	r3, 800b390 <__kernel_sinf+0x70>
 800b338:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b33c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800b394 <__kernel_sinf+0x74>
 800b340:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800b398 <__kernel_sinf+0x78>
 800b344:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b348:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800b39c <__kernel_sinf+0x7c>
 800b34c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b350:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800b3a0 <__kernel_sinf+0x80>
 800b354:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b358:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800b3a4 <__kernel_sinf+0x84>
 800b35c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b360:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b364:	b930      	cbnz	r0, 800b374 <__kernel_sinf+0x54>
 800b366:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800b3a8 <__kernel_sinf+0x88>
 800b36a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b36e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b372:	4770      	bx	lr
 800b374:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b378:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b37c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b380:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b384:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800b3ac <__kernel_sinf+0x8c>
 800b388:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b38c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b390:	4770      	bx	lr
 800b392:	bf00      	nop
 800b394:	2f2ec9d3 	.word	0x2f2ec9d3
 800b398:	b2d72f34 	.word	0xb2d72f34
 800b39c:	3638ef1b 	.word	0x3638ef1b
 800b3a0:	b9500d01 	.word	0xb9500d01
 800b3a4:	3c088889 	.word	0x3c088889
 800b3a8:	be2aaaab 	.word	0xbe2aaaab
 800b3ac:	3e2aaaab 	.word	0x3e2aaaab

0800b3b0 <__ieee754_rem_pio2f>:
 800b3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3b2:	ee10 6a10 	vmov	r6, s0
 800b3b6:	4b88      	ldr	r3, [pc, #544]	@ (800b5d8 <__ieee754_rem_pio2f+0x228>)
 800b3b8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800b3bc:	429d      	cmp	r5, r3
 800b3be:	b087      	sub	sp, #28
 800b3c0:	4604      	mov	r4, r0
 800b3c2:	d805      	bhi.n	800b3d0 <__ieee754_rem_pio2f+0x20>
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	ed80 0a00 	vstr	s0, [r0]
 800b3ca:	6043      	str	r3, [r0, #4]
 800b3cc:	2000      	movs	r0, #0
 800b3ce:	e022      	b.n	800b416 <__ieee754_rem_pio2f+0x66>
 800b3d0:	4b82      	ldr	r3, [pc, #520]	@ (800b5dc <__ieee754_rem_pio2f+0x22c>)
 800b3d2:	429d      	cmp	r5, r3
 800b3d4:	d83a      	bhi.n	800b44c <__ieee754_rem_pio2f+0x9c>
 800b3d6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b3da:	2e00      	cmp	r6, #0
 800b3dc:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800b5e0 <__ieee754_rem_pio2f+0x230>
 800b3e0:	4a80      	ldr	r2, [pc, #512]	@ (800b5e4 <__ieee754_rem_pio2f+0x234>)
 800b3e2:	f023 030f 	bic.w	r3, r3, #15
 800b3e6:	dd18      	ble.n	800b41a <__ieee754_rem_pio2f+0x6a>
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b3ee:	bf09      	itett	eq
 800b3f0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800b5e8 <__ieee754_rem_pio2f+0x238>
 800b3f4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800b5ec <__ieee754_rem_pio2f+0x23c>
 800b3f8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800b5f0 <__ieee754_rem_pio2f+0x240>
 800b3fc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b400:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800b404:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b408:	ed80 7a00 	vstr	s14, [r0]
 800b40c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b410:	edc0 7a01 	vstr	s15, [r0, #4]
 800b414:	2001      	movs	r0, #1
 800b416:	b007      	add	sp, #28
 800b418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b41a:	4293      	cmp	r3, r2
 800b41c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b420:	bf09      	itett	eq
 800b422:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800b5e8 <__ieee754_rem_pio2f+0x238>
 800b426:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800b5ec <__ieee754_rem_pio2f+0x23c>
 800b42a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800b5f0 <__ieee754_rem_pio2f+0x240>
 800b42e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b432:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b436:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b43a:	ed80 7a00 	vstr	s14, [r0]
 800b43e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b442:	edc0 7a01 	vstr	s15, [r0, #4]
 800b446:	f04f 30ff 	mov.w	r0, #4294967295
 800b44a:	e7e4      	b.n	800b416 <__ieee754_rem_pio2f+0x66>
 800b44c:	4b69      	ldr	r3, [pc, #420]	@ (800b5f4 <__ieee754_rem_pio2f+0x244>)
 800b44e:	429d      	cmp	r5, r3
 800b450:	d873      	bhi.n	800b53a <__ieee754_rem_pio2f+0x18a>
 800b452:	f000 f8dd 	bl	800b610 <fabsf>
 800b456:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800b5f8 <__ieee754_rem_pio2f+0x248>
 800b45a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b45e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b466:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b46a:	ee17 0a90 	vmov	r0, s15
 800b46e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b5e0 <__ieee754_rem_pio2f+0x230>
 800b472:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b476:	281f      	cmp	r0, #31
 800b478:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b5ec <__ieee754_rem_pio2f+0x23c>
 800b47c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b480:	eeb1 6a47 	vneg.f32	s12, s14
 800b484:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b488:	ee16 1a90 	vmov	r1, s13
 800b48c:	dc09      	bgt.n	800b4a2 <__ieee754_rem_pio2f+0xf2>
 800b48e:	4a5b      	ldr	r2, [pc, #364]	@ (800b5fc <__ieee754_rem_pio2f+0x24c>)
 800b490:	1e47      	subs	r7, r0, #1
 800b492:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b496:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800b49a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d107      	bne.n	800b4b2 <__ieee754_rem_pio2f+0x102>
 800b4a2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800b4a6:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800b4aa:	2a08      	cmp	r2, #8
 800b4ac:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800b4b0:	dc14      	bgt.n	800b4dc <__ieee754_rem_pio2f+0x12c>
 800b4b2:	6021      	str	r1, [r4, #0]
 800b4b4:	ed94 7a00 	vldr	s14, [r4]
 800b4b8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b4bc:	2e00      	cmp	r6, #0
 800b4be:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b4c2:	ed84 0a01 	vstr	s0, [r4, #4]
 800b4c6:	daa6      	bge.n	800b416 <__ieee754_rem_pio2f+0x66>
 800b4c8:	eeb1 7a47 	vneg.f32	s14, s14
 800b4cc:	eeb1 0a40 	vneg.f32	s0, s0
 800b4d0:	ed84 7a00 	vstr	s14, [r4]
 800b4d4:	ed84 0a01 	vstr	s0, [r4, #4]
 800b4d8:	4240      	negs	r0, r0
 800b4da:	e79c      	b.n	800b416 <__ieee754_rem_pio2f+0x66>
 800b4dc:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800b5e8 <__ieee754_rem_pio2f+0x238>
 800b4e0:	eef0 6a40 	vmov.f32	s13, s0
 800b4e4:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b4e8:	ee70 7a66 	vsub.f32	s15, s0, s13
 800b4ec:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b4f0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b5f0 <__ieee754_rem_pio2f+0x240>
 800b4f4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b4f8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b4fc:	ee15 2a90 	vmov	r2, s11
 800b500:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b504:	1a5b      	subs	r3, r3, r1
 800b506:	2b19      	cmp	r3, #25
 800b508:	dc04      	bgt.n	800b514 <__ieee754_rem_pio2f+0x164>
 800b50a:	edc4 5a00 	vstr	s11, [r4]
 800b50e:	eeb0 0a66 	vmov.f32	s0, s13
 800b512:	e7cf      	b.n	800b4b4 <__ieee754_rem_pio2f+0x104>
 800b514:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800b600 <__ieee754_rem_pio2f+0x250>
 800b518:	eeb0 0a66 	vmov.f32	s0, s13
 800b51c:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b520:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b524:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800b604 <__ieee754_rem_pio2f+0x254>
 800b528:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b52c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b530:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b534:	ed84 7a00 	vstr	s14, [r4]
 800b538:	e7bc      	b.n	800b4b4 <__ieee754_rem_pio2f+0x104>
 800b53a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800b53e:	d306      	bcc.n	800b54e <__ieee754_rem_pio2f+0x19e>
 800b540:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b544:	edc0 7a01 	vstr	s15, [r0, #4]
 800b548:	edc0 7a00 	vstr	s15, [r0]
 800b54c:	e73e      	b.n	800b3cc <__ieee754_rem_pio2f+0x1c>
 800b54e:	15ea      	asrs	r2, r5, #23
 800b550:	3a86      	subs	r2, #134	@ 0x86
 800b552:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b556:	ee07 3a90 	vmov	s15, r3
 800b55a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b55e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800b608 <__ieee754_rem_pio2f+0x258>
 800b562:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b566:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b56a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b56e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b572:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b576:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b57a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b57e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b582:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b586:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b58e:	edcd 7a05 	vstr	s15, [sp, #20]
 800b592:	d11e      	bne.n	800b5d2 <__ieee754_rem_pio2f+0x222>
 800b594:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b59c:	bf0c      	ite	eq
 800b59e:	2301      	moveq	r3, #1
 800b5a0:	2302      	movne	r3, #2
 800b5a2:	491a      	ldr	r1, [pc, #104]	@ (800b60c <__ieee754_rem_pio2f+0x25c>)
 800b5a4:	9101      	str	r1, [sp, #4]
 800b5a6:	2102      	movs	r1, #2
 800b5a8:	9100      	str	r1, [sp, #0]
 800b5aa:	a803      	add	r0, sp, #12
 800b5ac:	4621      	mov	r1, r4
 800b5ae:	f000 f89d 	bl	800b6ec <__kernel_rem_pio2f>
 800b5b2:	2e00      	cmp	r6, #0
 800b5b4:	f6bf af2f 	bge.w	800b416 <__ieee754_rem_pio2f+0x66>
 800b5b8:	edd4 7a00 	vldr	s15, [r4]
 800b5bc:	eef1 7a67 	vneg.f32	s15, s15
 800b5c0:	edc4 7a00 	vstr	s15, [r4]
 800b5c4:	edd4 7a01 	vldr	s15, [r4, #4]
 800b5c8:	eef1 7a67 	vneg.f32	s15, s15
 800b5cc:	edc4 7a01 	vstr	s15, [r4, #4]
 800b5d0:	e782      	b.n	800b4d8 <__ieee754_rem_pio2f+0x128>
 800b5d2:	2303      	movs	r3, #3
 800b5d4:	e7e5      	b.n	800b5a2 <__ieee754_rem_pio2f+0x1f2>
 800b5d6:	bf00      	nop
 800b5d8:	3f490fd8 	.word	0x3f490fd8
 800b5dc:	4016cbe3 	.word	0x4016cbe3
 800b5e0:	3fc90f80 	.word	0x3fc90f80
 800b5e4:	3fc90fd0 	.word	0x3fc90fd0
 800b5e8:	37354400 	.word	0x37354400
 800b5ec:	37354443 	.word	0x37354443
 800b5f0:	2e85a308 	.word	0x2e85a308
 800b5f4:	43490f80 	.word	0x43490f80
 800b5f8:	3f22f984 	.word	0x3f22f984
 800b5fc:	0800bcdc 	.word	0x0800bcdc
 800b600:	2e85a300 	.word	0x2e85a300
 800b604:	248d3132 	.word	0x248d3132
 800b608:	43800000 	.word	0x43800000
 800b60c:	0800bd5c 	.word	0x0800bd5c

0800b610 <fabsf>:
 800b610:	ee10 3a10 	vmov	r3, s0
 800b614:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b618:	ee00 3a10 	vmov	s0, r3
 800b61c:	4770      	bx	lr
	...

0800b620 <scalbnf>:
 800b620:	ee10 3a10 	vmov	r3, s0
 800b624:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800b628:	d02b      	beq.n	800b682 <scalbnf+0x62>
 800b62a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b62e:	d302      	bcc.n	800b636 <scalbnf+0x16>
 800b630:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b634:	4770      	bx	lr
 800b636:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800b63a:	d123      	bne.n	800b684 <scalbnf+0x64>
 800b63c:	4b24      	ldr	r3, [pc, #144]	@ (800b6d0 <scalbnf+0xb0>)
 800b63e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800b6d4 <scalbnf+0xb4>
 800b642:	4298      	cmp	r0, r3
 800b644:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b648:	db17      	blt.n	800b67a <scalbnf+0x5a>
 800b64a:	ee10 3a10 	vmov	r3, s0
 800b64e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b652:	3a19      	subs	r2, #25
 800b654:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b658:	4288      	cmp	r0, r1
 800b65a:	dd15      	ble.n	800b688 <scalbnf+0x68>
 800b65c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800b6d8 <scalbnf+0xb8>
 800b660:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800b6dc <scalbnf+0xbc>
 800b664:	ee10 3a10 	vmov	r3, s0
 800b668:	eeb0 7a67 	vmov.f32	s14, s15
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	bfb8      	it	lt
 800b670:	eef0 7a66 	vmovlt.f32	s15, s13
 800b674:	ee27 0a87 	vmul.f32	s0, s15, s14
 800b678:	4770      	bx	lr
 800b67a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b6e0 <scalbnf+0xc0>
 800b67e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b682:	4770      	bx	lr
 800b684:	0dd2      	lsrs	r2, r2, #23
 800b686:	e7e5      	b.n	800b654 <scalbnf+0x34>
 800b688:	4410      	add	r0, r2
 800b68a:	28fe      	cmp	r0, #254	@ 0xfe
 800b68c:	dce6      	bgt.n	800b65c <scalbnf+0x3c>
 800b68e:	2800      	cmp	r0, #0
 800b690:	dd06      	ble.n	800b6a0 <scalbnf+0x80>
 800b692:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b696:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b69a:	ee00 3a10 	vmov	s0, r3
 800b69e:	4770      	bx	lr
 800b6a0:	f110 0f16 	cmn.w	r0, #22
 800b6a4:	da09      	bge.n	800b6ba <scalbnf+0x9a>
 800b6a6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800b6e0 <scalbnf+0xc0>
 800b6aa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800b6e4 <scalbnf+0xc4>
 800b6ae:	ee10 3a10 	vmov	r3, s0
 800b6b2:	eeb0 7a67 	vmov.f32	s14, s15
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	e7d9      	b.n	800b66e <scalbnf+0x4e>
 800b6ba:	3019      	adds	r0, #25
 800b6bc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b6c0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b6c4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800b6e8 <scalbnf+0xc8>
 800b6c8:	ee07 3a90 	vmov	s15, r3
 800b6cc:	e7d7      	b.n	800b67e <scalbnf+0x5e>
 800b6ce:	bf00      	nop
 800b6d0:	ffff3cb0 	.word	0xffff3cb0
 800b6d4:	4c000000 	.word	0x4c000000
 800b6d8:	7149f2ca 	.word	0x7149f2ca
 800b6dc:	f149f2ca 	.word	0xf149f2ca
 800b6e0:	0da24260 	.word	0x0da24260
 800b6e4:	8da24260 	.word	0x8da24260
 800b6e8:	33000000 	.word	0x33000000

0800b6ec <__kernel_rem_pio2f>:
 800b6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f0:	ed2d 8b04 	vpush	{d8-d9}
 800b6f4:	b0d9      	sub	sp, #356	@ 0x164
 800b6f6:	4690      	mov	r8, r2
 800b6f8:	9001      	str	r0, [sp, #4]
 800b6fa:	4ab6      	ldr	r2, [pc, #728]	@ (800b9d4 <__kernel_rem_pio2f+0x2e8>)
 800b6fc:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800b6fe:	f118 0f04 	cmn.w	r8, #4
 800b702:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800b706:	460f      	mov	r7, r1
 800b708:	f103 3bff 	add.w	fp, r3, #4294967295
 800b70c:	db26      	blt.n	800b75c <__kernel_rem_pio2f+0x70>
 800b70e:	f1b8 0203 	subs.w	r2, r8, #3
 800b712:	bf48      	it	mi
 800b714:	f108 0204 	addmi.w	r2, r8, #4
 800b718:	10d2      	asrs	r2, r2, #3
 800b71a:	1c55      	adds	r5, r2, #1
 800b71c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b71e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800b9e4 <__kernel_rem_pio2f+0x2f8>
 800b722:	00e8      	lsls	r0, r5, #3
 800b724:	eba2 060b 	sub.w	r6, r2, fp
 800b728:	9002      	str	r0, [sp, #8]
 800b72a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800b72e:	eb0a 0c0b 	add.w	ip, sl, fp
 800b732:	ac1c      	add	r4, sp, #112	@ 0x70
 800b734:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800b738:	2000      	movs	r0, #0
 800b73a:	4560      	cmp	r0, ip
 800b73c:	dd10      	ble.n	800b760 <__kernel_rem_pio2f+0x74>
 800b73e:	a91c      	add	r1, sp, #112	@ 0x70
 800b740:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800b744:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800b748:	2600      	movs	r6, #0
 800b74a:	4556      	cmp	r6, sl
 800b74c:	dc24      	bgt.n	800b798 <__kernel_rem_pio2f+0xac>
 800b74e:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b752:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800b9e4 <__kernel_rem_pio2f+0x2f8>
 800b756:	4684      	mov	ip, r0
 800b758:	2400      	movs	r4, #0
 800b75a:	e016      	b.n	800b78a <__kernel_rem_pio2f+0x9e>
 800b75c:	2200      	movs	r2, #0
 800b75e:	e7dc      	b.n	800b71a <__kernel_rem_pio2f+0x2e>
 800b760:	42c6      	cmn	r6, r0
 800b762:	bf5d      	ittte	pl
 800b764:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800b768:	ee07 1a90 	vmovpl	s15, r1
 800b76c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b770:	eef0 7a47 	vmovmi.f32	s15, s14
 800b774:	ece4 7a01 	vstmia	r4!, {s15}
 800b778:	3001      	adds	r0, #1
 800b77a:	e7de      	b.n	800b73a <__kernel_rem_pio2f+0x4e>
 800b77c:	ecfe 6a01 	vldmia	lr!, {s13}
 800b780:	ed3c 7a01 	vldmdb	ip!, {s14}
 800b784:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b788:	3401      	adds	r4, #1
 800b78a:	455c      	cmp	r4, fp
 800b78c:	ddf6      	ble.n	800b77c <__kernel_rem_pio2f+0x90>
 800b78e:	ece9 7a01 	vstmia	r9!, {s15}
 800b792:	3601      	adds	r6, #1
 800b794:	3004      	adds	r0, #4
 800b796:	e7d8      	b.n	800b74a <__kernel_rem_pio2f+0x5e>
 800b798:	a908      	add	r1, sp, #32
 800b79a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b79e:	9104      	str	r1, [sp, #16]
 800b7a0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b7a2:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800b9e0 <__kernel_rem_pio2f+0x2f4>
 800b7a6:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800b9dc <__kernel_rem_pio2f+0x2f0>
 800b7aa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800b7ae:	9203      	str	r2, [sp, #12]
 800b7b0:	4654      	mov	r4, sl
 800b7b2:	00a2      	lsls	r2, r4, #2
 800b7b4:	9205      	str	r2, [sp, #20]
 800b7b6:	aa58      	add	r2, sp, #352	@ 0x160
 800b7b8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800b7bc:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800b7c0:	a944      	add	r1, sp, #272	@ 0x110
 800b7c2:	aa08      	add	r2, sp, #32
 800b7c4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800b7c8:	4694      	mov	ip, r2
 800b7ca:	4626      	mov	r6, r4
 800b7cc:	2e00      	cmp	r6, #0
 800b7ce:	dc4c      	bgt.n	800b86a <__kernel_rem_pio2f+0x17e>
 800b7d0:	4628      	mov	r0, r5
 800b7d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b7d6:	f7ff ff23 	bl	800b620 <scalbnf>
 800b7da:	eeb0 8a40 	vmov.f32	s16, s0
 800b7de:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800b7e2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b7e6:	f000 f9e9 	bl	800bbbc <floorf>
 800b7ea:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800b7ee:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b7f2:	2d00      	cmp	r5, #0
 800b7f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7f8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b7fc:	ee17 9a90 	vmov	r9, s15
 800b800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b804:	ee38 8a67 	vsub.f32	s16, s16, s15
 800b808:	dd41      	ble.n	800b88e <__kernel_rem_pio2f+0x1a2>
 800b80a:	f104 3cff 	add.w	ip, r4, #4294967295
 800b80e:	a908      	add	r1, sp, #32
 800b810:	f1c5 0e08 	rsb	lr, r5, #8
 800b814:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800b818:	fa46 f00e 	asr.w	r0, r6, lr
 800b81c:	4481      	add	r9, r0
 800b81e:	fa00 f00e 	lsl.w	r0, r0, lr
 800b822:	1a36      	subs	r6, r6, r0
 800b824:	f1c5 0007 	rsb	r0, r5, #7
 800b828:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800b82c:	4106      	asrs	r6, r0
 800b82e:	2e00      	cmp	r6, #0
 800b830:	dd3c      	ble.n	800b8ac <__kernel_rem_pio2f+0x1c0>
 800b832:	f04f 0e00 	mov.w	lr, #0
 800b836:	f109 0901 	add.w	r9, r9, #1
 800b83a:	4670      	mov	r0, lr
 800b83c:	4574      	cmp	r4, lr
 800b83e:	dc68      	bgt.n	800b912 <__kernel_rem_pio2f+0x226>
 800b840:	2d00      	cmp	r5, #0
 800b842:	dd03      	ble.n	800b84c <__kernel_rem_pio2f+0x160>
 800b844:	2d01      	cmp	r5, #1
 800b846:	d074      	beq.n	800b932 <__kernel_rem_pio2f+0x246>
 800b848:	2d02      	cmp	r5, #2
 800b84a:	d07d      	beq.n	800b948 <__kernel_rem_pio2f+0x25c>
 800b84c:	2e02      	cmp	r6, #2
 800b84e:	d12d      	bne.n	800b8ac <__kernel_rem_pio2f+0x1c0>
 800b850:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b854:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b858:	b340      	cbz	r0, 800b8ac <__kernel_rem_pio2f+0x1c0>
 800b85a:	4628      	mov	r0, r5
 800b85c:	9306      	str	r3, [sp, #24]
 800b85e:	f7ff fedf 	bl	800b620 <scalbnf>
 800b862:	9b06      	ldr	r3, [sp, #24]
 800b864:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b868:	e020      	b.n	800b8ac <__kernel_rem_pio2f+0x1c0>
 800b86a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b86e:	3e01      	subs	r6, #1
 800b870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b878:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b87c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b880:	ecac 0a01 	vstmia	ip!, {s0}
 800b884:	ed30 0a01 	vldmdb	r0!, {s0}
 800b888:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b88c:	e79e      	b.n	800b7cc <__kernel_rem_pio2f+0xe0>
 800b88e:	d105      	bne.n	800b89c <__kernel_rem_pio2f+0x1b0>
 800b890:	1e60      	subs	r0, r4, #1
 800b892:	a908      	add	r1, sp, #32
 800b894:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800b898:	11f6      	asrs	r6, r6, #7
 800b89a:	e7c8      	b.n	800b82e <__kernel_rem_pio2f+0x142>
 800b89c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b8a0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b8a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8a8:	da31      	bge.n	800b90e <__kernel_rem_pio2f+0x222>
 800b8aa:	2600      	movs	r6, #0
 800b8ac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8b4:	f040 8098 	bne.w	800b9e8 <__kernel_rem_pio2f+0x2fc>
 800b8b8:	1e60      	subs	r0, r4, #1
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	4550      	cmp	r0, sl
 800b8be:	da4b      	bge.n	800b958 <__kernel_rem_pio2f+0x26c>
 800b8c0:	2a00      	cmp	r2, #0
 800b8c2:	d065      	beq.n	800b990 <__kernel_rem_pio2f+0x2a4>
 800b8c4:	3c01      	subs	r4, #1
 800b8c6:	ab08      	add	r3, sp, #32
 800b8c8:	3d08      	subs	r5, #8
 800b8ca:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d0f8      	beq.n	800b8c4 <__kernel_rem_pio2f+0x1d8>
 800b8d2:	4628      	mov	r0, r5
 800b8d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b8d8:	f7ff fea2 	bl	800b620 <scalbnf>
 800b8dc:	1c63      	adds	r3, r4, #1
 800b8de:	aa44      	add	r2, sp, #272	@ 0x110
 800b8e0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800b9e0 <__kernel_rem_pio2f+0x2f4>
 800b8e4:	0099      	lsls	r1, r3, #2
 800b8e6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b8ea:	4623      	mov	r3, r4
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	f280 80a9 	bge.w	800ba44 <__kernel_rem_pio2f+0x358>
 800b8f2:	4623      	mov	r3, r4
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	f2c0 80c7 	blt.w	800ba88 <__kernel_rem_pio2f+0x39c>
 800b8fa:	aa44      	add	r2, sp, #272	@ 0x110
 800b8fc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800b900:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800b9d8 <__kernel_rem_pio2f+0x2ec>
 800b904:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800b9e4 <__kernel_rem_pio2f+0x2f8>
 800b908:	2000      	movs	r0, #0
 800b90a:	1ae2      	subs	r2, r4, r3
 800b90c:	e0b1      	b.n	800ba72 <__kernel_rem_pio2f+0x386>
 800b90e:	2602      	movs	r6, #2
 800b910:	e78f      	b.n	800b832 <__kernel_rem_pio2f+0x146>
 800b912:	f852 1b04 	ldr.w	r1, [r2], #4
 800b916:	b948      	cbnz	r0, 800b92c <__kernel_rem_pio2f+0x240>
 800b918:	b121      	cbz	r1, 800b924 <__kernel_rem_pio2f+0x238>
 800b91a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800b91e:	f842 1c04 	str.w	r1, [r2, #-4]
 800b922:	2101      	movs	r1, #1
 800b924:	f10e 0e01 	add.w	lr, lr, #1
 800b928:	4608      	mov	r0, r1
 800b92a:	e787      	b.n	800b83c <__kernel_rem_pio2f+0x150>
 800b92c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800b930:	e7f5      	b.n	800b91e <__kernel_rem_pio2f+0x232>
 800b932:	f104 3cff 	add.w	ip, r4, #4294967295
 800b936:	aa08      	add	r2, sp, #32
 800b938:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b93c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b940:	a908      	add	r1, sp, #32
 800b942:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800b946:	e781      	b.n	800b84c <__kernel_rem_pio2f+0x160>
 800b948:	f104 3cff 	add.w	ip, r4, #4294967295
 800b94c:	aa08      	add	r2, sp, #32
 800b94e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b952:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800b956:	e7f3      	b.n	800b940 <__kernel_rem_pio2f+0x254>
 800b958:	a908      	add	r1, sp, #32
 800b95a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b95e:	3801      	subs	r0, #1
 800b960:	430a      	orrs	r2, r1
 800b962:	e7ab      	b.n	800b8bc <__kernel_rem_pio2f+0x1d0>
 800b964:	3201      	adds	r2, #1
 800b966:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800b96a:	2e00      	cmp	r6, #0
 800b96c:	d0fa      	beq.n	800b964 <__kernel_rem_pio2f+0x278>
 800b96e:	9905      	ldr	r1, [sp, #20]
 800b970:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800b974:	eb0d 0001 	add.w	r0, sp, r1
 800b978:	18e6      	adds	r6, r4, r3
 800b97a:	a91c      	add	r1, sp, #112	@ 0x70
 800b97c:	f104 0c01 	add.w	ip, r4, #1
 800b980:	384c      	subs	r0, #76	@ 0x4c
 800b982:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800b986:	4422      	add	r2, r4
 800b988:	4562      	cmp	r2, ip
 800b98a:	da04      	bge.n	800b996 <__kernel_rem_pio2f+0x2aa>
 800b98c:	4614      	mov	r4, r2
 800b98e:	e710      	b.n	800b7b2 <__kernel_rem_pio2f+0xc6>
 800b990:	9804      	ldr	r0, [sp, #16]
 800b992:	2201      	movs	r2, #1
 800b994:	e7e7      	b.n	800b966 <__kernel_rem_pio2f+0x27a>
 800b996:	9903      	ldr	r1, [sp, #12]
 800b998:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b99c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800b9a0:	9105      	str	r1, [sp, #20]
 800b9a2:	ee07 1a90 	vmov	s15, r1
 800b9a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9aa:	2400      	movs	r4, #0
 800b9ac:	ece6 7a01 	vstmia	r6!, {s15}
 800b9b0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800b9e4 <__kernel_rem_pio2f+0x2f8>
 800b9b4:	46b1      	mov	r9, r6
 800b9b6:	455c      	cmp	r4, fp
 800b9b8:	dd04      	ble.n	800b9c4 <__kernel_rem_pio2f+0x2d8>
 800b9ba:	ece0 7a01 	vstmia	r0!, {s15}
 800b9be:	f10c 0c01 	add.w	ip, ip, #1
 800b9c2:	e7e1      	b.n	800b988 <__kernel_rem_pio2f+0x29c>
 800b9c4:	ecfe 6a01 	vldmia	lr!, {s13}
 800b9c8:	ed39 7a01 	vldmdb	r9!, {s14}
 800b9cc:	3401      	adds	r4, #1
 800b9ce:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b9d2:	e7f0      	b.n	800b9b6 <__kernel_rem_pio2f+0x2ca>
 800b9d4:	0800c0a0 	.word	0x0800c0a0
 800b9d8:	0800c074 	.word	0x0800c074
 800b9dc:	43800000 	.word	0x43800000
 800b9e0:	3b800000 	.word	0x3b800000
 800b9e4:	00000000 	.word	0x00000000
 800b9e8:	9b02      	ldr	r3, [sp, #8]
 800b9ea:	eeb0 0a48 	vmov.f32	s0, s16
 800b9ee:	eba3 0008 	sub.w	r0, r3, r8
 800b9f2:	f7ff fe15 	bl	800b620 <scalbnf>
 800b9f6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800b9dc <__kernel_rem_pio2f+0x2f0>
 800b9fa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b9fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba02:	db19      	blt.n	800ba38 <__kernel_rem_pio2f+0x34c>
 800ba04:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800b9e0 <__kernel_rem_pio2f+0x2f4>
 800ba08:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ba0c:	aa08      	add	r2, sp, #32
 800ba0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba12:	3508      	adds	r5, #8
 800ba14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba18:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ba1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba20:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ba24:	ee10 3a10 	vmov	r3, s0
 800ba28:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ba2c:	ee17 3a90 	vmov	r3, s15
 800ba30:	3401      	adds	r4, #1
 800ba32:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ba36:	e74c      	b.n	800b8d2 <__kernel_rem_pio2f+0x1e6>
 800ba38:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ba3c:	aa08      	add	r2, sp, #32
 800ba3e:	ee10 3a10 	vmov	r3, s0
 800ba42:	e7f6      	b.n	800ba32 <__kernel_rem_pio2f+0x346>
 800ba44:	a808      	add	r0, sp, #32
 800ba46:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800ba4a:	9001      	str	r0, [sp, #4]
 800ba4c:	ee07 0a90 	vmov	s15, r0
 800ba50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba54:	3b01      	subs	r3, #1
 800ba56:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ba5a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ba5e:	ed62 7a01 	vstmdb	r2!, {s15}
 800ba62:	e743      	b.n	800b8ec <__kernel_rem_pio2f+0x200>
 800ba64:	ecfc 6a01 	vldmia	ip!, {s13}
 800ba68:	ecb5 7a01 	vldmia	r5!, {s14}
 800ba6c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ba70:	3001      	adds	r0, #1
 800ba72:	4550      	cmp	r0, sl
 800ba74:	dc01      	bgt.n	800ba7a <__kernel_rem_pio2f+0x38e>
 800ba76:	4290      	cmp	r0, r2
 800ba78:	ddf4      	ble.n	800ba64 <__kernel_rem_pio2f+0x378>
 800ba7a:	a858      	add	r0, sp, #352	@ 0x160
 800ba7c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ba80:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800ba84:	3b01      	subs	r3, #1
 800ba86:	e735      	b.n	800b8f4 <__kernel_rem_pio2f+0x208>
 800ba88:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ba8a:	2b02      	cmp	r3, #2
 800ba8c:	dc09      	bgt.n	800baa2 <__kernel_rem_pio2f+0x3b6>
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	dc27      	bgt.n	800bae2 <__kernel_rem_pio2f+0x3f6>
 800ba92:	d040      	beq.n	800bb16 <__kernel_rem_pio2f+0x42a>
 800ba94:	f009 0007 	and.w	r0, r9, #7
 800ba98:	b059      	add	sp, #356	@ 0x164
 800ba9a:	ecbd 8b04 	vpop	{d8-d9}
 800ba9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800baa4:	2b03      	cmp	r3, #3
 800baa6:	d1f5      	bne.n	800ba94 <__kernel_rem_pio2f+0x3a8>
 800baa8:	aa30      	add	r2, sp, #192	@ 0xc0
 800baaa:	1f0b      	subs	r3, r1, #4
 800baac:	4413      	add	r3, r2
 800baae:	461a      	mov	r2, r3
 800bab0:	4620      	mov	r0, r4
 800bab2:	2800      	cmp	r0, #0
 800bab4:	dc50      	bgt.n	800bb58 <__kernel_rem_pio2f+0x46c>
 800bab6:	4622      	mov	r2, r4
 800bab8:	2a01      	cmp	r2, #1
 800baba:	dc5d      	bgt.n	800bb78 <__kernel_rem_pio2f+0x48c>
 800babc:	ab30      	add	r3, sp, #192	@ 0xc0
 800babe:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800b9e4 <__kernel_rem_pio2f+0x2f8>
 800bac2:	440b      	add	r3, r1
 800bac4:	2c01      	cmp	r4, #1
 800bac6:	dc67      	bgt.n	800bb98 <__kernel_rem_pio2f+0x4ac>
 800bac8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800bacc:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800bad0:	2e00      	cmp	r6, #0
 800bad2:	d167      	bne.n	800bba4 <__kernel_rem_pio2f+0x4b8>
 800bad4:	edc7 6a00 	vstr	s13, [r7]
 800bad8:	ed87 7a01 	vstr	s14, [r7, #4]
 800badc:	edc7 7a02 	vstr	s15, [r7, #8]
 800bae0:	e7d8      	b.n	800ba94 <__kernel_rem_pio2f+0x3a8>
 800bae2:	ab30      	add	r3, sp, #192	@ 0xc0
 800bae4:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800b9e4 <__kernel_rem_pio2f+0x2f8>
 800bae8:	440b      	add	r3, r1
 800baea:	4622      	mov	r2, r4
 800baec:	2a00      	cmp	r2, #0
 800baee:	da24      	bge.n	800bb3a <__kernel_rem_pio2f+0x44e>
 800baf0:	b34e      	cbz	r6, 800bb46 <__kernel_rem_pio2f+0x45a>
 800baf2:	eef1 7a47 	vneg.f32	s15, s14
 800baf6:	edc7 7a00 	vstr	s15, [r7]
 800bafa:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800bafe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb02:	aa31      	add	r2, sp, #196	@ 0xc4
 800bb04:	2301      	movs	r3, #1
 800bb06:	429c      	cmp	r4, r3
 800bb08:	da20      	bge.n	800bb4c <__kernel_rem_pio2f+0x460>
 800bb0a:	b10e      	cbz	r6, 800bb10 <__kernel_rem_pio2f+0x424>
 800bb0c:	eef1 7a67 	vneg.f32	s15, s15
 800bb10:	edc7 7a01 	vstr	s15, [r7, #4]
 800bb14:	e7be      	b.n	800ba94 <__kernel_rem_pio2f+0x3a8>
 800bb16:	ab30      	add	r3, sp, #192	@ 0xc0
 800bb18:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800b9e4 <__kernel_rem_pio2f+0x2f8>
 800bb1c:	440b      	add	r3, r1
 800bb1e:	2c00      	cmp	r4, #0
 800bb20:	da05      	bge.n	800bb2e <__kernel_rem_pio2f+0x442>
 800bb22:	b10e      	cbz	r6, 800bb28 <__kernel_rem_pio2f+0x43c>
 800bb24:	eef1 7a67 	vneg.f32	s15, s15
 800bb28:	edc7 7a00 	vstr	s15, [r7]
 800bb2c:	e7b2      	b.n	800ba94 <__kernel_rem_pio2f+0x3a8>
 800bb2e:	ed33 7a01 	vldmdb	r3!, {s14}
 800bb32:	3c01      	subs	r4, #1
 800bb34:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb38:	e7f1      	b.n	800bb1e <__kernel_rem_pio2f+0x432>
 800bb3a:	ed73 7a01 	vldmdb	r3!, {s15}
 800bb3e:	3a01      	subs	r2, #1
 800bb40:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb44:	e7d2      	b.n	800baec <__kernel_rem_pio2f+0x400>
 800bb46:	eef0 7a47 	vmov.f32	s15, s14
 800bb4a:	e7d4      	b.n	800baf6 <__kernel_rem_pio2f+0x40a>
 800bb4c:	ecb2 7a01 	vldmia	r2!, {s14}
 800bb50:	3301      	adds	r3, #1
 800bb52:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb56:	e7d6      	b.n	800bb06 <__kernel_rem_pio2f+0x41a>
 800bb58:	ed72 7a01 	vldmdb	r2!, {s15}
 800bb5c:	edd2 6a01 	vldr	s13, [r2, #4]
 800bb60:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bb64:	3801      	subs	r0, #1
 800bb66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb6a:	ed82 7a00 	vstr	s14, [r2]
 800bb6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb72:	edc2 7a01 	vstr	s15, [r2, #4]
 800bb76:	e79c      	b.n	800bab2 <__kernel_rem_pio2f+0x3c6>
 800bb78:	ed73 7a01 	vldmdb	r3!, {s15}
 800bb7c:	edd3 6a01 	vldr	s13, [r3, #4]
 800bb80:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bb84:	3a01      	subs	r2, #1
 800bb86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb8a:	ed83 7a00 	vstr	s14, [r3]
 800bb8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb92:	edc3 7a01 	vstr	s15, [r3, #4]
 800bb96:	e78f      	b.n	800bab8 <__kernel_rem_pio2f+0x3cc>
 800bb98:	ed33 7a01 	vldmdb	r3!, {s14}
 800bb9c:	3c01      	subs	r4, #1
 800bb9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bba2:	e78f      	b.n	800bac4 <__kernel_rem_pio2f+0x3d8>
 800bba4:	eef1 6a66 	vneg.f32	s13, s13
 800bba8:	eeb1 7a47 	vneg.f32	s14, s14
 800bbac:	edc7 6a00 	vstr	s13, [r7]
 800bbb0:	ed87 7a01 	vstr	s14, [r7, #4]
 800bbb4:	eef1 7a67 	vneg.f32	s15, s15
 800bbb8:	e790      	b.n	800badc <__kernel_rem_pio2f+0x3f0>
 800bbba:	bf00      	nop

0800bbbc <floorf>:
 800bbbc:	ee10 3a10 	vmov	r3, s0
 800bbc0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bbc4:	3a7f      	subs	r2, #127	@ 0x7f
 800bbc6:	2a16      	cmp	r2, #22
 800bbc8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bbcc:	dc2b      	bgt.n	800bc26 <floorf+0x6a>
 800bbce:	2a00      	cmp	r2, #0
 800bbd0:	da12      	bge.n	800bbf8 <floorf+0x3c>
 800bbd2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bc38 <floorf+0x7c>
 800bbd6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bbda:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbe2:	dd06      	ble.n	800bbf2 <floorf+0x36>
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	da24      	bge.n	800bc32 <floorf+0x76>
 800bbe8:	2900      	cmp	r1, #0
 800bbea:	4b14      	ldr	r3, [pc, #80]	@ (800bc3c <floorf+0x80>)
 800bbec:	bf08      	it	eq
 800bbee:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800bbf2:	ee00 3a10 	vmov	s0, r3
 800bbf6:	4770      	bx	lr
 800bbf8:	4911      	ldr	r1, [pc, #68]	@ (800bc40 <floorf+0x84>)
 800bbfa:	4111      	asrs	r1, r2
 800bbfc:	420b      	tst	r3, r1
 800bbfe:	d0fa      	beq.n	800bbf6 <floorf+0x3a>
 800bc00:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800bc38 <floorf+0x7c>
 800bc04:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bc08:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bc0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc10:	ddef      	ble.n	800bbf2 <floorf+0x36>
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	bfbe      	ittt	lt
 800bc16:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800bc1a:	fa40 f202 	asrlt.w	r2, r0, r2
 800bc1e:	189b      	addlt	r3, r3, r2
 800bc20:	ea23 0301 	bic.w	r3, r3, r1
 800bc24:	e7e5      	b.n	800bbf2 <floorf+0x36>
 800bc26:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bc2a:	d3e4      	bcc.n	800bbf6 <floorf+0x3a>
 800bc2c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bc30:	4770      	bx	lr
 800bc32:	2300      	movs	r3, #0
 800bc34:	e7dd      	b.n	800bbf2 <floorf+0x36>
 800bc36:	bf00      	nop
 800bc38:	7149f2ca 	.word	0x7149f2ca
 800bc3c:	bf800000 	.word	0xbf800000
 800bc40:	007fffff 	.word	0x007fffff

0800bc44 <_init>:
 800bc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc46:	bf00      	nop
 800bc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc4a:	bc08      	pop	{r3}
 800bc4c:	469e      	mov	lr, r3
 800bc4e:	4770      	bx	lr

0800bc50 <_fini>:
 800bc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc52:	bf00      	nop
 800bc54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc56:	bc08      	pop	{r3}
 800bc58:	469e      	mov	lr, r3
 800bc5a:	4770      	bx	lr
