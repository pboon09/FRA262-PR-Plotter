
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000111e0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  080113b8  080113b8  000123b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080119c8  080119c8  00013158  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080119c8  080119c8  000129c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080119d0  080119d0  00013158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080119d0  080119d0  000129d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080119d4  080119d4  000129d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  080119d8  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002110  20000158  08011b30  00013158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002268  08011b30  00013268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013158  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b95f  00000000  00000000  00013188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053a6  00000000  00000000  0003eae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c60  00000000  00000000  00043e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001603  00000000  00000000  00045af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d6f9  00000000  00000000  000470f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a376  00000000  00000000  000747ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119e6d  00000000  00000000  0009eb62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b89cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081f0  00000000  00000000  001b8a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001c0c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000158 	.word	0x20000158
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080113a0 	.word	0x080113a0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000015c 	.word	0x2000015c
 8000214:	080113a0 	.word	0x080113a0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f008 fa14 	bl	800940c <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f007 fafd 	bl	80085f0 <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fdf0 	bl	8001d20 <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	4613      	mov	r3, r2
 800134a:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	88fa      	ldrh	r2, [r7, #6]
 8001356:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3328      	adds	r3, #40	@ 0x28
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	4618      	mov	r0, r3
 8001362:	f001 ffd1 	bl	8003308 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8b3a      	ldrh	r2, [r7, #24]
 8001370:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001390:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800139a:	2b00      	cmp	r3, #0
 800139c:	d15f      	bne.n	800145e <MDXX_set_range+0xda>
		if (duty == 0) {
 800139e:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	d115      	bne.n	80013d8 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3310      	adds	r3, #16
 80013b0:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001530 <MDXX_set_range+0x1ac>
 80013b4:	ed97 0a02 	vldr	s0, [r7, #8]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 f8cd 	bl	8003558 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3328      	adds	r3, #40	@ 0x28
 80013c2:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001530 <MDXX_set_range+0x1ac>
 80013c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 f8c4 	bl	8003558 <PWM_write_range>
			mdxx->cmd = 0;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80013d6:	e0a6      	b.n	8001526 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80013d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	dd1a      	ble.n	800141c <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3310      	adds	r3, #16
 80013ea:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001530 <MDXX_set_range+0x1ac>
 80013ee:	ed97 0a02 	vldr	s0, [r7, #8]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 f8b0 	bl	8003558 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3328      	adds	r3, #40	@ 0x28
 80013fc:	edd7 0a01 	vldr	s1, [r7, #4]
 8001400:	ed97 0a02 	vldr	s0, [r7, #8]
 8001404:	4618      	mov	r0, r3
 8001406:	f002 f8a7 	bl	8003558 <PWM_write_range>
			mdxx->cmd = duty;
 800140a:	edd7 7a01 	vldr	s15, [r7, #4]
 800140e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001412:	ee17 2a90 	vmov	r2, s15
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800141a:	e084      	b.n	8001526 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3310      	adds	r3, #16
 8001420:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001534 <MDXX_set_range+0x1b0>
 8001424:	ed97 0a02 	vldr	s0, [r7, #8]
 8001428:	4618      	mov	r0, r3
 800142a:	f002 f895 	bl	8003558 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3328      	adds	r3, #40	@ 0x28
 8001432:	edd7 7a01 	vldr	s15, [r7, #4]
 8001436:	eef0 7ae7 	vabs.f32	s15, s15
 800143a:	eef0 0a67 	vmov.f32	s1, s15
 800143e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001442:	4618      	mov	r0, r3
 8001444:	f002 f888 	bl	8003558 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001448:	edd7 7a01 	vldr	s15, [r7, #4]
 800144c:	eef0 7ae7 	vabs.f32	s15, s15
 8001450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001454:	ee17 2a90 	vmov	r2, s15
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145c:	e063      	b.n	8001526 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001464:	2b01      	cmp	r3, #1
 8001466:	d15e      	bne.n	8001526 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8001468:	edd7 7a01 	vldr	s15, [r7, #4]
 800146c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	d115      	bne.n	80014a2 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	f008 ff08 	bl	800a298 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3328      	adds	r3, #40	@ 0x28
 800148c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001530 <MDXX_set_range+0x1ac>
 8001490:	ed97 0a02 	vldr	s0, [r7, #8]
 8001494:	4618      	mov	r0, r3
 8001496:	f002 f85f 	bl	8003558 <PWM_write_range>
			mdxx->cmd = 0;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e041      	b.n	8001526 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	dd1a      	ble.n	80014e6 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014ba:	2200      	movs	r2, #0
 80014bc:	4619      	mov	r1, r3
 80014be:	f008 feeb 	bl	800a298 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3328      	adds	r3, #40	@ 0x28
 80014c6:	edd7 0a01 	vldr	s1, [r7, #4]
 80014ca:	ed97 0a02 	vldr	s0, [r7, #8]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 f842 	bl	8003558 <PWM_write_range>
			mdxx->cmd = duty;
 80014d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014dc:	ee17 2a90 	vmov	r2, s15
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e01f      	b.n	8001526 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014f0:	2201      	movs	r2, #1
 80014f2:	4619      	mov	r1, r3
 80014f4:	f008 fed0 	bl	800a298 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3328      	adds	r3, #40	@ 0x28
 80014fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001500:	eef0 7ae7 	vabs.f32	s15, s15
 8001504:	eef0 0a67 	vmov.f32	s1, s15
 8001508:	ed97 0a02 	vldr	s0, [r7, #8]
 800150c:	4618      	mov	r0, r3
 800150e:	f002 f823 	bl	8003558 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001512:	edd7 7a01 	vldr	s15, [r7, #4]
 8001516:	eef0 7ae7 	vabs.f32	s15, s15
 800151a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151e:	ee17 2a90 	vmov	r2, s15
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	00000000 	.word	0x00000000
 8001534:	42c80000 	.word	0x42c80000

08001538 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, 		// kg
    .c = 64.83e-3,           			// m
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	601a      	str	r2, [r3, #0]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001554:	b5b0      	push	{r4, r5, r7, lr}
 8001556:	ed2d 8b02 	vpush	{d8}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001574:	f7ff f80c 	bl	8000590 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4614      	mov	r4, r2
 800157e:	461d      	mov	r5, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001590:	f7fe fffe 	bl	8000590 <__aeabi_dmul>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4620      	mov	r0, r4
 800159a:	4629      	mov	r1, r5
 800159c:	f7fe fe42 	bl	8000224 <__adddf3>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015b0:	f7ff f918 	bl	80007e4 <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff faca 	bl	8000b54 <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 80015c4:	ed97 7a00 	vldr	s14, [r7]
 80015c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d0:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fab8 	bl	8000b54 <__aeabi_d2f>
 80015e4:	4603      	mov	r3, r0
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eeb1 8a67 	vneg.f32	s16, s15
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff faab 	bl	8000b54 <__aeabi_d2f>
 80015fe:	4604      	mov	r4, r0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff faa2 	bl	8000b54 <__aeabi_d2f>
 8001610:	4603      	mov	r3, r0
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef1 8a67 	vneg.f32	s17, s15
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fa95 	bl	8000b54 <__aeabi_d2f>
 800162a:	4603      	mov	r3, r0
 800162c:	ee02 3a10 	vmov	s4, r3
 8001630:	eef0 1a68 	vmov.f32	s3, s17
 8001634:	ee01 4a10 	vmov	s2, r4
 8001638:	eef0 0a48 	vmov.f32	s1, s16
 800163c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001640:	f000 fb6e 	bl	8001d20 <mapf>
 8001644:	eef0 7a40 	vmov.f32	s15, s0
}
 8001648:	eeb0 0a67 	vmov.f32	s0, s15
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	ecbd 8b02 	vpop	{d8}
 8001654:	bdb0      	pop	{r4, r5, r7, pc}

08001656 <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	605a      	str	r2, [r3, #4]
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qdd, float s){
 800167c:	b5b0      	push	{r4, r5, r7, lr}
 800167e:	ed2d 8b02 	vpush	{d8}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	ed87 0a02 	vstr	s0, [r7, #8]
 800168c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001690:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * s;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	ed93 7a01 	vldr	s14, [r3, #4]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a8:	ee17 0a90 	vmov	r0, s15
 80016ac:	f7fe ff18 	bl	80004e0 <__aeabi_f2d>
 80016b0:	4604      	mov	r4, r0
 80016b2:	460d      	mov	r5, r1
 80016b4:	68b8      	ldr	r0, [r7, #8]
 80016b6:	f7fe ff13 	bl	80004e0 <__aeabi_f2d>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	ec43 2b10 	vmov	d0, r2, r3
 80016c2:	f00d ffb9 	bl	800f638 <sin>
 80016c6:	ec53 2b10 	vmov	r2, r3, d0
 80016ca:	4620      	mov	r0, r4
 80016cc:	4629      	mov	r1, r5
 80016ce:	f7fe ff5f 	bl	8000590 <__aeabi_dmul>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4614      	mov	r4, r2
 80016d8:	461d      	mov	r5, r3
 80016da:	6838      	ldr	r0, [r7, #0]
 80016dc:	f7fe ff00 	bl	80004e0 <__aeabi_f2d>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4620      	mov	r0, r4
 80016e6:	4629      	mov	r1, r5
 80016e8:	f7fe ff52 	bl	8000590 <__aeabi_dmul>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff fa2e 	bl	8000b54 <__aeabi_d2f>
 80016f8:	4603      	mov	r3, r0
 80016fa:	61fb      	str	r3, [r7, #28]
    float gravity_compensate_rail = motor->En->plotter_mass * motor->En->g * sin(q) * motor->En->c;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	ed93 7a01 	vldr	s14, [r3, #4]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	edd3 7a00 	vldr	s15, [r3]
 800170c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001710:	ee17 0a90 	vmov	r0, s15
 8001714:	f7fe fee4 	bl	80004e0 <__aeabi_f2d>
 8001718:	4604      	mov	r4, r0
 800171a:	460d      	mov	r5, r1
 800171c:	68b8      	ldr	r0, [r7, #8]
 800171e:	f7fe fedf 	bl	80004e0 <__aeabi_f2d>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	ec43 2b10 	vmov	d0, r2, r3
 800172a:	f00d ff85 	bl	800f638 <sin>
 800172e:	ec53 2b10 	vmov	r2, r3, d0
 8001732:	4620      	mov	r0, r4
 8001734:	4629      	mov	r1, r5
 8001736:	f7fe ff2b 	bl	8000590 <__aeabi_dmul>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4614      	mov	r4, r2
 8001740:	461d      	mov	r5, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fec9 	bl	80004e0 <__aeabi_f2d>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4620      	mov	r0, r4
 8001754:	4629      	mov	r1, r5
 8001756:	f7fe ff1b 	bl	8000590 <__aeabi_dmul>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f7ff f9f7 	bl	8000b54 <__aeabi_d2f>
 8001766:	4603      	mov	r3, r0
 8001768:	61bb      	str	r3, [r7, #24]
//    float mass_torque = motor->En->plotter_mass * s*s * qdd;

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800177a:	f7ff f833 	bl	80007e4 <__aeabi_ddiv>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff f9e5 	bl	8000b54 <__aeabi_d2f>
 800178a:	4603      	mov	r3, r0
 800178c:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + gravity_compensate_rail + 0) * transfer_function;
 800178e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001792:	edd7 7a06 	vldr	s15, [r7, #24]
 8001796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800179a:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001830 <REVOLUTE_MOTOR_DFD_Compute+0x1b4>
 800179e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80017a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017aa:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff f9cb 	bl	8000b54 <__aeabi_d2f>
 80017be:	4603      	mov	r3, r0
 80017c0:	ee07 3a90 	vmov	s15, r3
 80017c4:	eeb1 8a67 	vneg.f32	s16, s15
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f7ff f9be 	bl	8000b54 <__aeabi_d2f>
 80017d8:	4604      	mov	r4, r0
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	f7ff f9b5 	bl	8000b54 <__aeabi_d2f>
 80017ea:	4603      	mov	r3, r0
 80017ec:	ee07 3a90 	vmov	s15, r3
 80017f0:	eef1 8a67 	vneg.f32	s17, s15
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff f9a8 	bl	8000b54 <__aeabi_d2f>
 8001804:	4603      	mov	r3, r0
 8001806:	ee02 3a10 	vmov	s4, r3
 800180a:	eef0 1a68 	vmov.f32	s3, s17
 800180e:	ee01 4a10 	vmov	s2, r4
 8001812:	eef0 0a48 	vmov.f32	s1, s16
 8001816:	ed97 0a04 	vldr	s0, [r7, #16]
 800181a:	f000 fa81 	bl	8001d20 <mapf>
 800181e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001822:	eeb0 0a67 	vmov.f32	s0, s15
 8001826:	3720      	adds	r7, #32
 8001828:	46bd      	mov	sp, r7
 800182a:	ecbd 8b02 	vpop	{d8}
 800182e:	bdb0      	pop	{r4, r5, r7, pc}
 8001830:	00000000 	.word	0x00000000

08001834 <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	601a      	str	r2, [r3, #0]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <PRISMATIC_MOTOR_FFD_Compute>:

float PRISMATIC_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float sd) {
 8001850:	b5b0      	push	{r4, r5, r7, lr}
 8001852:	ed2d 8b02 	vpush	{d8}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R  + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001870:	f7fe fe8e 	bl	8000590 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4614      	mov	r4, r2
 800187a:	461d      	mov	r5, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800188c:	f7fe fe80 	bl	8000590 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4620      	mov	r0, r4
 8001896:	4629      	mov	r1, r5
 8001898:	f7fe fcc4 	bl	8000224 <__adddf3>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018ac:	f7fe ff9a 	bl	80007e4 <__aeabi_ddiv>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff f94c 	bl	8000b54 <__aeabi_d2f>
 80018bc:	4603      	mov	r3, r0
 80018be:	60fb      	str	r3, [r7, #12]

    float v = sd * transfer_function;
 80018c0:	ed97 7a00 	vldr	s14, [r7]
 80018c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018cc:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	f7ff f93a 	bl	8000b54 <__aeabi_d2f>
 80018e0:	4603      	mov	r3, r0
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eeb1 8a67 	vneg.f32	s16, s15
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f7ff f92d 	bl	8000b54 <__aeabi_d2f>
 80018fa:	4604      	mov	r4, r0
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	f7ff f924 	bl	8000b54 <__aeabi_d2f>
 800190c:	4603      	mov	r3, r0
 800190e:	ee07 3a90 	vmov	s15, r3
 8001912:	eef1 8a67 	vneg.f32	s17, s15
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	f7ff f917 	bl	8000b54 <__aeabi_d2f>
 8001926:	4603      	mov	r3, r0
 8001928:	ee02 3a10 	vmov	s4, r3
 800192c:	eef0 1a68 	vmov.f32	s3, s17
 8001930:	ee01 4a10 	vmov	s2, r4
 8001934:	eef0 0a48 	vmov.f32	s1, s16
 8001938:	ed97 0a02 	vldr	s0, [r7, #8]
 800193c:	f000 f9f0 	bl	8001d20 <mapf>
 8001940:	eef0 7a40 	vmov.f32	s15, s0
}
 8001944:	eeb0 0a67 	vmov.f32	s0, s15
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	ecbd 8b02 	vpop	{d8}
 8001950:	bdb0      	pop	{r4, r5, r7, pc}

08001952 <PRISMATIC_MOTOR_DFD_Init>:

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001952:	b480      	push	{r7}
 8001954:	b085      	sub	sp, #20
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	605a      	str	r2, [r3, #4]
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <PRISMATIC_MOTOR_DFD_Compute>:

float PRISMATIC_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qd, float s){
 8001976:	b5b0      	push	{r4, r5, r7, lr}
 8001978:	ed2d 8b02 	vpush	{d8}
 800197c:	b088      	sub	sp, #32
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	ed87 0a02 	vstr	s0, [r7, #8]
 8001986:	edc7 0a01 	vstr	s1, [r7, #4]
 800198a:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * cos(q);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	ed93 7a01 	vldr	s14, [r3, #4]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	edd3 7a00 	vldr	s15, [r3]
 800199e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a2:	ee17 0a90 	vmov	r0, s15
 80019a6:	f7fe fd9b 	bl	80004e0 <__aeabi_f2d>
 80019aa:	4604      	mov	r4, r0
 80019ac:	460d      	mov	r5, r1
 80019ae:	68b8      	ldr	r0, [r7, #8]
 80019b0:	f7fe fd96 	bl	80004e0 <__aeabi_f2d>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	ec43 2b10 	vmov	d0, r2, r3
 80019bc:	f00d fde8 	bl	800f590 <cos>
 80019c0:	ec53 2b10 	vmov	r2, r3, d0
 80019c4:	4620      	mov	r0, r4
 80019c6:	4629      	mov	r1, r5
 80019c8:	f7fe fde2 	bl	8000590 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7ff f8be 	bl	8000b54 <__aeabi_d2f>
 80019d8:	4603      	mov	r3, r0
 80019da:	61fb      	str	r3, [r7, #28]

    float centrifugal_force = motor->En->plotter_mass * qd * qd * s;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80019e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80019e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80019f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f4:	ed97 7a00 	vldr	s14, [r7]
 80019f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fc:	edc7 7a06 	vstr	s15, [r7, #24]

    float transfer_function = (motor->Mx->R * motor->En->prismatic_pulley_radius) / motor->Mx->Kt;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fd66 	bl	80004e0 <__aeabi_f2d>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4620      	mov	r0, r4
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	f7fe fdb8 	bl	8000590 <__aeabi_dmul>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a30:	f7fe fed8 	bl	80007e4 <__aeabi_ddiv>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f7ff f88a 	bl	8000b54 <__aeabi_d2f>
 8001a40:	4603      	mov	r3, r0
 8001a42:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + centrifugal_force) * transfer_function;
 8001a44:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a48:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a50:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a58:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7ff f874 	bl	8000b54 <__aeabi_d2f>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	ee07 3a90 	vmov	s15, r3
 8001a72:	eeb1 8a67 	vneg.f32	s16, s15
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f7ff f867 	bl	8000b54 <__aeabi_d2f>
 8001a86:	4604      	mov	r4, r0
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7ff f85e 	bl	8000b54 <__aeabi_d2f>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eef1 8a67 	vneg.f32	s17, s15
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff f851 	bl	8000b54 <__aeabi_d2f>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	ee02 3a10 	vmov	s4, r3
 8001ab8:	eef0 1a68 	vmov.f32	s3, s17
 8001abc:	ee01 4a10 	vmov	s2, r4
 8001ac0:	eef0 0a48 	vmov.f32	s1, s16
 8001ac4:	ed97 0a04 	vldr	s0, [r7, #16]
 8001ac8:	f000 f92a 	bl	8001d20 <mapf>
 8001acc:	eef0 7a40 	vmov.f32	s15, s0
}
 8001ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad4:	3720      	adds	r7, #32
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	ecbd 8b02 	vpop	{d8}
 8001adc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ae0 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	ed2d 8b02 	vpush	{d8}
 8001ae6:	b08a      	sub	sp, #40	@ 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	460b      	mov	r3, r1
 8001aee:	ed87 0a01 	vstr	s0, [r7, #4]
 8001af2:	edc7 0a00 	vstr	s1, [r7]
 8001af6:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001af8:	897b      	ldrh	r3, [r7, #10]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <FIR_init+0x2a>
        numTaps += 1;
 8001b04:	897b      	ldrh	r3, [r7, #10]
 8001b06:	3301      	adds	r3, #1
 8001b08:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	897a      	ldrh	r2, [r7, #10]
 8001b0e:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001b16:	897b      	ldrh	r3, [r7, #10]
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f00d fc2e 	bl	800f37c <malloc>
 8001b20:	4603      	mov	r3, r0
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001b28:	897b      	ldrh	r3, [r7, #10]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f00d fc25 	bl	800f37c <malloc>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 80e0 	beq.w	8001d04 <FIR_init+0x224>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 80db 	beq.w	8001d04 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001b4e:	2300      	movs	r3, #0
 8001b50:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001b52:	e00a      	b.n	8001b6a <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001b64:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b66:	3301      	adds	r3, #1
 8001b68:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001b6a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001b6c:	897b      	ldrh	r3, [r7, #10]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d3f0      	bcc.n	8001b54 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001b72:	edd7 6a01 	vldr	s13, [r7, #4]
 8001b76:	ed97 7a00 	vldr	s14, [r7]
 8001b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b7e:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001b82:	897b      	ldrh	r3, [r7, #10]
 8001b84:	085b      	lsrs	r3, r3, #1
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001b8e:	e077      	b.n	8001c80 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001b90:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001b94:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d10c      	bne.n	8001bb6 <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bb0:	edc3 7a00 	vstr	s15, [r3]
 8001bb4:	e02c      	b.n	8001c10 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001bb6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001bb8:	8afb      	ldrh	r3, [r7, #22]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001bc0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bc4:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001d10 <FIR_init+0x230>
 8001bc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bcc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bd0:	ee07 3a90 	vmov	s15, r3
 8001bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bdc:	eeb0 0a67 	vmov.f32	s0, s15
 8001be0:	f00d fe00 	bl	800f7e4 <sinf>
 8001be4:	eef0 6a40 	vmov.f32	s13, s0
 8001be8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bec:	ee07 3a90 	vmov	s15, r3
 8001bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf4:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001d14 <FIR_init+0x234>
 8001bf8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c0c:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	ed93 8a00 	vldr	s16, [r3]
 8001c20:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c24:	ee07 3a90 	vmov	s15, r3
 8001c28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c2c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001d10 <FIR_init+0x230>
 8001c30:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c34:	897b      	ldrh	r3, [r7, #10]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	ee07 3a90 	vmov	s15, r3
 8001c3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c40:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c44:	eeb0 0a66 	vmov.f32	s0, s13
 8001c48:	f00d fd88 	bl	800f75c <cosf>
 8001c4c:	eef0 7a40 	vmov.f32	s15, s0
 8001c50:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001d18 <FIR_init+0x238>
 8001c54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c58:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001d1c <FIR_init+0x23c>
 8001c5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001c70:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001c74:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001c80:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001c84:	897b      	ldrh	r3, [r7, #10]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	db82      	blt.n	8001b90 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001c90:	2300      	movs	r3, #0
 8001c92:	83fb      	strh	r3, [r7, #30]
 8001c94:	e00f      	b.n	8001cb6 <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	8bfb      	ldrh	r3, [r7, #30]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cac:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001cb0:	8bfb      	ldrh	r3, [r7, #30]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	83fb      	strh	r3, [r7, #30]
 8001cb6:	8bfa      	ldrh	r2, [r7, #30]
 8001cb8:	897b      	ldrh	r3, [r7, #10]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d3eb      	bcc.n	8001c96 <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001cbe:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cc2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cca:	d01b      	beq.n	8001d04 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001ccc:	2300      	movs	r3, #0
 8001cce:	83bb      	strh	r3, [r7, #28]
 8001cd0:	e014      	b.n	8001cfc <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	8bbb      	ldrh	r3, [r7, #28]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	edd3 6a00 	vldr	s13, [r3]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	8bbb      	ldrh	r3, [r7, #28]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cf2:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001cf6:	8bbb      	ldrh	r3, [r7, #28]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	83bb      	strh	r3, [r7, #28]
 8001cfc:	8bba      	ldrh	r2, [r7, #28]
 8001cfe:	897b      	ldrh	r3, [r7, #10]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d3e6      	bcc.n	8001cd2 <FIR_init+0x1f2>
            }
        }
    }
}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	@ 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	ecbd 8b02 	vpop	{d8}
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40c90fdb 	.word	0x40c90fdb
 8001d14:	40490fdb 	.word	0x40490fdb
 8001d18:	3eeb851f 	.word	0x3eeb851f
 8001d1c:	3f0a3d71 	.word	0x3f0a3d71

08001d20 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	@ 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	ed87 0a05 	vstr	s0, [r7, #20]
 8001d2a:	edc7 0a04 	vstr	s1, [r7, #16]
 8001d2e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001d32:	edc7 1a02 	vstr	s3, [r7, #8]
 8001d36:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001d3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d42:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d46:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d56:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001d5a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d66:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d6e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d76:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	ee07 3a90 	vmov	s15, r3
}
 8001d80:	eeb0 0a67 	vmov.f32	s0, s15
 8001d84:	3724      	adds	r7, #36	@ 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001d94:	4b0d      	ldr	r3, [pc, #52]	@ (8001dcc <modbus_1t5_Timeout+0x3c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dcc <modbus_1t5_Timeout+0x3c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2200      	movs	r2, #0
 8001da6:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001da8:	4b08      	ldr	r3, [pc, #32]	@ (8001dcc <modbus_1t5_Timeout+0x3c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <modbus_1t5_Timeout+0x3c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0201 	orr.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000174 	.word	0x20000174

08001dd0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001dd8:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <modbus_3t5_Timeout+0x1c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	755a      	strb	r2, [r3, #21]

}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	20000174 	.word	0x20000174

08001df0 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f00c f8f7 	bl	800dfec <HAL_UART_GetError>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b20      	cmp	r3, #32
 8001e02:	d101      	bne.n	8001e08 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001e04:	f7ff ffc4 	bl	8001d90 <modbus_1t5_Timeout>

	}
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001e1e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001e24:	4b2b      	ldr	r3, [pc, #172]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001e2c:	4b29      	ldr	r3, [pc, #164]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001e34:	4b27      	ldr	r3, [pc, #156]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001e3c:	4b25      	ldr	r3, [pc, #148]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	7e3a      	ldrb	r2, [r7, #24]
 8001e42:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001e44:	4b23      	ldr	r3, [pc, #140]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	4a21      	ldr	r2, [pc, #132]	@ (8001ed8 <Modbus_init+0xc8>)
 8001e52:	210e      	movs	r1, #14
 8001e54:	4618      	mov	r0, r3
 8001e56:	f00a fb77 	bl	800c548 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	2110      	movs	r1, #16
 8001e60:	4618      	mov	r0, r3
 8001e62:	f00c f86d 	bl	800df40 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f00c f884 	bl	800df78 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4a19      	ldr	r2, [pc, #100]	@ (8001edc <Modbus_init+0xcc>)
 8001e76:	2104      	movs	r1, #4
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f00b fbb5 	bl	800d5e8 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001e7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001e84:	4b13      	ldr	r3, [pc, #76]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b12      	ldr	r3, [pc, #72]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001e90:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001e94:	4413      	add	r3, r2
 8001e96:	3302      	adds	r3, #2
 8001e98:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f00b fc5d 	bl	800d75c <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <Modbus_init+0xc4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d10c      	bne.n	8001ecc <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001eb2:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <Modbus_init+0xc4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f009 fb21 	bl	800b500 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001ebe:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <Modbus_init+0xc4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f009 fd70 	bl	800b9ac <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000174 	.word	0x20000174
 8001ed8:	08001dd1 	.word	0x08001dd1
 8001edc:	08001df1 	.word	0x08001df1

08001ee0 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08c      	sub	sp, #48	@ 0x30
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6278      	str	r0, [r7, #36]	@ 0x24
 8001ee8:	ed87 0a08 	vstr	s0, [r7, #32]
 8001eec:	edc7 0a07 	vstr	s1, [r7, #28]
 8001ef0:	ed87 1a06 	vstr	s2, [r7, #24]
 8001ef4:	edc7 1a05 	vstr	s3, [r7, #20]
 8001ef8:	ed87 2a04 	vstr	s4, [r7, #16]
 8001efc:	edc7 2a03 	vstr	s5, [r7, #12]
 8001f00:	ed87 3a02 	vstr	s6, [r7, #8]
 8001f04:	edc7 3a01 	vstr	s7, [r7, #4]
 8001f08:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0e:	6a3a      	ldr	r2, [r7, #32]
 8001f10:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 8001f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 8001f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 8001f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 8001f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f46:	2210      	movs	r2, #16
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f00d facc 	bl	800f4e8 <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f52:	3310      	adds	r3, #16
 8001f54:	2240      	movs	r2, #64	@ 0x40
 8001f56:	2100      	movs	r1, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f00d fac5 	bl	800f4e8 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001f5e:	2300      	movs	r3, #0
 8001f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f62:	e00c      	b.n	8001f7e <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 8001f64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f6e:	3304      	adds	r3, #4
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	4a79      	ldr	r2, [pc, #484]	@ (800215c <MotorKalman_Init+0x27c>)
 8001f76:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	ddef      	ble.n	8001f64 <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 8001f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f86:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001f8a:	2240      	movs	r2, #64	@ 0x40
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f00d faaa 	bl	800f4e8 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001f94:	2300      	movs	r3, #0
 8001f96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f98:	e00d      	b.n	8001fb6 <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 8001f9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa4:	33be      	adds	r3, #190	@ 0xbe
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001fae:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	ddee      	ble.n	8001f9a <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbe:	33f0      	adds	r3, #240	@ 0xf0
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f00d fa8f 	bl	800f4e8 <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001fd0:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001fda:	2210      	movs	r2, #16
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f00d fa82 	bl	800f4e8 <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001fea:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 8001fee:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ff2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ff4:	f000 f922 	bl	800223c <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 8001ff8:	ed97 0a00 	vldr	s0, [r7]
 8001ffc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ffe:	f000 f94d 	bl	800229c <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002004:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200a:	2201      	movs	r2, #1
 800200c:	2104      	movs	r1, #4
 800200e:	f00d f8ec 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	3310      	adds	r3, #16
 800201c:	2204      	movs	r2, #4
 800201e:	2104      	movs	r1, #4
 8002020:	f00d f8e3 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 8002024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002026:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8002030:	2204      	movs	r2, #4
 8002032:	2104      	movs	r1, #4
 8002034:	f00d f8d9 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 8002038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203a:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 800203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002040:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8002044:	2201      	movs	r2, #1
 8002046:	2101      	movs	r1, #1
 8002048:	f00d f8cf 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 800204c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204e:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8002058:	2201      	movs	r2, #1
 800205a:	2101      	movs	r1, #1
 800205c:	f00d f8c5 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 8002066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002068:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 800206c:	2201      	movs	r2, #1
 800206e:	2101      	movs	r1, #1
 8002070:	f00d f8bb 	bl	800f1ea <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 8002074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002076:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8002080:	2204      	movs	r2, #4
 8002082:	2104      	movs	r1, #4
 8002084:	f00d f8b1 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 8002088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208a:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8002094:	2201      	movs	r2, #1
 8002096:	2104      	movs	r1, #4
 8002098:	f00d f8a7 	bl	800f1ea <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 800209c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209e:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020a8:	2201      	movs	r2, #1
 80020aa:	2104      	movs	r1, #4
 80020ac:	f00d f89d 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 80020b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b2:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 80020bc:	2204      	movs	r2, #4
 80020be:	2104      	movs	r1, #4
 80020c0:	f00d f893 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 80020c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c6:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 80020ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020cc:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 80020d0:	2204      	movs	r2, #4
 80020d2:	2101      	movs	r1, #1
 80020d4:	f00d f889 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 80020d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020da:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 80020e4:	2201      	movs	r2, #1
 80020e6:	2101      	movs	r1, #1
 80020e8:	f00d f87f 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 80020ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ee:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 80020f8:	2201      	movs	r2, #1
 80020fa:	2104      	movs	r1, #4
 80020fc:	f00d f875 	bl	800f1ea <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8002100:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002102:	f000 f82d 	bl	8002160 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	3390      	adds	r3, #144	@ 0x90
 8002110:	2204      	movs	r2, #4
 8002112:	2104      	movs	r1, #4
 8002114:	f00d f869 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 8002118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211a:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	33e0      	adds	r3, #224	@ 0xe0
 8002122:	2201      	movs	r2, #1
 8002124:	2104      	movs	r1, #4
 8002126:	f00d f860 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8002130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002132:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002136:	2204      	movs	r2, #4
 8002138:	2104      	movs	r1, #4
 800213a:	f00d f856 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8002144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002146:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800214a:	2201      	movs	r2, #1
 800214c:	2104      	movs	r1, #4
 800214e:	f00d f84c 	bl	800f1ea <arm_mat_init_f32>
}
 8002152:	bf00      	nop
 8002154:	3730      	adds	r7, #48	@ 0x30
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	42c80000 	.word	0x42c80000

08002160 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 800219c:	4619      	mov	r1, r3
 800219e:	4610      	mov	r0, r2
 80021a0:	eeb0 3a64 	vmov.f32	s6, s9
 80021a4:	eef0 2a45 	vmov.f32	s5, s10
 80021a8:	eeb0 2a65 	vmov.f32	s4, s11
 80021ac:	eef0 1a46 	vmov.f32	s3, s12
 80021b0:	eeb0 1a66 	vmov.f32	s2, s13
 80021b4:	eef0 0a47 	vmov.f32	s1, s14
 80021b8:	eeb0 0a67 	vmov.f32	s0, s15
 80021bc:	f001 f83c 	bl	8003238 <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80021c6:	2240      	movs	r2, #64	@ 0x40
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f00d f98c 	bl	800f4e8 <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80021d6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002234 <MotorKalman_DiscretizeModel+0xd4>
 80021da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80021e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80021fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800220a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002238 <MotorKalman_DiscretizeModel+0xd8>
 800220e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800221e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002234 <MotorKalman_DiscretizeModel+0xd4>
 8002222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	3c23d70a 	.word	0x3c23d70a
 8002238:	3dcccccd 	.word	0x3dcccccd

0800223c <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800224e:	2240      	movs	r2, #64	@ 0x40
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f00d f948 	bl	800f4e8 <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 8002258:	edd7 7a00 	vldr	s15, [r7]
 800225c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8002274:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227c:	d107      	bne.n	800228e <MotorKalman_SetProcessNoise+0x52>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8002284:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228c:	d002      	beq.n	8002294 <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ff66 	bl	8002160 <MotorKalman_DiscretizeModel>
    }
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 80022a8:	ed97 0a00 	vldr	s0, [r7]
 80022ac:	f00d fa38 	bl	800f720 <sqrtf>
 80022b0:	eef0 7a40 	vmov.f32	s15, s0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b0b2      	sub	sp, #200	@ 0xc8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 80022de:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80022ec:	2300      	movs	r3, #0
 80022ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80022f2:	e041      	b.n	8002378 <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 80022f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	33c8      	adds	r3, #200	@ 0xc8
 80022fc:	443b      	add	r3, r7
 80022fe:	3b3c      	subs	r3, #60	@ 0x3c
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002306:	2300      	movs	r3, #0
 8002308:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800230c:	e02b      	b.n	8002366 <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 800230e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	33c8      	adds	r3, #200	@ 0xc8
 8002316:	443b      	add	r3, r7
 8002318:	3b3c      	subs	r3, #60	@ 0x3c
 800231a:	ed93 7a00 	vldr	s14, [r3]
 800231e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002322:	009a      	lsls	r2, r3, #2
 8002324:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002328:	4413      	add	r3, r2
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	3324      	adds	r3, #36	@ 0x24
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	edd3 6a00 	vldr	s13, [r3]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800234c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	33c8      	adds	r3, #200	@ 0xc8
 8002354:	443b      	add	r3, r7
 8002356:	3b3c      	subs	r3, #60	@ 0x3c
 8002358:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800235c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002360:	3301      	adds	r3, #1
 8002362:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002366:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800236a:	2b03      	cmp	r3, #3
 800236c:	ddcf      	ble.n	800230e <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800236e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002372:	3301      	adds	r3, #1
 8002374:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002378:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800237c:	2b03      	cmp	r3, #3
 800237e:	ddb9      	ble.n	80022f4 <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002380:	2300      	movs	r3, #0
 8002382:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002386:	e021      	b.n	80023cc <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 8002388:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	33c8      	adds	r3, #200	@ 0xc8
 8002390:	443b      	add	r3, r7
 8002392:	3b3c      	subs	r3, #60	@ 0x3c
 8002394:	ed93 7a00 	vldr	s14, [r3]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800239e:	3338      	adds	r3, #56	@ 0x38
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	edd3 6a00 	vldr	s13, [r3]
 80023a8:	edd7 7a00 	vldr	s15, [r7]
 80023ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80023c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023c6:	3301      	adds	r3, #1
 80023c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80023cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	ddd9      	ble.n	8002388 <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80023d4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80023d8:	2240      	movs	r2, #64	@ 0x40
 80023da:	2100      	movs	r1, #0
 80023dc:	4618      	mov	r0, r3
 80023de:	f00d f883 	bl	800f4e8 <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80023e2:	f107 030c 	add.w	r3, r7, #12
 80023e6:	2240      	movs	r2, #64	@ 0x40
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f00d f87c 	bl	800f4e8 <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80023f6:	e05f      	b.n	80024b8 <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80023fe:	e052      	b.n	80024a6 <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002400:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002404:	009a      	lsls	r2, r3, #2
 8002406:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800240a:	4413      	add	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	33c8      	adds	r3, #200	@ 0xc8
 8002410:	443b      	add	r3, r7
 8002412:	3b7c      	subs	r3, #124	@ 0x7c
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800241a:	2300      	movs	r3, #0
 800241c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002420:	e038      	b.n	8002494 <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002422:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002426:	009a      	lsls	r2, r3, #2
 8002428:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	33c8      	adds	r3, #200	@ 0xc8
 8002432:	443b      	add	r3, r7
 8002434:	3b7c      	subs	r3, #124	@ 0x7c
 8002436:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 800243a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800243e:	009a      	lsls	r2, r3, #2
 8002440:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002444:	4413      	add	r3, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	3324      	adds	r3, #36	@ 0x24
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	edd3 6a00 	vldr	s13, [r3]
 8002452:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002456:	009a      	lsls	r2, r3, #2
 8002458:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800245c:	4413      	add	r3, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	3304      	adds	r3, #4
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	edd3 7a00 	vldr	s15, [r3]
 800246a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 800246e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002472:	009a      	lsls	r2, r3, #2
 8002474:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002478:	4413      	add	r3, r2
 800247a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	33c8      	adds	r3, #200	@ 0xc8
 8002482:	443b      	add	r3, r7
 8002484:	3b7c      	subs	r3, #124	@ 0x7c
 8002486:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800248a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800248e:	3301      	adds	r3, #1
 8002490:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002494:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002498:	2b03      	cmp	r3, #3
 800249a:	ddc2      	ble.n	8002422 <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800249c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024a0:	3301      	adds	r3, #1
 80024a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	dda8      	ble.n	8002400 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024b2:	3301      	adds	r3, #1
 80024b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024bc:	2b03      	cmp	r3, #3
 80024be:	dd9b      	ble.n	80023f8 <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80024c6:	e05f      	b.n	8002588 <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80024c8:	2300      	movs	r3, #0
 80024ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80024ce:	e052      	b.n	8002576 <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 80024d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024d4:	009a      	lsls	r2, r3, #2
 80024d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	33c8      	adds	r3, #200	@ 0xc8
 80024e0:	443b      	add	r3, r7
 80024e2:	3bbc      	subs	r3, #188	@ 0xbc
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80024ea:	2300      	movs	r3, #0
 80024ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80024f0:	e038      	b.n	8002564 <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80024f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024f6:	009a      	lsls	r2, r3, #2
 80024f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	33c8      	adds	r3, #200	@ 0xc8
 8002502:	443b      	add	r3, r7
 8002504:	3bbc      	subs	r3, #188	@ 0xbc
 8002506:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 800250a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800250e:	009a      	lsls	r2, r3, #2
 8002510:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	33c8      	adds	r3, #200	@ 0xc8
 800251a:	443b      	add	r3, r7
 800251c:	3b7c      	subs	r3, #124	@ 0x7c
 800251e:	edd3 6a00 	vldr	s13, [r3]
 8002522:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002526:	009a      	lsls	r2, r3, #2
 8002528:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800252c:	4413      	add	r3, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	3324      	adds	r3, #36	@ 0x24
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	edd3 7a00 	vldr	s15, [r3]
 800253a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 800253e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002542:	009a      	lsls	r2, r3, #2
 8002544:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002548:	4413      	add	r3, r2
 800254a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	33c8      	adds	r3, #200	@ 0xc8
 8002552:	443b      	add	r3, r7
 8002554:	3bbc      	subs	r3, #188	@ 0xbc
 8002556:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800255a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800255e:	3301      	adds	r3, #1
 8002560:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002564:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002568:	2b03      	cmp	r3, #3
 800256a:	ddc2      	ble.n	80024f2 <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800256c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002570:	3301      	adds	r3, #1
 8002572:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002576:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800257a:	2b03      	cmp	r3, #3
 800257c:	dda8      	ble.n	80024d0 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800257e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002582:	3301      	adds	r3, #1
 8002584:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002588:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800258c:	2b03      	cmp	r3, #3
 800258e:	dd9b      	ble.n	80024c8 <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002590:	2300      	movs	r3, #0
 8002592:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002596:	e037      	b.n	8002608 <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002598:	2300      	movs	r3, #0
 800259a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800259e:	e02a      	b.n	80025f6 <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 80025a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025a4:	009a      	lsls	r2, r3, #2
 80025a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	33c8      	adds	r3, #200	@ 0xc8
 80025b0:	443b      	add	r3, r7
 80025b2:	3bbc      	subs	r3, #188	@ 0xbc
 80025b4:	ed93 7a00 	vldr	s14, [r3]
 80025b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025bc:	009a      	lsls	r2, r3, #2
 80025be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025c2:	4413      	add	r3, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	3354      	adds	r3, #84	@ 0x54
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 80025d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025d4:	009a      	lsls	r2, r3, #2
 80025d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025da:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 80025dc:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	3304      	adds	r3, #4
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80025ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025f0:	3301      	adds	r3, #1
 80025f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80025f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	ddd0      	ble.n	80025a0 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002602:	3301      	adds	r3, #1
 8002604:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002608:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800260c:	2b03      	cmp	r3, #3
 800260e:	ddc3      	ble.n	8002598 <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	2104      	movs	r1, #4
 8002644:	f00c fdd1 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3310      	adds	r3, #16
 8002652:	2204      	movs	r2, #4
 8002654:	2104      	movs	r1, #4
 8002656:	f00c fdc8 	bl	800f1ea <arm_mat_init_f32>
}
 800265a:	bf00      	nop
 800265c:	37c8      	adds	r7, #200	@ 0xc8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b0d0      	sub	sp, #320	@ 0x140
 8002668:	af00      	add	r7, sp, #0
 800266a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800266e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002672:	6018      	str	r0, [r3, #0]
 8002674:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002678:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800267c:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 8002680:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002684:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800268e:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002698:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800269c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 80026a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026aa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	edd3 7a00 	vldr	s15, [r3]
 80026b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026bc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 80026c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026ca:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80026d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026d8:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 80026dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 80026ea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026ee:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80026f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 80026fc:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002700:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002704:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 800270e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002712:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	edd3 7a03 	vldr	s15, [r3, #12]
 800271c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002724:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 8002728:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800272c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002730:	ed93 7a00 	vldr	s14, [r3]
 8002734:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8002738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800273c:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8002740:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800274e:	2300      	movs	r3, #0
 8002750:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002754:	e04d      	b.n	80027f2 <MotorKalman_Update+0x18e>
        CP[i] = 0;
 8002756:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002760:	443b      	add	r3, r7
 8002762:	3b58      	subs	r3, #88	@ 0x58
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800276a:	2300      	movs	r3, #0
 800276c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002770:	e036      	b.n	80027e0 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 8002772:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800277c:	443b      	add	r3, r7
 800277e:	3b58      	subs	r3, #88	@ 0x58
 8002780:	ed93 7a00 	vldr	s14, [r3]
 8002784:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002788:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002792:	333c      	adds	r3, #60	@ 0x3c
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	edd3 6a00 	vldr	s13, [r3]
 800279c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027a0:	009a      	lsls	r2, r3, #2
 80027a2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027a6:	4413      	add	r3, r2
 80027a8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80027ac:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	3304      	adds	r3, #4
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	edd3 7a00 	vldr	s15, [r3]
 80027bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80027ce:	443b      	add	r3, r7
 80027d0:	3b58      	subs	r3, #88	@ 0x58
 80027d2:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80027d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027da:	3301      	adds	r3, #1
 80027dc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80027e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	ddc4      	ble.n	8002772 <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80027e8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027ec:	3301      	adds	r3, #1
 80027ee:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80027f2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	ddad      	ble.n	8002756 <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 80027fa:	f04f 0300 	mov.w	r3, #0
 80027fe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002802:	2300      	movs	r3, #0
 8002804:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002808:	e021      	b.n	800284e <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 800280a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002814:	443b      	add	r3, r7
 8002816:	3b58      	subs	r3, #88	@ 0x58
 8002818:	ed93 7a00 	vldr	s14, [r3]
 800281c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002820:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800282a:	333c      	adds	r3, #60	@ 0x3c
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	edd3 7a00 	vldr	s15, [r3]
 8002834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002838:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 800283c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002840:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002844:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002848:	3301      	adds	r3, #1
 800284a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800284e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002852:	2b03      	cmp	r3, #3
 8002854:	ddd9      	ble.n	800280a <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 8002856:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800285a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002864:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800286c:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 8002870:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800287e:	2300      	movs	r3, #0
 8002880:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002884:	e04d      	b.n	8002922 <MotorKalman_Update+0x2be>
        PC[i] = 0;
 8002886:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002890:	443b      	add	r3, r7
 8002892:	3b68      	subs	r3, #104	@ 0x68
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800289a:	2300      	movs	r3, #0
 800289c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80028a0:	e036      	b.n	8002910 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 80028a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028ac:	443b      	add	r3, r7
 80028ae:	3b68      	subs	r3, #104	@ 0x68
 80028b0:	ed93 7a00 	vldr	s14, [r3]
 80028b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028b8:	009a      	lsls	r2, r3, #2
 80028ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80028be:	4413      	add	r3, r2
 80028c0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80028c4:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	3304      	adds	r3, #4
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	edd3 6a00 	vldr	s13, [r3]
 80028d4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80028d8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80028e2:	333c      	adds	r3, #60	@ 0x3c
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	edd3 7a00 	vldr	s15, [r3]
 80028ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028fe:	443b      	add	r3, r7
 8002900:	3b68      	subs	r3, #104	@ 0x68
 8002902:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002906:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800290a:	3301      	adds	r3, #1
 800290c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002910:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002914:	2b03      	cmp	r3, #3
 8002916:	ddc4      	ble.n	80028a2 <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002918:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800291c:	3301      	adds	r3, #1
 800291e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002922:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002926:	2b03      	cmp	r3, #3
 8002928:	ddad      	ble.n	8002886 <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 800292a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	605a      	str	r2, [r3, #4]
 8002934:	609a      	str	r2, [r3, #8]
 8002936:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002938:	2300      	movs	r3, #0
 800293a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800293e:	e01a      	b.n	8002976 <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8002940:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800294a:	443b      	add	r3, r7
 800294c:	3b68      	subs	r3, #104	@ 0x68
 800294e:	edd3 6a00 	vldr	s13, [r3]
 8002952:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8002956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800295a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002964:	443b      	add	r3, r7
 8002966:	3b78      	subs	r3, #120	@ 0x78
 8002968:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800296c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002970:	3301      	adds	r3, #1
 8002972:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002976:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800297a:	2b03      	cmp	r3, #3
 800297c:	dde0      	ble.n	8002940 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800297e:	2300      	movs	r3, #0
 8002980:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002984:	e029      	b.n	80029da <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 8002986:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800298a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	ed93 7a00 	vldr	s14, [r3]
 800299c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029a6:	443b      	add	r3, r7
 80029a8:	3b78      	subs	r3, #120	@ 0x78
 80029aa:	edd3 6a00 	vldr	s13, [r3]
 80029ae:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 80029b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80029be:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029d4:	3301      	adds	r3, #1
 80029d6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80029da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029de:	2b03      	cmp	r3, #3
 80029e0:	ddd1      	ble.n	8002986 <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80029e2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80029e6:	2240      	movs	r2, #64	@ 0x40
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f00c fd7c 	bl	800f4e8 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029f0:	2300      	movs	r3, #0
 80029f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80029f6:	e035      	b.n	8002a64 <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80029fe:	e028      	b.n	8002a52 <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 8002a00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a0a:	443b      	add	r3, r7
 8002a0c:	3b78      	subs	r3, #120	@ 0x78
 8002a0e:	ed93 7a00 	vldr	s14, [r3]
 8002a12:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002a16:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a20:	333c      	adds	r3, #60	@ 0x3c
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	edd3 7a00 	vldr	s15, [r3]
 8002a2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a2e:	009a      	lsls	r2, r3, #2
 8002a30:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a34:	4413      	add	r3, r2
 8002a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a40:	443b      	add	r3, r7
 8002a42:	3bb8      	subs	r3, #184	@ 0xb8
 8002a44:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a48:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002a52:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	ddd2      	ble.n	8002a00 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002a64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	ddc5      	ble.n	80029f8 <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002a6c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002a70:	2240      	movs	r2, #64	@ 0x40
 8002a72:	2100      	movs	r1, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f00c fd37 	bl	800f4e8 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002a80:	e038      	b.n	8002af4 <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a82:	2300      	movs	r3, #0
 8002a84:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002a88:	e02b      	b.n	8002ae2 <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 8002a8a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002a8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d102      	bne.n	8002a9c <MotorKalman_Update+0x438>
 8002a96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002a9a:	e001      	b.n	8002aa0 <MotorKalman_Update+0x43c>
 8002a9c:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002cb8 <MotorKalman_Update+0x654>
 8002aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aa4:	009a      	lsls	r2, r3, #2
 8002aa6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002ab2:	443b      	add	r3, r7
 8002ab4:	3bb8      	subs	r3, #184	@ 0xb8
 8002ab6:	edd3 7a00 	vldr	s15, [r3]
 8002aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002abe:	009a      	lsls	r2, r3, #2
 8002ac0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002ac4:	4413      	add	r3, r2
 8002ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002ad0:	443b      	add	r3, r7
 8002ad2:	3bf8      	subs	r3, #248	@ 0xf8
 8002ad4:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002ad8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002adc:	3301      	adds	r3, #1
 8002ade:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002ae2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	ddcf      	ble.n	8002a8a <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aee:	3301      	adds	r3, #1
 8002af0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	ddc2      	ble.n	8002a82 <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 8002afc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b00:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f103 0110 	add.w	r1, r3, #16
 8002b0a:	f107 0308 	add.w	r3, r7, #8
 8002b0e:	2240      	movs	r2, #64	@ 0x40
 8002b10:	4618      	mov	r0, r3
 8002b12:	f00c fd2d 	bl	800f570 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b16:	2300      	movs	r3, #0
 8002b18:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002b1c:	e06e      	b.n	8002bfc <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002b24:	e061      	b.n	8002bea <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b2a:	009a      	lsls	r2, r3, #2
 8002b2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b30:	4413      	add	r3, r2
 8002b32:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002b36:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002b4e:	e043      	b.n	8002bd8 <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b54:	009a      	lsls	r2, r3, #2
 8002b56:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002b60:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	3304      	adds	r3, #4
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 8002b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b74:	009a      	lsls	r2, r3, #2
 8002b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002b82:	443b      	add	r3, r7
 8002b84:	3bf8      	subs	r3, #248	@ 0xf8
 8002b86:	edd3 6a00 	vldr	s13, [r3]
 8002b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b8e:	009a      	lsls	r2, r3, #2
 8002b90:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b94:	4413      	add	r3, r2
 8002b96:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002b9a:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	edd3 7a00 	vldr	s15, [r3]
 8002ba6:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bae:	009a      	lsls	r2, r3, #2
 8002bb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002bb4:	4413      	add	r3, r2
 8002bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bba:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002bbe:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	ddb7      	ble.n	8002b50 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002be0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002be4:	3301      	adds	r3, #1
 8002be6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002bea:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	dd99      	ble.n	8002b26 <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	dd8c      	ble.n	8002b1e <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002c04:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c08:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c14:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002c1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c22:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c2e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002c38:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c3c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c48:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002c52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c56:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c62:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002c6c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c70:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002c7a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c7e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2201      	movs	r2, #1
 8002c86:	2104      	movs	r1, #4
 8002c88:	f00c faaf 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002c8c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c90:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002c9a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c9e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3310      	adds	r3, #16
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	2104      	movs	r1, #4
 8002caa:	f00c fa9e 	bl	800f1ea <arm_mat_init_f32>
}
 8002cae:	bf00      	nop
 8002cb0:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	00000000 	.word	0x00000000

08002cbc <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	ed87 0a02 	vstr	s0, [r7, #8]
 8002cc8:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 8002ccc:	ed97 0a02 	vldr	s0, [r7, #8]
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f7ff fafa 	bl	80022ca <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 8002cd6:	ed97 0a01 	vldr	s0, [r7, #4]
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f7ff fcc2 	bl	8002664 <MotorKalman_Update>

    return filter->velocity;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 8002ce6:	ee07 3a90 	vmov	s15, r3
}
 8002cea:	eeb0 0a67 	vmov.f32	s0, s15
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e00c      	b.n	8002d20 <matrix_copy+0x2c>
        dst[i] = src[i];
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	441a      	add	r2, r3
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	68b9      	ldr	r1, [r7, #8]
 8002d14:	440b      	add	r3, r1
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	dbee      	blt.n	8002d06 <matrix_copy+0x12>
    }
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
	...

08002d38 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8002d38:	b590      	push	{r4, r7, lr}
 8002d3a:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8002d44:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8002d48:	6020      	str	r0, [r4, #0]
 8002d4a:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8002d4e:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8002d52:	6001      	str	r1, [r0, #0]
 8002d54:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002d58:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 8002d5c:	ed81 0a00 	vstr	s0, [r1]
 8002d60:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002d64:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 8002d68:	600a      	str	r2, [r1, #0]
 8002d6a:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8002d6e:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8002d72:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 8002d74:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002d78:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002d7c:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2204      	movs	r2, #4
 8002d84:	2104      	movs	r1, #4
 8002d86:	f00c fa30 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8002d8a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002d8e:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002d92:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2204      	movs	r2, #4
 8002d9a:	2104      	movs	r1, #4
 8002d9c:	f00c fa25 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8002da0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002da4:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8002da8:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2201      	movs	r2, #1
 8002db0:	2104      	movs	r1, #4
 8002db2:	f00c fa1a 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 8002db6:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002dba:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002dbe:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	2104      	movs	r1, #4
 8002dc8:	f00c fa0f 	bl	800f1ea <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8002dcc:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002dd0:	2240      	movs	r2, #64	@ 0x40
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f00c fb87 	bl	800f4e8 <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8002dda:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002dde:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8002de2:	2204      	movs	r2, #4
 8002de4:	2104      	movs	r1, #4
 8002de6:	f00c fa00 	bl	800f1ea <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 8002dea:	2300      	movs	r3, #0
 8002dec:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002df0:	e011      	b.n	8002e16 <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 8002df2:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8002e02:	443b      	add	r3, r7
 8002e04:	3b6c      	subs	r3, #108	@ 0x6c
 8002e06:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002e0a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8002e0c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002e10:	3301      	adds	r3, #1
 8002e12:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002e16:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	dde9      	ble.n	8002df2 <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 8002e1e:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002e22:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8002e26:	2204      	movs	r2, #4
 8002e28:	2104      	movs	r1, #4
 8002e2a:	f00c f9de 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 8002e2e:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002e32:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e36:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002e3a:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 8002e3e:	ed93 0a00 	vldr	s0, [r3]
 8002e42:	4610      	mov	r0, r2
 8002e44:	f00c fa63 	bl	800f30e <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8002e48:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e4c:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002e50:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8002e54:	2210      	movs	r2, #16
 8002e56:	6819      	ldr	r1, [r3, #0]
 8002e58:	f7ff ff4c 	bl	8002cf4 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 8002e5c:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8002e60:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8002e64:	2204      	movs	r2, #4
 8002e66:	2104      	movs	r1, #4
 8002e68:	f00c f9bf 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 8002e6c:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002e70:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8002e74:	2204      	movs	r2, #4
 8002e76:	2104      	movs	r1, #4
 8002e78:	f00c f9b7 	bl	800f1ea <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8002e7c:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002e80:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002e84:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f00c f973 	bl	800f174 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8002e8e:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002e92:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002e96:	2210      	movs	r2, #16
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff2b 	bl	8002cf4 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8002e9e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002ea2:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002eac:	e03a      	b.n	8002f24 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8002eae:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002eb2:	ee07 3a90 	vmov	s15, r3
 8002eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eba:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8002ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec2:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8002ec6:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002eca:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002ece:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f00c f9a1 	bl	800f21a <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8002ed8:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002edc:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002ee0:	2210      	movs	r2, #16
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff ff06 	bl	8002cf4 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8002ee8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eec:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8002ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ef4:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002ef8:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002efc:	4611      	mov	r1, r2
 8002efe:	eeb0 0a47 	vmov.f32	s0, s14
 8002f02:	4618      	mov	r0, r3
 8002f04:	f00c fa03 	bl	800f30e <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8002f08:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002f0c:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8002f10:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 8002f14:	4618      	mov	r0, r3
 8002f16:	f00c f92d 	bl	800f174 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002f1a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002f24:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002f28:	2b0a      	cmp	r3, #10
 8002f2a:	ddc0      	ble.n	8002eae <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 8002f2c:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8002f30:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f34:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002f38:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 8002f3c:	ed93 0a00 	vldr	s0, [r3]
 8002f40:	4610      	mov	r0, r2
 8002f42:	f00c f9e4 	bl	800f30e <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 8002f46:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f4a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002f4e:	461a      	mov	r2, r3
 8002f50:	2300      	movs	r3, #0
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	6053      	str	r3, [r2, #4]
 8002f56:	6093      	str	r3, [r2, #8]
 8002f58:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 8002f5a:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8002f5e:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8002f62:	2201      	movs	r2, #1
 8002f64:	2104      	movs	r1, #4
 8002f66:	f00c f940 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 8002f6a:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8002f6e:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002f72:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8002f76:	4618      	mov	r0, r3
 8002f78:	f00c f94f 	bl	800f21a <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8002f7c:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8002f80:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8002f84:	2201      	movs	r2, #1
 8002f86:	2104      	movs	r1, #4
 8002f88:	f00c f92f 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8002f8c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f90:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002f94:	edd3 7a00 	vldr	s15, [r3]
 8002f98:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f9c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002fa0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002fa4:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002fa8:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002fac:	4611      	mov	r1, r2
 8002fae:	eeb0 0a47 	vmov.f32	s0, s14
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f00c f9ab 	bl	800f30e <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002fb8:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002fbc:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002fc0:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f00c f8d5 	bl	800f174 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 8002fca:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002fce:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	2340      	movs	r3, #64	@ 0x40
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2100      	movs	r1, #0
 8002fda:	f00c fa85 	bl	800f4e8 <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 8002fde:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002fe2:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	2104      	movs	r1, #4
 8002fea:	f00c f8fe 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 8002fee:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8002ff2:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8002ff6:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f00c f90d 	bl	800f21a <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8003000:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003004:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003008:	461a      	mov	r2, r3
 800300a:	2300      	movs	r3, #0
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	6053      	str	r3, [r2, #4]
 8003010:	6093      	str	r3, [r2, #8]
 8003012:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 8003014:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003018:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 800301c:	2201      	movs	r2, #1
 800301e:	2104      	movs	r1, #4
 8003020:	f00c f8e3 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 8003024:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8003028:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800302c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003030:	4618      	mov	r0, r3
 8003032:	f00c f8f2 	bl	800f21a <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 8003036:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800303a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800303e:	edd3 7a00 	vldr	s15, [r3]
 8003042:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003046:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800304a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800304e:	edd3 7a00 	vldr	s15, [r3]
 8003052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003056:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 800305a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800305e:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003062:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003066:	4611      	mov	r1, r2
 8003068:	eeb0 0a47 	vmov.f32	s0, s14
 800306c:	4618      	mov	r0, r3
 800306e:	f00c f94e 	bl	800f30e <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003072:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003076:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800307a:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800307e:	4618      	mov	r0, r3
 8003080:	f00c f878 	bl	800f174 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 8003084:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003088:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800308c:	4618      	mov	r0, r3
 800308e:	2340      	movs	r3, #64	@ 0x40
 8003090:	461a      	mov	r2, r3
 8003092:	2100      	movs	r1, #0
 8003094:	f00c fa28 	bl	800f4e8 <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 8003098:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800309c:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80030a0:	2204      	movs	r2, #4
 80030a2:	2104      	movs	r1, #4
 80030a4:	f00c f8a1 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 80030a8:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80030ac:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80030b0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80030b4:	4618      	mov	r0, r3
 80030b6:	f00c f8b0 	bl	800f21a <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 80030ba:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80030be:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 80030c2:	461a      	mov	r2, r3
 80030c4:	2300      	movs	r3, #0
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	6053      	str	r3, [r2, #4]
 80030ca:	6093      	str	r3, [r2, #8]
 80030cc:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 80030ce:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80030d2:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 80030d6:	2201      	movs	r2, #1
 80030d8:	2104      	movs	r1, #4
 80030da:	f00c f886 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 80030de:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80030e2:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80030e6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80030ea:	4618      	mov	r0, r3
 80030ec:	f00c f895 	bl	800f21a <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 80030f0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80030f4:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80030f8:	edd3 7a00 	vldr	s15, [r3]
 80030fc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003100:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003104:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003108:	edd3 7a00 	vldr	s15, [r3]
 800310c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003110:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003114:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003118:	edd3 7a00 	vldr	s15, [r3]
 800311c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003120:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8003124:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003128:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800312c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003130:	4611      	mov	r1, r2
 8003132:	eeb0 0a47 	vmov.f32	s0, s14
 8003136:	4618      	mov	r0, r3
 8003138:	f00c f8e9 	bl	800f30e <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800313c:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003140:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003144:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003148:	4618      	mov	r0, r3
 800314a:	f00c f813 	bl	800f174 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 800314e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003152:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8003156:	4618      	mov	r0, r3
 8003158:	2340      	movs	r3, #64	@ 0x40
 800315a:	461a      	mov	r2, r3
 800315c:	2100      	movs	r1, #0
 800315e:	f00c f9c3 	bl	800f4e8 <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 8003162:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003166:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800316a:	2204      	movs	r2, #4
 800316c:	2104      	movs	r1, #4
 800316e:	f00c f83c 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 8003172:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8003176:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 800317a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800317e:	4618      	mov	r0, r3
 8003180:	f00c f84b 	bl	800f21a <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 8003184:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003188:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 800318c:	461a      	mov	r2, r3
 800318e:	2300      	movs	r3, #0
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	6053      	str	r3, [r2, #4]
 8003194:	6093      	str	r3, [r2, #8]
 8003196:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 8003198:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800319c:	f107 001c 	add.w	r0, r7, #28
 80031a0:	2201      	movs	r2, #1
 80031a2:	2104      	movs	r1, #4
 80031a4:	f00c f821 	bl	800f1ea <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 80031a8:	f107 021c 	add.w	r2, r7, #28
 80031ac:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80031b0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80031b4:	4618      	mov	r0, r3
 80031b6:	f00c f830 	bl	800f21a <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 80031ba:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031be:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031c2:	edd3 7a00 	vldr	s15, [r3]
 80031c6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80031ca:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031ce:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031d2:	edd3 7a00 	vldr	s15, [r3]
 80031d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031da:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031de:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031e2:	edd3 7a00 	vldr	s15, [r3]
 80031e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031ea:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031ee:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031f2:	edd3 7a00 	vldr	s15, [r3]
 80031f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8003234 <discretize_system_with_arm+0x4fc>
 80031fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003202:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003206:	f107 031c 	add.w	r3, r7, #28
 800320a:	4611      	mov	r1, r2
 800320c:	eeb0 0a47 	vmov.f32	s0, s14
 8003210:	4618      	mov	r0, r3
 8003212:	f00c f87c 	bl	800f30e <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003216:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800321a:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800321e:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003222:	4618      	mov	r0, r3
 8003224:	f00b ffa6 	bl	800f174 <arm_mat_add_f32>
}
 8003228:	bf00      	nop
 800322a:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 800322e:	46bd      	mov	sp, r7
 8003230:	bd90      	pop	{r4, r7, pc}
 8003232:	bf00      	nop
 8003234:	42f00000 	.word	0x42f00000

08003238 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b09e      	sub	sp, #120	@ 0x78
 800323c:	af00      	add	r7, sp, #0
 800323e:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8003242:	edc7 0a08 	vstr	s1, [r7, #32]
 8003246:	ed87 1a07 	vstr	s2, [r7, #28]
 800324a:	edc7 1a06 	vstr	s3, [r7, #24]
 800324e:	ed87 2a05 	vstr	s4, [r7, #20]
 8003252:	edc7 2a04 	vstr	s5, [r7, #16]
 8003256:	ed87 3a03 	vstr	s6, [r7, #12]
 800325a:	60b8      	str	r0, [r7, #8]
 800325c:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 800325e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003262:	2240      	movs	r2, #64	@ 0x40
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f00c f93e 	bl	800f4e8 <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 800326c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 800327a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800327e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 8003280:	edd7 7a06 	vldr	s15, [r7, #24]
 8003284:	eef1 6a67 	vneg.f32	s13, s15
 8003288:	ed97 7a07 	vldr	s14, [r7, #28]
 800328c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003290:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 8003294:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8003298:	ed97 7a07 	vldr	s14, [r7, #28]
 800329c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032a0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 80032a4:	edd7 6a04 	vldr	s13, [r7, #16]
 80032a8:	ed97 7a07 	vldr	s14, [r7, #28]
 80032ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032b0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 80032b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80032b8:	eef1 6a67 	vneg.f32	s13, s15
 80032bc:	ed97 7a08 	vldr	s14, [r7, #32]
 80032c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032c4:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 80032c8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80032cc:	eef1 6a67 	vneg.f32	s13, s15
 80032d0:	ed97 7a08 	vldr	s14, [r7, #32]
 80032d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032d8:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 80032dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032e0:	ed97 7a08 	vldr	s14, [r7, #32]
 80032e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032e8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 80032ec:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80032f0:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	ed97 0a03 	vldr	s0, [r7, #12]
 80032fc:	f7ff fd1c 	bl	8002d38 <discretize_system_with_arm>
}
 8003300:	bf00      	nop
 8003302:	3778      	adds	r7, #120	@ 0x78
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	4613      	mov	r3, r2
 8003314:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4a0b      	ldr	r2, [pc, #44]	@ (8003348 <PWM_init+0x40>)
 800331a:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	88fa      	ldrh	r2, [r7, #6]
 8003326:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 800332e:	68b8      	ldr	r0, [r7, #8]
 8003330:	f008 f876 	bl	800b420 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8003334:	88fb      	ldrh	r3, [r7, #6]
 8003336:	4619      	mov	r1, r3
 8003338:	68b8      	ldr	r0, [r7, #8]
 800333a:	f008 f9bd 	bl	800b6b8 <HAL_TIM_PWM_Start>
}
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	0a21fe80 	.word	0x0a21fe80

0800334c <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 800334c:	b5b0      	push	{r4, r5, r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	ed87 0a02 	vstr	s0, [r7, #8]
 8003358:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 800335c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003360:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003368:	d137      	bne.n	80033da <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	889b      	ldrh	r3, [r3, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d105      	bne.n	800337e <PWM_write_duty+0x32>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2200      	movs	r2, #0
 800337a:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 800337c:	e0e1      	b.n	8003542 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	889b      	ldrh	r3, [r3, #4]
 8003382:	2b04      	cmp	r3, #4
 8003384:	d105      	bne.n	8003392 <PWM_write_duty+0x46>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	2300      	movs	r3, #0
 800338e:	6393      	str	r3, [r2, #56]	@ 0x38
 8003390:	e0d7      	b.n	8003542 <PWM_write_duty+0x1f6>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	889b      	ldrh	r3, [r3, #4]
 8003396:	2b08      	cmp	r3, #8
 8003398:	d105      	bne.n	80033a6 <PWM_write_duty+0x5a>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	2300      	movs	r3, #0
 80033a2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80033a4:	e0cd      	b.n	8003542 <PWM_write_duty+0x1f6>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	889b      	ldrh	r3, [r3, #4]
 80033aa:	2b0c      	cmp	r3, #12
 80033ac:	d105      	bne.n	80033ba <PWM_write_duty+0x6e>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	2300      	movs	r3, #0
 80033b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80033b8:	e0c3      	b.n	8003542 <PWM_write_duty+0x1f6>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	889b      	ldrh	r3, [r3, #4]
 80033be:	2b10      	cmp	r3, #16
 80033c0:	d105      	bne.n	80033ce <PWM_write_duty+0x82>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	2300      	movs	r3, #0
 80033ca:	6493      	str	r3, [r2, #72]	@ 0x48
 80033cc:	e0b9      	b.n	8003542 <PWM_write_duty+0x1f6>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	2300      	movs	r3, #0
 80033d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80033d8:	e0b3      	b.n	8003542 <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80033ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033f2:	ee17 2a90 	vmov	r2, s15
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003402:	33fe      	adds	r3, #254	@ 0xfe
 8003404:	4a51      	ldr	r2, [pc, #324]	@ (800354c <PWM_write_duty+0x200>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	0bdb      	lsrs	r3, r3, #15
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	ee07 3a90 	vmov	s15, r3
 800341e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	899b      	ldrh	r3, [r3, #12]
 8003426:	3301      	adds	r3, #1
 8003428:	ee07 3a90 	vmov	s15, r3
 800342c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003430:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003434:	ed97 7a02 	vldr	s14, [r7, #8]
 8003438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800343c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003440:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003448:	ee17 3a90 	vmov	r3, s15
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	89db      	ldrh	r3, [r3, #14]
 8003456:	4618      	mov	r0, r3
 8003458:	f7fd f830 	bl	80004bc <__aeabi_i2d>
 800345c:	4604      	mov	r4, r0
 800345e:	460d      	mov	r5, r1
 8003460:	edd7 7a01 	vldr	s15, [r7, #4]
 8003464:	eef0 7ae7 	vabs.f32	s15, s15
 8003468:	ee17 0a90 	vmov	r0, s15
 800346c:	f7fd f838 	bl	80004e0 <__aeabi_f2d>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4620      	mov	r0, r4
 8003476:	4629      	mov	r1, r5
 8003478:	f7fd f88a 	bl	8000590 <__aeabi_dmul>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4610      	mov	r0, r2
 8003482:	4619      	mov	r1, r3
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	4b31      	ldr	r3, [pc, #196]	@ (8003550 <PWM_write_duty+0x204>)
 800348a:	f7fd f9ab 	bl	80007e4 <__aeabi_ddiv>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4610      	mov	r0, r2
 8003494:	4619      	mov	r1, r3
 8003496:	f7fd fb3d 	bl	8000b14 <__aeabi_d2uiz>
 800349a:	4603      	mov	r3, r0
 800349c:	b29b      	uxth	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	899a      	ldrh	r2, [r3, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	89da      	ldrh	r2, [r3, #14]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	89da      	ldrh	r2, [r3, #14]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	889b      	ldrh	r3, [r3, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <PWM_write_duty+0x190>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	6952      	ldr	r2, [r2, #20]
 80034d8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80034da:	e032      	b.n	8003542 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	889b      	ldrh	r3, [r3, #4]
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d106      	bne.n	80034f2 <PWM_write_duty+0x1a6>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80034f0:	e027      	b.n	8003542 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	889b      	ldrh	r3, [r3, #4]
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d106      	bne.n	8003508 <PWM_write_duty+0x1bc>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003506:	e01c      	b.n	8003542 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	889b      	ldrh	r3, [r3, #4]
 800350c:	2b0c      	cmp	r3, #12
 800350e:	d106      	bne.n	800351e <PWM_write_duty+0x1d2>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800351c:	e011      	b.n	8003542 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	889b      	ldrh	r3, [r3, #4]
 8003522:	2b10      	cmp	r3, #16
 8003524:	d106      	bne.n	8003534 <PWM_write_duty+0x1e8>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003532:	e006      	b.n	8003542 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003540:	e7ff      	b.n	8003542 <PWM_write_duty+0x1f6>
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bdb0      	pop	{r4, r5, r7, pc}
 800354a:	bf00      	nop
 800354c:	80008001 	.word	0x80008001
 8003550:	40590000 	.word	0x40590000
 8003554:	00000000 	.word	0x00000000

08003558 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8003558:	b5b0      	push	{r4, r5, r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	ed87 0a02 	vstr	s0, [r7, #8]
 8003564:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003568:	edd7 7a02 	vldr	s15, [r7, #8]
 800356c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003574:	d137      	bne.n	80035e6 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	889b      	ldrh	r3, [r3, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d105      	bne.n	800358a <PWM_write_range+0x32>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2200      	movs	r2, #0
 8003586:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003588:	e0e1      	b.n	800374e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	889b      	ldrh	r3, [r3, #4]
 800358e:	2b04      	cmp	r3, #4
 8003590:	d105      	bne.n	800359e <PWM_write_range+0x46>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	2300      	movs	r3, #0
 800359a:	6393      	str	r3, [r2, #56]	@ 0x38
 800359c:	e0d7      	b.n	800374e <PWM_write_range+0x1f6>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	889b      	ldrh	r3, [r3, #4]
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d105      	bne.n	80035b2 <PWM_write_range+0x5a>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	2300      	movs	r3, #0
 80035ae:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80035b0:	e0cd      	b.n	800374e <PWM_write_range+0x1f6>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	889b      	ldrh	r3, [r3, #4]
 80035b6:	2b0c      	cmp	r3, #12
 80035b8:	d105      	bne.n	80035c6 <PWM_write_range+0x6e>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	2300      	movs	r3, #0
 80035c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80035c4:	e0c3      	b.n	800374e <PWM_write_range+0x1f6>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	889b      	ldrh	r3, [r3, #4]
 80035ca:	2b10      	cmp	r3, #16
 80035cc:	d105      	bne.n	80035da <PWM_write_range+0x82>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	2300      	movs	r3, #0
 80035d6:	6493      	str	r3, [r2, #72]	@ 0x48
 80035d8:	e0b9      	b.n	800374e <PWM_write_range+0x1f6>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	2300      	movs	r3, #0
 80035e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80035e4:	e0b3      	b.n	800374e <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80035f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035fe:	ee17 2a90 	vmov	r2, s15
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800360e:	33fe      	adds	r3, #254	@ 0xfe
 8003610:	4a53      	ldr	r2, [pc, #332]	@ (8003760 <PWM_write_range+0x208>)
 8003612:	fba2 2303 	umull	r2, r3, r2, r3
 8003616:	0bdb      	lsrs	r3, r3, #15
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	ee07 3a90 	vmov	s15, r3
 800362a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	899b      	ldrh	r3, [r3, #12]
 8003632:	3301      	adds	r3, #1
 8003634:	ee07 3a90 	vmov	s15, r3
 8003638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800363c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003640:	ed97 7a02 	vldr	s14, [r7, #8]
 8003644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003648:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800364c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003654:	ee17 3a90 	vmov	r3, s15
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	89db      	ldrh	r3, [r3, #14]
 8003662:	4618      	mov	r0, r3
 8003664:	f7fc ff2a 	bl	80004bc <__aeabi_i2d>
 8003668:	4604      	mov	r4, r0
 800366a:	460d      	mov	r5, r1
 800366c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003670:	eef0 7ae7 	vabs.f32	s15, s15
 8003674:	ee17 0a90 	vmov	r0, s15
 8003678:	f7fc ff32 	bl	80004e0 <__aeabi_f2d>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4620      	mov	r0, r4
 8003682:	4629      	mov	r1, r5
 8003684:	f7fc ff84 	bl	8000590 <__aeabi_dmul>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4610      	mov	r0, r2
 800368e:	4619      	mov	r1, r3
 8003690:	a331      	add	r3, pc, #196	@ (adr r3, 8003758 <PWM_write_range+0x200>)
 8003692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003696:	f7fd f8a5 	bl	80007e4 <__aeabi_ddiv>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4610      	mov	r0, r2
 80036a0:	4619      	mov	r1, r3
 80036a2:	f7fd fa37 	bl	8000b14 <__aeabi_d2uiz>
 80036a6:	4603      	mov	r3, r0
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	899a      	ldrh	r2, [r3, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	89da      	ldrh	r2, [r3, #14]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	89da      	ldrh	r2, [r3, #14]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	889b      	ldrh	r3, [r3, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <PWM_write_range+0x190>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	6952      	ldr	r2, [r2, #20]
 80036e4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80036e6:	e032      	b.n	800374e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	889b      	ldrh	r3, [r3, #4]
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d106      	bne.n	80036fe <PWM_write_range+0x1a6>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80036fc:	e027      	b.n	800374e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	889b      	ldrh	r3, [r3, #4]
 8003702:	2b08      	cmp	r3, #8
 8003704:	d106      	bne.n	8003714 <PWM_write_range+0x1bc>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003712:	e01c      	b.n	800374e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	889b      	ldrh	r3, [r3, #4]
 8003718:	2b0c      	cmp	r3, #12
 800371a:	d106      	bne.n	800372a <PWM_write_range+0x1d2>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003728:	e011      	b.n	800374e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	889b      	ldrh	r3, [r3, #4]
 800372e:	2b10      	cmp	r3, #16
 8003730:	d106      	bne.n	8003740 <PWM_write_range+0x1e8>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800373e:	e006      	b.n	800374e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800374c:	e7ff      	b.n	800374e <PWM_write_range+0x1f6>
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bdb0      	pop	{r4, r5, r7, pc}
 8003756:	bf00      	nop
 8003758:	00000000 	.word	0x00000000
 800375c:	40efffe0 	.word	0x40efffe0
 8003760:	80008001 	.word	0x80008001

08003764 <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6178      	str	r0, [r7, #20]
 800376c:	6139      	str	r1, [r7, #16]
 800376e:	60fa      	str	r2, [r7, #12]
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	ed87 0a01 	vstr	s0, [r7, #4]
 8003776:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2200      	movs	r2, #0
 80037a2:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 80037c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	fb93 f2f2 	sdiv	r2, r3, r2
 80037ce:	68f9      	ldr	r1, [r7, #12]
 80037d0:	fb01 f202 	mul.w	r2, r1, r2
 80037d4:	1a9b      	subs	r3, r3, r2
 80037d6:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2200      	movs	r2, #0
 80037e2:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2200      	movs	r2, #0
 80037e8:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8003832:	213c      	movs	r1, #60	@ 0x3c
 8003834:	6938      	ldr	r0, [r7, #16]
 8003836:	f008 f9fb 	bl	800bc30 <HAL_TIM_Encoder_Start>
}
 800383a:	bf00      	nop
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	0000      	movs	r0, r0
 8003844:	0000      	movs	r0, r0
	...

08003848 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003848:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	0fda      	lsrs	r2, r3, #31
 8003870:	4413      	add	r3, r2
 8003872:	105b      	asrs	r3, r3, #1
 8003874:	461a      	mov	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4293      	cmp	r3, r2
 800387a:	dd05      	ble.n	8003888 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	e00e      	b.n	80038a6 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	0fda      	lsrs	r2, r3, #31
 800388e:	4413      	add	r3, r2
 8003890:	105b      	asrs	r3, r3, #1
 8003892:	425b      	negs	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4293      	cmp	r3, r2
 800389a:	da04      	bge.n	80038a6 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4413      	add	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b4:	441a      	add	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c4:	ee07 3a90 	vmov	s15, r3
 80038c8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	ee07 3a90 	vmov	s15, r3
 80038d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038d8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80038e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fc fdf3 	bl	80004e0 <__aeabi_f2d>
 80038fa:	4604      	mov	r4, r0
 80038fc:	460d      	mov	r5, r1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003902:	ee07 3a90 	vmov	s15, r3
 8003906:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800391a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800391e:	ee17 0a90 	vmov	r0, s15
 8003922:	f7fc fddd 	bl	80004e0 <__aeabi_f2d>
 8003926:	a33c      	add	r3, pc, #240	@ (adr r3, 8003a18 <QEI_get_diff_count+0x1d0>)
 8003928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392c:	f7fc fe30 	bl	8000590 <__aeabi_dmul>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4690      	mov	r8, r2
 8003936:	4699      	mov	r9, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393c:	4618      	mov	r0, r3
 800393e:	f7fc fdcf 	bl	80004e0 <__aeabi_f2d>
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	4640      	mov	r0, r8
 8003948:	4649      	mov	r1, r9
 800394a:	f7fc fe21 	bl	8000590 <__aeabi_dmul>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4620      	mov	r0, r4
 8003954:	4629      	mov	r1, r5
 8003956:	f7fc fc65 	bl	8000224 <__adddf3>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4610      	mov	r0, r2
 8003960:	4619      	mov	r1, r3
 8003962:	f7fd f8f7 	bl	8000b54 <__aeabi_d2f>
 8003966:	4602      	mov	r2, r0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003970:	4618      	mov	r0, r3
 8003972:	f7fc fdb5 	bl	80004e0 <__aeabi_f2d>
 8003976:	4604      	mov	r4, r0
 8003978:	460d      	mov	r5, r1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	ee07 3a90 	vmov	s15, r3
 800398e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003992:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003996:	ee16 0a90 	vmov	r0, s13
 800399a:	f7fc fda1 	bl	80004e0 <__aeabi_f2d>
 800399e:	a31e      	add	r3, pc, #120	@ (adr r3, 8003a18 <QEI_get_diff_count+0x1d0>)
 80039a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a4:	f7fc fdf4 	bl	8000590 <__aeabi_dmul>
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	4690      	mov	r8, r2
 80039ae:	4699      	mov	r9, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fc fd93 	bl	80004e0 <__aeabi_f2d>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4640      	mov	r0, r8
 80039c0:	4649      	mov	r1, r9
 80039c2:	f7fc fde5 	bl	8000590 <__aeabi_dmul>
 80039c6:	4602      	mov	r2, r0
 80039c8:	460b      	mov	r3, r1
 80039ca:	4690      	mov	r8, r2
 80039cc:	4699      	mov	r9, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fc fd84 	bl	80004e0 <__aeabi_f2d>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4640      	mov	r0, r8
 80039de:	4649      	mov	r1, r9
 80039e0:	f7fc fdd6 	bl	8000590 <__aeabi_dmul>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4620      	mov	r0, r4
 80039ea:	4629      	mov	r1, r5
 80039ec:	f7fc fc1a 	bl	8000224 <__adddf3>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4610      	mov	r0, r2
 80039f6:	4619      	mov	r1, r3
 80039f8:	f7fd f8ac 	bl	8000b54 <__aeabi_d2f>
 80039fc:	4602      	mov	r2, r0
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	605a      	str	r2, [r3, #4]
}
 8003a0a:	bf00      	nop
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a14:	f3af 8000 	nop.w
 8003a18:	54442d18 	.word	0x54442d18
 8003a1c:	400921fb 	.word	0x400921fb

08003a20 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8003a20:	b5b0      	push	{r4, r5, r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003a30:	fb02 f303 	mul.w	r3, r2, r3
 8003a34:	ee07 3a90 	vmov	s15, r3
 8003a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fc fd4a 	bl	80004e0 <__aeabi_f2d>
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	4b83      	ldr	r3, [pc, #524]	@ (8003c60 <QEI_compute_data+0x240>)
 8003a52:	f7fc fd9d 	bl	8000590 <__aeabi_dmul>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4614      	mov	r4, r2
 8003a5c:	461d      	mov	r5, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	ee07 3a90 	vmov	s15, r3
 8003a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a6a:	ee17 0a90 	vmov	r0, s15
 8003a6e:	f7fc fd37 	bl	80004e0 <__aeabi_f2d>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4620      	mov	r0, r4
 8003a78:	4629      	mov	r1, r5
 8003a7a:	f7fc feb3 	bl	80007e4 <__aeabi_ddiv>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	4614      	mov	r4, r2
 8003a84:	461d      	mov	r5, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fc fd28 	bl	80004e0 <__aeabi_f2d>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4620      	mov	r0, r4
 8003a96:	4629      	mov	r1, r5
 8003a98:	f7fc fd7a 	bl	8000590 <__aeabi_dmul>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	f7fd f856 	bl	8000b54 <__aeabi_d2f>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003ab4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003ab8:	ee17 0a90 	vmov	r0, s15
 8003abc:	f7fc fd10 	bl	80004e0 <__aeabi_f2d>
 8003ac0:	a365      	add	r3, pc, #404	@ (adr r3, 8003c58 <QEI_compute_data+0x238>)
 8003ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac6:	f7fc fd63 	bl	8000590 <__aeabi_dmul>
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	4614      	mov	r4, r2
 8003ad0:	461d      	mov	r5, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ade:	ee17 0a90 	vmov	r0, s15
 8003ae2:	f7fc fcfd 	bl	80004e0 <__aeabi_f2d>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4620      	mov	r0, r4
 8003aec:	4629      	mov	r1, r5
 8003aee:	f7fc fe79 	bl	80007e4 <__aeabi_ddiv>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4614      	mov	r4, r2
 8003af8:	461d      	mov	r5, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fc fcee 	bl	80004e0 <__aeabi_f2d>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4620      	mov	r0, r4
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	f7fc fd40 	bl	8000590 <__aeabi_dmul>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4610      	mov	r0, r2
 8003b16:	4619      	mov	r1, r3
 8003b18:	f7fd f81c 	bl	8000b54 <__aeabi_d2f>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fc fcda 	bl	80004e0 <__aeabi_f2d>
 8003b2c:	a34a      	add	r3, pc, #296	@ (adr r3, 8003c58 <QEI_compute_data+0x238>)
 8003b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b32:	f7fc fd2d 	bl	8000590 <__aeabi_dmul>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4614      	mov	r4, r2
 8003b3c:	461d      	mov	r5, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fc fccc 	bl	80004e0 <__aeabi_f2d>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	4629      	mov	r1, r5
 8003b50:	f7fc fd1e 	bl	8000590 <__aeabi_dmul>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4614      	mov	r4, r2
 8003b5a:	461d      	mov	r5, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	ee07 3a90 	vmov	s15, r3
 8003b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b68:	ee17 0a90 	vmov	r0, s15
 8003b6c:	f7fc fcb8 	bl	80004e0 <__aeabi_f2d>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4620      	mov	r0, r4
 8003b76:	4629      	mov	r1, r5
 8003b78:	f7fc fe34 	bl	80007e4 <__aeabi_ddiv>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4614      	mov	r4, r2
 8003b82:	461d      	mov	r5, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fc fca9 	bl	80004e0 <__aeabi_f2d>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4620      	mov	r0, r4
 8003b94:	4629      	mov	r1, r5
 8003b96:	f7fc fcfb 	bl	8000590 <__aeabi_dmul>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f7fc ffd7 	bl	8000b54 <__aeabi_d2f>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	ed93 7a02 	vldr	s14, [r3, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	edd3 7a03 	vldr	s15, [r3, #12]
 8003bc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bcc:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8003bd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bd4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bdc:	d00a      	beq.n	8003bf4 <QEI_compute_data+0x1d4>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bea:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf2:	e001      	b.n	8003bf8 <QEI_compute_data+0x1d8>
 8003bf4:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8003c64 <QEI_compute_data+0x244>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	ed93 7a04 	vldr	s14, [r3, #16]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c0e:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 8003c12:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c16:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c1e:	d00a      	beq.n	8003c36 <QEI_compute_data+0x216>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c24:	ee07 3a90 	vmov	s15, r3
 8003c28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c34:	e001      	b.n	8003c3a <QEI_compute_data+0x21a>
 8003c36:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8003c64 <QEI_compute_data+0x244>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	615a      	str	r2, [r3, #20]
}
 8003c50:	bf00      	nop
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bdb0      	pop	{r4, r5, r7, pc}
 8003c58:	54442d18 	.word	0x54442d18
 8003c5c:	400921fb 	.word	0x400921fb
 8003c60:	404e0000 	.word	0x404e0000
 8003c64:	00000000 	.word	0x00000000

08003c68 <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08e      	sub	sp, #56	@ 0x38
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6178      	str	r0, [r7, #20]
 8003c70:	ed87 0a04 	vstr	s0, [r7, #16]
 8003c74:	edc7 0a03 	vstr	s1, [r7, #12]
 8003c78:	ed87 1a02 	vstr	s2, [r7, #8]
 8003c7c:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2200      	movs	r2, #0
 8003c84:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 8003ca6:	ed97 7a03 	vldr	s14, [r7, #12]
 8003caa:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cb2:	eef0 7ae7 	vabs.f32	s15, s15
 8003cb6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8003cba:	ed97 7a03 	vldr	s14, [r7, #12]
 8003cbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cce:	d503      	bpl.n	8003cd8 <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	22ff      	movs	r2, #255	@ 0xff
 8003cd4:	741a      	strb	r2, [r3, #16]
 8003cd6:	e002      	b.n	8003cde <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 8003cde:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003ce2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cea:	d006      	beq.n	8003cfa <Trapezoidal_Generator+0x92>
 8003cec:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cf0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cf8:	d104      	bne.n	8003d04 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	60da      	str	r2, [r3, #12]
        return;
 8003d02:	e06f      	b.n	8003de4 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 8003d04:	edd7 6a02 	vldr	s13, [r7, #8]
 8003d08:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d10:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8003d14:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d18:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003d1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d20:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d28:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d30:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8003d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d36:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 8003d38:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003d3c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d44:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 8003d48:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003d4c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003d50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d58:	db27      	blt.n	8003daa <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8003d5a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003d5e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003d62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d66:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8003d6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d6e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d76:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d7e:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8003d80:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003d84:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 8003d92:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003d96:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003d9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	edc3 7a02 	vstr	s15, [r3, #8]
 8003da8:	e018      	b.n	8003ddc <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8003daa:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003dae:	edd7 7a01 	vldr	s15, [r7, #4]
 8003db2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003db6:	eeb0 0a66 	vmov.f32	s0, s13
 8003dba:	f00b fcb1 	bl	800f720 <sqrtf>
 8003dbe:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	6a3a      	ldr	r2, [r7, #32]
 8003dc6:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	6a3a      	ldr	r2, [r7, #32]
 8003dcc:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 8003dce:	edd7 7a08 	vldr	s15, [r7, #32]
 8003dd2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	60da      	str	r2, [r3, #12]
}
 8003de4:	3738      	adds	r7, #56	@ 0x38
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8003dec:	b480      	push	{r7}
 8003dee:	b08d      	sub	sp, #52	@ 0x34
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6178      	str	r0, [r7, #20]
 8003df4:	6139      	str	r1, [r7, #16]
 8003df6:	ed87 0a03 	vstr	s0, [r7, #12]
 8003dfa:	edc7 0a02 	vstr	s1, [r7, #8]
 8003dfe:	ed87 1a01 	vstr	s2, [r7, #4]
 8003e02:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e0c:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8004090 <Trapezoidal_Evaluated+0x2a4>
 8003e10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e2e:	f200 811b 	bhi.w	8004068 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2200      	movs	r2, #0
 8003e36:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	7c1b      	ldrb	r3, [r3, #16]
 8003e3c:	b25b      	sxtb	r3, r3
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e46:	ed97 7a00 	vldr	s14, [r7]
 8003e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	ed93 7a00 	vldr	s14, [r3]
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e5e:	eeb4 7a67 	vcmp.f32	s14, s15
 8003e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e66:	d109      	bne.n	8003e7c <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	edd3 7a00 	vldr	s15, [r3]
 8003e6e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e76:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8003e7a:	e00c      	b.n	8003e96 <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	7c1b      	ldrb	r3, [r3, #16]
 8003e80:	b25b      	sxtb	r3, r3
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e8a:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e92:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	ed93 7a03 	vldr	s14, [r3, #12]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	edd3 7a00 	vldr	s15, [r3]
 8003ea2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eaa:	d824      	bhi.n	8003ef6 <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8003eac:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003eb0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003eb4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ebe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ec8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ecc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ee0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef2:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 8003ef4:	e0c6      	b.n	8004084 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	ed93 7a03 	vldr	s14, [r3, #12]
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f0a:	d830      	bhi.n	8003f6e <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8003f0c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f10:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003f14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	edd3 7a00 	vldr	s15, [r3]
 8003f1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	edd3 7a00 	vldr	s15, [r3]
 8003f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f2c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f34:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	edd3 7a00 	vldr	s15, [r3]
 8003f44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f48:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003f4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f50:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f62:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	609a      	str	r2, [r3, #8]
}
 8003f6c:	e08a      	b.n	8004084 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f82:	d900      	bls.n	8003f86 <Trapezoidal_Evaluated+0x19a>
}
 8003f84:	e07e      	b.n	8004084 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8003f86:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f8a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003f8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	edd3 7a00 	vldr	s15, [r3]
 8003f98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	edd3 7a00 	vldr	s15, [r3]
 8003fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa6:	ed97 7a03 	vldr	s14, [r7, #12]
 8003faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fae:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	ed93 7a01 	vldr	s14, [r3, #4]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	edd3 7a00 	vldr	s15, [r3]
 8003fc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fca:	dd11      	ble.n	8003ff0 <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	ed93 7a01 	vldr	s14, [r3, #4]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	edd3 7a00 	vldr	s15, [r3]
 8003fd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fdc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fec:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004000:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 8004004:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004008:	edd7 7a07 	vldr	s15, [r7, #28]
 800400c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004010:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004014:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004018:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800401c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8004020:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004024:	edd7 7a07 	vldr	s15, [r7, #28]
 8004028:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800402c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004030:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 800403e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004042:	edd7 7a07 	vldr	s15, [r7, #28]
 8004046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800404a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800404e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 8004058:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800405c:	eef1 7a67 	vneg.f32	s15, s15
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004066:	e00d      	b.n	8004084 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2201      	movs	r2, #1
 800406c:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	609a      	str	r2, [r3, #8]
}
 8004084:	bf00      	nop
 8004086:	3734      	adds	r7, #52	@ 0x34
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	3a83126f 	.word	0x3a83126f

08004094 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	ed87 0a01 	vstr	s0, [r7, #4]
 800409e:	4603      	mov	r3, r0
 80040a0:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	2b1a      	cmp	r3, #26
 80040a6:	d018      	beq.n	80040da <temperature_to_base+0x46>
 80040a8:	2b1a      	cmp	r3, #26
 80040aa:	dc1d      	bgt.n	80040e8 <temperature_to_base+0x54>
 80040ac:	2b18      	cmp	r3, #24
 80040ae:	d002      	beq.n	80040b6 <temperature_to_base+0x22>
 80040b0:	2b19      	cmp	r3, #25
 80040b2:	d003      	beq.n	80040bc <temperature_to_base+0x28>
 80040b4:	e018      	b.n	80040e8 <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 80040b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80040ba:	e017      	b.n	80040ec <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 80040bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80040c0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80040fc <temperature_to_base+0x68>
 80040c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040c8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80040cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80040d0:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 80040d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040d8:	e008      	b.n	80040ec <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 80040da:	edd7 7a01 	vldr	s15, [r7, #4]
 80040de:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8004100 <temperature_to_base+0x6c>
 80040e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040e6:	e001      	b.n	80040ec <temperature_to_base+0x58>
        default:
            return value;
 80040e8:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 80040ec:	eeb0 0a67 	vmov.f32	s0, s15
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	42000000 	.word	0x42000000
 8004100:	43889333 	.word	0x43889333

08004104 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	ed87 0a01 	vstr	s0, [r7, #4]
 800410e:	4603      	mov	r3, r0
 8004110:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 8004112:	78fb      	ldrb	r3, [r7, #3]
 8004114:	2b1a      	cmp	r3, #26
 8004116:	d018      	beq.n	800414a <temperature_from_base+0x46>
 8004118:	2b1a      	cmp	r3, #26
 800411a:	dc1d      	bgt.n	8004158 <temperature_from_base+0x54>
 800411c:	2b18      	cmp	r3, #24
 800411e:	d002      	beq.n	8004126 <temperature_from_base+0x22>
 8004120:	2b19      	cmp	r3, #25
 8004122:	d003      	beq.n	800412c <temperature_from_base+0x28>
 8004124:	e018      	b.n	8004158 <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8004126:	edd7 7a01 	vldr	s15, [r7, #4]
 800412a:	e017      	b.n	800415c <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 800412c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004130:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8004134:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004138:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 800413c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004140:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800416c <temperature_from_base+0x68>
 8004144:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004148:	e008      	b.n	800415c <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 800414a:	edd7 7a01 	vldr	s15, [r7, #4]
 800414e:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8004170 <temperature_from_base+0x6c>
 8004152:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004156:	e001      	b.n	800415c <temperature_from_base+0x58>
        default:
            return value;
 8004158:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 800415c:	eeb0 0a67 	vmov.f32	s0, s15
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	42000000 	.word	0x42000000
 8004170:	43889333 	.word	0x43889333

08004174 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2202      	movs	r2, #2
 8004186:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	e00a      	b.n	80041a4 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	3304      	adds	r3, #4
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3301      	adds	r3, #1
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b1a      	cmp	r3, #26
 80041a8:	ddf1      	ble.n	800418e <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a11      	ldr	r2, [pc, #68]	@ (80041f4 <init_length_converter+0x80>)
 80041ae:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a11      	ldr	r2, [pc, #68]	@ (80041f8 <init_length_converter+0x84>)
 80041b4:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80041bc:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a0e      	ldr	r2, [pc, #56]	@ (80041fc <init_length_converter+0x88>)
 80041c2:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a0e      	ldr	r2, [pc, #56]	@ (8004200 <init_length_converter+0x8c>)
 80041c8:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004204 <init_length_converter+0x90>)
 80041ce:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004208 <init_length_converter+0x94>)
 80041d4:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a0c      	ldr	r2, [pc, #48]	@ (800420c <init_length_converter+0x98>)
 80041da:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80041e8:	bf00      	nop
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	3a83126f 	.word	0x3a83126f
 80041f8:	3c23d70a 	.word	0x3c23d70a
 80041fc:	447a0000 	.word	0x447a0000
 8004200:	3cd013a9 	.word	0x3cd013a9
 8004204:	3e9c0ebf 	.word	0x3e9c0ebf
 8004208:	3f6a161e 	.word	0x3f6a161e
 800420c:	44c92b02 	.word	0x44c92b02

08004210 <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	220a      	movs	r2, #10
 8004222:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	e00a      	b.n	8004240 <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	3304      	adds	r3, #4
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3301      	adds	r3, #1
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b1a      	cmp	r3, #26
 8004244:	ddf1      	ble.n	800422a <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a0e      	ldr	r2, [pc, #56]	@ (8004284 <init_mass_converter+0x74>)
 800424a:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a0e      	ldr	r2, [pc, #56]	@ (8004288 <init_mass_converter+0x78>)
 8004250:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004258:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a0b      	ldr	r2, [pc, #44]	@ (800428c <init_mass_converter+0x7c>)
 800425e:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a0b      	ldr	r2, [pc, #44]	@ (8004290 <init_mass_converter+0x80>)
 8004264:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a0a      	ldr	r2, [pc, #40]	@ (8004294 <init_mass_converter+0x84>)
 800426a:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	358637bd 	.word	0x358637bd
 8004288:	3a83126f 	.word	0x3a83126f
 800428c:	447a0000 	.word	0x447a0000
 8004290:	3ce83d36 	.word	0x3ce83d36
 8004294:	3ee83d36 	.word	0x3ee83d36

08004298 <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	220f      	movs	r2, #15
 80042aa:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	e00a      	b.n	80042c8 <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	3304      	adds	r3, #4
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3301      	adds	r3, #1
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b1a      	cmp	r3, #26
 80042cc:	ddf1      	ble.n	80042b2 <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a0a      	ldr	r2, [pc, #40]	@ (80042fc <init_angle_converter+0x64>)
 80042d2:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80042da:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a08      	ldr	r2, [pc, #32]	@ (8004300 <init_angle_converter+0x68>)
 80042e0:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80042ee:	bf00      	nop
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	3c8efa35 	.word	0x3c8efa35
 8004300:	3c80adfd 	.word	0x3c80adfd

08004304 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2203      	movs	r2, #3
 8004310:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2214      	movs	r2, #20
 8004316:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	e00a      	b.n	8004334 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	3304      	adds	r3, #4
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3301      	adds	r3, #1
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b1a      	cmp	r3, #26
 8004338:	ddf1      	ble.n	800431e <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a10      	ldr	r2, [pc, #64]	@ (8004380 <init_time_converter+0x7c>)
 800433e:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a10      	ldr	r2, [pc, #64]	@ (8004384 <init_time_converter+0x80>)
 8004344:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a0f      	ldr	r2, [pc, #60]	@ (8004388 <init_time_converter+0x84>)
 800434a:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004352:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a0d      	ldr	r2, [pc, #52]	@ (800438c <init_time_converter+0x88>)
 8004358:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a0c      	ldr	r2, [pc, #48]	@ (8004390 <init_time_converter+0x8c>)
 800435e:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a0c      	ldr	r2, [pc, #48]	@ (8004394 <init_time_converter+0x90>)
 8004364:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004372:	bf00      	nop
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	3089705f 	.word	0x3089705f
 8004384:	358637bd 	.word	0x358637bd
 8004388:	3a83126f 	.word	0x3a83126f
 800438c:	42700000 	.word	0x42700000
 8004390:	45610000 	.word	0x45610000
 8004394:	47a8c000 	.word	0x47a8c000

08004398 <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2204      	movs	r2, #4
 80043a4:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2218      	movs	r2, #24
 80043aa:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80043ac:	2300      	movs	r3, #0
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	e00a      	b.n	80043c8 <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	3304      	adds	r3, #4
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3301      	adds	r3, #1
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2b1a      	cmp	r3, #26
 80043cc:	ddf1      	ble.n	80043b2 <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a05      	ldr	r2, [pc, #20]	@ (80043e8 <init_temperature_converter+0x50>)
 80043d2:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a05      	ldr	r2, [pc, #20]	@ (80043ec <init_temperature_converter+0x54>)
 80043d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80043da:	bf00      	nop
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	08004095 	.word	0x08004095
 80043ec:	08004105 	.word	0x08004105

080043f0 <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff feba 	bl	8004174 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3378      	adds	r3, #120	@ 0x78
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff ff03 	bl	8004210 <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	33f0      	adds	r3, #240	@ 0xf0
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff ff42 	bl	8004298 <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff ff72 	bl	8004304 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff ffb6 	bl	8004398 <init_temperature_converter>
}
 800442c:	bf00      	nop
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	2b1a      	cmp	r3, #26
 8004442:	d803      	bhi.n	800444c <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 8004444:	79fb      	ldrb	r3, [r7, #7]
 8004446:	4a05      	ldr	r2, [pc, #20]	@ (800445c <UnitConverter_get_unit_type+0x28>)
 8004448:	5cd3      	ldrb	r3, [r2, r3]
 800444a:	e000      	b.n	800444e <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	200000d4 	.word	0x200000d4

08004460 <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	ed87 0a02 	vstr	s0, [r7, #8]
 800446c:	460b      	mov	r3, r1
 800446e:	71fb      	strb	r3, [r7, #7]
 8004470:	4613      	mov	r3, r2
 8004472:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff ffdc 	bl	8004434 <UnitConverter_get_unit_type>
 800447c:	4603      	mov	r3, r0
 800447e:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 8004480:	79bb      	ldrb	r3, [r7, #6]
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff ffd6 	bl	8004434 <UnitConverter_get_unit_type>
 8004488:	4603      	mov	r3, r0
 800448a:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 800448c:	7efa      	ldrb	r2, [r7, #27]
 800448e:	7ebb      	ldrb	r3, [r7, #26]
 8004490:	429a      	cmp	r2, r3
 8004492:	d002      	beq.n	800449a <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 8004494:	edd7 7a02 	vldr	s15, [r7, #8]
 8004498:	e03b      	b.n	8004512 <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 800449a:	7efa      	ldrb	r2, [r7, #27]
 800449c:	4613      	mov	r3, r2
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4413      	add	r3, r2
 80044a8:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b6:	79fa      	ldrb	r2, [r7, #7]
 80044b8:	4610      	mov	r0, r2
 80044ba:	ed97 0a02 	vldr	s0, [r7, #8]
 80044be:	4798      	blx	r3
 80044c0:	ed87 0a07 	vstr	s0, [r7, #28]
 80044c4:	e00c      	b.n	80044e0 <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	3304      	adds	r3, #4
 80044d0:	edd3 7a00 	vldr	s15, [r3]
 80044d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80044d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044dc:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d009      	beq.n	80044fc <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ec:	79ba      	ldrb	r2, [r7, #6]
 80044ee:	4610      	mov	r0, r2
 80044f0:	ed97 0a07 	vldr	s0, [r7, #28]
 80044f4:	4798      	blx	r3
 80044f6:	eef0 7a40 	vmov.f32	s15, s0
 80044fa:	e00a      	b.n	8004512 <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 80044fc:	79bb      	ldrb	r3, [r7, #6]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	3304      	adds	r3, #4
 8004506:	ed93 7a00 	vldr	s14, [r3]
 800450a:	edd7 6a07 	vldr	s13, [r7, #28]
 800450e:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 8004512:	eeb0 0a67 	vmov.f32	s0, s15
 8004516:	3720      	adds	r7, #32
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	ed87 0a02 	vstr	s0, [r7, #8]
 8004528:	460b      	mov	r3, r1
 800452a:	71fb      	strb	r3, [r7, #7]
 800452c:	4613      	mov	r3, r2
 800452e:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004530:	79fb      	ldrb	r3, [r7, #7]
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff ff7e 	bl	8004434 <UnitConverter_get_unit_type>
 8004538:	4603      	mov	r3, r0
 800453a:	2b02      	cmp	r3, #2
 800453c:	d111      	bne.n	8004562 <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 800453e:	79bb      	ldrb	r3, [r7, #6]
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff ff77 	bl	8004434 <UnitConverter_get_unit_type>
 8004546:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004548:	2b02      	cmp	r3, #2
 800454a:	d10a      	bne.n	8004562 <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 800454c:	79ba      	ldrb	r2, [r7, #6]
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	4619      	mov	r1, r3
 8004552:	ed97 0a02 	vldr	s0, [r7, #8]
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f7ff ff82 	bl	8004460 <UnitConverter_convert>
 800455c:	eef0 7a40 	vmov.f32	s15, s0
 8004560:	e001      	b.n	8004566 <UnitConverter_angle+0x4a>
    }
    return value;
 8004562:	edd7 7a02 	vldr	s15, [r7, #8]
}
 8004566:	eeb0 0a67 	vmov.f32	s0, s15
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08c      	sub	sp, #48	@ 0x30
 8004574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004576:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	605a      	str	r2, [r3, #4]
 8004580:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004582:	1d3b      	adds	r3, r7, #4
 8004584:	2220      	movs	r2, #32
 8004586:	2100      	movs	r1, #0
 8004588:	4618      	mov	r0, r3
 800458a:	f00a ffad 	bl	800f4e8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800458e:	4b39      	ldr	r3, [pc, #228]	@ (8004674 <MX_ADC1_Init+0x104>)
 8004590:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004594:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004596:	4b37      	ldr	r3, [pc, #220]	@ (8004674 <MX_ADC1_Init+0x104>)
 8004598:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800459c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800459e:	4b35      	ldr	r3, [pc, #212]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80045a4:	4b33      	ldr	r3, [pc, #204]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80045aa:	4b32      	ldr	r3, [pc, #200]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80045b0:	4b30      	ldr	r3, [pc, #192]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80045b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045b8:	2204      	movs	r2, #4
 80045ba:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80045bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045be:	2200      	movs	r2, #0
 80045c0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80045c2:	4b2c      	ldr	r3, [pc, #176]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045c4:	2201      	movs	r2, #1
 80045c6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80045c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045ca:	2202      	movs	r2, #2
 80045cc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80045ce:	4b29      	ldr	r3, [pc, #164]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80045d6:	4b27      	ldr	r3, [pc, #156]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045d8:	2200      	movs	r2, #0
 80045da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80045dc:	4b25      	ldr	r3, [pc, #148]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045de:	2200      	movs	r2, #0
 80045e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80045e2:	4b24      	ldr	r3, [pc, #144]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80045ea:	4b22      	ldr	r3, [pc, #136]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80045f0:	4b20      	ldr	r3, [pc, #128]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80045f8:	481e      	ldr	r0, [pc, #120]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045fa:	f003 fe3d 	bl	8008278 <HAL_ADC_Init>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8004604:	f001 fe88 	bl	8006318 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004608:	2300      	movs	r3, #0
 800460a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800460c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004610:	4619      	mov	r1, r3
 8004612:	4818      	ldr	r0, [pc, #96]	@ (8004674 <MX_ADC1_Init+0x104>)
 8004614:	f004 ff5c 	bl	80094d0 <HAL_ADCEx_MultiModeConfigChannel>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800461e:	f001 fe7b 	bl	8006318 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004622:	4b15      	ldr	r3, [pc, #84]	@ (8004678 <MX_ADC1_Init+0x108>)
 8004624:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004626:	2306      	movs	r3, #6
 8004628:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800462a:	2307      	movs	r3, #7
 800462c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800462e:	237f      	movs	r3, #127	@ 0x7f
 8004630:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004632:	2304      	movs	r3, #4
 8004634:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004636:	2300      	movs	r3, #0
 8004638:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800463a:	1d3b      	adds	r3, r7, #4
 800463c:	4619      	mov	r1, r3
 800463e:	480d      	ldr	r0, [pc, #52]	@ (8004674 <MX_ADC1_Init+0x104>)
 8004640:	f004 f8c8 	bl	80087d4 <HAL_ADC_ConfigChannel>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800464a:	f001 fe65 	bl	8006318 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800464e:	4b0b      	ldr	r3, [pc, #44]	@ (800467c <MX_ADC1_Init+0x10c>)
 8004650:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004652:	230c      	movs	r3, #12
 8004654:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004656:	1d3b      	adds	r3, r7, #4
 8004658:	4619      	mov	r1, r3
 800465a:	4806      	ldr	r0, [pc, #24]	@ (8004674 <MX_ADC1_Init+0x104>)
 800465c:	f004 f8ba 	bl	80087d4 <HAL_ADC_ConfigChannel>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8004666:	f001 fe57 	bl	8006318 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800466a:	bf00      	nop
 800466c:	3730      	adds	r7, #48	@ 0x30
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	20000178 	.word	0x20000178
 8004678:	19200040 	.word	0x19200040
 800467c:	1d500080 	.word	0x1d500080

08004680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b09e      	sub	sp, #120	@ 0x78
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004688:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	605a      	str	r2, [r3, #4]
 8004692:	609a      	str	r2, [r3, #8]
 8004694:	60da      	str	r2, [r3, #12]
 8004696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004698:	f107 0310 	add.w	r3, r7, #16
 800469c:	2254      	movs	r2, #84	@ 0x54
 800469e:	2100      	movs	r1, #0
 80046a0:	4618      	mov	r0, r3
 80046a2:	f00a ff21 	bl	800f4e8 <memset>
  if(adcHandle->Instance==ADC1)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046ae:	d15e      	bne.n	800476e <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80046b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046b4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80046b6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80046ba:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046bc:	f107 0310 	add.w	r3, r7, #16
 80046c0:	4618      	mov	r0, r3
 80046c2:	f006 fbfb 	bl	800aebc <HAL_RCCEx_PeriphCLKConfig>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80046cc:	f001 fe24 	bl	8006318 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80046d0:	4b29      	ldr	r3, [pc, #164]	@ (8004778 <HAL_ADC_MspInit+0xf8>)
 80046d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046d4:	4a28      	ldr	r2, [pc, #160]	@ (8004778 <HAL_ADC_MspInit+0xf8>)
 80046d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80046da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046dc:	4b26      	ldr	r3, [pc, #152]	@ (8004778 <HAL_ADC_MspInit+0xf8>)
 80046de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046e8:	4b23      	ldr	r3, [pc, #140]	@ (8004778 <HAL_ADC_MspInit+0xf8>)
 80046ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ec:	4a22      	ldr	r2, [pc, #136]	@ (8004778 <HAL_ADC_MspInit+0xf8>)
 80046ee:	f043 0304 	orr.w	r3, r3, #4
 80046f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046f4:	4b20      	ldr	r3, [pc, #128]	@ (8004778 <HAL_ADC_MspInit+0xf8>)
 80046f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004700:	2303      	movs	r3, #3
 8004702:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004704:	2303      	movs	r3, #3
 8004706:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004708:	2300      	movs	r3, #0
 800470a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800470c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004710:	4619      	mov	r1, r3
 8004712:	481a      	ldr	r0, [pc, #104]	@ (800477c <HAL_ADC_MspInit+0xfc>)
 8004714:	f005 fc26 	bl	8009f64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004718:	4b19      	ldr	r3, [pc, #100]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 800471a:	4a1a      	ldr	r2, [pc, #104]	@ (8004784 <HAL_ADC_MspInit+0x104>)
 800471c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800471e:	4b18      	ldr	r3, [pc, #96]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 8004720:	2205      	movs	r2, #5
 8004722:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004724:	4b16      	ldr	r3, [pc, #88]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 8004726:	2200      	movs	r2, #0
 8004728:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800472a:	4b15      	ldr	r3, [pc, #84]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 800472c:	2200      	movs	r2, #0
 800472e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004730:	4b13      	ldr	r3, [pc, #76]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 8004732:	2280      	movs	r2, #128	@ 0x80
 8004734:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004736:	4b12      	ldr	r3, [pc, #72]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 8004738:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800473c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800473e:	4b10      	ldr	r3, [pc, #64]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 8004740:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004744:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004746:	4b0e      	ldr	r3, [pc, #56]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 8004748:	2220      	movs	r2, #32
 800474a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800474c:	4b0c      	ldr	r3, [pc, #48]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 800474e:	2200      	movs	r2, #0
 8004750:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004752:	480b      	ldr	r0, [pc, #44]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 8004754:	f005 f8d4 	bl	8009900 <HAL_DMA_Init>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 800475e:	f001 fddb 	bl	8006318 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a06      	ldr	r2, [pc, #24]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 8004766:	655a      	str	r2, [r3, #84]	@ 0x54
 8004768:	4a05      	ldr	r2, [pc, #20]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800476e:	bf00      	nop
 8004770:	3778      	adds	r7, #120	@ 0x78
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40021000 	.word	0x40021000
 800477c:	48000800 	.word	0x48000800
 8004780:	200001e4 	.word	0x200001e4
 8004784:	40020008 	.word	0x40020008

08004788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800478e:	4b22      	ldr	r3, [pc, #136]	@ (8004818 <MX_DMA_Init+0x90>)
 8004790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004792:	4a21      	ldr	r2, [pc, #132]	@ (8004818 <MX_DMA_Init+0x90>)
 8004794:	f043 0304 	orr.w	r3, r3, #4
 8004798:	6493      	str	r3, [r2, #72]	@ 0x48
 800479a:	4b1f      	ldr	r3, [pc, #124]	@ (8004818 <MX_DMA_Init+0x90>)
 800479c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	607b      	str	r3, [r7, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80047a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004818 <MX_DMA_Init+0x90>)
 80047a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004818 <MX_DMA_Init+0x90>)
 80047ac:	f043 0301 	orr.w	r3, r3, #1
 80047b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80047b2:	4b19      	ldr	r3, [pc, #100]	@ (8004818 <MX_DMA_Init+0x90>)
 80047b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80047be:	2200      	movs	r2, #0
 80047c0:	2100      	movs	r1, #0
 80047c2:	200b      	movs	r0, #11
 80047c4:	f005 f867 	bl	8009896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80047c8:	200b      	movs	r0, #11
 80047ca:	f005 f87e 	bl	80098ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80047ce:	2200      	movs	r2, #0
 80047d0:	2100      	movs	r1, #0
 80047d2:	200c      	movs	r0, #12
 80047d4:	f005 f85f 	bl	8009896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80047d8:	200c      	movs	r0, #12
 80047da:	f005 f876 	bl	80098ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80047de:	2200      	movs	r2, #0
 80047e0:	2100      	movs	r1, #0
 80047e2:	200d      	movs	r0, #13
 80047e4:	f005 f857 	bl	8009896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80047e8:	200d      	movs	r0, #13
 80047ea:	f005 f86e 	bl	80098ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80047ee:	2200      	movs	r2, #0
 80047f0:	2100      	movs	r1, #0
 80047f2:	200e      	movs	r0, #14
 80047f4:	f005 f84f 	bl	8009896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80047f8:	200e      	movs	r0, #14
 80047fa:	f005 f866 	bl	80098ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80047fe:	2200      	movs	r2, #0
 8004800:	2100      	movs	r1, #0
 8004802:	200f      	movs	r0, #15
 8004804:	f005 f847 	bl	8009896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004808:	200f      	movs	r0, #15
 800480a:	f005 f85e 	bl	80098ca <HAL_NVIC_EnableIRQ>

}
 800480e:	bf00      	nop
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000

0800481c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08a      	sub	sp, #40	@ 0x28
 8004820:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004822:	f107 0314 	add.w	r3, r7, #20
 8004826:	2200      	movs	r2, #0
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	605a      	str	r2, [r3, #4]
 800482c:	609a      	str	r2, [r3, #8]
 800482e:	60da      	str	r2, [r3, #12]
 8004830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004832:	4b63      	ldr	r3, [pc, #396]	@ (80049c0 <MX_GPIO_Init+0x1a4>)
 8004834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004836:	4a62      	ldr	r2, [pc, #392]	@ (80049c0 <MX_GPIO_Init+0x1a4>)
 8004838:	f043 0304 	orr.w	r3, r3, #4
 800483c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800483e:	4b60      	ldr	r3, [pc, #384]	@ (80049c0 <MX_GPIO_Init+0x1a4>)
 8004840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	613b      	str	r3, [r7, #16]
 8004848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800484a:	4b5d      	ldr	r3, [pc, #372]	@ (80049c0 <MX_GPIO_Init+0x1a4>)
 800484c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800484e:	4a5c      	ldr	r2, [pc, #368]	@ (80049c0 <MX_GPIO_Init+0x1a4>)
 8004850:	f043 0320 	orr.w	r3, r3, #32
 8004854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004856:	4b5a      	ldr	r3, [pc, #360]	@ (80049c0 <MX_GPIO_Init+0x1a4>)
 8004858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800485a:	f003 0320 	and.w	r3, r3, #32
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004862:	4b57      	ldr	r3, [pc, #348]	@ (80049c0 <MX_GPIO_Init+0x1a4>)
 8004864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004866:	4a56      	ldr	r2, [pc, #344]	@ (80049c0 <MX_GPIO_Init+0x1a4>)
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800486e:	4b54      	ldr	r3, [pc, #336]	@ (80049c0 <MX_GPIO_Init+0x1a4>)
 8004870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	60bb      	str	r3, [r7, #8]
 8004878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800487a:	4b51      	ldr	r3, [pc, #324]	@ (80049c0 <MX_GPIO_Init+0x1a4>)
 800487c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800487e:	4a50      	ldr	r2, [pc, #320]	@ (80049c0 <MX_GPIO_Init+0x1a4>)
 8004880:	f043 0302 	orr.w	r3, r3, #2
 8004884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004886:	4b4e      	ldr	r3, [pc, #312]	@ (80049c0 <MX_GPIO_Init+0x1a4>)
 8004888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	607b      	str	r3, [r7, #4]
 8004890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 8004892:	2200      	movs	r2, #0
 8004894:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8004898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800489c:	f005 fcfc 	bl	800a298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80048a0:	2200      	movs	r2, #0
 80048a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80048a6:	4847      	ldr	r0, [pc, #284]	@ (80049c4 <MX_GPIO_Init+0x1a8>)
 80048a8:	f005 fcf6 	bl	800a298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80048ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80048b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80048b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80048b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b8:	2300      	movs	r3, #0
 80048ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80048bc:	f107 0314 	add.w	r3, r7, #20
 80048c0:	4619      	mov	r1, r3
 80048c2:	4840      	ldr	r0, [pc, #256]	@ (80049c4 <MX_GPIO_Init+0x1a8>)
 80048c4:	f005 fb4e 	bl	8009f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 80048c8:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 80048cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048ce:	2301      	movs	r3, #1
 80048d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048d6:	2300      	movs	r3, #0
 80048d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048da:	f107 0314 	add.w	r3, r7, #20
 80048de:	4619      	mov	r1, r3
 80048e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048e4:	f005 fb3e 	bl	8009f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin J1_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin|J1_Pin;
 80048e8:	f241 0381 	movw	r3, #4225	@ 0x1081
 80048ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048f6:	f107 0314 	add.w	r3, r7, #20
 80048fa:	4619      	mov	r1, r3
 80048fc:	4832      	ldr	r0, [pc, #200]	@ (80049c8 <MX_GPIO_Init+0x1ac>)
 80048fe:	f005 fb31 	bl	8009f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 8004902:	2306      	movs	r3, #6
 8004904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004906:	2300      	movs	r3, #0
 8004908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800490a:	2302      	movs	r3, #2
 800490c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800490e:	f107 0314 	add.w	r3, r7, #20
 8004912:	4619      	mov	r1, r3
 8004914:	482c      	ldr	r0, [pc, #176]	@ (80049c8 <MX_GPIO_Init+0x1ac>)
 8004916:	f005 fb25 	bl	8009f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800491a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800491e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004920:	2301      	movs	r3, #1
 8004922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004924:	2300      	movs	r3, #0
 8004926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004928:	2300      	movs	r3, #0
 800492a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800492c:	f107 0314 	add.w	r3, r7, #20
 8004930:	4619      	mov	r1, r3
 8004932:	4824      	ldr	r0, [pc, #144]	@ (80049c4 <MX_GPIO_Init+0x1a8>)
 8004934:	f005 fb16 	bl	8009f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin J2_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin|J2_Pin;
 8004938:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800493c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800493e:	2300      	movs	r3, #0
 8004940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004942:	2300      	movs	r3, #0
 8004944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004946:	f107 0314 	add.w	r3, r7, #20
 800494a:	4619      	mov	r1, r3
 800494c:	481d      	ldr	r0, [pc, #116]	@ (80049c4 <MX_GPIO_Init+0x1a8>)
 800494e:	f005 fb09 	bl	8009f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : EMER_Pin */
  GPIO_InitStruct.Pin = EMER_Pin;
 8004952:	2310      	movs	r3, #16
 8004954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004956:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800495a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800495c:	2300      	movs	r3, #0
 800495e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_GPIO_Port, &GPIO_InitStruct);
 8004960:	f107 0314 	add.w	r3, r7, #20
 8004964:	4619      	mov	r1, r3
 8004966:	4818      	ldr	r0, [pc, #96]	@ (80049c8 <MX_GPIO_Init+0x1ac>)
 8004968:	f005 fafc 	bl	8009f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PROX_Pin */
  GPIO_InitStruct.Pin = PROX_Pin;
 800496c:	2340      	movs	r3, #64	@ 0x40
 800496e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004970:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004976:	2301      	movs	r3, #1
 8004978:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PROX_GPIO_Port, &GPIO_InitStruct);
 800497a:	f107 0314 	add.w	r3, r7, #20
 800497e:	4619      	mov	r1, r3
 8004980:	4811      	ldr	r0, [pc, #68]	@ (80049c8 <MX_GPIO_Init+0x1ac>)
 8004982:	f005 faef 	bl	8009f64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004986:	2200      	movs	r2, #0
 8004988:	2100      	movs	r1, #0
 800498a:	200a      	movs	r0, #10
 800498c:	f004 ff83 	bl	8009896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004990:	200a      	movs	r0, #10
 8004992:	f004 ff9a 	bl	80098ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004996:	2200      	movs	r2, #0
 8004998:	2100      	movs	r1, #0
 800499a:	2017      	movs	r0, #23
 800499c:	f004 ff7b 	bl	8009896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80049a0:	2017      	movs	r0, #23
 80049a2:	f004 ff92 	bl	80098ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80049a6:	2200      	movs	r2, #0
 80049a8:	2100      	movs	r1, #0
 80049aa:	2028      	movs	r0, #40	@ 0x28
 80049ac:	f004 ff73 	bl	8009896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80049b0:	2028      	movs	r0, #40	@ 0x28
 80049b2:	f004 ff8a 	bl	80098ca <HAL_NVIC_EnableIRQ>

}
 80049b6:	bf00      	nop
 80049b8:	3728      	adds	r7, #40	@ 0x28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40021000 	.word	0x40021000
 80049c4:	48000800 	.word	0x48000800
 80049c8:	48000400 	.word	0x48000400

080049cc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80049d0:	f003 f99d 	bl	8007d0e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80049d4:	f000 f8a8 	bl	8004b28 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80049d8:	f7ff ff20 	bl	800481c <MX_GPIO_Init>
	MX_DMA_Init();
 80049dc:	f7ff fed4 	bl	8004788 <MX_DMA_Init>
	MX_ADC1_Init();
 80049e0:	f7ff fdc6 	bl	8004570 <MX_ADC1_Init>
	MX_TIM2_Init();
 80049e4:	f002 fba8 	bl	8007138 <MX_TIM2_Init>
	MX_TIM3_Init();
 80049e8:	f002 fbf4 	bl	80071d4 <MX_TIM3_Init>
	MX_TIM4_Init();
 80049ec:	f002 fc48 	bl	8007280 <MX_TIM4_Init>
	MX_TIM5_Init();
 80049f0:	f002 fc9c 	bl	800732c <MX_TIM5_Init>
	MX_TIM8_Init();
 80049f4:	f002 fcf0 	bl	80073d8 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 80049f8:	f002 ffb2 	bl	8007960 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 80049fc:	f002 fdaa 	bl	8007554 <MX_TIM16_Init>
	MX_TIM1_Init();
 8004a00:	f002 fb06 	bl	8007010 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 8004a04:	f002 ff62 	bl	80078cc <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 8004a08:	f001 fc8e 	bl	8006328 <plotter_begin>

	// Initialize position setpoints to current position to prevent startup errors
	prismatic_axis.position = prismatic_encoder.mm;
 8004a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8004af8 <main+0x12c>)
 8004a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a10:	4a3a      	ldr	r2, [pc, #232]	@ (8004afc <main+0x130>)
 8004a12:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8004a14:	4b3a      	ldr	r3, [pc, #232]	@ (8004b00 <main+0x134>)
 8004a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a18:	4a3a      	ldr	r2, [pc, #232]	@ (8004b04 <main+0x138>)
 8004a1a:	6013      	str	r3, [r2, #0]

	// Reset all error terms and flags
	prismatic_axis.pos_error = 0.0f;
 8004a1c:	4b37      	ldr	r3, [pc, #220]	@ (8004afc <main+0x130>)
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	615a      	str	r2, [r3, #20]
	prismatic_axis.vel_error = 0.0f;
 8004a24:	4b35      	ldr	r3, [pc, #212]	@ (8004afc <main+0x130>)
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	619a      	str	r2, [r3, #24]
	revolute_axis.pos_error = 0.0f;
 8004a2c:	4b35      	ldr	r3, [pc, #212]	@ (8004b04 <main+0x138>)
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	615a      	str	r2, [r3, #20]
	revolute_axis.vel_error = 0.0f;
 8004a34:	4b33      	ldr	r3, [pc, #204]	@ (8004b04 <main+0x138>)
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	619a      	str	r2, [r3, #24]
	prismatic_axis.trajectory_active = false;
 8004a3c:	4b2f      	ldr	r3, [pc, #188]	@ (8004afc <main+0x130>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8004a44:	4b2f      	ldr	r3, [pc, #188]	@ (8004b04 <main+0x138>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (b1 && !button_pressed_previous && !revolute_axis.trajectory_active
 8004a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8004b08 <main+0x13c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d037      	beq.n	8004ac4 <main+0xf8>
 8004a54:	4b2d      	ldr	r3, [pc, #180]	@ (8004b0c <main+0x140>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	f083 0301 	eor.w	r3, r3, #1
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d030      	beq.n	8004ac4 <main+0xf8>
 8004a62:	4b28      	ldr	r3, [pc, #160]	@ (8004b04 <main+0x138>)
 8004a64:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004a68:	f083 0301 	eor.w	r3, r3, #1
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d028      	beq.n	8004ac4 <main+0xf8>
				&& !prismatic_axis.trajectory_active) {
 8004a72:	4b22      	ldr	r3, [pc, #136]	@ (8004afc <main+0x130>)
 8004a74:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004a78:	f083 0301 	eor.w	r3, r3, #1
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d020      	beq.n	8004ac4 <main+0xf8>
			start_combined_trajectory(
 8004a82:	4b23      	ldr	r3, [pc, #140]	@ (8004b10 <main+0x144>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
					sequence_pris_points[trajectory_sequence_index],
 8004a86:	4a23      	ldr	r2, [pc, #140]	@ (8004b14 <main+0x148>)
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	edd3 7a00 	vldr	s15, [r3]
			start_combined_trajectory(
 8004a90:	4b1f      	ldr	r3, [pc, #124]	@ (8004b10 <main+0x144>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
					sequence_rev_points[trajectory_sequence_index]);
 8004a94:	4a20      	ldr	r2, [pc, #128]	@ (8004b18 <main+0x14c>)
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	ed93 7a00 	vldr	s14, [r3]
			start_combined_trajectory(
 8004a9e:	eef0 0a47 	vmov.f32	s1, s14
 8004aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8004aa6:	f000 f975 	bl	8004d94 <start_combined_trajectory>
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 8004aaa:	4b19      	ldr	r3, [pc, #100]	@ (8004b10 <main+0x144>)
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	3301      	adds	r3, #1
					% SEQUENCE_MAX_POINTS;
 8004ab0:	425a      	negs	r2, r3
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	f002 0203 	and.w	r2, r2, #3
 8004aba:	bf58      	it	pl
 8004abc:	4253      	negpl	r3, r2
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	4b13      	ldr	r3, [pc, #76]	@ (8004b10 <main+0x144>)
 8004ac2:	701a      	strb	r2, [r3, #0]
		}
		button_pressed_previous = b1;
 8004ac4:	4b10      	ldr	r3, [pc, #64]	@ (8004b08 <main+0x13c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	bf14      	ite	ne
 8004acc:	2301      	movne	r3, #1
 8004ace:	2300      	moveq	r3, #0
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8004b0c <main+0x140>)
 8004ad4:	701a      	strb	r2, [r3, #0]

		// Process button 2 - start homing procedure
		if (b2 && homing_state == HOMING_IDLE) {
 8004ad6:	4b11      	ldr	r3, [pc, #68]	@ (8004b1c <main+0x150>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d005      	beq.n	8004aea <main+0x11e>
 8004ade:	4b10      	ldr	r3, [pc, #64]	@ (8004b20 <main+0x154>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <main+0x11e>
			start_homing();
 8004ae6:	f000 fa3d 	bl	8004f64 <start_homing>
		}

		// Process button 3 - enter manual control mode
		if (b3) {
 8004aea:	4b0e      	ldr	r3, [pc, #56]	@ (8004b24 <main+0x158>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0ac      	beq.n	8004a4c <main+0x80>
			manual_control_mode();
 8004af2:	f001 fa65 	bl	8005fc0 <manual_control_mode>
		if (b1 && !button_pressed_previous && !revolute_axis.trajectory_active
 8004af6:	e7a9      	b.n	8004a4c <main+0x80>
 8004af8:	200003e4 	.word	0x200003e4
 8004afc:	20000294 	.word	0x20000294
 8004b00:	20000440 	.word	0x20000440
 8004b04:	200002d8 	.word	0x200002d8
 8004b08:	2000185c 	.word	0x2000185c
 8004b0c:	2000032e 	.word	0x2000032e
 8004b10:	2000032d 	.word	0x2000032d
 8004b14:	080113b8 	.word	0x080113b8
 8004b18:	080113c8 	.word	0x080113c8
 8004b1c:	20001860 	.word	0x20001860
 8004b20:	2000032c 	.word	0x2000032c
 8004b24:	20001864 	.word	0x20001864

08004b28 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b094      	sub	sp, #80	@ 0x50
 8004b2c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004b2e:	f107 0318 	add.w	r3, r7, #24
 8004b32:	2238      	movs	r2, #56	@ 0x38
 8004b34:	2100      	movs	r1, #0
 8004b36:	4618      	mov	r0, r3
 8004b38:	f00a fcd6 	bl	800f4e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004b3c:	1d3b      	adds	r3, r7, #4
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	605a      	str	r2, [r3, #4]
 8004b44:	609a      	str	r2, [r3, #8]
 8004b46:	60da      	str	r2, [r3, #12]
 8004b48:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	f005 fbd4 	bl	800a2f8 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004b50:	2302      	movs	r3, #2
 8004b52:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b58:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b5a:	2340      	movs	r3, #64	@ 0x40
 8004b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b5e:	2302      	movs	r3, #2
 8004b60:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004b62:	2302      	movs	r3, #2
 8004b64:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004b66:	2304      	movs	r3, #4
 8004b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8004b6a:	2355      	movs	r3, #85	@ 0x55
 8004b6c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004b6e:	2302      	movs	r3, #2
 8004b70:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004b72:	2302      	movs	r3, #2
 8004b74:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004b76:	2302      	movs	r3, #2
 8004b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004b7a:	f107 0318 	add.w	r3, r7, #24
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f005 fc6e 	bl	800a460 <HAL_RCC_OscConfig>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <SystemClock_Config+0x66>
		Error_Handler();
 8004b8a:	f001 fbc5 	bl	8006318 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004b8e:	230f      	movs	r3, #15
 8004b90:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b92:	2303      	movs	r3, #3
 8004b94:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8004ba2:	1d3b      	adds	r3, r7, #4
 8004ba4:	2104      	movs	r1, #4
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f005 ff6c 	bl	800aa84 <HAL_RCC_ClockConfig>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <SystemClock_Config+0x8e>
		Error_Handler();
 8004bb2:	f001 fbb1 	bl	8006318 <Error_Handler>
	}
}
 8004bb6:	bf00      	nop
 8004bb8:	3750      	adds	r7, #80	@ 0x50
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <normalize_angle>:

/* USER CODE BEGIN 4 */
float normalize_angle(float angle_rad) {
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	ed87 0a01 	vstr	s0, [r7, #4]
	float result = fmodf(angle_rad, 2.0f * PI);
 8004bca:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8004c08 <normalize_angle+0x48>
 8004bce:	ed97 0a01 	vldr	s0, [r7, #4]
 8004bd2:	f00a fd85 	bl	800f6e0 <fmodf>
 8004bd6:	ed87 0a03 	vstr	s0, [r7, #12]
	if (result < 0.0f) {
 8004bda:	edd7 7a03 	vldr	s15, [r7, #12]
 8004bde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be6:	d507      	bpl.n	8004bf8 <normalize_angle+0x38>
		result += 2.0f * PI;
 8004be8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004bec:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8004c08 <normalize_angle+0x48>
 8004bf0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004bf4:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return result;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	ee07 3a90 	vmov	s15, r3
}
 8004bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40c90fdb 	.word	0x40c90fdb

08004c0c <calculate_movement_deg>:
 * @brief Calculates shortest angular movement in degrees
 * @param current_deg Current angle in degrees
 * @param target_deg Target angle in degrees
 * @return Movement required in degrees
 */
float calculate_movement_deg(float current_deg, float target_deg) {
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	ed87 0a01 	vstr	s0, [r7, #4]
 8004c16:	edc7 0a00 	vstr	s1, [r7]
	float movement = 0.0f;
 8004c1a:	f04f 0300 	mov.w	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]

	// If both angles are on the same side of 180°
	if ((current_deg < 180.0f && target_deg < 180.0f)
 8004c20:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c24:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8004d88 <calculate_movement_deg+0x17c>
 8004c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c30:	d508      	bpl.n	8004c44 <calculate_movement_deg+0x38>
 8004c32:	edd7 7a00 	vldr	s15, [r7]
 8004c36:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8004d88 <calculate_movement_deg+0x17c>
 8004c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c42:	d411      	bmi.n	8004c68 <calculate_movement_deg+0x5c>
			|| (current_deg >= 180.0f && target_deg >= 180.0f)) {
 8004c44:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c48:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8004d88 <calculate_movement_deg+0x17c>
 8004c4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c54:	db33      	blt.n	8004cbe <calculate_movement_deg+0xb2>
 8004c56:	edd7 7a00 	vldr	s15, [r7]
 8004c5a:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8004d88 <calculate_movement_deg+0x17c>
 8004c5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c66:	db2a      	blt.n	8004cbe <calculate_movement_deg+0xb2>
		// Simple case - take shortest path
		movement = target_deg - current_deg;
 8004c68:	ed97 7a00 	vldr	s14, [r7]
 8004c6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c74:	edc7 7a03 	vstr	s15, [r7, #12]

		// Ensure shortest path
		if (movement > 180.0f)
 8004c78:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c7c:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8004d88 <calculate_movement_deg+0x17c>
 8004c80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c88:	dd07      	ble.n	8004c9a <calculate_movement_deg+0x8e>
			movement -= 360.0f;
 8004c8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c8e:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8004d8c <calculate_movement_deg+0x180>
 8004c92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c96:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8004c9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c9e:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8004d90 <calculate_movement_deg+0x184>
 8004ca2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004caa:	d562      	bpl.n	8004d72 <calculate_movement_deg+0x166>
			movement += 360.0f;
 8004cac:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cb0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8004d8c <calculate_movement_deg+0x180>
 8004cb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cb8:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8004cbc:	e059      	b.n	8004d72 <calculate_movement_deg+0x166>
	}
	// If we need to cross the 180° boundary
	else {
		// If we need to cross the 180° boundary
		if (current_deg < 180.0f) {
 8004cbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cc2:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8004d88 <calculate_movement_deg+0x17c>
 8004cc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cce:	d52a      	bpl.n	8004d26 <calculate_movement_deg+0x11a>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180.0f) {
 8004cd0:	edd7 7a00 	vldr	s15, [r7]
 8004cd4:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8004d88 <calculate_movement_deg+0x17c>
 8004cd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004cdc:	ed97 7a01 	vldr	s14, [r7, #4]
 8004ce0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce8:	d50e      	bpl.n	8004d08 <calculate_movement_deg+0xfc>
				movement = -(current_deg + (360.0f - target_deg)); // Negative = clockwise
 8004cea:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004d8c <calculate_movement_deg+0x180>
 8004cee:	edd7 7a00 	vldr	s15, [r7]
 8004cf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004cf6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cfe:	eef1 7a67 	vneg.f32	s15, s15
 8004d02:	edc7 7a03 	vstr	s15, [r7, #12]
 8004d06:	e034      	b.n	8004d72 <calculate_movement_deg+0x166>
			} else {
				movement = -(current_deg - target_deg + 360.0f); // Negative = clockwise
 8004d08:	ed97 7a01 	vldr	s14, [r7, #4]
 8004d0c:	edd7 7a00 	vldr	s15, [r7]
 8004d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d14:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004d8c <calculate_movement_deg+0x180>
 8004d18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d1c:	eef1 7a67 	vneg.f32	s15, s15
 8004d20:	edc7 7a03 	vstr	s15, [r7, #12]
 8004d24:	e025      	b.n	8004d72 <calculate_movement_deg+0x166>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180.0f) {
 8004d26:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d2a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8004d88 <calculate_movement_deg+0x17c>
 8004d2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d32:	ed97 7a00 	vldr	s14, [r7]
 8004d36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d3e:	d50c      	bpl.n	8004d5a <calculate_movement_deg+0x14e>
				movement = 360.0f - current_deg + target_deg; // Positive = counterclockwise
 8004d40:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8004d8c <calculate_movement_deg+0x180>
 8004d44:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d4c:	ed97 7a00 	vldr	s14, [r7]
 8004d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d54:	edc7 7a03 	vstr	s15, [r7, #12]
 8004d58:	e00b      	b.n	8004d72 <calculate_movement_deg+0x166>
			} else {
				movement = target_deg - current_deg + 360.0f; // Positive = counterclockwise
 8004d5a:	ed97 7a00 	vldr	s14, [r7]
 8004d5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d66:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8004d8c <calculate_movement_deg+0x180>
 8004d6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d6e:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}

	return movement;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	ee07 3a90 	vmov	s15, r3
}
 8004d78:	eeb0 0a67 	vmov.f32	s0, s15
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	43340000 	.word	0x43340000
 8004d8c:	43b40000 	.word	0x43b40000
 8004d90:	c3340000 	.word	0xc3340000

08004d94 <start_combined_trajectory>:
 * @brief Starts a combined trajectory for both prismatic and revolute axes
 * @param prismatic_target_mm Target position for prismatic axis in mm
 * @param revolute_target_deg Target position for revolute axis in degrees
 */
void start_combined_trajectory(float prismatic_target_mm,
		float revolute_target_deg) {
 8004d94:	b590      	push	{r4, r7, lr}
 8004d96:	ed2d 8b02 	vpush	{d8}
 8004d9a:	b08d      	sub	sp, #52	@ 0x34
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004da2:	edc7 0a00 	vstr	s1, [r7]
	// Get current positions
	float pris_current = prismatic_encoder.mm;
 8004da6:	4b60      	ldr	r3, [pc, #384]	@ (8004f28 <start_combined_trajectory+0x194>)
 8004da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float rev_current = revolute_encoder.rads;
 8004dac:	4b5f      	ldr	r3, [pc, #380]	@ (8004f2c <start_combined_trajectory+0x198>)
 8004dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db0:	62bb      	str	r3, [r7, #40]	@ 0x28

	// Reset trajectory evaluation structs
	prisEva.t = 0.0f;
 8004db2:	4b5f      	ldr	r3, [pc, #380]	@ (8004f30 <start_combined_trajectory+0x19c>)
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	60da      	str	r2, [r3, #12]
	prisEva.isFinised = false;
 8004dba:	4b5d      	ldr	r3, [pc, #372]	@ (8004f30 <start_combined_trajectory+0x19c>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	741a      	strb	r2, [r3, #16]
	revEva.t = 0.0f;
 8004dc0:	4b5c      	ldr	r3, [pc, #368]	@ (8004f34 <start_combined_trajectory+0x1a0>)
 8004dc2:	f04f 0200 	mov.w	r2, #0
 8004dc6:	60da      	str	r2, [r3, #12]
	revEva.isFinised = false;
 8004dc8:	4b5a      	ldr	r3, [pc, #360]	@ (8004f34 <start_combined_trajectory+0x1a0>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	741a      	strb	r2, [r3, #16]

	// Save initial positions
	prismatic_axis.initial_pos = pris_current;
 8004dce:	4a5a      	ldr	r2, [pc, #360]	@ (8004f38 <start_combined_trajectory+0x1a4>)
 8004dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd2:	60d3      	str	r3, [r2, #12]
	revolute_axis.initial_pos = rev_current;
 8004dd4:	4a59      	ldr	r2, [pc, #356]	@ (8004f3c <start_combined_trajectory+0x1a8>)
 8004dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd8:	60d3      	str	r3, [r2, #12]

	// For prismatic axis - direct target with bounds checking
	prismatic_axis.target_pos = fminf(
 8004dda:	eddf 0a59 	vldr	s1, [pc, #356]	@ 8004f40 <start_combined_trajectory+0x1ac>
 8004dde:	ed97 0a01 	vldr	s0, [r7, #4]
 8004de2:	f00a fd45 	bl	800f870 <fmaxf>
 8004de6:	eef0 7a40 	vmov.f32	s15, s0
 8004dea:	eddf 0a56 	vldr	s1, [pc, #344]	@ 8004f44 <start_combined_trajectory+0x1b0>
 8004dee:	eeb0 0a67 	vmov.f32	s0, s15
 8004df2:	f00a fd5a 	bl	800f8aa <fminf>
 8004df6:	eef0 7a40 	vmov.f32	s15, s0
 8004dfa:	4b4f      	ldr	r3, [pc, #316]	@ (8004f38 <start_combined_trajectory+0x1a4>)
 8004dfc:	edc3 7a04 	vstr	s15, [r3, #16]
			fmaxf(prismatic_target_mm, PRISMATIC_MIN_POS), PRISMATIC_MAX_POS);

	// For revolute axis - handle path planning
	// Normalize current position to [0, 2π]
	float normalized_current = normalize_angle(rev_current);
 8004e00:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8004e04:	f7ff fedc 	bl	8004bc0 <normalize_angle>
 8004e08:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

	// Convert target to radians
	float target_radians = UnitConverter_angle(&converter_system,
 8004e0c:	220f      	movs	r2, #15
 8004e0e:	210e      	movs	r1, #14
 8004e10:	ed97 0a00 	vldr	s0, [r7]
 8004e14:	484c      	ldr	r0, [pc, #304]	@ (8004f48 <start_combined_trajectory+0x1b4>)
 8004e16:	f7ff fb81 	bl	800451c <UnitConverter_angle>
 8004e1a:	ed87 0a08 	vstr	s0, [r7, #32]
			revolute_target_deg, UNIT_DEGREE, UNIT_RADIAN);

	// Normalize target to [0, 2π]
	float normalized_target = normalize_angle(target_radians);
 8004e1e:	ed97 0a08 	vldr	s0, [r7, #32]
 8004e22:	f7ff fecd 	bl	8004bc0 <normalize_angle>
 8004e26:	ed87 0a07 	vstr	s0, [r7, #28]

	// Convert to degrees for movement calculation
	float current_deg = normalized_current * 180.0f / PI;
 8004e2a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004e2e:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8004f4c <start_combined_trajectory+0x1b8>
 8004e32:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004e36:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004f50 <start_combined_trajectory+0x1bc>
 8004e3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e3e:	edc7 7a06 	vstr	s15, [r7, #24]
	float target_deg = revolute_target_deg;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	617b      	str	r3, [r7, #20]

	// Calculate movement in degrees
	float movement_deg = calculate_movement_deg(current_deg, target_deg);
 8004e46:	edd7 0a05 	vldr	s1, [r7, #20]
 8004e4a:	ed97 0a06 	vldr	s0, [r7, #24]
 8004e4e:	f7ff fedd 	bl	8004c0c <calculate_movement_deg>
 8004e52:	ed87 0a04 	vstr	s0, [r7, #16]

	// Convert to radians and apply to absolute position
	float movement_rad = movement_deg * PI / 180.0f;
 8004e56:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e5a:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8004f50 <start_combined_trajectory+0x1bc>
 8004e5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004e62:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8004f4c <start_combined_trajectory+0x1b8>
 8004e66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e6a:	edc7 7a03 	vstr	s15, [r7, #12]
	revolute_axis.target_pos = revolute_axis.initial_pos + movement_rad;
 8004e6e:	4b33      	ldr	r3, [pc, #204]	@ (8004f3c <start_combined_trajectory+0x1a8>)
 8004e70:	ed93 7a03 	vldr	s14, [r3, #12]
 8004e74:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8004f3c <start_combined_trajectory+0x1a8>)
 8004e7e:	edc3 7a04 	vstr	s15, [r3, #16]

	// Generate trajectories
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8004e82:	4b2d      	ldr	r3, [pc, #180]	@ (8004f38 <start_combined_trajectory+0x1a4>)
 8004e84:	ed93 8a03 	vldr	s16, [r3, #12]
 8004e88:	4b2b      	ldr	r3, [pc, #172]	@ (8004f38 <start_combined_trajectory+0x1a4>)
 8004e8a:	edd3 8a04 	vldr	s17, [r3, #16]
			prismatic_axis.target_pos, ZGX45RGG_400RPM_Constant.sd_max,
 8004e8e:	4b31      	ldr	r3, [pc, #196]	@ (8004f54 <start_combined_trajectory+0x1c0>)
 8004e90:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8004e94:	4610      	mov	r0, r2
 8004e96:	4619      	mov	r1, r3
 8004e98:	f7fb fe5c 	bl	8000b54 <__aeabi_d2f>
 8004e9c:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.sdd_max);
 8004e9e:	4b2d      	ldr	r3, [pc, #180]	@ (8004f54 <start_combined_trajectory+0x1c0>)
 8004ea0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	f7fb fe54 	bl	8000b54 <__aeabi_d2f>
 8004eac:	4603      	mov	r3, r0
 8004eae:	ee01 3a90 	vmov	s3, r3
 8004eb2:	ee01 4a10 	vmov	s2, r4
 8004eb6:	eef0 0a68 	vmov.f32	s1, s17
 8004eba:	eeb0 0a48 	vmov.f32	s0, s16
 8004ebe:	4826      	ldr	r0, [pc, #152]	@ (8004f58 <start_combined_trajectory+0x1c4>)
 8004ec0:	f7fe fed2 	bl	8003c68 <Trapezoidal_Generator>

	Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8004ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f3c <start_combined_trajectory+0x1a8>)
 8004ec6:	ed93 8a03 	vldr	s16, [r3, #12]
 8004eca:	4b1c      	ldr	r3, [pc, #112]	@ (8004f3c <start_combined_trajectory+0x1a8>)
 8004ecc:	edd3 8a04 	vldr	s17, [r3, #16]
			revolute_axis.target_pos, ZGX45RGG_150RPM_Constant.qd_max,
 8004ed0:	4b22      	ldr	r3, [pc, #136]	@ (8004f5c <start_combined_trajectory+0x1c8>)
 8004ed2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	4619      	mov	r1, r3
 8004eda:	f7fb fe3b 	bl	8000b54 <__aeabi_d2f>
 8004ede:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.qdd_max);
 8004ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8004f5c <start_combined_trajectory+0x1c8>)
 8004ee2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
	Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	4619      	mov	r1, r3
 8004eea:	f7fb fe33 	bl	8000b54 <__aeabi_d2f>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	ee01 3a90 	vmov	s3, r3
 8004ef4:	ee01 4a10 	vmov	s2, r4
 8004ef8:	eef0 0a68 	vmov.f32	s1, s17
 8004efc:	eeb0 0a48 	vmov.f32	s0, s16
 8004f00:	4817      	ldr	r0, [pc, #92]	@ (8004f60 <start_combined_trajectory+0x1cc>)
 8004f02:	f7fe feb1 	bl	8003c68 <Trapezoidal_Generator>

	// Lift pen during movement
	plotter_pen_up();
 8004f06:	f001 fe85 	bl	8006c14 <plotter_pen_up>

	// Set trajectory active flags
	prismatic_axis.trajectory_active = true;
 8004f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004f38 <start_combined_trajectory+0x1a4>)
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = true;
 8004f12:	4b0a      	ldr	r3, [pc, #40]	@ (8004f3c <start_combined_trajectory+0x1a8>)
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 8004f1a:	bf00      	nop
 8004f1c:	3734      	adds	r7, #52	@ 0x34
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	ecbd 8b02 	vpop	{d8}
 8004f24:	bd90      	pop	{r4, r7, pc}
 8004f26:	bf00      	nop
 8004f28:	200003e4 	.word	0x200003e4
 8004f2c:	20000440 	.word	0x20000440
 8004f30:	2000026c 	.word	0x2000026c
 8004f34:	20000280 	.word	0x20000280
 8004f38:	20000294 	.word	0x20000294
 8004f3c:	200002d8 	.word	0x200002d8
 8004f40:	00000000 	.word	0x00000000
 8004f44:	43960000 	.word	0x43960000
 8004f48:	200007b0 	.word	0x200007b0
 8004f4c:	43340000 	.word	0x43340000
 8004f50:	40490fdb 	.word	0x40490fdb
 8004f54:	20000060 	.word	0x20000060
 8004f58:	20000244 	.word	0x20000244
 8004f5c:	20000000 	.word	0x20000000
 8004f60:	20000258 	.word	0x20000258

08004f64 <start_homing>:

/**
 * @brief Starts the homing sequence for both axes
 */
void start_homing(void) {
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
	// Ensure pen is up for safety
	plotter_pen_up();
 8004f68:	f001 fe54 	bl	8006c14 <plotter_pen_up>

	// Set initial homing state
	homing_state = HOMING_PRIS_DOWN;
 8004f6c:	4b02      	ldr	r3, [pc, #8]	@ (8004f78 <start_homing+0x14>)
 8004f6e:	2201      	movs	r2, #1
 8004f70:	701a      	strb	r2, [r3, #0]
}
 8004f72:	bf00      	nop
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	2000032c 	.word	0x2000032c

08004f7c <update_control_loops>:

/**
 * @brief Updates control loops for both axes
 */
void update_control_loops(void) {
 8004f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f80:	ed2d 8b02 	vpush	{d8}
 8004f84:	b089      	sub	sp, #36	@ 0x24
 8004f86:	af00      	add	r7, sp, #0
	// Normalize revolute position
	normalized_position = normalize_angle(revolute_encoder.rads);
 8004f88:	4b9c      	ldr	r3, [pc, #624]	@ (80051fc <update_control_loops+0x280>)
 8004f8a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8004f92:	f7ff fe15 	bl	8004bc0 <normalize_angle>
 8004f96:	eef0 7a40 	vmov.f32	s15, s0
 8004f9a:	4b99      	ldr	r3, [pc, #612]	@ (8005200 <update_control_loops+0x284>)
 8004f9c:	edc3 7a00 	vstr	s15, [r3]
	angle_deg = normalize_angle(revolute_axis.target_pos);
 8004fa0:	4b98      	ldr	r3, [pc, #608]	@ (8005204 <update_control_loops+0x288>)
 8004fa2:	edd3 7a04 	vldr	s15, [r3, #16]
 8004fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8004faa:	f7ff fe09 	bl	8004bc0 <normalize_angle>
 8004fae:	eef0 7a40 	vmov.f32	s15, s0
 8004fb2:	4b95      	ldr	r3, [pc, #596]	@ (8005208 <update_control_loops+0x28c>)
 8004fb4:	edc3 7a00 	vstr	s15, [r3]

	// Update prismatic trajectory if active
	if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 8004fb8:	4b94      	ldr	r3, [pc, #592]	@ (800520c <update_control_loops+0x290>)
 8004fba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d048      	beq.n	8005054 <update_control_loops+0xd8>
 8004fc2:	4b93      	ldr	r3, [pc, #588]	@ (8005210 <update_control_loops+0x294>)
 8004fc4:	7c1b      	ldrb	r3, [r3, #16]
 8004fc6:	f083 0301 	eor.w	r3, r3, #1
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d041      	beq.n	8005054 <update_control_loops+0xd8>
		Trapezoidal_Evaluated(&prisGen, &prisEva, prismatic_axis.initial_pos,
 8004fd0:	4b8e      	ldr	r3, [pc, #568]	@ (800520c <update_control_loops+0x290>)
 8004fd2:	ed93 8a03 	vldr	s16, [r3, #12]
 8004fd6:	4b8d      	ldr	r3, [pc, #564]	@ (800520c <update_control_loops+0x290>)
 8004fd8:	edd3 8a04 	vldr	s17, [r3, #16]
				prismatic_axis.target_pos, ZGX45RGG_400RPM_Constant.sd_max,
 8004fdc:	4b8d      	ldr	r3, [pc, #564]	@ (8005214 <update_control_loops+0x298>)
 8004fde:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
		Trapezoidal_Evaluated(&prisGen, &prisEva, prismatic_axis.initial_pos,
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	f7fb fdb5 	bl	8000b54 <__aeabi_d2f>
 8004fea:	4604      	mov	r4, r0
				ZGX45RGG_400RPM_Constant.sdd_max);
 8004fec:	4b89      	ldr	r3, [pc, #548]	@ (8005214 <update_control_loops+0x298>)
 8004fee:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
		Trapezoidal_Evaluated(&prisGen, &prisEva, prismatic_axis.initial_pos,
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	f7fb fdad 	bl	8000b54 <__aeabi_d2f>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	ee01 3a90 	vmov	s3, r3
 8005000:	ee01 4a10 	vmov	s2, r4
 8005004:	eef0 0a68 	vmov.f32	s1, s17
 8005008:	eeb0 0a48 	vmov.f32	s0, s16
 800500c:	4980      	ldr	r1, [pc, #512]	@ (8005210 <update_control_loops+0x294>)
 800500e:	4882      	ldr	r0, [pc, #520]	@ (8005218 <update_control_loops+0x29c>)
 8005010:	f7fe feec 	bl	8003dec <Trapezoidal_Evaluated>

		prismatic_axis.position = prisEva.setposition;
 8005014:	4b7e      	ldr	r3, [pc, #504]	@ (8005210 <update_control_loops+0x294>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a7c      	ldr	r2, [pc, #496]	@ (800520c <update_control_loops+0x290>)
 800501a:	6013      	str	r3, [r2, #0]
		prismatic_axis.velocity = prisEva.setvelocity;
 800501c:	4b7c      	ldr	r3, [pc, #496]	@ (8005210 <update_control_loops+0x294>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	4a7a      	ldr	r2, [pc, #488]	@ (800520c <update_control_loops+0x290>)
 8005022:	6053      	str	r3, [r2, #4]

		if (prisEva.isFinised) {
 8005024:	4b7a      	ldr	r3, [pc, #488]	@ (8005210 <update_control_loops+0x294>)
 8005026:	7c1b      	ldrb	r3, [r3, #16]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d013      	beq.n	8005054 <update_control_loops+0xd8>
			prismatic_axis.trajectory_active = false;
 800502c:	4a77      	ldr	r2, [pc, #476]	@ (800520c <update_control_loops+0x290>)
 800502e:	2300      	movs	r3, #0
 8005030:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			prismatic_axis.position = prisEva.setposition;
 8005034:	4b76      	ldr	r3, [pc, #472]	@ (8005210 <update_control_loops+0x294>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a74      	ldr	r2, [pc, #464]	@ (800520c <update_control_loops+0x290>)
 800503a:	6013      	str	r3, [r2, #0]
			prismatic_axis.velocity = 0.0f;
 800503c:	4b73      	ldr	r3, [pc, #460]	@ (800520c <update_control_loops+0x290>)
 800503e:	f04f 0200 	mov.w	r2, #0
 8005042:	605a      	str	r2, [r3, #4]
			prismatic_axis.dfd = 0.0f;
 8005044:	4b71      	ldr	r3, [pc, #452]	@ (800520c <update_control_loops+0x290>)
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	62da      	str	r2, [r3, #44]	@ 0x2c
			prismatic_axis.ffd = 0.0f;
 800504c:	4b6f      	ldr	r3, [pc, #444]	@ (800520c <update_control_loops+0x290>)
 800504e:	f04f 0200 	mov.w	r2, #0
 8005052:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}

	// Update revolute trajectory if active
	if (revolute_axis.trajectory_active && !revEva.isFinised) {
 8005054:	4b6b      	ldr	r3, [pc, #428]	@ (8005204 <update_control_loops+0x288>)
 8005056:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800505a:	2b00      	cmp	r3, #0
 800505c:	d048      	beq.n	80050f0 <update_control_loops+0x174>
 800505e:	4b6f      	ldr	r3, [pc, #444]	@ (800521c <update_control_loops+0x2a0>)
 8005060:	7c1b      	ldrb	r3, [r3, #16]
 8005062:	f083 0301 	eor.w	r3, r3, #1
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d041      	beq.n	80050f0 <update_control_loops+0x174>
		Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 800506c:	4b65      	ldr	r3, [pc, #404]	@ (8005204 <update_control_loops+0x288>)
 800506e:	ed93 8a03 	vldr	s16, [r3, #12]
 8005072:	4b64      	ldr	r3, [pc, #400]	@ (8005204 <update_control_loops+0x288>)
 8005074:	edd3 8a04 	vldr	s17, [r3, #16]
				revolute_axis.target_pos, ZGX45RGG_150RPM_Constant.qd_max,
 8005078:	4b69      	ldr	r3, [pc, #420]	@ (8005220 <update_control_loops+0x2a4>)
 800507a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
		Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 800507e:	4610      	mov	r0, r2
 8005080:	4619      	mov	r1, r3
 8005082:	f7fb fd67 	bl	8000b54 <__aeabi_d2f>
 8005086:	4604      	mov	r4, r0
				ZGX45RGG_150RPM_Constant.qdd_max);
 8005088:	4b65      	ldr	r3, [pc, #404]	@ (8005220 <update_control_loops+0x2a4>)
 800508a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
		Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 800508e:	4610      	mov	r0, r2
 8005090:	4619      	mov	r1, r3
 8005092:	f7fb fd5f 	bl	8000b54 <__aeabi_d2f>
 8005096:	4603      	mov	r3, r0
 8005098:	ee01 3a90 	vmov	s3, r3
 800509c:	ee01 4a10 	vmov	s2, r4
 80050a0:	eef0 0a68 	vmov.f32	s1, s17
 80050a4:	eeb0 0a48 	vmov.f32	s0, s16
 80050a8:	495c      	ldr	r1, [pc, #368]	@ (800521c <update_control_loops+0x2a0>)
 80050aa:	485e      	ldr	r0, [pc, #376]	@ (8005224 <update_control_loops+0x2a8>)
 80050ac:	f7fe fe9e 	bl	8003dec <Trapezoidal_Evaluated>

		revolute_axis.position = revEva.setposition;
 80050b0:	4b5a      	ldr	r3, [pc, #360]	@ (800521c <update_control_loops+0x2a0>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a53      	ldr	r2, [pc, #332]	@ (8005204 <update_control_loops+0x288>)
 80050b6:	6013      	str	r3, [r2, #0]
		revolute_axis.velocity = revEva.setvelocity;
 80050b8:	4b58      	ldr	r3, [pc, #352]	@ (800521c <update_control_loops+0x2a0>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	4a51      	ldr	r2, [pc, #324]	@ (8005204 <update_control_loops+0x288>)
 80050be:	6053      	str	r3, [r2, #4]

		if (revEva.isFinised) {
 80050c0:	4b56      	ldr	r3, [pc, #344]	@ (800521c <update_control_loops+0x2a0>)
 80050c2:	7c1b      	ldrb	r3, [r3, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d013      	beq.n	80050f0 <update_control_loops+0x174>
			revolute_axis.trajectory_active = false;
 80050c8:	4a4e      	ldr	r2, [pc, #312]	@ (8005204 <update_control_loops+0x288>)
 80050ca:	2300      	movs	r3, #0
 80050cc:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			revolute_axis.position = revEva.setposition;
 80050d0:	4b52      	ldr	r3, [pc, #328]	@ (800521c <update_control_loops+0x2a0>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a4b      	ldr	r2, [pc, #300]	@ (8005204 <update_control_loops+0x288>)
 80050d6:	6013      	str	r3, [r2, #0]
			revolute_axis.velocity = 0.0f;
 80050d8:	4b4a      	ldr	r3, [pc, #296]	@ (8005204 <update_control_loops+0x288>)
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	605a      	str	r2, [r3, #4]
			revolute_axis.dfd = 0.0f;
 80050e0:	4b48      	ldr	r3, [pc, #288]	@ (8005204 <update_control_loops+0x288>)
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	62da      	str	r2, [r3, #44]	@ 0x2c
			revolute_axis.ffd = 0.0f;
 80050e8:	4b46      	ldr	r3, [pc, #280]	@ (8005204 <update_control_loops+0x288>)
 80050ea:	f04f 0200 	mov.w	r2, #0
 80050ee:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}

	// Calculate control signals for prismatic axis
	prismatic_axis.input_voltage = mapf(prismatic_axis.command_pos, -65535.0f,
 80050f0:	4b46      	ldr	r3, [pc, #280]	@ (800520c <update_control_loops+0x290>)
 80050f2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80050f6:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 80050fa:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 80050fe:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 8005228 <update_control_loops+0x2ac>
 8005102:	eddf 0a4a 	vldr	s1, [pc, #296]	@ 800522c <update_control_loops+0x2b0>
 8005106:	eeb0 0a67 	vmov.f32	s0, s15
 800510a:	f7fc fe09 	bl	8001d20 <mapf>
 800510e:	eef0 7a40 	vmov.f32	s15, s0
 8005112:	4b3e      	ldr	r3, [pc, #248]	@ (800520c <update_control_loops+0x290>)
 8005114:	edc3 7a08 	vstr	s15, [r3, #32]
			65535.0f, -12.0f, 12.0f);

	prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8005118:	4b3c      	ldr	r3, [pc, #240]	@ (800520c <update_control_loops+0x290>)
 800511a:	edd3 7a08 	vldr	s15, [r3, #32]
 800511e:	4b44      	ldr	r3, [pc, #272]	@ (8005230 <update_control_loops+0x2b4>)
 8005120:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8005124:	eef0 0a47 	vmov.f32	s1, s14
 8005128:	eeb0 0a67 	vmov.f32	s0, s15
 800512c:	4841      	ldr	r0, [pc, #260]	@ (8005234 <update_control_loops+0x2b8>)
 800512e:	f7fd fdc5 	bl	8002cbc <MotorKalman_Estimate>
 8005132:	eeb0 7a40 	vmov.f32	s14, s0
			prismatic_axis.input_voltage, prismatic_encoder.rads)
			* Disturbance_Constant.prismatic_pulley_radius * 1000.0f;
 8005136:	4b40      	ldr	r3, [pc, #256]	@ (8005238 <update_control_loops+0x2bc>)
 8005138:	edd3 7a04 	vldr	s15, [r3, #16]
 800513c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005140:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 800523c <update_control_loops+0x2c0>
 8005144:	ee67 7a87 	vmul.f32	s15, s15, s14
	prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8005148:	4b30      	ldr	r3, [pc, #192]	@ (800520c <update_control_loops+0x290>)
 800514a:	edc3 7a07 	vstr	s15, [r3, #28]

	if (isnan(prismatic_axis.kalman_velocity)) {
 800514e:	4b2f      	ldr	r3, [pc, #188]	@ (800520c <update_control_loops+0x290>)
 8005150:	edd3 7a07 	vldr	s15, [r3, #28]
 8005154:	eef4 7a67 	vcmp.f32	s15, s15
 8005158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800515c:	d703      	bvc.n	8005166 <update_control_loops+0x1ea>
		prismatic_axis.kalman_velocity = 0.0f;
 800515e:	4b2b      	ldr	r3, [pc, #172]	@ (800520c <update_control_loops+0x290>)
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	61da      	str	r2, [r3, #28]
	}

	prismatic_axis.pos_error = prismatic_axis.position - prismatic_encoder.mm;
 8005166:	4b29      	ldr	r3, [pc, #164]	@ (800520c <update_control_loops+0x290>)
 8005168:	ed93 7a00 	vldr	s14, [r3]
 800516c:	4b30      	ldr	r3, [pc, #192]	@ (8005230 <update_control_loops+0x2b4>)
 800516e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8005172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005176:	4b25      	ldr	r3, [pc, #148]	@ (800520c <update_control_loops+0x290>)
 8005178:	edc3 7a05 	vstr	s15, [r3, #20]

	prismatic_axis.command_vel = PWM_Satuation(
 800517c:	4b23      	ldr	r3, [pc, #140]	@ (800520c <update_control_loops+0x290>)
 800517e:	edd3 7a05 	vldr	s15, [r3, #20]
 8005182:	eeb0 0a67 	vmov.f32	s0, s15
 8005186:	482e      	ldr	r0, [pc, #184]	@ (8005240 <update_control_loops+0x2c4>)
 8005188:	f7fc f846 	bl	8001218 <PID_CONTROLLER_Compute>
 800518c:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid,
					prismatic_axis.pos_error), ZGX45RGG_400RPM_Constant.sd_max,
 8005190:	4b20      	ldr	r3, [pc, #128]	@ (8005214 <update_control_loops+0x298>)
 8005192:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	prismatic_axis.command_vel = PWM_Satuation(
 8005196:	4610      	mov	r0, r2
 8005198:	4619      	mov	r1, r3
 800519a:	f7fb fc93 	bl	8000ac4 <__aeabi_d2iz>
 800519e:	4604      	mov	r4, r0
			-ZGX45RGG_400RPM_Constant.sd_max);
 80051a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005214 <update_control_loops+0x298>)
 80051a2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80051a6:	4690      	mov	r8, r2
 80051a8:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_vel = PWM_Satuation(
 80051ac:	4640      	mov	r0, r8
 80051ae:	4649      	mov	r1, r9
 80051b0:	f7fb fc88 	bl	8000ac4 <__aeabi_d2iz>
 80051b4:	4603      	mov	r3, r0
 80051b6:	4619      	mov	r1, r3
 80051b8:	4620      	mov	r0, r4
 80051ba:	eeb0 0a48 	vmov.f32	s0, s16
 80051be:	f7fb ffc9 	bl	8001154 <PWM_Satuation>
 80051c2:	ee07 0a90 	vmov	s15, r0
 80051c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051ca:	4b10      	ldr	r3, [pc, #64]	@ (800520c <update_control_loops+0x290>)
 80051cc:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Add velocity feedforward for trajectory
	if (prismatic_axis.trajectory_active) {
 80051d0:	4b0e      	ldr	r3, [pc, #56]	@ (800520c <update_control_loops+0x290>)
 80051d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d034      	beq.n	8005244 <update_control_loops+0x2c8>
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80051da:	4b0c      	ldr	r3, [pc, #48]	@ (800520c <update_control_loops+0x290>)
 80051dc:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ prismatic_axis.velocity - prismatic_axis.kalman_velocity;
 80051e0:	4b0a      	ldr	r3, [pc, #40]	@ (800520c <update_control_loops+0x290>)
 80051e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80051e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80051ea:	4b08      	ldr	r3, [pc, #32]	@ (800520c <update_control_loops+0x290>)
 80051ec:	edd3 7a07 	vldr	s15, [r3, #28]
 80051f0:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80051f4:	4b05      	ldr	r3, [pc, #20]	@ (800520c <update_control_loops+0x290>)
 80051f6:	edc3 7a06 	vstr	s15, [r3, #24]
 80051fa:	e02e      	b.n	800525a <update_control_loops+0x2de>
 80051fc:	20000440 	.word	0x20000440
 8005200:	20000338 	.word	0x20000338
 8005204:	200002d8 	.word	0x200002d8
 8005208:	2000033c 	.word	0x2000033c
 800520c:	20000294 	.word	0x20000294
 8005210:	2000026c 	.word	0x2000026c
 8005214:	20000060 	.word	0x20000060
 8005218:	20000244 	.word	0x20000244
 800521c:	20000280 	.word	0x20000280
 8005220:	20000000 	.word	0x20000000
 8005224:	20000258 	.word	0x20000258
 8005228:	477fff00 	.word	0x477fff00
 800522c:	c77fff00 	.word	0xc77fff00
 8005230:	200003e4 	.word	0x200003e4
 8005234:	20000a38 	.word	0x20000a38
 8005238:	200000c0 	.word	0x200000c0
 800523c:	447a0000 	.word	0x447a0000
 8005240:	2000049c 	.word	0x2000049c
	} else {
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8005244:	4ba1      	ldr	r3, [pc, #644]	@ (80054cc <update_control_loops+0x550>)
 8005246:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 800524a:	4ba0      	ldr	r3, [pc, #640]	@ (80054cc <update_control_loops+0x550>)
 800524c:	edd3 7a07 	vldr	s15, [r3, #28]
 8005250:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8005254:	4b9d      	ldr	r3, [pc, #628]	@ (80054cc <update_control_loops+0x550>)
 8005256:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	prismatic_axis.command_pos = PWM_Satuation(
 800525a:	4b9c      	ldr	r3, [pc, #624]	@ (80054cc <update_control_loops+0x550>)
 800525c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005260:	eeb0 0a67 	vmov.f32	s0, s15
 8005264:	489a      	ldr	r0, [pc, #616]	@ (80054d0 <update_control_loops+0x554>)
 8005266:	f7fb ffd7 	bl	8001218 <PID_CONTROLLER_Compute>
 800526a:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid,
					prismatic_axis.vel_error), ZGX45RGG_400RPM_Constant.U_max,
 800526e:	4b99      	ldr	r3, [pc, #612]	@ (80054d4 <update_control_loops+0x558>)
 8005270:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(
 8005274:	4610      	mov	r0, r2
 8005276:	4619      	mov	r1, r3
 8005278:	f7fb fc24 	bl	8000ac4 <__aeabi_d2iz>
 800527c:	4604      	mov	r4, r0
			-ZGX45RGG_400RPM_Constant.U_max);
 800527e:	4b95      	ldr	r3, [pc, #596]	@ (80054d4 <update_control_loops+0x558>)
 8005280:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005284:	613a      	str	r2, [r7, #16]
 8005286:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800528a:	617b      	str	r3, [r7, #20]
	prismatic_axis.command_pos = PWM_Satuation(
 800528c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005290:	f7fb fc18 	bl	8000ac4 <__aeabi_d2iz>
 8005294:	4603      	mov	r3, r0
 8005296:	4619      	mov	r1, r3
 8005298:	4620      	mov	r0, r4
 800529a:	eeb0 0a48 	vmov.f32	s0, s16
 800529e:	f7fb ff59 	bl	8001154 <PWM_Satuation>
 80052a2:	ee07 0a90 	vmov	s15, r0
 80052a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052aa:	4b88      	ldr	r3, [pc, #544]	@ (80054cc <update_control_loops+0x550>)
 80052ac:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Calculate control signals for revolute axis
	revolute_axis.input_voltage = mapf(revolute_axis.command_pos, -65535.0f,
 80052b0:	4b89      	ldr	r3, [pc, #548]	@ (80054d8 <update_control_loops+0x55c>)
 80052b2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80052b6:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 80052ba:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 80052be:	ed9f 1a87 	vldr	s2, [pc, #540]	@ 80054dc <update_control_loops+0x560>
 80052c2:	eddf 0a87 	vldr	s1, [pc, #540]	@ 80054e0 <update_control_loops+0x564>
 80052c6:	eeb0 0a67 	vmov.f32	s0, s15
 80052ca:	f7fc fd29 	bl	8001d20 <mapf>
 80052ce:	eef0 7a40 	vmov.f32	s15, s0
 80052d2:	4b81      	ldr	r3, [pc, #516]	@ (80054d8 <update_control_loops+0x55c>)
 80052d4:	edc3 7a08 	vstr	s15, [r3, #32]
			65535.0f, -12.0f, 12.0f);

	revolute_axis.kalman_velocity = MotorKalman_Estimate(&revolute_kalman,
 80052d8:	4b7f      	ldr	r3, [pc, #508]	@ (80054d8 <update_control_loops+0x55c>)
 80052da:	edd3 7a08 	vldr	s15, [r3, #32]
 80052de:	4b81      	ldr	r3, [pc, #516]	@ (80054e4 <update_control_loops+0x568>)
 80052e0:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80052e4:	eef0 0a47 	vmov.f32	s1, s14
 80052e8:	eeb0 0a67 	vmov.f32	s0, s15
 80052ec:	487e      	ldr	r0, [pc, #504]	@ (80054e8 <update_control_loops+0x56c>)
 80052ee:	f7fd fce5 	bl	8002cbc <MotorKalman_Estimate>
 80052f2:	eef0 7a40 	vmov.f32	s15, s0
 80052f6:	4b78      	ldr	r3, [pc, #480]	@ (80054d8 <update_control_loops+0x55c>)
 80052f8:	edc3 7a07 	vstr	s15, [r3, #28]
			revolute_axis.input_voltage, revolute_encoder.rads);

	if (isnan(revolute_axis.kalman_velocity)) {
 80052fc:	4b76      	ldr	r3, [pc, #472]	@ (80054d8 <update_control_loops+0x55c>)
 80052fe:	edd3 7a07 	vldr	s15, [r3, #28]
 8005302:	eef4 7a67 	vcmp.f32	s15, s15
 8005306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800530a:	d703      	bvc.n	8005314 <update_control_loops+0x398>
		revolute_axis.kalman_velocity = 0.0f;
 800530c:	4b72      	ldr	r3, [pc, #456]	@ (80054d8 <update_control_loops+0x55c>)
 800530e:	f04f 0200 	mov.w	r2, #0
 8005312:	61da      	str	r2, [r3, #28]
	}

	revolute_axis.pos_error = revolute_axis.position - normalized_position;
 8005314:	4b70      	ldr	r3, [pc, #448]	@ (80054d8 <update_control_loops+0x55c>)
 8005316:	ed93 7a00 	vldr	s14, [r3]
 800531a:	4b74      	ldr	r3, [pc, #464]	@ (80054ec <update_control_loops+0x570>)
 800531c:	edd3 7a00 	vldr	s15, [r3]
 8005320:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005324:	4b6c      	ldr	r3, [pc, #432]	@ (80054d8 <update_control_loops+0x55c>)
 8005326:	edc3 7a05 	vstr	s15, [r3, #20]

	// Ensure error uses the shortest path for control
	if (revolute_axis.pos_error > PI) {
 800532a:	4b6b      	ldr	r3, [pc, #428]	@ (80054d8 <update_control_loops+0x55c>)
 800532c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005330:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 80054f0 <update_control_loops+0x574>
 8005334:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533c:	dd09      	ble.n	8005352 <update_control_loops+0x3d6>
		revolute_axis.pos_error -= 2.0f * PI;
 800533e:	4b66      	ldr	r3, [pc, #408]	@ (80054d8 <update_control_loops+0x55c>)
 8005340:	edd3 7a05 	vldr	s15, [r3, #20]
 8005344:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80054f4 <update_control_loops+0x578>
 8005348:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800534c:	4b62      	ldr	r3, [pc, #392]	@ (80054d8 <update_control_loops+0x55c>)
 800534e:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	if (revolute_axis.pos_error < -PI) {
 8005352:	4b61      	ldr	r3, [pc, #388]	@ (80054d8 <update_control_loops+0x55c>)
 8005354:	edd3 7a05 	vldr	s15, [r3, #20]
 8005358:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80054f8 <update_control_loops+0x57c>
 800535c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005364:	d509      	bpl.n	800537a <update_control_loops+0x3fe>
		revolute_axis.pos_error += 2.0f * PI;
 8005366:	4b5c      	ldr	r3, [pc, #368]	@ (80054d8 <update_control_loops+0x55c>)
 8005368:	edd3 7a05 	vldr	s15, [r3, #20]
 800536c:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 80054f4 <update_control_loops+0x578>
 8005370:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005374:	4b58      	ldr	r3, [pc, #352]	@ (80054d8 <update_control_loops+0x55c>)
 8005376:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	revolute_axis.command_vel = PWM_Satuation(
 800537a:	4b57      	ldr	r3, [pc, #348]	@ (80054d8 <update_control_loops+0x55c>)
 800537c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005380:	eeb0 0a67 	vmov.f32	s0, s15
 8005384:	485d      	ldr	r0, [pc, #372]	@ (80054fc <update_control_loops+0x580>)
 8005386:	f7fb ff47 	bl	8001218 <PID_CONTROLLER_Compute>
 800538a:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid,
					revolute_axis.pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 800538e:	4b5c      	ldr	r3, [pc, #368]	@ (8005500 <update_control_loops+0x584>)
 8005390:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 8005394:	4610      	mov	r0, r2
 8005396:	4619      	mov	r1, r3
 8005398:	f7fb fb94 	bl	8000ac4 <__aeabi_d2iz>
 800539c:	4604      	mov	r4, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 800539e:	4b58      	ldr	r3, [pc, #352]	@ (8005500 <update_control_loops+0x584>)
 80053a0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80053a4:	60ba      	str	r2, [r7, #8]
 80053a6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80053aa:	60fb      	str	r3, [r7, #12]
	revolute_axis.command_vel = PWM_Satuation(
 80053ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053b0:	f7fb fb88 	bl	8000ac4 <__aeabi_d2iz>
 80053b4:	4603      	mov	r3, r0
 80053b6:	4619      	mov	r1, r3
 80053b8:	4620      	mov	r0, r4
 80053ba:	eeb0 0a48 	vmov.f32	s0, s16
 80053be:	f7fb fec9 	bl	8001154 <PWM_Satuation>
 80053c2:	ee07 0a90 	vmov	s15, r0
 80053c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053ca:	4b43      	ldr	r3, [pc, #268]	@ (80054d8 <update_control_loops+0x55c>)
 80053cc:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Add velocity feedforward for trajectory
	if (revolute_axis.trajectory_active) {
 80053d0:	4b41      	ldr	r3, [pc, #260]	@ (80054d8 <update_control_loops+0x55c>)
 80053d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d010      	beq.n	80053fc <update_control_loops+0x480>
		revolute_axis.vel_error = revolute_axis.command_vel
 80053da:	4b3f      	ldr	r3, [pc, #252]	@ (80054d8 <update_control_loops+0x55c>)
 80053dc:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 80053e0:	4b3d      	ldr	r3, [pc, #244]	@ (80054d8 <update_control_loops+0x55c>)
 80053e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80053e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053ea:	4b3b      	ldr	r3, [pc, #236]	@ (80054d8 <update_control_loops+0x55c>)
 80053ec:	edd3 7a07 	vldr	s15, [r3, #28]
 80053f0:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 80053f4:	4b38      	ldr	r3, [pc, #224]	@ (80054d8 <update_control_loops+0x55c>)
 80053f6:	edc3 7a06 	vstr	s15, [r3, #24]
 80053fa:	e00a      	b.n	8005412 <update_control_loops+0x496>
	} else {
		revolute_axis.vel_error = revolute_axis.command_vel
 80053fc:	4b36      	ldr	r3, [pc, #216]	@ (80054d8 <update_control_loops+0x55c>)
 80053fe:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 8005402:	4b35      	ldr	r3, [pc, #212]	@ (80054d8 <update_control_loops+0x55c>)
 8005404:	edd3 7a07 	vldr	s15, [r3, #28]
 8005408:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 800540c:	4b32      	ldr	r3, [pc, #200]	@ (80054d8 <update_control_loops+0x55c>)
 800540e:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	revolute_axis.command_pos = PWM_Satuation(
 8005412:	4b31      	ldr	r3, [pc, #196]	@ (80054d8 <update_control_loops+0x55c>)
 8005414:	edd3 7a06 	vldr	s15, [r3, #24]
 8005418:	eeb0 0a67 	vmov.f32	s0, s15
 800541c:	4839      	ldr	r0, [pc, #228]	@ (8005504 <update_control_loops+0x588>)
 800541e:	f7fb fefb 	bl	8001218 <PID_CONTROLLER_Compute>
 8005422:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid,
					revolute_axis.vel_error), ZGX45RGG_150RPM_Constant.U_max,
 8005426:	4b36      	ldr	r3, [pc, #216]	@ (8005500 <update_control_loops+0x584>)
 8005428:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 800542c:	4610      	mov	r0, r2
 800542e:	4619      	mov	r1, r3
 8005430:	f7fb fb48 	bl	8000ac4 <__aeabi_d2iz>
 8005434:	4604      	mov	r4, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 8005436:	4b32      	ldr	r3, [pc, #200]	@ (8005500 <update_control_loops+0x584>)
 8005438:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800543c:	603a      	str	r2, [r7, #0]
 800543e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005442:	607b      	str	r3, [r7, #4]
	revolute_axis.command_pos = PWM_Satuation(
 8005444:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005448:	f7fb fb3c 	bl	8000ac4 <__aeabi_d2iz>
 800544c:	4603      	mov	r3, r0
 800544e:	4619      	mov	r1, r3
 8005450:	4620      	mov	r0, r4
 8005452:	eeb0 0a48 	vmov.f32	s0, s16
 8005456:	f7fb fe7d 	bl	8001154 <PWM_Satuation>
 800545a:	ee07 0a90 	vmov	s15, r0
 800545e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005462:	4b1d      	ldr	r3, [pc, #116]	@ (80054d8 <update_control_loops+0x55c>)
 8005464:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Add feed-forward compensation
	if (prismatic_axis.trajectory_active) {
 8005468:	4b18      	ldr	r3, [pc, #96]	@ (80054cc <update_control_loops+0x550>)
 800546a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800546e:	2b00      	cmp	r3, #0
 8005470:	d052      	beq.n	8005518 <update_control_loops+0x59c>
		// Only compute FFD during active movement
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
				prismatic_axis.velocity / 1000.0f);
 8005472:	4b16      	ldr	r3, [pc, #88]	@ (80054cc <update_control_loops+0x550>)
 8005474:	edd3 7a01 	vldr	s15, [r3, #4]
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005478:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8005508 <update_control_loops+0x58c>
 800547c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005480:	eeb0 0a47 	vmov.f32	s0, s14
 8005484:	4821      	ldr	r0, [pc, #132]	@ (800550c <update_control_loops+0x590>)
 8005486:	f7fc f9e3 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 800548a:	eef0 7a40 	vmov.f32	s15, s0
 800548e:	4b0f      	ldr	r3, [pc, #60]	@ (80054cc <update_control_loops+0x550>)
 8005490:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		// Only compute DFD during active movement
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005494:	4b15      	ldr	r3, [pc, #84]	@ (80054ec <update_control_loops+0x570>)
 8005496:	ed93 7a00 	vldr	s14, [r3]
 800549a:	4b0f      	ldr	r3, [pc, #60]	@ (80054d8 <update_control_loops+0x55c>)
 800549c:	edd3 6a01 	vldr	s13, [r3, #4]
				normalized_position, revolute_axis.velocity,
				prismatic_encoder.mm / 1000.0f);
 80054a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005510 <update_control_loops+0x594>)
 80054a2:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80054a6:	eddf 5a18 	vldr	s11, [pc, #96]	@ 8005508 <update_control_loops+0x58c>
 80054aa:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80054ae:	eeb0 1a46 	vmov.f32	s2, s12
 80054b2:	eef0 0a66 	vmov.f32	s1, s13
 80054b6:	eeb0 0a47 	vmov.f32	s0, s14
 80054ba:	4816      	ldr	r0, [pc, #88]	@ (8005514 <update_control_loops+0x598>)
 80054bc:	f7fc fa5b 	bl	8001976 <PRISMATIC_MOTOR_DFD_Compute>
 80054c0:	eef0 7a40 	vmov.f32	s15, s0
 80054c4:	4b01      	ldr	r3, [pc, #4]	@ (80054cc <update_control_loops+0x550>)
 80054c6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 80054ca:	e02d      	b.n	8005528 <update_control_loops+0x5ac>
 80054cc:	20000294 	.word	0x20000294
 80054d0:	200004c4 	.word	0x200004c4
 80054d4:	20000060 	.word	0x20000060
 80054d8:	200002d8 	.word	0x200002d8
 80054dc:	477fff00 	.word	0x477fff00
 80054e0:	c77fff00 	.word	0xc77fff00
 80054e4:	20000440 	.word	0x20000440
 80054e8:	20000da4 	.word	0x20000da4
 80054ec:	20000338 	.word	0x20000338
 80054f0:	40490fdb 	.word	0x40490fdb
 80054f4:	40c90fdb 	.word	0x40c90fdb
 80054f8:	c0490fdb 	.word	0xc0490fdb
 80054fc:	200004ec 	.word	0x200004ec
 8005500:	20000000 	.word	0x20000000
 8005504:	20000514 	.word	0x20000514
 8005508:	447a0000 	.word	0x447a0000
 800550c:	2000053c 	.word	0x2000053c
 8005510:	200003e4 	.word	0x200003e4
 8005514:	20000540 	.word	0x20000540
	} else {
		// Zero when not moving
		prismatic_axis.ffd = 0.0f;
 8005518:	4b84      	ldr	r3, [pc, #528]	@ (800572c <update_control_loops+0x7b0>)
 800551a:	f04f 0200 	mov.w	r2, #0
 800551e:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 8005520:	4b82      	ldr	r3, [pc, #520]	@ (800572c <update_control_loops+0x7b0>)
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	float pris_backlash_compensation = prismatic_backlash_compensator(
 8005528:	4b80      	ldr	r3, [pc, #512]	@ (800572c <update_control_loops+0x7b0>)
 800552a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800552e:	eeb0 0a67 	vmov.f32	s0, s15
 8005532:	f000 f9c1 	bl	80058b8 <prismatic_backlash_compensator>
 8005536:	ed87 0a07 	vstr	s0, [r7, #28]
			prismatic_axis.command_vel);

	prismatic_axis.command_pos = prismatic_axis.command_pos
 800553a:	4b7c      	ldr	r3, [pc, #496]	@ (800572c <update_control_loops+0x7b0>)
 800553c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
			+ pris_backlash_compensation + prismatic_axis.dfd
 8005540:	edd7 7a07 	vldr	s15, [r7, #28]
 8005544:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005548:	4b78      	ldr	r3, [pc, #480]	@ (800572c <update_control_loops+0x7b0>)
 800554a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800554e:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ prismatic_axis.ffd;
 8005552:	4b76      	ldr	r3, [pc, #472]	@ (800572c <update_control_loops+0x7b0>)
 8005554:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8005558:	ee77 7a27 	vadd.f32	s15, s14, s15
	prismatic_axis.command_pos = prismatic_axis.command_pos
 800555c:	4b73      	ldr	r3, [pc, #460]	@ (800572c <update_control_loops+0x7b0>)
 800555e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8005562:	4b73      	ldr	r3, [pc, #460]	@ (8005730 <update_control_loops+0x7b4>)
 8005564:	ed93 7a00 	vldr	s14, [r3]
			normalized_position, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005568:	4b72      	ldr	r3, [pc, #456]	@ (8005734 <update_control_loops+0x7b8>)
 800556a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 800556e:	ed9f 6a72 	vldr	s12, [pc, #456]	@ 8005738 <update_control_loops+0x7bc>
 8005572:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005576:	eeb0 1a66 	vmov.f32	s2, s13
 800557a:	eddf 0a70 	vldr	s1, [pc, #448]	@ 800573c <update_control_loops+0x7c0>
 800557e:	eeb0 0a47 	vmov.f32	s0, s14
 8005582:	486f      	ldr	r0, [pc, #444]	@ (8005740 <update_control_loops+0x7c4>)
 8005584:	f7fc f87a 	bl	800167c <REVOLUTE_MOTOR_DFD_Compute>
 8005588:	eef0 7a40 	vmov.f32	s15, s0
 800558c:	4b6d      	ldr	r3, [pc, #436]	@ (8005744 <update_control_loops+0x7c8>)
 800558e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8005592:	4b6c      	ldr	r3, [pc, #432]	@ (8005744 <update_control_loops+0x7c8>)
 8005594:	edd3 7a01 	vldr	s15, [r3, #4]
 8005598:	eeb0 0a67 	vmov.f32	s0, s15
 800559c:	486a      	ldr	r0, [pc, #424]	@ (8005748 <update_control_loops+0x7cc>)
 800559e:	f7fb ffd9 	bl	8001554 <REVOLUTE_MOTOR_FFD_Compute>
 80055a2:	eef0 7a40 	vmov.f32	s15, s0
 80055a6:	4b67      	ldr	r3, [pc, #412]	@ (8005744 <update_control_loops+0x7c8>)
 80055a8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			revolute_axis.velocity);

	float rev_backlash_compensation = revolute_backlash_compensator(
 80055ac:	4b65      	ldr	r3, [pc, #404]	@ (8005744 <update_control_loops+0x7c8>)
 80055ae:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80055b2:	eeb0 0a67 	vmov.f32	s0, s15
 80055b6:	f000 f8dd 	bl	8005774 <revolute_backlash_compensator>
 80055ba:	ed87 0a06 	vstr	s0, [r7, #24]
			revolute_axis.command_vel);

	revolute_axis.command_pos = revolute_axis.command_pos
 80055be:	4b61      	ldr	r3, [pc, #388]	@ (8005744 <update_control_loops+0x7c8>)
 80055c0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
			+ rev_backlash_compensation + revolute_axis.dfd + revolute_axis.ffd;
 80055c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80055c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055cc:	4b5d      	ldr	r3, [pc, #372]	@ (8005744 <update_control_loops+0x7c8>)
 80055ce:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80055d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055d6:	4b5b      	ldr	r3, [pc, #364]	@ (8005744 <update_control_loops+0x7c8>)
 80055d8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80055dc:	ee77 7a27 	vadd.f32	s15, s14, s15
	revolute_axis.command_pos = revolute_axis.command_pos
 80055e0:	4b58      	ldr	r3, [pc, #352]	@ (8005744 <update_control_loops+0x7c8>)
 80055e2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Final saturation
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80055e6:	4b51      	ldr	r3, [pc, #324]	@ (800572c <update_control_loops+0x7b0>)
 80055e8:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 80055ec:	4b57      	ldr	r3, [pc, #348]	@ (800574c <update_control_loops+0x7d0>)
 80055ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80055f2:	4610      	mov	r0, r2
 80055f4:	4619      	mov	r1, r3
 80055f6:	f7fb fa65 	bl	8000ac4 <__aeabi_d2iz>
 80055fa:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 80055fc:	4b53      	ldr	r3, [pc, #332]	@ (800574c <update_control_loops+0x7d0>)
 80055fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005602:	4615      	mov	r5, r2
 8005604:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005608:	4628      	mov	r0, r5
 800560a:	4631      	mov	r1, r6
 800560c:	f7fb fa5a 	bl	8000ac4 <__aeabi_d2iz>
 8005610:	4603      	mov	r3, r0
 8005612:	4619      	mov	r1, r3
 8005614:	4620      	mov	r0, r4
 8005616:	eeb0 0a48 	vmov.f32	s0, s16
 800561a:	f7fb fd9b 	bl	8001154 <PWM_Satuation>
 800561e:	ee07 0a90 	vmov	s15, r0
 8005622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005626:	4b41      	ldr	r3, [pc, #260]	@ (800572c <update_control_loops+0x7b0>)
 8005628:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 800562c:	4b45      	ldr	r3, [pc, #276]	@ (8005744 <update_control_loops+0x7c8>)
 800562e:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8005632:	4b47      	ldr	r3, [pc, #284]	@ (8005750 <update_control_loops+0x7d4>)
 8005634:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005638:	4610      	mov	r0, r2
 800563a:	4619      	mov	r1, r3
 800563c:	f7fb fa42 	bl	8000ac4 <__aeabi_d2iz>
 8005640:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8005642:	4b43      	ldr	r3, [pc, #268]	@ (8005750 <update_control_loops+0x7d4>)
 8005644:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005648:	4692      	mov	sl, r2
 800564a:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 800564e:	4650      	mov	r0, sl
 8005650:	4659      	mov	r1, fp
 8005652:	f7fb fa37 	bl	8000ac4 <__aeabi_d2iz>
 8005656:	4603      	mov	r3, r0
 8005658:	4619      	mov	r1, r3
 800565a:	4620      	mov	r0, r4
 800565c:	eeb0 0a48 	vmov.f32	s0, s16
 8005660:	f7fb fd78 	bl	8001154 <PWM_Satuation>
 8005664:	ee07 0a90 	vmov	s15, r0
 8005668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800566c:	4b35      	ldr	r3, [pc, #212]	@ (8005744 <update_control_loops+0x7c8>)
 800566e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Apply commands to motors
	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8005672:	4b2e      	ldr	r3, [pc, #184]	@ (800572c <update_control_loops+0x7b0>)
 8005674:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005678:	eef0 0a67 	vmov.f32	s1, s15
 800567c:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 8005754 <update_control_loops+0x7d8>
 8005680:	4835      	ldr	r0, [pc, #212]	@ (8005758 <update_control_loops+0x7dc>)
 8005682:	f7fb fe7f 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8005686:	4b2f      	ldr	r3, [pc, #188]	@ (8005744 <update_control_loops+0x7c8>)
 8005688:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800568c:	eef0 0a67 	vmov.f32	s1, s15
 8005690:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8005754 <update_control_loops+0x7d8>
 8005694:	4831      	ldr	r0, [pc, #196]	@ (800575c <update_control_loops+0x7e0>)
 8005696:	f7fb fe75 	bl	8001384 <MDXX_set_range>

	prismatic_axis.mm = prismatic_encoder.mm;
 800569a:	4b26      	ldr	r3, [pc, #152]	@ (8005734 <update_control_loops+0x7b8>)
 800569c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800569e:	4a23      	ldr	r2, [pc, #140]	@ (800572c <update_control_loops+0x7b0>)
 80056a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
	prismatic_axis.target = prismatic_axis.target_pos;
 80056a2:	4b22      	ldr	r3, [pc, #136]	@ (800572c <update_control_loops+0x7b0>)
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	4a21      	ldr	r2, [pc, #132]	@ (800572c <update_control_loops+0x7b0>)
 80056a8:	6393      	str	r3, [r2, #56]	@ 0x38

	revolute_axis.deg = UnitConverter_angle(&converter_system,
 80056aa:	4b21      	ldr	r3, [pc, #132]	@ (8005730 <update_control_loops+0x7b4>)
 80056ac:	edd3 7a00 	vldr	s15, [r3]
 80056b0:	220e      	movs	r2, #14
 80056b2:	210f      	movs	r1, #15
 80056b4:	eeb0 0a67 	vmov.f32	s0, s15
 80056b8:	4829      	ldr	r0, [pc, #164]	@ (8005760 <update_control_loops+0x7e4>)
 80056ba:	f7fe ff2f 	bl	800451c <UnitConverter_angle>
 80056be:	eef0 7a40 	vmov.f32	s15, s0
 80056c2:	4b20      	ldr	r3, [pc, #128]	@ (8005744 <update_control_loops+0x7c8>)
 80056c4:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);
	;
	revolute_axis.target = UnitConverter_angle(&converter_system, angle_deg,
 80056c8:	4b26      	ldr	r3, [pc, #152]	@ (8005764 <update_control_loops+0x7e8>)
 80056ca:	edd3 7a00 	vldr	s15, [r3]
 80056ce:	220e      	movs	r2, #14
 80056d0:	210f      	movs	r1, #15
 80056d2:	eeb0 0a67 	vmov.f32	s0, s15
 80056d6:	4822      	ldr	r0, [pc, #136]	@ (8005760 <update_control_loops+0x7e4>)
 80056d8:	f7fe ff20 	bl	800451c <UnitConverter_angle>
 80056dc:	eef0 7a40 	vmov.f32	s15, s0
 80056e0:	4b18      	ldr	r3, [pc, #96]	@ (8005744 <update_control_loops+0x7c8>)
 80056e2:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			UNIT_RADIAN, UNIT_DEGREE);

	// Put pen down when both trajectories are complete
	static uint32_t pen_down_timer = 0;
	if (revEva.isFinised && prisEva.isFinised) {
 80056e6:	4b20      	ldr	r3, [pc, #128]	@ (8005768 <update_control_loops+0x7ec>)
 80056e8:	7c1b      	ldrb	r3, [r3, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d013      	beq.n	8005716 <update_control_loops+0x79a>
 80056ee:	4b1f      	ldr	r3, [pc, #124]	@ (800576c <update_control_loops+0x7f0>)
 80056f0:	7c1b      	ldrb	r3, [r3, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00f      	beq.n	8005716 <update_control_loops+0x79a>
		pen_down_timer++;
 80056f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005770 <update_control_loops+0x7f4>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3301      	adds	r3, #1
 80056fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005770 <update_control_loops+0x7f4>)
 80056fe:	6013      	str	r3, [r2, #0]
		if (pen_down_timer > PEN_SETTLE_TIME) {
 8005700:	4b1b      	ldr	r3, [pc, #108]	@ (8005770 <update_control_loops+0x7f4>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005708:	d909      	bls.n	800571e <update_control_loops+0x7a2>
			plotter_pen_down();
 800570a:	f001 fa93 	bl	8006c34 <plotter_pen_down>
			pen_down_timer = 0;
 800570e:	4b18      	ldr	r3, [pc, #96]	@ (8005770 <update_control_loops+0x7f4>)
 8005710:	2200      	movs	r2, #0
 8005712:	601a      	str	r2, [r3, #0]
		if (pen_down_timer > PEN_SETTLE_TIME) {
 8005714:	e003      	b.n	800571e <update_control_loops+0x7a2>
		}
	} else {
		pen_down_timer = 0;
 8005716:	4b16      	ldr	r3, [pc, #88]	@ (8005770 <update_control_loops+0x7f4>)
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]
	}
}
 800571c:	bf00      	nop
 800571e:	bf00      	nop
 8005720:	3724      	adds	r7, #36	@ 0x24
 8005722:	46bd      	mov	sp, r7
 8005724:	ecbd 8b02 	vpop	{d8}
 8005728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800572c:	20000294 	.word	0x20000294
 8005730:	20000338 	.word	0x20000338
 8005734:	200003e4 	.word	0x200003e4
 8005738:	447a0000 	.word	0x447a0000
 800573c:	00000000 	.word	0x00000000
 8005740:	2000054c 	.word	0x2000054c
 8005744:	200002d8 	.word	0x200002d8
 8005748:	20000548 	.word	0x20000548
 800574c:	20000060 	.word	0x20000060
 8005750:	20000000 	.word	0x20000000
 8005754:	44fa0000 	.word	0x44fa0000
 8005758:	2000034c 	.word	0x2000034c
 800575c:	20000398 	.word	0x20000398
 8005760:	200007b0 	.word	0x200007b0
 8005764:	2000033c 	.word	0x2000033c
 8005768:	20000280 	.word	0x20000280
 800576c:	2000026c 	.word	0x2000026c
 8005770:	20000344 	.word	0x20000344

08005774 <revolute_backlash_compensator>:
/**
 * @brief Compensation for revolute axis backlash
 * @param cmd_vel Command velocity
 * @return Compensation value
 */
float revolute_backlash_compensator(float cmd_vel) {
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	ed87 0a01 	vstr	s0, [r7, #4]
	// Determine current direction
	float current_direction =
			(cmd_vel > 0.0f) ? 1.0f : ((cmd_vel < 0.0f) ? -1.0f : 0.0f);
 800577e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005782:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800578a:	dd02      	ble.n	8005792 <revolute_backlash_compensator+0x1e>
 800578c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005790:	e00a      	b.n	80057a8 <revolute_backlash_compensator+0x34>
 8005792:	edd7 7a01 	vldr	s15, [r7, #4]
 8005796:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800579a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800579e:	d501      	bpl.n	80057a4 <revolute_backlash_compensator+0x30>
 80057a0:	4b3e      	ldr	r3, [pc, #248]	@ (800589c <revolute_backlash_compensator+0x128>)
 80057a2:	e001      	b.n	80057a8 <revolute_backlash_compensator+0x34>
 80057a4:	f04f 0300 	mov.w	r3, #0
	float current_direction =
 80057a8:	617b      	str	r3, [r7, #20]

	// If stopped, maintain last direction
	if (current_direction == 0.0f) {
 80057aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80057ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80057b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b6:	d102      	bne.n	80057be <revolute_backlash_compensator+0x4a>
		current_direction = revolute_last_cmd_direction;
 80057b8:	4b39      	ldr	r3, [pc, #228]	@ (80058a0 <revolute_backlash_compensator+0x12c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	617b      	str	r3, [r7, #20]
	}

	// Detect direction change
	if (current_direction != revolute_last_cmd_direction
 80057be:	4b38      	ldr	r3, [pc, #224]	@ (80058a0 <revolute_backlash_compensator+0x12c>)
 80057c0:	edd3 7a00 	vldr	s15, [r3]
 80057c4:	ed97 7a05 	vldr	s14, [r7, #20]
 80057c8:	eeb4 7a67 	vcmp.f32	s14, s15
 80057cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d0:	d013      	beq.n	80057fa <revolute_backlash_compensator+0x86>
			&& current_direction != 0.0f) {
 80057d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80057d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80057da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057de:	d00c      	beq.n	80057fa <revolute_backlash_compensator+0x86>
		// If direction changed, update backlash state
		revolute_backlash_state = current_direction * revolute_backlash;
 80057e0:	4b30      	ldr	r3, [pc, #192]	@ (80058a4 <revolute_backlash_compensator+0x130>)
 80057e2:	ed93 7a00 	vldr	s14, [r3]
 80057e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80057ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ee:	4b2e      	ldr	r3, [pc, #184]	@ (80058a8 <revolute_backlash_compensator+0x134>)
 80057f0:	edc3 7a00 	vstr	s15, [r3]
		revolute_last_cmd_direction = current_direction;
 80057f4:	4a2a      	ldr	r2, [pc, #168]	@ (80058a0 <revolute_backlash_compensator+0x12c>)
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	6013      	str	r3, [r2, #0]
	}

	// Apply adaptive compensation based on velocity
	float compensation = revolute_backlash_state * BACKLASH_COMPENSATION_GAIN;
 80057fa:	4b2b      	ldr	r3, [pc, #172]	@ (80058a8 <revolute_backlash_compensator+0x134>)
 80057fc:	edd3 7a00 	vldr	s15, [r3]
 8005800:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80058ac <revolute_backlash_compensator+0x138>
 8005804:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005808:	edc7 7a04 	vstr	s15, [r7, #16]

	// Gradually reduce backlash state as we overcome the backlash
	float backlash_decay_rate = BACKLASH_DECAY_FACTOR * fabsf(cmd_vel);
 800580c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005810:	eef0 7ae7 	vabs.f32	s15, s15
 8005814:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80058b0 <revolute_backlash_compensator+0x13c>
 8005818:	ee67 7a87 	vmul.f32	s15, s15, s14
 800581c:	edc7 7a03 	vstr	s15, [r7, #12]
	if (revolute_backlash_state > 0.0f) {
 8005820:	4b21      	ldr	r3, [pc, #132]	@ (80058a8 <revolute_backlash_compensator+0x134>)
 8005822:	edd3 7a00 	vldr	s15, [r3]
 8005826:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800582a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800582e:	dd12      	ble.n	8005856 <revolute_backlash_compensator+0xe2>
		revolute_backlash_state = fmaxf(0.0f,
 8005830:	4b1d      	ldr	r3, [pc, #116]	@ (80058a8 <revolute_backlash_compensator+0x134>)
 8005832:	ed93 7a00 	vldr	s14, [r3]
 8005836:	edd7 7a03 	vldr	s15, [r7, #12]
 800583a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800583e:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80058b4 <revolute_backlash_compensator+0x140>
 8005842:	eeb0 0a67 	vmov.f32	s0, s15
 8005846:	f00a f813 	bl	800f870 <fmaxf>
 800584a:	eef0 7a40 	vmov.f32	s15, s0
 800584e:	4b16      	ldr	r3, [pc, #88]	@ (80058a8 <revolute_backlash_compensator+0x134>)
 8005850:	edc3 7a00 	vstr	s15, [r3]
 8005854:	e019      	b.n	800588a <revolute_backlash_compensator+0x116>
				revolute_backlash_state - backlash_decay_rate);
	} else if (revolute_backlash_state < 0.0f) {
 8005856:	4b14      	ldr	r3, [pc, #80]	@ (80058a8 <revolute_backlash_compensator+0x134>)
 8005858:	edd3 7a00 	vldr	s15, [r3]
 800585c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005864:	d511      	bpl.n	800588a <revolute_backlash_compensator+0x116>
		revolute_backlash_state = fminf(0.0f,
 8005866:	4b10      	ldr	r3, [pc, #64]	@ (80058a8 <revolute_backlash_compensator+0x134>)
 8005868:	ed93 7a00 	vldr	s14, [r3]
 800586c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005874:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80058b4 <revolute_backlash_compensator+0x140>
 8005878:	eeb0 0a67 	vmov.f32	s0, s15
 800587c:	f00a f815 	bl	800f8aa <fminf>
 8005880:	eef0 7a40 	vmov.f32	s15, s0
 8005884:	4b08      	ldr	r3, [pc, #32]	@ (80058a8 <revolute_backlash_compensator+0x134>)
 8005886:	edc3 7a00 	vstr	s15, [r3]
				revolute_backlash_state + backlash_decay_rate);
	}

	return compensation;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	ee07 3a90 	vmov	s15, r3
}
 8005890:	eeb0 0a67 	vmov.f32	s0, s15
 8005894:	3718      	adds	r7, #24
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	bf800000 	.word	0xbf800000
 80058a0:	2000031c 	.word	0x2000031c
 80058a4:	200000f0 	.word	0x200000f0
 80058a8:	20000320 	.word	0x20000320
 80058ac:	3e99999a 	.word	0x3e99999a
 80058b0:	3ba3d70a 	.word	0x3ba3d70a
 80058b4:	00000000 	.word	0x00000000

080058b8 <prismatic_backlash_compensator>:
/**
 * @brief Compensation for prismatic axis backlash
 * @param cmd_vel Command velocity
 * @return Compensation value
 */
float prismatic_backlash_compensator(float cmd_vel) {
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	ed87 0a01 	vstr	s0, [r7, #4]
	// Determine current direction
	float current_direction =
			(cmd_vel > 0.0f) ? 1.0f : ((cmd_vel < 0.0f) ? -1.0f : 0.0f);
 80058c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80058c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80058ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ce:	dd02      	ble.n	80058d6 <prismatic_backlash_compensator+0x1e>
 80058d0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80058d4:	e00a      	b.n	80058ec <prismatic_backlash_compensator+0x34>
 80058d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80058da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80058de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e2:	d501      	bpl.n	80058e8 <prismatic_backlash_compensator+0x30>
 80058e4:	4b3e      	ldr	r3, [pc, #248]	@ (80059e0 <prismatic_backlash_compensator+0x128>)
 80058e6:	e001      	b.n	80058ec <prismatic_backlash_compensator+0x34>
 80058e8:	f04f 0300 	mov.w	r3, #0
	float current_direction =
 80058ec:	617b      	str	r3, [r7, #20]

	// If stopped, maintain last direction
	if (current_direction == 0.0f) {
 80058ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80058f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80058f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058fa:	d102      	bne.n	8005902 <prismatic_backlash_compensator+0x4a>
		current_direction = prismatic_last_cmd_direction;
 80058fc:	4b39      	ldr	r3, [pc, #228]	@ (80059e4 <prismatic_backlash_compensator+0x12c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	617b      	str	r3, [r7, #20]
	}

	// Detect direction change
	if (current_direction != prismatic_last_cmd_direction
 8005902:	4b38      	ldr	r3, [pc, #224]	@ (80059e4 <prismatic_backlash_compensator+0x12c>)
 8005904:	edd3 7a00 	vldr	s15, [r3]
 8005908:	ed97 7a05 	vldr	s14, [r7, #20]
 800590c:	eeb4 7a67 	vcmp.f32	s14, s15
 8005910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005914:	d013      	beq.n	800593e <prismatic_backlash_compensator+0x86>
			&& current_direction != 0.0f) {
 8005916:	edd7 7a05 	vldr	s15, [r7, #20]
 800591a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800591e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005922:	d00c      	beq.n	800593e <prismatic_backlash_compensator+0x86>
		// If direction changed, update backlash state
		prismatic_backlash_state = current_direction * prismatic_backlash;
 8005924:	4b30      	ldr	r3, [pc, #192]	@ (80059e8 <prismatic_backlash_compensator+0x130>)
 8005926:	ed93 7a00 	vldr	s14, [r3]
 800592a:	edd7 7a05 	vldr	s15, [r7, #20]
 800592e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005932:	4b2e      	ldr	r3, [pc, #184]	@ (80059ec <prismatic_backlash_compensator+0x134>)
 8005934:	edc3 7a00 	vstr	s15, [r3]
		prismatic_last_cmd_direction = current_direction;
 8005938:	4a2a      	ldr	r2, [pc, #168]	@ (80059e4 <prismatic_backlash_compensator+0x12c>)
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	6013      	str	r3, [r2, #0]
	}

	// Apply adaptive compensation based on velocity
	float compensation = prismatic_backlash_state
			* PRISMATIC_BACKLASH_COMPENSATION_GAIN;
 800593e:	4b2b      	ldr	r3, [pc, #172]	@ (80059ec <prismatic_backlash_compensator+0x134>)
 8005940:	edd3 7a00 	vldr	s15, [r3]
	float compensation = prismatic_backlash_state
 8005944:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800594c:	edc7 7a04 	vstr	s15, [r7, #16]

	// Gradually reduce backlash state as we overcome the backlash
	float backlash_decay_rate = BACKLASH_DECAY_FACTOR * fabsf(cmd_vel);
 8005950:	edd7 7a01 	vldr	s15, [r7, #4]
 8005954:	eef0 7ae7 	vabs.f32	s15, s15
 8005958:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80059f0 <prismatic_backlash_compensator+0x138>
 800595c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005960:	edc7 7a03 	vstr	s15, [r7, #12]
	if (prismatic_backlash_state > 0.0f) {
 8005964:	4b21      	ldr	r3, [pc, #132]	@ (80059ec <prismatic_backlash_compensator+0x134>)
 8005966:	edd3 7a00 	vldr	s15, [r3]
 800596a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800596e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005972:	dd12      	ble.n	800599a <prismatic_backlash_compensator+0xe2>
		prismatic_backlash_state = fmaxf(0.0f,
 8005974:	4b1d      	ldr	r3, [pc, #116]	@ (80059ec <prismatic_backlash_compensator+0x134>)
 8005976:	ed93 7a00 	vldr	s14, [r3]
 800597a:	edd7 7a03 	vldr	s15, [r7, #12]
 800597e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005982:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80059f4 <prismatic_backlash_compensator+0x13c>
 8005986:	eeb0 0a67 	vmov.f32	s0, s15
 800598a:	f009 ff71 	bl	800f870 <fmaxf>
 800598e:	eef0 7a40 	vmov.f32	s15, s0
 8005992:	4b16      	ldr	r3, [pc, #88]	@ (80059ec <prismatic_backlash_compensator+0x134>)
 8005994:	edc3 7a00 	vstr	s15, [r3]
 8005998:	e019      	b.n	80059ce <prismatic_backlash_compensator+0x116>
				prismatic_backlash_state - backlash_decay_rate);
	} else if (prismatic_backlash_state < 0.0f) {
 800599a:	4b14      	ldr	r3, [pc, #80]	@ (80059ec <prismatic_backlash_compensator+0x134>)
 800599c:	edd3 7a00 	vldr	s15, [r3]
 80059a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059a8:	d511      	bpl.n	80059ce <prismatic_backlash_compensator+0x116>
		prismatic_backlash_state = fminf(0.0f,
 80059aa:	4b10      	ldr	r3, [pc, #64]	@ (80059ec <prismatic_backlash_compensator+0x134>)
 80059ac:	ed93 7a00 	vldr	s14, [r3]
 80059b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80059b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059b8:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 80059f4 <prismatic_backlash_compensator+0x13c>
 80059bc:	eeb0 0a67 	vmov.f32	s0, s15
 80059c0:	f009 ff73 	bl	800f8aa <fminf>
 80059c4:	eef0 7a40 	vmov.f32	s15, s0
 80059c8:	4b08      	ldr	r3, [pc, #32]	@ (80059ec <prismatic_backlash_compensator+0x134>)
 80059ca:	edc3 7a00 	vstr	s15, [r3]
				prismatic_backlash_state + backlash_decay_rate);
	}

	return compensation;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	ee07 3a90 	vmov	s15, r3
}
 80059d4:	eeb0 0a67 	vmov.f32	s0, s15
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	bf800000 	.word	0xbf800000
 80059e4:	20000324 	.word	0x20000324
 80059e8:	200000f4 	.word	0x200000f4
 80059ec:	20000328 	.word	0x20000328
 80059f0:	3ba3d70a 	.word	0x3ba3d70a
 80059f4:	00000000 	.word	0x00000000

080059f8 <velocity_control>:
/**
 * @brief Optimized velocity control implementation for both axes
 * @param prismatic_target_mmps Target velocity for prismatic axis in mm/s
 * @param revolute_target_rads Target velocity for revolute axis in rad/s
 */
void velocity_control(float prismatic_target_mmps, float revolute_target_rads) {
 80059f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80059fc:	ed2d 8b02 	vpush	{d8}
 8005a00:	b08b      	sub	sp, #44	@ 0x2c
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	ed87 0a01 	vstr	s0, [r7, #4]
 8005a08:	edc7 0a00 	vstr	s1, [r7]
	// -- Prismatic axis control --
	// Calculate current velocity from Kalman filter
	float pris_vin = mapf(prismatic_axis.command_pos, -65535.0f, 65535.0f,
 8005a0c:	4b9c      	ldr	r3, [pc, #624]	@ (8005c80 <velocity_control+0x288>)
 8005a0e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005a12:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8005a16:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8005a1a:	ed9f 1a9a 	vldr	s2, [pc, #616]	@ 8005c84 <velocity_control+0x28c>
 8005a1e:	eddf 0a9a 	vldr	s1, [pc, #616]	@ 8005c88 <velocity_control+0x290>
 8005a22:	eeb0 0a67 	vmov.f32	s0, s15
 8005a26:	f7fc f97b 	bl	8001d20 <mapf>
 8005a2a:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
			-12.0f, 12.0f);
	float pris_vel = MotorKalman_Estimate(&prismatic_kalman, pris_vin,
 8005a2e:	4b97      	ldr	r3, [pc, #604]	@ (8005c8c <velocity_control+0x294>)
 8005a30:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005a34:	eef0 0a67 	vmov.f32	s1, s15
 8005a38:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8005a3c:	4894      	ldr	r0, [pc, #592]	@ (8005c90 <velocity_control+0x298>)
 8005a3e:	f7fd f93d 	bl	8002cbc <MotorKalman_Estimate>
 8005a42:	eeb0 7a40 	vmov.f32	s14, s0
			prismatic_encoder.rads)
			* Disturbance_Constant.prismatic_pulley_radius * 1000.0f;
 8005a46:	4b93      	ldr	r3, [pc, #588]	@ (8005c94 <velocity_control+0x29c>)
 8005a48:	edd3 7a04 	vldr	s15, [r3, #16]
 8005a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
	float pris_vel = MotorKalman_Estimate(&prismatic_kalman, pris_vin,
 8005a50:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8005c98 <velocity_control+0x2a0>
 8005a54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a58:	edc7 7a08 	vstr	s15, [r7, #32]

	// Safety check for NaN
	pris_vel = isnan(pris_vel) ? 0.0f : pris_vel;
 8005a5c:	ed97 7a08 	vldr	s14, [r7, #32]
 8005a60:	edd7 7a08 	vldr	s15, [r7, #32]
 8005a64:	eeb4 7a67 	vcmp.f32	s14, s15
 8005a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a6c:	d601      	bvs.n	8005a72 <velocity_control+0x7a>
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	e001      	b.n	8005a76 <velocity_control+0x7e>
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	623b      	str	r3, [r7, #32]

	// Calculate velocity error and PID output
	float pris_vel_error = prismatic_target_mmps - pris_vel;
 8005a78:	ed97 7a01 	vldr	s14, [r7, #4]
 8005a7c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a84:	edc7 7a07 	vstr	s15, [r7, #28]
	prismatic_axis.command_pos = PID_CONTROLLER_Compute(&prismatic_velocity_pid,
 8005a88:	ed97 0a07 	vldr	s0, [r7, #28]
 8005a8c:	4883      	ldr	r0, [pc, #524]	@ (8005c9c <velocity_control+0x2a4>)
 8005a8e:	f7fb fbc3 	bl	8001218 <PID_CONTROLLER_Compute>
 8005a92:	eef0 7a40 	vmov.f32	s15, s0
 8005a96:	4b7a      	ldr	r3, [pc, #488]	@ (8005c80 <velocity_control+0x288>)
 8005a98:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
			pris_vel_error);

	// -- Revolute axis control --
	// Calculate current velocity from Kalman filter
	float rev_vin = mapf(revolute_axis.command_pos, -65535.0f, 65535.0f, -12.0f,
 8005a9c:	4b80      	ldr	r3, [pc, #512]	@ (8005ca0 <velocity_control+0x2a8>)
 8005a9e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005aa2:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8005aa6:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8005aaa:	ed9f 1a76 	vldr	s2, [pc, #472]	@ 8005c84 <velocity_control+0x28c>
 8005aae:	eddf 0a76 	vldr	s1, [pc, #472]	@ 8005c88 <velocity_control+0x290>
 8005ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ab6:	f7fc f933 	bl	8001d20 <mapf>
 8005aba:	ed87 0a06 	vstr	s0, [r7, #24]
			12.0f);
	float rev_vel = MotorKalman_Estimate(&revolute_kalman, rev_vin,
 8005abe:	4b79      	ldr	r3, [pc, #484]	@ (8005ca4 <velocity_control+0x2ac>)
 8005ac0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005ac4:	eef0 0a67 	vmov.f32	s1, s15
 8005ac8:	ed97 0a06 	vldr	s0, [r7, #24]
 8005acc:	4876      	ldr	r0, [pc, #472]	@ (8005ca8 <velocity_control+0x2b0>)
 8005ace:	f7fd f8f5 	bl	8002cbc <MotorKalman_Estimate>
 8005ad2:	ed87 0a05 	vstr	s0, [r7, #20]
			revolute_encoder.rads);

	// Safety check for NaN
	rev_vel = isnan(rev_vel) ? 0.0f : rev_vel;
 8005ad6:	ed97 7a05 	vldr	s14, [r7, #20]
 8005ada:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ade:	eeb4 7a67 	vcmp.f32	s14, s15
 8005ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae6:	d601      	bvs.n	8005aec <velocity_control+0xf4>
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	e001      	b.n	8005af0 <velocity_control+0xf8>
 8005aec:	f04f 0300 	mov.w	r3, #0
 8005af0:	617b      	str	r3, [r7, #20]

	// Calculate velocity error and PID output
	float rev_vel_error = revolute_target_rads - rev_vel;
 8005af2:	ed97 7a00 	vldr	s14, [r7]
 8005af6:	edd7 7a05 	vldr	s15, [r7, #20]
 8005afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005afe:	edc7 7a04 	vstr	s15, [r7, #16]
	revolute_axis.command_pos = PID_CONTROLLER_Compute(&revolute_velocity_pid,
 8005b02:	ed97 0a04 	vldr	s0, [r7, #16]
 8005b06:	4869      	ldr	r0, [pc, #420]	@ (8005cac <velocity_control+0x2b4>)
 8005b08:	f7fb fb86 	bl	8001218 <PID_CONTROLLER_Compute>
 8005b0c:	eef0 7a40 	vmov.f32	s15, s0
 8005b10:	4b63      	ldr	r3, [pc, #396]	@ (8005ca0 <velocity_control+0x2a8>)
 8005b12:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
			rev_vel_error);

	// Get normalized angle once for all feed-forward calculations
	float normalized_angle = normalize_angle(revolute_encoder.rads);
 8005b16:	4b63      	ldr	r3, [pc, #396]	@ (8005ca4 <velocity_control+0x2ac>)
 8005b18:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8005b20:	f7ff f84e 	bl	8004bc0 <normalize_angle>
 8005b24:	ed87 0a03 	vstr	s0, [r7, #12]
	float pris_position_m = prismatic_encoder.mm / 1000.0f; // Convert mm to m, calculate once
 8005b28:	4b58      	ldr	r3, [pc, #352]	@ (8005c8c <velocity_control+0x294>)
 8005b2a:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8005b2e:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8005c98 <velocity_control+0x2a0>
 8005b32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b36:	edc7 7a02 	vstr	s15, [r7, #8]

	// -- Add feed-forward terms --
	// Prismatic axis feed-forward
	prismatic_axis.command_pos += PRISMATIC_MOTOR_FFD_Compute(
 8005b3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b3e:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8005c98 <velocity_control+0x2a0>
 8005b42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005b46:	eeb0 0a47 	vmov.f32	s0, s14
 8005b4a:	4859      	ldr	r0, [pc, #356]	@ (8005cb0 <velocity_control+0x2b8>)
 8005b4c:	f7fb fe80 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 8005b50:	eeb0 8a40 	vmov.f32	s16, s0
			&prismatic_motor_ffd, prismatic_target_mmps / 1000.0f) // FFD (velocity)
	+ prismatic_backlash_compensator(prismatic_target_mmps); // Backlash
 8005b54:	ed97 0a01 	vldr	s0, [r7, #4]
 8005b58:	f7ff feae 	bl	80058b8 <prismatic_backlash_compensator>
 8005b5c:	eef0 7a40 	vmov.f32	s15, s0
 8005b60:	ee38 7a27 	vadd.f32	s14, s16, s15
	prismatic_axis.command_pos += PRISMATIC_MOTOR_FFD_Compute(
 8005b64:	4b46      	ldr	r3, [pc, #280]	@ (8005c80 <velocity_control+0x288>)
 8005b66:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b6e:	4b44      	ldr	r3, [pc, #272]	@ (8005c80 <velocity_control+0x288>)
 8005b70:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Revolute axis feed-forward
	revolute_axis.command_pos += REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8005b74:	ed97 0a00 	vldr	s0, [r7]
 8005b78:	484e      	ldr	r0, [pc, #312]	@ (8005cb4 <velocity_control+0x2bc>)
 8005b7a:	f7fb fceb 	bl	8001554 <REVOLUTE_MOTOR_FFD_Compute>
 8005b7e:	eeb0 8a40 	vmov.f32	s16, s0
			revolute_target_rads) // FFD (velocity)
			+ REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd, normalized_angle,
 8005b82:	ed97 1a02 	vldr	s2, [r7, #8]
 8005b86:	eddf 0a4c 	vldr	s1, [pc, #304]	@ 8005cb8 <velocity_control+0x2c0>
 8005b8a:	ed97 0a03 	vldr	s0, [r7, #12]
 8005b8e:	484b      	ldr	r0, [pc, #300]	@ (8005cbc <velocity_control+0x2c4>)
 8005b90:	f7fb fd74 	bl	800167c <REVOLUTE_MOTOR_DFD_Compute>
 8005b94:	eef0 7a40 	vmov.f32	s15, s0
 8005b98:	ee38 8a27 	vadd.f32	s16, s16, s15
					0.0f, pris_position_m) // DFD (disturbance)
			+ revolute_backlash_compensator(revolute_target_rads); // Backlash
 8005b9c:	ed97 0a00 	vldr	s0, [r7]
 8005ba0:	f7ff fde8 	bl	8005774 <revolute_backlash_compensator>
 8005ba4:	eef0 7a40 	vmov.f32	s15, s0
 8005ba8:	ee38 7a27 	vadd.f32	s14, s16, s15
	revolute_axis.command_pos += REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8005bac:	4b3c      	ldr	r3, [pc, #240]	@ (8005ca0 <velocity_control+0x2a8>)
 8005bae:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005bb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bb6:	4b3a      	ldr	r3, [pc, #232]	@ (8005ca0 <velocity_control+0x2a8>)
 8005bb8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

			// Apply saturation to both axes in one step
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005bbc:	4b30      	ldr	r3, [pc, #192]	@ (8005c80 <velocity_control+0x288>)
 8005bbe:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8005bc2:	4b3f      	ldr	r3, [pc, #252]	@ (8005cc0 <velocity_control+0x2c8>)
 8005bc4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005bc8:	4610      	mov	r0, r2
 8005bca:	4619      	mov	r1, r3
 8005bcc:	f7fa ff7a 	bl	8000ac4 <__aeabi_d2iz>
 8005bd0:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8005bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8005cc0 <velocity_control+0x2c8>)
 8005bd4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005bd8:	4690      	mov	r8, r2
 8005bda:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005bde:	4640      	mov	r0, r8
 8005be0:	4649      	mov	r1, r9
 8005be2:	f7fa ff6f 	bl	8000ac4 <__aeabi_d2iz>
 8005be6:	4603      	mov	r3, r0
 8005be8:	4619      	mov	r1, r3
 8005bea:	4630      	mov	r0, r6
 8005bec:	eeb0 0a48 	vmov.f32	s0, s16
 8005bf0:	f7fb fab0 	bl	8001154 <PWM_Satuation>
 8005bf4:	ee07 0a90 	vmov	s15, r0
 8005bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bfc:	4b20      	ldr	r3, [pc, #128]	@ (8005c80 <velocity_control+0x288>)
 8005bfe:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005c02:	4b27      	ldr	r3, [pc, #156]	@ (8005ca0 <velocity_control+0x2a8>)
 8005c04:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8005c08:	4b2e      	ldr	r3, [pc, #184]	@ (8005cc4 <velocity_control+0x2cc>)
 8005c0a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005c0e:	4610      	mov	r0, r2
 8005c10:	4619      	mov	r1, r3
 8005c12:	f7fa ff57 	bl	8000ac4 <__aeabi_d2iz>
 8005c16:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8005c18:	4b2a      	ldr	r3, [pc, #168]	@ (8005cc4 <velocity_control+0x2cc>)
 8005c1a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005c1e:	4614      	mov	r4, r2
 8005c20:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005c24:	4620      	mov	r0, r4
 8005c26:	4629      	mov	r1, r5
 8005c28:	f7fa ff4c 	bl	8000ac4 <__aeabi_d2iz>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	4619      	mov	r1, r3
 8005c30:	4630      	mov	r0, r6
 8005c32:	eeb0 0a48 	vmov.f32	s0, s16
 8005c36:	f7fb fa8d 	bl	8001154 <PWM_Satuation>
 8005c3a:	ee07 0a90 	vmov	s15, r0
 8005c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c42:	4b17      	ldr	r3, [pc, #92]	@ (8005ca0 <velocity_control+0x2a8>)
 8005c44:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Apply commands to motors
	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8005c48:	4b0d      	ldr	r3, [pc, #52]	@ (8005c80 <velocity_control+0x288>)
 8005c4a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005c4e:	eef0 0a67 	vmov.f32	s1, s15
 8005c52:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8005cc8 <velocity_control+0x2d0>
 8005c56:	481d      	ldr	r0, [pc, #116]	@ (8005ccc <velocity_control+0x2d4>)
 8005c58:	f7fb fb94 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8005c5c:	4b10      	ldr	r3, [pc, #64]	@ (8005ca0 <velocity_control+0x2a8>)
 8005c5e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005c62:	eef0 0a67 	vmov.f32	s1, s15
 8005c66:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8005cc8 <velocity_control+0x2d0>
 8005c6a:	4819      	ldr	r0, [pc, #100]	@ (8005cd0 <velocity_control+0x2d8>)
 8005c6c:	f7fb fb8a 	bl	8001384 <MDXX_set_range>
}
 8005c70:	bf00      	nop
 8005c72:	372c      	adds	r7, #44	@ 0x2c
 8005c74:	46bd      	mov	sp, r7
 8005c76:	ecbd 8b02 	vpop	{d8}
 8005c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c7e:	bf00      	nop
 8005c80:	20000294 	.word	0x20000294
 8005c84:	477fff00 	.word	0x477fff00
 8005c88:	c77fff00 	.word	0xc77fff00
 8005c8c:	200003e4 	.word	0x200003e4
 8005c90:	20000a38 	.word	0x20000a38
 8005c94:	200000c0 	.word	0x200000c0
 8005c98:	447a0000 	.word	0x447a0000
 8005c9c:	200004c4 	.word	0x200004c4
 8005ca0:	200002d8 	.word	0x200002d8
 8005ca4:	20000440 	.word	0x20000440
 8005ca8:	20000da4 	.word	0x20000da4
 8005cac:	20000514 	.word	0x20000514
 8005cb0:	2000053c 	.word	0x2000053c
 8005cb4:	20000548 	.word	0x20000548
 8005cb8:	00000000 	.word	0x00000000
 8005cbc:	2000054c 	.word	0x2000054c
 8005cc0:	20000060 	.word	0x20000060
 8005cc4:	20000000 	.word	0x20000000
 8005cc8:	44fa0000 	.word	0x44fa0000
 8005ccc:	2000034c 	.word	0x2000034c
 8005cd0:	20000398 	.word	0x20000398

08005cd4 <process_joystick_control>:

/**
 * @brief Process joystick control in timer callback function
 */
void process_joystick_control(void) {
 8005cd4:	b5b0      	push	{r4, r5, r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
	// State machine for joystick control
	switch (joystick_state) {
 8005cda:	4ba5      	ldr	r3, [pc, #660]	@ (8005f70 <process_joystick_control+0x29c>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	f000 8124 	beq.w	8005f2c <process_joystick_control+0x258>
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	f300 813a 	bgt.w	8005f5e <process_joystick_control+0x28a>
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d002      	beq.n	8005cf4 <process_joystick_control+0x20>
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d009      	beq.n	8005d06 <process_joystick_control+0x32>
 8005cf2:	e134      	b.n	8005f5e <process_joystick_control+0x28a>
	case JOY_IDLE:
		// Not in joystick mode, nothing to do
		rev_velocity_target = 0.0f;
 8005cf4:	4b9f      	ldr	r3, [pc, #636]	@ (8005f74 <process_joystick_control+0x2a0>)
 8005cf6:	f04f 0200 	mov.w	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]
		pris_velocity_target = 0.0f;
 8005cfc:	4b9e      	ldr	r3, [pc, #632]	@ (8005f78 <process_joystick_control+0x2a4>)
 8005cfe:	f04f 0200 	mov.w	r2, #0
 8005d02:	601a      	str	r2, [r3, #0]
		break;
 8005d04:	e12f      	b.n	8005f66 <process_joystick_control+0x292>

	case JOY_ACTIVE:
		prismatic_axis.position = prismatic_encoder.mm;
 8005d06:	4b9d      	ldr	r3, [pc, #628]	@ (8005f7c <process_joystick_control+0x2a8>)
 8005d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d0a:	4a9d      	ldr	r2, [pc, #628]	@ (8005f80 <process_joystick_control+0x2ac>)
 8005d0c:	6013      	str	r3, [r2, #0]
		revolute_axis.position = revolute_encoder.rads;
 8005d0e:	4b9d      	ldr	r3, [pc, #628]	@ (8005f84 <process_joystick_control+0x2b0>)
 8005d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d12:	4a9d      	ldr	r2, [pc, #628]	@ (8005f88 <process_joystick_control+0x2b4>)
 8005d14:	6013      	str	r3, [r2, #0]
		;

		// Check if exit is requested
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, 1);
 8005d16:	2201      	movs	r2, #1
 8005d18:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005d1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005d20:	f004 faba 	bl	800a298 <HAL_GPIO_WritePin>

		if (b4) {
 8005d24:	4b99      	ldr	r3, [pc, #612]	@ (8005f8c <process_joystick_control+0x2b8>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d017      	beq.n	8005d5c <process_joystick_control+0x88>
			// Immediately stop motors for safety
			pris_velocity_target = 0.0f;
 8005d2c:	4b92      	ldr	r3, [pc, #584]	@ (8005f78 <process_joystick_control+0x2a4>)
 8005d2e:	f04f 0200 	mov.w	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]
			rev_velocity_target = 0.0f;
 8005d34:	4b8f      	ldr	r3, [pc, #572]	@ (8005f74 <process_joystick_control+0x2a0>)
 8005d36:	f04f 0200 	mov.w	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]
			velocity_control(pris_velocity_target, rev_velocity_target);
 8005d3c:	4b8e      	ldr	r3, [pc, #568]	@ (8005f78 <process_joystick_control+0x2a4>)
 8005d3e:	edd3 7a00 	vldr	s15, [r3]
 8005d42:	4b8c      	ldr	r3, [pc, #560]	@ (8005f74 <process_joystick_control+0x2a0>)
 8005d44:	ed93 7a00 	vldr	s14, [r3]
 8005d48:	eef0 0a47 	vmov.f32	s1, s14
 8005d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8005d50:	f7ff fe52 	bl	80059f8 <velocity_control>

			joystick_state = JOY_EXIT_REQUESTED;
 8005d54:	4b86      	ldr	r3, [pc, #536]	@ (8005f70 <process_joystick_control+0x29c>)
 8005d56:	2202      	movs	r2, #2
 8005d58:	701a      	strb	r2, [r3, #0]
			break;
 8005d5a:	e104      	b.n	8005f66 <process_joystick_control+0x292>
		}

		// Process prismatic axis joystick control
		if (up_photo && joystick_x > JOYSTICK_THRESHOLD) {
 8005d5c:	4b8c      	ldr	r3, [pc, #560]	@ (8005f90 <process_joystick_control+0x2bc>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00e      	beq.n	8005d82 <process_joystick_control+0xae>
 8005d64:	4b8b      	ldr	r3, [pc, #556]	@ (8005f94 <process_joystick_control+0x2c0>)
 8005d66:	edd3 7a00 	vldr	s15, [r3]
 8005d6a:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8005f98 <process_joystick_control+0x2c4>
 8005d6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d76:	dd04      	ble.n	8005d82 <process_joystick_control+0xae>
			pris_velocity_target = 0.0f;
 8005d78:	4b7f      	ldr	r3, [pc, #508]	@ (8005f78 <process_joystick_control+0x2a4>)
 8005d7a:	f04f 0200 	mov.w	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	e055      	b.n	8005e2e <process_joystick_control+0x15a>
		} else if (low_photo && joystick_x < -JOYSTICK_THRESHOLD) {
 8005d82:	4b86      	ldr	r3, [pc, #536]	@ (8005f9c <process_joystick_control+0x2c8>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00e      	beq.n	8005da8 <process_joystick_control+0xd4>
 8005d8a:	4b82      	ldr	r3, [pc, #520]	@ (8005f94 <process_joystick_control+0x2c0>)
 8005d8c:	edd3 7a00 	vldr	s15, [r3]
 8005d90:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8005fa0 <process_joystick_control+0x2cc>
 8005d94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d9c:	d504      	bpl.n	8005da8 <process_joystick_control+0xd4>
			pris_velocity_target = 0.0f;
 8005d9e:	4b76      	ldr	r3, [pc, #472]	@ (8005f78 <process_joystick_control+0x2a4>)
 8005da0:	f04f 0200 	mov.w	r2, #0
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	e042      	b.n	8005e2e <process_joystick_control+0x15a>
		} else if (joystick_x > JOYSTICK_THRESHOLD) {
 8005da8:	4b7a      	ldr	r3, [pc, #488]	@ (8005f94 <process_joystick_control+0x2c0>)
 8005daa:	edd3 7a00 	vldr	s15, [r3]
 8005dae:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8005f98 <process_joystick_control+0x2c4>
 8005db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dba:	dd17      	ble.n	8005dec <process_joystick_control+0x118>
			pris_velocity_target = -ZGX45RGG_400RPM_Constant.sd_max / 2.0f;
 8005dbc:	4b79      	ldr	r3, [pc, #484]	@ (8005fa4 <process_joystick_control+0x2d0>)
 8005dbe:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8005dc2:	4614      	mov	r4, r2
 8005dc4:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8005dc8:	f04f 0200 	mov.w	r2, #0
 8005dcc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	4629      	mov	r1, r5
 8005dd4:	f7fa fd06 	bl	80007e4 <__aeabi_ddiv>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4610      	mov	r0, r2
 8005dde:	4619      	mov	r1, r3
 8005de0:	f7fa feb8 	bl	8000b54 <__aeabi_d2f>
 8005de4:	4603      	mov	r3, r0
 8005de6:	4a64      	ldr	r2, [pc, #400]	@ (8005f78 <process_joystick_control+0x2a4>)
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	e020      	b.n	8005e2e <process_joystick_control+0x15a>
		} else if (joystick_x < -JOYSTICK_THRESHOLD) {
 8005dec:	4b69      	ldr	r3, [pc, #420]	@ (8005f94 <process_joystick_control+0x2c0>)
 8005dee:	edd3 7a00 	vldr	s15, [r3]
 8005df2:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8005fa0 <process_joystick_control+0x2cc>
 8005df6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dfe:	d512      	bpl.n	8005e26 <process_joystick_control+0x152>
			pris_velocity_target = ZGX45RGG_400RPM_Constant.sd_max / 2.0f;
 8005e00:	4b68      	ldr	r3, [pc, #416]	@ (8005fa4 <process_joystick_control+0x2d0>)
 8005e02:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8005e06:	f04f 0200 	mov.w	r2, #0
 8005e0a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005e0e:	f7fa fce9 	bl	80007e4 <__aeabi_ddiv>
 8005e12:	4602      	mov	r2, r0
 8005e14:	460b      	mov	r3, r1
 8005e16:	4610      	mov	r0, r2
 8005e18:	4619      	mov	r1, r3
 8005e1a:	f7fa fe9b 	bl	8000b54 <__aeabi_d2f>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	4a55      	ldr	r2, [pc, #340]	@ (8005f78 <process_joystick_control+0x2a4>)
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	e003      	b.n	8005e2e <process_joystick_control+0x15a>
		} else {
			pris_velocity_target = 0.0f;
 8005e26:	4b54      	ldr	r3, [pc, #336]	@ (8005f78 <process_joystick_control+0x2a4>)
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]
		}

		// Process revolute axis joystick control
		float revolute_deg = UnitConverter_angle(&converter_system,
 8005e2e:	4b55      	ldr	r3, [pc, #340]	@ (8005f84 <process_joystick_control+0x2b0>)
 8005e30:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005e34:	220e      	movs	r2, #14
 8005e36:	210f      	movs	r1, #15
 8005e38:	eeb0 0a67 	vmov.f32	s0, s15
 8005e3c:	485a      	ldr	r0, [pc, #360]	@ (8005fa8 <process_joystick_control+0x2d4>)
 8005e3e:	f7fe fb6d 	bl	800451c <UnitConverter_angle>
 8005e42:	ed87 0a01 	vstr	s0, [r7, #4]
				revolute_encoder.rads, UNIT_RADIAN, UNIT_DEGREE);

		if ((revolute_deg > 175.0f && joystick_y > JOYSTICK_THRESHOLD)
 8005e46:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e4a:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8005fac <process_joystick_control+0x2d8>
 8005e4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e56:	dd09      	ble.n	8005e6c <process_joystick_control+0x198>
 8005e58:	4b55      	ldr	r3, [pc, #340]	@ (8005fb0 <process_joystick_control+0x2dc>)
 8005e5a:	edd3 7a00 	vldr	s15, [r3]
 8005e5e:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8005f98 <process_joystick_control+0x2c4>
 8005e62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e6a:	dc12      	bgt.n	8005e92 <process_joystick_control+0x1be>
				|| (revolute_deg < -175.0f && joystick_y < -JOYSTICK_THRESHOLD)) {
 8005e6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e70:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8005fb4 <process_joystick_control+0x2e0>
 8005e74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e7c:	d50e      	bpl.n	8005e9c <process_joystick_control+0x1c8>
 8005e7e:	4b4c      	ldr	r3, [pc, #304]	@ (8005fb0 <process_joystick_control+0x2dc>)
 8005e80:	edd3 7a00 	vldr	s15, [r3]
 8005e84:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8005fa0 <process_joystick_control+0x2cc>
 8005e88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e90:	d504      	bpl.n	8005e9c <process_joystick_control+0x1c8>
			rev_velocity_target = 0.0f;
 8005e92:	4b38      	ldr	r3, [pc, #224]	@ (8005f74 <process_joystick_control+0x2a0>)
 8005e94:	f04f 0200 	mov.w	r2, #0
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	e032      	b.n	8005f02 <process_joystick_control+0x22e>
		} else if (joystick_y > JOYSTICK_THRESHOLD) {
 8005e9c:	4b44      	ldr	r3, [pc, #272]	@ (8005fb0 <process_joystick_control+0x2dc>)
 8005e9e:	edd3 7a00 	vldr	s15, [r3]
 8005ea2:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8005f98 <process_joystick_control+0x2c4>
 8005ea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eae:	dd0a      	ble.n	8005ec6 <process_joystick_control+0x1f2>
			rev_velocity_target = ZGX45RGG_150RPM_Constant.qd_max;
 8005eb0:	4b41      	ldr	r3, [pc, #260]	@ (8005fb8 <process_joystick_control+0x2e4>)
 8005eb2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005eb6:	4610      	mov	r0, r2
 8005eb8:	4619      	mov	r1, r3
 8005eba:	f7fa fe4b 	bl	8000b54 <__aeabi_d2f>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	4a2c      	ldr	r2, [pc, #176]	@ (8005f74 <process_joystick_control+0x2a0>)
 8005ec2:	6013      	str	r3, [r2, #0]
 8005ec4:	e01d      	b.n	8005f02 <process_joystick_control+0x22e>
		} else if (joystick_y < -JOYSTICK_THRESHOLD) {
 8005ec6:	4b3a      	ldr	r3, [pc, #232]	@ (8005fb0 <process_joystick_control+0x2dc>)
 8005ec8:	edd3 7a00 	vldr	s15, [r3]
 8005ecc:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8005fa0 <process_joystick_control+0x2cc>
 8005ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ed8:	d50f      	bpl.n	8005efa <process_joystick_control+0x226>
			rev_velocity_target = -ZGX45RGG_150RPM_Constant.qd_max;
 8005eda:	4b37      	ldr	r3, [pc, #220]	@ (8005fb8 <process_joystick_control+0x2e4>)
 8005edc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	f7fa fe36 	bl	8000b54 <__aeabi_d2f>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	ee07 3a90 	vmov	s15, r3
 8005eee:	eef1 7a67 	vneg.f32	s15, s15
 8005ef2:	4b20      	ldr	r3, [pc, #128]	@ (8005f74 <process_joystick_control+0x2a0>)
 8005ef4:	edc3 7a00 	vstr	s15, [r3]
 8005ef8:	e003      	b.n	8005f02 <process_joystick_control+0x22e>
		} else {
			rev_velocity_target = 0.0f;
 8005efa:	4b1e      	ldr	r3, [pc, #120]	@ (8005f74 <process_joystick_control+0x2a0>)
 8005efc:	f04f 0200 	mov.w	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]
		}

		velocity_control(pris_velocity_target, rev_velocity_target);
 8005f02:	4b1d      	ldr	r3, [pc, #116]	@ (8005f78 <process_joystick_control+0x2a4>)
 8005f04:	edd3 7a00 	vldr	s15, [r3]
 8005f08:	4b1a      	ldr	r3, [pc, #104]	@ (8005f74 <process_joystick_control+0x2a0>)
 8005f0a:	ed93 7a00 	vldr	s14, [r3]
 8005f0e:	eef0 0a47 	vmov.f32	s1, s14
 8005f12:	eeb0 0a67 	vmov.f32	s0, s15
 8005f16:	f7ff fd6f 	bl	80059f8 <velocity_control>

		prismatic_axis.position = prismatic_encoder.mm;
 8005f1a:	4b18      	ldr	r3, [pc, #96]	@ (8005f7c <process_joystick_control+0x2a8>)
 8005f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f1e:	4a18      	ldr	r2, [pc, #96]	@ (8005f80 <process_joystick_control+0x2ac>)
 8005f20:	6013      	str	r3, [r2, #0]
		revolute_axis.position = revolute_encoder.rads;
 8005f22:	4b18      	ldr	r3, [pc, #96]	@ (8005f84 <process_joystick_control+0x2b0>)
 8005f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f26:	4a18      	ldr	r2, [pc, #96]	@ (8005f88 <process_joystick_control+0x2b4>)
 8005f28:	6013      	str	r3, [r2, #0]

		break;
 8005f2a:	e01c      	b.n	8005f66 <process_joystick_control+0x292>

	case JOY_EXIT_REQUESTED:
		velocity_control(0.0f, 0.0f);
 8005f2c:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8005fbc <process_joystick_control+0x2e8>
 8005f30:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8005fbc <process_joystick_control+0x2e8>
 8005f34:	f7ff fd60 	bl	80059f8 <velocity_control>

		// Reset joystick state and velocity targets
		pris_velocity_target = 0.0f;
 8005f38:	4b0f      	ldr	r3, [pc, #60]	@ (8005f78 <process_joystick_control+0x2a4>)
 8005f3a:	f04f 0200 	mov.w	r2, #0
 8005f3e:	601a      	str	r2, [r3, #0]
		rev_velocity_target = 0.0f;
 8005f40:	4b0c      	ldr	r3, [pc, #48]	@ (8005f74 <process_joystick_control+0x2a0>)
 8005f42:	f04f 0200 	mov.w	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]

		// Turn off indicator light
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, 0);
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005f4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005f52:	f004 f9a1 	bl	800a298 <HAL_GPIO_WritePin>

		// Return to normal control mode
		joystick_state = JOY_IDLE;
 8005f56:	4b06      	ldr	r3, [pc, #24]	@ (8005f70 <process_joystick_control+0x29c>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	701a      	strb	r2, [r3, #0]
		break;
 8005f5c:	e003      	b.n	8005f66 <process_joystick_control+0x292>

	default:
		// Unexpected state - reset to idle
		joystick_state = JOY_IDLE;
 8005f5e:	4b04      	ldr	r3, [pc, #16]	@ (8005f70 <process_joystick_control+0x29c>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	701a      	strb	r2, [r3, #0]
		break;
 8005f64:	bf00      	nop
	}
}
 8005f66:	bf00      	nop
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bdb0      	pop	{r4, r5, r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	2000032f 	.word	0x2000032f
 8005f74:	20000334 	.word	0x20000334
 8005f78:	20000330 	.word	0x20000330
 8005f7c:	200003e4 	.word	0x200003e4
 8005f80:	20000294 	.word	0x20000294
 8005f84:	20000440 	.word	0x20000440
 8005f88:	200002d8 	.word	0x200002d8
 8005f8c:	20001868 	.word	0x20001868
 8005f90:	2000184c 	.word	0x2000184c
 8005f94:	20001840 	.word	0x20001840
 8005f98:	42200000 	.word	0x42200000
 8005f9c:	20001850 	.word	0x20001850
 8005fa0:	c2200000 	.word	0xc2200000
 8005fa4:	20000060 	.word	0x20000060
 8005fa8:	200007b0 	.word	0x200007b0
 8005fac:	432f0000 	.word	0x432f0000
 8005fb0:	20001844 	.word	0x20001844
 8005fb4:	c32f0000 	.word	0xc32f0000
 8005fb8:	20000000 	.word	0x20000000
 8005fbc:	00000000 	.word	0x00000000

08005fc0 <manual_control_mode>:

/**
 * @brief Simplified manual control mode function to start joystick control
 */
void manual_control_mode(void) {
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	af00      	add	r7, sp, #0
	// Only enter joystick mode if not already in it
	if (joystick_state == JOY_IDLE) {
 8005fc4:	4b09      	ldr	r3, [pc, #36]	@ (8005fec <manual_control_mode+0x2c>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10c      	bne.n	8005fe6 <manual_control_mode+0x26>
		// Put pen down for drawing
		plotter_pen_down();
 8005fcc:	f000 fe32 	bl	8006c34 <plotter_pen_down>

		// Stop any active trajectories
		prismatic_axis.trajectory_active = false;
 8005fd0:	4b07      	ldr	r3, [pc, #28]	@ (8005ff0 <manual_control_mode+0x30>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		revolute_axis.trajectory_active = false;
 8005fd8:	4b06      	ldr	r3, [pc, #24]	@ (8005ff4 <manual_control_mode+0x34>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		// Set joystick state to active
		joystick_state = JOY_ACTIVE;
 8005fe0:	4b02      	ldr	r3, [pc, #8]	@ (8005fec <manual_control_mode+0x2c>)
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	701a      	strb	r2, [r3, #0]
	}
}
 8005fe6:	bf00      	nop
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	2000032f 	.word	0x2000032f
 8005ff0:	20000294 	.word	0x20000294
 8005ff4:	200002d8 	.word	0x200002d8

08005ff8 <HAL_GPIO_EXTI_Callback>:

/**
 * @brief GPIO external interrupt callback
 * @param GPIO_Pin Pin that triggered the interrupt
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	4603      	mov	r3, r0
 8006000:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == EMER_Pin) {
 8006002:	88fb      	ldrh	r3, [r7, #6]
 8006004:	2b10      	cmp	r3, #16
 8006006:	d105      	bne.n	8006014 <HAL_GPIO_EXTI_Callback+0x1c>
		rs_current_state = RS_EMERGENCY_TRIGGED;
 8006008:	4b09      	ldr	r3, [pc, #36]	@ (8006030 <HAL_GPIO_EXTI_Callback+0x38>)
 800600a:	2205      	movs	r2, #5
 800600c:	701a      	strb	r2, [r3, #0]
		emer_state = PUSHED;
 800600e:	4b09      	ldr	r3, [pc, #36]	@ (8006034 <HAL_GPIO_EXTI_Callback+0x3c>)
 8006010:	2200      	movs	r2, #0
 8006012:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == PROX_Pin) {
 8006014:	88fb      	ldrh	r3, [r7, #6]
 8006016:	2b40      	cmp	r3, #64	@ 0x40
 8006018:	d104      	bne.n	8006024 <HAL_GPIO_EXTI_Callback+0x2c>
		prox_count++;
 800601a:	4b07      	ldr	r3, [pc, #28]	@ (8006038 <HAL_GPIO_EXTI_Callback+0x40>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3301      	adds	r3, #1
 8006020:	4a05      	ldr	r2, [pc, #20]	@ (8006038 <HAL_GPIO_EXTI_Callback+0x40>)
 8006022:	6013      	str	r3, [r2, #0]
	}
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	200000f8 	.word	0x200000f8
 8006034:	200000fb 	.word	0x200000fb
 8006038:	20000340 	.word	0x20000340

0800603c <HAL_UART_RxCpltCallback>:

/**
 * @brief UART receive complete callback
 * @param huart UART handle
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
	// Handle UART reception if needed
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_TIM_PeriodElapsedCallback>:

/**
 * @brief Timer period elapsed callback - main control loop
 * @param htim Timer handle
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8006050:	b5b0      	push	{r4, r5, r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a9d      	ldr	r2, [pc, #628]	@ (80062d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800605c:	4293      	cmp	r3, r2
 800605e:	f040 8133 	bne.w	80062c8 <HAL_TIM_PeriodElapsedCallback+0x278>
		// Update sensor readings
		plotter_update_sensors();
 8006062:	f000 fd11 	bl	8006a88 <plotter_update_sensors>

		// Update encoder readings
		QEI_get_diff_count(&prismatic_encoder);
 8006066:	489b      	ldr	r0, [pc, #620]	@ (80062d4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8006068:	f7fd fbee 	bl	8003848 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 800606c:	4899      	ldr	r0, [pc, #612]	@ (80062d4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800606e:	f7fd fcd7 	bl	8003a20 <QEI_compute_data>
		QEI_get_diff_count(&revolute_encoder);
 8006072:	4899      	ldr	r0, [pc, #612]	@ (80062d8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8006074:	f7fd fbe8 	bl	8003848 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 8006078:	4897      	ldr	r0, [pc, #604]	@ (80062d8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800607a:	f7fd fcd1 	bl	8003a20 <QEI_compute_data>

		// Handle different system states
		if (homing_state != HOMING_IDLE) {
 800607e:	4b97      	ldr	r3, [pc, #604]	@ (80062dc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 8116 	beq.w	80062b4 <HAL_TIM_PeriodElapsedCallback+0x264>
			// Homing state machine
			switch (homing_state) {
 8006088:	4b94      	ldr	r3, [pc, #592]	@ (80062dc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	3b01      	subs	r3, #1
 800608e:	2b03      	cmp	r3, #3
 8006090:	f200 810c 	bhi.w	80062ac <HAL_TIM_PeriodElapsedCallback+0x25c>
 8006094:	a201      	add	r2, pc, #4	@ (adr r2, 800609c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8006096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609a:	bf00      	nop
 800609c:	080060ad 	.word	0x080060ad
 80060a0:	0800610d 	.word	0x0800610d
 80060a4:	0800616d 	.word	0x0800616d
 80060a8:	080061d7 	.word	0x080061d7
			case HOMING_PRIS_DOWN:
				// Move prismatic motor down to lower limit
				pris_velocity_target = ZGX45RGG_400RPM_Constant.sd_max / 3.0f;
 80060ac:	4b8c      	ldr	r3, [pc, #560]	@ (80062e0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80060ae:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80060b2:	f04f 0200 	mov.w	r2, #0
 80060b6:	4b8b      	ldr	r3, [pc, #556]	@ (80062e4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80060b8:	f7fa fb94 	bl	80007e4 <__aeabi_ddiv>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4610      	mov	r0, r2
 80060c2:	4619      	mov	r1, r3
 80060c4:	f7fa fd46 	bl	8000b54 <__aeabi_d2f>
 80060c8:	4603      	mov	r3, r0
 80060ca:	4a87      	ldr	r2, [pc, #540]	@ (80062e8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80060cc:	6013      	str	r3, [r2, #0]
				if (low_photo) {
 80060ce:	4b87      	ldr	r3, [pc, #540]	@ (80062ec <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d008      	beq.n	80060e8 <HAL_TIM_PeriodElapsedCallback+0x98>
					velocity_control(0, 0);
 80060d6:	eddf 0a86 	vldr	s1, [pc, #536]	@ 80062f0 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 80060da:	ed9f 0a85 	vldr	s0, [pc, #532]	@ 80062f0 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 80060de:	f7ff fc8b 	bl	80059f8 <velocity_control>
					homing_state = HOMING_REV_RESET;
 80060e2:	4b7e      	ldr	r3, [pc, #504]	@ (80062dc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80060e4:	2202      	movs	r2, #2
 80060e6:	701a      	strb	r2, [r3, #0]
				}
				velocity_control(pris_velocity_target, 0);
 80060e8:	4b7f      	ldr	r3, [pc, #508]	@ (80062e8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80060ea:	edd3 7a00 	vldr	s15, [r3]
 80060ee:	eddf 0a80 	vldr	s1, [pc, #512]	@ 80062f0 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 80060f2:	eeb0 0a67 	vmov.f32	s0, s15
 80060f6:	f7ff fc7f 	bl	80059f8 <velocity_control>

				prismatic_axis.position = prismatic_encoder.mm;
 80060fa:	4b76      	ldr	r3, [pc, #472]	@ (80062d4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80060fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060fe:	4a7d      	ldr	r2, [pc, #500]	@ (80062f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8006100:	6013      	str	r3, [r2, #0]
				revolute_axis.position = revolute_encoder.rads;
 8006102:	4b75      	ldr	r3, [pc, #468]	@ (80062d8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8006104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006106:	4a7c      	ldr	r2, [pc, #496]	@ (80062f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8006108:	6013      	str	r3, [r2, #0]
				break;
 800610a:	e0dd      	b.n	80062c8 <HAL_TIM_PeriodElapsedCallback+0x278>

			case HOMING_REV_RESET: {
				rev_velocity_target = ZGX45RGG_150RPM_Constant.qd_max / 4;
 800610c:	4b7b      	ldr	r3, [pc, #492]	@ (80062fc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800610e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8006112:	f04f 0200 	mov.w	r2, #0
 8006116:	4b7a      	ldr	r3, [pc, #488]	@ (8006300 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8006118:	f7fa fb64 	bl	80007e4 <__aeabi_ddiv>
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4610      	mov	r0, r2
 8006122:	4619      	mov	r1, r3
 8006124:	f7fa fd16 	bl	8000b54 <__aeabi_d2f>
 8006128:	4603      	mov	r3, r0
 800612a:	4a76      	ldr	r2, [pc, #472]	@ (8006304 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800612c:	6013      	str	r3, [r2, #0]
				if (prox_count >= 2) {
 800612e:	4b76      	ldr	r3, [pc, #472]	@ (8006308 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d908      	bls.n	8006148 <HAL_TIM_PeriodElapsedCallback+0xf8>
					velocity_control(0, 0);
 8006136:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 80062f0 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 800613a:	ed9f 0a6d 	vldr	s0, [pc, #436]	@ 80062f0 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 800613e:	f7ff fc5b 	bl	80059f8 <velocity_control>
					homing_state = HOMING_PRIS_UP;
 8006142:	4b66      	ldr	r3, [pc, #408]	@ (80062dc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8006144:	2203      	movs	r2, #3
 8006146:	701a      	strb	r2, [r3, #0]
				}
				velocity_control(0, rev_velocity_target);
 8006148:	4b6e      	ldr	r3, [pc, #440]	@ (8006304 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800614a:	edd3 7a00 	vldr	s15, [r3]
 800614e:	eef0 0a67 	vmov.f32	s1, s15
 8006152:	ed9f 0a67 	vldr	s0, [pc, #412]	@ 80062f0 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8006156:	f7ff fc4f 	bl	80059f8 <velocity_control>

				prismatic_axis.position = prismatic_encoder.mm;
 800615a:	4b5e      	ldr	r3, [pc, #376]	@ (80062d4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800615c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800615e:	4a65      	ldr	r2, [pc, #404]	@ (80062f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8006160:	6013      	str	r3, [r2, #0]
				revolute_axis.position = revolute_encoder.rads;
 8006162:	4b5d      	ldr	r3, [pc, #372]	@ (80062d8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8006164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006166:	4a64      	ldr	r2, [pc, #400]	@ (80062f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8006168:	6013      	str	r3, [r2, #0]
				break;
 800616a:	e0ad      	b.n	80062c8 <HAL_TIM_PeriodElapsedCallback+0x278>
			}

			case HOMING_PRIS_UP:
				// Move prismatic motor up to upper limit
				pris_velocity_target = -ZGX45RGG_400RPM_Constant.sd_max / 5.0f;
 800616c:	4b5c      	ldr	r3, [pc, #368]	@ (80062e0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800616e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8006172:	4614      	mov	r4, r2
 8006174:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8006178:	f04f 0200 	mov.w	r2, #0
 800617c:	4b63      	ldr	r3, [pc, #396]	@ (800630c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800617e:	4620      	mov	r0, r4
 8006180:	4629      	mov	r1, r5
 8006182:	f7fa fb2f 	bl	80007e4 <__aeabi_ddiv>
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	4610      	mov	r0, r2
 800618c:	4619      	mov	r1, r3
 800618e:	f7fa fce1 	bl	8000b54 <__aeabi_d2f>
 8006192:	4603      	mov	r3, r0
 8006194:	4a54      	ldr	r2, [pc, #336]	@ (80062e8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8006196:	6013      	str	r3, [r2, #0]

				if (up_photo) {
 8006198:	4b5d      	ldr	r3, [pc, #372]	@ (8006310 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d008      	beq.n	80061b2 <HAL_TIM_PeriodElapsedCallback+0x162>
					velocity_control(0, 0);
 80061a0:	eddf 0a53 	vldr	s1, [pc, #332]	@ 80062f0 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 80061a4:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 80062f0 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 80061a8:	f7ff fc26 	bl	80059f8 <velocity_control>
					homing_state = HOMING_COMPLETE;
 80061ac:	4b4b      	ldr	r3, [pc, #300]	@ (80062dc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80061ae:	2204      	movs	r2, #4
 80061b0:	701a      	strb	r2, [r3, #0]
				}
				velocity_control(pris_velocity_target, 0);
 80061b2:	4b4d      	ldr	r3, [pc, #308]	@ (80062e8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80061b4:	edd3 7a00 	vldr	s15, [r3]
 80061b8:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 80062f0 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 80061bc:	eeb0 0a67 	vmov.f32	s0, s15
 80061c0:	f7ff fc1a 	bl	80059f8 <velocity_control>

				prismatic_axis.position = prismatic_encoder.mm;
 80061c4:	4b43      	ldr	r3, [pc, #268]	@ (80062d4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80061c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061c8:	4a4a      	ldr	r2, [pc, #296]	@ (80062f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80061ca:	6013      	str	r3, [r2, #0]
				revolute_axis.position = revolute_encoder.rads;
 80061cc:	4b42      	ldr	r3, [pc, #264]	@ (80062d8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80061ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d0:	4a49      	ldr	r2, [pc, #292]	@ (80062f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80061d2:	6013      	str	r3, [r2, #0]
				break;
 80061d4:	e078      	b.n	80062c8 <HAL_TIM_PeriodElapsedCallback+0x278>

			case HOMING_COMPLETE:
				velocity_control(0, 0);
 80061d6:	eddf 0a46 	vldr	s1, [pc, #280]	@ 80062f0 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 80061da:	ed9f 0a45 	vldr	s0, [pc, #276]	@ 80062f0 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 80061de:	f7ff fc0b 	bl	80059f8 <velocity_control>

				plotter_reset();
 80061e2:	f000 fc19 	bl	8006a18 <plotter_reset>

				prox_count = 0;
 80061e6:	4b48      	ldr	r3, [pc, #288]	@ (8006308 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	601a      	str	r2, [r3, #0]

				prismatic_encoder.diff_counts = 0;
 80061ec:	4b39      	ldr	r3, [pc, #228]	@ (80062d4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	625a      	str	r2, [r3, #36]	@ 0x24
				prismatic_encoder.rpm = 0;
 80061f2:	4b38      	ldr	r3, [pc, #224]	@ (80062d4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	631a      	str	r2, [r3, #48]	@ 0x30
				prismatic_encoder.pulses = 0;
 80061fa:	4b36      	ldr	r3, [pc, #216]	@ (80062d4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	639a      	str	r2, [r3, #56]	@ 0x38
				prismatic_encoder.revs = 0;
 8006200:	4b34      	ldr	r3, [pc, #208]	@ (80062d4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8006202:	f04f 0200 	mov.w	r2, #0
 8006206:	63da      	str	r2, [r3, #60]	@ 0x3c
				prismatic_encoder.rads = 0;
 8006208:	4b32      	ldr	r3, [pc, #200]	@ (80062d4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800620a:	f04f 0200 	mov.w	r2, #0
 800620e:	641a      	str	r2, [r3, #64]	@ 0x40
				prismatic_encoder.mm = 0;
 8006210:	4b30      	ldr	r3, [pc, #192]	@ (80062d4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8006212:	f04f 0200 	mov.w	r2, #0
 8006216:	649a      	str	r2, [r3, #72]	@ 0x48

				revolute_encoder.diff_counts = 0;
 8006218:	4b2f      	ldr	r3, [pc, #188]	@ (80062d8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800621a:	2200      	movs	r2, #0
 800621c:	625a      	str	r2, [r3, #36]	@ 0x24
				revolute_encoder.rpm = 0;
 800621e:	4b2e      	ldr	r3, [pc, #184]	@ (80062d8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8006220:	f04f 0200 	mov.w	r2, #0
 8006224:	631a      	str	r2, [r3, #48]	@ 0x30
				revolute_encoder.pulses = 0;
 8006226:	4b2c      	ldr	r3, [pc, #176]	@ (80062d8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8006228:	2200      	movs	r2, #0
 800622a:	639a      	str	r2, [r3, #56]	@ 0x38
				revolute_encoder.revs = 0;
 800622c:	4b2a      	ldr	r3, [pc, #168]	@ (80062d8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800622e:	f04f 0200 	mov.w	r2, #0
 8006232:	63da      	str	r2, [r3, #60]	@ 0x3c
				revolute_encoder.rads = 0;
 8006234:	4b28      	ldr	r3, [pc, #160]	@ (80062d8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8006236:	f04f 0200 	mov.w	r2, #0
 800623a:	641a      	str	r2, [r3, #64]	@ 0x40
				revolute_encoder.mm = 0;
 800623c:	4b26      	ldr	r3, [pc, #152]	@ (80062d8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800623e:	f04f 0200 	mov.w	r2, #0
 8006242:	649a      	str	r2, [r3, #72]	@ 0x48

				// Reset ALL control variables
				revolute_axis.pos_error = 0.0f;
 8006244:	4b2c      	ldr	r3, [pc, #176]	@ (80062f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8006246:	f04f 0200 	mov.w	r2, #0
 800624a:	615a      	str	r2, [r3, #20]
				revolute_axis.vel_error = 0.0f;
 800624c:	4b2a      	ldr	r3, [pc, #168]	@ (80062f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800624e:	f04f 0200 	mov.w	r2, #0
 8006252:	619a      	str	r2, [r3, #24]
				prismatic_axis.pos_error = 0.0f;
 8006254:	4b27      	ldr	r3, [pc, #156]	@ (80062f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8006256:	f04f 0200 	mov.w	r2, #0
 800625a:	615a      	str	r2, [r3, #20]
				prismatic_axis.vel_error = 0.0f;
 800625c:	4b25      	ldr	r3, [pc, #148]	@ (80062f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800625e:	f04f 0200 	mov.w	r2, #0
 8006262:	619a      	str	r2, [r3, #24]

				revolute_axis.kalman_velocity = 0.0f;
 8006264:	4b24      	ldr	r3, [pc, #144]	@ (80062f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8006266:	f04f 0200 	mov.w	r2, #0
 800626a:	61da      	str	r2, [r3, #28]
				prismatic_axis.kalman_velocity = 0.0f;
 800626c:	4b21      	ldr	r3, [pc, #132]	@ (80062f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800626e:	f04f 0200 	mov.w	r2, #0
 8006272:	61da      	str	r2, [r3, #28]

				// Reset trajectories and state
				prismatic_axis.trajectory_active = false;
 8006274:	4b1f      	ldr	r3, [pc, #124]	@ (80062f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				revolute_axis.trajectory_active = false;
 800627c:	4b1e      	ldr	r3, [pc, #120]	@ (80062f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

				prismatic_axis.position = prismatic_encoder.mm;
 8006284:	4b13      	ldr	r3, [pc, #76]	@ (80062d4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8006286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006288:	4a1a      	ldr	r2, [pc, #104]	@ (80062f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800628a:	6013      	str	r3, [r2, #0]
				revolute_axis.position = revolute_encoder.rads;
 800628c:	4b12      	ldr	r3, [pc, #72]	@ (80062d8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800628e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006290:	4a19      	ldr	r2, [pc, #100]	@ (80062f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8006292:	6013      	str	r3, [r2, #0]

				pris_velocity_target = 0.0f;
 8006294:	4b14      	ldr	r3, [pc, #80]	@ (80062e8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8006296:	f04f 0200 	mov.w	r2, #0
 800629a:	601a      	str	r2, [r3, #0]
				rev_velocity_target = 0.0f;
 800629c:	4b19      	ldr	r3, [pc, #100]	@ (8006304 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800629e:	f04f 0200 	mov.w	r2, #0
 80062a2:	601a      	str	r2, [r3, #0]

				homing_state = HOMING_IDLE;
 80062a4:	4b0d      	ldr	r3, [pc, #52]	@ (80062dc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	701a      	strb	r2, [r3, #0]
				break;
 80062aa:	e00d      	b.n	80062c8 <HAL_TIM_PeriodElapsedCallback+0x278>

			default:
				// Unexpected state - reset to idle
				homing_state = HOMING_IDLE;
 80062ac:	4b0b      	ldr	r3, [pc, #44]	@ (80062dc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	701a      	strb	r2, [r3, #0]
				break;
 80062b2:	e009      	b.n	80062c8 <HAL_TIM_PeriodElapsedCallback+0x278>
			}
		} else if (joystick_state != JOY_IDLE) {
 80062b4:	4b17      	ldr	r3, [pc, #92]	@ (8006314 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <HAL_TIM_PeriodElapsedCallback+0x272>
			// Process joystick control if active
			process_joystick_control();
 80062bc:	f7ff fd0a 	bl	8005cd4 <process_joystick_control>
		} else {
			// Normal operation - update control loops
			update_control_loops();
		}
	}
}
 80062c0:	e002      	b.n	80062c8 <HAL_TIM_PeriodElapsedCallback+0x278>
			update_control_loops();
 80062c2:	f7fe fe5b 	bl	8004f7c <update_control_loops>
}
 80062c6:	e7ff      	b.n	80062c8 <HAL_TIM_PeriodElapsedCallback+0x278>
 80062c8:	bf00      	nop
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bdb0      	pop	{r4, r5, r7, pc}
 80062d0:	2000193c 	.word	0x2000193c
 80062d4:	200003e4 	.word	0x200003e4
 80062d8:	20000440 	.word	0x20000440
 80062dc:	2000032c 	.word	0x2000032c
 80062e0:	20000060 	.word	0x20000060
 80062e4:	40080000 	.word	0x40080000
 80062e8:	20000330 	.word	0x20000330
 80062ec:	20001850 	.word	0x20001850
 80062f0:	00000000 	.word	0x00000000
 80062f4:	20000294 	.word	0x20000294
 80062f8:	200002d8 	.word	0x200002d8
 80062fc:	20000000 	.word	0x20000000
 8006300:	40100000 	.word	0x40100000
 8006304:	20000334 	.word	0x20000334
 8006308:	20000340 	.word	0x20000340
 800630c:	40140000 	.word	0x40140000
 8006310:	2000184c 	.word	0x2000184c
 8006314:	2000032f 	.word	0x2000032f

08006318 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8006318:	b480      	push	{r7}
 800631a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800631c:	b672      	cpsid	i
}
 800631e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8006320:	bf00      	nop
 8006322:	e7fd      	b.n	8006320 <Error_Handler+0x8>
 8006324:	0000      	movs	r0, r0
	...

08006328 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int prox, emer, up_photo, low_photo, up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 8006328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800632c:	ed2d 8b02 	vpush	{d8}
 8006330:	b083      	sub	sp, #12
 8006332:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = 500;
 8006334:	49c8      	ldr	r1, [pc, #800]	@ (8006658 <plotter_begin+0x330>)
 8006336:	f04f 0200 	mov.w	r2, #0
 800633a:	4bc8      	ldr	r3, [pc, #800]	@ (800665c <plotter_begin+0x334>)
 800633c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 2;
 8006340:	4bc5      	ldr	r3, [pc, #788]	@ (8006658 <plotter_begin+0x330>)
 8006342:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	f7f9 ff6b 	bl	8000224 <__adddf3>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	49c1      	ldr	r1, [pc, #772]	@ (8006658 <plotter_begin+0x330>)
 8006354:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max * (24.0 /36.0) * 0.5;
 8006358:	4bc1      	ldr	r3, [pc, #772]	@ (8006660 <plotter_begin+0x338>)
 800635a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800635e:	a3ba      	add	r3, pc, #744	@ (adr r3, 8006648 <plotter_begin+0x320>)
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	f7fa f914 	bl	8000590 <__aeabi_dmul>
 8006368:	4602      	mov	r2, r0
 800636a:	460b      	mov	r3, r1
 800636c:	4610      	mov	r0, r2
 800636e:	4619      	mov	r1, r3
 8006370:	f04f 0200 	mov.w	r2, #0
 8006374:	4bbb      	ldr	r3, [pc, #748]	@ (8006664 <plotter_begin+0x33c>)
 8006376:	f7fa f90b 	bl	8000590 <__aeabi_dmul>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	49b8      	ldr	r1, [pc, #736]	@ (8006660 <plotter_begin+0x338>)
 8006380:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	ZGX45RGG_150RPM_Constant.qdd_max = ZGX45RGG_150RPM_Constant.qd_max * 0.4;
 8006384:	4bb6      	ldr	r3, [pc, #728]	@ (8006660 <plotter_begin+0x338>)
 8006386:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800638a:	a3b1      	add	r3, pc, #708	@ (adr r3, 8006650 <plotter_begin+0x328>)
 800638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006390:	f7fa f8fe 	bl	8000590 <__aeabi_dmul>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	49b1      	ldr	r1, [pc, #708]	@ (8006660 <plotter_begin+0x338>)
 800639a:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 800639e:	2100      	movs	r1, #0
 80063a0:	48b1      	ldr	r0, [pc, #708]	@ (8006668 <plotter_begin+0x340>)
 80063a2:	f000 fc57 	bl	8006c54 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 80063a6:	eddf 2ab1 	vldr	s5, [pc, #708]	@ 800666c <plotter_begin+0x344>
 80063aa:	ed9f 2ab1 	vldr	s4, [pc, #708]	@ 8006670 <plotter_begin+0x348>
 80063ae:	eddf 1ab1 	vldr	s3, [pc, #708]	@ 8006674 <plotter_begin+0x34c>
 80063b2:	ed9f 1ab0 	vldr	s2, [pc, #704]	@ 8006674 <plotter_begin+0x34c>
 80063b6:	eddf 0ab0 	vldr	s1, [pc, #704]	@ 8006678 <plotter_begin+0x350>
 80063ba:	ed9f 0aac 	vldr	s0, [pc, #688]	@ 800666c <plotter_begin+0x344>
 80063be:	48aa      	ldr	r0, [pc, #680]	@ (8006668 <plotter_begin+0x340>)
 80063c0:	f000 fca6 	bl	8006d10 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 80063c4:	2102      	movs	r1, #2
 80063c6:	48ad      	ldr	r0, [pc, #692]	@ (800667c <plotter_begin+0x354>)
 80063c8:	f000 fc44 	bl	8006c54 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 80063cc:	ed9f 3aa7 	vldr	s6, [pc, #668]	@ 800666c <plotter_begin+0x344>
 80063d0:	eddf 2aa7 	vldr	s5, [pc, #668]	@ 8006670 <plotter_begin+0x348>
 80063d4:	ed9f 2aa7 	vldr	s4, [pc, #668]	@ 8006674 <plotter_begin+0x34c>
 80063d8:	eddf 1aa6 	vldr	s3, [pc, #664]	@ 8006674 <plotter_begin+0x34c>
 80063dc:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80063e0:	eddf 0aa5 	vldr	s1, [pc, #660]	@ 8006678 <plotter_begin+0x350>
 80063e4:	ed9f 0aa1 	vldr	s0, [pc, #644]	@ 800666c <plotter_begin+0x344>
 80063e8:	48a4      	ldr	r0, [pc, #656]	@ (800667c <plotter_begin+0x354>)
 80063ea:	f000 fcbc 	bl	8006d66 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 80063ee:	2100      	movs	r1, #0
 80063f0:	48a3      	ldr	r0, [pc, #652]	@ (8006680 <plotter_begin+0x358>)
 80063f2:	f000 fc2f 	bl	8006c54 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 80063f6:	eddf 2aa3 	vldr	s5, [pc, #652]	@ 8006684 <plotter_begin+0x35c>
 80063fa:	ed9f 2aa3 	vldr	s4, [pc, #652]	@ 8006688 <plotter_begin+0x360>
 80063fe:	eddf 1a9d 	vldr	s3, [pc, #628]	@ 8006674 <plotter_begin+0x34c>
 8006402:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 8006674 <plotter_begin+0x34c>
 8006406:	eddf 0a9c 	vldr	s1, [pc, #624]	@ 8006678 <plotter_begin+0x350>
 800640a:	ed9f 0a9e 	vldr	s0, [pc, #632]	@ 8006684 <plotter_begin+0x35c>
 800640e:	489c      	ldr	r0, [pc, #624]	@ (8006680 <plotter_begin+0x358>)
 8006410:	f000 fc7e 	bl	8006d10 <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 8006414:	2102      	movs	r1, #2
 8006416:	489d      	ldr	r0, [pc, #628]	@ (800668c <plotter_begin+0x364>)
 8006418:	f000 fc1c 	bl	8006c54 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 800641c:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 8006420:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 8006424:	ed9f 2a93 	vldr	s4, [pc, #588]	@ 8006674 <plotter_begin+0x34c>
 8006428:	eddf 1a92 	vldr	s3, [pc, #584]	@ 8006674 <plotter_begin+0x34c>
 800642c:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8006430:	eddf 0a91 	vldr	s1, [pc, #580]	@ 8006678 <plotter_begin+0x350>
 8006434:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8006438:	4894      	ldr	r0, [pc, #592]	@ (800668c <plotter_begin+0x364>)
 800643a:	f000 fc94 	bl	8006d66 <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 800643e:	2100      	movs	r1, #0
 8006440:	4893      	ldr	r0, [pc, #588]	@ (8006690 <plotter_begin+0x368>)
 8006442:	f000 fc07 	bl	8006c54 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8006446:	4b84      	ldr	r3, [pc, #528]	@ (8006658 <plotter_begin+0x330>)
 8006448:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800644c:	4610      	mov	r0, r2
 800644e:	4619      	mov	r1, r3
 8006450:	f7fa fb80 	bl	8000b54 <__aeabi_d2f>
 8006454:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 8006456:	4b80      	ldr	r3, [pc, #512]	@ (8006658 <plotter_begin+0x330>)
 8006458:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800645c:	4610      	mov	r0, r2
 800645e:	4619      	mov	r1, r3
 8006460:	f7fa fb78 	bl	8000b54 <__aeabi_d2f>
 8006464:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8006466:	ee07 3a90 	vmov	s15, r3
 800646a:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 800646e:	4b7a      	ldr	r3, [pc, #488]	@ (8006658 <plotter_begin+0x330>)
 8006470:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8006474:	4610      	mov	r0, r2
 8006476:	4619      	mov	r1, r3
 8006478:	f7fa fb6c 	bl	8000b54 <__aeabi_d2f>
 800647c:	4603      	mov	r3, r0
 800647e:	ee02 3a90 	vmov	s5, r3
 8006482:	eeb0 2a48 	vmov.f32	s4, s16
 8006486:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 8006674 <plotter_begin+0x34c>
 800648a:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 8006674 <plotter_begin+0x34c>
 800648e:	eddf 0a7a 	vldr	s1, [pc, #488]	@ 8006678 <plotter_begin+0x350>
 8006492:	ee00 4a10 	vmov	s0, r4
 8006496:	487e      	ldr	r0, [pc, #504]	@ (8006690 <plotter_begin+0x368>)
 8006498:	f000 fc3a 	bl	8006d10 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 800649c:	2102      	movs	r1, #2
 800649e:	487d      	ldr	r0, [pc, #500]	@ (8006694 <plotter_begin+0x36c>)
 80064a0:	f000 fbd8 	bl	8006c54 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80064a4:	4b6c      	ldr	r3, [pc, #432]	@ (8006658 <plotter_begin+0x330>)
 80064a6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80064aa:	4610      	mov	r0, r2
 80064ac:	4619      	mov	r1, r3
 80064ae:	f7fa fb51 	bl	8000b54 <__aeabi_d2f>
 80064b2:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 80064b4:	4b68      	ldr	r3, [pc, #416]	@ (8006658 <plotter_begin+0x330>)
 80064b6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80064ba:	4610      	mov	r0, r2
 80064bc:	4619      	mov	r1, r3
 80064be:	f7fa fb49 	bl	8000b54 <__aeabi_d2f>
 80064c2:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80064c4:	ee07 3a90 	vmov	s15, r3
 80064c8:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 80064cc:	4b62      	ldr	r3, [pc, #392]	@ (8006658 <plotter_begin+0x330>)
 80064ce:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80064d2:	4610      	mov	r0, r2
 80064d4:	4619      	mov	r1, r3
 80064d6:	f7fa fb3d 	bl	8000b54 <__aeabi_d2f>
 80064da:	4603      	mov	r3, r0
 80064dc:	ee03 3a10 	vmov	s6, r3
 80064e0:	eef0 2a48 	vmov.f32	s5, s16
 80064e4:	ed9f 2a63 	vldr	s4, [pc, #396]	@ 8006674 <plotter_begin+0x34c>
 80064e8:	eddf 1a62 	vldr	s3, [pc, #392]	@ 8006674 <plotter_begin+0x34c>
 80064ec:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80064f0:	eddf 0a61 	vldr	s1, [pc, #388]	@ 8006678 <plotter_begin+0x350>
 80064f4:	ee00 4a10 	vmov	s0, r4
 80064f8:	4866      	ldr	r0, [pc, #408]	@ (8006694 <plotter_begin+0x36c>)
 80064fa:	f000 fc34 	bl	8006d66 <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 80064fe:	2100      	movs	r1, #0
 8006500:	4865      	ldr	r0, [pc, #404]	@ (8006698 <plotter_begin+0x370>)
 8006502:	f000 fba7 	bl	8006c54 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8006506:	4b56      	ldr	r3, [pc, #344]	@ (8006660 <plotter_begin+0x338>)
 8006508:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800650c:	4610      	mov	r0, r2
 800650e:	4619      	mov	r1, r3
 8006510:	f7fa fb20 	bl	8000b54 <__aeabi_d2f>
 8006514:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 8006516:	4b52      	ldr	r3, [pc, #328]	@ (8006660 <plotter_begin+0x338>)
 8006518:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800651c:	4610      	mov	r0, r2
 800651e:	4619      	mov	r1, r3
 8006520:	f7fa fb18 	bl	8000b54 <__aeabi_d2f>
 8006524:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8006526:	ee07 3a90 	vmov	s15, r3
 800652a:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 800652e:	4b4c      	ldr	r3, [pc, #304]	@ (8006660 <plotter_begin+0x338>)
 8006530:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8006534:	4610      	mov	r0, r2
 8006536:	4619      	mov	r1, r3
 8006538:	f7fa fb0c 	bl	8000b54 <__aeabi_d2f>
 800653c:	4603      	mov	r3, r0
 800653e:	ee02 3a90 	vmov	s5, r3
 8006542:	eeb0 2a48 	vmov.f32	s4, s16
 8006546:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 8006674 <plotter_begin+0x34c>
 800654a:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 8006674 <plotter_begin+0x34c>
 800654e:	eddf 0a4a 	vldr	s1, [pc, #296]	@ 8006678 <plotter_begin+0x350>
 8006552:	ee00 4a10 	vmov	s0, r4
 8006556:	4850      	ldr	r0, [pc, #320]	@ (8006698 <plotter_begin+0x370>)
 8006558:	f000 fbda 	bl	8006d10 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 800655c:	2102      	movs	r1, #2
 800655e:	484f      	ldr	r0, [pc, #316]	@ (800669c <plotter_begin+0x374>)
 8006560:	f000 fb78 	bl	8006c54 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8006564:	4b3e      	ldr	r3, [pc, #248]	@ (8006660 <plotter_begin+0x338>)
 8006566:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800656a:	4610      	mov	r0, r2
 800656c:	4619      	mov	r1, r3
 800656e:	f7fa faf1 	bl	8000b54 <__aeabi_d2f>
 8006572:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8006574:	4b3a      	ldr	r3, [pc, #232]	@ (8006660 <plotter_begin+0x338>)
 8006576:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800657a:	4610      	mov	r0, r2
 800657c:	4619      	mov	r1, r3
 800657e:	f7fa fae9 	bl	8000b54 <__aeabi_d2f>
 8006582:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8006584:	ee07 3a90 	vmov	s15, r3
 8006588:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 800658c:	4b34      	ldr	r3, [pc, #208]	@ (8006660 <plotter_begin+0x338>)
 800658e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8006592:	4610      	mov	r0, r2
 8006594:	4619      	mov	r1, r3
 8006596:	f7fa fadd 	bl	8000b54 <__aeabi_d2f>
 800659a:	4603      	mov	r3, r0
 800659c:	ee03 3a10 	vmov	s6, r3
 80065a0:	eef0 2a48 	vmov.f32	s5, s16
 80065a4:	ed9f 2a33 	vldr	s4, [pc, #204]	@ 8006674 <plotter_begin+0x34c>
 80065a8:	eddf 1a32 	vldr	s3, [pc, #200]	@ 8006674 <plotter_begin+0x34c>
 80065ac:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80065b0:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8006678 <plotter_begin+0x350>
 80065b4:	ee00 4a10 	vmov	s0, r4
 80065b8:	4838      	ldr	r0, [pc, #224]	@ (800669c <plotter_begin+0x374>)
 80065ba:	f000 fbd4 	bl	8006d66 <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 80065be:	4838      	ldr	r0, [pc, #224]	@ (80066a0 <plotter_begin+0x378>)
 80065c0:	f7fd ff16 	bl	80043f0 <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 80065c4:	4b37      	ldr	r3, [pc, #220]	@ (80066a4 <plotter_begin+0x37c>)
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7f9 ff89 	bl	80004e0 <__aeabi_f2d>
 80065ce:	4602      	mov	r2, r0
 80065d0:	460b      	mov	r3, r1
 80065d2:	f7f9 fe27 	bl	8000224 <__adddf3>
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	4610      	mov	r0, r2
 80065dc:	4619      	mov	r1, r3
 80065de:	f04f 0200 	mov.w	r2, #0
 80065e2:	4b31      	ldr	r3, [pc, #196]	@ (80066a8 <plotter_begin+0x380>)
 80065e4:	f7f9 ffd4 	bl	8000590 <__aeabi_dmul>
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 80065ec:	4610      	mov	r0, r2
 80065ee:	4619      	mov	r1, r3
 80065f0:	f7fa fab0 	bl	8000b54 <__aeabi_d2f>
 80065f4:	4603      	mov	r3, r0
 80065f6:	ee00 3a90 	vmov	s1, r3
 80065fa:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80065fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006602:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006606:	4929      	ldr	r1, [pc, #164]	@ (80066ac <plotter_begin+0x384>)
 8006608:	4829      	ldr	r0, [pc, #164]	@ (80066b0 <plotter_begin+0x388>)
 800660a:	f7fd f8ab 	bl	8003764 <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 800660e:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8006674 <plotter_begin+0x34c>
 8006612:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006616:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800661a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800661e:	4925      	ldr	r1, [pc, #148]	@ (80066b4 <plotter_begin+0x38c>)
 8006620:	4825      	ldr	r0, [pc, #148]	@ (80066b8 <plotter_begin+0x390>)
 8006622:	f7fd f89f 	bl	8003764 <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8006626:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006630:	2204      	movs	r2, #4
 8006632:	4922      	ldr	r1, [pc, #136]	@ (80066bc <plotter_begin+0x394>)
 8006634:	4822      	ldr	r0, [pc, #136]	@ (80066c0 <plotter_begin+0x398>)
 8006636:	f7fa fe81 	bl	800133c <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 800663a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	4b20      	ldr	r3, [pc, #128]	@ (80066c4 <plotter_begin+0x39c>)
 8006642:	2200      	movs	r2, #0
 8006644:	e040      	b.n	80066c8 <plotter_begin+0x3a0>
 8006646:	bf00      	nop
 8006648:	55555555 	.word	0x55555555
 800664c:	3fe55555 	.word	0x3fe55555
 8006650:	9999999a 	.word	0x9999999a
 8006654:	3fd99999 	.word	0x3fd99999
 8006658:	20000060 	.word	0x20000060
 800665c:	407f4000 	.word	0x407f4000
 8006660:	20000000 	.word	0x20000000
 8006664:	3fe00000 	.word	0x3fe00000
 8006668:	20000590 	.word	0x20000590
 800666c:	477fff00 	.word	0x477fff00
 8006670:	c77fff00 	.word	0xc77fff00
 8006674:	00000000 	.word	0x00000000
 8006678:	3dcccccd 	.word	0x3dcccccd
 800667c:	200005d4 	.word	0x200005d4
 8006680:	20000618 	.word	0x20000618
 8006684:	43480000 	.word	0x43480000
 8006688:	c3480000 	.word	0xc3480000
 800668c:	2000065c 	.word	0x2000065c
 8006690:	200006a0 	.word	0x200006a0
 8006694:	200006e4 	.word	0x200006e4
 8006698:	20000728 	.word	0x20000728
 800669c:	2000076c 	.word	0x2000076c
 80066a0:	200007b0 	.word	0x200007b0
 80066a4:	200000c0 	.word	0x200000c0
 80066a8:	408f4000 	.word	0x408f4000
 80066ac:	20001ba0 	.word	0x20001ba0
 80066b0:	200003e4 	.word	0x200003e4
 80066b4:	20001ad4 	.word	0x20001ad4
 80066b8:	20000440 	.word	0x20000440
 80066bc:	20001c6c 	.word	0x20001c6c
 80066c0:	2000034c 	.word	0x2000034c
 80066c4:	48000800 	.word	0x48000800
 80066c8:	49a4      	ldr	r1, [pc, #656]	@ (800695c <plotter_begin+0x634>)
 80066ca:	48a5      	ldr	r0, [pc, #660]	@ (8006960 <plotter_begin+0x638>)
 80066cc:	f7fa fe36 	bl	800133c <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 80066d0:	220c      	movs	r2, #12
 80066d2:	49a4      	ldr	r1, [pc, #656]	@ (8006964 <plotter_begin+0x63c>)
 80066d4:	48a4      	ldr	r0, [pc, #656]	@ (8006968 <plotter_begin+0x640>)
 80066d6:	f7fc fe17 	bl	8003308 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 80066da:	eddf 0aa4 	vldr	s1, [pc, #656]	@ 800696c <plotter_begin+0x644>
 80066de:	ed9f 0aa4 	vldr	s0, [pc, #656]	@ 8006970 <plotter_begin+0x648>
 80066e2:	48a4      	ldr	r0, [pc, #656]	@ (8006974 <plotter_begin+0x64c>)
 80066e4:	f7fa fe4e 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 80066e8:	eddf 0aa0 	vldr	s1, [pc, #640]	@ 800696c <plotter_begin+0x644>
 80066ec:	ed9f 0aa0 	vldr	s0, [pc, #640]	@ 8006970 <plotter_begin+0x648>
 80066f0:	489b      	ldr	r0, [pc, #620]	@ (8006960 <plotter_begin+0x638>)
 80066f2:	f7fa fe47 	bl	8001384 <MDXX_set_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
			ZGX45RGG_400RPM_Constant.sd_max);
 80066f6:	4ba0      	ldr	r3, [pc, #640]	@ (8006978 <plotter_begin+0x650>)
 80066f8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
 80066fc:	4610      	mov	r0, r2
 80066fe:	4619      	mov	r1, r3
 8006700:	f7fa fa28 	bl	8000b54 <__aeabi_d2f>
 8006704:	4603      	mov	r3, r0
 8006706:	ee01 3a90 	vmov	s3, r3
 800670a:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 800697c <plotter_begin+0x654>
 800670e:	eddf 0a9c 	vldr	s1, [pc, #624]	@ 8006980 <plotter_begin+0x658>
 8006712:	ed9f 0a9c 	vldr	s0, [pc, #624]	@ 8006984 <plotter_begin+0x65c>
 8006716:	489c      	ldr	r0, [pc, #624]	@ (8006988 <plotter_begin+0x660>)
 8006718:	f7fa fd4b 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 800671c:	4b96      	ldr	r3, [pc, #600]	@ (8006978 <plotter_begin+0x650>)
 800671e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
 8006722:	4610      	mov	r0, r2
 8006724:	4619      	mov	r1, r3
 8006726:	f7fa fa15 	bl	8000b54 <__aeabi_d2f>
 800672a:	4603      	mov	r3, r0
 800672c:	ee01 3a90 	vmov	s3, r3
 8006730:	ed9f 1a8e 	vldr	s2, [pc, #568]	@ 800696c <plotter_begin+0x644>
 8006734:	eddf 0a95 	vldr	s1, [pc, #596]	@ 800698c <plotter_begin+0x664>
 8006738:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 8006990 <plotter_begin+0x668>
 800673c:	4895      	ldr	r0, [pc, #596]	@ (8006994 <plotter_begin+0x66c>)
 800673e:	f7fa fd38 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 100, 5e-2, 250,
			ZGX45RGG_150RPM_Constant.qd_max);
 8006742:	4b95      	ldr	r3, [pc, #596]	@ (8006998 <plotter_begin+0x670>)
 8006744:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 100, 5e-2, 250,
 8006748:	4610      	mov	r0, r2
 800674a:	4619      	mov	r1, r3
 800674c:	f7fa fa02 	bl	8000b54 <__aeabi_d2f>
 8006750:	4603      	mov	r3, r0
 8006752:	ee01 3a90 	vmov	s3, r3
 8006756:	ed9f 1a91 	vldr	s2, [pc, #580]	@ 800699c <plotter_begin+0x674>
 800675a:	eddf 0a91 	vldr	s1, [pc, #580]	@ 80069a0 <plotter_begin+0x678>
 800675e:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 80069a4 <plotter_begin+0x67c>
 8006762:	4891      	ldr	r0, [pc, #580]	@ (80069a8 <plotter_begin+0x680>)
 8006764:	f7fa fd25 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 7500, 200, 0,
			ZGX45RGG_150RPM_Constant.U_max);
 8006768:	4b8b      	ldr	r3, [pc, #556]	@ (8006998 <plotter_begin+0x670>)
 800676a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 7500, 200, 0,
 800676e:	4610      	mov	r0, r2
 8006770:	4619      	mov	r1, r3
 8006772:	f7fa f9ef 	bl	8000b54 <__aeabi_d2f>
 8006776:	4603      	mov	r3, r0
 8006778:	ee01 3a90 	vmov	s3, r3
 800677c:	ed9f 1a7b 	vldr	s2, [pc, #492]	@ 800696c <plotter_begin+0x644>
 8006780:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 80069ac <plotter_begin+0x684>
 8006784:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 80069b0 <plotter_begin+0x688>
 8006788:	488a      	ldr	r0, [pc, #552]	@ (80069b4 <plotter_begin+0x68c>)
 800678a:	f7fa fd12 	bl	80011b2 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 800678e:	4982      	ldr	r1, [pc, #520]	@ (8006998 <plotter_begin+0x670>)
 8006790:	4889      	ldr	r0, [pc, #548]	@ (80069b8 <plotter_begin+0x690>)
 8006792:	f7fa fed1 	bl	8001538 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8006796:	4978      	ldr	r1, [pc, #480]	@ (8006978 <plotter_begin+0x650>)
 8006798:	4888      	ldr	r0, [pc, #544]	@ (80069bc <plotter_begin+0x694>)
 800679a:	f7fb f84b 	bl	8001834 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 800679e:	4a88      	ldr	r2, [pc, #544]	@ (80069c0 <plotter_begin+0x698>)
 80067a0:	497d      	ldr	r1, [pc, #500]	@ (8006998 <plotter_begin+0x670>)
 80067a2:	4888      	ldr	r0, [pc, #544]	@ (80069c4 <plotter_begin+0x69c>)
 80067a4:	f7fa ff57 	bl	8001656 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 80067a8:	4a85      	ldr	r2, [pc, #532]	@ (80069c0 <plotter_begin+0x698>)
 80067aa:	4973      	ldr	r1, [pc, #460]	@ (8006978 <plotter_begin+0x650>)
 80067ac:	4886      	ldr	r0, [pc, #536]	@ (80069c8 <plotter_begin+0x6a0>)
 80067ae:	f7fb f8d0 	bl	8001952 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 80067b2:	2302      	movs	r3, #2
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	eddf 0a85 	vldr	s1, [pc, #532]	@ 80069cc <plotter_begin+0x6a4>
 80067ba:	ed9f 0a85 	vldr	s0, [pc, #532]	@ 80069d0 <plotter_begin+0x6a8>
 80067be:	2364      	movs	r3, #100	@ 0x64
 80067c0:	4a84      	ldr	r2, [pc, #528]	@ (80069d4 <plotter_begin+0x6ac>)
 80067c2:	4985      	ldr	r1, [pc, #532]	@ (80069d8 <plotter_begin+0x6b0>)
 80067c4:	4885      	ldr	r0, [pc, #532]	@ (80069dc <plotter_begin+0x6b4>)
 80067c6:	f7fa fbab 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 80067ca:	2105      	movs	r1, #5
 80067cc:	ed9f 0a84 	vldr	s0, [pc, #528]	@ 80069e0 <plotter_begin+0x6b8>
 80067d0:	4882      	ldr	r0, [pc, #520]	@ (80069dc <plotter_begin+0x6b4>)
 80067d2:	f7fa fc57 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 80067d6:	4881      	ldr	r0, [pc, #516]	@ (80069dc <plotter_begin+0x6b4>)
 80067d8:	f7fa fbfa 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80067dc:	eddf 0a81 	vldr	s1, [pc, #516]	@ 80069e4 <plotter_begin+0x6bc>
 80067e0:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80067e4:	211f      	movs	r1, #31
 80067e6:	4880      	ldr	r0, [pc, #512]	@ (80069e8 <plotter_begin+0x6c0>)
 80067e8:	f7fb f97a 	bl	8001ae0 <FIR_init>
	FIR_init(&prismatic_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80067ec:	eddf 0a7d 	vldr	s1, [pc, #500]	@ 80069e4 <plotter_begin+0x6bc>
 80067f0:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80067f4:	211f      	movs	r1, #31
 80067f6:	487d      	ldr	r0, [pc, #500]	@ (80069ec <plotter_begin+0x6c4>)
 80067f8:	f7fb f972 	bl	8001ae0 <FIR_init>
	FIR_init(&revolute_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80067fc:	eddf 0a79 	vldr	s1, [pc, #484]	@ 80069e4 <plotter_begin+0x6bc>
 8006800:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8006804:	211f      	movs	r1, #31
 8006806:	487a      	ldr	r0, [pc, #488]	@ (80069f0 <plotter_begin+0x6c8>)
 8006808:	f7fb f96a 	bl	8001ae0 <FIR_init>
	FIR_init(&revolute_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800680c:	eddf 0a75 	vldr	s1, [pc, #468]	@ 80069e4 <plotter_begin+0x6bc>
 8006810:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8006814:	211f      	movs	r1, #31
 8006816:	4877      	ldr	r0, [pc, #476]	@ (80069f4 <plotter_begin+0x6cc>)
 8006818:	f7fb f962 	bl	8001ae0 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 800681c:	4b56      	ldr	r3, [pc, #344]	@ (8006978 <plotter_begin+0x650>)
 800681e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006822:	4610      	mov	r0, r2
 8006824:	4619      	mov	r1, r3
 8006826:	f7fa f995 	bl	8000b54 <__aeabi_d2f>
 800682a:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 800682c:	4b52      	ldr	r3, [pc, #328]	@ (8006978 <plotter_begin+0x650>)
 800682e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8006832:	4610      	mov	r0, r2
 8006834:	4619      	mov	r1, r3
 8006836:	f7fa f98d 	bl	8000b54 <__aeabi_d2f>
 800683a:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 800683c:	4b4e      	ldr	r3, [pc, #312]	@ (8006978 <plotter_begin+0x650>)
 800683e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8006842:	4610      	mov	r0, r2
 8006844:	4619      	mov	r1, r3
 8006846:	f7fa f985 	bl	8000b54 <__aeabi_d2f>
 800684a:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 800684c:	4b4a      	ldr	r3, [pc, #296]	@ (8006978 <plotter_begin+0x650>)
 800684e:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8006852:	4610      	mov	r0, r2
 8006854:	4619      	mov	r1, r3
 8006856:	f7fa f97d 	bl	8000b54 <__aeabi_d2f>
 800685a:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 800685c:	4b46      	ldr	r3, [pc, #280]	@ (8006978 <plotter_begin+0x650>)
 800685e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8006862:	4610      	mov	r0, r2
 8006864:	4619      	mov	r1, r3
 8006866:	f7fa f975 	bl	8000b54 <__aeabi_d2f>
 800686a:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 800686c:	4b42      	ldr	r3, [pc, #264]	@ (8006978 <plotter_begin+0x650>)
 800686e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8006872:	4610      	mov	r0, r2
 8006874:	4619      	mov	r1, r3
 8006876:	f7fa f96d 	bl	8000b54 <__aeabi_d2f>
 800687a:	4603      	mov	r3, r0
 800687c:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 8006880:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8006884:	ee03 3a10 	vmov	s6, r3
 8006888:	ee02 9a90 	vmov	s5, r9
 800688c:	ee02 8a10 	vmov	s4, r8
 8006890:	ee01 6a90 	vmov	s3, r6
 8006894:	ee01 5a10 	vmov	s2, r5
 8006898:	ee00 4a90 	vmov	s1, r4
 800689c:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 80069f8 <plotter_begin+0x6d0>
 80068a0:	4856      	ldr	r0, [pc, #344]	@ (80069fc <plotter_begin+0x6d4>)
 80068a2:	f7fb fb1d 	bl	8001ee0 <MotorKalman_Init>

	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 80068a6:	4b3c      	ldr	r3, [pc, #240]	@ (8006998 <plotter_begin+0x670>)
 80068a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068ac:	4610      	mov	r0, r2
 80068ae:	4619      	mov	r1, r3
 80068b0:	f7fa f950 	bl	8000b54 <__aeabi_d2f>
 80068b4:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.B, ZGX45RGG_150RPM_Constant.Kt,
 80068b6:	4b38      	ldr	r3, [pc, #224]	@ (8006998 <plotter_begin+0x670>)
 80068b8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 80068bc:	4610      	mov	r0, r2
 80068be:	4619      	mov	r1, r3
 80068c0:	f7fa f948 	bl	8000b54 <__aeabi_d2f>
 80068c4:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.B, ZGX45RGG_150RPM_Constant.Kt,
 80068c6:	4b34      	ldr	r3, [pc, #208]	@ (8006998 <plotter_begin+0x670>)
 80068c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 80068cc:	4610      	mov	r0, r2
 80068ce:	4619      	mov	r1, r3
 80068d0:	f7fa f940 	bl	8000b54 <__aeabi_d2f>
 80068d4:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.Ke, ZGX45RGG_150RPM_Constant.R,
 80068d6:	4b30      	ldr	r3, [pc, #192]	@ (8006998 <plotter_begin+0x670>)
 80068d8:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 80068dc:	4610      	mov	r0, r2
 80068de:	4619      	mov	r1, r3
 80068e0:	f7fa f938 	bl	8000b54 <__aeabi_d2f>
 80068e4:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.Ke, ZGX45RGG_150RPM_Constant.R,
 80068e6:	4b2c      	ldr	r3, [pc, #176]	@ (8006998 <plotter_begin+0x670>)
 80068e8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 80068ec:	4610      	mov	r0, r2
 80068ee:	4619      	mov	r1, r3
 80068f0:	f7fa f930 	bl	8000b54 <__aeabi_d2f>
 80068f4:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.L, 1.0, 1.0);
 80068f6:	4b28      	ldr	r3, [pc, #160]	@ (8006998 <plotter_begin+0x670>)
 80068f8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 80068fc:	4610      	mov	r0, r2
 80068fe:	4619      	mov	r1, r3
 8006900:	f7fa f928 	bl	8000b54 <__aeabi_d2f>
 8006904:	4603      	mov	r3, r0
 8006906:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 800690a:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 800690e:	ee03 3a10 	vmov	s6, r3
 8006912:	ee02 9a90 	vmov	s5, r9
 8006916:	ee02 8a10 	vmov	s4, r8
 800691a:	ee01 6a90 	vmov	s3, r6
 800691e:	ee01 5a10 	vmov	s2, r5
 8006922:	ee00 4a90 	vmov	s1, r4
 8006926:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 80069f8 <plotter_begin+0x6d0>
 800692a:	4835      	ldr	r0, [pc, #212]	@ (8006a00 <plotter_begin+0x6d8>)
 800692c:	f7fb fad8 	bl	8001ee0 <MotorKalman_Init>

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 8006930:	23c8      	movs	r3, #200	@ 0xc8
 8006932:	9301      	str	r3, [sp, #4]
 8006934:	2315      	movs	r3, #21
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	4b32      	ldr	r3, [pc, #200]	@ (8006a04 <plotter_begin+0x6dc>)
 800693a:	4a33      	ldr	r2, [pc, #204]	@ (8006a08 <plotter_begin+0x6e0>)
 800693c:	4933      	ldr	r1, [pc, #204]	@ (8006a0c <plotter_begin+0x6e4>)
 800693e:	4834      	ldr	r0, [pc, #208]	@ (8006a10 <plotter_begin+0x6e8>)
 8006940:	f7fb fa66 	bl	8001e10 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8006944:	4833      	ldr	r0, [pc, #204]	@ (8006a14 <plotter_begin+0x6ec>)
 8006946:	f004 fddb 	bl	800b500 <HAL_TIM_Base_Start_IT>

	plotter_reset();
 800694a:	f000 f865 	bl	8006a18 <plotter_reset>
}
 800694e:	bf00      	nop
 8006950:	3704      	adds	r7, #4
 8006952:	46bd      	mov	sp, r7
 8006954:	ecbd 8b02 	vpop	{d8}
 8006958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800695c:	20001c6c 	.word	0x20001c6c
 8006960:	20000398 	.word	0x20000398
 8006964:	20001870 	.word	0x20001870
 8006968:	20000554 	.word	0x20000554
 800696c:	00000000 	.word	0x00000000
 8006970:	44fa0000 	.word	0x44fa0000
 8006974:	2000034c 	.word	0x2000034c
 8006978:	20000060 	.word	0x20000060
 800697c:	42f00000 	.word	0x42f00000
 8006980:	2edbe6ff 	.word	0x2edbe6ff
 8006984:	42960000 	.word	0x42960000
 8006988:	2000049c 	.word	0x2000049c
 800698c:	3727c5ac 	.word	0x3727c5ac
 8006990:	43160000 	.word	0x43160000
 8006994:	200004c4 	.word	0x200004c4
 8006998:	20000000 	.word	0x20000000
 800699c:	437a0000 	.word	0x437a0000
 80069a0:	3d4ccccd 	.word	0x3d4ccccd
 80069a4:	42c80000 	.word	0x42c80000
 80069a8:	200004ec 	.word	0x200004ec
 80069ac:	43480000 	.word	0x43480000
 80069b0:	45ea6000 	.word	0x45ea6000
 80069b4:	20000514 	.word	0x20000514
 80069b8:	20000548 	.word	0x20000548
 80069bc:	2000053c 	.word	0x2000053c
 80069c0:	200000c0 	.word	0x200000c0
 80069c4:	2000054c 	.word	0x2000054c
 80069c8:	20000540 	.word	0x20000540
 80069cc:	457ff000 	.word	0x457ff000
 80069d0:	40533333 	.word	0x40533333
 80069d4:	20001110 	.word	0x20001110
 80069d8:	20000178 	.word	0x20000178
 80069dc:	2000056c 	.word	0x2000056c
 80069e0:	45000000 	.word	0x45000000
 80069e4:	447a0000 	.word	0x447a0000
 80069e8:	20000a14 	.word	0x20000a14
 80069ec:	20000a08 	.word	0x20000a08
 80069f0:	20000a2c 	.word	0x20000a2c
 80069f4:	20000a20 	.word	0x20000a20
 80069f8:	3a83126f 	.word	0x3a83126f
 80069fc:	20000a38 	.word	0x20000a38
 8006a00:	20000da4 	.word	0x20000da4
 8006a04:	200016b0 	.word	0x200016b0
 8006a08:	20001d38 	.word	0x20001d38
 8006a0c:	20001ed0 	.word	0x20001ed0
 8006a10:	200011d8 	.word	0x200011d8
 8006a14:	2000193c 	.word	0x2000193c

08006a18 <plotter_reset>:

void plotter_reset() {
 8006a18:	b480      	push	{r7}
 8006a1a:	af00      	add	r7, sp, #0
    prismatic_encoder.diff_counts = 0;
 8006a1c:	4b18      	ldr	r3, [pc, #96]	@ (8006a80 <plotter_reset+0x68>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	625a      	str	r2, [r3, #36]	@ 0x24
    prismatic_encoder.rpm = 0;
 8006a22:	4b17      	ldr	r3, [pc, #92]	@ (8006a80 <plotter_reset+0x68>)
 8006a24:	f04f 0200 	mov.w	r2, #0
 8006a28:	631a      	str	r2, [r3, #48]	@ 0x30
    prismatic_encoder.pulses = 0;
 8006a2a:	4b15      	ldr	r3, [pc, #84]	@ (8006a80 <plotter_reset+0x68>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	639a      	str	r2, [r3, #56]	@ 0x38
    prismatic_encoder.revs = 0;
 8006a30:	4b13      	ldr	r3, [pc, #76]	@ (8006a80 <plotter_reset+0x68>)
 8006a32:	f04f 0200 	mov.w	r2, #0
 8006a36:	63da      	str	r2, [r3, #60]	@ 0x3c
    prismatic_encoder.rads = 0;
 8006a38:	4b11      	ldr	r3, [pc, #68]	@ (8006a80 <plotter_reset+0x68>)
 8006a3a:	f04f 0200 	mov.w	r2, #0
 8006a3e:	641a      	str	r2, [r3, #64]	@ 0x40
    prismatic_encoder.mm = 0;
 8006a40:	4b0f      	ldr	r3, [pc, #60]	@ (8006a80 <plotter_reset+0x68>)
 8006a42:	f04f 0200 	mov.w	r2, #0
 8006a46:	649a      	str	r2, [r3, #72]	@ 0x48

    revolute_encoder.diff_counts = 0;
 8006a48:	4b0e      	ldr	r3, [pc, #56]	@ (8006a84 <plotter_reset+0x6c>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	625a      	str	r2, [r3, #36]	@ 0x24
    revolute_encoder.rpm = 0;
 8006a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a84 <plotter_reset+0x6c>)
 8006a50:	f04f 0200 	mov.w	r2, #0
 8006a54:	631a      	str	r2, [r3, #48]	@ 0x30
    revolute_encoder.pulses = 0;
 8006a56:	4b0b      	ldr	r3, [pc, #44]	@ (8006a84 <plotter_reset+0x6c>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	639a      	str	r2, [r3, #56]	@ 0x38
    revolute_encoder.revs = 0;
 8006a5c:	4b09      	ldr	r3, [pc, #36]	@ (8006a84 <plotter_reset+0x6c>)
 8006a5e:	f04f 0200 	mov.w	r2, #0
 8006a62:	63da      	str	r2, [r3, #60]	@ 0x3c
    revolute_encoder.rads = 0;
 8006a64:	4b07      	ldr	r3, [pc, #28]	@ (8006a84 <plotter_reset+0x6c>)
 8006a66:	f04f 0200 	mov.w	r2, #0
 8006a6a:	641a      	str	r2, [r3, #64]	@ 0x40
    revolute_encoder.mm = 0;
 8006a6c:	4b05      	ldr	r3, [pc, #20]	@ (8006a84 <plotter_reset+0x6c>)
 8006a6e:	f04f 0200 	mov.w	r2, #0
 8006a72:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8006a74:	bf00      	nop
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	200003e4 	.word	0x200003e4
 8006a84:	20000440 	.word	0x20000440

08006a88 <plotter_update_sensors>:

void plotter_update_sensors() {
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50,
 8006a8c:	eddf 0a4e 	vldr	s1, [pc, #312]	@ 8006bc8 <plotter_update_sensors+0x140>
 8006a90:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 8006bcc <plotter_update_sensors+0x144>
 8006a94:	2106      	movs	r1, #6
 8006a96:	484e      	ldr	r0, [pc, #312]	@ (8006bd0 <plotter_update_sensors+0x148>)
 8006a98:	f7fa fb1e 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8006a9c:	eef0 7a40 	vmov.f32	s15, s0
 8006aa0:	4b4c      	ldr	r3, [pc, #304]	@ (8006bd4 <plotter_update_sensors+0x14c>)
 8006aa2:	edc3 7a00 	vstr	s15, [r3]
			50);
	joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50,
 8006aa6:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8006bc8 <plotter_update_sensors+0x140>
 8006aaa:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8006bcc <plotter_update_sensors+0x144>
 8006aae:	2107      	movs	r1, #7
 8006ab0:	4847      	ldr	r0, [pc, #284]	@ (8006bd0 <plotter_update_sensors+0x148>)
 8006ab2:	f7fa fb11 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8006ab6:	eef0 7a40 	vmov.f32	s15, s0
 8006aba:	4b47      	ldr	r3, [pc, #284]	@ (8006bd8 <plotter_update_sensors+0x150>)
 8006abc:	edc3 7a00 	vstr	s15, [r3]
			50);

	b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 8006ac0:	2180      	movs	r1, #128	@ 0x80
 8006ac2:	4846      	ldr	r0, [pc, #280]	@ (8006bdc <plotter_update_sensors+0x154>)
 8006ac4:	f003 fbd0 	bl	800a268 <HAL_GPIO_ReadPin>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	bf0c      	ite	eq
 8006ace:	2301      	moveq	r3, #1
 8006ad0:	2300      	movne	r3, #0
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	4b42      	ldr	r3, [pc, #264]	@ (8006be0 <plotter_update_sensors+0x158>)
 8006ad8:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8006ada:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006ade:	4841      	ldr	r0, [pc, #260]	@ (8006be4 <plotter_update_sensors+0x15c>)
 8006ae0:	f003 fbc2 	bl	800a268 <HAL_GPIO_ReadPin>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	bf0c      	ite	eq
 8006aea:	2301      	moveq	r3, #1
 8006aec:	2300      	movne	r3, #0
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	461a      	mov	r2, r3
 8006af2:	4b3d      	ldr	r3, [pc, #244]	@ (8006be8 <plotter_update_sensors+0x160>)
 8006af4:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 8006af6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006afa:	483a      	ldr	r0, [pc, #232]	@ (8006be4 <plotter_update_sensors+0x15c>)
 8006afc:	f003 fbb4 	bl	800a268 <HAL_GPIO_ReadPin>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	bf0c      	ite	eq
 8006b06:	2301      	moveq	r3, #1
 8006b08:	2300      	movne	r3, #0
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	4b37      	ldr	r3, [pc, #220]	@ (8006bec <plotter_update_sensors+0x164>)
 8006b10:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 8006b12:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006b16:	4833      	ldr	r0, [pc, #204]	@ (8006be4 <plotter_update_sensors+0x15c>)
 8006b18:	f003 fba6 	bl	800a268 <HAL_GPIO_ReadPin>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	bf0c      	ite	eq
 8006b22:	2301      	moveq	r3, #1
 8006b24:	2300      	movne	r3, #0
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	461a      	mov	r2, r3
 8006b2a:	4b31      	ldr	r3, [pc, #196]	@ (8006bf0 <plotter_update_sensors+0x168>)
 8006b2c:	601a      	str	r2, [r3, #0]

	up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 8006b2e:	2101      	movs	r1, #1
 8006b30:	482a      	ldr	r0, [pc, #168]	@ (8006bdc <plotter_update_sensors+0x154>)
 8006b32:	f003 fb99 	bl	800a268 <HAL_GPIO_ReadPin>
 8006b36:	4603      	mov	r3, r0
 8006b38:	461a      	mov	r2, r3
 8006b3a:	4b2e      	ldr	r3, [pc, #184]	@ (8006bf4 <plotter_update_sensors+0x16c>)
 8006b3c:	601a      	str	r2, [r3, #0]
	low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 8006b3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006b42:	4826      	ldr	r0, [pc, #152]	@ (8006bdc <plotter_update_sensors+0x154>)
 8006b44:	f003 fb90 	bl	800a268 <HAL_GPIO_ReadPin>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8006bf8 <plotter_update_sensors+0x170>)
 8006b4e:	601a      	str	r2, [r3, #0]
	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 8006b50:	2104      	movs	r1, #4
 8006b52:	4822      	ldr	r0, [pc, #136]	@ (8006bdc <plotter_update_sensors+0x154>)
 8006b54:	f003 fb88 	bl	800a268 <HAL_GPIO_ReadPin>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	4b27      	ldr	r3, [pc, #156]	@ (8006bfc <plotter_update_sensors+0x174>)
 8006b5e:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 8006b60:	2102      	movs	r1, #2
 8006b62:	481e      	ldr	r0, [pc, #120]	@ (8006bdc <plotter_update_sensors+0x154>)
 8006b64:	f003 fb80 	bl	800a268 <HAL_GPIO_ReadPin>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	4b24      	ldr	r3, [pc, #144]	@ (8006c00 <plotter_update_sensors+0x178>)
 8006b6e:	601a      	str	r2, [r3, #0]

	if (up_lim) {
 8006b70:	4b22      	ldr	r3, [pc, #136]	@ (8006bfc <plotter_update_sensors+0x174>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d003      	beq.n	8006b80 <plotter_update_sensors+0xf8>
		servo_state = PEN_UP;
 8006b78:	4b22      	ldr	r3, [pc, #136]	@ (8006c04 <plotter_update_sensors+0x17c>)
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	701a      	strb	r2, [r3, #0]
 8006b7e:	e00a      	b.n	8006b96 <plotter_update_sensors+0x10e>
	} else if (low_lim) {
 8006b80:	4b1f      	ldr	r3, [pc, #124]	@ (8006c00 <plotter_update_sensors+0x178>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d003      	beq.n	8006b90 <plotter_update_sensors+0x108>
		servo_state = PEN_DOWN;
 8006b88:	4b1e      	ldr	r3, [pc, #120]	@ (8006c04 <plotter_update_sensors+0x17c>)
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	701a      	strb	r2, [r3, #0]
 8006b8e:	e002      	b.n	8006b96 <plotter_update_sensors+0x10e>
	} else {
		servo_state = PEN_IDLE;
 8006b90:	4b1c      	ldr	r3, [pc, #112]	@ (8006c04 <plotter_update_sensors+0x17c>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	701a      	strb	r2, [r3, #0]
	}

	if (up_photo) {
 8006b96:	4b17      	ldr	r3, [pc, #92]	@ (8006bf4 <plotter_update_sensors+0x16c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <plotter_update_sensors+0x11e>
		prismatic_state = PP_AT_TOP_END_POSITION;
 8006b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8006c08 <plotter_update_sensors+0x180>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	701a      	strb	r2, [r3, #0]
 8006ba4:	e006      	b.n	8006bb4 <plotter_update_sensors+0x12c>
	} else if (low_photo) {
 8006ba6:	4b14      	ldr	r3, [pc, #80]	@ (8006bf8 <plotter_update_sensors+0x170>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d002      	beq.n	8006bb4 <plotter_update_sensors+0x12c>
		prismatic_state = PP_AT_BOTTOM_END_POSITION;
 8006bae:	4b16      	ldr	r3, [pc, #88]	@ (8006c08 <plotter_update_sensors+0x180>)
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	701a      	strb	r2, [r3, #0]
	}

	if (prox) {
 8006bb4:	4b15      	ldr	r3, [pc, #84]	@ (8006c0c <plotter_update_sensors+0x184>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d002      	beq.n	8006bc2 <plotter_update_sensors+0x13a>
		revolute_state = RP_AT_HOME_POSITION;
 8006bbc:	4b14      	ldr	r3, [pc, #80]	@ (8006c10 <plotter_update_sensors+0x188>)
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	701a      	strb	r2, [r3, #0]
	}
}
 8006bc2:	bf00      	nop
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	42480000 	.word	0x42480000
 8006bcc:	c2480000 	.word	0xc2480000
 8006bd0:	2000056c 	.word	0x2000056c
 8006bd4:	20001840 	.word	0x20001840
 8006bd8:	20001844 	.word	0x20001844
 8006bdc:	48000400 	.word	0x48000400
 8006be0:	2000185c 	.word	0x2000185c
 8006be4:	48000800 	.word	0x48000800
 8006be8:	20001860 	.word	0x20001860
 8006bec:	20001864 	.word	0x20001864
 8006bf0:	20001868 	.word	0x20001868
 8006bf4:	2000184c 	.word	0x2000184c
 8006bf8:	20001850 	.word	0x20001850
 8006bfc:	20001854 	.word	0x20001854
 8006c00:	20001858 	.word	0x20001858
 8006c04:	20000348 	.word	0x20000348
 8006c08:	200000f9 	.word	0x200000f9
 8006c0c:	20001848 	.word	0x20001848
 8006c10:	200000fa 	.word	0x200000fa

08006c14 <plotter_pen_up>:

void plotter_pen_up() {
 8006c14:	b580      	push	{r7, lr}
 8006c16:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8006c18:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8006c1c:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8006c2c <plotter_pen_up+0x18>
 8006c20:	4803      	ldr	r0, [pc, #12]	@ (8006c30 <plotter_pen_up+0x1c>)
 8006c22:	f7fc fb93 	bl	800334c <PWM_write_duty>
}
 8006c26:	bf00      	nop
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	42480000 	.word	0x42480000
 8006c30:	20000554 	.word	0x20000554

08006c34 <plotter_pen_down>:

void plotter_pen_down() {
 8006c34:	b580      	push	{r7, lr}
 8006c36:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 12);
 8006c38:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8006c3c:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8006c4c <plotter_pen_down+0x18>
 8006c40:	4803      	ldr	r0, [pc, #12]	@ (8006c50 <plotter_pen_down+0x1c>)
 8006c42:	f7fc fb83 	bl	800334c <PWM_write_duty>
}
 8006c46:	bf00      	nop
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	42480000 	.word	0x42480000
 8006c50:	20000554 	.word	0x20000554

08006c54 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	78fa      	ldrb	r2, [r7, #3]
 8006c64:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006c6c:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006c74:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f04f 0200 	mov.w	r2, #0
 8006c7c:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f04f 0200 	mov.w	r2, #0
 8006c84:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f04f 0200 	mov.w	r2, #0
 8006c8c:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f04f 0200 	mov.w	r2, #0
 8006c94:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a1b      	ldr	r2, [pc, #108]	@ (8006d08 <SIGNAL_init+0xb4>)
 8006c9a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006ca2:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8006ca4:	78fb      	ldrb	r3, [r7, #3]
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	d828      	bhi.n	8006cfc <SIGNAL_init+0xa8>
 8006caa:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb0 <SIGNAL_init+0x5c>)
 8006cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb0:	08006cfb 	.word	0x08006cfb
 8006cb4:	08006cc1 	.word	0x08006cc1
 8006cb8:	08006cdf 	.word	0x08006cdf
 8006cbc:	08006ce9 	.word	0x08006ce9
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006ccc:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a0e      	ldr	r2, [pc, #56]	@ (8006d0c <SIGNAL_init+0xb8>)
 8006cd2:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006cda:	621a      	str	r2, [r3, #32]
            break;
 8006cdc:	e00e      	b.n	8006cfc <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8006ce4:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8006ce6:	e009      	b.n	8006cfc <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f04f 0200 	mov.w	r2, #0
 8006cee:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006cf6:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8006cf8:	e000      	b.n	8006cfc <SIGNAL_init+0xa8>
            break;
 8006cfa:	bf00      	nop
    }
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	bf800000 	.word	0xbf800000
 8006d0c:	41200000 	.word	0x41200000

08006d10 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8006d10:	b480      	push	{r7}
 8006d12:	b089      	sub	sp, #36	@ 0x24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	61f8      	str	r0, [r7, #28]
 8006d18:	ed87 0a06 	vstr	s0, [r7, #24]
 8006d1c:	edc7 0a05 	vstr	s1, [r7, #20]
 8006d20:	ed87 1a04 	vstr	s2, [r7, #16]
 8006d24:	edc7 1a03 	vstr	s3, [r7, #12]
 8006d28:	ed87 2a02 	vstr	s4, [r7, #8]
 8006d2c:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	2200      	movs	r2, #0
 8006d34:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006d5a:	bf00      	nop
 8006d5c:	3724      	adds	r7, #36	@ 0x24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8006d66:	b480      	push	{r7}
 8006d68:	b089      	sub	sp, #36	@ 0x24
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	61f8      	str	r0, [r7, #28]
 8006d6e:	ed87 0a06 	vstr	s0, [r7, #24]
 8006d72:	edc7 0a05 	vstr	s1, [r7, #20]
 8006d76:	ed87 1a04 	vstr	s2, [r7, #16]
 8006d7a:	edc7 1a03 	vstr	s3, [r7, #12]
 8006d7e:	ed87 2a02 	vstr	s4, [r7, #8]
 8006d82:	edc7 2a01 	vstr	s5, [r7, #4]
 8006d86:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	69ba      	ldr	r2, [r7, #24]
 8006d94:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006dba:	bf00      	nop
 8006dbc:	3724      	adds	r7, #36	@ 0x24
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
	...

08006dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006dce:	4b0f      	ldr	r3, [pc, #60]	@ (8006e0c <HAL_MspInit+0x44>)
 8006dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dd2:	4a0e      	ldr	r2, [pc, #56]	@ (8006e0c <HAL_MspInit+0x44>)
 8006dd4:	f043 0301 	orr.w	r3, r3, #1
 8006dd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8006dda:	4b0c      	ldr	r3, [pc, #48]	@ (8006e0c <HAL_MspInit+0x44>)
 8006ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	607b      	str	r3, [r7, #4]
 8006de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006de6:	4b09      	ldr	r3, [pc, #36]	@ (8006e0c <HAL_MspInit+0x44>)
 8006de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dea:	4a08      	ldr	r2, [pc, #32]	@ (8006e0c <HAL_MspInit+0x44>)
 8006dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006df0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006df2:	4b06      	ldr	r3, [pc, #24]	@ (8006e0c <HAL_MspInit+0x44>)
 8006df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dfa:	603b      	str	r3, [r7, #0]
 8006dfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8006dfe:	f003 fb1f 	bl	800a440 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006e02:	bf00      	nop
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	40021000 	.word	0x40021000

08006e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006e14:	bf00      	nop
 8006e16:	e7fd      	b.n	8006e14 <NMI_Handler+0x4>

08006e18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006e1c:	bf00      	nop
 8006e1e:	e7fd      	b.n	8006e1c <HardFault_Handler+0x4>

08006e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006e20:	b480      	push	{r7}
 8006e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006e24:	bf00      	nop
 8006e26:	e7fd      	b.n	8006e24 <MemManage_Handler+0x4>

08006e28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006e2c:	bf00      	nop
 8006e2e:	e7fd      	b.n	8006e2c <BusFault_Handler+0x4>

08006e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006e30:	b480      	push	{r7}
 8006e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006e34:	bf00      	nop
 8006e36:	e7fd      	b.n	8006e34 <UsageFault_Handler+0x4>

08006e38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006e3c:	bf00      	nop
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006e46:	b480      	push	{r7}
 8006e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006e4a:	bf00      	nop
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006e54:	b480      	push	{r7}
 8006e56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006e58:	bf00      	nop
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006e66:	f000 ffa5 	bl	8007db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006e6a:	bf00      	nop
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 8006e72:	2010      	movs	r0, #16
 8006e74:	f003 fa28 	bl	800a2c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8006e78:	bf00      	nop
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006e80:	4802      	ldr	r0, [pc, #8]	@ (8006e8c <DMA1_Channel1_IRQHandler+0x10>)
 8006e82:	f002 ff20 	bl	8009cc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006e86:	bf00      	nop
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	200001e4 	.word	0x200001e4

08006e90 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006e94:	4802      	ldr	r0, [pc, #8]	@ (8006ea0 <DMA1_Channel2_IRQHandler+0x10>)
 8006e96:	f002 ff16 	bl	8009cc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8006e9a:	bf00      	nop
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	2000205c 	.word	0x2000205c

08006ea4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006ea8:	4802      	ldr	r0, [pc, #8]	@ (8006eb4 <DMA1_Channel3_IRQHandler+0x10>)
 8006eaa:	f002 ff0c 	bl	8009cc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8006eae:	bf00      	nop
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	200020bc 	.word	0x200020bc

08006eb8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8006ebc:	4802      	ldr	r0, [pc, #8]	@ (8006ec8 <DMA1_Channel4_IRQHandler+0x10>)
 8006ebe:	f002 ff02 	bl	8009cc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006ec2:	bf00      	nop
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20001f9c 	.word	0x20001f9c

08006ecc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8006ed0:	4802      	ldr	r0, [pc, #8]	@ (8006edc <DMA1_Channel5_IRQHandler+0x10>)
 8006ed2:	f002 fef8 	bl	8009cc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8006ed6:	bf00      	nop
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	20001ffc 	.word	0x20001ffc

08006ee0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 8006ee4:	2040      	movs	r0, #64	@ 0x40
 8006ee6:	f003 f9ef 	bl	800a2c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006eea:	bf00      	nop
 8006eec:	bd80      	pop	{r7, pc}
	...

08006ef0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006ef4:	4803      	ldr	r0, [pc, #12]	@ (8006f04 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8006ef6:	f004 ff29 	bl	800bd4c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8006efa:	4803      	ldr	r0, [pc, #12]	@ (8006f08 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8006efc:	f004 ff26 	bl	800bd4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006f00:	bf00      	nop
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	20001870 	.word	0x20001870
 8006f08:	20001d38 	.word	0x20001d38

08006f0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006f10:	4802      	ldr	r0, [pc, #8]	@ (8006f1c <TIM2_IRQHandler+0x10>)
 8006f12:	f004 ff1b 	bl	800bd4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006f16:	bf00      	nop
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	2000193c 	.word	0x2000193c

08006f20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006f24:	4802      	ldr	r0, [pc, #8]	@ (8006f30 <TIM3_IRQHandler+0x10>)
 8006f26:	f004 ff11 	bl	800bd4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006f2a:	bf00      	nop
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	20001a08 	.word	0x20001a08

08006f34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006f38:	4802      	ldr	r0, [pc, #8]	@ (8006f44 <TIM4_IRQHandler+0x10>)
 8006f3a:	f004 ff07 	bl	800bd4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006f3e:	bf00      	nop
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	20001ad4 	.word	0x20001ad4

08006f48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006f4c:	4802      	ldr	r0, [pc, #8]	@ (8006f58 <USART2_IRQHandler+0x10>)
 8006f4e:	f006 fc51 	bl	800d7f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006f52:	bf00      	nop
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	20001ed0 	.word	0x20001ed0

08006f5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8006f60:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8006f64:	f003 f9b0 	bl	800a2c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006f68:	bf00      	nop
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8006f70:	4802      	ldr	r0, [pc, #8]	@ (8006f7c <LPUART1_IRQHandler+0x10>)
 8006f72:	f006 fc3f 	bl	800d7f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8006f76:	bf00      	nop
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20001e04 	.word	0x20001e04

08006f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006f88:	4a14      	ldr	r2, [pc, #80]	@ (8006fdc <_sbrk+0x5c>)
 8006f8a:	4b15      	ldr	r3, [pc, #84]	@ (8006fe0 <_sbrk+0x60>)
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006f94:	4b13      	ldr	r3, [pc, #76]	@ (8006fe4 <_sbrk+0x64>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d102      	bne.n	8006fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006f9c:	4b11      	ldr	r3, [pc, #68]	@ (8006fe4 <_sbrk+0x64>)
 8006f9e:	4a12      	ldr	r2, [pc, #72]	@ (8006fe8 <_sbrk+0x68>)
 8006fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006fa2:	4b10      	ldr	r3, [pc, #64]	@ (8006fe4 <_sbrk+0x64>)
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4413      	add	r3, r2
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d207      	bcs.n	8006fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006fb0:	f008 fab2 	bl	800f518 <__errno>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	220c      	movs	r2, #12
 8006fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006fba:	f04f 33ff 	mov.w	r3, #4294967295
 8006fbe:	e009      	b.n	8006fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006fc0:	4b08      	ldr	r3, [pc, #32]	@ (8006fe4 <_sbrk+0x64>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006fc6:	4b07      	ldr	r3, [pc, #28]	@ (8006fe4 <_sbrk+0x64>)
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4413      	add	r3, r2
 8006fce:	4a05      	ldr	r2, [pc, #20]	@ (8006fe4 <_sbrk+0x64>)
 8006fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3718      	adds	r7, #24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	20020000 	.word	0x20020000
 8006fe0:	00000400 	.word	0x00000400
 8006fe4:	2000186c 	.word	0x2000186c
 8006fe8:	20002268 	.word	0x20002268

08006fec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006fec:	b480      	push	{r7}
 8006fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006ff0:	4b06      	ldr	r3, [pc, #24]	@ (800700c <SystemInit+0x20>)
 8006ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ff6:	4a05      	ldr	r2, [pc, #20]	@ (800700c <SystemInit+0x20>)
 8006ff8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ffc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007000:	bf00      	nop
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	e000ed00 	.word	0xe000ed00

08007010 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b098      	sub	sp, #96	@ 0x60
 8007014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007016:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800701a:	2200      	movs	r2, #0
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	605a      	str	r2, [r3, #4]
 8007020:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007022:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007026:	2200      	movs	r2, #0
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	605a      	str	r2, [r3, #4]
 800702c:	609a      	str	r2, [r3, #8]
 800702e:	60da      	str	r2, [r3, #12]
 8007030:	611a      	str	r2, [r3, #16]
 8007032:	615a      	str	r2, [r3, #20]
 8007034:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007036:	1d3b      	adds	r3, r7, #4
 8007038:	2234      	movs	r2, #52	@ 0x34
 800703a:	2100      	movs	r1, #0
 800703c:	4618      	mov	r0, r3
 800703e:	f008 fa53 	bl	800f4e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007042:	4b3b      	ldr	r3, [pc, #236]	@ (8007130 <MX_TIM1_Init+0x120>)
 8007044:	4a3b      	ldr	r2, [pc, #236]	@ (8007134 <MX_TIM1_Init+0x124>)
 8007046:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007048:	4b39      	ldr	r3, [pc, #228]	@ (8007130 <MX_TIM1_Init+0x120>)
 800704a:	2200      	movs	r2, #0
 800704c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800704e:	4b38      	ldr	r3, [pc, #224]	@ (8007130 <MX_TIM1_Init+0x120>)
 8007050:	2200      	movs	r2, #0
 8007052:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8007054:	4b36      	ldr	r3, [pc, #216]	@ (8007130 <MX_TIM1_Init+0x120>)
 8007056:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800705a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800705c:	4b34      	ldr	r3, [pc, #208]	@ (8007130 <MX_TIM1_Init+0x120>)
 800705e:	2200      	movs	r2, #0
 8007060:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007062:	4b33      	ldr	r3, [pc, #204]	@ (8007130 <MX_TIM1_Init+0x120>)
 8007064:	2200      	movs	r2, #0
 8007066:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007068:	4b31      	ldr	r3, [pc, #196]	@ (8007130 <MX_TIM1_Init+0x120>)
 800706a:	2200      	movs	r2, #0
 800706c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800706e:	4830      	ldr	r0, [pc, #192]	@ (8007130 <MX_TIM1_Init+0x120>)
 8007070:	f004 fabe 	bl	800b5f0 <HAL_TIM_PWM_Init>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800707a:	f7ff f94d 	bl	8006318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800707e:	2300      	movs	r3, #0
 8007080:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007082:	2300      	movs	r3, #0
 8007084:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007086:	2300      	movs	r3, #0
 8007088:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800708a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800708e:	4619      	mov	r1, r3
 8007090:	4827      	ldr	r0, [pc, #156]	@ (8007130 <MX_TIM1_Init+0x120>)
 8007092:	f006 f8cf 	bl	800d234 <HAL_TIMEx_MasterConfigSynchronization>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d001      	beq.n	80070a0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800709c:	f7ff f93c 	bl	8006318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80070a0:	2360      	movs	r3, #96	@ 0x60
 80070a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80070a4:	2300      	movs	r3, #0
 80070a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80070a8:	2300      	movs	r3, #0
 80070aa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80070ac:	2300      	movs	r3, #0
 80070ae:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80070b0:	2300      	movs	r3, #0
 80070b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80070b4:	2300      	movs	r3, #0
 80070b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80070b8:	2300      	movs	r3, #0
 80070ba:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80070bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80070c0:	220c      	movs	r2, #12
 80070c2:	4619      	mov	r1, r3
 80070c4:	481a      	ldr	r0, [pc, #104]	@ (8007130 <MX_TIM1_Init+0x120>)
 80070c6:	f004 ffbb 	bl	800c040 <HAL_TIM_PWM_ConfigChannel>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80070d0:	f7ff f922 	bl	8006318 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80070d4:	2300      	movs	r3, #0
 80070d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80070d8:	2300      	movs	r3, #0
 80070da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80070dc:	2300      	movs	r3, #0
 80070de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80070e0:	2300      	movs	r3, #0
 80070e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80070e4:	2300      	movs	r3, #0
 80070e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80070e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80070ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80070ee:	2300      	movs	r3, #0
 80070f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80070f2:	2300      	movs	r3, #0
 80070f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80070f6:	2300      	movs	r3, #0
 80070f8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80070fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80070fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8007100:	2300      	movs	r3, #0
 8007102:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007104:	2300      	movs	r3, #0
 8007106:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007108:	2300      	movs	r3, #0
 800710a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800710c:	1d3b      	adds	r3, r7, #4
 800710e:	4619      	mov	r1, r3
 8007110:	4807      	ldr	r0, [pc, #28]	@ (8007130 <MX_TIM1_Init+0x120>)
 8007112:	f006 f925 	bl	800d360 <HAL_TIMEx_ConfigBreakDeadTime>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800711c:	f7ff f8fc 	bl	8006318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8007120:	4803      	ldr	r0, [pc, #12]	@ (8007130 <MX_TIM1_Init+0x120>)
 8007122:	f000 fb77 	bl	8007814 <HAL_TIM_MspPostInit>

}
 8007126:	bf00      	nop
 8007128:	3760      	adds	r7, #96	@ 0x60
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	20001870 	.word	0x20001870
 8007134:	40012c00 	.word	0x40012c00

08007138 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b088      	sub	sp, #32
 800713c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800713e:	f107 0310 	add.w	r3, r7, #16
 8007142:	2200      	movs	r2, #0
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	605a      	str	r2, [r3, #4]
 8007148:	609a      	str	r2, [r3, #8]
 800714a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800714c:	1d3b      	adds	r3, r7, #4
 800714e:	2200      	movs	r2, #0
 8007150:	601a      	str	r2, [r3, #0]
 8007152:	605a      	str	r2, [r3, #4]
 8007154:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007156:	4b1e      	ldr	r3, [pc, #120]	@ (80071d0 <MX_TIM2_Init+0x98>)
 8007158:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800715c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800715e:	4b1c      	ldr	r3, [pc, #112]	@ (80071d0 <MX_TIM2_Init+0x98>)
 8007160:	22a9      	movs	r2, #169	@ 0xa9
 8007162:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007164:	4b1a      	ldr	r3, [pc, #104]	@ (80071d0 <MX_TIM2_Init+0x98>)
 8007166:	2200      	movs	r2, #0
 8007168:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800716a:	4b19      	ldr	r3, [pc, #100]	@ (80071d0 <MX_TIM2_Init+0x98>)
 800716c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007170:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007172:	4b17      	ldr	r3, [pc, #92]	@ (80071d0 <MX_TIM2_Init+0x98>)
 8007174:	2200      	movs	r2, #0
 8007176:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007178:	4b15      	ldr	r3, [pc, #84]	@ (80071d0 <MX_TIM2_Init+0x98>)
 800717a:	2200      	movs	r2, #0
 800717c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800717e:	4814      	ldr	r0, [pc, #80]	@ (80071d0 <MX_TIM2_Init+0x98>)
 8007180:	f004 f8ea 	bl	800b358 <HAL_TIM_Base_Init>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800718a:	f7ff f8c5 	bl	8006318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800718e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007192:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007194:	f107 0310 	add.w	r3, r7, #16
 8007198:	4619      	mov	r1, r3
 800719a:	480d      	ldr	r0, [pc, #52]	@ (80071d0 <MX_TIM2_Init+0x98>)
 800719c:	f005 f864 	bl	800c268 <HAL_TIM_ConfigClockSource>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80071a6:	f7ff f8b7 	bl	8006318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80071aa:	2300      	movs	r3, #0
 80071ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80071ae:	2300      	movs	r3, #0
 80071b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80071b2:	1d3b      	adds	r3, r7, #4
 80071b4:	4619      	mov	r1, r3
 80071b6:	4806      	ldr	r0, [pc, #24]	@ (80071d0 <MX_TIM2_Init+0x98>)
 80071b8:	f006 f83c 	bl	800d234 <HAL_TIMEx_MasterConfigSynchronization>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80071c2:	f7ff f8a9 	bl	8006318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80071c6:	bf00      	nop
 80071c8:	3720      	adds	r7, #32
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	2000193c 	.word	0x2000193c

080071d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b08c      	sub	sp, #48	@ 0x30
 80071d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80071da:	f107 030c 	add.w	r3, r7, #12
 80071de:	2224      	movs	r2, #36	@ 0x24
 80071e0:	2100      	movs	r1, #0
 80071e2:	4618      	mov	r0, r3
 80071e4:	f008 f980 	bl	800f4e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80071e8:	463b      	mov	r3, r7
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	605a      	str	r2, [r3, #4]
 80071f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80071f2:	4b21      	ldr	r3, [pc, #132]	@ (8007278 <MX_TIM3_Init+0xa4>)
 80071f4:	4a21      	ldr	r2, [pc, #132]	@ (800727c <MX_TIM3_Init+0xa8>)
 80071f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80071f8:	4b1f      	ldr	r3, [pc, #124]	@ (8007278 <MX_TIM3_Init+0xa4>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007278 <MX_TIM3_Init+0xa4>)
 8007200:	2200      	movs	r2, #0
 8007202:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8007204:	4b1c      	ldr	r3, [pc, #112]	@ (8007278 <MX_TIM3_Init+0xa4>)
 8007206:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800720a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800720c:	4b1a      	ldr	r3, [pc, #104]	@ (8007278 <MX_TIM3_Init+0xa4>)
 800720e:	2200      	movs	r2, #0
 8007210:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007212:	4b19      	ldr	r3, [pc, #100]	@ (8007278 <MX_TIM3_Init+0xa4>)
 8007214:	2200      	movs	r2, #0
 8007216:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007218:	2303      	movs	r3, #3
 800721a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800721c:	2300      	movs	r3, #0
 800721e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007220:	2301      	movs	r3, #1
 8007222:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007224:	2300      	movs	r3, #0
 8007226:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8007228:	2300      	movs	r3, #0
 800722a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800722c:	2300      	movs	r3, #0
 800722e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007230:	2301      	movs	r3, #1
 8007232:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007234:	2300      	movs	r3, #0
 8007236:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8007238:	2300      	movs	r3, #0
 800723a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800723c:	f107 030c 	add.w	r3, r7, #12
 8007240:	4619      	mov	r1, r3
 8007242:	480d      	ldr	r0, [pc, #52]	@ (8007278 <MX_TIM3_Init+0xa4>)
 8007244:	f004 fc40 	bl	800bac8 <HAL_TIM_Encoder_Init>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d001      	beq.n	8007252 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800724e:	f7ff f863 	bl	8006318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007252:	2300      	movs	r3, #0
 8007254:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007256:	2300      	movs	r3, #0
 8007258:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800725a:	463b      	mov	r3, r7
 800725c:	4619      	mov	r1, r3
 800725e:	4806      	ldr	r0, [pc, #24]	@ (8007278 <MX_TIM3_Init+0xa4>)
 8007260:	f005 ffe8 	bl	800d234 <HAL_TIMEx_MasterConfigSynchronization>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d001      	beq.n	800726e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800726a:	f7ff f855 	bl	8006318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800726e:	bf00      	nop
 8007270:	3730      	adds	r7, #48	@ 0x30
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	20001a08 	.word	0x20001a08
 800727c:	40000400 	.word	0x40000400

08007280 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b08c      	sub	sp, #48	@ 0x30
 8007284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8007286:	f107 030c 	add.w	r3, r7, #12
 800728a:	2224      	movs	r2, #36	@ 0x24
 800728c:	2100      	movs	r1, #0
 800728e:	4618      	mov	r0, r3
 8007290:	f008 f92a 	bl	800f4e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007294:	463b      	mov	r3, r7
 8007296:	2200      	movs	r2, #0
 8007298:	601a      	str	r2, [r3, #0]
 800729a:	605a      	str	r2, [r3, #4]
 800729c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800729e:	4b21      	ldr	r3, [pc, #132]	@ (8007324 <MX_TIM4_Init+0xa4>)
 80072a0:	4a21      	ldr	r2, [pc, #132]	@ (8007328 <MX_TIM4_Init+0xa8>)
 80072a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80072a4:	4b1f      	ldr	r3, [pc, #124]	@ (8007324 <MX_TIM4_Init+0xa4>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80072aa:	4b1e      	ldr	r3, [pc, #120]	@ (8007324 <MX_TIM4_Init+0xa4>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80072b0:	4b1c      	ldr	r3, [pc, #112]	@ (8007324 <MX_TIM4_Init+0xa4>)
 80072b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80072b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80072b8:	4b1a      	ldr	r3, [pc, #104]	@ (8007324 <MX_TIM4_Init+0xa4>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80072be:	4b19      	ldr	r3, [pc, #100]	@ (8007324 <MX_TIM4_Init+0xa4>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80072c4:	2303      	movs	r3, #3
 80072c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80072c8:	2300      	movs	r3, #0
 80072ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80072cc:	2301      	movs	r3, #1
 80072ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80072d0:	2300      	movs	r3, #0
 80072d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80072d4:	2300      	movs	r3, #0
 80072d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80072d8:	2300      	movs	r3, #0
 80072da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80072dc:	2301      	movs	r3, #1
 80072de:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80072e0:	2300      	movs	r3, #0
 80072e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80072e4:	2300      	movs	r3, #0
 80072e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80072e8:	f107 030c 	add.w	r3, r7, #12
 80072ec:	4619      	mov	r1, r3
 80072ee:	480d      	ldr	r0, [pc, #52]	@ (8007324 <MX_TIM4_Init+0xa4>)
 80072f0:	f004 fbea 	bl	800bac8 <HAL_TIM_Encoder_Init>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80072fa:	f7ff f80d 	bl	8006318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80072fe:	2300      	movs	r3, #0
 8007300:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007302:	2300      	movs	r3, #0
 8007304:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007306:	463b      	mov	r3, r7
 8007308:	4619      	mov	r1, r3
 800730a:	4806      	ldr	r0, [pc, #24]	@ (8007324 <MX_TIM4_Init+0xa4>)
 800730c:	f005 ff92 	bl	800d234 <HAL_TIMEx_MasterConfigSynchronization>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8007316:	f7fe ffff 	bl	8006318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800731a:	bf00      	nop
 800731c:	3730      	adds	r7, #48	@ 0x30
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	20001ad4 	.word	0x20001ad4
 8007328:	40000800 	.word	0x40000800

0800732c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b08c      	sub	sp, #48	@ 0x30
 8007330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8007332:	f107 030c 	add.w	r3, r7, #12
 8007336:	2224      	movs	r2, #36	@ 0x24
 8007338:	2100      	movs	r1, #0
 800733a:	4618      	mov	r0, r3
 800733c:	f008 f8d4 	bl	800f4e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007340:	463b      	mov	r3, r7
 8007342:	2200      	movs	r2, #0
 8007344:	601a      	str	r2, [r3, #0]
 8007346:	605a      	str	r2, [r3, #4]
 8007348:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800734a:	4b21      	ldr	r3, [pc, #132]	@ (80073d0 <MX_TIM5_Init+0xa4>)
 800734c:	4a21      	ldr	r2, [pc, #132]	@ (80073d4 <MX_TIM5_Init+0xa8>)
 800734e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8007350:	4b1f      	ldr	r3, [pc, #124]	@ (80073d0 <MX_TIM5_Init+0xa4>)
 8007352:	2200      	movs	r2, #0
 8007354:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007356:	4b1e      	ldr	r3, [pc, #120]	@ (80073d0 <MX_TIM5_Init+0xa4>)
 8007358:	2200      	movs	r2, #0
 800735a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800735c:	4b1c      	ldr	r3, [pc, #112]	@ (80073d0 <MX_TIM5_Init+0xa4>)
 800735e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007362:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007364:	4b1a      	ldr	r3, [pc, #104]	@ (80073d0 <MX_TIM5_Init+0xa4>)
 8007366:	2200      	movs	r2, #0
 8007368:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800736a:	4b19      	ldr	r3, [pc, #100]	@ (80073d0 <MX_TIM5_Init+0xa4>)
 800736c:	2200      	movs	r2, #0
 800736e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007370:	2303      	movs	r3, #3
 8007372:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007374:	2300      	movs	r3, #0
 8007376:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007378:	2301      	movs	r3, #1
 800737a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800737c:	2300      	movs	r3, #0
 800737e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8007380:	2300      	movs	r3, #0
 8007382:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007384:	2300      	movs	r3, #0
 8007386:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007388:	2301      	movs	r3, #1
 800738a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800738c:	2300      	movs	r3, #0
 800738e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8007390:	2300      	movs	r3, #0
 8007392:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8007394:	f107 030c 	add.w	r3, r7, #12
 8007398:	4619      	mov	r1, r3
 800739a:	480d      	ldr	r0, [pc, #52]	@ (80073d0 <MX_TIM5_Init+0xa4>)
 800739c:	f004 fb94 	bl	800bac8 <HAL_TIM_Encoder_Init>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80073a6:	f7fe ffb7 	bl	8006318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80073aa:	2300      	movs	r3, #0
 80073ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80073ae:	2300      	movs	r3, #0
 80073b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80073b2:	463b      	mov	r3, r7
 80073b4:	4619      	mov	r1, r3
 80073b6:	4806      	ldr	r0, [pc, #24]	@ (80073d0 <MX_TIM5_Init+0xa4>)
 80073b8:	f005 ff3c 	bl	800d234 <HAL_TIMEx_MasterConfigSynchronization>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d001      	beq.n	80073c6 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80073c2:	f7fe ffa9 	bl	8006318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80073c6:	bf00      	nop
 80073c8:	3730      	adds	r7, #48	@ 0x30
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	20001ba0 	.word	0x20001ba0
 80073d4:	40000c00 	.word	0x40000c00

080073d8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b09c      	sub	sp, #112	@ 0x70
 80073dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80073de:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80073e2:	2200      	movs	r2, #0
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	605a      	str	r2, [r3, #4]
 80073e8:	609a      	str	r2, [r3, #8]
 80073ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80073ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80073f0:	2200      	movs	r2, #0
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	605a      	str	r2, [r3, #4]
 80073f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80073f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80073fc:	2200      	movs	r2, #0
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	605a      	str	r2, [r3, #4]
 8007402:	609a      	str	r2, [r3, #8]
 8007404:	60da      	str	r2, [r3, #12]
 8007406:	611a      	str	r2, [r3, #16]
 8007408:	615a      	str	r2, [r3, #20]
 800740a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800740c:	1d3b      	adds	r3, r7, #4
 800740e:	2234      	movs	r2, #52	@ 0x34
 8007410:	2100      	movs	r1, #0
 8007412:	4618      	mov	r0, r3
 8007414:	f008 f868 	bl	800f4e8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8007418:	4b4c      	ldr	r3, [pc, #304]	@ (800754c <MX_TIM8_Init+0x174>)
 800741a:	4a4d      	ldr	r2, [pc, #308]	@ (8007550 <MX_TIM8_Init+0x178>)
 800741c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800741e:	4b4b      	ldr	r3, [pc, #300]	@ (800754c <MX_TIM8_Init+0x174>)
 8007420:	2200      	movs	r2, #0
 8007422:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007424:	4b49      	ldr	r3, [pc, #292]	@ (800754c <MX_TIM8_Init+0x174>)
 8007426:	2200      	movs	r2, #0
 8007428:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800742a:	4b48      	ldr	r3, [pc, #288]	@ (800754c <MX_TIM8_Init+0x174>)
 800742c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007430:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8007432:	4b46      	ldr	r3, [pc, #280]	@ (800754c <MX_TIM8_Init+0x174>)
 8007434:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007438:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800743a:	4b44      	ldr	r3, [pc, #272]	@ (800754c <MX_TIM8_Init+0x174>)
 800743c:	2200      	movs	r2, #0
 800743e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007440:	4b42      	ldr	r3, [pc, #264]	@ (800754c <MX_TIM8_Init+0x174>)
 8007442:	2200      	movs	r2, #0
 8007444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8007446:	4841      	ldr	r0, [pc, #260]	@ (800754c <MX_TIM8_Init+0x174>)
 8007448:	f003 ff86 	bl	800b358 <HAL_TIM_Base_Init>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8007452:	f7fe ff61 	bl	8006318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007456:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800745a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800745c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8007460:	4619      	mov	r1, r3
 8007462:	483a      	ldr	r0, [pc, #232]	@ (800754c <MX_TIM8_Init+0x174>)
 8007464:	f004 ff00 	bl	800c268 <HAL_TIM_ConfigClockSource>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 800746e:	f7fe ff53 	bl	8006318 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8007472:	4836      	ldr	r0, [pc, #216]	@ (800754c <MX_TIM8_Init+0x174>)
 8007474:	f004 f8bc 	bl	800b5f0 <HAL_TIM_PWM_Init>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d001      	beq.n	8007482 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 800747e:	f7fe ff4b 	bl	8006318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007482:	2300      	movs	r3, #0
 8007484:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007486:	2300      	movs	r3, #0
 8007488:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800748a:	2300      	movs	r3, #0
 800748c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800748e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007492:	4619      	mov	r1, r3
 8007494:	482d      	ldr	r0, [pc, #180]	@ (800754c <MX_TIM8_Init+0x174>)
 8007496:	f005 fecd 	bl	800d234 <HAL_TIMEx_MasterConfigSynchronization>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d001      	beq.n	80074a4 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 80074a0:	f7fe ff3a 	bl	8006318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80074a4:	2360      	movs	r3, #96	@ 0x60
 80074a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80074a8:	2300      	movs	r3, #0
 80074aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80074ac:	2300      	movs	r3, #0
 80074ae:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80074b0:	2300      	movs	r3, #0
 80074b2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80074b4:	2300      	movs	r3, #0
 80074b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80074b8:	2300      	movs	r3, #0
 80074ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80074bc:	2300      	movs	r3, #0
 80074be:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80074c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80074c4:	2200      	movs	r2, #0
 80074c6:	4619      	mov	r1, r3
 80074c8:	4820      	ldr	r0, [pc, #128]	@ (800754c <MX_TIM8_Init+0x174>)
 80074ca:	f004 fdb9 	bl	800c040 <HAL_TIM_PWM_ConfigChannel>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 80074d4:	f7fe ff20 	bl	8006318 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80074d8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80074dc:	2204      	movs	r2, #4
 80074de:	4619      	mov	r1, r3
 80074e0:	481a      	ldr	r0, [pc, #104]	@ (800754c <MX_TIM8_Init+0x174>)
 80074e2:	f004 fdad 	bl	800c040 <HAL_TIM_PWM_ConfigChannel>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80074ec:	f7fe ff14 	bl	8006318 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80074f0:	2300      	movs	r3, #0
 80074f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80074f4:	2300      	movs	r3, #0
 80074f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80074f8:	2300      	movs	r3, #0
 80074fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80074fc:	2300      	movs	r3, #0
 80074fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007500:	2300      	movs	r3, #0
 8007502:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007504:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007508:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800750a:	2300      	movs	r3, #0
 800750c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800750e:	2300      	movs	r3, #0
 8007510:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8007512:	2300      	movs	r3, #0
 8007514:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8007516:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800751a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800751c:	2300      	movs	r3, #0
 800751e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007520:	2300      	movs	r3, #0
 8007522:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007524:	2300      	movs	r3, #0
 8007526:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8007528:	1d3b      	adds	r3, r7, #4
 800752a:	4619      	mov	r1, r3
 800752c:	4807      	ldr	r0, [pc, #28]	@ (800754c <MX_TIM8_Init+0x174>)
 800752e:	f005 ff17 	bl	800d360 <HAL_TIMEx_ConfigBreakDeadTime>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 8007538:	f7fe feee 	bl	8006318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800753c:	4803      	ldr	r0, [pc, #12]	@ (800754c <MX_TIM8_Init+0x174>)
 800753e:	f000 f969 	bl	8007814 <HAL_TIM_MspPostInit>

}
 8007542:	bf00      	nop
 8007544:	3770      	adds	r7, #112	@ 0x70
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	20001c6c 	.word	0x20001c6c
 8007550:	40013400 	.word	0x40013400

08007554 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8007558:	4b14      	ldr	r3, [pc, #80]	@ (80075ac <MX_TIM16_Init+0x58>)
 800755a:	4a15      	ldr	r2, [pc, #84]	@ (80075b0 <MX_TIM16_Init+0x5c>)
 800755c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800755e:	4b13      	ldr	r3, [pc, #76]	@ (80075ac <MX_TIM16_Init+0x58>)
 8007560:	22a9      	movs	r2, #169	@ 0xa9
 8007562:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007564:	4b11      	ldr	r3, [pc, #68]	@ (80075ac <MX_TIM16_Init+0x58>)
 8007566:	2200      	movs	r2, #0
 8007568:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800756a:	4b10      	ldr	r3, [pc, #64]	@ (80075ac <MX_TIM16_Init+0x58>)
 800756c:	f240 4279 	movw	r2, #1145	@ 0x479
 8007570:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007572:	4b0e      	ldr	r3, [pc, #56]	@ (80075ac <MX_TIM16_Init+0x58>)
 8007574:	2200      	movs	r2, #0
 8007576:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8007578:	4b0c      	ldr	r3, [pc, #48]	@ (80075ac <MX_TIM16_Init+0x58>)
 800757a:	2200      	movs	r2, #0
 800757c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800757e:	4b0b      	ldr	r3, [pc, #44]	@ (80075ac <MX_TIM16_Init+0x58>)
 8007580:	2200      	movs	r2, #0
 8007582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8007584:	4809      	ldr	r0, [pc, #36]	@ (80075ac <MX_TIM16_Init+0x58>)
 8007586:	f003 fee7 	bl	800b358 <HAL_TIM_Base_Init>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d001      	beq.n	8007594 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8007590:	f7fe fec2 	bl	8006318 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8007594:	2108      	movs	r1, #8
 8007596:	4805      	ldr	r0, [pc, #20]	@ (80075ac <MX_TIM16_Init+0x58>)
 8007598:	f004 f9a0 	bl	800b8dc <HAL_TIM_OnePulse_Init>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 80075a2:	f7fe feb9 	bl	8006318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80075a6:	bf00      	nop
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	20001d38 	.word	0x20001d38
 80075b0:	40014400 	.word	0x40014400

080075b4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a0d      	ldr	r2, [pc, #52]	@ (80075f8 <HAL_TIM_PWM_MspInit+0x44>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d113      	bne.n	80075ee <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80075c6:	4b0d      	ldr	r3, [pc, #52]	@ (80075fc <HAL_TIM_PWM_MspInit+0x48>)
 80075c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075ca:	4a0c      	ldr	r2, [pc, #48]	@ (80075fc <HAL_TIM_PWM_MspInit+0x48>)
 80075cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80075d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80075d2:	4b0a      	ldr	r3, [pc, #40]	@ (80075fc <HAL_TIM_PWM_MspInit+0x48>)
 80075d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075da:	60fb      	str	r3, [r7, #12]
 80075dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80075de:	2200      	movs	r2, #0
 80075e0:	2100      	movs	r1, #0
 80075e2:	2019      	movs	r0, #25
 80075e4:	f002 f957 	bl	8009896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80075e8:	2019      	movs	r0, #25
 80075ea:	f002 f96e 	bl	80098ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80075ee:	bf00      	nop
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	40012c00 	.word	0x40012c00
 80075fc:	40021000 	.word	0x40021000

08007600 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007610:	d114      	bne.n	800763c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007612:	4b22      	ldr	r3, [pc, #136]	@ (800769c <HAL_TIM_Base_MspInit+0x9c>)
 8007614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007616:	4a21      	ldr	r2, [pc, #132]	@ (800769c <HAL_TIM_Base_MspInit+0x9c>)
 8007618:	f043 0301 	orr.w	r3, r3, #1
 800761c:	6593      	str	r3, [r2, #88]	@ 0x58
 800761e:	4b1f      	ldr	r3, [pc, #124]	@ (800769c <HAL_TIM_Base_MspInit+0x9c>)
 8007620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	617b      	str	r3, [r7, #20]
 8007628:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800762a:	2200      	movs	r2, #0
 800762c:	2100      	movs	r1, #0
 800762e:	201c      	movs	r0, #28
 8007630:	f002 f931 	bl	8009896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007634:	201c      	movs	r0, #28
 8007636:	f002 f948 	bl	80098ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800763a:	e02a      	b.n	8007692 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a17      	ldr	r2, [pc, #92]	@ (80076a0 <HAL_TIM_Base_MspInit+0xa0>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d10c      	bne.n	8007660 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007646:	4b15      	ldr	r3, [pc, #84]	@ (800769c <HAL_TIM_Base_MspInit+0x9c>)
 8007648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800764a:	4a14      	ldr	r2, [pc, #80]	@ (800769c <HAL_TIM_Base_MspInit+0x9c>)
 800764c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007650:	6613      	str	r3, [r2, #96]	@ 0x60
 8007652:	4b12      	ldr	r3, [pc, #72]	@ (800769c <HAL_TIM_Base_MspInit+0x9c>)
 8007654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007656:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800765a:	613b      	str	r3, [r7, #16]
 800765c:	693b      	ldr	r3, [r7, #16]
}
 800765e:	e018      	b.n	8007692 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a0f      	ldr	r2, [pc, #60]	@ (80076a4 <HAL_TIM_Base_MspInit+0xa4>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d113      	bne.n	8007692 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800766a:	4b0c      	ldr	r3, [pc, #48]	@ (800769c <HAL_TIM_Base_MspInit+0x9c>)
 800766c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800766e:	4a0b      	ldr	r2, [pc, #44]	@ (800769c <HAL_TIM_Base_MspInit+0x9c>)
 8007670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007674:	6613      	str	r3, [r2, #96]	@ 0x60
 8007676:	4b09      	ldr	r3, [pc, #36]	@ (800769c <HAL_TIM_Base_MspInit+0x9c>)
 8007678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800767a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8007682:	2200      	movs	r2, #0
 8007684:	2100      	movs	r1, #0
 8007686:	2019      	movs	r0, #25
 8007688:	f002 f905 	bl	8009896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800768c:	2019      	movs	r0, #25
 800768e:	f002 f91c 	bl	80098ca <HAL_NVIC_EnableIRQ>
}
 8007692:	bf00      	nop
 8007694:	3718      	adds	r7, #24
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	40021000 	.word	0x40021000
 80076a0:	40013400 	.word	0x40013400
 80076a4:	40014400 	.word	0x40014400

080076a8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b08e      	sub	sp, #56	@ 0x38
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076b4:	2200      	movs	r2, #0
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	605a      	str	r2, [r3, #4]
 80076ba:	609a      	str	r2, [r3, #8]
 80076bc:	60da      	str	r2, [r3, #12]
 80076be:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a4f      	ldr	r2, [pc, #316]	@ (8007804 <HAL_TIM_Encoder_MspInit+0x15c>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d131      	bne.n	800772e <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80076ca:	4b4f      	ldr	r3, [pc, #316]	@ (8007808 <HAL_TIM_Encoder_MspInit+0x160>)
 80076cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ce:	4a4e      	ldr	r2, [pc, #312]	@ (8007808 <HAL_TIM_Encoder_MspInit+0x160>)
 80076d0:	f043 0302 	orr.w	r3, r3, #2
 80076d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80076d6:	4b4c      	ldr	r3, [pc, #304]	@ (8007808 <HAL_TIM_Encoder_MspInit+0x160>)
 80076d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076da:	f003 0302 	and.w	r3, r3, #2
 80076de:	623b      	str	r3, [r7, #32]
 80076e0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076e2:	4b49      	ldr	r3, [pc, #292]	@ (8007808 <HAL_TIM_Encoder_MspInit+0x160>)
 80076e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076e6:	4a48      	ldr	r2, [pc, #288]	@ (8007808 <HAL_TIM_Encoder_MspInit+0x160>)
 80076e8:	f043 0301 	orr.w	r3, r3, #1
 80076ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80076ee:	4b46      	ldr	r3, [pc, #280]	@ (8007808 <HAL_TIM_Encoder_MspInit+0x160>)
 80076f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076f2:	f003 0301 	and.w	r3, r3, #1
 80076f6:	61fb      	str	r3, [r7, #28]
 80076f8:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80076fa:	23c0      	movs	r3, #192	@ 0xc0
 80076fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076fe:	2302      	movs	r3, #2
 8007700:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007702:	2300      	movs	r3, #0
 8007704:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007706:	2300      	movs	r3, #0
 8007708:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800770a:	2302      	movs	r3, #2
 800770c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800770e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007712:	4619      	mov	r1, r3
 8007714:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007718:	f002 fc24 	bl	8009f64 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800771c:	2200      	movs	r2, #0
 800771e:	2100      	movs	r1, #0
 8007720:	201d      	movs	r0, #29
 8007722:	f002 f8b8 	bl	8009896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007726:	201d      	movs	r0, #29
 8007728:	f002 f8cf 	bl	80098ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800772c:	e065      	b.n	80077fa <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a36      	ldr	r2, [pc, #216]	@ (800780c <HAL_TIM_Encoder_MspInit+0x164>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d132      	bne.n	800779e <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007738:	4b33      	ldr	r3, [pc, #204]	@ (8007808 <HAL_TIM_Encoder_MspInit+0x160>)
 800773a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800773c:	4a32      	ldr	r2, [pc, #200]	@ (8007808 <HAL_TIM_Encoder_MspInit+0x160>)
 800773e:	f043 0304 	orr.w	r3, r3, #4
 8007742:	6593      	str	r3, [r2, #88]	@ 0x58
 8007744:	4b30      	ldr	r3, [pc, #192]	@ (8007808 <HAL_TIM_Encoder_MspInit+0x160>)
 8007746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	61bb      	str	r3, [r7, #24]
 800774e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007750:	4b2d      	ldr	r3, [pc, #180]	@ (8007808 <HAL_TIM_Encoder_MspInit+0x160>)
 8007752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007754:	4a2c      	ldr	r2, [pc, #176]	@ (8007808 <HAL_TIM_Encoder_MspInit+0x160>)
 8007756:	f043 0301 	orr.w	r3, r3, #1
 800775a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800775c:	4b2a      	ldr	r3, [pc, #168]	@ (8007808 <HAL_TIM_Encoder_MspInit+0x160>)
 800775e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	617b      	str	r3, [r7, #20]
 8007766:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007768:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800776c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800776e:	2302      	movs	r3, #2
 8007770:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007772:	2300      	movs	r3, #0
 8007774:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007776:	2300      	movs	r3, #0
 8007778:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800777a:	230a      	movs	r3, #10
 800777c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800777e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007782:	4619      	mov	r1, r3
 8007784:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007788:	f002 fbec 	bl	8009f64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800778c:	2200      	movs	r2, #0
 800778e:	2100      	movs	r1, #0
 8007790:	201e      	movs	r0, #30
 8007792:	f002 f880 	bl	8009896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007796:	201e      	movs	r0, #30
 8007798:	f002 f897 	bl	80098ca <HAL_NVIC_EnableIRQ>
}
 800779c:	e02d      	b.n	80077fa <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a1b      	ldr	r2, [pc, #108]	@ (8007810 <HAL_TIM_Encoder_MspInit+0x168>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d128      	bne.n	80077fa <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80077a8:	4b17      	ldr	r3, [pc, #92]	@ (8007808 <HAL_TIM_Encoder_MspInit+0x160>)
 80077aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077ac:	4a16      	ldr	r2, [pc, #88]	@ (8007808 <HAL_TIM_Encoder_MspInit+0x160>)
 80077ae:	f043 0308 	orr.w	r3, r3, #8
 80077b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80077b4:	4b14      	ldr	r3, [pc, #80]	@ (8007808 <HAL_TIM_Encoder_MspInit+0x160>)
 80077b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077b8:	f003 0308 	and.w	r3, r3, #8
 80077bc:	613b      	str	r3, [r7, #16]
 80077be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077c0:	4b11      	ldr	r3, [pc, #68]	@ (8007808 <HAL_TIM_Encoder_MspInit+0x160>)
 80077c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077c4:	4a10      	ldr	r2, [pc, #64]	@ (8007808 <HAL_TIM_Encoder_MspInit+0x160>)
 80077c6:	f043 0301 	orr.w	r3, r3, #1
 80077ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80077cc:	4b0e      	ldr	r3, [pc, #56]	@ (8007808 <HAL_TIM_Encoder_MspInit+0x160>)
 80077ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	60fb      	str	r3, [r7, #12]
 80077d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80077d8:	2303      	movs	r3, #3
 80077da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077dc:	2302      	movs	r3, #2
 80077de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077e0:	2300      	movs	r3, #0
 80077e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077e4:	2300      	movs	r3, #0
 80077e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80077e8:	2302      	movs	r3, #2
 80077ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077f0:	4619      	mov	r1, r3
 80077f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80077f6:	f002 fbb5 	bl	8009f64 <HAL_GPIO_Init>
}
 80077fa:	bf00      	nop
 80077fc:	3738      	adds	r7, #56	@ 0x38
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	40000400 	.word	0x40000400
 8007808:	40021000 	.word	0x40021000
 800780c:	40000800 	.word	0x40000800
 8007810:	40000c00 	.word	0x40000c00

08007814 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b08a      	sub	sp, #40	@ 0x28
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800781c:	f107 0314 	add.w	r3, r7, #20
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	605a      	str	r2, [r3, #4]
 8007826:	609a      	str	r2, [r3, #8]
 8007828:	60da      	str	r2, [r3, #12]
 800782a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a22      	ldr	r2, [pc, #136]	@ (80078bc <HAL_TIM_MspPostInit+0xa8>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d11c      	bne.n	8007870 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007836:	4b22      	ldr	r3, [pc, #136]	@ (80078c0 <HAL_TIM_MspPostInit+0xac>)
 8007838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800783a:	4a21      	ldr	r2, [pc, #132]	@ (80078c0 <HAL_TIM_MspPostInit+0xac>)
 800783c:	f043 0304 	orr.w	r3, r3, #4
 8007840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007842:	4b1f      	ldr	r3, [pc, #124]	@ (80078c0 <HAL_TIM_MspPostInit+0xac>)
 8007844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007846:	f003 0304 	and.w	r3, r3, #4
 800784a:	613b      	str	r3, [r7, #16]
 800784c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800784e:	2308      	movs	r3, #8
 8007850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007852:	2302      	movs	r3, #2
 8007854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007856:	2300      	movs	r3, #0
 8007858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800785a:	2300      	movs	r3, #0
 800785c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800785e:	2302      	movs	r3, #2
 8007860:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007862:	f107 0314 	add.w	r3, r7, #20
 8007866:	4619      	mov	r1, r3
 8007868:	4816      	ldr	r0, [pc, #88]	@ (80078c4 <HAL_TIM_MspPostInit+0xb0>)
 800786a:	f002 fb7b 	bl	8009f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800786e:	e020      	b.n	80078b2 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a14      	ldr	r2, [pc, #80]	@ (80078c8 <HAL_TIM_MspPostInit+0xb4>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d11b      	bne.n	80078b2 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800787a:	4b11      	ldr	r3, [pc, #68]	@ (80078c0 <HAL_TIM_MspPostInit+0xac>)
 800787c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800787e:	4a10      	ldr	r2, [pc, #64]	@ (80078c0 <HAL_TIM_MspPostInit+0xac>)
 8007880:	f043 0304 	orr.w	r3, r3, #4
 8007884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007886:	4b0e      	ldr	r3, [pc, #56]	@ (80078c0 <HAL_TIM_MspPostInit+0xac>)
 8007888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800788a:	f003 0304 	and.w	r3, r3, #4
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007892:	23c0      	movs	r3, #192	@ 0xc0
 8007894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007896:	2302      	movs	r3, #2
 8007898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800789a:	2300      	movs	r3, #0
 800789c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800789e:	2300      	movs	r3, #0
 80078a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80078a2:	2304      	movs	r3, #4
 80078a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078a6:	f107 0314 	add.w	r3, r7, #20
 80078aa:	4619      	mov	r1, r3
 80078ac:	4805      	ldr	r0, [pc, #20]	@ (80078c4 <HAL_TIM_MspPostInit+0xb0>)
 80078ae:	f002 fb59 	bl	8009f64 <HAL_GPIO_Init>
}
 80078b2:	bf00      	nop
 80078b4:	3728      	adds	r7, #40	@ 0x28
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	40012c00 	.word	0x40012c00
 80078c0:	40021000 	.word	0x40021000
 80078c4:	48000800 	.word	0x48000800
 80078c8:	40013400 	.word	0x40013400

080078cc <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80078d0:	4b20      	ldr	r3, [pc, #128]	@ (8007954 <MX_LPUART1_UART_Init+0x88>)
 80078d2:	4a21      	ldr	r2, [pc, #132]	@ (8007958 <MX_LPUART1_UART_Init+0x8c>)
 80078d4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 80078d6:	4b1f      	ldr	r3, [pc, #124]	@ (8007954 <MX_LPUART1_UART_Init+0x88>)
 80078d8:	4a20      	ldr	r2, [pc, #128]	@ (800795c <MX_LPUART1_UART_Init+0x90>)
 80078da:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80078dc:	4b1d      	ldr	r3, [pc, #116]	@ (8007954 <MX_LPUART1_UART_Init+0x88>)
 80078de:	2200      	movs	r2, #0
 80078e0:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80078e2:	4b1c      	ldr	r3, [pc, #112]	@ (8007954 <MX_LPUART1_UART_Init+0x88>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80078e8:	4b1a      	ldr	r3, [pc, #104]	@ (8007954 <MX_LPUART1_UART_Init+0x88>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80078ee:	4b19      	ldr	r3, [pc, #100]	@ (8007954 <MX_LPUART1_UART_Init+0x88>)
 80078f0:	220c      	movs	r2, #12
 80078f2:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80078f4:	4b17      	ldr	r3, [pc, #92]	@ (8007954 <MX_LPUART1_UART_Init+0x88>)
 80078f6:	2200      	movs	r2, #0
 80078f8:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80078fa:	4b16      	ldr	r3, [pc, #88]	@ (8007954 <MX_LPUART1_UART_Init+0x88>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007900:	4b14      	ldr	r3, [pc, #80]	@ (8007954 <MX_LPUART1_UART_Init+0x88>)
 8007902:	2200      	movs	r2, #0
 8007904:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007906:	4b13      	ldr	r3, [pc, #76]	@ (8007954 <MX_LPUART1_UART_Init+0x88>)
 8007908:	2200      	movs	r2, #0
 800790a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800790c:	4811      	ldr	r0, [pc, #68]	@ (8007954 <MX_LPUART1_UART_Init+0x88>)
 800790e:	f005 fe0b 	bl	800d528 <HAL_UART_Init>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d001      	beq.n	800791c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8007918:	f7fe fcfe 	bl	8006318 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800791c:	2100      	movs	r1, #0
 800791e:	480d      	ldr	r0, [pc, #52]	@ (8007954 <MX_LPUART1_UART_Init+0x88>)
 8007920:	f007 fb5e 	bl	800efe0 <HAL_UARTEx_SetTxFifoThreshold>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800792a:	f7fe fcf5 	bl	8006318 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800792e:	2100      	movs	r1, #0
 8007930:	4808      	ldr	r0, [pc, #32]	@ (8007954 <MX_LPUART1_UART_Init+0x88>)
 8007932:	f007 fb93 	bl	800f05c <HAL_UARTEx_SetRxFifoThreshold>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800793c:	f7fe fcec 	bl	8006318 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8007940:	4804      	ldr	r0, [pc, #16]	@ (8007954 <MX_LPUART1_UART_Init+0x88>)
 8007942:	f007 fb14 	bl	800ef6e <HAL_UARTEx_DisableFifoMode>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800794c:	f7fe fce4 	bl	8006318 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8007950:	bf00      	nop
 8007952:	bd80      	pop	{r7, pc}
 8007954:	20001e04 	.word	0x20001e04
 8007958:	40008000 	.word	0x40008000
 800795c:	001e8480 	.word	0x001e8480

08007960 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007964:	4b23      	ldr	r3, [pc, #140]	@ (80079f4 <MX_USART2_UART_Init+0x94>)
 8007966:	4a24      	ldr	r2, [pc, #144]	@ (80079f8 <MX_USART2_UART_Init+0x98>)
 8007968:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800796a:	4b22      	ldr	r3, [pc, #136]	@ (80079f4 <MX_USART2_UART_Init+0x94>)
 800796c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8007970:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8007972:	4b20      	ldr	r3, [pc, #128]	@ (80079f4 <MX_USART2_UART_Init+0x94>)
 8007974:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007978:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800797a:	4b1e      	ldr	r3, [pc, #120]	@ (80079f4 <MX_USART2_UART_Init+0x94>)
 800797c:	2200      	movs	r2, #0
 800797e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8007980:	4b1c      	ldr	r3, [pc, #112]	@ (80079f4 <MX_USART2_UART_Init+0x94>)
 8007982:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007986:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007988:	4b1a      	ldr	r3, [pc, #104]	@ (80079f4 <MX_USART2_UART_Init+0x94>)
 800798a:	220c      	movs	r2, #12
 800798c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800798e:	4b19      	ldr	r3, [pc, #100]	@ (80079f4 <MX_USART2_UART_Init+0x94>)
 8007990:	2200      	movs	r2, #0
 8007992:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007994:	4b17      	ldr	r3, [pc, #92]	@ (80079f4 <MX_USART2_UART_Init+0x94>)
 8007996:	2200      	movs	r2, #0
 8007998:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800799a:	4b16      	ldr	r3, [pc, #88]	@ (80079f4 <MX_USART2_UART_Init+0x94>)
 800799c:	2200      	movs	r2, #0
 800799e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80079a0:	4b14      	ldr	r3, [pc, #80]	@ (80079f4 <MX_USART2_UART_Init+0x94>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80079a6:	4b13      	ldr	r3, [pc, #76]	@ (80079f4 <MX_USART2_UART_Init+0x94>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80079ac:	4811      	ldr	r0, [pc, #68]	@ (80079f4 <MX_USART2_UART_Init+0x94>)
 80079ae:	f005 fdbb 	bl	800d528 <HAL_UART_Init>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80079b8:	f7fe fcae 	bl	8006318 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80079bc:	2100      	movs	r1, #0
 80079be:	480d      	ldr	r0, [pc, #52]	@ (80079f4 <MX_USART2_UART_Init+0x94>)
 80079c0:	f007 fb0e 	bl	800efe0 <HAL_UARTEx_SetTxFifoThreshold>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80079ca:	f7fe fca5 	bl	8006318 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80079ce:	2100      	movs	r1, #0
 80079d0:	4808      	ldr	r0, [pc, #32]	@ (80079f4 <MX_USART2_UART_Init+0x94>)
 80079d2:	f007 fb43 	bl	800f05c <HAL_UARTEx_SetRxFifoThreshold>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d001      	beq.n	80079e0 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80079dc:	f7fe fc9c 	bl	8006318 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80079e0:	4804      	ldr	r0, [pc, #16]	@ (80079f4 <MX_USART2_UART_Init+0x94>)
 80079e2:	f007 fac4 	bl	800ef6e <HAL_UARTEx_DisableFifoMode>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d001      	beq.n	80079f0 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80079ec:	f7fe fc94 	bl	8006318 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80079f0:	bf00      	nop
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	20001ed0 	.word	0x20001ed0
 80079f8:	40004400 	.word	0x40004400

080079fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b0a0      	sub	sp, #128	@ 0x80
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a04:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007a08:	2200      	movs	r2, #0
 8007a0a:	601a      	str	r2, [r3, #0]
 8007a0c:	605a      	str	r2, [r3, #4]
 8007a0e:	609a      	str	r2, [r3, #8]
 8007a10:	60da      	str	r2, [r3, #12]
 8007a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007a14:	f107 0318 	add.w	r3, r7, #24
 8007a18:	2254      	movs	r2, #84	@ 0x54
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f007 fd63 	bl	800f4e8 <memset>
  if(uartHandle->Instance==LPUART1)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a99      	ldr	r2, [pc, #612]	@ (8007c8c <HAL_UART_MspInit+0x290>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	f040 8093 	bne.w	8007b54 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8007a2e:	2320      	movs	r3, #32
 8007a30:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8007a32:	2300      	movs	r3, #0
 8007a34:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007a36:	f107 0318 	add.w	r3, r7, #24
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f003 fa3e 	bl	800aebc <HAL_RCCEx_PeriphCLKConfig>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8007a46:	f7fe fc67 	bl	8006318 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8007a4a:	4b91      	ldr	r3, [pc, #580]	@ (8007c90 <HAL_UART_MspInit+0x294>)
 8007a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a4e:	4a90      	ldr	r2, [pc, #576]	@ (8007c90 <HAL_UART_MspInit+0x294>)
 8007a50:	f043 0301 	orr.w	r3, r3, #1
 8007a54:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8007a56:	4b8e      	ldr	r3, [pc, #568]	@ (8007c90 <HAL_UART_MspInit+0x294>)
 8007a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	617b      	str	r3, [r7, #20]
 8007a60:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a62:	4b8b      	ldr	r3, [pc, #556]	@ (8007c90 <HAL_UART_MspInit+0x294>)
 8007a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a66:	4a8a      	ldr	r2, [pc, #552]	@ (8007c90 <HAL_UART_MspInit+0x294>)
 8007a68:	f043 0302 	orr.w	r3, r3, #2
 8007a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a6e:	4b88      	ldr	r3, [pc, #544]	@ (8007c90 <HAL_UART_MspInit+0x294>)
 8007a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a72:	f003 0302 	and.w	r3, r3, #2
 8007a76:	613b      	str	r3, [r7, #16]
 8007a78:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007a7a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007a7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a80:	2302      	movs	r3, #2
 8007a82:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a84:	2300      	movs	r3, #0
 8007a86:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8007a8c:	2308      	movs	r3, #8
 8007a8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a90:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007a94:	4619      	mov	r1, r3
 8007a96:	487f      	ldr	r0, [pc, #508]	@ (8007c94 <HAL_UART_MspInit+0x298>)
 8007a98:	f002 fa64 	bl	8009f64 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 8007a9c:	4b7e      	ldr	r3, [pc, #504]	@ (8007c98 <HAL_UART_MspInit+0x29c>)
 8007a9e:	4a7f      	ldr	r2, [pc, #508]	@ (8007c9c <HAL_UART_MspInit+0x2a0>)
 8007aa0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8007aa2:	4b7d      	ldr	r3, [pc, #500]	@ (8007c98 <HAL_UART_MspInit+0x29c>)
 8007aa4:	2222      	movs	r2, #34	@ 0x22
 8007aa6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007aa8:	4b7b      	ldr	r3, [pc, #492]	@ (8007c98 <HAL_UART_MspInit+0x29c>)
 8007aaa:	2200      	movs	r2, #0
 8007aac:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007aae:	4b7a      	ldr	r3, [pc, #488]	@ (8007c98 <HAL_UART_MspInit+0x29c>)
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007ab4:	4b78      	ldr	r3, [pc, #480]	@ (8007c98 <HAL_UART_MspInit+0x29c>)
 8007ab6:	2280      	movs	r2, #128	@ 0x80
 8007ab8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007aba:	4b77      	ldr	r3, [pc, #476]	@ (8007c98 <HAL_UART_MspInit+0x29c>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007ac0:	4b75      	ldr	r3, [pc, #468]	@ (8007c98 <HAL_UART_MspInit+0x29c>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8007ac6:	4b74      	ldr	r3, [pc, #464]	@ (8007c98 <HAL_UART_MspInit+0x29c>)
 8007ac8:	2200      	movs	r2, #0
 8007aca:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007acc:	4b72      	ldr	r3, [pc, #456]	@ (8007c98 <HAL_UART_MspInit+0x29c>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8007ad2:	4871      	ldr	r0, [pc, #452]	@ (8007c98 <HAL_UART_MspInit+0x29c>)
 8007ad4:	f001 ff14 	bl	8009900 <HAL_DMA_Init>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8007ade:	f7fe fc1b 	bl	8006318 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a6c      	ldr	r2, [pc, #432]	@ (8007c98 <HAL_UART_MspInit+0x29c>)
 8007ae6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8007aea:	4a6b      	ldr	r2, [pc, #428]	@ (8007c98 <HAL_UART_MspInit+0x29c>)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 8007af0:	4b6b      	ldr	r3, [pc, #428]	@ (8007ca0 <HAL_UART_MspInit+0x2a4>)
 8007af2:	4a6c      	ldr	r2, [pc, #432]	@ (8007ca4 <HAL_UART_MspInit+0x2a8>)
 8007af4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8007af6:	4b6a      	ldr	r3, [pc, #424]	@ (8007ca0 <HAL_UART_MspInit+0x2a4>)
 8007af8:	2223      	movs	r2, #35	@ 0x23
 8007afa:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007afc:	4b68      	ldr	r3, [pc, #416]	@ (8007ca0 <HAL_UART_MspInit+0x2a4>)
 8007afe:	2210      	movs	r2, #16
 8007b00:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007b02:	4b67      	ldr	r3, [pc, #412]	@ (8007ca0 <HAL_UART_MspInit+0x2a4>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007b08:	4b65      	ldr	r3, [pc, #404]	@ (8007ca0 <HAL_UART_MspInit+0x2a4>)
 8007b0a:	2280      	movs	r2, #128	@ 0x80
 8007b0c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007b0e:	4b64      	ldr	r3, [pc, #400]	@ (8007ca0 <HAL_UART_MspInit+0x2a4>)
 8007b10:	2200      	movs	r2, #0
 8007b12:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007b14:	4b62      	ldr	r3, [pc, #392]	@ (8007ca0 <HAL_UART_MspInit+0x2a4>)
 8007b16:	2200      	movs	r2, #0
 8007b18:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8007b1a:	4b61      	ldr	r3, [pc, #388]	@ (8007ca0 <HAL_UART_MspInit+0x2a4>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007b20:	4b5f      	ldr	r3, [pc, #380]	@ (8007ca0 <HAL_UART_MspInit+0x2a4>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8007b26:	485e      	ldr	r0, [pc, #376]	@ (8007ca0 <HAL_UART_MspInit+0x2a4>)
 8007b28:	f001 feea 	bl	8009900 <HAL_DMA_Init>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8007b32:	f7fe fbf1 	bl	8006318 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a59      	ldr	r2, [pc, #356]	@ (8007ca0 <HAL_UART_MspInit+0x2a4>)
 8007b3a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8007b3c:	4a58      	ldr	r2, [pc, #352]	@ (8007ca0 <HAL_UART_MspInit+0x2a4>)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8007b42:	2200      	movs	r2, #0
 8007b44:	2100      	movs	r1, #0
 8007b46:	205b      	movs	r0, #91	@ 0x5b
 8007b48:	f001 fea5 	bl	8009896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8007b4c:	205b      	movs	r0, #91	@ 0x5b
 8007b4e:	f001 febc 	bl	80098ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8007b52:	e097      	b.n	8007c84 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a53      	ldr	r2, [pc, #332]	@ (8007ca8 <HAL_UART_MspInit+0x2ac>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	f040 8092 	bne.w	8007c84 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007b60:	2302      	movs	r3, #2
 8007b62:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007b64:	2300      	movs	r3, #0
 8007b66:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007b68:	f107 0318 	add.w	r3, r7, #24
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f003 f9a5 	bl	800aebc <HAL_RCCEx_PeriphCLKConfig>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <HAL_UART_MspInit+0x180>
      Error_Handler();
 8007b78:	f7fe fbce 	bl	8006318 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007b7c:	4b44      	ldr	r3, [pc, #272]	@ (8007c90 <HAL_UART_MspInit+0x294>)
 8007b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b80:	4a43      	ldr	r2, [pc, #268]	@ (8007c90 <HAL_UART_MspInit+0x294>)
 8007b82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b86:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b88:	4b41      	ldr	r3, [pc, #260]	@ (8007c90 <HAL_UART_MspInit+0x294>)
 8007b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b90:	60fb      	str	r3, [r7, #12]
 8007b92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b94:	4b3e      	ldr	r3, [pc, #248]	@ (8007c90 <HAL_UART_MspInit+0x294>)
 8007b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b98:	4a3d      	ldr	r2, [pc, #244]	@ (8007c90 <HAL_UART_MspInit+0x294>)
 8007b9a:	f043 0301 	orr.w	r3, r3, #1
 8007b9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8007c90 <HAL_UART_MspInit+0x294>)
 8007ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	60bb      	str	r3, [r7, #8]
 8007baa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007bac:	230c      	movs	r3, #12
 8007bae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007bbc:	2307      	movs	r3, #7
 8007bbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bc0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007bca:	f002 f9cb 	bl	8009f64 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8007bce:	4b37      	ldr	r3, [pc, #220]	@ (8007cac <HAL_UART_MspInit+0x2b0>)
 8007bd0:	4a37      	ldr	r2, [pc, #220]	@ (8007cb0 <HAL_UART_MspInit+0x2b4>)
 8007bd2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8007bd4:	4b35      	ldr	r3, [pc, #212]	@ (8007cac <HAL_UART_MspInit+0x2b0>)
 8007bd6:	221a      	movs	r2, #26
 8007bd8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007bda:	4b34      	ldr	r3, [pc, #208]	@ (8007cac <HAL_UART_MspInit+0x2b0>)
 8007bdc:	2200      	movs	r2, #0
 8007bde:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007be0:	4b32      	ldr	r3, [pc, #200]	@ (8007cac <HAL_UART_MspInit+0x2b0>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007be6:	4b31      	ldr	r3, [pc, #196]	@ (8007cac <HAL_UART_MspInit+0x2b0>)
 8007be8:	2280      	movs	r2, #128	@ 0x80
 8007bea:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007bec:	4b2f      	ldr	r3, [pc, #188]	@ (8007cac <HAL_UART_MspInit+0x2b0>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007bf2:	4b2e      	ldr	r3, [pc, #184]	@ (8007cac <HAL_UART_MspInit+0x2b0>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8007bf8:	4b2c      	ldr	r3, [pc, #176]	@ (8007cac <HAL_UART_MspInit+0x2b0>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8007cac <HAL_UART_MspInit+0x2b0>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007c04:	4829      	ldr	r0, [pc, #164]	@ (8007cac <HAL_UART_MspInit+0x2b0>)
 8007c06:	f001 fe7b 	bl	8009900 <HAL_DMA_Init>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8007c10:	f7fe fb82 	bl	8006318 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a25      	ldr	r2, [pc, #148]	@ (8007cac <HAL_UART_MspInit+0x2b0>)
 8007c18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8007c1c:	4a23      	ldr	r2, [pc, #140]	@ (8007cac <HAL_UART_MspInit+0x2b0>)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8007c22:	4b24      	ldr	r3, [pc, #144]	@ (8007cb4 <HAL_UART_MspInit+0x2b8>)
 8007c24:	4a24      	ldr	r2, [pc, #144]	@ (8007cb8 <HAL_UART_MspInit+0x2bc>)
 8007c26:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8007c28:	4b22      	ldr	r3, [pc, #136]	@ (8007cb4 <HAL_UART_MspInit+0x2b8>)
 8007c2a:	221b      	movs	r2, #27
 8007c2c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007c2e:	4b21      	ldr	r3, [pc, #132]	@ (8007cb4 <HAL_UART_MspInit+0x2b8>)
 8007c30:	2210      	movs	r2, #16
 8007c32:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c34:	4b1f      	ldr	r3, [pc, #124]	@ (8007cb4 <HAL_UART_MspInit+0x2b8>)
 8007c36:	2200      	movs	r2, #0
 8007c38:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8007cb4 <HAL_UART_MspInit+0x2b8>)
 8007c3c:	2280      	movs	r2, #128	@ 0x80
 8007c3e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007c40:	4b1c      	ldr	r3, [pc, #112]	@ (8007cb4 <HAL_UART_MspInit+0x2b8>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007c46:	4b1b      	ldr	r3, [pc, #108]	@ (8007cb4 <HAL_UART_MspInit+0x2b8>)
 8007c48:	2200      	movs	r2, #0
 8007c4a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8007c4c:	4b19      	ldr	r3, [pc, #100]	@ (8007cb4 <HAL_UART_MspInit+0x2b8>)
 8007c4e:	2200      	movs	r2, #0
 8007c50:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007c52:	4b18      	ldr	r3, [pc, #96]	@ (8007cb4 <HAL_UART_MspInit+0x2b8>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8007c58:	4816      	ldr	r0, [pc, #88]	@ (8007cb4 <HAL_UART_MspInit+0x2b8>)
 8007c5a:	f001 fe51 	bl	8009900 <HAL_DMA_Init>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d001      	beq.n	8007c68 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8007c64:	f7fe fb58 	bl	8006318 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a12      	ldr	r2, [pc, #72]	@ (8007cb4 <HAL_UART_MspInit+0x2b8>)
 8007c6c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8007c6e:	4a11      	ldr	r2, [pc, #68]	@ (8007cb4 <HAL_UART_MspInit+0x2b8>)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007c74:	2200      	movs	r2, #0
 8007c76:	2100      	movs	r1, #0
 8007c78:	2026      	movs	r0, #38	@ 0x26
 8007c7a:	f001 fe0c 	bl	8009896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007c7e:	2026      	movs	r0, #38	@ 0x26
 8007c80:	f001 fe23 	bl	80098ca <HAL_NVIC_EnableIRQ>
}
 8007c84:	bf00      	nop
 8007c86:	3780      	adds	r7, #128	@ 0x80
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	40008000 	.word	0x40008000
 8007c90:	40021000 	.word	0x40021000
 8007c94:	48000400 	.word	0x48000400
 8007c98:	20001f9c 	.word	0x20001f9c
 8007c9c:	40020044 	.word	0x40020044
 8007ca0:	20001ffc 	.word	0x20001ffc
 8007ca4:	40020058 	.word	0x40020058
 8007ca8:	40004400 	.word	0x40004400
 8007cac:	2000205c 	.word	0x2000205c
 8007cb0:	4002001c 	.word	0x4002001c
 8007cb4:	200020bc 	.word	0x200020bc
 8007cb8:	40020030 	.word	0x40020030

08007cbc <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8007cbc:	480d      	ldr	r0, [pc, #52]	@ (8007cf4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007cbe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007cc0:	f7ff f994 	bl	8006fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007cc4:	480c      	ldr	r0, [pc, #48]	@ (8007cf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8007cc6:	490d      	ldr	r1, [pc, #52]	@ (8007cfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8007cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8007d00 <LoopForever+0xe>)
  movs r3, #0
 8007cca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8007ccc:	e002      	b.n	8007cd4 <LoopCopyDataInit>

08007cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007cd2:	3304      	adds	r3, #4

08007cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007cd8:	d3f9      	bcc.n	8007cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007cda:	4a0a      	ldr	r2, [pc, #40]	@ (8007d04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007cdc:	4c0a      	ldr	r4, [pc, #40]	@ (8007d08 <LoopForever+0x16>)
  movs r3, #0
 8007cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007ce0:	e001      	b.n	8007ce6 <LoopFillZerobss>

08007ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007ce4:	3204      	adds	r2, #4

08007ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007ce8:	d3fb      	bcc.n	8007ce2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007cea:	f007 fc1b 	bl	800f524 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007cee:	f7fc fe6d 	bl	80049cc <main>

08007cf2 <LoopForever>:

LoopForever:
    b LoopForever
 8007cf2:	e7fe      	b.n	8007cf2 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8007cf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007cfc:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8007d00:	080119d8 	.word	0x080119d8
  ldr r2, =_sbss
 8007d04:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8007d08:	20002268 	.word	0x20002268

08007d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007d0c:	e7fe      	b.n	8007d0c <ADC1_2_IRQHandler>

08007d0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b082      	sub	sp, #8
 8007d12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d18:	2003      	movs	r0, #3
 8007d1a:	f001 fdb1 	bl	8009880 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007d1e:	2000      	movs	r0, #0
 8007d20:	f000 f80e 	bl	8007d40 <HAL_InitTick>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d002      	beq.n	8007d30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	71fb      	strb	r3, [r7, #7]
 8007d2e:	e001      	b.n	8007d34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007d30:	f7ff f84a 	bl	8006dc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007d34:	79fb      	ldrb	r3, [r7, #7]

}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
	...

08007d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8007d4c:	4b16      	ldr	r3, [pc, #88]	@ (8007da8 <HAL_InitTick+0x68>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d022      	beq.n	8007d9a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8007d54:	4b15      	ldr	r3, [pc, #84]	@ (8007dac <HAL_InitTick+0x6c>)
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	4b13      	ldr	r3, [pc, #76]	@ (8007da8 <HAL_InitTick+0x68>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007d60:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f001 fdbc 	bl	80098e6 <HAL_SYSTICK_Config>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10f      	bne.n	8007d94 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b0f      	cmp	r3, #15
 8007d78:	d809      	bhi.n	8007d8e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	6879      	ldr	r1, [r7, #4]
 8007d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d82:	f001 fd88 	bl	8009896 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007d86:	4a0a      	ldr	r2, [pc, #40]	@ (8007db0 <HAL_InitTick+0x70>)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6013      	str	r3, [r2, #0]
 8007d8c:	e007      	b.n	8007d9e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	73fb      	strb	r3, [r7, #15]
 8007d92:	e004      	b.n	8007d9e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	73fb      	strb	r3, [r7, #15]
 8007d98:	e001      	b.n	8007d9e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	20000104 	.word	0x20000104
 8007dac:	200000fc 	.word	0x200000fc
 8007db0:	20000100 	.word	0x20000100

08007db4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007db4:	b480      	push	{r7}
 8007db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007db8:	4b05      	ldr	r3, [pc, #20]	@ (8007dd0 <HAL_IncTick+0x1c>)
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	4b05      	ldr	r3, [pc, #20]	@ (8007dd4 <HAL_IncTick+0x20>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	4a03      	ldr	r2, [pc, #12]	@ (8007dd0 <HAL_IncTick+0x1c>)
 8007dc4:	6013      	str	r3, [r2, #0]
}
 8007dc6:	bf00      	nop
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	2000211c 	.word	0x2000211c
 8007dd4:	20000104 	.word	0x20000104

08007dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	af00      	add	r7, sp, #0
  return uwTick;
 8007ddc:	4b03      	ldr	r3, [pc, #12]	@ (8007dec <HAL_GetTick+0x14>)
 8007dde:	681b      	ldr	r3, [r3, #0]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	2000211c 	.word	0x2000211c

08007df0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	431a      	orrs	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	609a      	str	r2, [r3, #8]
}
 8007e0a:	bf00      	nop
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b083      	sub	sp, #12
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	431a      	orrs	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	609a      	str	r2, [r3, #8]
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b087      	sub	sp, #28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
 8007e64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	3360      	adds	r3, #96	@ 0x60
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4413      	add	r3, r2
 8007e72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	4b08      	ldr	r3, [pc, #32]	@ (8007e9c <LL_ADC_SetOffset+0x44>)
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	430a      	orrs	r2, r1
 8007e86:	4313      	orrs	r3, r2
 8007e88:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007e90:	bf00      	nop
 8007e92:	371c      	adds	r7, #28
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	03fff000 	.word	0x03fff000

08007ea0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	3360      	adds	r3, #96	@ 0x60
 8007eae:	461a      	mov	r2, r3
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4413      	add	r3, r2
 8007eb6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	3360      	adds	r3, #96	@ 0x60
 8007edc:	461a      	mov	r2, r3
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	431a      	orrs	r2, r3
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007ef6:	bf00      	nop
 8007ef8:	371c      	adds	r7, #28
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b087      	sub	sp, #28
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	3360      	adds	r3, #96	@ 0x60
 8007f12:	461a      	mov	r2, r3
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	431a      	orrs	r2, r3
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8007f2c:	bf00      	nop
 8007f2e:	371c      	adds	r7, #28
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b087      	sub	sp, #28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	3360      	adds	r3, #96	@ 0x60
 8007f48:	461a      	mov	r2, r3
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	431a      	orrs	r2, r3
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8007f62:	bf00      	nop
 8007f64:	371c      	adds	r7, #28
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b083      	sub	sp, #12
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	695b      	ldr	r3, [r3, #20]
 8007f7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	431a      	orrs	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	615a      	str	r2, [r3, #20]
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d101      	bne.n	8007fac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e000      	b.n	8007fae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007fba:	b480      	push	{r7}
 8007fbc:	b087      	sub	sp, #28
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	60f8      	str	r0, [r7, #12]
 8007fc2:	60b9      	str	r1, [r7, #8]
 8007fc4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	3330      	adds	r3, #48	@ 0x30
 8007fca:	461a      	mov	r2, r3
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	0a1b      	lsrs	r3, r3, #8
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	f003 030c 	and.w	r3, r3, #12
 8007fd6:	4413      	add	r3, r2
 8007fd8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	f003 031f 	and.w	r3, r3, #31
 8007fe4:	211f      	movs	r1, #31
 8007fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8007fea:	43db      	mvns	r3, r3
 8007fec:	401a      	ands	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	0e9b      	lsrs	r3, r3, #26
 8007ff2:	f003 011f 	and.w	r1, r3, #31
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	f003 031f 	and.w	r3, r3, #31
 8007ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8008000:	431a      	orrs	r2, r3
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008006:	bf00      	nop
 8008008:	371c      	adds	r7, #28
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008012:	b480      	push	{r7}
 8008014:	b087      	sub	sp, #28
 8008016:	af00      	add	r7, sp, #0
 8008018:	60f8      	str	r0, [r7, #12]
 800801a:	60b9      	str	r1, [r7, #8]
 800801c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3314      	adds	r3, #20
 8008022:	461a      	mov	r2, r3
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	0e5b      	lsrs	r3, r3, #25
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	f003 0304 	and.w	r3, r3, #4
 800802e:	4413      	add	r3, r2
 8008030:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	0d1b      	lsrs	r3, r3, #20
 800803a:	f003 031f 	and.w	r3, r3, #31
 800803e:	2107      	movs	r1, #7
 8008040:	fa01 f303 	lsl.w	r3, r1, r3
 8008044:	43db      	mvns	r3, r3
 8008046:	401a      	ands	r2, r3
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	0d1b      	lsrs	r3, r3, #20
 800804c:	f003 031f 	and.w	r3, r3, #31
 8008050:	6879      	ldr	r1, [r7, #4]
 8008052:	fa01 f303 	lsl.w	r3, r1, r3
 8008056:	431a      	orrs	r2, r3
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800805c:	bf00      	nop
 800805e:	371c      	adds	r7, #28
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008080:	43db      	mvns	r3, r3
 8008082:	401a      	ands	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f003 0318 	and.w	r3, r3, #24
 800808a:	4908      	ldr	r1, [pc, #32]	@ (80080ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800808c:	40d9      	lsrs	r1, r3
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	400b      	ands	r3, r1
 8008092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008096:	431a      	orrs	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800809e:	bf00      	nop
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	0007ffff 	.word	0x0007ffff

080080b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f003 031f 	and.w	r3, r3, #31
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80080dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	6093      	str	r3, [r2, #8]
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008100:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008104:	d101      	bne.n	800810a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008106:	2301      	movs	r3, #1
 8008108:	e000      	b.n	800810c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8008128:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800812c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008150:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008154:	d101      	bne.n	800815a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008156:	2301      	movs	r3, #1
 8008158:	e000      	b.n	800815c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008178:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800817c:	f043 0201 	orr.w	r2, r3, #1
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80081a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80081a4:	f043 0202 	orr.w	r2, r3, #2
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80081ac:	bf00      	nop
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d101      	bne.n	80081d0 <LL_ADC_IsEnabled+0x18>
 80081cc:	2301      	movs	r3, #1
 80081ce:	e000      	b.n	80081d2 <LL_ADC_IsEnabled+0x1a>
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr

080081de <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80081de:	b480      	push	{r7}
 80081e0:	b083      	sub	sp, #12
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	f003 0302 	and.w	r3, r3, #2
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d101      	bne.n	80081f6 <LL_ADC_IsDisableOngoing+0x18>
 80081f2:	2301      	movs	r3, #1
 80081f4:	e000      	b.n	80081f8 <LL_ADC_IsDisableOngoing+0x1a>
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008214:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008218:	f043 0204 	orr.w	r2, r3, #4
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	f003 0304 	and.w	r3, r3, #4
 800823c:	2b04      	cmp	r3, #4
 800823e:	d101      	bne.n	8008244 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008240:	2301      	movs	r3, #1
 8008242:	e000      	b.n	8008246 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	370c      	adds	r7, #12
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008252:	b480      	push	{r7}
 8008254:	b083      	sub	sp, #12
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	f003 0308 	and.w	r3, r3, #8
 8008262:	2b08      	cmp	r3, #8
 8008264:	d101      	bne.n	800826a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008266:	2301      	movs	r3, #1
 8008268:	e000      	b.n	800826c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008278:	b590      	push	{r4, r7, lr}
 800827a:	b089      	sub	sp, #36	@ 0x24
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008280:	2300      	movs	r3, #0
 8008282:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8008284:	2300      	movs	r3, #0
 8008286:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d101      	bne.n	8008292 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e1a9      	b.n	80085e6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800829c:	2b00      	cmp	r3, #0
 800829e:	d109      	bne.n	80082b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7fc f9ed 	bl	8004680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7ff ff19 	bl	80080f0 <LL_ADC_IsDeepPowerDownEnabled>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d004      	beq.n	80082ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7ff feff 	bl	80080cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7ff ff34 	bl	8008140 <LL_ADC_IsInternalRegulatorEnabled>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d115      	bne.n	800830a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7ff ff18 	bl	8008118 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80082e8:	4b9c      	ldr	r3, [pc, #624]	@ (800855c <HAL_ADC_Init+0x2e4>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	099b      	lsrs	r3, r3, #6
 80082ee:	4a9c      	ldr	r2, [pc, #624]	@ (8008560 <HAL_ADC_Init+0x2e8>)
 80082f0:	fba2 2303 	umull	r2, r3, r2, r3
 80082f4:	099b      	lsrs	r3, r3, #6
 80082f6:	3301      	adds	r3, #1
 80082f8:	005b      	lsls	r3, r3, #1
 80082fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80082fc:	e002      	b.n	8008304 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3b01      	subs	r3, #1
 8008302:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1f9      	bne.n	80082fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4618      	mov	r0, r3
 8008310:	f7ff ff16 	bl	8008140 <LL_ADC_IsInternalRegulatorEnabled>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10d      	bne.n	8008336 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800831e:	f043 0210 	orr.w	r2, r3, #16
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800832a:	f043 0201 	orr.w	r2, r3, #1
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4618      	mov	r0, r3
 800833c:	f7ff ff76 	bl	800822c <LL_ADC_REG_IsConversionOngoing>
 8008340:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008346:	f003 0310 	and.w	r3, r3, #16
 800834a:	2b00      	cmp	r3, #0
 800834c:	f040 8142 	bne.w	80085d4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	2b00      	cmp	r3, #0
 8008354:	f040 813e 	bne.w	80085d4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800835c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8008360:	f043 0202 	orr.w	r2, r3, #2
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4618      	mov	r0, r3
 800836e:	f7ff ff23 	bl	80081b8 <LL_ADC_IsEnabled>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d141      	bne.n	80083fc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008380:	d004      	beq.n	800838c <HAL_ADC_Init+0x114>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a77      	ldr	r2, [pc, #476]	@ (8008564 <HAL_ADC_Init+0x2ec>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d10f      	bne.n	80083ac <HAL_ADC_Init+0x134>
 800838c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8008390:	f7ff ff12 	bl	80081b8 <LL_ADC_IsEnabled>
 8008394:	4604      	mov	r4, r0
 8008396:	4873      	ldr	r0, [pc, #460]	@ (8008564 <HAL_ADC_Init+0x2ec>)
 8008398:	f7ff ff0e 	bl	80081b8 <LL_ADC_IsEnabled>
 800839c:	4603      	mov	r3, r0
 800839e:	4323      	orrs	r3, r4
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	bf0c      	ite	eq
 80083a4:	2301      	moveq	r3, #1
 80083a6:	2300      	movne	r3, #0
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	e012      	b.n	80083d2 <HAL_ADC_Init+0x15a>
 80083ac:	486e      	ldr	r0, [pc, #440]	@ (8008568 <HAL_ADC_Init+0x2f0>)
 80083ae:	f7ff ff03 	bl	80081b8 <LL_ADC_IsEnabled>
 80083b2:	4604      	mov	r4, r0
 80083b4:	486d      	ldr	r0, [pc, #436]	@ (800856c <HAL_ADC_Init+0x2f4>)
 80083b6:	f7ff feff 	bl	80081b8 <LL_ADC_IsEnabled>
 80083ba:	4603      	mov	r3, r0
 80083bc:	431c      	orrs	r4, r3
 80083be:	486c      	ldr	r0, [pc, #432]	@ (8008570 <HAL_ADC_Init+0x2f8>)
 80083c0:	f7ff fefa 	bl	80081b8 <LL_ADC_IsEnabled>
 80083c4:	4603      	mov	r3, r0
 80083c6:	4323      	orrs	r3, r4
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	bf0c      	ite	eq
 80083cc:	2301      	moveq	r3, #1
 80083ce:	2300      	movne	r3, #0
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d012      	beq.n	80083fc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083de:	d004      	beq.n	80083ea <HAL_ADC_Init+0x172>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a5f      	ldr	r2, [pc, #380]	@ (8008564 <HAL_ADC_Init+0x2ec>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d101      	bne.n	80083ee <HAL_ADC_Init+0x176>
 80083ea:	4a62      	ldr	r2, [pc, #392]	@ (8008574 <HAL_ADC_Init+0x2fc>)
 80083ec:	e000      	b.n	80083f0 <HAL_ADC_Init+0x178>
 80083ee:	4a62      	ldr	r2, [pc, #392]	@ (8008578 <HAL_ADC_Init+0x300>)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	4619      	mov	r1, r3
 80083f6:	4610      	mov	r0, r2
 80083f8:	f7ff fcfa 	bl	8007df0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	7f5b      	ldrb	r3, [r3, #29]
 8008400:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008406:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800840c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8008412:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800841a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800841c:	4313      	orrs	r3, r2
 800841e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008426:	2b01      	cmp	r3, #1
 8008428:	d106      	bne.n	8008438 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800842e:	3b01      	subs	r3, #1
 8008430:	045b      	lsls	r3, r3, #17
 8008432:	69ba      	ldr	r2, [r7, #24]
 8008434:	4313      	orrs	r3, r2
 8008436:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800843c:	2b00      	cmp	r3, #0
 800843e:	d009      	beq.n	8008454 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008444:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800844c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800844e:	69ba      	ldr	r2, [r7, #24]
 8008450:	4313      	orrs	r3, r2
 8008452:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68da      	ldr	r2, [r3, #12]
 800845a:	4b48      	ldr	r3, [pc, #288]	@ (800857c <HAL_ADC_Init+0x304>)
 800845c:	4013      	ands	r3, r2
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	6812      	ldr	r2, [r2, #0]
 8008462:	69b9      	ldr	r1, [r7, #24]
 8008464:	430b      	orrs	r3, r1
 8008466:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	430a      	orrs	r2, r1
 800847c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4618      	mov	r0, r3
 8008484:	f7ff fee5 	bl	8008252 <LL_ADC_INJ_IsConversionOngoing>
 8008488:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d17f      	bne.n	8008590 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d17c      	bne.n	8008590 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800849a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80084a2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80084a4:	4313      	orrs	r3, r2
 80084a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80084b2:	f023 0302 	bic.w	r3, r3, #2
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	6812      	ldr	r2, [r2, #0]
 80084ba:	69b9      	ldr	r1, [r7, #24]
 80084bc:	430b      	orrs	r3, r1
 80084be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d017      	beq.n	80084f8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	691a      	ldr	r2, [r3, #16]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80084d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80084e0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80084e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	6911      	ldr	r1, [r2, #16]
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	6812      	ldr	r2, [r2, #0]
 80084f0:	430b      	orrs	r3, r1
 80084f2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80084f6:	e013      	b.n	8008520 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	691a      	ldr	r2, [r3, #16]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008506:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	6812      	ldr	r2, [r2, #0]
 8008514:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8008518:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800851c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008526:	2b01      	cmp	r3, #1
 8008528:	d12a      	bne.n	8008580 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008534:	f023 0304 	bic.w	r3, r3, #4
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008540:	4311      	orrs	r1, r2
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008546:	4311      	orrs	r1, r2
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800854c:	430a      	orrs	r2, r1
 800854e:	431a      	orrs	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f042 0201 	orr.w	r2, r2, #1
 8008558:	611a      	str	r2, [r3, #16]
 800855a:	e019      	b.n	8008590 <HAL_ADC_Init+0x318>
 800855c:	200000fc 	.word	0x200000fc
 8008560:	053e2d63 	.word	0x053e2d63
 8008564:	50000100 	.word	0x50000100
 8008568:	50000400 	.word	0x50000400
 800856c:	50000500 	.word	0x50000500
 8008570:	50000600 	.word	0x50000600
 8008574:	50000300 	.word	0x50000300
 8008578:	50000700 	.word	0x50000700
 800857c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	691a      	ldr	r2, [r3, #16]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f022 0201 	bic.w	r2, r2, #1
 800858e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	695b      	ldr	r3, [r3, #20]
 8008594:	2b01      	cmp	r3, #1
 8008596:	d10c      	bne.n	80085b2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800859e:	f023 010f 	bic.w	r1, r3, #15
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a1b      	ldr	r3, [r3, #32]
 80085a6:	1e5a      	subs	r2, r3, #1
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	430a      	orrs	r2, r1
 80085ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80085b0:	e007      	b.n	80085c2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f022 020f 	bic.w	r2, r2, #15
 80085c0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085c6:	f023 0303 	bic.w	r3, r3, #3
 80085ca:	f043 0201 	orr.w	r2, r3, #1
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80085d2:	e007      	b.n	80085e4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085d8:	f043 0210 	orr.w	r2, r3, #16
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80085e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3724      	adds	r7, #36	@ 0x24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd90      	pop	{r4, r7, pc}
 80085ee:	bf00      	nop

080085f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008604:	d004      	beq.n	8008610 <HAL_ADC_Start_DMA+0x20>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a5a      	ldr	r2, [pc, #360]	@ (8008774 <HAL_ADC_Start_DMA+0x184>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d101      	bne.n	8008614 <HAL_ADC_Start_DMA+0x24>
 8008610:	4b59      	ldr	r3, [pc, #356]	@ (8008778 <HAL_ADC_Start_DMA+0x188>)
 8008612:	e000      	b.n	8008616 <HAL_ADC_Start_DMA+0x26>
 8008614:	4b59      	ldr	r3, [pc, #356]	@ (800877c <HAL_ADC_Start_DMA+0x18c>)
 8008616:	4618      	mov	r0, r3
 8008618:	f7ff fd4a 	bl	80080b0 <LL_ADC_GetMultimode>
 800861c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4618      	mov	r0, r3
 8008624:	f7ff fe02 	bl	800822c <LL_ADC_REG_IsConversionOngoing>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	f040 809b 	bne.w	8008766 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008636:	2b01      	cmp	r3, #1
 8008638:	d101      	bne.n	800863e <HAL_ADC_Start_DMA+0x4e>
 800863a:	2302      	movs	r3, #2
 800863c:	e096      	b.n	800876c <HAL_ADC_Start_DMA+0x17c>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a4d      	ldr	r2, [pc, #308]	@ (8008780 <HAL_ADC_Start_DMA+0x190>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d008      	beq.n	8008662 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d005      	beq.n	8008662 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	2b05      	cmp	r3, #5
 800865a:	d002      	beq.n	8008662 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	2b09      	cmp	r3, #9
 8008660:	d17a      	bne.n	8008758 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f000 fcf6 	bl	8009054 <ADC_Enable>
 8008668:	4603      	mov	r3, r0
 800866a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800866c:	7dfb      	ldrb	r3, [r7, #23]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d16d      	bne.n	800874e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008676:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800867a:	f023 0301 	bic.w	r3, r3, #1
 800867e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a3a      	ldr	r2, [pc, #232]	@ (8008774 <HAL_ADC_Start_DMA+0x184>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d009      	beq.n	80086a4 <HAL_ADC_Start_DMA+0xb4>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a3b      	ldr	r2, [pc, #236]	@ (8008784 <HAL_ADC_Start_DMA+0x194>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d002      	beq.n	80086a0 <HAL_ADC_Start_DMA+0xb0>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	e003      	b.n	80086a8 <HAL_ADC_Start_DMA+0xb8>
 80086a0:	4b39      	ldr	r3, [pc, #228]	@ (8008788 <HAL_ADC_Start_DMA+0x198>)
 80086a2:	e001      	b.n	80086a8 <HAL_ADC_Start_DMA+0xb8>
 80086a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	6812      	ldr	r2, [r2, #0]
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d002      	beq.n	80086b6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d105      	bne.n	80086c2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086ba:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d006      	beq.n	80086dc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086d2:	f023 0206 	bic.w	r2, r3, #6
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	661a      	str	r2, [r3, #96]	@ 0x60
 80086da:	e002      	b.n	80086e2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2200      	movs	r2, #0
 80086e0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086e6:	4a29      	ldr	r2, [pc, #164]	@ (800878c <HAL_ADC_Start_DMA+0x19c>)
 80086e8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ee:	4a28      	ldr	r2, [pc, #160]	@ (8008790 <HAL_ADC_Start_DMA+0x1a0>)
 80086f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086f6:	4a27      	ldr	r2, [pc, #156]	@ (8008794 <HAL_ADC_Start_DMA+0x1a4>)
 80086f8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	221c      	movs	r2, #28
 8008700:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	685a      	ldr	r2, [r3, #4]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f042 0210 	orr.w	r2, r2, #16
 8008718:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68da      	ldr	r2, [r3, #12]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f042 0201 	orr.w	r2, r2, #1
 8008728:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	3340      	adds	r3, #64	@ 0x40
 8008734:	4619      	mov	r1, r3
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f001 f989 	bl	8009a50 <HAL_DMA_Start_IT>
 800873e:	4603      	mov	r3, r0
 8008740:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4618      	mov	r0, r3
 8008748:	f7ff fd5c 	bl	8008204 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800874c:	e00d      	b.n	800876a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8008756:	e008      	b.n	800876a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8008764:	e001      	b.n	800876a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008766:	2302      	movs	r3, #2
 8008768:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800876a:	7dfb      	ldrb	r3, [r7, #23]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3718      	adds	r7, #24
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	50000100 	.word	0x50000100
 8008778:	50000300 	.word	0x50000300
 800877c:	50000700 	.word	0x50000700
 8008780:	50000600 	.word	0x50000600
 8008784:	50000500 	.word	0x50000500
 8008788:	50000400 	.word	0x50000400
 800878c:	0800923f 	.word	0x0800923f
 8008790:	08009317 	.word	0x08009317
 8008794:	08009333 	.word	0x08009333

08008798 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80087b4:	bf00      	nop
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80087c8:	bf00      	nop
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b0b6      	sub	sp, #216	@ 0xd8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80087de:	2300      	movs	r3, #0
 80087e0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80087e4:	2300      	movs	r3, #0
 80087e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d102      	bne.n	80087f8 <HAL_ADC_ConfigChannel+0x24>
 80087f2:	2302      	movs	r3, #2
 80087f4:	f000 bc13 	b.w	800901e <HAL_ADC_ConfigChannel+0x84a>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4618      	mov	r0, r3
 8008806:	f7ff fd11 	bl	800822c <LL_ADC_REG_IsConversionOngoing>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	f040 83f3 	bne.w	8008ff8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6818      	ldr	r0, [r3, #0]
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	6859      	ldr	r1, [r3, #4]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	461a      	mov	r2, r3
 8008820:	f7ff fbcb 	bl	8007fba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4618      	mov	r0, r3
 800882a:	f7ff fcff 	bl	800822c <LL_ADC_REG_IsConversionOngoing>
 800882e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4618      	mov	r0, r3
 8008838:	f7ff fd0b 	bl	8008252 <LL_ADC_INJ_IsConversionOngoing>
 800883c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008840:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008844:	2b00      	cmp	r3, #0
 8008846:	f040 81d9 	bne.w	8008bfc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800884a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800884e:	2b00      	cmp	r3, #0
 8008850:	f040 81d4 	bne.w	8008bfc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800885c:	d10f      	bne.n	800887e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6818      	ldr	r0, [r3, #0]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2200      	movs	r2, #0
 8008868:	4619      	mov	r1, r3
 800886a:	f7ff fbd2 	bl	8008012 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8008876:	4618      	mov	r0, r3
 8008878:	f7ff fb79 	bl	8007f6e <LL_ADC_SetSamplingTimeCommonConfig>
 800887c:	e00e      	b.n	800889c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6818      	ldr	r0, [r3, #0]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	6819      	ldr	r1, [r3, #0]
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	461a      	mov	r2, r3
 800888c:	f7ff fbc1 	bl	8008012 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2100      	movs	r1, #0
 8008896:	4618      	mov	r0, r3
 8008898:	f7ff fb69 	bl	8007f6e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	695a      	ldr	r2, [r3, #20]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	08db      	lsrs	r3, r3, #3
 80088a8:	f003 0303 	and.w	r3, r3, #3
 80088ac:	005b      	lsls	r3, r3, #1
 80088ae:	fa02 f303 	lsl.w	r3, r2, r3
 80088b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	2b04      	cmp	r3, #4
 80088bc:	d022      	beq.n	8008904 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6818      	ldr	r0, [r3, #0]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	6919      	ldr	r1, [r3, #16]
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80088ce:	f7ff fac3 	bl	8007e58 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6818      	ldr	r0, [r3, #0]
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	6919      	ldr	r1, [r3, #16]
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	699b      	ldr	r3, [r3, #24]
 80088de:	461a      	mov	r2, r3
 80088e0:	f7ff fb0f 	bl	8007f02 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6818      	ldr	r0, [r3, #0]
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d102      	bne.n	80088fa <HAL_ADC_ConfigChannel+0x126>
 80088f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80088f8:	e000      	b.n	80088fc <HAL_ADC_ConfigChannel+0x128>
 80088fa:	2300      	movs	r3, #0
 80088fc:	461a      	mov	r2, r3
 80088fe:	f7ff fb1b 	bl	8007f38 <LL_ADC_SetOffsetSaturation>
 8008902:	e17b      	b.n	8008bfc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2100      	movs	r1, #0
 800890a:	4618      	mov	r0, r3
 800890c:	f7ff fac8 	bl	8007ea0 <LL_ADC_GetOffsetChannel>
 8008910:	4603      	mov	r3, r0
 8008912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10a      	bne.n	8008930 <HAL_ADC_ConfigChannel+0x15c>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2100      	movs	r1, #0
 8008920:	4618      	mov	r0, r3
 8008922:	f7ff fabd 	bl	8007ea0 <LL_ADC_GetOffsetChannel>
 8008926:	4603      	mov	r3, r0
 8008928:	0e9b      	lsrs	r3, r3, #26
 800892a:	f003 021f 	and.w	r2, r3, #31
 800892e:	e01e      	b.n	800896e <HAL_ADC_ConfigChannel+0x19a>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2100      	movs	r1, #0
 8008936:	4618      	mov	r0, r3
 8008938:	f7ff fab2 	bl	8007ea0 <LL_ADC_GetOffsetChannel>
 800893c:	4603      	mov	r3, r0
 800893e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008942:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008946:	fa93 f3a3 	rbit	r3, r3
 800894a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800894e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008952:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008956:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800895a:	2b00      	cmp	r3, #0
 800895c:	d101      	bne.n	8008962 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800895e:	2320      	movs	r3, #32
 8008960:	e004      	b.n	800896c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8008962:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008966:	fab3 f383 	clz	r3, r3
 800896a:	b2db      	uxtb	r3, r3
 800896c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008976:	2b00      	cmp	r3, #0
 8008978:	d105      	bne.n	8008986 <HAL_ADC_ConfigChannel+0x1b2>
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	0e9b      	lsrs	r3, r3, #26
 8008980:	f003 031f 	and.w	r3, r3, #31
 8008984:	e018      	b.n	80089b8 <HAL_ADC_ConfigChannel+0x1e4>
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800898e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008992:	fa93 f3a3 	rbit	r3, r3
 8008996:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800899a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800899e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80089a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d101      	bne.n	80089ae <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80089aa:	2320      	movs	r3, #32
 80089ac:	e004      	b.n	80089b8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80089ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80089b2:	fab3 f383 	clz	r3, r3
 80089b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d106      	bne.n	80089ca <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2200      	movs	r2, #0
 80089c2:	2100      	movs	r1, #0
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7ff fa81 	bl	8007ecc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2101      	movs	r1, #1
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7ff fa65 	bl	8007ea0 <LL_ADC_GetOffsetChannel>
 80089d6:	4603      	mov	r3, r0
 80089d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10a      	bne.n	80089f6 <HAL_ADC_ConfigChannel+0x222>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2101      	movs	r1, #1
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7ff fa5a 	bl	8007ea0 <LL_ADC_GetOffsetChannel>
 80089ec:	4603      	mov	r3, r0
 80089ee:	0e9b      	lsrs	r3, r3, #26
 80089f0:	f003 021f 	and.w	r2, r3, #31
 80089f4:	e01e      	b.n	8008a34 <HAL_ADC_ConfigChannel+0x260>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2101      	movs	r1, #1
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7ff fa4f 	bl	8007ea0 <LL_ADC_GetOffsetChannel>
 8008a02:	4603      	mov	r3, r0
 8008a04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008a0c:	fa93 f3a3 	rbit	r3, r3
 8008a10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8008a14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8008a1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d101      	bne.n	8008a28 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8008a24:	2320      	movs	r3, #32
 8008a26:	e004      	b.n	8008a32 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8008a28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008a2c:	fab3 f383 	clz	r3, r3
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d105      	bne.n	8008a4c <HAL_ADC_ConfigChannel+0x278>
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	0e9b      	lsrs	r3, r3, #26
 8008a46:	f003 031f 	and.w	r3, r3, #31
 8008a4a:	e018      	b.n	8008a7e <HAL_ADC_ConfigChannel+0x2aa>
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a58:	fa93 f3a3 	rbit	r3, r3
 8008a5c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8008a60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008a64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8008a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d101      	bne.n	8008a74 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8008a70:	2320      	movs	r3, #32
 8008a72:	e004      	b.n	8008a7e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8008a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008a78:	fab3 f383 	clz	r3, r3
 8008a7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d106      	bne.n	8008a90 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2200      	movs	r2, #0
 8008a88:	2101      	movs	r1, #1
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7ff fa1e 	bl	8007ecc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2102      	movs	r1, #2
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7ff fa02 	bl	8007ea0 <LL_ADC_GetOffsetChannel>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10a      	bne.n	8008abc <HAL_ADC_ConfigChannel+0x2e8>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2102      	movs	r1, #2
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7ff f9f7 	bl	8007ea0 <LL_ADC_GetOffsetChannel>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	0e9b      	lsrs	r3, r3, #26
 8008ab6:	f003 021f 	and.w	r2, r3, #31
 8008aba:	e01e      	b.n	8008afa <HAL_ADC_ConfigChannel+0x326>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2102      	movs	r1, #2
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7ff f9ec 	bl	8007ea0 <LL_ADC_GetOffsetChannel>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ad2:	fa93 f3a3 	rbit	r3, r3
 8008ad6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8008ada:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ade:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8008ae2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d101      	bne.n	8008aee <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8008aea:	2320      	movs	r3, #32
 8008aec:	e004      	b.n	8008af8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8008aee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008af2:	fab3 f383 	clz	r3, r3
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d105      	bne.n	8008b12 <HAL_ADC_ConfigChannel+0x33e>
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	0e9b      	lsrs	r3, r3, #26
 8008b0c:	f003 031f 	and.w	r3, r3, #31
 8008b10:	e016      	b.n	8008b40 <HAL_ADC_ConfigChannel+0x36c>
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008b1e:	fa93 f3a3 	rbit	r3, r3
 8008b22:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8008b24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8008b2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d101      	bne.n	8008b36 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8008b32:	2320      	movs	r3, #32
 8008b34:	e004      	b.n	8008b40 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8008b36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b3a:	fab3 f383 	clz	r3, r3
 8008b3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d106      	bne.n	8008b52 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	2102      	movs	r1, #2
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7ff f9bd 	bl	8007ecc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2103      	movs	r1, #3
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7ff f9a1 	bl	8007ea0 <LL_ADC_GetOffsetChannel>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10a      	bne.n	8008b7e <HAL_ADC_ConfigChannel+0x3aa>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2103      	movs	r1, #3
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7ff f996 	bl	8007ea0 <LL_ADC_GetOffsetChannel>
 8008b74:	4603      	mov	r3, r0
 8008b76:	0e9b      	lsrs	r3, r3, #26
 8008b78:	f003 021f 	and.w	r2, r3, #31
 8008b7c:	e017      	b.n	8008bae <HAL_ADC_ConfigChannel+0x3da>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2103      	movs	r1, #3
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7ff f98b 	bl	8007ea0 <LL_ADC_GetOffsetChannel>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b90:	fa93 f3a3 	rbit	r3, r3
 8008b94:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8008b96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b98:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8008b9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8008ba0:	2320      	movs	r3, #32
 8008ba2:	e003      	b.n	8008bac <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8008ba4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ba6:	fab3 f383 	clz	r3, r3
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d105      	bne.n	8008bc6 <HAL_ADC_ConfigChannel+0x3f2>
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	0e9b      	lsrs	r3, r3, #26
 8008bc0:	f003 031f 	and.w	r3, r3, #31
 8008bc4:	e011      	b.n	8008bea <HAL_ADC_ConfigChannel+0x416>
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008bce:	fa93 f3a3 	rbit	r3, r3
 8008bd2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8008bd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008bd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8008bd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8008bde:	2320      	movs	r3, #32
 8008be0:	e003      	b.n	8008bea <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8008be2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008be4:	fab3 f383 	clz	r3, r3
 8008be8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d106      	bne.n	8008bfc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	2103      	movs	r1, #3
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7ff f968 	bl	8007ecc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7ff fad9 	bl	80081b8 <LL_ADC_IsEnabled>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f040 813d 	bne.w	8008e88 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6818      	ldr	r0, [r3, #0]
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	6819      	ldr	r1, [r3, #0]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	f7ff fa24 	bl	8008068 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	4aa2      	ldr	r2, [pc, #648]	@ (8008eb0 <HAL_ADC_ConfigChannel+0x6dc>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	f040 812e 	bne.w	8008e88 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10b      	bne.n	8008c54 <HAL_ADC_ConfigChannel+0x480>
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	0e9b      	lsrs	r3, r3, #26
 8008c42:	3301      	adds	r3, #1
 8008c44:	f003 031f 	and.w	r3, r3, #31
 8008c48:	2b09      	cmp	r3, #9
 8008c4a:	bf94      	ite	ls
 8008c4c:	2301      	movls	r3, #1
 8008c4e:	2300      	movhi	r3, #0
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	e019      	b.n	8008c88 <HAL_ADC_ConfigChannel+0x4b4>
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c5c:	fa93 f3a3 	rbit	r3, r3
 8008c60:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8008c62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c64:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8008c66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d101      	bne.n	8008c70 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8008c6c:	2320      	movs	r3, #32
 8008c6e:	e003      	b.n	8008c78 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8008c70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c72:	fab3 f383 	clz	r3, r3
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	3301      	adds	r3, #1
 8008c7a:	f003 031f 	and.w	r3, r3, #31
 8008c7e:	2b09      	cmp	r3, #9
 8008c80:	bf94      	ite	ls
 8008c82:	2301      	movls	r3, #1
 8008c84:	2300      	movhi	r3, #0
 8008c86:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d079      	beq.n	8008d80 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d107      	bne.n	8008ca8 <HAL_ADC_ConfigChannel+0x4d4>
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	0e9b      	lsrs	r3, r3, #26
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	069b      	lsls	r3, r3, #26
 8008ca2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008ca6:	e015      	b.n	8008cd4 <HAL_ADC_ConfigChannel+0x500>
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cb0:	fa93 f3a3 	rbit	r3, r3
 8008cb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8008cb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cb8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8008cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d101      	bne.n	8008cc4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8008cc0:	2320      	movs	r3, #32
 8008cc2:	e003      	b.n	8008ccc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8008cc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cc6:	fab3 f383 	clz	r3, r3
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	3301      	adds	r3, #1
 8008cce:	069b      	lsls	r3, r3, #26
 8008cd0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d109      	bne.n	8008cf4 <HAL_ADC_ConfigChannel+0x520>
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	0e9b      	lsrs	r3, r3, #26
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	f003 031f 	and.w	r3, r3, #31
 8008cec:	2101      	movs	r1, #1
 8008cee:	fa01 f303 	lsl.w	r3, r1, r3
 8008cf2:	e017      	b.n	8008d24 <HAL_ADC_ConfigChannel+0x550>
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cfc:	fa93 f3a3 	rbit	r3, r3
 8008d00:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8008d02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d04:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8008d06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d101      	bne.n	8008d10 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8008d0c:	2320      	movs	r3, #32
 8008d0e:	e003      	b.n	8008d18 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8008d10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d12:	fab3 f383 	clz	r3, r3
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	3301      	adds	r3, #1
 8008d1a:	f003 031f 	and.w	r3, r3, #31
 8008d1e:	2101      	movs	r1, #1
 8008d20:	fa01 f303 	lsl.w	r3, r1, r3
 8008d24:	ea42 0103 	orr.w	r1, r2, r3
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10a      	bne.n	8008d4a <HAL_ADC_ConfigChannel+0x576>
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	0e9b      	lsrs	r3, r3, #26
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	f003 021f 	and.w	r2, r3, #31
 8008d40:	4613      	mov	r3, r2
 8008d42:	005b      	lsls	r3, r3, #1
 8008d44:	4413      	add	r3, r2
 8008d46:	051b      	lsls	r3, r3, #20
 8008d48:	e018      	b.n	8008d7c <HAL_ADC_ConfigChannel+0x5a8>
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d52:	fa93 f3a3 	rbit	r3, r3
 8008d56:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8008d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8008d5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d101      	bne.n	8008d66 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8008d62:	2320      	movs	r3, #32
 8008d64:	e003      	b.n	8008d6e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8008d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d68:	fab3 f383 	clz	r3, r3
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	3301      	adds	r3, #1
 8008d70:	f003 021f 	and.w	r2, r3, #31
 8008d74:	4613      	mov	r3, r2
 8008d76:	005b      	lsls	r3, r3, #1
 8008d78:	4413      	add	r3, r2
 8008d7a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008d7c:	430b      	orrs	r3, r1
 8008d7e:	e07e      	b.n	8008e7e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d107      	bne.n	8008d9c <HAL_ADC_ConfigChannel+0x5c8>
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	0e9b      	lsrs	r3, r3, #26
 8008d92:	3301      	adds	r3, #1
 8008d94:	069b      	lsls	r3, r3, #26
 8008d96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008d9a:	e015      	b.n	8008dc8 <HAL_ADC_ConfigChannel+0x5f4>
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da4:	fa93 f3a3 	rbit	r3, r3
 8008da8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8008daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dac:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8008dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d101      	bne.n	8008db8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8008db4:	2320      	movs	r3, #32
 8008db6:	e003      	b.n	8008dc0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8008db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dba:	fab3 f383 	clz	r3, r3
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	069b      	lsls	r3, r3, #26
 8008dc4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d109      	bne.n	8008de8 <HAL_ADC_ConfigChannel+0x614>
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	0e9b      	lsrs	r3, r3, #26
 8008dda:	3301      	adds	r3, #1
 8008ddc:	f003 031f 	and.w	r3, r3, #31
 8008de0:	2101      	movs	r1, #1
 8008de2:	fa01 f303 	lsl.w	r3, r1, r3
 8008de6:	e017      	b.n	8008e18 <HAL_ADC_ConfigChannel+0x644>
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dee:	6a3b      	ldr	r3, [r7, #32]
 8008df0:	fa93 f3a3 	rbit	r3, r3
 8008df4:	61fb      	str	r3, [r7, #28]
  return result;
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d101      	bne.n	8008e04 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8008e00:	2320      	movs	r3, #32
 8008e02:	e003      	b.n	8008e0c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8008e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e06:	fab3 f383 	clz	r3, r3
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	f003 031f 	and.w	r3, r3, #31
 8008e12:	2101      	movs	r1, #1
 8008e14:	fa01 f303 	lsl.w	r3, r1, r3
 8008e18:	ea42 0103 	orr.w	r1, r2, r3
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10d      	bne.n	8008e44 <HAL_ADC_ConfigChannel+0x670>
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	0e9b      	lsrs	r3, r3, #26
 8008e2e:	3301      	adds	r3, #1
 8008e30:	f003 021f 	and.w	r2, r3, #31
 8008e34:	4613      	mov	r3, r2
 8008e36:	005b      	lsls	r3, r3, #1
 8008e38:	4413      	add	r3, r2
 8008e3a:	3b1e      	subs	r3, #30
 8008e3c:	051b      	lsls	r3, r3, #20
 8008e3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008e42:	e01b      	b.n	8008e7c <HAL_ADC_ConfigChannel+0x6a8>
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	fa93 f3a3 	rbit	r3, r3
 8008e50:	613b      	str	r3, [r7, #16]
  return result;
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d101      	bne.n	8008e60 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8008e5c:	2320      	movs	r3, #32
 8008e5e:	e003      	b.n	8008e68 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	fab3 f383 	clz	r3, r3
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	3301      	adds	r3, #1
 8008e6a:	f003 021f 	and.w	r2, r3, #31
 8008e6e:	4613      	mov	r3, r2
 8008e70:	005b      	lsls	r3, r3, #1
 8008e72:	4413      	add	r3, r2
 8008e74:	3b1e      	subs	r3, #30
 8008e76:	051b      	lsls	r3, r3, #20
 8008e78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008e7c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008e82:	4619      	mov	r1, r3
 8008e84:	f7ff f8c5 	bl	8008012 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	4b09      	ldr	r3, [pc, #36]	@ (8008eb4 <HAL_ADC_ConfigChannel+0x6e0>)
 8008e8e:	4013      	ands	r3, r2
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f000 80be 	beq.w	8009012 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e9e:	d004      	beq.n	8008eaa <HAL_ADC_ConfigChannel+0x6d6>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a04      	ldr	r2, [pc, #16]	@ (8008eb8 <HAL_ADC_ConfigChannel+0x6e4>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d10a      	bne.n	8008ec0 <HAL_ADC_ConfigChannel+0x6ec>
 8008eaa:	4b04      	ldr	r3, [pc, #16]	@ (8008ebc <HAL_ADC_ConfigChannel+0x6e8>)
 8008eac:	e009      	b.n	8008ec2 <HAL_ADC_ConfigChannel+0x6ee>
 8008eae:	bf00      	nop
 8008eb0:	407f0000 	.word	0x407f0000
 8008eb4:	80080000 	.word	0x80080000
 8008eb8:	50000100 	.word	0x50000100
 8008ebc:	50000300 	.word	0x50000300
 8008ec0:	4b59      	ldr	r3, [pc, #356]	@ (8009028 <HAL_ADC_ConfigChannel+0x854>)
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fe ffba 	bl	8007e3c <LL_ADC_GetCommonPathInternalCh>
 8008ec8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a56      	ldr	r2, [pc, #344]	@ (800902c <HAL_ADC_ConfigChannel+0x858>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d004      	beq.n	8008ee0 <HAL_ADC_ConfigChannel+0x70c>
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a55      	ldr	r2, [pc, #340]	@ (8009030 <HAL_ADC_ConfigChannel+0x85c>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d13a      	bne.n	8008f56 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008ee0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008ee4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d134      	bne.n	8008f56 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ef4:	d005      	beq.n	8008f02 <HAL_ADC_ConfigChannel+0x72e>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a4e      	ldr	r2, [pc, #312]	@ (8009034 <HAL_ADC_ConfigChannel+0x860>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	f040 8085 	bne.w	800900c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f0a:	d004      	beq.n	8008f16 <HAL_ADC_ConfigChannel+0x742>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a49      	ldr	r2, [pc, #292]	@ (8009038 <HAL_ADC_ConfigChannel+0x864>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d101      	bne.n	8008f1a <HAL_ADC_ConfigChannel+0x746>
 8008f16:	4a49      	ldr	r2, [pc, #292]	@ (800903c <HAL_ADC_ConfigChannel+0x868>)
 8008f18:	e000      	b.n	8008f1c <HAL_ADC_ConfigChannel+0x748>
 8008f1a:	4a43      	ldr	r2, [pc, #268]	@ (8009028 <HAL_ADC_ConfigChannel+0x854>)
 8008f1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008f20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008f24:	4619      	mov	r1, r3
 8008f26:	4610      	mov	r0, r2
 8008f28:	f7fe ff75 	bl	8007e16 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008f2c:	4b44      	ldr	r3, [pc, #272]	@ (8009040 <HAL_ADC_ConfigChannel+0x86c>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	099b      	lsrs	r3, r3, #6
 8008f32:	4a44      	ldr	r2, [pc, #272]	@ (8009044 <HAL_ADC_ConfigChannel+0x870>)
 8008f34:	fba2 2303 	umull	r2, r3, r2, r3
 8008f38:	099b      	lsrs	r3, r3, #6
 8008f3a:	1c5a      	adds	r2, r3, #1
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	005b      	lsls	r3, r3, #1
 8008f40:	4413      	add	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008f46:	e002      	b.n	8008f4e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1f9      	bne.n	8008f48 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008f54:	e05a      	b.n	800900c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a3b      	ldr	r2, [pc, #236]	@ (8009048 <HAL_ADC_ConfigChannel+0x874>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d125      	bne.n	8008fac <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008f60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008f64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d11f      	bne.n	8008fac <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a31      	ldr	r2, [pc, #196]	@ (8009038 <HAL_ADC_ConfigChannel+0x864>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d104      	bne.n	8008f80 <HAL_ADC_ConfigChannel+0x7ac>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a34      	ldr	r2, [pc, #208]	@ (800904c <HAL_ADC_ConfigChannel+0x878>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d047      	beq.n	8009010 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f88:	d004      	beq.n	8008f94 <HAL_ADC_ConfigChannel+0x7c0>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a2a      	ldr	r2, [pc, #168]	@ (8009038 <HAL_ADC_ConfigChannel+0x864>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d101      	bne.n	8008f98 <HAL_ADC_ConfigChannel+0x7c4>
 8008f94:	4a29      	ldr	r2, [pc, #164]	@ (800903c <HAL_ADC_ConfigChannel+0x868>)
 8008f96:	e000      	b.n	8008f9a <HAL_ADC_ConfigChannel+0x7c6>
 8008f98:	4a23      	ldr	r2, [pc, #140]	@ (8009028 <HAL_ADC_ConfigChannel+0x854>)
 8008f9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008f9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	4610      	mov	r0, r2
 8008fa6:	f7fe ff36 	bl	8007e16 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008faa:	e031      	b.n	8009010 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a27      	ldr	r2, [pc, #156]	@ (8009050 <HAL_ADC_ConfigChannel+0x87c>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d12d      	bne.n	8009012 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008fb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008fba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d127      	bne.n	8009012 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8009038 <HAL_ADC_ConfigChannel+0x864>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d022      	beq.n	8009012 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008fd4:	d004      	beq.n	8008fe0 <HAL_ADC_ConfigChannel+0x80c>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a17      	ldr	r2, [pc, #92]	@ (8009038 <HAL_ADC_ConfigChannel+0x864>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d101      	bne.n	8008fe4 <HAL_ADC_ConfigChannel+0x810>
 8008fe0:	4a16      	ldr	r2, [pc, #88]	@ (800903c <HAL_ADC_ConfigChannel+0x868>)
 8008fe2:	e000      	b.n	8008fe6 <HAL_ADC_ConfigChannel+0x812>
 8008fe4:	4a10      	ldr	r2, [pc, #64]	@ (8009028 <HAL_ADC_ConfigChannel+0x854>)
 8008fe6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008fea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008fee:	4619      	mov	r1, r3
 8008ff0:	4610      	mov	r0, r2
 8008ff2:	f7fe ff10 	bl	8007e16 <LL_ADC_SetCommonPathInternalCh>
 8008ff6:	e00c      	b.n	8009012 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ffc:	f043 0220 	orr.w	r2, r3, #32
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800900a:	e002      	b.n	8009012 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800900c:	bf00      	nop
 800900e:	e000      	b.n	8009012 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009010:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800901a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800901e:	4618      	mov	r0, r3
 8009020:	37d8      	adds	r7, #216	@ 0xd8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	50000700 	.word	0x50000700
 800902c:	c3210000 	.word	0xc3210000
 8009030:	90c00010 	.word	0x90c00010
 8009034:	50000600 	.word	0x50000600
 8009038:	50000100 	.word	0x50000100
 800903c:	50000300 	.word	0x50000300
 8009040:	200000fc 	.word	0x200000fc
 8009044:	053e2d63 	.word	0x053e2d63
 8009048:	c7520000 	.word	0xc7520000
 800904c:	50000500 	.word	0x50000500
 8009050:	cb840000 	.word	0xcb840000

08009054 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800905c:	2300      	movs	r3, #0
 800905e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4618      	mov	r0, r3
 8009066:	f7ff f8a7 	bl	80081b8 <LL_ADC_IsEnabled>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d176      	bne.n	800915e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689a      	ldr	r2, [r3, #8]
 8009076:	4b3c      	ldr	r3, [pc, #240]	@ (8009168 <ADC_Enable+0x114>)
 8009078:	4013      	ands	r3, r2
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00d      	beq.n	800909a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009082:	f043 0210 	orr.w	r2, r3, #16
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800908e:	f043 0201 	orr.w	r2, r3, #1
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	e062      	b.n	8009160 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4618      	mov	r0, r3
 80090a0:	f7ff f862 	bl	8008168 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80090ac:	d004      	beq.n	80090b8 <ADC_Enable+0x64>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a2e      	ldr	r2, [pc, #184]	@ (800916c <ADC_Enable+0x118>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d101      	bne.n	80090bc <ADC_Enable+0x68>
 80090b8:	4b2d      	ldr	r3, [pc, #180]	@ (8009170 <ADC_Enable+0x11c>)
 80090ba:	e000      	b.n	80090be <ADC_Enable+0x6a>
 80090bc:	4b2d      	ldr	r3, [pc, #180]	@ (8009174 <ADC_Enable+0x120>)
 80090be:	4618      	mov	r0, r3
 80090c0:	f7fe febc 	bl	8007e3c <LL_ADC_GetCommonPathInternalCh>
 80090c4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80090c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d013      	beq.n	80090f6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80090ce:	4b2a      	ldr	r3, [pc, #168]	@ (8009178 <ADC_Enable+0x124>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	099b      	lsrs	r3, r3, #6
 80090d4:	4a29      	ldr	r2, [pc, #164]	@ (800917c <ADC_Enable+0x128>)
 80090d6:	fba2 2303 	umull	r2, r3, r2, r3
 80090da:	099b      	lsrs	r3, r3, #6
 80090dc:	1c5a      	adds	r2, r3, #1
 80090de:	4613      	mov	r3, r2
 80090e0:	005b      	lsls	r3, r3, #1
 80090e2:	4413      	add	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80090e8:	e002      	b.n	80090f0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	3b01      	subs	r3, #1
 80090ee:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1f9      	bne.n	80090ea <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80090f6:	f7fe fe6f 	bl	8007dd8 <HAL_GetTick>
 80090fa:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80090fc:	e028      	b.n	8009150 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4618      	mov	r0, r3
 8009104:	f7ff f858 	bl	80081b8 <LL_ADC_IsEnabled>
 8009108:	4603      	mov	r3, r0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d104      	bne.n	8009118 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4618      	mov	r0, r3
 8009114:	f7ff f828 	bl	8008168 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8009118:	f7fe fe5e 	bl	8007dd8 <HAL_GetTick>
 800911c:	4602      	mov	r2, r0
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	2b02      	cmp	r3, #2
 8009124:	d914      	bls.n	8009150 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 0301 	and.w	r3, r3, #1
 8009130:	2b01      	cmp	r3, #1
 8009132:	d00d      	beq.n	8009150 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009138:	f043 0210 	orr.w	r2, r3, #16
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009144:	f043 0201 	orr.w	r2, r3, #1
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	e007      	b.n	8009160 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f003 0301 	and.w	r3, r3, #1
 800915a:	2b01      	cmp	r3, #1
 800915c:	d1cf      	bne.n	80090fe <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	8000003f 	.word	0x8000003f
 800916c:	50000100 	.word	0x50000100
 8009170:	50000300 	.word	0x50000300
 8009174:	50000700 	.word	0x50000700
 8009178:	200000fc 	.word	0x200000fc
 800917c:	053e2d63 	.word	0x053e2d63

08009180 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4618      	mov	r0, r3
 800918e:	f7ff f826 	bl	80081de <LL_ADC_IsDisableOngoing>
 8009192:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4618      	mov	r0, r3
 800919a:	f7ff f80d 	bl	80081b8 <LL_ADC_IsEnabled>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d047      	beq.n	8009234 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d144      	bne.n	8009234 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	f003 030d 	and.w	r3, r3, #13
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d10c      	bne.n	80091d2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4618      	mov	r0, r3
 80091be:	f7fe ffe7 	bl	8008190 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2203      	movs	r2, #3
 80091c8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80091ca:	f7fe fe05 	bl	8007dd8 <HAL_GetTick>
 80091ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80091d0:	e029      	b.n	8009226 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091d6:	f043 0210 	orr.w	r2, r3, #16
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091e2:	f043 0201 	orr.w	r2, r3, #1
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e023      	b.n	8009236 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80091ee:	f7fe fdf3 	bl	8007dd8 <HAL_GetTick>
 80091f2:	4602      	mov	r2, r0
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d914      	bls.n	8009226 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00d      	beq.n	8009226 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800920e:	f043 0210 	orr.w	r2, r3, #16
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800921a:	f043 0201 	orr.w	r2, r3, #1
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	e007      	b.n	8009236 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	f003 0301 	and.w	r3, r3, #1
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1dc      	bne.n	80091ee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b084      	sub	sp, #16
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800924a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009250:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009254:	2b00      	cmp	r3, #0
 8009256:	d14b      	bne.n	80092f0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800925c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 0308 	and.w	r3, r3, #8
 800926e:	2b00      	cmp	r3, #0
 8009270:	d021      	beq.n	80092b6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4618      	mov	r0, r3
 8009278:	f7fe fe8c 	bl	8007f94 <LL_ADC_REG_IsTriggerSourceSWStart>
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d032      	beq.n	80092e8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800928c:	2b00      	cmp	r3, #0
 800928e:	d12b      	bne.n	80092e8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009294:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d11f      	bne.n	80092e8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092ac:	f043 0201 	orr.w	r2, r3, #1
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80092b4:	e018      	b.n	80092e8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	f003 0302 	and.w	r3, r3, #2
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d111      	bne.n	80092e8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d105      	bne.n	80092e8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092e0:	f043 0201 	orr.w	r2, r3, #1
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f7ff fa55 	bl	8008798 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80092ee:	e00e      	b.n	800930e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092f4:	f003 0310 	and.w	r3, r3, #16
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d003      	beq.n	8009304 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	f7ff fa5f 	bl	80087c0 <HAL_ADC_ErrorCallback>
}
 8009302:	e004      	b.n	800930e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	4798      	blx	r3
}
 800930e:	bf00      	nop
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b084      	sub	sp, #16
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009322:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f7ff fa41 	bl	80087ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800932a:	bf00      	nop
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b084      	sub	sp, #16
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800933e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009344:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009350:	f043 0204 	orr.w	r2, r3, #4
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f7ff fa31 	bl	80087c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800935e:	bf00      	nop
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <LL_ADC_IsEnabled>:
{
 8009366:	b480      	push	{r7}
 8009368:	b083      	sub	sp, #12
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	2b01      	cmp	r3, #1
 8009378:	d101      	bne.n	800937e <LL_ADC_IsEnabled+0x18>
 800937a:	2301      	movs	r3, #1
 800937c:	e000      	b.n	8009380 <LL_ADC_IsEnabled+0x1a>
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <LL_ADC_StartCalibration>:
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800939e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80093a8:	4313      	orrs	r3, r2
 80093aa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	609a      	str	r2, [r3, #8]
}
 80093b2:	bf00      	nop
 80093b4:	370c      	adds	r7, #12
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr

080093be <LL_ADC_IsCalibrationOnGoing>:
{
 80093be:	b480      	push	{r7}
 80093c0:	b083      	sub	sp, #12
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093d2:	d101      	bne.n	80093d8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80093d4:	2301      	movs	r3, #1
 80093d6:	e000      	b.n	80093da <LL_ADC_IsCalibrationOnGoing+0x1c>
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	370c      	adds	r7, #12
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr

080093e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80093e6:	b480      	push	{r7}
 80093e8:	b083      	sub	sp, #12
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	f003 0304 	and.w	r3, r3, #4
 80093f6:	2b04      	cmp	r3, #4
 80093f8:	d101      	bne.n	80093fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80093fa:	2301      	movs	r3, #1
 80093fc:	e000      	b.n	8009400 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8009416:	2300      	movs	r3, #0
 8009418:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8009420:	2b01      	cmp	r3, #1
 8009422:	d101      	bne.n	8009428 <HAL_ADCEx_Calibration_Start+0x1c>
 8009424:	2302      	movs	r3, #2
 8009426:	e04d      	b.n	80094c4 <HAL_ADCEx_Calibration_Start+0xb8>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2201      	movs	r2, #1
 800942c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f7ff fea5 	bl	8009180 <ADC_Disable>
 8009436:	4603      	mov	r3, r0
 8009438:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800943a:	7bfb      	ldrb	r3, [r7, #15]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d136      	bne.n	80094ae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009444:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8009448:	f023 0302 	bic.w	r3, r3, #2
 800944c:	f043 0202 	orr.w	r2, r3, #2
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6839      	ldr	r1, [r7, #0]
 800945a:	4618      	mov	r0, r3
 800945c:	f7ff ff96 	bl	800938c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8009460:	e014      	b.n	800948c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	3301      	adds	r3, #1
 8009466:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	4a18      	ldr	r2, [pc, #96]	@ (80094cc <HAL_ADCEx_Calibration_Start+0xc0>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d90d      	bls.n	800948c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009474:	f023 0312 	bic.w	r3, r3, #18
 8009478:	f043 0210 	orr.w	r2, r3, #16
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e01b      	b.n	80094c4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4618      	mov	r0, r3
 8009492:	f7ff ff94 	bl	80093be <LL_ADC_IsCalibrationOnGoing>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1e2      	bne.n	8009462 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094a0:	f023 0303 	bic.w	r3, r3, #3
 80094a4:	f043 0201 	orr.w	r2, r3, #1
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80094ac:	e005      	b.n	80094ba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094b2:	f043 0210 	orr.w	r2, r3, #16
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80094c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	0004de01 	.word	0x0004de01

080094d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80094d0:	b590      	push	{r4, r7, lr}
 80094d2:	b0a1      	sub	sp, #132	@ 0x84
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d101      	bne.n	80094ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80094ea:	2302      	movs	r3, #2
 80094ec:	e0e7      	b.n	80096be <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2201      	movs	r2, #1
 80094f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80094f6:	2300      	movs	r3, #0
 80094f8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80094fa:	2300      	movs	r3, #0
 80094fc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009506:	d102      	bne.n	800950e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8009508:	4b6f      	ldr	r3, [pc, #444]	@ (80096c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800950a:	60bb      	str	r3, [r7, #8]
 800950c:	e009      	b.n	8009522 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a6e      	ldr	r2, [pc, #440]	@ (80096cc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d102      	bne.n	800951e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8009518:	4b6d      	ldr	r3, [pc, #436]	@ (80096d0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800951a:	60bb      	str	r3, [r7, #8]
 800951c:	e001      	b.n	8009522 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800951e:	2300      	movs	r3, #0
 8009520:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d10b      	bne.n	8009540 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800952c:	f043 0220 	orr.w	r2, r3, #32
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	e0be      	b.n	80096be <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	4618      	mov	r0, r3
 8009544:	f7ff ff4f 	bl	80093e6 <LL_ADC_REG_IsConversionOngoing>
 8009548:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4618      	mov	r0, r3
 8009550:	f7ff ff49 	bl	80093e6 <LL_ADC_REG_IsConversionOngoing>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	f040 80a0 	bne.w	800969c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800955c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800955e:	2b00      	cmp	r3, #0
 8009560:	f040 809c 	bne.w	800969c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800956c:	d004      	beq.n	8009578 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a55      	ldr	r2, [pc, #340]	@ (80096c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d101      	bne.n	800957c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8009578:	4b56      	ldr	r3, [pc, #344]	@ (80096d4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800957a:	e000      	b.n	800957e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800957c:	4b56      	ldr	r3, [pc, #344]	@ (80096d8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800957e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d04b      	beq.n	8009620 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8009588:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	6859      	ldr	r1, [r3, #4]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800959a:	035b      	lsls	r3, r3, #13
 800959c:	430b      	orrs	r3, r1
 800959e:	431a      	orrs	r2, r3
 80095a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80095a2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80095ac:	d004      	beq.n	80095b8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a45      	ldr	r2, [pc, #276]	@ (80096c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d10f      	bne.n	80095d8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80095b8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80095bc:	f7ff fed3 	bl	8009366 <LL_ADC_IsEnabled>
 80095c0:	4604      	mov	r4, r0
 80095c2:	4841      	ldr	r0, [pc, #260]	@ (80096c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80095c4:	f7ff fecf 	bl	8009366 <LL_ADC_IsEnabled>
 80095c8:	4603      	mov	r3, r0
 80095ca:	4323      	orrs	r3, r4
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	bf0c      	ite	eq
 80095d0:	2301      	moveq	r3, #1
 80095d2:	2300      	movne	r3, #0
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	e012      	b.n	80095fe <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80095d8:	483c      	ldr	r0, [pc, #240]	@ (80096cc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80095da:	f7ff fec4 	bl	8009366 <LL_ADC_IsEnabled>
 80095de:	4604      	mov	r4, r0
 80095e0:	483b      	ldr	r0, [pc, #236]	@ (80096d0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80095e2:	f7ff fec0 	bl	8009366 <LL_ADC_IsEnabled>
 80095e6:	4603      	mov	r3, r0
 80095e8:	431c      	orrs	r4, r3
 80095ea:	483c      	ldr	r0, [pc, #240]	@ (80096dc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80095ec:	f7ff febb 	bl	8009366 <LL_ADC_IsEnabled>
 80095f0:	4603      	mov	r3, r0
 80095f2:	4323      	orrs	r3, r4
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	bf0c      	ite	eq
 80095f8:	2301      	moveq	r3, #1
 80095fa:	2300      	movne	r3, #0
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d056      	beq.n	80096b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8009602:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800960a:	f023 030f 	bic.w	r3, r3, #15
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	6811      	ldr	r1, [r2, #0]
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	6892      	ldr	r2, [r2, #8]
 8009616:	430a      	orrs	r2, r1
 8009618:	431a      	orrs	r2, r3
 800961a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800961c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800961e:	e047      	b.n	80096b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009620:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009628:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800962a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009634:	d004      	beq.n	8009640 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a23      	ldr	r2, [pc, #140]	@ (80096c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d10f      	bne.n	8009660 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8009640:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8009644:	f7ff fe8f 	bl	8009366 <LL_ADC_IsEnabled>
 8009648:	4604      	mov	r4, r0
 800964a:	481f      	ldr	r0, [pc, #124]	@ (80096c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800964c:	f7ff fe8b 	bl	8009366 <LL_ADC_IsEnabled>
 8009650:	4603      	mov	r3, r0
 8009652:	4323      	orrs	r3, r4
 8009654:	2b00      	cmp	r3, #0
 8009656:	bf0c      	ite	eq
 8009658:	2301      	moveq	r3, #1
 800965a:	2300      	movne	r3, #0
 800965c:	b2db      	uxtb	r3, r3
 800965e:	e012      	b.n	8009686 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8009660:	481a      	ldr	r0, [pc, #104]	@ (80096cc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8009662:	f7ff fe80 	bl	8009366 <LL_ADC_IsEnabled>
 8009666:	4604      	mov	r4, r0
 8009668:	4819      	ldr	r0, [pc, #100]	@ (80096d0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800966a:	f7ff fe7c 	bl	8009366 <LL_ADC_IsEnabled>
 800966e:	4603      	mov	r3, r0
 8009670:	431c      	orrs	r4, r3
 8009672:	481a      	ldr	r0, [pc, #104]	@ (80096dc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8009674:	f7ff fe77 	bl	8009366 <LL_ADC_IsEnabled>
 8009678:	4603      	mov	r3, r0
 800967a:	4323      	orrs	r3, r4
 800967c:	2b00      	cmp	r3, #0
 800967e:	bf0c      	ite	eq
 8009680:	2301      	moveq	r3, #1
 8009682:	2300      	movne	r3, #0
 8009684:	b2db      	uxtb	r3, r3
 8009686:	2b00      	cmp	r3, #0
 8009688:	d012      	beq.n	80096b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800968a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8009692:	f023 030f 	bic.w	r3, r3, #15
 8009696:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009698:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800969a:	e009      	b.n	80096b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096a0:	f043 0220 	orr.w	r2, r3, #32
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80096ae:	e000      	b.n	80096b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80096b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80096ba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3784      	adds	r7, #132	@ 0x84
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd90      	pop	{r4, r7, pc}
 80096c6:	bf00      	nop
 80096c8:	50000100 	.word	0x50000100
 80096cc:	50000400 	.word	0x50000400
 80096d0:	50000500 	.word	0x50000500
 80096d4:	50000300 	.word	0x50000300
 80096d8:	50000700 	.word	0x50000700
 80096dc:	50000600 	.word	0x50000600

080096e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f003 0307 	and.w	r3, r3, #7
 80096ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80096f0:	4b0c      	ldr	r3, [pc, #48]	@ (8009724 <__NVIC_SetPriorityGrouping+0x44>)
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80096fc:	4013      	ands	r3, r2
 80096fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009708:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800970c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009712:	4a04      	ldr	r2, [pc, #16]	@ (8009724 <__NVIC_SetPriorityGrouping+0x44>)
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	60d3      	str	r3, [r2, #12]
}
 8009718:	bf00      	nop
 800971a:	3714      	adds	r7, #20
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr
 8009724:	e000ed00 	.word	0xe000ed00

08009728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009728:	b480      	push	{r7}
 800972a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800972c:	4b04      	ldr	r3, [pc, #16]	@ (8009740 <__NVIC_GetPriorityGrouping+0x18>)
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	0a1b      	lsrs	r3, r3, #8
 8009732:	f003 0307 	and.w	r3, r3, #7
}
 8009736:	4618      	mov	r0, r3
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	e000ed00 	.word	0xe000ed00

08009744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	4603      	mov	r3, r0
 800974c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800974e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009752:	2b00      	cmp	r3, #0
 8009754:	db0b      	blt.n	800976e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009756:	79fb      	ldrb	r3, [r7, #7]
 8009758:	f003 021f 	and.w	r2, r3, #31
 800975c:	4907      	ldr	r1, [pc, #28]	@ (800977c <__NVIC_EnableIRQ+0x38>)
 800975e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009762:	095b      	lsrs	r3, r3, #5
 8009764:	2001      	movs	r0, #1
 8009766:	fa00 f202 	lsl.w	r2, r0, r2
 800976a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800976e:	bf00      	nop
 8009770:	370c      	adds	r7, #12
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	e000e100 	.word	0xe000e100

08009780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	6039      	str	r1, [r7, #0]
 800978a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800978c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009790:	2b00      	cmp	r3, #0
 8009792:	db0a      	blt.n	80097aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	b2da      	uxtb	r2, r3
 8009798:	490c      	ldr	r1, [pc, #48]	@ (80097cc <__NVIC_SetPriority+0x4c>)
 800979a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800979e:	0112      	lsls	r2, r2, #4
 80097a0:	b2d2      	uxtb	r2, r2
 80097a2:	440b      	add	r3, r1
 80097a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80097a8:	e00a      	b.n	80097c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	b2da      	uxtb	r2, r3
 80097ae:	4908      	ldr	r1, [pc, #32]	@ (80097d0 <__NVIC_SetPriority+0x50>)
 80097b0:	79fb      	ldrb	r3, [r7, #7]
 80097b2:	f003 030f 	and.w	r3, r3, #15
 80097b6:	3b04      	subs	r3, #4
 80097b8:	0112      	lsls	r2, r2, #4
 80097ba:	b2d2      	uxtb	r2, r2
 80097bc:	440b      	add	r3, r1
 80097be:	761a      	strb	r2, [r3, #24]
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr
 80097cc:	e000e100 	.word	0xe000e100
 80097d0:	e000ed00 	.word	0xe000ed00

080097d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b089      	sub	sp, #36	@ 0x24
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f003 0307 	and.w	r3, r3, #7
 80097e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	f1c3 0307 	rsb	r3, r3, #7
 80097ee:	2b04      	cmp	r3, #4
 80097f0:	bf28      	it	cs
 80097f2:	2304      	movcs	r3, #4
 80097f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	3304      	adds	r3, #4
 80097fa:	2b06      	cmp	r3, #6
 80097fc:	d902      	bls.n	8009804 <NVIC_EncodePriority+0x30>
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	3b03      	subs	r3, #3
 8009802:	e000      	b.n	8009806 <NVIC_EncodePriority+0x32>
 8009804:	2300      	movs	r3, #0
 8009806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009808:	f04f 32ff 	mov.w	r2, #4294967295
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	fa02 f303 	lsl.w	r3, r2, r3
 8009812:	43da      	mvns	r2, r3
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	401a      	ands	r2, r3
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800981c:	f04f 31ff 	mov.w	r1, #4294967295
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	fa01 f303 	lsl.w	r3, r1, r3
 8009826:	43d9      	mvns	r1, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800982c:	4313      	orrs	r3, r2
         );
}
 800982e:	4618      	mov	r0, r3
 8009830:	3724      	adds	r7, #36	@ 0x24
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
	...

0800983c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	3b01      	subs	r3, #1
 8009848:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800984c:	d301      	bcc.n	8009852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800984e:	2301      	movs	r3, #1
 8009850:	e00f      	b.n	8009872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009852:	4a0a      	ldr	r2, [pc, #40]	@ (800987c <SysTick_Config+0x40>)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	3b01      	subs	r3, #1
 8009858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800985a:	210f      	movs	r1, #15
 800985c:	f04f 30ff 	mov.w	r0, #4294967295
 8009860:	f7ff ff8e 	bl	8009780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009864:	4b05      	ldr	r3, [pc, #20]	@ (800987c <SysTick_Config+0x40>)
 8009866:	2200      	movs	r2, #0
 8009868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800986a:	4b04      	ldr	r3, [pc, #16]	@ (800987c <SysTick_Config+0x40>)
 800986c:	2207      	movs	r2, #7
 800986e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3708      	adds	r7, #8
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	e000e010 	.word	0xe000e010

08009880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f7ff ff29 	bl	80096e0 <__NVIC_SetPriorityGrouping>
}
 800988e:	bf00      	nop
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b086      	sub	sp, #24
 800989a:	af00      	add	r7, sp, #0
 800989c:	4603      	mov	r3, r0
 800989e:	60b9      	str	r1, [r7, #8]
 80098a0:	607a      	str	r2, [r7, #4]
 80098a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80098a4:	f7ff ff40 	bl	8009728 <__NVIC_GetPriorityGrouping>
 80098a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	68b9      	ldr	r1, [r7, #8]
 80098ae:	6978      	ldr	r0, [r7, #20]
 80098b0:	f7ff ff90 	bl	80097d4 <NVIC_EncodePriority>
 80098b4:	4602      	mov	r2, r0
 80098b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098ba:	4611      	mov	r1, r2
 80098bc:	4618      	mov	r0, r3
 80098be:	f7ff ff5f 	bl	8009780 <__NVIC_SetPriority>
}
 80098c2:	bf00      	nop
 80098c4:	3718      	adds	r7, #24
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b082      	sub	sp, #8
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	4603      	mov	r3, r0
 80098d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80098d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098d8:	4618      	mov	r0, r3
 80098da:	f7ff ff33 	bl	8009744 <__NVIC_EnableIRQ>
}
 80098de:	bf00      	nop
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b082      	sub	sp, #8
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f7ff ffa4 	bl	800983c <SysTick_Config>
 80098f4:	4603      	mov	r3, r0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
	...

08009900 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d101      	bne.n	8009912 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	e08d      	b.n	8009a2e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	461a      	mov	r2, r3
 8009918:	4b47      	ldr	r3, [pc, #284]	@ (8009a38 <HAL_DMA_Init+0x138>)
 800991a:	429a      	cmp	r2, r3
 800991c:	d80f      	bhi.n	800993e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	461a      	mov	r2, r3
 8009924:	4b45      	ldr	r3, [pc, #276]	@ (8009a3c <HAL_DMA_Init+0x13c>)
 8009926:	4413      	add	r3, r2
 8009928:	4a45      	ldr	r2, [pc, #276]	@ (8009a40 <HAL_DMA_Init+0x140>)
 800992a:	fba2 2303 	umull	r2, r3, r2, r3
 800992e:	091b      	lsrs	r3, r3, #4
 8009930:	009a      	lsls	r2, r3, #2
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4a42      	ldr	r2, [pc, #264]	@ (8009a44 <HAL_DMA_Init+0x144>)
 800993a:	641a      	str	r2, [r3, #64]	@ 0x40
 800993c:	e00e      	b.n	800995c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	461a      	mov	r2, r3
 8009944:	4b40      	ldr	r3, [pc, #256]	@ (8009a48 <HAL_DMA_Init+0x148>)
 8009946:	4413      	add	r3, r2
 8009948:	4a3d      	ldr	r2, [pc, #244]	@ (8009a40 <HAL_DMA_Init+0x140>)
 800994a:	fba2 2303 	umull	r2, r3, r2, r3
 800994e:	091b      	lsrs	r3, r3, #4
 8009950:	009a      	lsls	r2, r3, #2
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4a3c      	ldr	r2, [pc, #240]	@ (8009a4c <HAL_DMA_Init+0x14c>)
 800995a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2202      	movs	r2, #2
 8009960:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009976:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009980:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	691b      	ldr	r3, [r3, #16]
 8009986:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800998c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	699b      	ldr	r3, [r3, #24]
 8009992:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009998:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a1b      	ldr	r3, [r3, #32]
 800999e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68fa      	ldr	r2, [r7, #12]
 80099ac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fa76 	bl	8009ea0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099bc:	d102      	bne.n	80099c4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	685a      	ldr	r2, [r3, #4]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099cc:	b2d2      	uxtb	r2, r2
 80099ce:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80099d8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d010      	beq.n	8009a04 <HAL_DMA_Init+0x104>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	2b04      	cmp	r3, #4
 80099e8:	d80c      	bhi.n	8009a04 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fa96 	bl	8009f1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099f4:	2200      	movs	r2, #0
 80099f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009a00:	605a      	str	r2, [r3, #4]
 8009a02:	e008      	b.n	8009a16 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	40020407 	.word	0x40020407
 8009a3c:	bffdfff8 	.word	0xbffdfff8
 8009a40:	cccccccd 	.word	0xcccccccd
 8009a44:	40020000 	.word	0x40020000
 8009a48:	bffdfbf8 	.word	0xbffdfbf8
 8009a4c:	40020400 	.word	0x40020400

08009a50 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b086      	sub	sp, #24
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
 8009a5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d101      	bne.n	8009a70 <HAL_DMA_Start_IT+0x20>
 8009a6c:	2302      	movs	r3, #2
 8009a6e:	e066      	b.n	8009b3e <HAL_DMA_Start_IT+0xee>
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d155      	bne.n	8009b30 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2202      	movs	r2, #2
 8009a88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f022 0201 	bic.w	r2, r2, #1
 8009aa0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	68b9      	ldr	r1, [r7, #8]
 8009aa8:	68f8      	ldr	r0, [r7, #12]
 8009aaa:	f000 f9bb 	bl	8009e24 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d008      	beq.n	8009ac8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f042 020e 	orr.w	r2, r2, #14
 8009ac4:	601a      	str	r2, [r3, #0]
 8009ac6:	e00f      	b.n	8009ae8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f022 0204 	bic.w	r2, r2, #4
 8009ad6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f042 020a 	orr.w	r2, r2, #10
 8009ae6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d007      	beq.n	8009b06 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009b04:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d007      	beq.n	8009b1e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009b1c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f042 0201 	orr.w	r2, r2, #1
 8009b2c:	601a      	str	r2, [r3, #0]
 8009b2e:	e005      	b.n	8009b3c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2200      	movs	r2, #0
 8009b34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009b38:	2302      	movs	r3, #2
 8009b3a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3718      	adds	r7, #24
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009b46:	b480      	push	{r7}
 8009b48:	b085      	sub	sp, #20
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	d005      	beq.n	8009b6a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2204      	movs	r2, #4
 8009b62:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	73fb      	strb	r3, [r7, #15]
 8009b68:	e037      	b.n	8009bda <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f022 020e 	bic.w	r2, r2, #14
 8009b78:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009b88:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f022 0201 	bic.w	r2, r2, #1
 8009b98:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b9e:	f003 021f 	and.w	r2, r3, #31
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ba6:	2101      	movs	r1, #1
 8009ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8009bac:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009bb6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00c      	beq.n	8009bda <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009bce:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009bd8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8009bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3714      	adds	r7, #20
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c00:	2300      	movs	r3, #0
 8009c02:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	2b02      	cmp	r3, #2
 8009c0e:	d00d      	beq.n	8009c2c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2204      	movs	r2, #4
 8009c14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	73fb      	strb	r3, [r7, #15]
 8009c2a:	e047      	b.n	8009cbc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f022 020e 	bic.w	r2, r2, #14
 8009c3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f022 0201 	bic.w	r2, r2, #1
 8009c4a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009c5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c60:	f003 021f 	and.w	r2, r3, #31
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c68:	2101      	movs	r1, #1
 8009c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8009c6e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009c78:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00c      	beq.n	8009c9c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009c90:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009c9a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d003      	beq.n	8009cbc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	4798      	blx	r3
    }
  }
  return status;
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b084      	sub	sp, #16
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ce2:	f003 031f 	and.w	r3, r3, #31
 8009ce6:	2204      	movs	r2, #4
 8009ce8:	409a      	lsls	r2, r3
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	4013      	ands	r3, r2
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d026      	beq.n	8009d40 <HAL_DMA_IRQHandler+0x7a>
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	f003 0304 	and.w	r3, r3, #4
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d021      	beq.n	8009d40 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f003 0320 	and.w	r3, r3, #32
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d107      	bne.n	8009d1a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f022 0204 	bic.w	r2, r2, #4
 8009d18:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d1e:	f003 021f 	and.w	r2, r3, #31
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d26:	2104      	movs	r1, #4
 8009d28:	fa01 f202 	lsl.w	r2, r1, r2
 8009d2c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d071      	beq.n	8009e1a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009d3e:	e06c      	b.n	8009e1a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d44:	f003 031f 	and.w	r3, r3, #31
 8009d48:	2202      	movs	r2, #2
 8009d4a:	409a      	lsls	r2, r3
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	4013      	ands	r3, r2
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d02e      	beq.n	8009db2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	f003 0302 	and.w	r3, r3, #2
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d029      	beq.n	8009db2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 0320 	and.w	r3, r3, #32
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d10b      	bne.n	8009d84 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f022 020a 	bic.w	r2, r2, #10
 8009d7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d88:	f003 021f 	and.w	r2, r3, #31
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d90:	2102      	movs	r1, #2
 8009d92:	fa01 f202 	lsl.w	r2, r1, r2
 8009d96:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d038      	beq.n	8009e1a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009db0:	e033      	b.n	8009e1a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009db6:	f003 031f 	and.w	r3, r3, #31
 8009dba:	2208      	movs	r2, #8
 8009dbc:	409a      	lsls	r2, r3
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d02a      	beq.n	8009e1c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	f003 0308 	and.w	r3, r3, #8
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d025      	beq.n	8009e1c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f022 020e 	bic.w	r2, r2, #14
 8009dde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009de4:	f003 021f 	and.w	r2, r3, #31
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dec:	2101      	movs	r1, #1
 8009dee:	fa01 f202 	lsl.w	r2, r1, r2
 8009df2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d004      	beq.n	8009e1c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009e1a:	bf00      	nop
 8009e1c:	bf00      	nop
}
 8009e1e:	3710      	adds	r7, #16
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
 8009e30:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009e3a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d004      	beq.n	8009e4e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009e4c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e52:	f003 021f 	and.w	r2, r3, #31
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e5a:	2101      	movs	r1, #1
 8009e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8009e60:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	2b10      	cmp	r3, #16
 8009e70:	d108      	bne.n	8009e84 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68ba      	ldr	r2, [r7, #8]
 8009e80:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009e82:	e007      	b.n	8009e94 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	60da      	str	r2, [r3, #12]
}
 8009e94:	bf00      	nop
 8009e96:	3714      	adds	r7, #20
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b087      	sub	sp, #28
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	461a      	mov	r2, r3
 8009eae:	4b16      	ldr	r3, [pc, #88]	@ (8009f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d802      	bhi.n	8009eba <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8009eb4:	4b15      	ldr	r3, [pc, #84]	@ (8009f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009eb6:	617b      	str	r3, [r7, #20]
 8009eb8:	e001      	b.n	8009ebe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8009eba:	4b15      	ldr	r3, [pc, #84]	@ (8009f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009ebc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	3b08      	subs	r3, #8
 8009eca:	4a12      	ldr	r2, [pc, #72]	@ (8009f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ed0:	091b      	lsrs	r3, r3, #4
 8009ed2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ed8:	089b      	lsrs	r3, r3, #2
 8009eda:	009a      	lsls	r2, r3, #2
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	4413      	add	r3, r2
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a0b      	ldr	r2, [pc, #44]	@ (8009f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009eea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f003 031f 	and.w	r3, r3, #31
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	409a      	lsls	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8009efa:	bf00      	nop
 8009efc:	371c      	adds	r7, #28
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	40020407 	.word	0x40020407
 8009f0c:	40020800 	.word	0x40020800
 8009f10:	40020820 	.word	0x40020820
 8009f14:	cccccccd 	.word	0xcccccccd
 8009f18:	40020880 	.word	0x40020880

08009f1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009f2c:	68fa      	ldr	r2, [r7, #12]
 8009f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8009f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009f30:	4413      	add	r3, r2
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	461a      	mov	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4a08      	ldr	r2, [pc, #32]	@ (8009f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009f3e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	3b01      	subs	r3, #1
 8009f44:	f003 031f 	and.w	r3, r3, #31
 8009f48:	2201      	movs	r2, #1
 8009f4a:	409a      	lsls	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8009f50:	bf00      	nop
 8009f52:	3714      	adds	r7, #20
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr
 8009f5c:	1000823f 	.word	0x1000823f
 8009f60:	40020940 	.word	0x40020940

08009f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b087      	sub	sp, #28
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009f72:	e15a      	b.n	800a22a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	2101      	movs	r1, #1
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f80:	4013      	ands	r3, r2
 8009f82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	f000 814c 	beq.w	800a224 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	f003 0303 	and.w	r3, r3, #3
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d005      	beq.n	8009fa4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d130      	bne.n	800a006 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	005b      	lsls	r3, r3, #1
 8009fae:	2203      	movs	r2, #3
 8009fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb4:	43db      	mvns	r3, r3
 8009fb6:	693a      	ldr	r2, [r7, #16]
 8009fb8:	4013      	ands	r3, r2
 8009fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	68da      	ldr	r2, [r3, #12]
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	005b      	lsls	r3, r3, #1
 8009fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc8:	693a      	ldr	r2, [r7, #16]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	693a      	ldr	r2, [r7, #16]
 8009fd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009fda:	2201      	movs	r2, #1
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe2:	43db      	mvns	r3, r3
 8009fe4:	693a      	ldr	r2, [r7, #16]
 8009fe6:	4013      	ands	r3, r2
 8009fe8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	091b      	lsrs	r3, r3, #4
 8009ff0:	f003 0201 	and.w	r2, r3, #1
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	693a      	ldr	r2, [r7, #16]
 800a004:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	f003 0303 	and.w	r3, r3, #3
 800a00e:	2b03      	cmp	r3, #3
 800a010:	d017      	beq.n	800a042 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	005b      	lsls	r3, r3, #1
 800a01c:	2203      	movs	r2, #3
 800a01e:	fa02 f303 	lsl.w	r3, r2, r3
 800a022:	43db      	mvns	r3, r3
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	4013      	ands	r3, r2
 800a028:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	689a      	ldr	r2, [r3, #8]
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	005b      	lsls	r3, r3, #1
 800a032:	fa02 f303 	lsl.w	r3, r2, r3
 800a036:	693a      	ldr	r2, [r7, #16]
 800a038:	4313      	orrs	r3, r2
 800a03a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	693a      	ldr	r2, [r7, #16]
 800a040:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	f003 0303 	and.w	r3, r3, #3
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	d123      	bne.n	800a096 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	08da      	lsrs	r2, r3, #3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	3208      	adds	r2, #8
 800a056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a05a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	f003 0307 	and.w	r3, r3, #7
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	220f      	movs	r2, #15
 800a066:	fa02 f303 	lsl.w	r3, r2, r3
 800a06a:	43db      	mvns	r3, r3
 800a06c:	693a      	ldr	r2, [r7, #16]
 800a06e:	4013      	ands	r3, r2
 800a070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	691a      	ldr	r2, [r3, #16]
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	f003 0307 	and.w	r3, r3, #7
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	fa02 f303 	lsl.w	r3, r2, r3
 800a082:	693a      	ldr	r2, [r7, #16]
 800a084:	4313      	orrs	r3, r2
 800a086:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	08da      	lsrs	r2, r3, #3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	3208      	adds	r2, #8
 800a090:	6939      	ldr	r1, [r7, #16]
 800a092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	005b      	lsls	r3, r3, #1
 800a0a0:	2203      	movs	r2, #3
 800a0a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0a6:	43db      	mvns	r3, r3
 800a0a8:	693a      	ldr	r2, [r7, #16]
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	f003 0203 	and.w	r2, r3, #3
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	005b      	lsls	r3, r3, #1
 800a0ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a0be:	693a      	ldr	r2, [r7, #16]
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	693a      	ldr	r2, [r7, #16]
 800a0c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f000 80a6 	beq.w	800a224 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a0d8:	4b5b      	ldr	r3, [pc, #364]	@ (800a248 <HAL_GPIO_Init+0x2e4>)
 800a0da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0dc:	4a5a      	ldr	r2, [pc, #360]	@ (800a248 <HAL_GPIO_Init+0x2e4>)
 800a0de:	f043 0301 	orr.w	r3, r3, #1
 800a0e2:	6613      	str	r3, [r2, #96]	@ 0x60
 800a0e4:	4b58      	ldr	r3, [pc, #352]	@ (800a248 <HAL_GPIO_Init+0x2e4>)
 800a0e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0e8:	f003 0301 	and.w	r3, r3, #1
 800a0ec:	60bb      	str	r3, [r7, #8]
 800a0ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a0f0:	4a56      	ldr	r2, [pc, #344]	@ (800a24c <HAL_GPIO_Init+0x2e8>)
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	089b      	lsrs	r3, r3, #2
 800a0f6:	3302      	adds	r3, #2
 800a0f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	f003 0303 	and.w	r3, r3, #3
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	220f      	movs	r2, #15
 800a108:	fa02 f303 	lsl.w	r3, r2, r3
 800a10c:	43db      	mvns	r3, r3
 800a10e:	693a      	ldr	r2, [r7, #16]
 800a110:	4013      	ands	r3, r2
 800a112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800a11a:	d01f      	beq.n	800a15c <HAL_GPIO_Init+0x1f8>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4a4c      	ldr	r2, [pc, #304]	@ (800a250 <HAL_GPIO_Init+0x2ec>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d019      	beq.n	800a158 <HAL_GPIO_Init+0x1f4>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4a4b      	ldr	r2, [pc, #300]	@ (800a254 <HAL_GPIO_Init+0x2f0>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d013      	beq.n	800a154 <HAL_GPIO_Init+0x1f0>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a4a      	ldr	r2, [pc, #296]	@ (800a258 <HAL_GPIO_Init+0x2f4>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d00d      	beq.n	800a150 <HAL_GPIO_Init+0x1ec>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a49      	ldr	r2, [pc, #292]	@ (800a25c <HAL_GPIO_Init+0x2f8>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d007      	beq.n	800a14c <HAL_GPIO_Init+0x1e8>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a48      	ldr	r2, [pc, #288]	@ (800a260 <HAL_GPIO_Init+0x2fc>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d101      	bne.n	800a148 <HAL_GPIO_Init+0x1e4>
 800a144:	2305      	movs	r3, #5
 800a146:	e00a      	b.n	800a15e <HAL_GPIO_Init+0x1fa>
 800a148:	2306      	movs	r3, #6
 800a14a:	e008      	b.n	800a15e <HAL_GPIO_Init+0x1fa>
 800a14c:	2304      	movs	r3, #4
 800a14e:	e006      	b.n	800a15e <HAL_GPIO_Init+0x1fa>
 800a150:	2303      	movs	r3, #3
 800a152:	e004      	b.n	800a15e <HAL_GPIO_Init+0x1fa>
 800a154:	2302      	movs	r3, #2
 800a156:	e002      	b.n	800a15e <HAL_GPIO_Init+0x1fa>
 800a158:	2301      	movs	r3, #1
 800a15a:	e000      	b.n	800a15e <HAL_GPIO_Init+0x1fa>
 800a15c:	2300      	movs	r3, #0
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	f002 0203 	and.w	r2, r2, #3
 800a164:	0092      	lsls	r2, r2, #2
 800a166:	4093      	lsls	r3, r2
 800a168:	693a      	ldr	r2, [r7, #16]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a16e:	4937      	ldr	r1, [pc, #220]	@ (800a24c <HAL_GPIO_Init+0x2e8>)
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	089b      	lsrs	r3, r3, #2
 800a174:	3302      	adds	r3, #2
 800a176:	693a      	ldr	r2, [r7, #16]
 800a178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a17c:	4b39      	ldr	r3, [pc, #228]	@ (800a264 <HAL_GPIO_Init+0x300>)
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	43db      	mvns	r3, r3
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	4013      	ands	r3, r2
 800a18a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a194:	2b00      	cmp	r3, #0
 800a196:	d003      	beq.n	800a1a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a198:	693a      	ldr	r2, [r7, #16]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	4313      	orrs	r3, r2
 800a19e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a1a0:	4a30      	ldr	r2, [pc, #192]	@ (800a264 <HAL_GPIO_Init+0x300>)
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a1a6:	4b2f      	ldr	r3, [pc, #188]	@ (800a264 <HAL_GPIO_Init+0x300>)
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	43db      	mvns	r3, r3
 800a1b0:	693a      	ldr	r2, [r7, #16]
 800a1b2:	4013      	ands	r3, r2
 800a1b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d003      	beq.n	800a1ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a1c2:	693a      	ldr	r2, [r7, #16]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a1ca:	4a26      	ldr	r2, [pc, #152]	@ (800a264 <HAL_GPIO_Init+0x300>)
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800a1d0:	4b24      	ldr	r3, [pc, #144]	@ (800a264 <HAL_GPIO_Init+0x300>)
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	43db      	mvns	r3, r3
 800a1da:	693a      	ldr	r2, [r7, #16]
 800a1dc:	4013      	ands	r3, r2
 800a1de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d003      	beq.n	800a1f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a1ec:	693a      	ldr	r2, [r7, #16]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a1f4:	4a1b      	ldr	r2, [pc, #108]	@ (800a264 <HAL_GPIO_Init+0x300>)
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a1fa:	4b1a      	ldr	r3, [pc, #104]	@ (800a264 <HAL_GPIO_Init+0x300>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	43db      	mvns	r3, r3
 800a204:	693a      	ldr	r2, [r7, #16]
 800a206:	4013      	ands	r3, r2
 800a208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a212:	2b00      	cmp	r3, #0
 800a214:	d003      	beq.n	800a21e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a216:	693a      	ldr	r2, [r7, #16]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a21e:	4a11      	ldr	r2, [pc, #68]	@ (800a264 <HAL_GPIO_Init+0x300>)
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	3301      	adds	r3, #1
 800a228:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	fa22 f303 	lsr.w	r3, r2, r3
 800a234:	2b00      	cmp	r3, #0
 800a236:	f47f ae9d 	bne.w	8009f74 <HAL_GPIO_Init+0x10>
  }
}
 800a23a:	bf00      	nop
 800a23c:	bf00      	nop
 800a23e:	371c      	adds	r7, #28
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr
 800a248:	40021000 	.word	0x40021000
 800a24c:	40010000 	.word	0x40010000
 800a250:	48000400 	.word	0x48000400
 800a254:	48000800 	.word	0x48000800
 800a258:	48000c00 	.word	0x48000c00
 800a25c:	48001000 	.word	0x48001000
 800a260:	48001400 	.word	0x48001400
 800a264:	40010400 	.word	0x40010400

0800a268 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a268:	b480      	push	{r7}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	460b      	mov	r3, r1
 800a272:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	691a      	ldr	r2, [r3, #16]
 800a278:	887b      	ldrh	r3, [r7, #2]
 800a27a:	4013      	ands	r3, r2
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d002      	beq.n	800a286 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a280:	2301      	movs	r3, #1
 800a282:	73fb      	strb	r3, [r7, #15]
 800a284:	e001      	b.n	800a28a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a286:	2300      	movs	r3, #0
 800a288:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a28a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3714      	adds	r7, #20
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	807b      	strh	r3, [r7, #2]
 800a2a4:	4613      	mov	r3, r2
 800a2a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a2a8:	787b      	ldrb	r3, [r7, #1]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d003      	beq.n	800a2b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a2ae:	887a      	ldrh	r2, [r7, #2]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a2b4:	e002      	b.n	800a2bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a2b6:	887a      	ldrh	r2, [r7, #2]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a2bc:	bf00      	nop
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a2d2:	4b08      	ldr	r3, [pc, #32]	@ (800a2f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a2d4:	695a      	ldr	r2, [r3, #20]
 800a2d6:	88fb      	ldrh	r3, [r7, #6]
 800a2d8:	4013      	ands	r3, r2
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d006      	beq.n	800a2ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a2de:	4a05      	ldr	r2, [pc, #20]	@ (800a2f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a2e0:	88fb      	ldrh	r3, [r7, #6]
 800a2e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a2e4:	88fb      	ldrh	r3, [r7, #6]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7fb fe86 	bl	8005ff8 <HAL_GPIO_EXTI_Callback>
  }
}
 800a2ec:	bf00      	nop
 800a2ee:	3708      	adds	r7, #8
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	40010400 	.word	0x40010400

0800a2f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d141      	bne.n	800a38a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a306:	4b4b      	ldr	r3, [pc, #300]	@ (800a434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a30e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a312:	d131      	bne.n	800a378 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a314:	4b47      	ldr	r3, [pc, #284]	@ (800a434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a316:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a31a:	4a46      	ldr	r2, [pc, #280]	@ (800a434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a31c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a320:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a324:	4b43      	ldr	r3, [pc, #268]	@ (800a434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a32c:	4a41      	ldr	r2, [pc, #260]	@ (800a434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a32e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a332:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a334:	4b40      	ldr	r3, [pc, #256]	@ (800a438 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2232      	movs	r2, #50	@ 0x32
 800a33a:	fb02 f303 	mul.w	r3, r2, r3
 800a33e:	4a3f      	ldr	r2, [pc, #252]	@ (800a43c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a340:	fba2 2303 	umull	r2, r3, r2, r3
 800a344:	0c9b      	lsrs	r3, r3, #18
 800a346:	3301      	adds	r3, #1
 800a348:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a34a:	e002      	b.n	800a352 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	3b01      	subs	r3, #1
 800a350:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a352:	4b38      	ldr	r3, [pc, #224]	@ (800a434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a354:	695b      	ldr	r3, [r3, #20]
 800a356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a35a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a35e:	d102      	bne.n	800a366 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d1f2      	bne.n	800a34c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a366:	4b33      	ldr	r3, [pc, #204]	@ (800a434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a368:	695b      	ldr	r3, [r3, #20]
 800a36a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a36e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a372:	d158      	bne.n	800a426 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a374:	2303      	movs	r3, #3
 800a376:	e057      	b.n	800a428 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a378:	4b2e      	ldr	r3, [pc, #184]	@ (800a434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a37a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a37e:	4a2d      	ldr	r2, [pc, #180]	@ (800a434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a384:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800a388:	e04d      	b.n	800a426 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a390:	d141      	bne.n	800a416 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a392:	4b28      	ldr	r3, [pc, #160]	@ (800a434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a39a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a39e:	d131      	bne.n	800a404 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a3a0:	4b24      	ldr	r3, [pc, #144]	@ (800a434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3a6:	4a23      	ldr	r2, [pc, #140]	@ (800a434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a3b0:	4b20      	ldr	r3, [pc, #128]	@ (800a434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a3b8:	4a1e      	ldr	r2, [pc, #120]	@ (800a434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a3be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a3c0:	4b1d      	ldr	r3, [pc, #116]	@ (800a438 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2232      	movs	r2, #50	@ 0x32
 800a3c6:	fb02 f303 	mul.w	r3, r2, r3
 800a3ca:	4a1c      	ldr	r2, [pc, #112]	@ (800a43c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a3cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a3d0:	0c9b      	lsrs	r3, r3, #18
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a3d6:	e002      	b.n	800a3de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a3de:	4b15      	ldr	r3, [pc, #84]	@ (800a434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3e0:	695b      	ldr	r3, [r3, #20]
 800a3e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a3e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3ea:	d102      	bne.n	800a3f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1f2      	bne.n	800a3d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a3f2:	4b10      	ldr	r3, [pc, #64]	@ (800a434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3f4:	695b      	ldr	r3, [r3, #20]
 800a3f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a3fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3fe:	d112      	bne.n	800a426 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a400:	2303      	movs	r3, #3
 800a402:	e011      	b.n	800a428 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a404:	4b0b      	ldr	r3, [pc, #44]	@ (800a434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a406:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a40a:	4a0a      	ldr	r2, [pc, #40]	@ (800a434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a40c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a410:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800a414:	e007      	b.n	800a426 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a416:	4b07      	ldr	r3, [pc, #28]	@ (800a434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a41e:	4a05      	ldr	r2, [pc, #20]	@ (800a434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a420:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a424:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3714      	adds	r7, #20
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr
 800a434:	40007000 	.word	0x40007000
 800a438:	200000fc 	.word	0x200000fc
 800a43c:	431bde83 	.word	0x431bde83

0800a440 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800a440:	b480      	push	{r7}
 800a442:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800a444:	4b05      	ldr	r3, [pc, #20]	@ (800a45c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	4a04      	ldr	r2, [pc, #16]	@ (800a45c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a44a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a44e:	6093      	str	r3, [r2, #8]
}
 800a450:	bf00      	nop
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop
 800a45c:	40007000 	.word	0x40007000

0800a460 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b088      	sub	sp, #32
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d101      	bne.n	800a472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	e2fe      	b.n	800aa70 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 0301 	and.w	r3, r3, #1
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d075      	beq.n	800a56a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a47e:	4b97      	ldr	r3, [pc, #604]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	f003 030c 	and.w	r3, r3, #12
 800a486:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a488:	4b94      	ldr	r3, [pc, #592]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	f003 0303 	and.w	r3, r3, #3
 800a490:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a492:	69bb      	ldr	r3, [r7, #24]
 800a494:	2b0c      	cmp	r3, #12
 800a496:	d102      	bne.n	800a49e <HAL_RCC_OscConfig+0x3e>
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	2b03      	cmp	r3, #3
 800a49c:	d002      	beq.n	800a4a4 <HAL_RCC_OscConfig+0x44>
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	2b08      	cmp	r3, #8
 800a4a2:	d10b      	bne.n	800a4bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4a4:	4b8d      	ldr	r3, [pc, #564]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d05b      	beq.n	800a568 <HAL_RCC_OscConfig+0x108>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d157      	bne.n	800a568 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e2d9      	b.n	800aa70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4c4:	d106      	bne.n	800a4d4 <HAL_RCC_OscConfig+0x74>
 800a4c6:	4b85      	ldr	r3, [pc, #532]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a84      	ldr	r2, [pc, #528]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a4cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a4d0:	6013      	str	r3, [r2, #0]
 800a4d2:	e01d      	b.n	800a510 <HAL_RCC_OscConfig+0xb0>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a4dc:	d10c      	bne.n	800a4f8 <HAL_RCC_OscConfig+0x98>
 800a4de:	4b7f      	ldr	r3, [pc, #508]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a7e      	ldr	r2, [pc, #504]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a4e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a4e8:	6013      	str	r3, [r2, #0]
 800a4ea:	4b7c      	ldr	r3, [pc, #496]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a7b      	ldr	r2, [pc, #492]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a4f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a4f4:	6013      	str	r3, [r2, #0]
 800a4f6:	e00b      	b.n	800a510 <HAL_RCC_OscConfig+0xb0>
 800a4f8:	4b78      	ldr	r3, [pc, #480]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a77      	ldr	r2, [pc, #476]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a4fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a502:	6013      	str	r3, [r2, #0]
 800a504:	4b75      	ldr	r3, [pc, #468]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a74      	ldr	r2, [pc, #464]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a50a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a50e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d013      	beq.n	800a540 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a518:	f7fd fc5e 	bl	8007dd8 <HAL_GetTick>
 800a51c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a51e:	e008      	b.n	800a532 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a520:	f7fd fc5a 	bl	8007dd8 <HAL_GetTick>
 800a524:	4602      	mov	r2, r0
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	1ad3      	subs	r3, r2, r3
 800a52a:	2b64      	cmp	r3, #100	@ 0x64
 800a52c:	d901      	bls.n	800a532 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a52e:	2303      	movs	r3, #3
 800a530:	e29e      	b.n	800aa70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a532:	4b6a      	ldr	r3, [pc, #424]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d0f0      	beq.n	800a520 <HAL_RCC_OscConfig+0xc0>
 800a53e:	e014      	b.n	800a56a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a540:	f7fd fc4a 	bl	8007dd8 <HAL_GetTick>
 800a544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a546:	e008      	b.n	800a55a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a548:	f7fd fc46 	bl	8007dd8 <HAL_GetTick>
 800a54c:	4602      	mov	r2, r0
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	2b64      	cmp	r3, #100	@ 0x64
 800a554:	d901      	bls.n	800a55a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a556:	2303      	movs	r3, #3
 800a558:	e28a      	b.n	800aa70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a55a:	4b60      	ldr	r3, [pc, #384]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a562:	2b00      	cmp	r3, #0
 800a564:	d1f0      	bne.n	800a548 <HAL_RCC_OscConfig+0xe8>
 800a566:	e000      	b.n	800a56a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f003 0302 	and.w	r3, r3, #2
 800a572:	2b00      	cmp	r3, #0
 800a574:	d075      	beq.n	800a662 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a576:	4b59      	ldr	r3, [pc, #356]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	f003 030c 	and.w	r3, r3, #12
 800a57e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a580:	4b56      	ldr	r3, [pc, #344]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	f003 0303 	and.w	r3, r3, #3
 800a588:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	2b0c      	cmp	r3, #12
 800a58e:	d102      	bne.n	800a596 <HAL_RCC_OscConfig+0x136>
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	2b02      	cmp	r3, #2
 800a594:	d002      	beq.n	800a59c <HAL_RCC_OscConfig+0x13c>
 800a596:	69bb      	ldr	r3, [r7, #24]
 800a598:	2b04      	cmp	r3, #4
 800a59a:	d11f      	bne.n	800a5dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a59c:	4b4f      	ldr	r3, [pc, #316]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d005      	beq.n	800a5b4 <HAL_RCC_OscConfig+0x154>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d101      	bne.n	800a5b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	e25d      	b.n	800aa70 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5b4:	4b49      	ldr	r3, [pc, #292]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	691b      	ldr	r3, [r3, #16]
 800a5c0:	061b      	lsls	r3, r3, #24
 800a5c2:	4946      	ldr	r1, [pc, #280]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a5c8:	4b45      	ldr	r3, [pc, #276]	@ (800a6e0 <HAL_RCC_OscConfig+0x280>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7fd fbb7 	bl	8007d40 <HAL_InitTick>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d043      	beq.n	800a660 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e249      	b.n	800aa70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	68db      	ldr	r3, [r3, #12]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d023      	beq.n	800a62c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a5e4:	4b3d      	ldr	r3, [pc, #244]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a3c      	ldr	r2, [pc, #240]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a5ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5f0:	f7fd fbf2 	bl	8007dd8 <HAL_GetTick>
 800a5f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a5f6:	e008      	b.n	800a60a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5f8:	f7fd fbee 	bl	8007dd8 <HAL_GetTick>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	1ad3      	subs	r3, r2, r3
 800a602:	2b02      	cmp	r3, #2
 800a604:	d901      	bls.n	800a60a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a606:	2303      	movs	r3, #3
 800a608:	e232      	b.n	800aa70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a60a:	4b34      	ldr	r3, [pc, #208]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a612:	2b00      	cmp	r3, #0
 800a614:	d0f0      	beq.n	800a5f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a616:	4b31      	ldr	r3, [pc, #196]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	061b      	lsls	r3, r3, #24
 800a624:	492d      	ldr	r1, [pc, #180]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a626:	4313      	orrs	r3, r2
 800a628:	604b      	str	r3, [r1, #4]
 800a62a:	e01a      	b.n	800a662 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a62c:	4b2b      	ldr	r3, [pc, #172]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a2a      	ldr	r2, [pc, #168]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a632:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a638:	f7fd fbce 	bl	8007dd8 <HAL_GetTick>
 800a63c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a63e:	e008      	b.n	800a652 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a640:	f7fd fbca 	bl	8007dd8 <HAL_GetTick>
 800a644:	4602      	mov	r2, r0
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	1ad3      	subs	r3, r2, r3
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	d901      	bls.n	800a652 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a64e:	2303      	movs	r3, #3
 800a650:	e20e      	b.n	800aa70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a652:	4b22      	ldr	r3, [pc, #136]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d1f0      	bne.n	800a640 <HAL_RCC_OscConfig+0x1e0>
 800a65e:	e000      	b.n	800a662 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a660:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f003 0308 	and.w	r3, r3, #8
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d041      	beq.n	800a6f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	695b      	ldr	r3, [r3, #20]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d01c      	beq.n	800a6b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a676:	4b19      	ldr	r3, [pc, #100]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a678:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a67c:	4a17      	ldr	r2, [pc, #92]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a67e:	f043 0301 	orr.w	r3, r3, #1
 800a682:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a686:	f7fd fba7 	bl	8007dd8 <HAL_GetTick>
 800a68a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a68c:	e008      	b.n	800a6a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a68e:	f7fd fba3 	bl	8007dd8 <HAL_GetTick>
 800a692:	4602      	mov	r2, r0
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	1ad3      	subs	r3, r2, r3
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d901      	bls.n	800a6a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a69c:	2303      	movs	r3, #3
 800a69e:	e1e7      	b.n	800aa70 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a6a0:	4b0e      	ldr	r3, [pc, #56]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a6a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a6a6:	f003 0302 	and.w	r3, r3, #2
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d0ef      	beq.n	800a68e <HAL_RCC_OscConfig+0x22e>
 800a6ae:	e020      	b.n	800a6f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a6b0:	4b0a      	ldr	r3, [pc, #40]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a6b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a6b6:	4a09      	ldr	r2, [pc, #36]	@ (800a6dc <HAL_RCC_OscConfig+0x27c>)
 800a6b8:	f023 0301 	bic.w	r3, r3, #1
 800a6bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6c0:	f7fd fb8a 	bl	8007dd8 <HAL_GetTick>
 800a6c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a6c6:	e00d      	b.n	800a6e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a6c8:	f7fd fb86 	bl	8007dd8 <HAL_GetTick>
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	1ad3      	subs	r3, r2, r3
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	d906      	bls.n	800a6e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a6d6:	2303      	movs	r3, #3
 800a6d8:	e1ca      	b.n	800aa70 <HAL_RCC_OscConfig+0x610>
 800a6da:	bf00      	nop
 800a6dc:	40021000 	.word	0x40021000
 800a6e0:	20000100 	.word	0x20000100
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a6e4:	4b8c      	ldr	r3, [pc, #560]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a6e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a6ea:	f003 0302 	and.w	r3, r3, #2
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1ea      	bne.n	800a6c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f003 0304 	and.w	r3, r3, #4
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f000 80a6 	beq.w	800a84c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a700:	2300      	movs	r3, #0
 800a702:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a704:	4b84      	ldr	r3, [pc, #528]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d101      	bne.n	800a714 <HAL_RCC_OscConfig+0x2b4>
 800a710:	2301      	movs	r3, #1
 800a712:	e000      	b.n	800a716 <HAL_RCC_OscConfig+0x2b6>
 800a714:	2300      	movs	r3, #0
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00d      	beq.n	800a736 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a71a:	4b7f      	ldr	r3, [pc, #508]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a71c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a71e:	4a7e      	ldr	r2, [pc, #504]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a724:	6593      	str	r3, [r2, #88]	@ 0x58
 800a726:	4b7c      	ldr	r3, [pc, #496]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a72a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a72e:	60fb      	str	r3, [r7, #12]
 800a730:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a732:	2301      	movs	r3, #1
 800a734:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a736:	4b79      	ldr	r3, [pc, #484]	@ (800a91c <HAL_RCC_OscConfig+0x4bc>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d118      	bne.n	800a774 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a742:	4b76      	ldr	r3, [pc, #472]	@ (800a91c <HAL_RCC_OscConfig+0x4bc>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a75      	ldr	r2, [pc, #468]	@ (800a91c <HAL_RCC_OscConfig+0x4bc>)
 800a748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a74c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a74e:	f7fd fb43 	bl	8007dd8 <HAL_GetTick>
 800a752:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a754:	e008      	b.n	800a768 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a756:	f7fd fb3f 	bl	8007dd8 <HAL_GetTick>
 800a75a:	4602      	mov	r2, r0
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	1ad3      	subs	r3, r2, r3
 800a760:	2b02      	cmp	r3, #2
 800a762:	d901      	bls.n	800a768 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a764:	2303      	movs	r3, #3
 800a766:	e183      	b.n	800aa70 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a768:	4b6c      	ldr	r3, [pc, #432]	@ (800a91c <HAL_RCC_OscConfig+0x4bc>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a770:	2b00      	cmp	r3, #0
 800a772:	d0f0      	beq.n	800a756 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d108      	bne.n	800a78e <HAL_RCC_OscConfig+0x32e>
 800a77c:	4b66      	ldr	r3, [pc, #408]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a77e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a782:	4a65      	ldr	r2, [pc, #404]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a784:	f043 0301 	orr.w	r3, r3, #1
 800a788:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a78c:	e024      	b.n	800a7d8 <HAL_RCC_OscConfig+0x378>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	2b05      	cmp	r3, #5
 800a794:	d110      	bne.n	800a7b8 <HAL_RCC_OscConfig+0x358>
 800a796:	4b60      	ldr	r3, [pc, #384]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a79c:	4a5e      	ldr	r2, [pc, #376]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a79e:	f043 0304 	orr.w	r3, r3, #4
 800a7a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a7a6:	4b5c      	ldr	r3, [pc, #368]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a7a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7ac:	4a5a      	ldr	r2, [pc, #360]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a7ae:	f043 0301 	orr.w	r3, r3, #1
 800a7b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a7b6:	e00f      	b.n	800a7d8 <HAL_RCC_OscConfig+0x378>
 800a7b8:	4b57      	ldr	r3, [pc, #348]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a7ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7be:	4a56      	ldr	r2, [pc, #344]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a7c0:	f023 0301 	bic.w	r3, r3, #1
 800a7c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a7c8:	4b53      	ldr	r3, [pc, #332]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a7ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7ce:	4a52      	ldr	r2, [pc, #328]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a7d0:	f023 0304 	bic.w	r3, r3, #4
 800a7d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d016      	beq.n	800a80e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7e0:	f7fd fafa 	bl	8007dd8 <HAL_GetTick>
 800a7e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a7e6:	e00a      	b.n	800a7fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7e8:	f7fd faf6 	bl	8007dd8 <HAL_GetTick>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	1ad3      	subs	r3, r2, r3
 800a7f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d901      	bls.n	800a7fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800a7fa:	2303      	movs	r3, #3
 800a7fc:	e138      	b.n	800aa70 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a7fe:	4b46      	ldr	r3, [pc, #280]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a804:	f003 0302 	and.w	r3, r3, #2
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d0ed      	beq.n	800a7e8 <HAL_RCC_OscConfig+0x388>
 800a80c:	e015      	b.n	800a83a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a80e:	f7fd fae3 	bl	8007dd8 <HAL_GetTick>
 800a812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a814:	e00a      	b.n	800a82c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a816:	f7fd fadf 	bl	8007dd8 <HAL_GetTick>
 800a81a:	4602      	mov	r2, r0
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a824:	4293      	cmp	r3, r2
 800a826:	d901      	bls.n	800a82c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800a828:	2303      	movs	r3, #3
 800a82a:	e121      	b.n	800aa70 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a82c:	4b3a      	ldr	r3, [pc, #232]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a82e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a832:	f003 0302 	and.w	r3, r3, #2
 800a836:	2b00      	cmp	r3, #0
 800a838:	d1ed      	bne.n	800a816 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a83a:	7ffb      	ldrb	r3, [r7, #31]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d105      	bne.n	800a84c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a840:	4b35      	ldr	r3, [pc, #212]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a844:	4a34      	ldr	r2, [pc, #208]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a846:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a84a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f003 0320 	and.w	r3, r3, #32
 800a854:	2b00      	cmp	r3, #0
 800a856:	d03c      	beq.n	800a8d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d01c      	beq.n	800a89a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a860:	4b2d      	ldr	r3, [pc, #180]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a862:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a866:	4a2c      	ldr	r2, [pc, #176]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a868:	f043 0301 	orr.w	r3, r3, #1
 800a86c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a870:	f7fd fab2 	bl	8007dd8 <HAL_GetTick>
 800a874:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a876:	e008      	b.n	800a88a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a878:	f7fd faae 	bl	8007dd8 <HAL_GetTick>
 800a87c:	4602      	mov	r2, r0
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	1ad3      	subs	r3, r2, r3
 800a882:	2b02      	cmp	r3, #2
 800a884:	d901      	bls.n	800a88a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800a886:	2303      	movs	r3, #3
 800a888:	e0f2      	b.n	800aa70 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a88a:	4b23      	ldr	r3, [pc, #140]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a88c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a890:	f003 0302 	and.w	r3, r3, #2
 800a894:	2b00      	cmp	r3, #0
 800a896:	d0ef      	beq.n	800a878 <HAL_RCC_OscConfig+0x418>
 800a898:	e01b      	b.n	800a8d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a89a:	4b1f      	ldr	r3, [pc, #124]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a89c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a8a0:	4a1d      	ldr	r2, [pc, #116]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a8a2:	f023 0301 	bic.w	r3, r3, #1
 800a8a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8aa:	f7fd fa95 	bl	8007dd8 <HAL_GetTick>
 800a8ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a8b0:	e008      	b.n	800a8c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a8b2:	f7fd fa91 	bl	8007dd8 <HAL_GetTick>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	1ad3      	subs	r3, r2, r3
 800a8bc:	2b02      	cmp	r3, #2
 800a8be:	d901      	bls.n	800a8c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800a8c0:	2303      	movs	r3, #3
 800a8c2:	e0d5      	b.n	800aa70 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a8c4:	4b14      	ldr	r3, [pc, #80]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a8c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a8ca:	f003 0302 	and.w	r3, r3, #2
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1ef      	bne.n	800a8b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	69db      	ldr	r3, [r3, #28]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	f000 80c9 	beq.w	800aa6e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a8dc:	4b0e      	ldr	r3, [pc, #56]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	f003 030c 	and.w	r3, r3, #12
 800a8e4:	2b0c      	cmp	r3, #12
 800a8e6:	f000 8083 	beq.w	800a9f0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	69db      	ldr	r3, [r3, #28]
 800a8ee:	2b02      	cmp	r3, #2
 800a8f0:	d15e      	bne.n	800a9b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a8f2:	4b09      	ldr	r3, [pc, #36]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a08      	ldr	r2, [pc, #32]	@ (800a918 <HAL_RCC_OscConfig+0x4b8>)
 800a8f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a8fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8fe:	f7fd fa6b 	bl	8007dd8 <HAL_GetTick>
 800a902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a904:	e00c      	b.n	800a920 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a906:	f7fd fa67 	bl	8007dd8 <HAL_GetTick>
 800a90a:	4602      	mov	r2, r0
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	1ad3      	subs	r3, r2, r3
 800a910:	2b02      	cmp	r3, #2
 800a912:	d905      	bls.n	800a920 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800a914:	2303      	movs	r3, #3
 800a916:	e0ab      	b.n	800aa70 <HAL_RCC_OscConfig+0x610>
 800a918:	40021000 	.word	0x40021000
 800a91c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a920:	4b55      	ldr	r3, [pc, #340]	@ (800aa78 <HAL_RCC_OscConfig+0x618>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d1ec      	bne.n	800a906 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a92c:	4b52      	ldr	r3, [pc, #328]	@ (800aa78 <HAL_RCC_OscConfig+0x618>)
 800a92e:	68da      	ldr	r2, [r3, #12]
 800a930:	4b52      	ldr	r3, [pc, #328]	@ (800aa7c <HAL_RCC_OscConfig+0x61c>)
 800a932:	4013      	ands	r3, r2
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	6a11      	ldr	r1, [r2, #32]
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a93c:	3a01      	subs	r2, #1
 800a93e:	0112      	lsls	r2, r2, #4
 800a940:	4311      	orrs	r1, r2
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800a946:	0212      	lsls	r2, r2, #8
 800a948:	4311      	orrs	r1, r2
 800a94a:	687a      	ldr	r2, [r7, #4]
 800a94c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a94e:	0852      	lsrs	r2, r2, #1
 800a950:	3a01      	subs	r2, #1
 800a952:	0552      	lsls	r2, r2, #21
 800a954:	4311      	orrs	r1, r2
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a95a:	0852      	lsrs	r2, r2, #1
 800a95c:	3a01      	subs	r2, #1
 800a95e:	0652      	lsls	r2, r2, #25
 800a960:	4311      	orrs	r1, r2
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a966:	06d2      	lsls	r2, r2, #27
 800a968:	430a      	orrs	r2, r1
 800a96a:	4943      	ldr	r1, [pc, #268]	@ (800aa78 <HAL_RCC_OscConfig+0x618>)
 800a96c:	4313      	orrs	r3, r2
 800a96e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a970:	4b41      	ldr	r3, [pc, #260]	@ (800aa78 <HAL_RCC_OscConfig+0x618>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a40      	ldr	r2, [pc, #256]	@ (800aa78 <HAL_RCC_OscConfig+0x618>)
 800a976:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a97a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a97c:	4b3e      	ldr	r3, [pc, #248]	@ (800aa78 <HAL_RCC_OscConfig+0x618>)
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	4a3d      	ldr	r2, [pc, #244]	@ (800aa78 <HAL_RCC_OscConfig+0x618>)
 800a982:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a986:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a988:	f7fd fa26 	bl	8007dd8 <HAL_GetTick>
 800a98c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a98e:	e008      	b.n	800a9a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a990:	f7fd fa22 	bl	8007dd8 <HAL_GetTick>
 800a994:	4602      	mov	r2, r0
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d901      	bls.n	800a9a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	e066      	b.n	800aa70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a9a2:	4b35      	ldr	r3, [pc, #212]	@ (800aa78 <HAL_RCC_OscConfig+0x618>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d0f0      	beq.n	800a990 <HAL_RCC_OscConfig+0x530>
 800a9ae:	e05e      	b.n	800aa6e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9b0:	4b31      	ldr	r3, [pc, #196]	@ (800aa78 <HAL_RCC_OscConfig+0x618>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a30      	ldr	r2, [pc, #192]	@ (800aa78 <HAL_RCC_OscConfig+0x618>)
 800a9b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a9ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9bc:	f7fd fa0c 	bl	8007dd8 <HAL_GetTick>
 800a9c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a9c2:	e008      	b.n	800a9d6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9c4:	f7fd fa08 	bl	8007dd8 <HAL_GetTick>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	d901      	bls.n	800a9d6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800a9d2:	2303      	movs	r3, #3
 800a9d4:	e04c      	b.n	800aa70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a9d6:	4b28      	ldr	r3, [pc, #160]	@ (800aa78 <HAL_RCC_OscConfig+0x618>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1f0      	bne.n	800a9c4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a9e2:	4b25      	ldr	r3, [pc, #148]	@ (800aa78 <HAL_RCC_OscConfig+0x618>)
 800a9e4:	68da      	ldr	r2, [r3, #12]
 800a9e6:	4924      	ldr	r1, [pc, #144]	@ (800aa78 <HAL_RCC_OscConfig+0x618>)
 800a9e8:	4b25      	ldr	r3, [pc, #148]	@ (800aa80 <HAL_RCC_OscConfig+0x620>)
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	60cb      	str	r3, [r1, #12]
 800a9ee:	e03e      	b.n	800aa6e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	69db      	ldr	r3, [r3, #28]
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d101      	bne.n	800a9fc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	e039      	b.n	800aa70 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a9fc:	4b1e      	ldr	r3, [pc, #120]	@ (800aa78 <HAL_RCC_OscConfig+0x618>)
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	f003 0203 	and.w	r2, r3, #3
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a1b      	ldr	r3, [r3, #32]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d12c      	bne.n	800aa6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa1a:	3b01      	subs	r3, #1
 800aa1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d123      	bne.n	800aa6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d11b      	bne.n	800aa6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d113      	bne.n	800aa6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa4c:	085b      	lsrs	r3, r3, #1
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d109      	bne.n	800aa6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa60:	085b      	lsrs	r3, r3, #1
 800aa62:	3b01      	subs	r3, #1
 800aa64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d001      	beq.n	800aa6e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	e000      	b.n	800aa70 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800aa6e:	2300      	movs	r3, #0
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3720      	adds	r7, #32
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	40021000 	.word	0x40021000
 800aa7c:	019f800c 	.word	0x019f800c
 800aa80:	feeefffc 	.word	0xfeeefffc

0800aa84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b086      	sub	sp, #24
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d101      	bne.n	800aa9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e11e      	b.n	800acda <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aa9c:	4b91      	ldr	r3, [pc, #580]	@ (800ace4 <HAL_RCC_ClockConfig+0x260>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f003 030f 	and.w	r3, r3, #15
 800aaa4:	683a      	ldr	r2, [r7, #0]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d910      	bls.n	800aacc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aaaa:	4b8e      	ldr	r3, [pc, #568]	@ (800ace4 <HAL_RCC_ClockConfig+0x260>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f023 020f 	bic.w	r2, r3, #15
 800aab2:	498c      	ldr	r1, [pc, #560]	@ (800ace4 <HAL_RCC_ClockConfig+0x260>)
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	4313      	orrs	r3, r2
 800aab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aaba:	4b8a      	ldr	r3, [pc, #552]	@ (800ace4 <HAL_RCC_ClockConfig+0x260>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f003 030f 	and.w	r3, r3, #15
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d001      	beq.n	800aacc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800aac8:	2301      	movs	r3, #1
 800aaca:	e106      	b.n	800acda <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f003 0301 	and.w	r3, r3, #1
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d073      	beq.n	800abc0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	2b03      	cmp	r3, #3
 800aade:	d129      	bne.n	800ab34 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aae0:	4b81      	ldr	r3, [pc, #516]	@ (800ace8 <HAL_RCC_ClockConfig+0x264>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d101      	bne.n	800aaf0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800aaec:	2301      	movs	r3, #1
 800aaee:	e0f4      	b.n	800acda <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800aaf0:	f000 f99e 	bl	800ae30 <RCC_GetSysClockFreqFromPLLSource>
 800aaf4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	4a7c      	ldr	r2, [pc, #496]	@ (800acec <HAL_RCC_ClockConfig+0x268>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d93f      	bls.n	800ab7e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800aafe:	4b7a      	ldr	r3, [pc, #488]	@ (800ace8 <HAL_RCC_ClockConfig+0x264>)
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d009      	beq.n	800ab1e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d033      	beq.n	800ab7e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d12f      	bne.n	800ab7e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ab1e:	4b72      	ldr	r3, [pc, #456]	@ (800ace8 <HAL_RCC_ClockConfig+0x264>)
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ab26:	4a70      	ldr	r2, [pc, #448]	@ (800ace8 <HAL_RCC_ClockConfig+0x264>)
 800ab28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab2c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ab2e:	2380      	movs	r3, #128	@ 0x80
 800ab30:	617b      	str	r3, [r7, #20]
 800ab32:	e024      	b.n	800ab7e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	d107      	bne.n	800ab4c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ab3c:	4b6a      	ldr	r3, [pc, #424]	@ (800ace8 <HAL_RCC_ClockConfig+0x264>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d109      	bne.n	800ab5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	e0c6      	b.n	800acda <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ab4c:	4b66      	ldr	r3, [pc, #408]	@ (800ace8 <HAL_RCC_ClockConfig+0x264>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d101      	bne.n	800ab5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e0be      	b.n	800acda <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800ab5c:	f000 f8ce 	bl	800acfc <HAL_RCC_GetSysClockFreq>
 800ab60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	4a61      	ldr	r2, [pc, #388]	@ (800acec <HAL_RCC_ClockConfig+0x268>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d909      	bls.n	800ab7e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ab6a:	4b5f      	ldr	r3, [pc, #380]	@ (800ace8 <HAL_RCC_ClockConfig+0x264>)
 800ab6c:	689b      	ldr	r3, [r3, #8]
 800ab6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ab72:	4a5d      	ldr	r2, [pc, #372]	@ (800ace8 <HAL_RCC_ClockConfig+0x264>)
 800ab74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab78:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800ab7a:	2380      	movs	r3, #128	@ 0x80
 800ab7c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ab7e:	4b5a      	ldr	r3, [pc, #360]	@ (800ace8 <HAL_RCC_ClockConfig+0x264>)
 800ab80:	689b      	ldr	r3, [r3, #8]
 800ab82:	f023 0203 	bic.w	r2, r3, #3
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	4957      	ldr	r1, [pc, #348]	@ (800ace8 <HAL_RCC_ClockConfig+0x264>)
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab90:	f7fd f922 	bl	8007dd8 <HAL_GetTick>
 800ab94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab96:	e00a      	b.n	800abae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab98:	f7fd f91e 	bl	8007dd8 <HAL_GetTick>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	1ad3      	subs	r3, r2, r3
 800aba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d901      	bls.n	800abae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800abaa:	2303      	movs	r3, #3
 800abac:	e095      	b.n	800acda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800abae:	4b4e      	ldr	r3, [pc, #312]	@ (800ace8 <HAL_RCC_ClockConfig+0x264>)
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	f003 020c 	and.w	r2, r3, #12
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d1eb      	bne.n	800ab98 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f003 0302 	and.w	r3, r3, #2
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d023      	beq.n	800ac14 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f003 0304 	and.w	r3, r3, #4
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d005      	beq.n	800abe4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800abd8:	4b43      	ldr	r3, [pc, #268]	@ (800ace8 <HAL_RCC_ClockConfig+0x264>)
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	4a42      	ldr	r2, [pc, #264]	@ (800ace8 <HAL_RCC_ClockConfig+0x264>)
 800abde:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800abe2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f003 0308 	and.w	r3, r3, #8
 800abec:	2b00      	cmp	r3, #0
 800abee:	d007      	beq.n	800ac00 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800abf0:	4b3d      	ldr	r3, [pc, #244]	@ (800ace8 <HAL_RCC_ClockConfig+0x264>)
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800abf8:	4a3b      	ldr	r2, [pc, #236]	@ (800ace8 <HAL_RCC_ClockConfig+0x264>)
 800abfa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800abfe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac00:	4b39      	ldr	r3, [pc, #228]	@ (800ace8 <HAL_RCC_ClockConfig+0x264>)
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	4936      	ldr	r1, [pc, #216]	@ (800ace8 <HAL_RCC_ClockConfig+0x264>)
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	608b      	str	r3, [r1, #8]
 800ac12:	e008      	b.n	800ac26 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	2b80      	cmp	r3, #128	@ 0x80
 800ac18:	d105      	bne.n	800ac26 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800ac1a:	4b33      	ldr	r3, [pc, #204]	@ (800ace8 <HAL_RCC_ClockConfig+0x264>)
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	4a32      	ldr	r2, [pc, #200]	@ (800ace8 <HAL_RCC_ClockConfig+0x264>)
 800ac20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ac24:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ac26:	4b2f      	ldr	r3, [pc, #188]	@ (800ace4 <HAL_RCC_ClockConfig+0x260>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f003 030f 	and.w	r3, r3, #15
 800ac2e:	683a      	ldr	r2, [r7, #0]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d21d      	bcs.n	800ac70 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac34:	4b2b      	ldr	r3, [pc, #172]	@ (800ace4 <HAL_RCC_ClockConfig+0x260>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f023 020f 	bic.w	r2, r3, #15
 800ac3c:	4929      	ldr	r1, [pc, #164]	@ (800ace4 <HAL_RCC_ClockConfig+0x260>)
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	4313      	orrs	r3, r2
 800ac42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ac44:	f7fd f8c8 	bl	8007dd8 <HAL_GetTick>
 800ac48:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac4a:	e00a      	b.n	800ac62 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac4c:	f7fd f8c4 	bl	8007dd8 <HAL_GetTick>
 800ac50:	4602      	mov	r2, r0
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	1ad3      	subs	r3, r2, r3
 800ac56:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d901      	bls.n	800ac62 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800ac5e:	2303      	movs	r3, #3
 800ac60:	e03b      	b.n	800acda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac62:	4b20      	ldr	r3, [pc, #128]	@ (800ace4 <HAL_RCC_ClockConfig+0x260>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f003 030f 	and.w	r3, r3, #15
 800ac6a:	683a      	ldr	r2, [r7, #0]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d1ed      	bne.n	800ac4c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f003 0304 	and.w	r3, r3, #4
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d008      	beq.n	800ac8e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ac7c:	4b1a      	ldr	r3, [pc, #104]	@ (800ace8 <HAL_RCC_ClockConfig+0x264>)
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	4917      	ldr	r1, [pc, #92]	@ (800ace8 <HAL_RCC_ClockConfig+0x264>)
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f003 0308 	and.w	r3, r3, #8
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d009      	beq.n	800acae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ac9a:	4b13      	ldr	r3, [pc, #76]	@ (800ace8 <HAL_RCC_ClockConfig+0x264>)
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	00db      	lsls	r3, r3, #3
 800aca8:	490f      	ldr	r1, [pc, #60]	@ (800ace8 <HAL_RCC_ClockConfig+0x264>)
 800acaa:	4313      	orrs	r3, r2
 800acac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800acae:	f000 f825 	bl	800acfc <HAL_RCC_GetSysClockFreq>
 800acb2:	4602      	mov	r2, r0
 800acb4:	4b0c      	ldr	r3, [pc, #48]	@ (800ace8 <HAL_RCC_ClockConfig+0x264>)
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	091b      	lsrs	r3, r3, #4
 800acba:	f003 030f 	and.w	r3, r3, #15
 800acbe:	490c      	ldr	r1, [pc, #48]	@ (800acf0 <HAL_RCC_ClockConfig+0x26c>)
 800acc0:	5ccb      	ldrb	r3, [r1, r3]
 800acc2:	f003 031f 	and.w	r3, r3, #31
 800acc6:	fa22 f303 	lsr.w	r3, r2, r3
 800acca:	4a0a      	ldr	r2, [pc, #40]	@ (800acf4 <HAL_RCC_ClockConfig+0x270>)
 800accc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800acce:	4b0a      	ldr	r3, [pc, #40]	@ (800acf8 <HAL_RCC_ClockConfig+0x274>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7fd f834 	bl	8007d40 <HAL_InitTick>
 800acd8:	4603      	mov	r3, r0
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3718      	adds	r7, #24
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	40022000 	.word	0x40022000
 800ace8:	40021000 	.word	0x40021000
 800acec:	04c4b400 	.word	0x04c4b400
 800acf0:	080113d8 	.word	0x080113d8
 800acf4:	200000fc 	.word	0x200000fc
 800acf8:	20000100 	.word	0x20000100

0800acfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b087      	sub	sp, #28
 800ad00:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ad02:	4b2c      	ldr	r3, [pc, #176]	@ (800adb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	f003 030c 	and.w	r3, r3, #12
 800ad0a:	2b04      	cmp	r3, #4
 800ad0c:	d102      	bne.n	800ad14 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ad0e:	4b2a      	ldr	r3, [pc, #168]	@ (800adb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ad10:	613b      	str	r3, [r7, #16]
 800ad12:	e047      	b.n	800ada4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800ad14:	4b27      	ldr	r3, [pc, #156]	@ (800adb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	f003 030c 	and.w	r3, r3, #12
 800ad1c:	2b08      	cmp	r3, #8
 800ad1e:	d102      	bne.n	800ad26 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ad20:	4b26      	ldr	r3, [pc, #152]	@ (800adbc <HAL_RCC_GetSysClockFreq+0xc0>)
 800ad22:	613b      	str	r3, [r7, #16]
 800ad24:	e03e      	b.n	800ada4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800ad26:	4b23      	ldr	r3, [pc, #140]	@ (800adb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	f003 030c 	and.w	r3, r3, #12
 800ad2e:	2b0c      	cmp	r3, #12
 800ad30:	d136      	bne.n	800ada0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ad32:	4b20      	ldr	r3, [pc, #128]	@ (800adb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ad34:	68db      	ldr	r3, [r3, #12]
 800ad36:	f003 0303 	and.w	r3, r3, #3
 800ad3a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ad3c:	4b1d      	ldr	r3, [pc, #116]	@ (800adb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ad3e:	68db      	ldr	r3, [r3, #12]
 800ad40:	091b      	lsrs	r3, r3, #4
 800ad42:	f003 030f 	and.w	r3, r3, #15
 800ad46:	3301      	adds	r3, #1
 800ad48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2b03      	cmp	r3, #3
 800ad4e:	d10c      	bne.n	800ad6a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ad50:	4a1a      	ldr	r2, [pc, #104]	@ (800adbc <HAL_RCC_GetSysClockFreq+0xc0>)
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad58:	4a16      	ldr	r2, [pc, #88]	@ (800adb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ad5a:	68d2      	ldr	r2, [r2, #12]
 800ad5c:	0a12      	lsrs	r2, r2, #8
 800ad5e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ad62:	fb02 f303 	mul.w	r3, r2, r3
 800ad66:	617b      	str	r3, [r7, #20]
      break;
 800ad68:	e00c      	b.n	800ad84 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ad6a:	4a13      	ldr	r2, [pc, #76]	@ (800adb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad72:	4a10      	ldr	r2, [pc, #64]	@ (800adb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ad74:	68d2      	ldr	r2, [r2, #12]
 800ad76:	0a12      	lsrs	r2, r2, #8
 800ad78:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ad7c:	fb02 f303 	mul.w	r3, r2, r3
 800ad80:	617b      	str	r3, [r7, #20]
      break;
 800ad82:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ad84:	4b0b      	ldr	r3, [pc, #44]	@ (800adb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	0e5b      	lsrs	r3, r3, #25
 800ad8a:	f003 0303 	and.w	r3, r3, #3
 800ad8e:	3301      	adds	r3, #1
 800ad90:	005b      	lsls	r3, r3, #1
 800ad92:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800ad94:	697a      	ldr	r2, [r7, #20]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad9c:	613b      	str	r3, [r7, #16]
 800ad9e:	e001      	b.n	800ada4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800ada0:	2300      	movs	r3, #0
 800ada2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800ada4:	693b      	ldr	r3, [r7, #16]
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	371c      	adds	r7, #28
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	40021000 	.word	0x40021000
 800adb8:	00f42400 	.word	0x00f42400
 800adbc:	016e3600 	.word	0x016e3600

0800adc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800adc0:	b480      	push	{r7}
 800adc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800adc4:	4b03      	ldr	r3, [pc, #12]	@ (800add4 <HAL_RCC_GetHCLKFreq+0x14>)
 800adc6:	681b      	ldr	r3, [r3, #0]
}
 800adc8:	4618      	mov	r0, r3
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop
 800add4:	200000fc 	.word	0x200000fc

0800add8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800addc:	f7ff fff0 	bl	800adc0 <HAL_RCC_GetHCLKFreq>
 800ade0:	4602      	mov	r2, r0
 800ade2:	4b06      	ldr	r3, [pc, #24]	@ (800adfc <HAL_RCC_GetPCLK1Freq+0x24>)
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	0a1b      	lsrs	r3, r3, #8
 800ade8:	f003 0307 	and.w	r3, r3, #7
 800adec:	4904      	ldr	r1, [pc, #16]	@ (800ae00 <HAL_RCC_GetPCLK1Freq+0x28>)
 800adee:	5ccb      	ldrb	r3, [r1, r3]
 800adf0:	f003 031f 	and.w	r3, r3, #31
 800adf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	40021000 	.word	0x40021000
 800ae00:	080113e8 	.word	0x080113e8

0800ae04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800ae08:	f7ff ffda 	bl	800adc0 <HAL_RCC_GetHCLKFreq>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	4b06      	ldr	r3, [pc, #24]	@ (800ae28 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	0adb      	lsrs	r3, r3, #11
 800ae14:	f003 0307 	and.w	r3, r3, #7
 800ae18:	4904      	ldr	r1, [pc, #16]	@ (800ae2c <HAL_RCC_GetPCLK2Freq+0x28>)
 800ae1a:	5ccb      	ldrb	r3, [r1, r3]
 800ae1c:	f003 031f 	and.w	r3, r3, #31
 800ae20:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	40021000 	.word	0x40021000
 800ae2c:	080113e8 	.word	0x080113e8

0800ae30 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b087      	sub	sp, #28
 800ae34:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ae36:	4b1e      	ldr	r3, [pc, #120]	@ (800aeb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ae38:	68db      	ldr	r3, [r3, #12]
 800ae3a:	f003 0303 	and.w	r3, r3, #3
 800ae3e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ae40:	4b1b      	ldr	r3, [pc, #108]	@ (800aeb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	091b      	lsrs	r3, r3, #4
 800ae46:	f003 030f 	and.w	r3, r3, #15
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	2b03      	cmp	r3, #3
 800ae52:	d10c      	bne.n	800ae6e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ae54:	4a17      	ldr	r2, [pc, #92]	@ (800aeb4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae5c:	4a14      	ldr	r2, [pc, #80]	@ (800aeb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ae5e:	68d2      	ldr	r2, [r2, #12]
 800ae60:	0a12      	lsrs	r2, r2, #8
 800ae62:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ae66:	fb02 f303 	mul.w	r3, r2, r3
 800ae6a:	617b      	str	r3, [r7, #20]
    break;
 800ae6c:	e00c      	b.n	800ae88 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ae6e:	4a12      	ldr	r2, [pc, #72]	@ (800aeb8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae76:	4a0e      	ldr	r2, [pc, #56]	@ (800aeb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ae78:	68d2      	ldr	r2, [r2, #12]
 800ae7a:	0a12      	lsrs	r2, r2, #8
 800ae7c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ae80:	fb02 f303 	mul.w	r3, r2, r3
 800ae84:	617b      	str	r3, [r7, #20]
    break;
 800ae86:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ae88:	4b09      	ldr	r3, [pc, #36]	@ (800aeb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ae8a:	68db      	ldr	r3, [r3, #12]
 800ae8c:	0e5b      	lsrs	r3, r3, #25
 800ae8e:	f003 0303 	and.w	r3, r3, #3
 800ae92:	3301      	adds	r3, #1
 800ae94:	005b      	lsls	r3, r3, #1
 800ae96:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800ae98:	697a      	ldr	r2, [r7, #20]
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aea0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800aea2:	687b      	ldr	r3, [r7, #4]
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	371c      	adds	r7, #28
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr
 800aeb0:	40021000 	.word	0x40021000
 800aeb4:	016e3600 	.word	0x016e3600
 800aeb8:	00f42400 	.word	0x00f42400

0800aebc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b086      	sub	sp, #24
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aec4:	2300      	movs	r3, #0
 800aec6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aec8:	2300      	movs	r3, #0
 800aeca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f000 8098 	beq.w	800b00a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aeda:	2300      	movs	r3, #0
 800aedc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aede:	4b43      	ldr	r3, [pc, #268]	@ (800afec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d10d      	bne.n	800af06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aeea:	4b40      	ldr	r3, [pc, #256]	@ (800afec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aeec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aeee:	4a3f      	ldr	r2, [pc, #252]	@ (800afec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aef0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aef4:	6593      	str	r3, [r2, #88]	@ 0x58
 800aef6:	4b3d      	ldr	r3, [pc, #244]	@ (800afec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aefa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aefe:	60bb      	str	r3, [r7, #8]
 800af00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800af02:	2301      	movs	r3, #1
 800af04:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800af06:	4b3a      	ldr	r3, [pc, #232]	@ (800aff0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a39      	ldr	r2, [pc, #228]	@ (800aff0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800af0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800af12:	f7fc ff61 	bl	8007dd8 <HAL_GetTick>
 800af16:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af18:	e009      	b.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af1a:	f7fc ff5d 	bl	8007dd8 <HAL_GetTick>
 800af1e:	4602      	mov	r2, r0
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	1ad3      	subs	r3, r2, r3
 800af24:	2b02      	cmp	r3, #2
 800af26:	d902      	bls.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800af28:	2303      	movs	r3, #3
 800af2a:	74fb      	strb	r3, [r7, #19]
        break;
 800af2c:	e005      	b.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af2e:	4b30      	ldr	r3, [pc, #192]	@ (800aff0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af36:	2b00      	cmp	r3, #0
 800af38:	d0ef      	beq.n	800af1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800af3a:	7cfb      	ldrb	r3, [r7, #19]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d159      	bne.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800af40:	4b2a      	ldr	r3, [pc, #168]	@ (800afec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800af42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af4a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d01e      	beq.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af56:	697a      	ldr	r2, [r7, #20]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d019      	beq.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800af5c:	4b23      	ldr	r3, [pc, #140]	@ (800afec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800af5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800af68:	4b20      	ldr	r3, [pc, #128]	@ (800afec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800af6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af6e:	4a1f      	ldr	r2, [pc, #124]	@ (800afec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800af70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800af74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800af78:	4b1c      	ldr	r3, [pc, #112]	@ (800afec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800af7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af7e:	4a1b      	ldr	r2, [pc, #108]	@ (800afec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800af80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800af88:	4a18      	ldr	r2, [pc, #96]	@ (800afec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	f003 0301 	and.w	r3, r3, #1
 800af96:	2b00      	cmp	r3, #0
 800af98:	d016      	beq.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af9a:	f7fc ff1d 	bl	8007dd8 <HAL_GetTick>
 800af9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800afa0:	e00b      	b.n	800afba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afa2:	f7fc ff19 	bl	8007dd8 <HAL_GetTick>
 800afa6:	4602      	mov	r2, r0
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	1ad3      	subs	r3, r2, r3
 800afac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d902      	bls.n	800afba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800afb4:	2303      	movs	r3, #3
 800afb6:	74fb      	strb	r3, [r7, #19]
            break;
 800afb8:	e006      	b.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800afba:	4b0c      	ldr	r3, [pc, #48]	@ (800afec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800afbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afc0:	f003 0302 	and.w	r3, r3, #2
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d0ec      	beq.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800afc8:	7cfb      	ldrb	r3, [r7, #19]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d10b      	bne.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800afce:	4b07      	ldr	r3, [pc, #28]	@ (800afec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800afd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afdc:	4903      	ldr	r1, [pc, #12]	@ (800afec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800afde:	4313      	orrs	r3, r2
 800afe0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800afe4:	e008      	b.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800afe6:	7cfb      	ldrb	r3, [r7, #19]
 800afe8:	74bb      	strb	r3, [r7, #18]
 800afea:	e005      	b.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800afec:	40021000 	.word	0x40021000
 800aff0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aff4:	7cfb      	ldrb	r3, [r7, #19]
 800aff6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aff8:	7c7b      	ldrb	r3, [r7, #17]
 800affa:	2b01      	cmp	r3, #1
 800affc:	d105      	bne.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800affe:	4ba7      	ldr	r3, [pc, #668]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b002:	4aa6      	ldr	r2, [pc, #664]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b004:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b008:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f003 0301 	and.w	r3, r3, #1
 800b012:	2b00      	cmp	r3, #0
 800b014:	d00a      	beq.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b016:	4ba1      	ldr	r3, [pc, #644]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b01c:	f023 0203 	bic.w	r2, r3, #3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	499d      	ldr	r1, [pc, #628]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b026:	4313      	orrs	r3, r2
 800b028:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f003 0302 	and.w	r3, r3, #2
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00a      	beq.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b038:	4b98      	ldr	r3, [pc, #608]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b03a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b03e:	f023 020c 	bic.w	r2, r3, #12
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	4995      	ldr	r1, [pc, #596]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b048:	4313      	orrs	r3, r2
 800b04a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f003 0304 	and.w	r3, r3, #4
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00a      	beq.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b05a:	4b90      	ldr	r3, [pc, #576]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b060:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	498c      	ldr	r1, [pc, #560]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b06a:	4313      	orrs	r3, r2
 800b06c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f003 0308 	and.w	r3, r3, #8
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00a      	beq.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b07c:	4b87      	ldr	r3, [pc, #540]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b07e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b082:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	691b      	ldr	r3, [r3, #16]
 800b08a:	4984      	ldr	r1, [pc, #528]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b08c:	4313      	orrs	r3, r2
 800b08e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f003 0310 	and.w	r3, r3, #16
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00a      	beq.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b09e:	4b7f      	ldr	r3, [pc, #508]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b0a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	695b      	ldr	r3, [r3, #20]
 800b0ac:	497b      	ldr	r1, [pc, #492]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f003 0320 	and.w	r3, r3, #32
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d00a      	beq.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b0c0:	4b76      	ldr	r3, [pc, #472]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b0c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	699b      	ldr	r3, [r3, #24]
 800b0ce:	4973      	ldr	r1, [pc, #460]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d00a      	beq.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b0e2:	4b6e      	ldr	r3, [pc, #440]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b0e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	69db      	ldr	r3, [r3, #28]
 800b0f0:	496a      	ldr	r1, [pc, #424]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b100:	2b00      	cmp	r3, #0
 800b102:	d00a      	beq.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b104:	4b65      	ldr	r3, [pc, #404]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b10a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6a1b      	ldr	r3, [r3, #32]
 800b112:	4962      	ldr	r1, [pc, #392]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b114:	4313      	orrs	r3, r2
 800b116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b122:	2b00      	cmp	r3, #0
 800b124:	d00a      	beq.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b126:	4b5d      	ldr	r3, [pc, #372]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b12c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b134:	4959      	ldr	r1, [pc, #356]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b136:	4313      	orrs	r3, r2
 800b138:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b144:	2b00      	cmp	r3, #0
 800b146:	d00a      	beq.n	800b15e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b148:	4b54      	ldr	r3, [pc, #336]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b14a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b14e:	f023 0203 	bic.w	r2, r3, #3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b156:	4951      	ldr	r1, [pc, #324]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b158:	4313      	orrs	r3, r2
 800b15a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00a      	beq.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b16a:	4b4c      	ldr	r3, [pc, #304]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b16c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b170:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b178:	4948      	ldr	r1, [pc, #288]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b17a:	4313      	orrs	r3, r2
 800b17c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d015      	beq.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b18c:	4b43      	ldr	r3, [pc, #268]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b192:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b19a:	4940      	ldr	r1, [pc, #256]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b19c:	4313      	orrs	r3, r2
 800b19e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1aa:	d105      	bne.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b1ac:	4b3b      	ldr	r3, [pc, #236]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b1ae:	68db      	ldr	r3, [r3, #12]
 800b1b0:	4a3a      	ldr	r2, [pc, #232]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b1b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b1b6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d015      	beq.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b1c4:	4b35      	ldr	r3, [pc, #212]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b1c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1d2:	4932      	ldr	r1, [pc, #200]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b1e2:	d105      	bne.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b1e4:	4b2d      	ldr	r3, [pc, #180]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	4a2c      	ldr	r2, [pc, #176]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b1ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b1ee:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d015      	beq.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b1fc:	4b27      	ldr	r3, [pc, #156]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b1fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b202:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b20a:	4924      	ldr	r1, [pc, #144]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b20c:	4313      	orrs	r3, r2
 800b20e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b216:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b21a:	d105      	bne.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b21c:	4b1f      	ldr	r3, [pc, #124]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	4a1e      	ldr	r2, [pc, #120]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b222:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b226:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b230:	2b00      	cmp	r3, #0
 800b232:	d015      	beq.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b234:	4b19      	ldr	r3, [pc, #100]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b23a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b242:	4916      	ldr	r1, [pc, #88]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b244:	4313      	orrs	r3, r2
 800b246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b24e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b252:	d105      	bne.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b254:	4b11      	ldr	r3, [pc, #68]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b256:	68db      	ldr	r3, [r3, #12]
 800b258:	4a10      	ldr	r2, [pc, #64]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b25a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b25e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d019      	beq.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b26c:	4b0b      	ldr	r3, [pc, #44]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b26e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b272:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b27a:	4908      	ldr	r1, [pc, #32]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b27c:	4313      	orrs	r3, r2
 800b27e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b286:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b28a:	d109      	bne.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b28c:	4b03      	ldr	r3, [pc, #12]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	4a02      	ldr	r2, [pc, #8]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b292:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b296:	60d3      	str	r3, [r2, #12]
 800b298:	e002      	b.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800b29a:	bf00      	nop
 800b29c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d015      	beq.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b2ac:	4b29      	ldr	r3, [pc, #164]	@ (800b354 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b2ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2b2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2ba:	4926      	ldr	r1, [pc, #152]	@ (800b354 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b2ca:	d105      	bne.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b2cc:	4b21      	ldr	r3, [pc, #132]	@ (800b354 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	4a20      	ldr	r2, [pc, #128]	@ (800b354 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b2d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2d6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d015      	beq.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800b2e4:	4b1b      	ldr	r3, [pc, #108]	@ (800b354 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b2e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2ea:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2f2:	4918      	ldr	r1, [pc, #96]	@ (800b354 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b302:	d105      	bne.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b304:	4b13      	ldr	r3, [pc, #76]	@ (800b354 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	4a12      	ldr	r2, [pc, #72]	@ (800b354 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b30a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b30e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d015      	beq.n	800b348 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b31c:	4b0d      	ldr	r3, [pc, #52]	@ (800b354 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b31e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b322:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b32a:	490a      	ldr	r1, [pc, #40]	@ (800b354 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b32c:	4313      	orrs	r3, r2
 800b32e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b336:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b33a:	d105      	bne.n	800b348 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b33c:	4b05      	ldr	r3, [pc, #20]	@ (800b354 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b33e:	68db      	ldr	r3, [r3, #12]
 800b340:	4a04      	ldr	r2, [pc, #16]	@ (800b354 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b342:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b346:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800b348:	7cbb      	ldrb	r3, [r7, #18]
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3718      	adds	r7, #24
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	40021000 	.word	0x40021000

0800b358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d101      	bne.n	800b36a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	e054      	b.n	800b414 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b370:	b2db      	uxtb	r3, r3
 800b372:	2b00      	cmp	r3, #0
 800b374:	d111      	bne.n	800b39a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f001 fee2 	bl	800d148 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d102      	bne.n	800b392 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4a23      	ldr	r2, [pc, #140]	@ (800b41c <HAL_TIM_Base_Init+0xc4>)
 800b390:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2202      	movs	r2, #2
 800b39e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	3304      	adds	r3, #4
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	4610      	mov	r0, r2
 800b3ae:	f001 fa2b 	bl	800c808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2201      	movs	r2, #1
 800b3be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2201      	movs	r2, #1
 800b3de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2201      	movs	r2, #1
 800b406:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2201      	movs	r2, #1
 800b40e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b412:	2300      	movs	r3, #0
}
 800b414:	4618      	mov	r0, r3
 800b416:	3708      	adds	r7, #8
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	08007601 	.word	0x08007601

0800b420 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b420:	b480      	push	{r7}
 800b422:	b085      	sub	sp, #20
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	2b01      	cmp	r3, #1
 800b432:	d001      	beq.n	800b438 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b434:	2301      	movs	r3, #1
 800b436:	e04c      	b.n	800b4d2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2202      	movs	r2, #2
 800b43c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a26      	ldr	r2, [pc, #152]	@ (800b4e0 <HAL_TIM_Base_Start+0xc0>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d022      	beq.n	800b490 <HAL_TIM_Base_Start+0x70>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b452:	d01d      	beq.n	800b490 <HAL_TIM_Base_Start+0x70>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4a22      	ldr	r2, [pc, #136]	@ (800b4e4 <HAL_TIM_Base_Start+0xc4>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d018      	beq.n	800b490 <HAL_TIM_Base_Start+0x70>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a21      	ldr	r2, [pc, #132]	@ (800b4e8 <HAL_TIM_Base_Start+0xc8>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d013      	beq.n	800b490 <HAL_TIM_Base_Start+0x70>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a1f      	ldr	r2, [pc, #124]	@ (800b4ec <HAL_TIM_Base_Start+0xcc>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d00e      	beq.n	800b490 <HAL_TIM_Base_Start+0x70>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4a1e      	ldr	r2, [pc, #120]	@ (800b4f0 <HAL_TIM_Base_Start+0xd0>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d009      	beq.n	800b490 <HAL_TIM_Base_Start+0x70>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4a1c      	ldr	r2, [pc, #112]	@ (800b4f4 <HAL_TIM_Base_Start+0xd4>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d004      	beq.n	800b490 <HAL_TIM_Base_Start+0x70>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a1b      	ldr	r2, [pc, #108]	@ (800b4f8 <HAL_TIM_Base_Start+0xd8>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d115      	bne.n	800b4bc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	689a      	ldr	r2, [r3, #8]
 800b496:	4b19      	ldr	r3, [pc, #100]	@ (800b4fc <HAL_TIM_Base_Start+0xdc>)
 800b498:	4013      	ands	r3, r2
 800b49a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2b06      	cmp	r3, #6
 800b4a0:	d015      	beq.n	800b4ce <HAL_TIM_Base_Start+0xae>
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4a8:	d011      	beq.n	800b4ce <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f042 0201 	orr.w	r2, r2, #1
 800b4b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4ba:	e008      	b.n	800b4ce <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f042 0201 	orr.w	r2, r2, #1
 800b4ca:	601a      	str	r2, [r3, #0]
 800b4cc:	e000      	b.n	800b4d0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b4d0:	2300      	movs	r3, #0
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3714      	adds	r7, #20
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr
 800b4de:	bf00      	nop
 800b4e0:	40012c00 	.word	0x40012c00
 800b4e4:	40000400 	.word	0x40000400
 800b4e8:	40000800 	.word	0x40000800
 800b4ec:	40000c00 	.word	0x40000c00
 800b4f0:	40013400 	.word	0x40013400
 800b4f4:	40014000 	.word	0x40014000
 800b4f8:	40015000 	.word	0x40015000
 800b4fc:	00010007 	.word	0x00010007

0800b500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	2b01      	cmp	r3, #1
 800b512:	d001      	beq.n	800b518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b514:	2301      	movs	r3, #1
 800b516:	e054      	b.n	800b5c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2202      	movs	r2, #2
 800b51c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	68da      	ldr	r2, [r3, #12]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f042 0201 	orr.w	r2, r2, #1
 800b52e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a26      	ldr	r2, [pc, #152]	@ (800b5d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d022      	beq.n	800b580 <HAL_TIM_Base_Start_IT+0x80>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b542:	d01d      	beq.n	800b580 <HAL_TIM_Base_Start_IT+0x80>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4a22      	ldr	r2, [pc, #136]	@ (800b5d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d018      	beq.n	800b580 <HAL_TIM_Base_Start_IT+0x80>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4a21      	ldr	r2, [pc, #132]	@ (800b5d8 <HAL_TIM_Base_Start_IT+0xd8>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d013      	beq.n	800b580 <HAL_TIM_Base_Start_IT+0x80>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a1f      	ldr	r2, [pc, #124]	@ (800b5dc <HAL_TIM_Base_Start_IT+0xdc>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d00e      	beq.n	800b580 <HAL_TIM_Base_Start_IT+0x80>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4a1e      	ldr	r2, [pc, #120]	@ (800b5e0 <HAL_TIM_Base_Start_IT+0xe0>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d009      	beq.n	800b580 <HAL_TIM_Base_Start_IT+0x80>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a1c      	ldr	r2, [pc, #112]	@ (800b5e4 <HAL_TIM_Base_Start_IT+0xe4>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d004      	beq.n	800b580 <HAL_TIM_Base_Start_IT+0x80>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a1b      	ldr	r2, [pc, #108]	@ (800b5e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d115      	bne.n	800b5ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	689a      	ldr	r2, [r3, #8]
 800b586:	4b19      	ldr	r3, [pc, #100]	@ (800b5ec <HAL_TIM_Base_Start_IT+0xec>)
 800b588:	4013      	ands	r3, r2
 800b58a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2b06      	cmp	r3, #6
 800b590:	d015      	beq.n	800b5be <HAL_TIM_Base_Start_IT+0xbe>
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b598:	d011      	beq.n	800b5be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	681a      	ldr	r2, [r3, #0]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f042 0201 	orr.w	r2, r2, #1
 800b5a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5aa:	e008      	b.n	800b5be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	681a      	ldr	r2, [r3, #0]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f042 0201 	orr.w	r2, r2, #1
 800b5ba:	601a      	str	r2, [r3, #0]
 800b5bc:	e000      	b.n	800b5c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b5c0:	2300      	movs	r3, #0
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3714      	adds	r7, #20
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop
 800b5d0:	40012c00 	.word	0x40012c00
 800b5d4:	40000400 	.word	0x40000400
 800b5d8:	40000800 	.word	0x40000800
 800b5dc:	40000c00 	.word	0x40000c00
 800b5e0:	40013400 	.word	0x40013400
 800b5e4:	40014000 	.word	0x40014000
 800b5e8:	40015000 	.word	0x40015000
 800b5ec:	00010007 	.word	0x00010007

0800b5f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d101      	bne.n	800b602 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b5fe:	2301      	movs	r3, #1
 800b600:	e054      	b.n	800b6ac <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d111      	bne.n	800b632 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2200      	movs	r2, #0
 800b612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f001 fd96 	bl	800d148 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b620:	2b00      	cmp	r3, #0
 800b622:	d102      	bne.n	800b62a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	4a23      	ldr	r2, [pc, #140]	@ (800b6b4 <HAL_TIM_PWM_Init+0xc4>)
 800b628:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2202      	movs	r2, #2
 800b636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681a      	ldr	r2, [r3, #0]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	3304      	adds	r3, #4
 800b642:	4619      	mov	r1, r3
 800b644:	4610      	mov	r0, r2
 800b646:	f001 f8df 	bl	800c808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2201      	movs	r2, #1
 800b64e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2201      	movs	r2, #1
 800b656:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2201      	movs	r2, #1
 800b65e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2201      	movs	r2, #1
 800b666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2201      	movs	r2, #1
 800b66e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2201      	movs	r2, #1
 800b676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2201      	movs	r2, #1
 800b67e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2201      	movs	r2, #1
 800b686:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2201      	movs	r2, #1
 800b68e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2201      	movs	r2, #1
 800b696:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2201      	movs	r2, #1
 800b69e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b6aa:	2300      	movs	r3, #0
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3708      	adds	r7, #8
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	080075b5 	.word	0x080075b5

0800b6b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d109      	bne.n	800b6dc <HAL_TIM_PWM_Start+0x24>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	bf14      	ite	ne
 800b6d4:	2301      	movne	r3, #1
 800b6d6:	2300      	moveq	r3, #0
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	e03c      	b.n	800b756 <HAL_TIM_PWM_Start+0x9e>
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	2b04      	cmp	r3, #4
 800b6e0:	d109      	bne.n	800b6f6 <HAL_TIM_PWM_Start+0x3e>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b6e8:	b2db      	uxtb	r3, r3
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	bf14      	ite	ne
 800b6ee:	2301      	movne	r3, #1
 800b6f0:	2300      	moveq	r3, #0
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	e02f      	b.n	800b756 <HAL_TIM_PWM_Start+0x9e>
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	2b08      	cmp	r3, #8
 800b6fa:	d109      	bne.n	800b710 <HAL_TIM_PWM_Start+0x58>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b702:	b2db      	uxtb	r3, r3
 800b704:	2b01      	cmp	r3, #1
 800b706:	bf14      	ite	ne
 800b708:	2301      	movne	r3, #1
 800b70a:	2300      	moveq	r3, #0
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	e022      	b.n	800b756 <HAL_TIM_PWM_Start+0x9e>
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	2b0c      	cmp	r3, #12
 800b714:	d109      	bne.n	800b72a <HAL_TIM_PWM_Start+0x72>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	2b01      	cmp	r3, #1
 800b720:	bf14      	ite	ne
 800b722:	2301      	movne	r3, #1
 800b724:	2300      	moveq	r3, #0
 800b726:	b2db      	uxtb	r3, r3
 800b728:	e015      	b.n	800b756 <HAL_TIM_PWM_Start+0x9e>
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	2b10      	cmp	r3, #16
 800b72e:	d109      	bne.n	800b744 <HAL_TIM_PWM_Start+0x8c>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b736:	b2db      	uxtb	r3, r3
 800b738:	2b01      	cmp	r3, #1
 800b73a:	bf14      	ite	ne
 800b73c:	2301      	movne	r3, #1
 800b73e:	2300      	moveq	r3, #0
 800b740:	b2db      	uxtb	r3, r3
 800b742:	e008      	b.n	800b756 <HAL_TIM_PWM_Start+0x9e>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	2b01      	cmp	r3, #1
 800b74e:	bf14      	ite	ne
 800b750:	2301      	movne	r3, #1
 800b752:	2300      	moveq	r3, #0
 800b754:	b2db      	uxtb	r3, r3
 800b756:	2b00      	cmp	r3, #0
 800b758:	d001      	beq.n	800b75e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b75a:	2301      	movs	r3, #1
 800b75c:	e0a6      	b.n	800b8ac <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d104      	bne.n	800b76e <HAL_TIM_PWM_Start+0xb6>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2202      	movs	r2, #2
 800b768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b76c:	e023      	b.n	800b7b6 <HAL_TIM_PWM_Start+0xfe>
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	2b04      	cmp	r3, #4
 800b772:	d104      	bne.n	800b77e <HAL_TIM_PWM_Start+0xc6>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2202      	movs	r2, #2
 800b778:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b77c:	e01b      	b.n	800b7b6 <HAL_TIM_PWM_Start+0xfe>
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	2b08      	cmp	r3, #8
 800b782:	d104      	bne.n	800b78e <HAL_TIM_PWM_Start+0xd6>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2202      	movs	r2, #2
 800b788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b78c:	e013      	b.n	800b7b6 <HAL_TIM_PWM_Start+0xfe>
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	2b0c      	cmp	r3, #12
 800b792:	d104      	bne.n	800b79e <HAL_TIM_PWM_Start+0xe6>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2202      	movs	r2, #2
 800b798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b79c:	e00b      	b.n	800b7b6 <HAL_TIM_PWM_Start+0xfe>
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	2b10      	cmp	r3, #16
 800b7a2:	d104      	bne.n	800b7ae <HAL_TIM_PWM_Start+0xf6>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2202      	movs	r2, #2
 800b7a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b7ac:	e003      	b.n	800b7b6 <HAL_TIM_PWM_Start+0xfe>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2202      	movs	r2, #2
 800b7b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	6839      	ldr	r1, [r7, #0]
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f001 fc9c 	bl	800d0fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a3a      	ldr	r2, [pc, #232]	@ (800b8b4 <HAL_TIM_PWM_Start+0x1fc>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d018      	beq.n	800b800 <HAL_TIM_PWM_Start+0x148>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a39      	ldr	r2, [pc, #228]	@ (800b8b8 <HAL_TIM_PWM_Start+0x200>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d013      	beq.n	800b800 <HAL_TIM_PWM_Start+0x148>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a37      	ldr	r2, [pc, #220]	@ (800b8bc <HAL_TIM_PWM_Start+0x204>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d00e      	beq.n	800b800 <HAL_TIM_PWM_Start+0x148>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a36      	ldr	r2, [pc, #216]	@ (800b8c0 <HAL_TIM_PWM_Start+0x208>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d009      	beq.n	800b800 <HAL_TIM_PWM_Start+0x148>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4a34      	ldr	r2, [pc, #208]	@ (800b8c4 <HAL_TIM_PWM_Start+0x20c>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d004      	beq.n	800b800 <HAL_TIM_PWM_Start+0x148>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4a33      	ldr	r2, [pc, #204]	@ (800b8c8 <HAL_TIM_PWM_Start+0x210>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d101      	bne.n	800b804 <HAL_TIM_PWM_Start+0x14c>
 800b800:	2301      	movs	r3, #1
 800b802:	e000      	b.n	800b806 <HAL_TIM_PWM_Start+0x14e>
 800b804:	2300      	movs	r3, #0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d007      	beq.n	800b81a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b818:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4a25      	ldr	r2, [pc, #148]	@ (800b8b4 <HAL_TIM_PWM_Start+0x1fc>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d022      	beq.n	800b86a <HAL_TIM_PWM_Start+0x1b2>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b82c:	d01d      	beq.n	800b86a <HAL_TIM_PWM_Start+0x1b2>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4a26      	ldr	r2, [pc, #152]	@ (800b8cc <HAL_TIM_PWM_Start+0x214>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d018      	beq.n	800b86a <HAL_TIM_PWM_Start+0x1b2>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a24      	ldr	r2, [pc, #144]	@ (800b8d0 <HAL_TIM_PWM_Start+0x218>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d013      	beq.n	800b86a <HAL_TIM_PWM_Start+0x1b2>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a23      	ldr	r2, [pc, #140]	@ (800b8d4 <HAL_TIM_PWM_Start+0x21c>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d00e      	beq.n	800b86a <HAL_TIM_PWM_Start+0x1b2>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a19      	ldr	r2, [pc, #100]	@ (800b8b8 <HAL_TIM_PWM_Start+0x200>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d009      	beq.n	800b86a <HAL_TIM_PWM_Start+0x1b2>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4a18      	ldr	r2, [pc, #96]	@ (800b8bc <HAL_TIM_PWM_Start+0x204>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d004      	beq.n	800b86a <HAL_TIM_PWM_Start+0x1b2>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a18      	ldr	r2, [pc, #96]	@ (800b8c8 <HAL_TIM_PWM_Start+0x210>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d115      	bne.n	800b896 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	689a      	ldr	r2, [r3, #8]
 800b870:	4b19      	ldr	r3, [pc, #100]	@ (800b8d8 <HAL_TIM_PWM_Start+0x220>)
 800b872:	4013      	ands	r3, r2
 800b874:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2b06      	cmp	r3, #6
 800b87a:	d015      	beq.n	800b8a8 <HAL_TIM_PWM_Start+0x1f0>
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b882:	d011      	beq.n	800b8a8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f042 0201 	orr.w	r2, r2, #1
 800b892:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b894:	e008      	b.n	800b8a8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f042 0201 	orr.w	r2, r2, #1
 800b8a4:	601a      	str	r2, [r3, #0]
 800b8a6:	e000      	b.n	800b8aa <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b8aa:	2300      	movs	r3, #0
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3710      	adds	r7, #16
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}
 800b8b4:	40012c00 	.word	0x40012c00
 800b8b8:	40013400 	.word	0x40013400
 800b8bc:	40014000 	.word	0x40014000
 800b8c0:	40014400 	.word	0x40014400
 800b8c4:	40014800 	.word	0x40014800
 800b8c8:	40015000 	.word	0x40015000
 800b8cc:	40000400 	.word	0x40000400
 800b8d0:	40000800 	.word	0x40000800
 800b8d4:	40000c00 	.word	0x40000c00
 800b8d8:	00010007 	.word	0x00010007

0800b8dc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b082      	sub	sp, #8
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d101      	bne.n	800b8f0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	e04c      	b.n	800b98a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d111      	bne.n	800b920 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f001 fc1f 	bl	800d148 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d102      	bne.n	800b918 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	4a1f      	ldr	r2, [pc, #124]	@ (800b994 <HAL_TIM_OnePulse_Init+0xb8>)
 800b916:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2202      	movs	r2, #2
 800b924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681a      	ldr	r2, [r3, #0]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	3304      	adds	r3, #4
 800b930:	4619      	mov	r1, r3
 800b932:	4610      	mov	r0, r2
 800b934:	f000 ff68 	bl	800c808 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f022 0208 	bic.w	r2, r2, #8
 800b946:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	6819      	ldr	r1, [r3, #0]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	683a      	ldr	r2, [r7, #0]
 800b954:	430a      	orrs	r2, r1
 800b956:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2201      	movs	r2, #1
 800b95c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2201      	movs	r2, #1
 800b964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2201      	movs	r2, #1
 800b96c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2201      	movs	r2, #1
 800b974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2201      	movs	r2, #1
 800b97c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2201      	movs	r2, #1
 800b984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3708      	adds	r7, #8
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	0800b999 	.word	0x0800b999

0800b998 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b9a0:	bf00      	nop
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b9bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b9c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b9cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b9d4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b9d6:	7bfb      	ldrb	r3, [r7, #15]
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d108      	bne.n	800b9ee <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b9dc:	7bbb      	ldrb	r3, [r7, #14]
 800b9de:	2b01      	cmp	r3, #1
 800b9e0:	d105      	bne.n	800b9ee <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b9e2:	7b7b      	ldrb	r3, [r7, #13]
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d102      	bne.n	800b9ee <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b9e8:	7b3b      	ldrb	r3, [r7, #12]
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d001      	beq.n	800b9f2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e059      	b.n	800baa6 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2202      	movs	r2, #2
 800b9f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2202      	movs	r2, #2
 800b9fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2202      	movs	r2, #2
 800ba06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2202      	movs	r2, #2
 800ba0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	68da      	ldr	r2, [r3, #12]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f042 0202 	orr.w	r2, r2, #2
 800ba20:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	68da      	ldr	r2, [r3, #12]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f042 0204 	orr.w	r2, r2, #4
 800ba30:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2201      	movs	r2, #1
 800ba38:	2100      	movs	r1, #0
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f001 fb5e 	bl	800d0fc <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	2201      	movs	r2, #1
 800ba46:	2104      	movs	r1, #4
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f001 fb57 	bl	800d0fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	4a17      	ldr	r2, [pc, #92]	@ (800bab0 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d018      	beq.n	800ba8a <HAL_TIM_OnePulse_Start_IT+0xde>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4a15      	ldr	r2, [pc, #84]	@ (800bab4 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d013      	beq.n	800ba8a <HAL_TIM_OnePulse_Start_IT+0xde>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a14      	ldr	r2, [pc, #80]	@ (800bab8 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d00e      	beq.n	800ba8a <HAL_TIM_OnePulse_Start_IT+0xde>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a12      	ldr	r2, [pc, #72]	@ (800babc <HAL_TIM_OnePulse_Start_IT+0x110>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d009      	beq.n	800ba8a <HAL_TIM_OnePulse_Start_IT+0xde>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4a11      	ldr	r2, [pc, #68]	@ (800bac0 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d004      	beq.n	800ba8a <HAL_TIM_OnePulse_Start_IT+0xde>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a0f      	ldr	r2, [pc, #60]	@ (800bac4 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d101      	bne.n	800ba8e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e000      	b.n	800ba90 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800ba8e:	2300      	movs	r3, #0
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d007      	beq.n	800baa4 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800baa2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800baa4:	2300      	movs	r3, #0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	40012c00 	.word	0x40012c00
 800bab4:	40013400 	.word	0x40013400
 800bab8:	40014000 	.word	0x40014000
 800babc:	40014400 	.word	0x40014400
 800bac0:	40014800 	.word	0x40014800
 800bac4:	40015000 	.word	0x40015000

0800bac8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b086      	sub	sp, #24
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d101      	bne.n	800badc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bad8:	2301      	movs	r3, #1
 800bada:	e0a2      	b.n	800bc22 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d111      	bne.n	800bb0c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f001 fb29 	bl	800d148 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d102      	bne.n	800bb04 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	4a4a      	ldr	r2, [pc, #296]	@ (800bc2c <HAL_TIM_Encoder_Init+0x164>)
 800bb02:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2202      	movs	r2, #2
 800bb10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	689b      	ldr	r3, [r3, #8]
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	6812      	ldr	r2, [r2, #0]
 800bb1e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800bb22:	f023 0307 	bic.w	r3, r3, #7
 800bb26:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	3304      	adds	r3, #4
 800bb30:	4619      	mov	r1, r3
 800bb32:	4610      	mov	r0, r2
 800bb34:	f000 fe68 	bl	800c808 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	699b      	ldr	r3, [r3, #24]
 800bb46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	6a1b      	ldr	r3, [r3, #32]
 800bb4e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	697a      	ldr	r2, [r7, #20]
 800bb56:	4313      	orrs	r3, r2
 800bb58:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb60:	f023 0303 	bic.w	r3, r3, #3
 800bb64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	689a      	ldr	r2, [r3, #8]
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	699b      	ldr	r3, [r3, #24]
 800bb6e:	021b      	lsls	r3, r3, #8
 800bb70:	4313      	orrs	r3, r2
 800bb72:	693a      	ldr	r2, [r7, #16]
 800bb74:	4313      	orrs	r3, r2
 800bb76:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800bb7e:	f023 030c 	bic.w	r3, r3, #12
 800bb82:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bb8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bb8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	68da      	ldr	r2, [r3, #12]
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	69db      	ldr	r3, [r3, #28]
 800bb98:	021b      	lsls	r3, r3, #8
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	693a      	ldr	r2, [r7, #16]
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	691b      	ldr	r3, [r3, #16]
 800bba6:	011a      	lsls	r2, r3, #4
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	6a1b      	ldr	r3, [r3, #32]
 800bbac:	031b      	lsls	r3, r3, #12
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	693a      	ldr	r2, [r7, #16]
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800bbbc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800bbc4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	685a      	ldr	r2, [r3, #4]
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	695b      	ldr	r3, [r3, #20]
 800bbce:	011b      	lsls	r3, r3, #4
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	68fa      	ldr	r2, [r7, #12]
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	697a      	ldr	r2, [r7, #20]
 800bbde:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	693a      	ldr	r2, [r7, #16]
 800bbe6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2201      	movs	r2, #1
 800bc04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2201      	movs	r2, #1
 800bc14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3718      	adds	r7, #24
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	080076a9 	.word	0x080076a9

0800bc30 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b084      	sub	sp, #16
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bc40:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800bc48:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bc50:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bc58:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d110      	bne.n	800bc82 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc60:	7bfb      	ldrb	r3, [r7, #15]
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d102      	bne.n	800bc6c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800bc66:	7b7b      	ldrb	r3, [r7, #13]
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d001      	beq.n	800bc70 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	e069      	b.n	800bd44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2202      	movs	r2, #2
 800bc74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2202      	movs	r2, #2
 800bc7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bc80:	e031      	b.n	800bce6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	2b04      	cmp	r3, #4
 800bc86:	d110      	bne.n	800bcaa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc88:	7bbb      	ldrb	r3, [r7, #14]
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d102      	bne.n	800bc94 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bc8e:	7b3b      	ldrb	r3, [r7, #12]
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d001      	beq.n	800bc98 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800bc94:	2301      	movs	r3, #1
 800bc96:	e055      	b.n	800bd44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2202      	movs	r2, #2
 800bc9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2202      	movs	r2, #2
 800bca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bca8:	e01d      	b.n	800bce6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bcaa:	7bfb      	ldrb	r3, [r7, #15]
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d108      	bne.n	800bcc2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bcb0:	7bbb      	ldrb	r3, [r7, #14]
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d105      	bne.n	800bcc2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bcb6:	7b7b      	ldrb	r3, [r7, #13]
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d102      	bne.n	800bcc2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bcbc:	7b3b      	ldrb	r3, [r7, #12]
 800bcbe:	2b01      	cmp	r3, #1
 800bcc0:	d001      	beq.n	800bcc6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	e03e      	b.n	800bd44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2202      	movs	r2, #2
 800bcca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2202      	movs	r2, #2
 800bcd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2202      	movs	r2, #2
 800bcda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2202      	movs	r2, #2
 800bce2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d003      	beq.n	800bcf4 <HAL_TIM_Encoder_Start+0xc4>
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	2b04      	cmp	r3, #4
 800bcf0:	d008      	beq.n	800bd04 <HAL_TIM_Encoder_Start+0xd4>
 800bcf2:	e00f      	b.n	800bd14 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	2100      	movs	r1, #0
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f001 f9fd 	bl	800d0fc <TIM_CCxChannelCmd>
      break;
 800bd02:	e016      	b.n	800bd32 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2201      	movs	r2, #1
 800bd0a:	2104      	movs	r1, #4
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f001 f9f5 	bl	800d0fc <TIM_CCxChannelCmd>
      break;
 800bd12:	e00e      	b.n	800bd32 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	2201      	movs	r2, #1
 800bd1a:	2100      	movs	r1, #0
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f001 f9ed 	bl	800d0fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2201      	movs	r2, #1
 800bd28:	2104      	movs	r1, #4
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f001 f9e6 	bl	800d0fc <TIM_CCxChannelCmd>
      break;
 800bd30:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f042 0201 	orr.w	r2, r2, #1
 800bd40:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bd42:	2300      	movs	r3, #0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3710      	adds	r7, #16
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	68db      	ldr	r3, [r3, #12]
 800bd5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	691b      	ldr	r3, [r3, #16]
 800bd62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	f003 0302 	and.w	r3, r3, #2
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d026      	beq.n	800bdbc <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f003 0302 	and.w	r3, r3, #2
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d021      	beq.n	800bdbc <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f06f 0202 	mvn.w	r2, #2
 800bd80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2201      	movs	r2, #1
 800bd86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	699b      	ldr	r3, [r3, #24]
 800bd8e:	f003 0303 	and.w	r3, r3, #3
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d005      	beq.n	800bda2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	4798      	blx	r3
 800bda0:	e009      	b.n	800bdb6 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	f003 0304 	and.w	r3, r3, #4
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d026      	beq.n	800be14 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f003 0304 	and.w	r3, r3, #4
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d021      	beq.n	800be14 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f06f 0204 	mvn.w	r2, #4
 800bdd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2202      	movs	r2, #2
 800bdde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	699b      	ldr	r3, [r3, #24]
 800bde6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d005      	beq.n	800bdfa <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	4798      	blx	r3
 800bdf8:	e009      	b.n	800be0e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2200      	movs	r2, #0
 800be12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	f003 0308 	and.w	r3, r3, #8
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d026      	beq.n	800be6c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f003 0308 	and.w	r3, r3, #8
 800be24:	2b00      	cmp	r3, #0
 800be26:	d021      	beq.n	800be6c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f06f 0208 	mvn.w	r2, #8
 800be30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2204      	movs	r2, #4
 800be36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	69db      	ldr	r3, [r3, #28]
 800be3e:	f003 0303 	and.w	r3, r3, #3
 800be42:	2b00      	cmp	r3, #0
 800be44:	d005      	beq.n	800be52 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	4798      	blx	r3
 800be50:	e009      	b.n	800be66 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	f003 0310 	and.w	r3, r3, #16
 800be72:	2b00      	cmp	r3, #0
 800be74:	d026      	beq.n	800bec4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f003 0310 	and.w	r3, r3, #16
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d021      	beq.n	800bec4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f06f 0210 	mvn.w	r2, #16
 800be88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2208      	movs	r2, #8
 800be8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	69db      	ldr	r3, [r3, #28]
 800be96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d005      	beq.n	800beaa <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	4798      	blx	r3
 800bea8:	e009      	b.n	800bebe <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	f003 0301 	and.w	r3, r3, #1
 800beca:	2b00      	cmp	r3, #0
 800becc:	d00e      	beq.n	800beec <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f003 0301 	and.w	r3, r3, #1
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d009      	beq.n	800beec <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f06f 0201 	mvn.w	r2, #1
 800bee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d104      	bne.n	800bf00 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800befc:	2b00      	cmp	r3, #0
 800befe:	d00e      	beq.n	800bf1e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d009      	beq.n	800bf1e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bf12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d00e      	beq.n	800bf46 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d009      	beq.n	800bf46 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bf3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d00e      	beq.n	800bf6e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d009      	beq.n	800bf6e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bf62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	f003 0320 	and.w	r3, r3, #32
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d00e      	beq.n	800bf96 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f003 0320 	and.w	r3, r3, #32
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d009      	beq.n	800bf96 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f06f 0220 	mvn.w	r2, #32
 800bf8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d00e      	beq.n	800bfbe <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d009      	beq.n	800bfbe <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800bfb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00e      	beq.n	800bfe6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d009      	beq.n	800bfe6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800bfda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d00e      	beq.n	800c00e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d009      	beq.n	800c00e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800c002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c014:	2b00      	cmp	r3, #0
 800c016:	d00e      	beq.n	800c036 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d009      	beq.n	800c036 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800c02a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c036:	bf00      	nop
 800c038:	3710      	adds	r7, #16
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
	...

0800c040 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b086      	sub	sp, #24
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c04c:	2300      	movs	r3, #0
 800c04e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c056:	2b01      	cmp	r3, #1
 800c058:	d101      	bne.n	800c05e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c05a:	2302      	movs	r3, #2
 800c05c:	e0ff      	b.n	800c25e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2201      	movs	r2, #1
 800c062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2b14      	cmp	r3, #20
 800c06a:	f200 80f0 	bhi.w	800c24e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c06e:	a201      	add	r2, pc, #4	@ (adr r2, 800c074 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c074:	0800c0c9 	.word	0x0800c0c9
 800c078:	0800c24f 	.word	0x0800c24f
 800c07c:	0800c24f 	.word	0x0800c24f
 800c080:	0800c24f 	.word	0x0800c24f
 800c084:	0800c109 	.word	0x0800c109
 800c088:	0800c24f 	.word	0x0800c24f
 800c08c:	0800c24f 	.word	0x0800c24f
 800c090:	0800c24f 	.word	0x0800c24f
 800c094:	0800c14b 	.word	0x0800c14b
 800c098:	0800c24f 	.word	0x0800c24f
 800c09c:	0800c24f 	.word	0x0800c24f
 800c0a0:	0800c24f 	.word	0x0800c24f
 800c0a4:	0800c18b 	.word	0x0800c18b
 800c0a8:	0800c24f 	.word	0x0800c24f
 800c0ac:	0800c24f 	.word	0x0800c24f
 800c0b0:	0800c24f 	.word	0x0800c24f
 800c0b4:	0800c1cd 	.word	0x0800c1cd
 800c0b8:	0800c24f 	.word	0x0800c24f
 800c0bc:	0800c24f 	.word	0x0800c24f
 800c0c0:	0800c24f 	.word	0x0800c24f
 800c0c4:	0800c20d 	.word	0x0800c20d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	68b9      	ldr	r1, [r7, #8]
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f000 fc4e 	bl	800c970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	699a      	ldr	r2, [r3, #24]
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f042 0208 	orr.w	r2, r2, #8
 800c0e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	699a      	ldr	r2, [r3, #24]
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f022 0204 	bic.w	r2, r2, #4
 800c0f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	6999      	ldr	r1, [r3, #24]
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	691a      	ldr	r2, [r3, #16]
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	430a      	orrs	r2, r1
 800c104:	619a      	str	r2, [r3, #24]
      break;
 800c106:	e0a5      	b.n	800c254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	68b9      	ldr	r1, [r7, #8]
 800c10e:	4618      	mov	r0, r3
 800c110:	f000 fcc8 	bl	800caa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	699a      	ldr	r2, [r3, #24]
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	699a      	ldr	r2, [r3, #24]
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	6999      	ldr	r1, [r3, #24]
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	691b      	ldr	r3, [r3, #16]
 800c13e:	021a      	lsls	r2, r3, #8
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	430a      	orrs	r2, r1
 800c146:	619a      	str	r2, [r3, #24]
      break;
 800c148:	e084      	b.n	800c254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	68b9      	ldr	r1, [r7, #8]
 800c150:	4618      	mov	r0, r3
 800c152:	f000 fd3b 	bl	800cbcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	69da      	ldr	r2, [r3, #28]
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f042 0208 	orr.w	r2, r2, #8
 800c164:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	69da      	ldr	r2, [r3, #28]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f022 0204 	bic.w	r2, r2, #4
 800c174:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	69d9      	ldr	r1, [r3, #28]
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	691a      	ldr	r2, [r3, #16]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	430a      	orrs	r2, r1
 800c186:	61da      	str	r2, [r3, #28]
      break;
 800c188:	e064      	b.n	800c254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	68b9      	ldr	r1, [r7, #8]
 800c190:	4618      	mov	r0, r3
 800c192:	f000 fdad 	bl	800ccf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	69da      	ldr	r2, [r3, #28]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c1a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	69da      	ldr	r2, [r3, #28]
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c1b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	69d9      	ldr	r1, [r3, #28]
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	691b      	ldr	r3, [r3, #16]
 800c1c0:	021a      	lsls	r2, r3, #8
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	430a      	orrs	r2, r1
 800c1c8:	61da      	str	r2, [r3, #28]
      break;
 800c1ca:	e043      	b.n	800c254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	68b9      	ldr	r1, [r7, #8]
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f000 fe20 	bl	800ce18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f042 0208 	orr.w	r2, r2, #8
 800c1e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f022 0204 	bic.w	r2, r2, #4
 800c1f6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	691a      	ldr	r2, [r3, #16]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	430a      	orrs	r2, r1
 800c208:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800c20a:	e023      	b.n	800c254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	68b9      	ldr	r1, [r7, #8]
 800c212:	4618      	mov	r0, r3
 800c214:	f000 fe6a 	bl	800ceec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c226:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c236:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	691b      	ldr	r3, [r3, #16]
 800c242:	021a      	lsls	r2, r3, #8
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	430a      	orrs	r2, r1
 800c24a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800c24c:	e002      	b.n	800c254 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c24e:	2301      	movs	r3, #1
 800c250:	75fb      	strb	r3, [r7, #23]
      break;
 800c252:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	2200      	movs	r2, #0
 800c258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c25c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3718      	adds	r7, #24
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop

0800c268 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c272:	2300      	movs	r3, #0
 800c274:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d101      	bne.n	800c284 <HAL_TIM_ConfigClockSource+0x1c>
 800c280:	2302      	movs	r3, #2
 800c282:	e0f6      	b.n	800c472 <HAL_TIM_ConfigClockSource+0x20a>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2201      	movs	r2, #1
 800c288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2202      	movs	r2, #2
 800c290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800c2a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c2a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c2ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	68ba      	ldr	r2, [r7, #8]
 800c2b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a6f      	ldr	r2, [pc, #444]	@ (800c47c <HAL_TIM_ConfigClockSource+0x214>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	f000 80c1 	beq.w	800c446 <HAL_TIM_ConfigClockSource+0x1de>
 800c2c4:	4a6d      	ldr	r2, [pc, #436]	@ (800c47c <HAL_TIM_ConfigClockSource+0x214>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	f200 80c6 	bhi.w	800c458 <HAL_TIM_ConfigClockSource+0x1f0>
 800c2cc:	4a6c      	ldr	r2, [pc, #432]	@ (800c480 <HAL_TIM_ConfigClockSource+0x218>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	f000 80b9 	beq.w	800c446 <HAL_TIM_ConfigClockSource+0x1de>
 800c2d4:	4a6a      	ldr	r2, [pc, #424]	@ (800c480 <HAL_TIM_ConfigClockSource+0x218>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	f200 80be 	bhi.w	800c458 <HAL_TIM_ConfigClockSource+0x1f0>
 800c2dc:	4a69      	ldr	r2, [pc, #420]	@ (800c484 <HAL_TIM_ConfigClockSource+0x21c>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	f000 80b1 	beq.w	800c446 <HAL_TIM_ConfigClockSource+0x1de>
 800c2e4:	4a67      	ldr	r2, [pc, #412]	@ (800c484 <HAL_TIM_ConfigClockSource+0x21c>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	f200 80b6 	bhi.w	800c458 <HAL_TIM_ConfigClockSource+0x1f0>
 800c2ec:	4a66      	ldr	r2, [pc, #408]	@ (800c488 <HAL_TIM_ConfigClockSource+0x220>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	f000 80a9 	beq.w	800c446 <HAL_TIM_ConfigClockSource+0x1de>
 800c2f4:	4a64      	ldr	r2, [pc, #400]	@ (800c488 <HAL_TIM_ConfigClockSource+0x220>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	f200 80ae 	bhi.w	800c458 <HAL_TIM_ConfigClockSource+0x1f0>
 800c2fc:	4a63      	ldr	r2, [pc, #396]	@ (800c48c <HAL_TIM_ConfigClockSource+0x224>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	f000 80a1 	beq.w	800c446 <HAL_TIM_ConfigClockSource+0x1de>
 800c304:	4a61      	ldr	r2, [pc, #388]	@ (800c48c <HAL_TIM_ConfigClockSource+0x224>)
 800c306:	4293      	cmp	r3, r2
 800c308:	f200 80a6 	bhi.w	800c458 <HAL_TIM_ConfigClockSource+0x1f0>
 800c30c:	4a60      	ldr	r2, [pc, #384]	@ (800c490 <HAL_TIM_ConfigClockSource+0x228>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	f000 8099 	beq.w	800c446 <HAL_TIM_ConfigClockSource+0x1de>
 800c314:	4a5e      	ldr	r2, [pc, #376]	@ (800c490 <HAL_TIM_ConfigClockSource+0x228>)
 800c316:	4293      	cmp	r3, r2
 800c318:	f200 809e 	bhi.w	800c458 <HAL_TIM_ConfigClockSource+0x1f0>
 800c31c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c320:	f000 8091 	beq.w	800c446 <HAL_TIM_ConfigClockSource+0x1de>
 800c324:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c328:	f200 8096 	bhi.w	800c458 <HAL_TIM_ConfigClockSource+0x1f0>
 800c32c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c330:	f000 8089 	beq.w	800c446 <HAL_TIM_ConfigClockSource+0x1de>
 800c334:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c338:	f200 808e 	bhi.w	800c458 <HAL_TIM_ConfigClockSource+0x1f0>
 800c33c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c340:	d03e      	beq.n	800c3c0 <HAL_TIM_ConfigClockSource+0x158>
 800c342:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c346:	f200 8087 	bhi.w	800c458 <HAL_TIM_ConfigClockSource+0x1f0>
 800c34a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c34e:	f000 8086 	beq.w	800c45e <HAL_TIM_ConfigClockSource+0x1f6>
 800c352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c356:	d87f      	bhi.n	800c458 <HAL_TIM_ConfigClockSource+0x1f0>
 800c358:	2b70      	cmp	r3, #112	@ 0x70
 800c35a:	d01a      	beq.n	800c392 <HAL_TIM_ConfigClockSource+0x12a>
 800c35c:	2b70      	cmp	r3, #112	@ 0x70
 800c35e:	d87b      	bhi.n	800c458 <HAL_TIM_ConfigClockSource+0x1f0>
 800c360:	2b60      	cmp	r3, #96	@ 0x60
 800c362:	d050      	beq.n	800c406 <HAL_TIM_ConfigClockSource+0x19e>
 800c364:	2b60      	cmp	r3, #96	@ 0x60
 800c366:	d877      	bhi.n	800c458 <HAL_TIM_ConfigClockSource+0x1f0>
 800c368:	2b50      	cmp	r3, #80	@ 0x50
 800c36a:	d03c      	beq.n	800c3e6 <HAL_TIM_ConfigClockSource+0x17e>
 800c36c:	2b50      	cmp	r3, #80	@ 0x50
 800c36e:	d873      	bhi.n	800c458 <HAL_TIM_ConfigClockSource+0x1f0>
 800c370:	2b40      	cmp	r3, #64	@ 0x40
 800c372:	d058      	beq.n	800c426 <HAL_TIM_ConfigClockSource+0x1be>
 800c374:	2b40      	cmp	r3, #64	@ 0x40
 800c376:	d86f      	bhi.n	800c458 <HAL_TIM_ConfigClockSource+0x1f0>
 800c378:	2b30      	cmp	r3, #48	@ 0x30
 800c37a:	d064      	beq.n	800c446 <HAL_TIM_ConfigClockSource+0x1de>
 800c37c:	2b30      	cmp	r3, #48	@ 0x30
 800c37e:	d86b      	bhi.n	800c458 <HAL_TIM_ConfigClockSource+0x1f0>
 800c380:	2b20      	cmp	r3, #32
 800c382:	d060      	beq.n	800c446 <HAL_TIM_ConfigClockSource+0x1de>
 800c384:	2b20      	cmp	r3, #32
 800c386:	d867      	bhi.n	800c458 <HAL_TIM_ConfigClockSource+0x1f0>
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d05c      	beq.n	800c446 <HAL_TIM_ConfigClockSource+0x1de>
 800c38c:	2b10      	cmp	r3, #16
 800c38e:	d05a      	beq.n	800c446 <HAL_TIM_ConfigClockSource+0x1de>
 800c390:	e062      	b.n	800c458 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c3a2:	f000 fe8b 	bl	800d0bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	689b      	ldr	r3, [r3, #8]
 800c3ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c3b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	68ba      	ldr	r2, [r7, #8]
 800c3bc:	609a      	str	r2, [r3, #8]
      break;
 800c3be:	e04f      	b.n	800c460 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c3d0:	f000 fe74 	bl	800d0bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	689a      	ldr	r2, [r3, #8]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c3e2:	609a      	str	r2, [r3, #8]
      break;
 800c3e4:	e03c      	b.n	800c460 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	f000 fde6 	bl	800cfc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2150      	movs	r1, #80	@ 0x50
 800c3fe:	4618      	mov	r0, r3
 800c400:	f000 fe3f 	bl	800d082 <TIM_ITRx_SetConfig>
      break;
 800c404:	e02c      	b.n	800c460 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c412:	461a      	mov	r2, r3
 800c414:	f000 fe05 	bl	800d022 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	2160      	movs	r1, #96	@ 0x60
 800c41e:	4618      	mov	r0, r3
 800c420:	f000 fe2f 	bl	800d082 <TIM_ITRx_SetConfig>
      break;
 800c424:	e01c      	b.n	800c460 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c432:	461a      	mov	r2, r3
 800c434:	f000 fdc6 	bl	800cfc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	2140      	movs	r1, #64	@ 0x40
 800c43e:	4618      	mov	r0, r3
 800c440:	f000 fe1f 	bl	800d082 <TIM_ITRx_SetConfig>
      break;
 800c444:	e00c      	b.n	800c460 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4619      	mov	r1, r3
 800c450:	4610      	mov	r0, r2
 800c452:	f000 fe16 	bl	800d082 <TIM_ITRx_SetConfig>
      break;
 800c456:	e003      	b.n	800c460 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800c458:	2301      	movs	r3, #1
 800c45a:	73fb      	strb	r3, [r7, #15]
      break;
 800c45c:	e000      	b.n	800c460 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800c45e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2201      	movs	r2, #1
 800c464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2200      	movs	r2, #0
 800c46c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c470:	7bfb      	ldrb	r3, [r7, #15]
}
 800c472:	4618      	mov	r0, r3
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	00100070 	.word	0x00100070
 800c480:	00100060 	.word	0x00100060
 800c484:	00100050 	.word	0x00100050
 800c488:	00100040 	.word	0x00100040
 800c48c:	00100030 	.word	0x00100030
 800c490:	00100020 	.word	0x00100020

0800c494 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800c49c:	bf00      	nop
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c4b0:	bf00      	nop
 800c4b2:	370c      	adds	r7, #12
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c4c4:	bf00      	nop
 800c4c6:	370c      	adds	r7, #12
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr

0800c4d0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800c4d8:	bf00      	nop
 800c4da:	370c      	adds	r7, #12
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr

0800c4e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c4ec:	bf00      	nop
 800c4ee:	370c      	adds	r7, #12
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr

0800c4f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800c500:	bf00      	nop
 800c502:	370c      	adds	r7, #12
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b083      	sub	sp, #12
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c514:	bf00      	nop
 800c516:	370c      	adds	r7, #12
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr

0800c520 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800c528:	bf00      	nop
 800c52a:	370c      	adds	r7, #12
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr

0800c534 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800c534:	b480      	push	{r7}
 800c536:	b083      	sub	sp, #12
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800c53c:	bf00      	nop
 800c53e:	370c      	adds	r7, #12
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr

0800c548 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800c548:	b480      	push	{r7}
 800c54a:	b087      	sub	sp, #28
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	60f8      	str	r0, [r7, #12]
 800c550:	460b      	mov	r3, r1
 800c552:	607a      	str	r2, [r7, #4]
 800c554:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c556:	2300      	movs	r3, #0
 800c558:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d101      	bne.n	800c564 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800c560:	2301      	movs	r3, #1
 800c562:	e14a      	b.n	800c7fa <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c56a:	b2db      	uxtb	r3, r3
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	f040 80dd 	bne.w	800c72c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800c572:	7afb      	ldrb	r3, [r7, #11]
 800c574:	2b1f      	cmp	r3, #31
 800c576:	f200 80d6 	bhi.w	800c726 <HAL_TIM_RegisterCallback+0x1de>
 800c57a:	a201      	add	r2, pc, #4	@ (adr r2, 800c580 <HAL_TIM_RegisterCallback+0x38>)
 800c57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c580:	0800c601 	.word	0x0800c601
 800c584:	0800c609 	.word	0x0800c609
 800c588:	0800c611 	.word	0x0800c611
 800c58c:	0800c619 	.word	0x0800c619
 800c590:	0800c621 	.word	0x0800c621
 800c594:	0800c629 	.word	0x0800c629
 800c598:	0800c631 	.word	0x0800c631
 800c59c:	0800c639 	.word	0x0800c639
 800c5a0:	0800c641 	.word	0x0800c641
 800c5a4:	0800c649 	.word	0x0800c649
 800c5a8:	0800c651 	.word	0x0800c651
 800c5ac:	0800c659 	.word	0x0800c659
 800c5b0:	0800c661 	.word	0x0800c661
 800c5b4:	0800c669 	.word	0x0800c669
 800c5b8:	0800c673 	.word	0x0800c673
 800c5bc:	0800c67d 	.word	0x0800c67d
 800c5c0:	0800c687 	.word	0x0800c687
 800c5c4:	0800c691 	.word	0x0800c691
 800c5c8:	0800c69b 	.word	0x0800c69b
 800c5cc:	0800c6a5 	.word	0x0800c6a5
 800c5d0:	0800c6af 	.word	0x0800c6af
 800c5d4:	0800c6b9 	.word	0x0800c6b9
 800c5d8:	0800c6c3 	.word	0x0800c6c3
 800c5dc:	0800c6cd 	.word	0x0800c6cd
 800c5e0:	0800c6d7 	.word	0x0800c6d7
 800c5e4:	0800c6e1 	.word	0x0800c6e1
 800c5e8:	0800c6eb 	.word	0x0800c6eb
 800c5ec:	0800c6f5 	.word	0x0800c6f5
 800c5f0:	0800c6ff 	.word	0x0800c6ff
 800c5f4:	0800c709 	.word	0x0800c709
 800c5f8:	0800c713 	.word	0x0800c713
 800c5fc:	0800c71d 	.word	0x0800c71d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800c606:	e0f7      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800c60e:	e0f3      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800c616:	e0ef      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800c61e:	e0eb      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800c626:	e0e7      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800c62e:	e0e3      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800c636:	e0df      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800c63e:	e0db      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800c646:	e0d7      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800c64e:	e0d3      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800c656:	e0cf      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800c65e:	e0cb      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800c666:	e0c7      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800c670:	e0c2      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800c67a:	e0bd      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800c684:	e0b8      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800c68e:	e0b3      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800c698:	e0ae      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800c6a2:	e0a9      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800c6ac:	e0a4      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800c6b6:	e09f      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	687a      	ldr	r2, [r7, #4]
 800c6bc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800c6c0:	e09a      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800c6ca:	e095      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800c6d4:	e090      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800c6de:	e08b      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800c6e8:	e086      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800c6f2:	e081      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	687a      	ldr	r2, [r7, #4]
 800c6f8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800c6fc:	e07c      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	687a      	ldr	r2, [r7, #4]
 800c702:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800c706:	e077      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800c710:	e072      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c71a:	e06d      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c724:	e068      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800c726:	2301      	movs	r3, #1
 800c728:	75fb      	strb	r3, [r7, #23]
        break;
 800c72a:	e065      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c732:	b2db      	uxtb	r3, r3
 800c734:	2b00      	cmp	r3, #0
 800c736:	d15d      	bne.n	800c7f4 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800c738:	7afb      	ldrb	r3, [r7, #11]
 800c73a:	2b0d      	cmp	r3, #13
 800c73c:	d857      	bhi.n	800c7ee <HAL_TIM_RegisterCallback+0x2a6>
 800c73e:	a201      	add	r2, pc, #4	@ (adr r2, 800c744 <HAL_TIM_RegisterCallback+0x1fc>)
 800c740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c744:	0800c77d 	.word	0x0800c77d
 800c748:	0800c785 	.word	0x0800c785
 800c74c:	0800c78d 	.word	0x0800c78d
 800c750:	0800c795 	.word	0x0800c795
 800c754:	0800c79d 	.word	0x0800c79d
 800c758:	0800c7a5 	.word	0x0800c7a5
 800c75c:	0800c7ad 	.word	0x0800c7ad
 800c760:	0800c7b5 	.word	0x0800c7b5
 800c764:	0800c7bd 	.word	0x0800c7bd
 800c768:	0800c7c5 	.word	0x0800c7c5
 800c76c:	0800c7cd 	.word	0x0800c7cd
 800c770:	0800c7d5 	.word	0x0800c7d5
 800c774:	0800c7dd 	.word	0x0800c7dd
 800c778:	0800c7e5 	.word	0x0800c7e5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800c782:	e039      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800c78a:	e035      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800c792:	e031      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800c79a:	e02d      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800c7a2:	e029      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800c7aa:	e025      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800c7b2:	e021      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	687a      	ldr	r2, [r7, #4]
 800c7b8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800c7ba:	e01d      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800c7c2:	e019      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	687a      	ldr	r2, [r7, #4]
 800c7c8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800c7ca:	e015      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800c7d2:	e011      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800c7da:	e00d      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800c7e2:	e009      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	687a      	ldr	r2, [r7, #4]
 800c7e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800c7ec:	e004      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	75fb      	strb	r3, [r7, #23]
        break;
 800c7f2:	e001      	b.n	800c7f8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c7f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	371c      	adds	r7, #28
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr
 800c806:	bf00      	nop

0800c808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c808:	b480      	push	{r7}
 800c80a:	b085      	sub	sp, #20
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	4a4c      	ldr	r2, [pc, #304]	@ (800c94c <TIM_Base_SetConfig+0x144>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d017      	beq.n	800c850 <TIM_Base_SetConfig+0x48>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c826:	d013      	beq.n	800c850 <TIM_Base_SetConfig+0x48>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4a49      	ldr	r2, [pc, #292]	@ (800c950 <TIM_Base_SetConfig+0x148>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d00f      	beq.n	800c850 <TIM_Base_SetConfig+0x48>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	4a48      	ldr	r2, [pc, #288]	@ (800c954 <TIM_Base_SetConfig+0x14c>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d00b      	beq.n	800c850 <TIM_Base_SetConfig+0x48>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	4a47      	ldr	r2, [pc, #284]	@ (800c958 <TIM_Base_SetConfig+0x150>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d007      	beq.n	800c850 <TIM_Base_SetConfig+0x48>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	4a46      	ldr	r2, [pc, #280]	@ (800c95c <TIM_Base_SetConfig+0x154>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d003      	beq.n	800c850 <TIM_Base_SetConfig+0x48>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	4a45      	ldr	r2, [pc, #276]	@ (800c960 <TIM_Base_SetConfig+0x158>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d108      	bne.n	800c862 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	68fa      	ldr	r2, [r7, #12]
 800c85e:	4313      	orrs	r3, r2
 800c860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	4a39      	ldr	r2, [pc, #228]	@ (800c94c <TIM_Base_SetConfig+0x144>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d023      	beq.n	800c8b2 <TIM_Base_SetConfig+0xaa>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c870:	d01f      	beq.n	800c8b2 <TIM_Base_SetConfig+0xaa>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	4a36      	ldr	r2, [pc, #216]	@ (800c950 <TIM_Base_SetConfig+0x148>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d01b      	beq.n	800c8b2 <TIM_Base_SetConfig+0xaa>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	4a35      	ldr	r2, [pc, #212]	@ (800c954 <TIM_Base_SetConfig+0x14c>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d017      	beq.n	800c8b2 <TIM_Base_SetConfig+0xaa>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	4a34      	ldr	r2, [pc, #208]	@ (800c958 <TIM_Base_SetConfig+0x150>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d013      	beq.n	800c8b2 <TIM_Base_SetConfig+0xaa>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	4a33      	ldr	r2, [pc, #204]	@ (800c95c <TIM_Base_SetConfig+0x154>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d00f      	beq.n	800c8b2 <TIM_Base_SetConfig+0xaa>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	4a33      	ldr	r2, [pc, #204]	@ (800c964 <TIM_Base_SetConfig+0x15c>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d00b      	beq.n	800c8b2 <TIM_Base_SetConfig+0xaa>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	4a32      	ldr	r2, [pc, #200]	@ (800c968 <TIM_Base_SetConfig+0x160>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d007      	beq.n	800c8b2 <TIM_Base_SetConfig+0xaa>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	4a31      	ldr	r2, [pc, #196]	@ (800c96c <TIM_Base_SetConfig+0x164>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d003      	beq.n	800c8b2 <TIM_Base_SetConfig+0xaa>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	4a2c      	ldr	r2, [pc, #176]	@ (800c960 <TIM_Base_SetConfig+0x158>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d108      	bne.n	800c8c4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c8b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	68db      	ldr	r3, [r3, #12]
 800c8be:	68fa      	ldr	r2, [r7, #12]
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	695b      	ldr	r3, [r3, #20]
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	68fa      	ldr	r2, [r7, #12]
 800c8d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	689a      	ldr	r2, [r3, #8]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	681a      	ldr	r2, [r3, #0]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	4a18      	ldr	r2, [pc, #96]	@ (800c94c <TIM_Base_SetConfig+0x144>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d013      	beq.n	800c918 <TIM_Base_SetConfig+0x110>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	4a1a      	ldr	r2, [pc, #104]	@ (800c95c <TIM_Base_SetConfig+0x154>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d00f      	beq.n	800c918 <TIM_Base_SetConfig+0x110>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	4a1a      	ldr	r2, [pc, #104]	@ (800c964 <TIM_Base_SetConfig+0x15c>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d00b      	beq.n	800c918 <TIM_Base_SetConfig+0x110>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	4a19      	ldr	r2, [pc, #100]	@ (800c968 <TIM_Base_SetConfig+0x160>)
 800c904:	4293      	cmp	r3, r2
 800c906:	d007      	beq.n	800c918 <TIM_Base_SetConfig+0x110>
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	4a18      	ldr	r2, [pc, #96]	@ (800c96c <TIM_Base_SetConfig+0x164>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d003      	beq.n	800c918 <TIM_Base_SetConfig+0x110>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	4a13      	ldr	r2, [pc, #76]	@ (800c960 <TIM_Base_SetConfig+0x158>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d103      	bne.n	800c920 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	691a      	ldr	r2, [r3, #16]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2201      	movs	r2, #1
 800c924:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	691b      	ldr	r3, [r3, #16]
 800c92a:	f003 0301 	and.w	r3, r3, #1
 800c92e:	2b01      	cmp	r3, #1
 800c930:	d105      	bne.n	800c93e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	f023 0201 	bic.w	r2, r3, #1
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	611a      	str	r2, [r3, #16]
  }
}
 800c93e:	bf00      	nop
 800c940:	3714      	adds	r7, #20
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop
 800c94c:	40012c00 	.word	0x40012c00
 800c950:	40000400 	.word	0x40000400
 800c954:	40000800 	.word	0x40000800
 800c958:	40000c00 	.word	0x40000c00
 800c95c:	40013400 	.word	0x40013400
 800c960:	40015000 	.word	0x40015000
 800c964:	40014000 	.word	0x40014000
 800c968:	40014400 	.word	0x40014400
 800c96c:	40014800 	.word	0x40014800

0800c970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c970:	b480      	push	{r7}
 800c972:	b087      	sub	sp, #28
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6a1b      	ldr	r3, [r3, #32]
 800c97e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6a1b      	ldr	r3, [r3, #32]
 800c984:	f023 0201 	bic.w	r2, r3, #1
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	699b      	ldr	r3, [r3, #24]
 800c996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c99e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f023 0303 	bic.w	r3, r3, #3
 800c9aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	68fa      	ldr	r2, [r7, #12]
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	f023 0302 	bic.w	r3, r3, #2
 800c9bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	689b      	ldr	r3, [r3, #8]
 800c9c2:	697a      	ldr	r2, [r7, #20]
 800c9c4:	4313      	orrs	r3, r2
 800c9c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	4a30      	ldr	r2, [pc, #192]	@ (800ca8c <TIM_OC1_SetConfig+0x11c>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d013      	beq.n	800c9f8 <TIM_OC1_SetConfig+0x88>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	4a2f      	ldr	r2, [pc, #188]	@ (800ca90 <TIM_OC1_SetConfig+0x120>)
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d00f      	beq.n	800c9f8 <TIM_OC1_SetConfig+0x88>
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	4a2e      	ldr	r2, [pc, #184]	@ (800ca94 <TIM_OC1_SetConfig+0x124>)
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d00b      	beq.n	800c9f8 <TIM_OC1_SetConfig+0x88>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	4a2d      	ldr	r2, [pc, #180]	@ (800ca98 <TIM_OC1_SetConfig+0x128>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d007      	beq.n	800c9f8 <TIM_OC1_SetConfig+0x88>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	4a2c      	ldr	r2, [pc, #176]	@ (800ca9c <TIM_OC1_SetConfig+0x12c>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d003      	beq.n	800c9f8 <TIM_OC1_SetConfig+0x88>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	4a2b      	ldr	r2, [pc, #172]	@ (800caa0 <TIM_OC1_SetConfig+0x130>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d10c      	bne.n	800ca12 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	f023 0308 	bic.w	r3, r3, #8
 800c9fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	68db      	ldr	r3, [r3, #12]
 800ca04:	697a      	ldr	r2, [r7, #20]
 800ca06:	4313      	orrs	r3, r2
 800ca08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	f023 0304 	bic.w	r3, r3, #4
 800ca10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	4a1d      	ldr	r2, [pc, #116]	@ (800ca8c <TIM_OC1_SetConfig+0x11c>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d013      	beq.n	800ca42 <TIM_OC1_SetConfig+0xd2>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4a1c      	ldr	r2, [pc, #112]	@ (800ca90 <TIM_OC1_SetConfig+0x120>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d00f      	beq.n	800ca42 <TIM_OC1_SetConfig+0xd2>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	4a1b      	ldr	r2, [pc, #108]	@ (800ca94 <TIM_OC1_SetConfig+0x124>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d00b      	beq.n	800ca42 <TIM_OC1_SetConfig+0xd2>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	4a1a      	ldr	r2, [pc, #104]	@ (800ca98 <TIM_OC1_SetConfig+0x128>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d007      	beq.n	800ca42 <TIM_OC1_SetConfig+0xd2>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	4a19      	ldr	r2, [pc, #100]	@ (800ca9c <TIM_OC1_SetConfig+0x12c>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d003      	beq.n	800ca42 <TIM_OC1_SetConfig+0xd2>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	4a18      	ldr	r2, [pc, #96]	@ (800caa0 <TIM_OC1_SetConfig+0x130>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d111      	bne.n	800ca66 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ca48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ca50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	695b      	ldr	r3, [r3, #20]
 800ca56:	693a      	ldr	r2, [r7, #16]
 800ca58:	4313      	orrs	r3, r2
 800ca5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	699b      	ldr	r3, [r3, #24]
 800ca60:	693a      	ldr	r2, [r7, #16]
 800ca62:	4313      	orrs	r3, r2
 800ca64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	693a      	ldr	r2, [r7, #16]
 800ca6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	68fa      	ldr	r2, [r7, #12]
 800ca70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	685a      	ldr	r2, [r3, #4]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	697a      	ldr	r2, [r7, #20]
 800ca7e:	621a      	str	r2, [r3, #32]
}
 800ca80:	bf00      	nop
 800ca82:	371c      	adds	r7, #28
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr
 800ca8c:	40012c00 	.word	0x40012c00
 800ca90:	40013400 	.word	0x40013400
 800ca94:	40014000 	.word	0x40014000
 800ca98:	40014400 	.word	0x40014400
 800ca9c:	40014800 	.word	0x40014800
 800caa0:	40015000 	.word	0x40015000

0800caa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b087      	sub	sp, #28
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6a1b      	ldr	r3, [r3, #32]
 800cab2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6a1b      	ldr	r3, [r3, #32]
 800cab8:	f023 0210 	bic.w	r2, r3, #16
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	699b      	ldr	r3, [r3, #24]
 800caca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	021b      	lsls	r3, r3, #8
 800cae6:	68fa      	ldr	r2, [r7, #12]
 800cae8:	4313      	orrs	r3, r2
 800caea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	f023 0320 	bic.w	r3, r3, #32
 800caf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	689b      	ldr	r3, [r3, #8]
 800caf8:	011b      	lsls	r3, r3, #4
 800cafa:	697a      	ldr	r2, [r7, #20]
 800cafc:	4313      	orrs	r3, r2
 800cafe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	4a2c      	ldr	r2, [pc, #176]	@ (800cbb4 <TIM_OC2_SetConfig+0x110>)
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d007      	beq.n	800cb18 <TIM_OC2_SetConfig+0x74>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	4a2b      	ldr	r2, [pc, #172]	@ (800cbb8 <TIM_OC2_SetConfig+0x114>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d003      	beq.n	800cb18 <TIM_OC2_SetConfig+0x74>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	4a2a      	ldr	r2, [pc, #168]	@ (800cbbc <TIM_OC2_SetConfig+0x118>)
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d10d      	bne.n	800cb34 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	68db      	ldr	r3, [r3, #12]
 800cb24:	011b      	lsls	r3, r3, #4
 800cb26:	697a      	ldr	r2, [r7, #20]
 800cb28:	4313      	orrs	r3, r2
 800cb2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4a1f      	ldr	r2, [pc, #124]	@ (800cbb4 <TIM_OC2_SetConfig+0x110>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d013      	beq.n	800cb64 <TIM_OC2_SetConfig+0xc0>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	4a1e      	ldr	r2, [pc, #120]	@ (800cbb8 <TIM_OC2_SetConfig+0x114>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d00f      	beq.n	800cb64 <TIM_OC2_SetConfig+0xc0>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	4a1e      	ldr	r2, [pc, #120]	@ (800cbc0 <TIM_OC2_SetConfig+0x11c>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d00b      	beq.n	800cb64 <TIM_OC2_SetConfig+0xc0>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	4a1d      	ldr	r2, [pc, #116]	@ (800cbc4 <TIM_OC2_SetConfig+0x120>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d007      	beq.n	800cb64 <TIM_OC2_SetConfig+0xc0>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	4a1c      	ldr	r2, [pc, #112]	@ (800cbc8 <TIM_OC2_SetConfig+0x124>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d003      	beq.n	800cb64 <TIM_OC2_SetConfig+0xc0>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4a17      	ldr	r2, [pc, #92]	@ (800cbbc <TIM_OC2_SetConfig+0x118>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d113      	bne.n	800cb8c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cb6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cb72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	695b      	ldr	r3, [r3, #20]
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	693a      	ldr	r2, [r7, #16]
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	699b      	ldr	r3, [r3, #24]
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	693a      	ldr	r2, [r7, #16]
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	693a      	ldr	r2, [r7, #16]
 800cb90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	68fa      	ldr	r2, [r7, #12]
 800cb96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	685a      	ldr	r2, [r3, #4]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	697a      	ldr	r2, [r7, #20]
 800cba4:	621a      	str	r2, [r3, #32]
}
 800cba6:	bf00      	nop
 800cba8:	371c      	adds	r7, #28
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr
 800cbb2:	bf00      	nop
 800cbb4:	40012c00 	.word	0x40012c00
 800cbb8:	40013400 	.word	0x40013400
 800cbbc:	40015000 	.word	0x40015000
 800cbc0:	40014000 	.word	0x40014000
 800cbc4:	40014400 	.word	0x40014400
 800cbc8:	40014800 	.word	0x40014800

0800cbcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b087      	sub	sp, #28
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6a1b      	ldr	r3, [r3, #32]
 800cbda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6a1b      	ldr	r3, [r3, #32]
 800cbe0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	69db      	ldr	r3, [r3, #28]
 800cbf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cbfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f023 0303 	bic.w	r3, r3, #3
 800cc06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	68fa      	ldr	r2, [r7, #12]
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cc18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	689b      	ldr	r3, [r3, #8]
 800cc1e:	021b      	lsls	r3, r3, #8
 800cc20:	697a      	ldr	r2, [r7, #20]
 800cc22:	4313      	orrs	r3, r2
 800cc24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	4a2b      	ldr	r2, [pc, #172]	@ (800ccd8 <TIM_OC3_SetConfig+0x10c>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d007      	beq.n	800cc3e <TIM_OC3_SetConfig+0x72>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	4a2a      	ldr	r2, [pc, #168]	@ (800ccdc <TIM_OC3_SetConfig+0x110>)
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d003      	beq.n	800cc3e <TIM_OC3_SetConfig+0x72>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	4a29      	ldr	r2, [pc, #164]	@ (800cce0 <TIM_OC3_SetConfig+0x114>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d10d      	bne.n	800cc5a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cc44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	68db      	ldr	r3, [r3, #12]
 800cc4a:	021b      	lsls	r3, r3, #8
 800cc4c:	697a      	ldr	r2, [r7, #20]
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cc58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	4a1e      	ldr	r2, [pc, #120]	@ (800ccd8 <TIM_OC3_SetConfig+0x10c>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d013      	beq.n	800cc8a <TIM_OC3_SetConfig+0xbe>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	4a1d      	ldr	r2, [pc, #116]	@ (800ccdc <TIM_OC3_SetConfig+0x110>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d00f      	beq.n	800cc8a <TIM_OC3_SetConfig+0xbe>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	4a1d      	ldr	r2, [pc, #116]	@ (800cce4 <TIM_OC3_SetConfig+0x118>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d00b      	beq.n	800cc8a <TIM_OC3_SetConfig+0xbe>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	4a1c      	ldr	r2, [pc, #112]	@ (800cce8 <TIM_OC3_SetConfig+0x11c>)
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d007      	beq.n	800cc8a <TIM_OC3_SetConfig+0xbe>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	4a1b      	ldr	r2, [pc, #108]	@ (800ccec <TIM_OC3_SetConfig+0x120>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d003      	beq.n	800cc8a <TIM_OC3_SetConfig+0xbe>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	4a16      	ldr	r2, [pc, #88]	@ (800cce0 <TIM_OC3_SetConfig+0x114>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d113      	bne.n	800ccb2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cc90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cc98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	695b      	ldr	r3, [r3, #20]
 800cc9e:	011b      	lsls	r3, r3, #4
 800cca0:	693a      	ldr	r2, [r7, #16]
 800cca2:	4313      	orrs	r3, r2
 800cca4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	699b      	ldr	r3, [r3, #24]
 800ccaa:	011b      	lsls	r3, r3, #4
 800ccac:	693a      	ldr	r2, [r7, #16]
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	693a      	ldr	r2, [r7, #16]
 800ccb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	68fa      	ldr	r2, [r7, #12]
 800ccbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	685a      	ldr	r2, [r3, #4]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	697a      	ldr	r2, [r7, #20]
 800ccca:	621a      	str	r2, [r3, #32]
}
 800cccc:	bf00      	nop
 800ccce:	371c      	adds	r7, #28
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr
 800ccd8:	40012c00 	.word	0x40012c00
 800ccdc:	40013400 	.word	0x40013400
 800cce0:	40015000 	.word	0x40015000
 800cce4:	40014000 	.word	0x40014000
 800cce8:	40014400 	.word	0x40014400
 800ccec:	40014800 	.word	0x40014800

0800ccf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b087      	sub	sp, #28
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6a1b      	ldr	r3, [r3, #32]
 800ccfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6a1b      	ldr	r3, [r3, #32]
 800cd04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	69db      	ldr	r3, [r3, #28]
 800cd16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cd1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cd2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	021b      	lsls	r3, r3, #8
 800cd32:	68fa      	ldr	r2, [r7, #12]
 800cd34:	4313      	orrs	r3, r2
 800cd36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cd3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	689b      	ldr	r3, [r3, #8]
 800cd44:	031b      	lsls	r3, r3, #12
 800cd46:	697a      	ldr	r2, [r7, #20]
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	4a2c      	ldr	r2, [pc, #176]	@ (800ce00 <TIM_OC4_SetConfig+0x110>)
 800cd50:	4293      	cmp	r3, r2
 800cd52:	d007      	beq.n	800cd64 <TIM_OC4_SetConfig+0x74>
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	4a2b      	ldr	r2, [pc, #172]	@ (800ce04 <TIM_OC4_SetConfig+0x114>)
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d003      	beq.n	800cd64 <TIM_OC4_SetConfig+0x74>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	4a2a      	ldr	r2, [pc, #168]	@ (800ce08 <TIM_OC4_SetConfig+0x118>)
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d10d      	bne.n	800cd80 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cd6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	68db      	ldr	r3, [r3, #12]
 800cd70:	031b      	lsls	r3, r3, #12
 800cd72:	697a      	ldr	r2, [r7, #20]
 800cd74:	4313      	orrs	r3, r2
 800cd76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cd7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	4a1f      	ldr	r2, [pc, #124]	@ (800ce00 <TIM_OC4_SetConfig+0x110>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d013      	beq.n	800cdb0 <TIM_OC4_SetConfig+0xc0>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	4a1e      	ldr	r2, [pc, #120]	@ (800ce04 <TIM_OC4_SetConfig+0x114>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d00f      	beq.n	800cdb0 <TIM_OC4_SetConfig+0xc0>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	4a1e      	ldr	r2, [pc, #120]	@ (800ce0c <TIM_OC4_SetConfig+0x11c>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d00b      	beq.n	800cdb0 <TIM_OC4_SetConfig+0xc0>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	4a1d      	ldr	r2, [pc, #116]	@ (800ce10 <TIM_OC4_SetConfig+0x120>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d007      	beq.n	800cdb0 <TIM_OC4_SetConfig+0xc0>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	4a1c      	ldr	r2, [pc, #112]	@ (800ce14 <TIM_OC4_SetConfig+0x124>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d003      	beq.n	800cdb0 <TIM_OC4_SetConfig+0xc0>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	4a17      	ldr	r2, [pc, #92]	@ (800ce08 <TIM_OC4_SetConfig+0x118>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d113      	bne.n	800cdd8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cdb6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cdbe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	695b      	ldr	r3, [r3, #20]
 800cdc4:	019b      	lsls	r3, r3, #6
 800cdc6:	693a      	ldr	r2, [r7, #16]
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	699b      	ldr	r3, [r3, #24]
 800cdd0:	019b      	lsls	r3, r3, #6
 800cdd2:	693a      	ldr	r2, [r7, #16]
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	693a      	ldr	r2, [r7, #16]
 800cddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	68fa      	ldr	r2, [r7, #12]
 800cde2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	685a      	ldr	r2, [r3, #4]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	697a      	ldr	r2, [r7, #20]
 800cdf0:	621a      	str	r2, [r3, #32]
}
 800cdf2:	bf00      	nop
 800cdf4:	371c      	adds	r7, #28
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfc:	4770      	bx	lr
 800cdfe:	bf00      	nop
 800ce00:	40012c00 	.word	0x40012c00
 800ce04:	40013400 	.word	0x40013400
 800ce08:	40015000 	.word	0x40015000
 800ce0c:	40014000 	.word	0x40014000
 800ce10:	40014400 	.word	0x40014400
 800ce14:	40014800 	.word	0x40014800

0800ce18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b087      	sub	sp, #28
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6a1b      	ldr	r3, [r3, #32]
 800ce26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6a1b      	ldr	r3, [r3, #32]
 800ce2c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ce46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	68fa      	ldr	r2, [r7, #12]
 800ce52:	4313      	orrs	r3, r2
 800ce54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ce5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	689b      	ldr	r3, [r3, #8]
 800ce62:	041b      	lsls	r3, r3, #16
 800ce64:	693a      	ldr	r2, [r7, #16]
 800ce66:	4313      	orrs	r3, r2
 800ce68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	4a19      	ldr	r2, [pc, #100]	@ (800ced4 <TIM_OC5_SetConfig+0xbc>)
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	d013      	beq.n	800ce9a <TIM_OC5_SetConfig+0x82>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	4a18      	ldr	r2, [pc, #96]	@ (800ced8 <TIM_OC5_SetConfig+0xc0>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d00f      	beq.n	800ce9a <TIM_OC5_SetConfig+0x82>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	4a17      	ldr	r2, [pc, #92]	@ (800cedc <TIM_OC5_SetConfig+0xc4>)
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d00b      	beq.n	800ce9a <TIM_OC5_SetConfig+0x82>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	4a16      	ldr	r2, [pc, #88]	@ (800cee0 <TIM_OC5_SetConfig+0xc8>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d007      	beq.n	800ce9a <TIM_OC5_SetConfig+0x82>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	4a15      	ldr	r2, [pc, #84]	@ (800cee4 <TIM_OC5_SetConfig+0xcc>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d003      	beq.n	800ce9a <TIM_OC5_SetConfig+0x82>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	4a14      	ldr	r2, [pc, #80]	@ (800cee8 <TIM_OC5_SetConfig+0xd0>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d109      	bne.n	800ceae <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cea0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	695b      	ldr	r3, [r3, #20]
 800cea6:	021b      	lsls	r3, r3, #8
 800cea8:	697a      	ldr	r2, [r7, #20]
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	697a      	ldr	r2, [r7, #20]
 800ceb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	68fa      	ldr	r2, [r7, #12]
 800ceb8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	685a      	ldr	r2, [r3, #4]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	693a      	ldr	r2, [r7, #16]
 800cec6:	621a      	str	r2, [r3, #32]
}
 800cec8:	bf00      	nop
 800ceca:	371c      	adds	r7, #28
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr
 800ced4:	40012c00 	.word	0x40012c00
 800ced8:	40013400 	.word	0x40013400
 800cedc:	40014000 	.word	0x40014000
 800cee0:	40014400 	.word	0x40014400
 800cee4:	40014800 	.word	0x40014800
 800cee8:	40015000 	.word	0x40015000

0800ceec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b087      	sub	sp, #28
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6a1b      	ldr	r3, [r3, #32]
 800cefa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6a1b      	ldr	r3, [r3, #32]
 800cf00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	685b      	ldr	r3, [r3, #4]
 800cf0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cf1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	021b      	lsls	r3, r3, #8
 800cf26:	68fa      	ldr	r2, [r7, #12]
 800cf28:	4313      	orrs	r3, r2
 800cf2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cf32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	051b      	lsls	r3, r3, #20
 800cf3a:	693a      	ldr	r2, [r7, #16]
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	4a1a      	ldr	r2, [pc, #104]	@ (800cfac <TIM_OC6_SetConfig+0xc0>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d013      	beq.n	800cf70 <TIM_OC6_SetConfig+0x84>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	4a19      	ldr	r2, [pc, #100]	@ (800cfb0 <TIM_OC6_SetConfig+0xc4>)
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d00f      	beq.n	800cf70 <TIM_OC6_SetConfig+0x84>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	4a18      	ldr	r2, [pc, #96]	@ (800cfb4 <TIM_OC6_SetConfig+0xc8>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d00b      	beq.n	800cf70 <TIM_OC6_SetConfig+0x84>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	4a17      	ldr	r2, [pc, #92]	@ (800cfb8 <TIM_OC6_SetConfig+0xcc>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d007      	beq.n	800cf70 <TIM_OC6_SetConfig+0x84>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	4a16      	ldr	r2, [pc, #88]	@ (800cfbc <TIM_OC6_SetConfig+0xd0>)
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d003      	beq.n	800cf70 <TIM_OC6_SetConfig+0x84>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	4a15      	ldr	r2, [pc, #84]	@ (800cfc0 <TIM_OC6_SetConfig+0xd4>)
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d109      	bne.n	800cf84 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cf76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	695b      	ldr	r3, [r3, #20]
 800cf7c:	029b      	lsls	r3, r3, #10
 800cf7e:	697a      	ldr	r2, [r7, #20]
 800cf80:	4313      	orrs	r3, r2
 800cf82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	697a      	ldr	r2, [r7, #20]
 800cf88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	68fa      	ldr	r2, [r7, #12]
 800cf8e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	685a      	ldr	r2, [r3, #4]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	693a      	ldr	r2, [r7, #16]
 800cf9c:	621a      	str	r2, [r3, #32]
}
 800cf9e:	bf00      	nop
 800cfa0:	371c      	adds	r7, #28
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa8:	4770      	bx	lr
 800cfaa:	bf00      	nop
 800cfac:	40012c00 	.word	0x40012c00
 800cfb0:	40013400 	.word	0x40013400
 800cfb4:	40014000 	.word	0x40014000
 800cfb8:	40014400 	.word	0x40014400
 800cfbc:	40014800 	.word	0x40014800
 800cfc0:	40015000 	.word	0x40015000

0800cfc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b087      	sub	sp, #28
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	60b9      	str	r1, [r7, #8]
 800cfce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	6a1b      	ldr	r3, [r3, #32]
 800cfd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	6a1b      	ldr	r3, [r3, #32]
 800cfda:	f023 0201 	bic.w	r2, r3, #1
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	699b      	ldr	r3, [r3, #24]
 800cfe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cfee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	011b      	lsls	r3, r3, #4
 800cff4:	693a      	ldr	r2, [r7, #16]
 800cff6:	4313      	orrs	r3, r2
 800cff8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	f023 030a 	bic.w	r3, r3, #10
 800d000:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d002:	697a      	ldr	r2, [r7, #20]
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	4313      	orrs	r3, r2
 800d008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	693a      	ldr	r2, [r7, #16]
 800d00e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	697a      	ldr	r2, [r7, #20]
 800d014:	621a      	str	r2, [r3, #32]
}
 800d016:	bf00      	nop
 800d018:	371c      	adds	r7, #28
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr

0800d022 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d022:	b480      	push	{r7}
 800d024:	b087      	sub	sp, #28
 800d026:	af00      	add	r7, sp, #0
 800d028:	60f8      	str	r0, [r7, #12]
 800d02a:	60b9      	str	r1, [r7, #8]
 800d02c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	6a1b      	ldr	r3, [r3, #32]
 800d032:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	6a1b      	ldr	r3, [r3, #32]
 800d038:	f023 0210 	bic.w	r2, r3, #16
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	699b      	ldr	r3, [r3, #24]
 800d044:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d04c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	031b      	lsls	r3, r3, #12
 800d052:	693a      	ldr	r2, [r7, #16]
 800d054:	4313      	orrs	r3, r2
 800d056:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d05e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	011b      	lsls	r3, r3, #4
 800d064:	697a      	ldr	r2, [r7, #20]
 800d066:	4313      	orrs	r3, r2
 800d068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	693a      	ldr	r2, [r7, #16]
 800d06e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	697a      	ldr	r2, [r7, #20]
 800d074:	621a      	str	r2, [r3, #32]
}
 800d076:	bf00      	nop
 800d078:	371c      	adds	r7, #28
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr

0800d082 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d082:	b480      	push	{r7}
 800d084:	b085      	sub	sp, #20
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
 800d08a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	689b      	ldr	r3, [r3, #8]
 800d090:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800d098:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d09c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d09e:	683a      	ldr	r2, [r7, #0]
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	f043 0307 	orr.w	r3, r3, #7
 800d0a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	68fa      	ldr	r2, [r7, #12]
 800d0ae:	609a      	str	r2, [r3, #8]
}
 800d0b0:	bf00      	nop
 800d0b2:	3714      	adds	r7, #20
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr

0800d0bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b087      	sub	sp, #28
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	60f8      	str	r0, [r7, #12]
 800d0c4:	60b9      	str	r1, [r7, #8]
 800d0c6:	607a      	str	r2, [r7, #4]
 800d0c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	689b      	ldr	r3, [r3, #8]
 800d0ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d0d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	021a      	lsls	r2, r3, #8
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	431a      	orrs	r2, r3
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	697a      	ldr	r2, [r7, #20]
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	697a      	ldr	r2, [r7, #20]
 800d0ee:	609a      	str	r2, [r3, #8]
}
 800d0f0:	bf00      	nop
 800d0f2:	371c      	adds	r7, #28
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr

0800d0fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b087      	sub	sp, #28
 800d100:	af00      	add	r7, sp, #0
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	60b9      	str	r1, [r7, #8]
 800d106:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	f003 031f 	and.w	r3, r3, #31
 800d10e:	2201      	movs	r2, #1
 800d110:	fa02 f303 	lsl.w	r3, r2, r3
 800d114:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	6a1a      	ldr	r2, [r3, #32]
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	43db      	mvns	r3, r3
 800d11e:	401a      	ands	r2, r3
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	6a1a      	ldr	r2, [r3, #32]
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	f003 031f 	and.w	r3, r3, #31
 800d12e:	6879      	ldr	r1, [r7, #4]
 800d130:	fa01 f303 	lsl.w	r3, r1, r3
 800d134:	431a      	orrs	r2, r3
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	621a      	str	r2, [r3, #32]
}
 800d13a:	bf00      	nop
 800d13c:	371c      	adds	r7, #28
 800d13e:	46bd      	mov	sp, r7
 800d140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d144:	4770      	bx	lr
	...

0800d148 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800d148:	b480      	push	{r7}
 800d14a:	b083      	sub	sp, #12
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	4a26      	ldr	r2, [pc, #152]	@ (800d1ec <TIM_ResetCallback+0xa4>)
 800d154:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	4a25      	ldr	r2, [pc, #148]	@ (800d1f0 <TIM_ResetCallback+0xa8>)
 800d15c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	4a24      	ldr	r2, [pc, #144]	@ (800d1f4 <TIM_ResetCallback+0xac>)
 800d164:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	4a23      	ldr	r2, [pc, #140]	@ (800d1f8 <TIM_ResetCallback+0xb0>)
 800d16c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	4a22      	ldr	r2, [pc, #136]	@ (800d1fc <TIM_ResetCallback+0xb4>)
 800d174:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	4a21      	ldr	r2, [pc, #132]	@ (800d200 <TIM_ResetCallback+0xb8>)
 800d17c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	4a20      	ldr	r2, [pc, #128]	@ (800d204 <TIM_ResetCallback+0xbc>)
 800d184:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	4a1f      	ldr	r2, [pc, #124]	@ (800d208 <TIM_ResetCallback+0xc0>)
 800d18c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	4a1e      	ldr	r2, [pc, #120]	@ (800d20c <TIM_ResetCallback+0xc4>)
 800d194:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	4a1d      	ldr	r2, [pc, #116]	@ (800d210 <TIM_ResetCallback+0xc8>)
 800d19c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	4a1c      	ldr	r2, [pc, #112]	@ (800d214 <TIM_ResetCallback+0xcc>)
 800d1a4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	4a1b      	ldr	r2, [pc, #108]	@ (800d218 <TIM_ResetCallback+0xd0>)
 800d1ac:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	4a1a      	ldr	r2, [pc, #104]	@ (800d21c <TIM_ResetCallback+0xd4>)
 800d1b4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	4a19      	ldr	r2, [pc, #100]	@ (800d220 <TIM_ResetCallback+0xd8>)
 800d1bc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	4a18      	ldr	r2, [pc, #96]	@ (800d224 <TIM_ResetCallback+0xdc>)
 800d1c4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	4a17      	ldr	r2, [pc, #92]	@ (800d228 <TIM_ResetCallback+0xe0>)
 800d1cc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	4a16      	ldr	r2, [pc, #88]	@ (800d22c <TIM_ResetCallback+0xe4>)
 800d1d4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	4a15      	ldr	r2, [pc, #84]	@ (800d230 <TIM_ResetCallback+0xe8>)
 800d1dc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800d1e0:	bf00      	nop
 800d1e2:	370c      	adds	r7, #12
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ea:	4770      	bx	lr
 800d1ec:	08006051 	.word	0x08006051
 800d1f0:	0800c495 	.word	0x0800c495
 800d1f4:	0800c50d 	.word	0x0800c50d
 800d1f8:	0800c521 	.word	0x0800c521
 800d1fc:	0800c4bd 	.word	0x0800c4bd
 800d200:	0800c4d1 	.word	0x0800c4d1
 800d204:	0800c4a9 	.word	0x0800c4a9
 800d208:	0800c4e5 	.word	0x0800c4e5
 800d20c:	0800c4f9 	.word	0x0800c4f9
 800d210:	0800c535 	.word	0x0800c535
 800d214:	0800d489 	.word	0x0800d489
 800d218:	0800d49d 	.word	0x0800d49d
 800d21c:	0800d4b1 	.word	0x0800d4b1
 800d220:	0800d4c5 	.word	0x0800d4c5
 800d224:	0800d4d9 	.word	0x0800d4d9
 800d228:	0800d4ed 	.word	0x0800d4ed
 800d22c:	0800d501 	.word	0x0800d501
 800d230:	0800d515 	.word	0x0800d515

0800d234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d234:	b480      	push	{r7}
 800d236:	b085      	sub	sp, #20
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d244:	2b01      	cmp	r3, #1
 800d246:	d101      	bne.n	800d24c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d248:	2302      	movs	r3, #2
 800d24a:	e074      	b.n	800d336 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2201      	movs	r2, #1
 800d250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2202      	movs	r2, #2
 800d258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	685b      	ldr	r3, [r3, #4]
 800d262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	689b      	ldr	r3, [r3, #8]
 800d26a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a34      	ldr	r2, [pc, #208]	@ (800d344 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d009      	beq.n	800d28a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	4a33      	ldr	r2, [pc, #204]	@ (800d348 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d004      	beq.n	800d28a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	4a31      	ldr	r2, [pc, #196]	@ (800d34c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d108      	bne.n	800d29c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d290:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	68fa      	ldr	r2, [r7, #12]
 800d298:	4313      	orrs	r3, r2
 800d29a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800d2a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d2a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	68fa      	ldr	r2, [r7, #12]
 800d2ae:	4313      	orrs	r3, r2
 800d2b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	68fa      	ldr	r2, [r7, #12]
 800d2b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	4a21      	ldr	r2, [pc, #132]	@ (800d344 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d2c0:	4293      	cmp	r3, r2
 800d2c2:	d022      	beq.n	800d30a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2cc:	d01d      	beq.n	800d30a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	4a1f      	ldr	r2, [pc, #124]	@ (800d350 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	d018      	beq.n	800d30a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4a1d      	ldr	r2, [pc, #116]	@ (800d354 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d013      	beq.n	800d30a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	4a1c      	ldr	r2, [pc, #112]	@ (800d358 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d00e      	beq.n	800d30a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4a15      	ldr	r2, [pc, #84]	@ (800d348 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d009      	beq.n	800d30a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	4a18      	ldr	r2, [pc, #96]	@ (800d35c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	d004      	beq.n	800d30a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4a11      	ldr	r2, [pc, #68]	@ (800d34c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d10c      	bne.n	800d324 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d310:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	689b      	ldr	r3, [r3, #8]
 800d316:	68ba      	ldr	r2, [r7, #8]
 800d318:	4313      	orrs	r3, r2
 800d31a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	68ba      	ldr	r2, [r7, #8]
 800d322:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2201      	movs	r2, #1
 800d328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2200      	movs	r2, #0
 800d330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d334:	2300      	movs	r3, #0
}
 800d336:	4618      	mov	r0, r3
 800d338:	3714      	adds	r7, #20
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr
 800d342:	bf00      	nop
 800d344:	40012c00 	.word	0x40012c00
 800d348:	40013400 	.word	0x40013400
 800d34c:	40015000 	.word	0x40015000
 800d350:	40000400 	.word	0x40000400
 800d354:	40000800 	.word	0x40000800
 800d358:	40000c00 	.word	0x40000c00
 800d35c:	40014000 	.word	0x40014000

0800d360 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d360:	b480      	push	{r7}
 800d362:	b085      	sub	sp, #20
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d36a:	2300      	movs	r3, #0
 800d36c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d374:	2b01      	cmp	r3, #1
 800d376:	d101      	bne.n	800d37c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d378:	2302      	movs	r3, #2
 800d37a:	e078      	b.n	800d46e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2201      	movs	r2, #1
 800d380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	68db      	ldr	r3, [r3, #12]
 800d38e:	4313      	orrs	r3, r2
 800d390:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	689b      	ldr	r3, [r3, #8]
 800d39c:	4313      	orrs	r3, r2
 800d39e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	4313      	orrs	r3, r2
 800d3ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	691b      	ldr	r3, [r3, #16]
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	695b      	ldr	r3, [r3, #20]
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	699b      	ldr	r3, [r3, #24]
 800d3f0:	041b      	lsls	r3, r3, #16
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	69db      	ldr	r3, [r3, #28]
 800d400:	4313      	orrs	r3, r2
 800d402:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4a1c      	ldr	r2, [pc, #112]	@ (800d47c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d009      	beq.n	800d422 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	4a1b      	ldr	r2, [pc, #108]	@ (800d480 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800d414:	4293      	cmp	r3, r2
 800d416:	d004      	beq.n	800d422 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	4a19      	ldr	r2, [pc, #100]	@ (800d484 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800d41e:	4293      	cmp	r3, r2
 800d420:	d11c      	bne.n	800d45c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d42c:	051b      	lsls	r3, r3, #20
 800d42e:	4313      	orrs	r3, r2
 800d430:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	6a1b      	ldr	r3, [r3, #32]
 800d43c:	4313      	orrs	r3, r2
 800d43e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d44a:	4313      	orrs	r3, r2
 800d44c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d458:	4313      	orrs	r3, r2
 800d45a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	68fa      	ldr	r2, [r7, #12]
 800d462:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d46c:	2300      	movs	r3, #0
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3714      	adds	r7, #20
 800d472:	46bd      	mov	sp, r7
 800d474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d478:	4770      	bx	lr
 800d47a:	bf00      	nop
 800d47c:	40012c00 	.word	0x40012c00
 800d480:	40013400 	.word	0x40013400
 800d484:	40015000 	.word	0x40015000

0800d488 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d488:	b480      	push	{r7}
 800d48a:	b083      	sub	sp, #12
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d490:	bf00      	nop
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr

0800d49c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800d4a4:	bf00      	nop
 800d4a6:	370c      	adds	r7, #12
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr

0800d4b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d4b8:	bf00      	nop
 800d4ba:	370c      	adds	r7, #12
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr

0800d4c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d4cc:	bf00      	nop
 800d4ce:	370c      	adds	r7, #12
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr

0800d4d8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b083      	sub	sp, #12
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d4e0:	bf00      	nop
 800d4e2:	370c      	adds	r7, #12
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr

0800d4ec <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b083      	sub	sp, #12
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d4f4:	bf00      	nop
 800d4f6:	370c      	adds	r7, #12
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr

0800d500 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d500:	b480      	push	{r7}
 800d502:	b083      	sub	sp, #12
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d508:	bf00      	nop
 800d50a:	370c      	adds	r7, #12
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr

0800d514 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d514:	b480      	push	{r7}
 800d516:	b083      	sub	sp, #12
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d51c:	bf00      	nop
 800d51e:	370c      	adds	r7, #12
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr

0800d528 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d101      	bne.n	800d53a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d536:	2301      	movs	r3, #1
 800d538:	e050      	b.n	800d5dc <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d540:	2b00      	cmp	r3, #0
 800d542:	d114      	bne.n	800d56e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2200      	movs	r2, #0
 800d548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f000 fd5b 	bl	800e008 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d103      	bne.n	800d564 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	4a21      	ldr	r2, [pc, #132]	@ (800d5e4 <HAL_UART_Init+0xbc>)
 800d560:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2224      	movs	r2, #36	@ 0x24
 800d572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	681a      	ldr	r2, [r3, #0]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f022 0201 	bic.w	r2, r2, #1
 800d584:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d002      	beq.n	800d594 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f001 f888 	bl	800e6a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f000 fd89 	bl	800e0ac <UART_SetConfig>
 800d59a:	4603      	mov	r3, r0
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d101      	bne.n	800d5a4 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	e01b      	b.n	800d5dc <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	685a      	ldr	r2, [r3, #4]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d5b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	689a      	ldr	r2, [r3, #8]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d5c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	681a      	ldr	r2, [r3, #0]
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f042 0201 	orr.w	r2, r2, #1
 800d5d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f001 f907 	bl	800e7e8 <UART_CheckIdleState>
 800d5da:	4603      	mov	r3, r0
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3708      	adds	r7, #8
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}
 800d5e4:	080079fd 	.word	0x080079fd

0800d5e8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b087      	sub	sp, #28
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	60f8      	str	r0, [r7, #12]
 800d5f0:	460b      	mov	r3, r1
 800d5f2:	607a      	str	r2, [r7, #4]
 800d5f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d109      	bne.n	800d614 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d606:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800d610:	2301      	movs	r3, #1
 800d612:	e09c      	b.n	800d74e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d61a:	2b20      	cmp	r3, #32
 800d61c:	d16c      	bne.n	800d6f8 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800d61e:	7afb      	ldrb	r3, [r7, #11]
 800d620:	2b0c      	cmp	r3, #12
 800d622:	d85e      	bhi.n	800d6e2 <HAL_UART_RegisterCallback+0xfa>
 800d624:	a201      	add	r2, pc, #4	@ (adr r2, 800d62c <HAL_UART_RegisterCallback+0x44>)
 800d626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d62a:	bf00      	nop
 800d62c:	0800d661 	.word	0x0800d661
 800d630:	0800d66b 	.word	0x0800d66b
 800d634:	0800d675 	.word	0x0800d675
 800d638:	0800d67f 	.word	0x0800d67f
 800d63c:	0800d689 	.word	0x0800d689
 800d640:	0800d693 	.word	0x0800d693
 800d644:	0800d69d 	.word	0x0800d69d
 800d648:	0800d6a7 	.word	0x0800d6a7
 800d64c:	0800d6b1 	.word	0x0800d6b1
 800d650:	0800d6bb 	.word	0x0800d6bb
 800d654:	0800d6c5 	.word	0x0800d6c5
 800d658:	0800d6cf 	.word	0x0800d6cf
 800d65c:	0800d6d9 	.word	0x0800d6d9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	687a      	ldr	r2, [r7, #4]
 800d664:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800d668:	e070      	b.n	800d74c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	687a      	ldr	r2, [r7, #4]
 800d66e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800d672:	e06b      	b.n	800d74c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	687a      	ldr	r2, [r7, #4]
 800d678:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800d67c:	e066      	b.n	800d74c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	687a      	ldr	r2, [r7, #4]
 800d682:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800d686:	e061      	b.n	800d74c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800d690:	e05c      	b.n	800d74c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800d69a:	e057      	b.n	800d74c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800d6a4:	e052      	b.n	800d74c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800d6ae:	e04d      	b.n	800d74c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800d6b8:	e048      	b.n	800d74c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	687a      	ldr	r2, [r7, #4]
 800d6be:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800d6c2:	e043      	b.n	800d74c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	687a      	ldr	r2, [r7, #4]
 800d6c8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800d6cc:	e03e      	b.n	800d74c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	687a      	ldr	r2, [r7, #4]
 800d6d2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800d6d6:	e039      	b.n	800d74c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	687a      	ldr	r2, [r7, #4]
 800d6dc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800d6e0:	e034      	b.n	800d74c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6e8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	75fb      	strb	r3, [r7, #23]
        break;
 800d6f6:	e029      	b.n	800d74c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d11a      	bne.n	800d738 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800d702:	7afb      	ldrb	r3, [r7, #11]
 800d704:	2b0b      	cmp	r3, #11
 800d706:	d002      	beq.n	800d70e <HAL_UART_RegisterCallback+0x126>
 800d708:	2b0c      	cmp	r3, #12
 800d70a:	d005      	beq.n	800d718 <HAL_UART_RegisterCallback+0x130>
 800d70c:	e009      	b.n	800d722 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	687a      	ldr	r2, [r7, #4]
 800d712:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800d716:	e019      	b.n	800d74c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	687a      	ldr	r2, [r7, #4]
 800d71c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800d720:	e014      	b.n	800d74c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d728:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800d732:	2301      	movs	r3, #1
 800d734:	75fb      	strb	r3, [r7, #23]
        break;
 800d736:	e009      	b.n	800d74c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d73e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800d748:	2301      	movs	r3, #1
 800d74a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800d74c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d74e:	4618      	mov	r0, r3
 800d750:	371c      	adds	r7, #28
 800d752:	46bd      	mov	sp, r7
 800d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d758:	4770      	bx	lr
 800d75a:	bf00      	nop

0800d75c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b08a      	sub	sp, #40	@ 0x28
 800d760:	af00      	add	r7, sp, #0
 800d762:	60f8      	str	r0, [r7, #12]
 800d764:	60b9      	str	r1, [r7, #8]
 800d766:	4613      	mov	r3, r2
 800d768:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d770:	2b20      	cmp	r3, #32
 800d772:	d137      	bne.n	800d7e4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d002      	beq.n	800d780 <HAL_UART_Receive_DMA+0x24>
 800d77a:	88fb      	ldrh	r3, [r7, #6]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d101      	bne.n	800d784 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d780:	2301      	movs	r3, #1
 800d782:	e030      	b.n	800d7e6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2200      	movs	r2, #0
 800d788:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4a18      	ldr	r2, [pc, #96]	@ (800d7f0 <HAL_UART_Receive_DMA+0x94>)
 800d790:	4293      	cmp	r3, r2
 800d792:	d01f      	beq.n	800d7d4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	685b      	ldr	r3, [r3, #4]
 800d79a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d018      	beq.n	800d7d4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	e853 3f00 	ldrex	r3, [r3]
 800d7ae:	613b      	str	r3, [r7, #16]
   return(result);
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d7b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	461a      	mov	r2, r3
 800d7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7c0:	623b      	str	r3, [r7, #32]
 800d7c2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7c4:	69f9      	ldr	r1, [r7, #28]
 800d7c6:	6a3a      	ldr	r2, [r7, #32]
 800d7c8:	e841 2300 	strex	r3, r2, [r1]
 800d7cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800d7ce:	69bb      	ldr	r3, [r7, #24]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d1e6      	bne.n	800d7a2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d7d4:	88fb      	ldrh	r3, [r7, #6]
 800d7d6:	461a      	mov	r2, r3
 800d7d8:	68b9      	ldr	r1, [r7, #8]
 800d7da:	68f8      	ldr	r0, [r7, #12]
 800d7dc:	f001 f91c 	bl	800ea18 <UART_Start_Receive_DMA>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	e000      	b.n	800d7e6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d7e4:	2302      	movs	r3, #2
  }
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3728      	adds	r7, #40	@ 0x28
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
 800d7ee:	bf00      	nop
 800d7f0:	40008000 	.word	0x40008000

0800d7f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b0ba      	sub	sp, #232	@ 0xe8
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	69db      	ldr	r3, [r3, #28]
 800d802:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	689b      	ldr	r3, [r3, #8]
 800d816:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d81a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d81e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d822:	4013      	ands	r3, r2
 800d824:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d828:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d11b      	bne.n	800d868 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d834:	f003 0320 	and.w	r3, r3, #32
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d015      	beq.n	800d868 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d83c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d840:	f003 0320 	and.w	r3, r3, #32
 800d844:	2b00      	cmp	r3, #0
 800d846:	d105      	bne.n	800d854 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d84c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d850:	2b00      	cmp	r3, #0
 800d852:	d009      	beq.n	800d868 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d858:	2b00      	cmp	r3, #0
 800d85a:	f000 8312 	beq.w	800de82 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	4798      	blx	r3
      }
      return;
 800d866:	e30c      	b.n	800de82 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d868:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	f000 8129 	beq.w	800dac4 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d872:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d876:	4b90      	ldr	r3, [pc, #576]	@ (800dab8 <HAL_UART_IRQHandler+0x2c4>)
 800d878:	4013      	ands	r3, r2
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d106      	bne.n	800d88c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d87e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d882:	4b8e      	ldr	r3, [pc, #568]	@ (800dabc <HAL_UART_IRQHandler+0x2c8>)
 800d884:	4013      	ands	r3, r2
 800d886:	2b00      	cmp	r3, #0
 800d888:	f000 811c 	beq.w	800dac4 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d88c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d890:	f003 0301 	and.w	r3, r3, #1
 800d894:	2b00      	cmp	r3, #0
 800d896:	d011      	beq.n	800d8bc <HAL_UART_IRQHandler+0xc8>
 800d898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d89c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d00b      	beq.n	800d8bc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d8b2:	f043 0201 	orr.w	r2, r3, #1
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d8bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d8c0:	f003 0302 	and.w	r3, r3, #2
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d011      	beq.n	800d8ec <HAL_UART_IRQHandler+0xf8>
 800d8c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d8cc:	f003 0301 	and.w	r3, r3, #1
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d00b      	beq.n	800d8ec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	2202      	movs	r2, #2
 800d8da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d8e2:	f043 0204 	orr.w	r2, r3, #4
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d8ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d8f0:	f003 0304 	and.w	r3, r3, #4
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d011      	beq.n	800d91c <HAL_UART_IRQHandler+0x128>
 800d8f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d8fc:	f003 0301 	and.w	r3, r3, #1
 800d900:	2b00      	cmp	r3, #0
 800d902:	d00b      	beq.n	800d91c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	2204      	movs	r2, #4
 800d90a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d912:	f043 0202 	orr.w	r2, r3, #2
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d91c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d920:	f003 0308 	and.w	r3, r3, #8
 800d924:	2b00      	cmp	r3, #0
 800d926:	d017      	beq.n	800d958 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d92c:	f003 0320 	and.w	r3, r3, #32
 800d930:	2b00      	cmp	r3, #0
 800d932:	d105      	bne.n	800d940 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d934:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d938:	4b5f      	ldr	r3, [pc, #380]	@ (800dab8 <HAL_UART_IRQHandler+0x2c4>)
 800d93a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d00b      	beq.n	800d958 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	2208      	movs	r2, #8
 800d946:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d94e:	f043 0208 	orr.w	r2, r3, #8
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d95c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d960:	2b00      	cmp	r3, #0
 800d962:	d012      	beq.n	800d98a <HAL_UART_IRQHandler+0x196>
 800d964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d968:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00c      	beq.n	800d98a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d978:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d980:	f043 0220 	orr.w	r2, r3, #32
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d990:	2b00      	cmp	r3, #0
 800d992:	f000 8278 	beq.w	800de86 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d99a:	f003 0320 	and.w	r3, r3, #32
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d013      	beq.n	800d9ca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d9a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d9a6:	f003 0320 	and.w	r3, r3, #32
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d105      	bne.n	800d9ba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d9ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d9b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d007      	beq.n	800d9ca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d003      	beq.n	800d9ca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	689b      	ldr	r3, [r3, #8]
 800d9da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9de:	2b40      	cmp	r3, #64	@ 0x40
 800d9e0:	d005      	beq.n	800d9ee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d9e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d9e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d058      	beq.n	800daa0 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f001 f8f9 	bl	800ebe6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	689b      	ldr	r3, [r3, #8]
 800d9fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9fe:	2b40      	cmp	r3, #64	@ 0x40
 800da00:	d148      	bne.n	800da94 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	3308      	adds	r3, #8
 800da08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800da10:	e853 3f00 	ldrex	r3, [r3]
 800da14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800da18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	3308      	adds	r3, #8
 800da2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800da2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800da32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800da3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800da3e:	e841 2300 	strex	r3, r2, [r1]
 800da42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800da46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d1d9      	bne.n	800da02 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da54:	2b00      	cmp	r3, #0
 800da56:	d017      	beq.n	800da88 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da5e:	4a18      	ldr	r2, [pc, #96]	@ (800dac0 <HAL_UART_IRQHandler+0x2cc>)
 800da60:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da68:	4618      	mov	r0, r3
 800da6a:	f7fc f8c5 	bl	8009bf8 <HAL_DMA_Abort_IT>
 800da6e:	4603      	mov	r3, r0
 800da70:	2b00      	cmp	r3, #0
 800da72:	d01f      	beq.n	800dab4 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da7c:	687a      	ldr	r2, [r7, #4]
 800da7e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800da82:	4610      	mov	r0, r2
 800da84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da86:	e015      	b.n	800dab4 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da92:	e00f      	b.n	800dab4 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da9e:	e009      	b.n	800dab4 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2200      	movs	r2, #0
 800daae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800dab2:	e1e8      	b.n	800de86 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dab4:	bf00      	nop
    return;
 800dab6:	e1e6      	b.n	800de86 <HAL_UART_IRQHandler+0x692>
 800dab8:	10000001 	.word	0x10000001
 800dabc:	04000120 	.word	0x04000120
 800dac0:	0800eeb1 	.word	0x0800eeb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dac8:	2b01      	cmp	r3, #1
 800daca:	f040 8176 	bne.w	800ddba <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dad2:	f003 0310 	and.w	r3, r3, #16
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	f000 816f 	beq.w	800ddba <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dadc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dae0:	f003 0310 	and.w	r3, r3, #16
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	f000 8168 	beq.w	800ddba <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	2210      	movs	r2, #16
 800daf0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	689b      	ldr	r3, [r3, #8]
 800daf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dafc:	2b40      	cmp	r3, #64	@ 0x40
 800dafe:	f040 80dc 	bne.w	800dcba <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800db10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800db14:	2b00      	cmp	r3, #0
 800db16:	f000 80b1 	beq.w	800dc7c <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800db20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800db24:	429a      	cmp	r2, r3
 800db26:	f080 80a9 	bcs.w	800dc7c <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800db30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	f003 0320 	and.w	r3, r3, #32
 800db42:	2b00      	cmp	r3, #0
 800db44:	f040 8087 	bne.w	800dc56 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800db54:	e853 3f00 	ldrex	r3, [r3]
 800db58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800db5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800db60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800db64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	461a      	mov	r2, r3
 800db6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800db72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800db76:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800db7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800db82:	e841 2300 	strex	r3, r2, [r1]
 800db86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800db8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d1da      	bne.n	800db48 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	3308      	adds	r3, #8
 800db98:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800db9c:	e853 3f00 	ldrex	r3, [r3]
 800dba0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800dba2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dba4:	f023 0301 	bic.w	r3, r3, #1
 800dba8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	3308      	adds	r3, #8
 800dbb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800dbb6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800dbba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbbc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800dbbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800dbc2:	e841 2300 	strex	r3, r2, [r1]
 800dbc6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800dbc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d1e1      	bne.n	800db92 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	3308      	adds	r3, #8
 800dbd4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dbd8:	e853 3f00 	ldrex	r3, [r3]
 800dbdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800dbde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dbe0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dbe4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	3308      	adds	r3, #8
 800dbee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800dbf2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800dbf4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbf6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800dbf8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800dbfa:	e841 2300 	strex	r3, r2, [r1]
 800dbfe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800dc00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d1e3      	bne.n	800dbce <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2220      	movs	r2, #32
 800dc0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2200      	movs	r2, #0
 800dc12:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc1c:	e853 3f00 	ldrex	r3, [r3]
 800dc20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dc22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc24:	f023 0310 	bic.w	r3, r3, #16
 800dc28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	461a      	mov	r2, r3
 800dc32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc36:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dc38:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dc3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dc3e:	e841 2300 	strex	r3, r2, [r1]
 800dc42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800dc44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d1e4      	bne.n	800dc14 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc50:	4618      	mov	r0, r3
 800dc52:	f7fb ff78 	bl	8009b46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2202      	movs	r2, #2
 800dc5a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800dc68:	687a      	ldr	r2, [r7, #4]
 800dc6a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800dc6e:	b292      	uxth	r2, r2
 800dc70:	1a8a      	subs	r2, r1, r2
 800dc72:	b292      	uxth	r2, r2
 800dc74:	4611      	mov	r1, r2
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800dc7a:	e106      	b.n	800de8a <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dc82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800dc86:	429a      	cmp	r2, r3
 800dc88:	f040 80ff 	bne.w	800de8a <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f003 0320 	and.w	r3, r3, #32
 800dc9a:	2b20      	cmp	r3, #32
 800dc9c:	f040 80f5 	bne.w	800de8a <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2202      	movs	r2, #2
 800dca4:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800dcac:	687a      	ldr	r2, [r7, #4]
 800dcae:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800dcb2:	4611      	mov	r1, r2
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	4798      	blx	r3
      return;
 800dcb8:	e0e7      	b.n	800de8a <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	1ad3      	subs	r3, r2, r3
 800dcca:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dcd4:	b29b      	uxth	r3, r3
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	f000 80d9 	beq.w	800de8e <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800dcdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	f000 80d4 	beq.w	800de8e <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcee:	e853 3f00 	ldrex	r3, [r3]
 800dcf2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dcf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcf6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dcfa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	461a      	mov	r2, r3
 800dd04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dd08:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dd0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dd10:	e841 2300 	strex	r3, r2, [r1]
 800dd14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dd16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d1e4      	bne.n	800dce6 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	3308      	adds	r3, #8
 800dd22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd26:	e853 3f00 	ldrex	r3, [r3]
 800dd2a:	623b      	str	r3, [r7, #32]
   return(result);
 800dd2c:	6a3b      	ldr	r3, [r7, #32]
 800dd2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dd32:	f023 0301 	bic.w	r3, r3, #1
 800dd36:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	3308      	adds	r3, #8
 800dd40:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800dd44:	633a      	str	r2, [r7, #48]	@ 0x30
 800dd46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dd4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd4c:	e841 2300 	strex	r3, r2, [r1]
 800dd50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dd52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d1e1      	bne.n	800dd1c <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2220      	movs	r2, #32
 800dd5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2200      	movs	r2, #0
 800dd64:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	e853 3f00 	ldrex	r3, [r3]
 800dd78:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	f023 0310 	bic.w	r3, r3, #16
 800dd80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	461a      	mov	r2, r3
 800dd8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800dd8e:	61fb      	str	r3, [r7, #28]
 800dd90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd92:	69b9      	ldr	r1, [r7, #24]
 800dd94:	69fa      	ldr	r2, [r7, #28]
 800dd96:	e841 2300 	strex	r3, r2, [r1]
 800dd9a:	617b      	str	r3, [r7, #20]
   return(result);
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d1e4      	bne.n	800dd6c <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2202      	movs	r2, #2
 800dda6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ddae:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800ddb2:	4611      	mov	r1, r2
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ddb8:	e069      	b.n	800de8e <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ddba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ddbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d010      	beq.n	800dde8 <HAL_UART_IRQHandler+0x5f4>
 800ddc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ddca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d00a      	beq.n	800dde8 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ddda:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dde6:	e055      	b.n	800de94 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dde8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ddec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d014      	beq.n	800de1e <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ddf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ddf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d105      	bne.n	800de0c <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800de00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800de04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d008      	beq.n	800de1e <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800de10:	2b00      	cmp	r3, #0
 800de12:	d03e      	beq.n	800de92 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	4798      	blx	r3
    }
    return;
 800de1c:	e039      	b.n	800de92 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800de1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de26:	2b00      	cmp	r3, #0
 800de28:	d009      	beq.n	800de3e <HAL_UART_IRQHandler+0x64a>
 800de2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de32:	2b00      	cmp	r3, #0
 800de34:	d003      	beq.n	800de3e <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f001 f84e 	bl	800eed8 <UART_EndTransmit_IT>
    return;
 800de3c:	e02a      	b.n	800de94 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800de3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800de46:	2b00      	cmp	r3, #0
 800de48:	d00b      	beq.n	800de62 <HAL_UART_IRQHandler+0x66e>
 800de4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de4e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800de52:	2b00      	cmp	r3, #0
 800de54:	d005      	beq.n	800de62 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de60:	e018      	b.n	800de94 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800de62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d012      	beq.n	800de94 <HAL_UART_IRQHandler+0x6a0>
 800de6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de72:	2b00      	cmp	r3, #0
 800de74:	da0e      	bge.n	800de94 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de80:	e008      	b.n	800de94 <HAL_UART_IRQHandler+0x6a0>
      return;
 800de82:	bf00      	nop
 800de84:	e006      	b.n	800de94 <HAL_UART_IRQHandler+0x6a0>
    return;
 800de86:	bf00      	nop
 800de88:	e004      	b.n	800de94 <HAL_UART_IRQHandler+0x6a0>
      return;
 800de8a:	bf00      	nop
 800de8c:	e002      	b.n	800de94 <HAL_UART_IRQHandler+0x6a0>
      return;
 800de8e:	bf00      	nop
 800de90:	e000      	b.n	800de94 <HAL_UART_IRQHandler+0x6a0>
    return;
 800de92:	bf00      	nop
  }
}
 800de94:	37e8      	adds	r7, #232	@ 0xe8
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	bf00      	nop

0800de9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b083      	sub	sp, #12
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dea4:	bf00      	nop
 800dea6:	370c      	adds	r7, #12
 800dea8:	46bd      	mov	sp, r7
 800deaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deae:	4770      	bx	lr

0800deb0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800deb0:	b480      	push	{r7}
 800deb2:	b083      	sub	sp, #12
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800deb8:	bf00      	nop
 800deba:	370c      	adds	r7, #12
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr

0800dec4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b083      	sub	sp, #12
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800decc:	bf00      	nop
 800dece:	370c      	adds	r7, #12
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr

0800ded8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ded8:	b480      	push	{r7}
 800deda:	b083      	sub	sp, #12
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dee0:	bf00      	nop
 800dee2:	370c      	adds	r7, #12
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr

0800deec <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800deec:	b480      	push	{r7}
 800deee:	b083      	sub	sp, #12
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800def4:	bf00      	nop
 800def6:	370c      	adds	r7, #12
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr

0800df00 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800df00:	b480      	push	{r7}
 800df02:	b083      	sub	sp, #12
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800df08:	bf00      	nop
 800df0a:	370c      	adds	r7, #12
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	4770      	bx	lr

0800df14 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800df14:	b480      	push	{r7}
 800df16:	b083      	sub	sp, #12
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800df1c:	bf00      	nop
 800df1e:	370c      	adds	r7, #12
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr

0800df28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800df28:	b480      	push	{r7}
 800df2a:	b083      	sub	sp, #12
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	460b      	mov	r3, r1
 800df32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800df34:	bf00      	nop
 800df36:	370c      	adds	r7, #12
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr

0800df40 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800df40:	b480      	push	{r7}
 800df42:	b083      	sub	sp, #12
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	4a09      	ldr	r2, [pc, #36]	@ (800df74 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800df50:	4293      	cmp	r3, r2
 800df52:	d009      	beq.n	800df68 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	695b      	ldr	r3, [r3, #20]
 800df5a:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	683a      	ldr	r2, [r7, #0]
 800df64:	430a      	orrs	r2, r1
 800df66:	615a      	str	r2, [r3, #20]
  }
}
 800df68:	bf00      	nop
 800df6a:	370c      	adds	r7, #12
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr
 800df74:	40008000 	.word	0x40008000

0800df78 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800df78:	b480      	push	{r7}
 800df7a:	b083      	sub	sp, #12
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	4a18      	ldr	r2, [pc, #96]	@ (800dfe8 <HAL_UART_EnableReceiverTimeout+0x70>)
 800df86:	4293      	cmp	r3, r2
 800df88:	d027      	beq.n	800dfda <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df90:	2b20      	cmp	r3, #32
 800df92:	d120      	bne.n	800dfd6 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d101      	bne.n	800dfa2 <HAL_UART_EnableReceiverTimeout+0x2a>
 800df9e:	2302      	movs	r3, #2
 800dfa0:	e01c      	b.n	800dfdc <HAL_UART_EnableReceiverTimeout+0x64>
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2224      	movs	r2, #36	@ 0x24
 800dfae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	685a      	ldr	r2, [r3, #4]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800dfc0:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2220      	movs	r2, #32
 800dfc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	e002      	b.n	800dfdc <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800dfd6:	2302      	movs	r3, #2
 800dfd8:	e000      	b.n	800dfdc <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800dfda:	2301      	movs	r3, #1
  }
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	370c      	adds	r7, #12
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe6:	4770      	bx	lr
 800dfe8:	40008000 	.word	0x40008000

0800dfec <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b083      	sub	sp, #12
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	370c      	adds	r7, #12
 800dffe:	46bd      	mov	sp, r7
 800e000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e004:	4770      	bx	lr
	...

0800e008 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800e008:	b480      	push	{r7}
 800e00a:	b083      	sub	sp, #12
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	4a1a      	ldr	r2, [pc, #104]	@ (800e07c <UART_InitCallbacksToDefault+0x74>)
 800e014:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	4a19      	ldr	r2, [pc, #100]	@ (800e080 <UART_InitCallbacksToDefault+0x78>)
 800e01c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	4a18      	ldr	r2, [pc, #96]	@ (800e084 <UART_InitCallbacksToDefault+0x7c>)
 800e024:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	4a17      	ldr	r2, [pc, #92]	@ (800e088 <UART_InitCallbacksToDefault+0x80>)
 800e02c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	4a16      	ldr	r2, [pc, #88]	@ (800e08c <UART_InitCallbacksToDefault+0x84>)
 800e034:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	4a15      	ldr	r2, [pc, #84]	@ (800e090 <UART_InitCallbacksToDefault+0x88>)
 800e03c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	4a14      	ldr	r2, [pc, #80]	@ (800e094 <UART_InitCallbacksToDefault+0x8c>)
 800e044:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	4a13      	ldr	r2, [pc, #76]	@ (800e098 <UART_InitCallbacksToDefault+0x90>)
 800e04c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	4a12      	ldr	r2, [pc, #72]	@ (800e09c <UART_InitCallbacksToDefault+0x94>)
 800e054:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	4a11      	ldr	r2, [pc, #68]	@ (800e0a0 <UART_InitCallbacksToDefault+0x98>)
 800e05c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	4a10      	ldr	r2, [pc, #64]	@ (800e0a4 <UART_InitCallbacksToDefault+0x9c>)
 800e064:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	4a0f      	ldr	r2, [pc, #60]	@ (800e0a8 <UART_InitCallbacksToDefault+0xa0>)
 800e06c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800e070:	bf00      	nop
 800e072:	370c      	adds	r7, #12
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr
 800e07c:	0800deb1 	.word	0x0800deb1
 800e080:	0800de9d 	.word	0x0800de9d
 800e084:	0800dec5 	.word	0x0800dec5
 800e088:	0800603d 	.word	0x0800603d
 800e08c:	0800ded9 	.word	0x0800ded9
 800e090:	0800deed 	.word	0x0800deed
 800e094:	0800df01 	.word	0x0800df01
 800e098:	0800df15 	.word	0x0800df15
 800e09c:	0800ef33 	.word	0x0800ef33
 800e0a0:	0800ef47 	.word	0x0800ef47
 800e0a4:	0800ef5b 	.word	0x0800ef5b
 800e0a8:	0800df29 	.word	0x0800df29

0800e0ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e0ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e0b0:	b08c      	sub	sp, #48	@ 0x30
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	689a      	ldr	r2, [r3, #8]
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	691b      	ldr	r3, [r3, #16]
 800e0c4:	431a      	orrs	r2, r3
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	695b      	ldr	r3, [r3, #20]
 800e0ca:	431a      	orrs	r2, r3
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	69db      	ldr	r3, [r3, #28]
 800e0d0:	4313      	orrs	r3, r2
 800e0d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	681a      	ldr	r2, [r3, #0]
 800e0da:	4baa      	ldr	r3, [pc, #680]	@ (800e384 <UART_SetConfig+0x2d8>)
 800e0dc:	4013      	ands	r3, r2
 800e0de:	697a      	ldr	r2, [r7, #20]
 800e0e0:	6812      	ldr	r2, [r2, #0]
 800e0e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e0e4:	430b      	orrs	r3, r1
 800e0e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	685b      	ldr	r3, [r3, #4]
 800e0ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	68da      	ldr	r2, [r3, #12]
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	430a      	orrs	r2, r1
 800e0fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	699b      	ldr	r3, [r3, #24]
 800e102:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	4a9f      	ldr	r2, [pc, #636]	@ (800e388 <UART_SetConfig+0x2dc>)
 800e10a:	4293      	cmp	r3, r2
 800e10c:	d004      	beq.n	800e118 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	6a1b      	ldr	r3, [r3, #32]
 800e112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e114:	4313      	orrs	r3, r2
 800e116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	689b      	ldr	r3, [r3, #8]
 800e11e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800e122:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800e126:	697a      	ldr	r2, [r7, #20]
 800e128:	6812      	ldr	r2, [r2, #0]
 800e12a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e12c:	430b      	orrs	r3, r1
 800e12e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e136:	f023 010f 	bic.w	r1, r3, #15
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	430a      	orrs	r2, r1
 800e144:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	4a90      	ldr	r2, [pc, #576]	@ (800e38c <UART_SetConfig+0x2e0>)
 800e14c:	4293      	cmp	r3, r2
 800e14e:	d125      	bne.n	800e19c <UART_SetConfig+0xf0>
 800e150:	4b8f      	ldr	r3, [pc, #572]	@ (800e390 <UART_SetConfig+0x2e4>)
 800e152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e156:	f003 0303 	and.w	r3, r3, #3
 800e15a:	2b03      	cmp	r3, #3
 800e15c:	d81a      	bhi.n	800e194 <UART_SetConfig+0xe8>
 800e15e:	a201      	add	r2, pc, #4	@ (adr r2, 800e164 <UART_SetConfig+0xb8>)
 800e160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e164:	0800e175 	.word	0x0800e175
 800e168:	0800e185 	.word	0x0800e185
 800e16c:	0800e17d 	.word	0x0800e17d
 800e170:	0800e18d 	.word	0x0800e18d
 800e174:	2301      	movs	r3, #1
 800e176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e17a:	e116      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e17c:	2302      	movs	r3, #2
 800e17e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e182:	e112      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e184:	2304      	movs	r3, #4
 800e186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e18a:	e10e      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e18c:	2308      	movs	r3, #8
 800e18e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e192:	e10a      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e194:	2310      	movs	r3, #16
 800e196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e19a:	e106      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	4a7c      	ldr	r2, [pc, #496]	@ (800e394 <UART_SetConfig+0x2e8>)
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d138      	bne.n	800e218 <UART_SetConfig+0x16c>
 800e1a6:	4b7a      	ldr	r3, [pc, #488]	@ (800e390 <UART_SetConfig+0x2e4>)
 800e1a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e1ac:	f003 030c 	and.w	r3, r3, #12
 800e1b0:	2b0c      	cmp	r3, #12
 800e1b2:	d82d      	bhi.n	800e210 <UART_SetConfig+0x164>
 800e1b4:	a201      	add	r2, pc, #4	@ (adr r2, 800e1bc <UART_SetConfig+0x110>)
 800e1b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1ba:	bf00      	nop
 800e1bc:	0800e1f1 	.word	0x0800e1f1
 800e1c0:	0800e211 	.word	0x0800e211
 800e1c4:	0800e211 	.word	0x0800e211
 800e1c8:	0800e211 	.word	0x0800e211
 800e1cc:	0800e201 	.word	0x0800e201
 800e1d0:	0800e211 	.word	0x0800e211
 800e1d4:	0800e211 	.word	0x0800e211
 800e1d8:	0800e211 	.word	0x0800e211
 800e1dc:	0800e1f9 	.word	0x0800e1f9
 800e1e0:	0800e211 	.word	0x0800e211
 800e1e4:	0800e211 	.word	0x0800e211
 800e1e8:	0800e211 	.word	0x0800e211
 800e1ec:	0800e209 	.word	0x0800e209
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e1f6:	e0d8      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e1f8:	2302      	movs	r3, #2
 800e1fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e1fe:	e0d4      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e200:	2304      	movs	r3, #4
 800e202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e206:	e0d0      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e208:	2308      	movs	r3, #8
 800e20a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e20e:	e0cc      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e210:	2310      	movs	r3, #16
 800e212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e216:	e0c8      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4a5e      	ldr	r2, [pc, #376]	@ (800e398 <UART_SetConfig+0x2ec>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d125      	bne.n	800e26e <UART_SetConfig+0x1c2>
 800e222:	4b5b      	ldr	r3, [pc, #364]	@ (800e390 <UART_SetConfig+0x2e4>)
 800e224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e228:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800e22c:	2b30      	cmp	r3, #48	@ 0x30
 800e22e:	d016      	beq.n	800e25e <UART_SetConfig+0x1b2>
 800e230:	2b30      	cmp	r3, #48	@ 0x30
 800e232:	d818      	bhi.n	800e266 <UART_SetConfig+0x1ba>
 800e234:	2b20      	cmp	r3, #32
 800e236:	d00a      	beq.n	800e24e <UART_SetConfig+0x1a2>
 800e238:	2b20      	cmp	r3, #32
 800e23a:	d814      	bhi.n	800e266 <UART_SetConfig+0x1ba>
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d002      	beq.n	800e246 <UART_SetConfig+0x19a>
 800e240:	2b10      	cmp	r3, #16
 800e242:	d008      	beq.n	800e256 <UART_SetConfig+0x1aa>
 800e244:	e00f      	b.n	800e266 <UART_SetConfig+0x1ba>
 800e246:	2300      	movs	r3, #0
 800e248:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e24c:	e0ad      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e24e:	2302      	movs	r3, #2
 800e250:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e254:	e0a9      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e256:	2304      	movs	r3, #4
 800e258:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e25c:	e0a5      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e25e:	2308      	movs	r3, #8
 800e260:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e264:	e0a1      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e266:	2310      	movs	r3, #16
 800e268:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e26c:	e09d      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	4a4a      	ldr	r2, [pc, #296]	@ (800e39c <UART_SetConfig+0x2f0>)
 800e274:	4293      	cmp	r3, r2
 800e276:	d125      	bne.n	800e2c4 <UART_SetConfig+0x218>
 800e278:	4b45      	ldr	r3, [pc, #276]	@ (800e390 <UART_SetConfig+0x2e4>)
 800e27a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e27e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800e282:	2bc0      	cmp	r3, #192	@ 0xc0
 800e284:	d016      	beq.n	800e2b4 <UART_SetConfig+0x208>
 800e286:	2bc0      	cmp	r3, #192	@ 0xc0
 800e288:	d818      	bhi.n	800e2bc <UART_SetConfig+0x210>
 800e28a:	2b80      	cmp	r3, #128	@ 0x80
 800e28c:	d00a      	beq.n	800e2a4 <UART_SetConfig+0x1f8>
 800e28e:	2b80      	cmp	r3, #128	@ 0x80
 800e290:	d814      	bhi.n	800e2bc <UART_SetConfig+0x210>
 800e292:	2b00      	cmp	r3, #0
 800e294:	d002      	beq.n	800e29c <UART_SetConfig+0x1f0>
 800e296:	2b40      	cmp	r3, #64	@ 0x40
 800e298:	d008      	beq.n	800e2ac <UART_SetConfig+0x200>
 800e29a:	e00f      	b.n	800e2bc <UART_SetConfig+0x210>
 800e29c:	2300      	movs	r3, #0
 800e29e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e2a2:	e082      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e2a4:	2302      	movs	r3, #2
 800e2a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e2aa:	e07e      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e2ac:	2304      	movs	r3, #4
 800e2ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e2b2:	e07a      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e2b4:	2308      	movs	r3, #8
 800e2b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e2ba:	e076      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e2bc:	2310      	movs	r3, #16
 800e2be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e2c2:	e072      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	4a35      	ldr	r2, [pc, #212]	@ (800e3a0 <UART_SetConfig+0x2f4>)
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d12a      	bne.n	800e324 <UART_SetConfig+0x278>
 800e2ce:	4b30      	ldr	r3, [pc, #192]	@ (800e390 <UART_SetConfig+0x2e4>)
 800e2d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e2d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e2dc:	d01a      	beq.n	800e314 <UART_SetConfig+0x268>
 800e2de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e2e2:	d81b      	bhi.n	800e31c <UART_SetConfig+0x270>
 800e2e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e2e8:	d00c      	beq.n	800e304 <UART_SetConfig+0x258>
 800e2ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e2ee:	d815      	bhi.n	800e31c <UART_SetConfig+0x270>
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d003      	beq.n	800e2fc <UART_SetConfig+0x250>
 800e2f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e2f8:	d008      	beq.n	800e30c <UART_SetConfig+0x260>
 800e2fa:	e00f      	b.n	800e31c <UART_SetConfig+0x270>
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e302:	e052      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e304:	2302      	movs	r3, #2
 800e306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e30a:	e04e      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e30c:	2304      	movs	r3, #4
 800e30e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e312:	e04a      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e314:	2308      	movs	r3, #8
 800e316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e31a:	e046      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e31c:	2310      	movs	r3, #16
 800e31e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e322:	e042      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4a17      	ldr	r2, [pc, #92]	@ (800e388 <UART_SetConfig+0x2dc>)
 800e32a:	4293      	cmp	r3, r2
 800e32c:	d13a      	bne.n	800e3a4 <UART_SetConfig+0x2f8>
 800e32e:	4b18      	ldr	r3, [pc, #96]	@ (800e390 <UART_SetConfig+0x2e4>)
 800e330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e334:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e338:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e33c:	d01a      	beq.n	800e374 <UART_SetConfig+0x2c8>
 800e33e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e342:	d81b      	bhi.n	800e37c <UART_SetConfig+0x2d0>
 800e344:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e348:	d00c      	beq.n	800e364 <UART_SetConfig+0x2b8>
 800e34a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e34e:	d815      	bhi.n	800e37c <UART_SetConfig+0x2d0>
 800e350:	2b00      	cmp	r3, #0
 800e352:	d003      	beq.n	800e35c <UART_SetConfig+0x2b0>
 800e354:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e358:	d008      	beq.n	800e36c <UART_SetConfig+0x2c0>
 800e35a:	e00f      	b.n	800e37c <UART_SetConfig+0x2d0>
 800e35c:	2300      	movs	r3, #0
 800e35e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e362:	e022      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e364:	2302      	movs	r3, #2
 800e366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e36a:	e01e      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e36c:	2304      	movs	r3, #4
 800e36e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e372:	e01a      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e374:	2308      	movs	r3, #8
 800e376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e37a:	e016      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e37c:	2310      	movs	r3, #16
 800e37e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e382:	e012      	b.n	800e3aa <UART_SetConfig+0x2fe>
 800e384:	cfff69f3 	.word	0xcfff69f3
 800e388:	40008000 	.word	0x40008000
 800e38c:	40013800 	.word	0x40013800
 800e390:	40021000 	.word	0x40021000
 800e394:	40004400 	.word	0x40004400
 800e398:	40004800 	.word	0x40004800
 800e39c:	40004c00 	.word	0x40004c00
 800e3a0:	40005000 	.word	0x40005000
 800e3a4:	2310      	movs	r3, #16
 800e3a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e3aa:	697b      	ldr	r3, [r7, #20]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	4aae      	ldr	r2, [pc, #696]	@ (800e668 <UART_SetConfig+0x5bc>)
 800e3b0:	4293      	cmp	r3, r2
 800e3b2:	f040 8097 	bne.w	800e4e4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e3b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e3ba:	2b08      	cmp	r3, #8
 800e3bc:	d823      	bhi.n	800e406 <UART_SetConfig+0x35a>
 800e3be:	a201      	add	r2, pc, #4	@ (adr r2, 800e3c4 <UART_SetConfig+0x318>)
 800e3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3c4:	0800e3e9 	.word	0x0800e3e9
 800e3c8:	0800e407 	.word	0x0800e407
 800e3cc:	0800e3f1 	.word	0x0800e3f1
 800e3d0:	0800e407 	.word	0x0800e407
 800e3d4:	0800e3f7 	.word	0x0800e3f7
 800e3d8:	0800e407 	.word	0x0800e407
 800e3dc:	0800e407 	.word	0x0800e407
 800e3e0:	0800e407 	.word	0x0800e407
 800e3e4:	0800e3ff 	.word	0x0800e3ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e3e8:	f7fc fcf6 	bl	800add8 <HAL_RCC_GetPCLK1Freq>
 800e3ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e3ee:	e010      	b.n	800e412 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e3f0:	4b9e      	ldr	r3, [pc, #632]	@ (800e66c <UART_SetConfig+0x5c0>)
 800e3f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e3f4:	e00d      	b.n	800e412 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e3f6:	f7fc fc81 	bl	800acfc <HAL_RCC_GetSysClockFreq>
 800e3fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e3fc:	e009      	b.n	800e412 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e3fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e402:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e404:	e005      	b.n	800e412 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800e406:	2300      	movs	r3, #0
 800e408:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800e40a:	2301      	movs	r3, #1
 800e40c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800e410:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e414:	2b00      	cmp	r3, #0
 800e416:	f000 8130 	beq.w	800e67a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e41e:	4a94      	ldr	r2, [pc, #592]	@ (800e670 <UART_SetConfig+0x5c4>)
 800e420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e424:	461a      	mov	r2, r3
 800e426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e428:	fbb3 f3f2 	udiv	r3, r3, r2
 800e42c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	685a      	ldr	r2, [r3, #4]
 800e432:	4613      	mov	r3, r2
 800e434:	005b      	lsls	r3, r3, #1
 800e436:	4413      	add	r3, r2
 800e438:	69ba      	ldr	r2, [r7, #24]
 800e43a:	429a      	cmp	r2, r3
 800e43c:	d305      	bcc.n	800e44a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	685b      	ldr	r3, [r3, #4]
 800e442:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e444:	69ba      	ldr	r2, [r7, #24]
 800e446:	429a      	cmp	r2, r3
 800e448:	d903      	bls.n	800e452 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800e44a:	2301      	movs	r3, #1
 800e44c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800e450:	e113      	b.n	800e67a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e454:	2200      	movs	r2, #0
 800e456:	60bb      	str	r3, [r7, #8]
 800e458:	60fa      	str	r2, [r7, #12]
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e45e:	4a84      	ldr	r2, [pc, #528]	@ (800e670 <UART_SetConfig+0x5c4>)
 800e460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e464:	b29b      	uxth	r3, r3
 800e466:	2200      	movs	r2, #0
 800e468:	603b      	str	r3, [r7, #0]
 800e46a:	607a      	str	r2, [r7, #4]
 800e46c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e470:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e474:	f7f2 fbbe 	bl	8000bf4 <__aeabi_uldivmod>
 800e478:	4602      	mov	r2, r0
 800e47a:	460b      	mov	r3, r1
 800e47c:	4610      	mov	r0, r2
 800e47e:	4619      	mov	r1, r3
 800e480:	f04f 0200 	mov.w	r2, #0
 800e484:	f04f 0300 	mov.w	r3, #0
 800e488:	020b      	lsls	r3, r1, #8
 800e48a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e48e:	0202      	lsls	r2, r0, #8
 800e490:	6979      	ldr	r1, [r7, #20]
 800e492:	6849      	ldr	r1, [r1, #4]
 800e494:	0849      	lsrs	r1, r1, #1
 800e496:	2000      	movs	r0, #0
 800e498:	460c      	mov	r4, r1
 800e49a:	4605      	mov	r5, r0
 800e49c:	eb12 0804 	adds.w	r8, r2, r4
 800e4a0:	eb43 0905 	adc.w	r9, r3, r5
 800e4a4:	697b      	ldr	r3, [r7, #20]
 800e4a6:	685b      	ldr	r3, [r3, #4]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	469a      	mov	sl, r3
 800e4ac:	4693      	mov	fp, r2
 800e4ae:	4652      	mov	r2, sl
 800e4b0:	465b      	mov	r3, fp
 800e4b2:	4640      	mov	r0, r8
 800e4b4:	4649      	mov	r1, r9
 800e4b6:	f7f2 fb9d 	bl	8000bf4 <__aeabi_uldivmod>
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	460b      	mov	r3, r1
 800e4be:	4613      	mov	r3, r2
 800e4c0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e4c2:	6a3b      	ldr	r3, [r7, #32]
 800e4c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e4c8:	d308      	bcc.n	800e4dc <UART_SetConfig+0x430>
 800e4ca:	6a3b      	ldr	r3, [r7, #32]
 800e4cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e4d0:	d204      	bcs.n	800e4dc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	6a3a      	ldr	r2, [r7, #32]
 800e4d8:	60da      	str	r2, [r3, #12]
 800e4da:	e0ce      	b.n	800e67a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800e4dc:	2301      	movs	r3, #1
 800e4de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800e4e2:	e0ca      	b.n	800e67a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	69db      	ldr	r3, [r3, #28]
 800e4e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e4ec:	d166      	bne.n	800e5bc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800e4ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e4f2:	2b08      	cmp	r3, #8
 800e4f4:	d827      	bhi.n	800e546 <UART_SetConfig+0x49a>
 800e4f6:	a201      	add	r2, pc, #4	@ (adr r2, 800e4fc <UART_SetConfig+0x450>)
 800e4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4fc:	0800e521 	.word	0x0800e521
 800e500:	0800e529 	.word	0x0800e529
 800e504:	0800e531 	.word	0x0800e531
 800e508:	0800e547 	.word	0x0800e547
 800e50c:	0800e537 	.word	0x0800e537
 800e510:	0800e547 	.word	0x0800e547
 800e514:	0800e547 	.word	0x0800e547
 800e518:	0800e547 	.word	0x0800e547
 800e51c:	0800e53f 	.word	0x0800e53f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e520:	f7fc fc5a 	bl	800add8 <HAL_RCC_GetPCLK1Freq>
 800e524:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e526:	e014      	b.n	800e552 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e528:	f7fc fc6c 	bl	800ae04 <HAL_RCC_GetPCLK2Freq>
 800e52c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e52e:	e010      	b.n	800e552 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e530:	4b4e      	ldr	r3, [pc, #312]	@ (800e66c <UART_SetConfig+0x5c0>)
 800e532:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e534:	e00d      	b.n	800e552 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e536:	f7fc fbe1 	bl	800acfc <HAL_RCC_GetSysClockFreq>
 800e53a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e53c:	e009      	b.n	800e552 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e53e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e542:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e544:	e005      	b.n	800e552 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800e546:	2300      	movs	r3, #0
 800e548:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800e54a:	2301      	movs	r3, #1
 800e54c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800e550:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e554:	2b00      	cmp	r3, #0
 800e556:	f000 8090 	beq.w	800e67a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e55e:	4a44      	ldr	r2, [pc, #272]	@ (800e670 <UART_SetConfig+0x5c4>)
 800e560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e564:	461a      	mov	r2, r3
 800e566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e568:	fbb3 f3f2 	udiv	r3, r3, r2
 800e56c:	005a      	lsls	r2, r3, #1
 800e56e:	697b      	ldr	r3, [r7, #20]
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	085b      	lsrs	r3, r3, #1
 800e574:	441a      	add	r2, r3
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e57e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e580:	6a3b      	ldr	r3, [r7, #32]
 800e582:	2b0f      	cmp	r3, #15
 800e584:	d916      	bls.n	800e5b4 <UART_SetConfig+0x508>
 800e586:	6a3b      	ldr	r3, [r7, #32]
 800e588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e58c:	d212      	bcs.n	800e5b4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e58e:	6a3b      	ldr	r3, [r7, #32]
 800e590:	b29b      	uxth	r3, r3
 800e592:	f023 030f 	bic.w	r3, r3, #15
 800e596:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e598:	6a3b      	ldr	r3, [r7, #32]
 800e59a:	085b      	lsrs	r3, r3, #1
 800e59c:	b29b      	uxth	r3, r3
 800e59e:	f003 0307 	and.w	r3, r3, #7
 800e5a2:	b29a      	uxth	r2, r3
 800e5a4:	8bfb      	ldrh	r3, [r7, #30]
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	8bfa      	ldrh	r2, [r7, #30]
 800e5b0:	60da      	str	r2, [r3, #12]
 800e5b2:	e062      	b.n	800e67a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800e5ba:	e05e      	b.n	800e67a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e5bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e5c0:	2b08      	cmp	r3, #8
 800e5c2:	d828      	bhi.n	800e616 <UART_SetConfig+0x56a>
 800e5c4:	a201      	add	r2, pc, #4	@ (adr r2, 800e5cc <UART_SetConfig+0x520>)
 800e5c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5ca:	bf00      	nop
 800e5cc:	0800e5f1 	.word	0x0800e5f1
 800e5d0:	0800e5f9 	.word	0x0800e5f9
 800e5d4:	0800e601 	.word	0x0800e601
 800e5d8:	0800e617 	.word	0x0800e617
 800e5dc:	0800e607 	.word	0x0800e607
 800e5e0:	0800e617 	.word	0x0800e617
 800e5e4:	0800e617 	.word	0x0800e617
 800e5e8:	0800e617 	.word	0x0800e617
 800e5ec:	0800e60f 	.word	0x0800e60f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e5f0:	f7fc fbf2 	bl	800add8 <HAL_RCC_GetPCLK1Freq>
 800e5f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e5f6:	e014      	b.n	800e622 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e5f8:	f7fc fc04 	bl	800ae04 <HAL_RCC_GetPCLK2Freq>
 800e5fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e5fe:	e010      	b.n	800e622 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e600:	4b1a      	ldr	r3, [pc, #104]	@ (800e66c <UART_SetConfig+0x5c0>)
 800e602:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e604:	e00d      	b.n	800e622 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e606:	f7fc fb79 	bl	800acfc <HAL_RCC_GetSysClockFreq>
 800e60a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e60c:	e009      	b.n	800e622 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e60e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e612:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e614:	e005      	b.n	800e622 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800e616:	2300      	movs	r3, #0
 800e618:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800e61a:	2301      	movs	r3, #1
 800e61c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800e620:	bf00      	nop
    }

    if (pclk != 0U)
 800e622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e624:	2b00      	cmp	r3, #0
 800e626:	d028      	beq.n	800e67a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e628:	697b      	ldr	r3, [r7, #20]
 800e62a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e62c:	4a10      	ldr	r2, [pc, #64]	@ (800e670 <UART_SetConfig+0x5c4>)
 800e62e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e632:	461a      	mov	r2, r3
 800e634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e636:	fbb3 f2f2 	udiv	r2, r3, r2
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	085b      	lsrs	r3, r3, #1
 800e640:	441a      	add	r2, r3
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	fbb2 f3f3 	udiv	r3, r2, r3
 800e64a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e64c:	6a3b      	ldr	r3, [r7, #32]
 800e64e:	2b0f      	cmp	r3, #15
 800e650:	d910      	bls.n	800e674 <UART_SetConfig+0x5c8>
 800e652:	6a3b      	ldr	r3, [r7, #32]
 800e654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e658:	d20c      	bcs.n	800e674 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e65a:	6a3b      	ldr	r3, [r7, #32]
 800e65c:	b29a      	uxth	r2, r3
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	60da      	str	r2, [r3, #12]
 800e664:	e009      	b.n	800e67a <UART_SetConfig+0x5ce>
 800e666:	bf00      	nop
 800e668:	40008000 	.word	0x40008000
 800e66c:	00f42400 	.word	0x00f42400
 800e670:	080113f0 	.word	0x080113f0
      }
      else
      {
        ret = HAL_ERROR;
 800e674:	2301      	movs	r3, #1
 800e676:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	2201      	movs	r2, #1
 800e67e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	2201      	movs	r2, #1
 800e686:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	2200      	movs	r2, #0
 800e68e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	2200      	movs	r2, #0
 800e694:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e696:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3730      	adds	r7, #48	@ 0x30
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e6a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6b0:	f003 0308 	and.w	r3, r3, #8
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d00a      	beq.n	800e6ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	685b      	ldr	r3, [r3, #4]
 800e6be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	430a      	orrs	r2, r1
 800e6cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6d2:	f003 0301 	and.w	r3, r3, #1
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d00a      	beq.n	800e6f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	430a      	orrs	r2, r1
 800e6ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6f4:	f003 0302 	and.w	r3, r3, #2
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d00a      	beq.n	800e712 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	685b      	ldr	r3, [r3, #4]
 800e702:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	430a      	orrs	r2, r1
 800e710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e716:	f003 0304 	and.w	r3, r3, #4
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d00a      	beq.n	800e734 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	685b      	ldr	r3, [r3, #4]
 800e724:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	430a      	orrs	r2, r1
 800e732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e738:	f003 0310 	and.w	r3, r3, #16
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d00a      	beq.n	800e756 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	689b      	ldr	r3, [r3, #8]
 800e746:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	430a      	orrs	r2, r1
 800e754:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e75a:	f003 0320 	and.w	r3, r3, #32
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d00a      	beq.n	800e778 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	689b      	ldr	r3, [r3, #8]
 800e768:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	430a      	orrs	r2, r1
 800e776:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e77c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e780:	2b00      	cmp	r3, #0
 800e782:	d01a      	beq.n	800e7ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	685b      	ldr	r3, [r3, #4]
 800e78a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	430a      	orrs	r2, r1
 800e798:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e79e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e7a2:	d10a      	bne.n	800e7ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	685b      	ldr	r3, [r3, #4]
 800e7aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	430a      	orrs	r2, r1
 800e7b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d00a      	beq.n	800e7dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	685b      	ldr	r3, [r3, #4]
 800e7cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	430a      	orrs	r2, r1
 800e7da:	605a      	str	r2, [r3, #4]
  }
}
 800e7dc:	bf00      	nop
 800e7de:	370c      	adds	r7, #12
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e6:	4770      	bx	lr

0800e7e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b098      	sub	sp, #96	@ 0x60
 800e7ec:	af02      	add	r7, sp, #8
 800e7ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e7f8:	f7f9 faee 	bl	8007dd8 <HAL_GetTick>
 800e7fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	f003 0308 	and.w	r3, r3, #8
 800e808:	2b08      	cmp	r3, #8
 800e80a:	d12f      	bne.n	800e86c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e80c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e810:	9300      	str	r3, [sp, #0]
 800e812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e814:	2200      	movs	r2, #0
 800e816:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f000 f88e 	bl	800e93c <UART_WaitOnFlagUntilTimeout>
 800e820:	4603      	mov	r3, r0
 800e822:	2b00      	cmp	r3, #0
 800e824:	d022      	beq.n	800e86c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e82e:	e853 3f00 	ldrex	r3, [r3]
 800e832:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e836:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e83a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	461a      	mov	r2, r3
 800e842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e844:	647b      	str	r3, [r7, #68]	@ 0x44
 800e846:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e848:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e84a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e84c:	e841 2300 	strex	r3, r2, [r1]
 800e850:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e854:	2b00      	cmp	r3, #0
 800e856:	d1e6      	bne.n	800e826 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2220      	movs	r2, #32
 800e85c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2200      	movs	r2, #0
 800e864:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e868:	2303      	movs	r3, #3
 800e86a:	e063      	b.n	800e934 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	f003 0304 	and.w	r3, r3, #4
 800e876:	2b04      	cmp	r3, #4
 800e878:	d149      	bne.n	800e90e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e87a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e87e:	9300      	str	r3, [sp, #0]
 800e880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e882:	2200      	movs	r2, #0
 800e884:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f000 f857 	bl	800e93c <UART_WaitOnFlagUntilTimeout>
 800e88e:	4603      	mov	r3, r0
 800e890:	2b00      	cmp	r3, #0
 800e892:	d03c      	beq.n	800e90e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e89c:	e853 3f00 	ldrex	r3, [r3]
 800e8a0:	623b      	str	r3, [r7, #32]
   return(result);
 800e8a2:	6a3b      	ldr	r3, [r7, #32]
 800e8a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e8a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	461a      	mov	r2, r3
 800e8b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8b2:	633b      	str	r3, [r7, #48]	@ 0x30
 800e8b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e8b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e8ba:	e841 2300 	strex	r3, r2, [r1]
 800e8be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d1e6      	bne.n	800e894 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	3308      	adds	r3, #8
 800e8cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	e853 3f00 	ldrex	r3, [r3]
 800e8d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	f023 0301 	bic.w	r3, r3, #1
 800e8dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	3308      	adds	r3, #8
 800e8e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e8e6:	61fa      	str	r2, [r7, #28]
 800e8e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ea:	69b9      	ldr	r1, [r7, #24]
 800e8ec:	69fa      	ldr	r2, [r7, #28]
 800e8ee:	e841 2300 	strex	r3, r2, [r1]
 800e8f2:	617b      	str	r3, [r7, #20]
   return(result);
 800e8f4:	697b      	ldr	r3, [r7, #20]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d1e5      	bne.n	800e8c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2220      	movs	r2, #32
 800e8fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2200      	movs	r2, #0
 800e906:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e90a:	2303      	movs	r3, #3
 800e90c:	e012      	b.n	800e934 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2220      	movs	r2, #32
 800e912:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2220      	movs	r2, #32
 800e91a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2200      	movs	r2, #0
 800e922:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2200      	movs	r2, #0
 800e928:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2200      	movs	r2, #0
 800e92e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e932:	2300      	movs	r3, #0
}
 800e934:	4618      	mov	r0, r3
 800e936:	3758      	adds	r7, #88	@ 0x58
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}

0800e93c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b084      	sub	sp, #16
 800e940:	af00      	add	r7, sp, #0
 800e942:	60f8      	str	r0, [r7, #12]
 800e944:	60b9      	str	r1, [r7, #8]
 800e946:	603b      	str	r3, [r7, #0]
 800e948:	4613      	mov	r3, r2
 800e94a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e94c:	e04f      	b.n	800e9ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e94e:	69bb      	ldr	r3, [r7, #24]
 800e950:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e954:	d04b      	beq.n	800e9ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e956:	f7f9 fa3f 	bl	8007dd8 <HAL_GetTick>
 800e95a:	4602      	mov	r2, r0
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	1ad3      	subs	r3, r2, r3
 800e960:	69ba      	ldr	r2, [r7, #24]
 800e962:	429a      	cmp	r2, r3
 800e964:	d302      	bcc.n	800e96c <UART_WaitOnFlagUntilTimeout+0x30>
 800e966:	69bb      	ldr	r3, [r7, #24]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d101      	bne.n	800e970 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e96c:	2303      	movs	r3, #3
 800e96e:	e04e      	b.n	800ea0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	f003 0304 	and.w	r3, r3, #4
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d037      	beq.n	800e9ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	2b80      	cmp	r3, #128	@ 0x80
 800e982:	d034      	beq.n	800e9ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	2b40      	cmp	r3, #64	@ 0x40
 800e988:	d031      	beq.n	800e9ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	69db      	ldr	r3, [r3, #28]
 800e990:	f003 0308 	and.w	r3, r3, #8
 800e994:	2b08      	cmp	r3, #8
 800e996:	d110      	bne.n	800e9ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	2208      	movs	r2, #8
 800e99e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e9a0:	68f8      	ldr	r0, [r7, #12]
 800e9a2:	f000 f920 	bl	800ebe6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	2208      	movs	r2, #8
 800e9aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	e029      	b.n	800ea0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	69db      	ldr	r3, [r3, #28]
 800e9c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e9c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e9c8:	d111      	bne.n	800e9ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e9d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e9d4:	68f8      	ldr	r0, [r7, #12]
 800e9d6:	f000 f906 	bl	800ebe6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	2220      	movs	r2, #32
 800e9de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e9ea:	2303      	movs	r3, #3
 800e9ec:	e00f      	b.n	800ea0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	69da      	ldr	r2, [r3, #28]
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	4013      	ands	r3, r2
 800e9f8:	68ba      	ldr	r2, [r7, #8]
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	bf0c      	ite	eq
 800e9fe:	2301      	moveq	r3, #1
 800ea00:	2300      	movne	r3, #0
 800ea02:	b2db      	uxtb	r3, r3
 800ea04:	461a      	mov	r2, r3
 800ea06:	79fb      	ldrb	r3, [r7, #7]
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d0a0      	beq.n	800e94e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ea0c:	2300      	movs	r3, #0
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	3710      	adds	r7, #16
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}
	...

0800ea18 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b096      	sub	sp, #88	@ 0x58
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	60f8      	str	r0, [r7, #12]
 800ea20:	60b9      	str	r1, [r7, #8]
 800ea22:	4613      	mov	r3, r2
 800ea24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	68ba      	ldr	r2, [r7, #8]
 800ea2a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	88fa      	ldrh	r2, [r7, #6]
 800ea30:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	2200      	movs	r2, #0
 800ea38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	2222      	movs	r2, #34	@ 0x22
 800ea40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d02d      	beq.n	800eaaa <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea54:	4a40      	ldr	r2, [pc, #256]	@ (800eb58 <UART_Start_Receive_DMA+0x140>)
 800ea56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea5e:	4a3f      	ldr	r2, [pc, #252]	@ (800eb5c <UART_Start_Receive_DMA+0x144>)
 800ea60:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea68:	4a3d      	ldr	r2, [pc, #244]	@ (800eb60 <UART_Start_Receive_DMA+0x148>)
 800ea6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea72:	2200      	movs	r2, #0
 800ea74:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	3324      	adds	r3, #36	@ 0x24
 800ea82:	4619      	mov	r1, r3
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea88:	461a      	mov	r2, r3
 800ea8a:	88fb      	ldrh	r3, [r7, #6]
 800ea8c:	f7fa ffe0 	bl	8009a50 <HAL_DMA_Start_IT>
 800ea90:	4603      	mov	r3, r0
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d009      	beq.n	800eaaa <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	2210      	movs	r2, #16
 800ea9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	2220      	movs	r2, #32
 800eaa2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	e051      	b.n	800eb4e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	691b      	ldr	r3, [r3, #16]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d018      	beq.n	800eae4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eaba:	e853 3f00 	ldrex	r3, [r3]
 800eabe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eac2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eac6:	657b      	str	r3, [r7, #84]	@ 0x54
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	461a      	mov	r2, r3
 800eace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ead0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ead2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ead4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ead6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ead8:	e841 2300 	strex	r3, r2, [r1]
 800eadc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800eade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d1e6      	bne.n	800eab2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	3308      	adds	r3, #8
 800eaea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaee:	e853 3f00 	ldrex	r3, [r3]
 800eaf2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eaf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf6:	f043 0301 	orr.w	r3, r3, #1
 800eafa:	653b      	str	r3, [r7, #80]	@ 0x50
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	3308      	adds	r3, #8
 800eb02:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800eb04:	637a      	str	r2, [r7, #52]	@ 0x34
 800eb06:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800eb0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eb0c:	e841 2300 	strex	r3, r2, [r1]
 800eb10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800eb12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d1e5      	bne.n	800eae4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	3308      	adds	r3, #8
 800eb1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb20:	697b      	ldr	r3, [r7, #20]
 800eb22:	e853 3f00 	ldrex	r3, [r3]
 800eb26:	613b      	str	r3, [r7, #16]
   return(result);
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	3308      	adds	r3, #8
 800eb36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800eb38:	623a      	str	r2, [r7, #32]
 800eb3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb3c:	69f9      	ldr	r1, [r7, #28]
 800eb3e:	6a3a      	ldr	r2, [r7, #32]
 800eb40:	e841 2300 	strex	r3, r2, [r1]
 800eb44:	61bb      	str	r3, [r7, #24]
   return(result);
 800eb46:	69bb      	ldr	r3, [r7, #24]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d1e5      	bne.n	800eb18 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800eb4c:	2300      	movs	r3, #0
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3758      	adds	r7, #88	@ 0x58
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}
 800eb56:	bf00      	nop
 800eb58:	0800ecb3 	.word	0x0800ecb3
 800eb5c:	0800ede7 	.word	0x0800ede7
 800eb60:	0800ee2d 	.word	0x0800ee2d

0800eb64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800eb64:	b480      	push	{r7}
 800eb66:	b08f      	sub	sp, #60	@ 0x3c
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb72:	6a3b      	ldr	r3, [r7, #32]
 800eb74:	e853 3f00 	ldrex	r3, [r3]
 800eb78:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb7a:	69fb      	ldr	r3, [r7, #28]
 800eb7c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800eb80:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	461a      	mov	r2, r3
 800eb88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eb8c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eb90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb92:	e841 2300 	strex	r3, r2, [r1]
 800eb96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d1e6      	bne.n	800eb6c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	3308      	adds	r3, #8
 800eba4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	e853 3f00 	ldrex	r3, [r3]
 800ebac:	60bb      	str	r3, [r7, #8]
   return(result);
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ebb4:	633b      	str	r3, [r7, #48]	@ 0x30
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	3308      	adds	r3, #8
 800ebbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebbe:	61ba      	str	r2, [r7, #24]
 800ebc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebc2:	6979      	ldr	r1, [r7, #20]
 800ebc4:	69ba      	ldr	r2, [r7, #24]
 800ebc6:	e841 2300 	strex	r3, r2, [r1]
 800ebca:	613b      	str	r3, [r7, #16]
   return(result);
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d1e5      	bne.n	800eb9e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2220      	movs	r2, #32
 800ebd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ebda:	bf00      	nop
 800ebdc:	373c      	adds	r7, #60	@ 0x3c
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe4:	4770      	bx	lr

0800ebe6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ebe6:	b480      	push	{r7}
 800ebe8:	b095      	sub	sp, #84	@ 0x54
 800ebea:	af00      	add	r7, sp, #0
 800ebec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebf6:	e853 3f00 	ldrex	r3, [r3]
 800ebfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ebfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ec02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	461a      	mov	r2, r3
 800ec0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec0c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ec0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ec12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ec14:	e841 2300 	strex	r3, r2, [r1]
 800ec18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ec1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d1e6      	bne.n	800ebee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	3308      	adds	r3, #8
 800ec26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec28:	6a3b      	ldr	r3, [r7, #32]
 800ec2a:	e853 3f00 	ldrex	r3, [r3]
 800ec2e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ec36:	f023 0301 	bic.w	r3, r3, #1
 800ec3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	3308      	adds	r3, #8
 800ec42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ec44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ec46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ec4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec4c:	e841 2300 	strex	r3, r2, [r1]
 800ec50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ec52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d1e3      	bne.n	800ec20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec5c:	2b01      	cmp	r3, #1
 800ec5e:	d118      	bne.n	800ec92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	e853 3f00 	ldrex	r3, [r3]
 800ec6c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	f023 0310 	bic.w	r3, r3, #16
 800ec74:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec7e:	61bb      	str	r3, [r7, #24]
 800ec80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec82:	6979      	ldr	r1, [r7, #20]
 800ec84:	69ba      	ldr	r2, [r7, #24]
 800ec86:	e841 2300 	strex	r3, r2, [r1]
 800ec8a:	613b      	str	r3, [r7, #16]
   return(result);
 800ec8c:	693b      	ldr	r3, [r7, #16]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d1e6      	bne.n	800ec60 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2220      	movs	r2, #32
 800ec96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2200      	movs	r2, #0
 800eca4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800eca6:	bf00      	nop
 800eca8:	3754      	adds	r7, #84	@ 0x54
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb0:	4770      	bx	lr

0800ecb2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ecb2:	b580      	push	{r7, lr}
 800ecb4:	b09c      	sub	sp, #112	@ 0x70
 800ecb6:	af00      	add	r7, sp, #0
 800ecb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecbe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	f003 0320 	and.w	r3, r3, #32
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d171      	bne.n	800edb2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ecce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ecd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ecde:	e853 3f00 	ldrex	r3, [r3]
 800ece2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ece4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ece6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ecea:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ecec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	461a      	mov	r2, r3
 800ecf2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ecf4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ecf6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecf8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ecfa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ecfc:	e841 2300 	strex	r3, r2, [r1]
 800ed00:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ed02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d1e6      	bne.n	800ecd6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	3308      	adds	r3, #8
 800ed0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed12:	e853 3f00 	ldrex	r3, [r3]
 800ed16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ed18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed1a:	f023 0301 	bic.w	r3, r3, #1
 800ed1e:	667b      	str	r3, [r7, #100]	@ 0x64
 800ed20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	3308      	adds	r3, #8
 800ed26:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ed28:	647a      	str	r2, [r7, #68]	@ 0x44
 800ed2a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ed2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ed30:	e841 2300 	strex	r3, r2, [r1]
 800ed34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ed36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d1e5      	bne.n	800ed08 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	3308      	adds	r3, #8
 800ed42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed46:	e853 3f00 	ldrex	r3, [r3]
 800ed4a:	623b      	str	r3, [r7, #32]
   return(result);
 800ed4c:	6a3b      	ldr	r3, [r7, #32]
 800ed4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ed52:	663b      	str	r3, [r7, #96]	@ 0x60
 800ed54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	3308      	adds	r3, #8
 800ed5a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ed5c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ed5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ed62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed64:	e841 2300 	strex	r3, r2, [r1]
 800ed68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ed6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d1e5      	bne.n	800ed3c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ed70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed72:	2220      	movs	r2, #32
 800ed74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed7c:	2b01      	cmp	r3, #1
 800ed7e:	d118      	bne.n	800edb2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed86:	693b      	ldr	r3, [r7, #16]
 800ed88:	e853 3f00 	ldrex	r3, [r3]
 800ed8c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	f023 0310 	bic.w	r3, r3, #16
 800ed94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ed96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	461a      	mov	r2, r3
 800ed9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ed9e:	61fb      	str	r3, [r7, #28]
 800eda0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eda2:	69b9      	ldr	r1, [r7, #24]
 800eda4:	69fa      	ldr	r2, [r7, #28]
 800eda6:	e841 2300 	strex	r3, r2, [r1]
 800edaa:	617b      	str	r3, [r7, #20]
   return(result);
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d1e6      	bne.n	800ed80 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800edb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800edb4:	2200      	movs	r2, #0
 800edb6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800edb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800edba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800edbc:	2b01      	cmp	r3, #1
 800edbe:	d109      	bne.n	800edd4 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800edc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800edc2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800edc6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800edc8:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800edcc:	4611      	mov	r1, r2
 800edce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800edd0:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800edd2:	e004      	b.n	800edde <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800edd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800edd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800edda:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800eddc:	4798      	blx	r3
}
 800edde:	bf00      	nop
 800ede0:	3770      	adds	r7, #112	@ 0x70
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}

0800ede6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ede6:	b580      	push	{r7, lr}
 800ede8:	b084      	sub	sp, #16
 800edea:	af00      	add	r7, sp, #0
 800edec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edf2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	2201      	movs	r2, #1
 800edf8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800edfe:	2b01      	cmp	r3, #1
 800ee00:	d10b      	bne.n	800ee1a <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ee08:	68fa      	ldr	r2, [r7, #12]
 800ee0a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800ee0e:	0852      	lsrs	r2, r2, #1
 800ee10:	b292      	uxth	r2, r2
 800ee12:	4611      	mov	r1, r2
 800ee14:	68f8      	ldr	r0, [r7, #12]
 800ee16:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ee18:	e004      	b.n	800ee24 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ee20:	68f8      	ldr	r0, [r7, #12]
 800ee22:	4798      	blx	r3
}
 800ee24:	bf00      	nop
 800ee26:	3710      	adds	r7, #16
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}

0800ee2c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b086      	sub	sp, #24
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee38:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ee40:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ee48:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	689b      	ldr	r3, [r3, #8]
 800ee50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee54:	2b80      	cmp	r3, #128	@ 0x80
 800ee56:	d109      	bne.n	800ee6c <UART_DMAError+0x40>
 800ee58:	693b      	ldr	r3, [r7, #16]
 800ee5a:	2b21      	cmp	r3, #33	@ 0x21
 800ee5c:	d106      	bne.n	800ee6c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ee5e:	697b      	ldr	r3, [r7, #20]
 800ee60:	2200      	movs	r2, #0
 800ee62:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ee66:	6978      	ldr	r0, [r7, #20]
 800ee68:	f7ff fe7c 	bl	800eb64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	689b      	ldr	r3, [r3, #8]
 800ee72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee76:	2b40      	cmp	r3, #64	@ 0x40
 800ee78:	d109      	bne.n	800ee8e <UART_DMAError+0x62>
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	2b22      	cmp	r3, #34	@ 0x22
 800ee7e:	d106      	bne.n	800ee8e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ee80:	697b      	ldr	r3, [r7, #20]
 800ee82:	2200      	movs	r2, #0
 800ee84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ee88:	6978      	ldr	r0, [r7, #20]
 800ee8a:	f7ff feac 	bl	800ebe6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee94:	f043 0210 	orr.w	r2, r3, #16
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800eea4:	6978      	ldr	r0, [r7, #20]
 800eea6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eea8:	bf00      	nop
 800eeaa:	3718      	adds	r7, #24
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}

0800eeb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b084      	sub	sp, #16
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eebc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	2200      	movs	r2, #0
 800eec2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800eecc:	68f8      	ldr	r0, [r7, #12]
 800eece:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eed0:	bf00      	nop
 800eed2:	3710      	adds	r7, #16
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b088      	sub	sp, #32
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	e853 3f00 	ldrex	r3, [r3]
 800eeec:	60bb      	str	r3, [r7, #8]
   return(result);
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eef4:	61fb      	str	r3, [r7, #28]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	461a      	mov	r2, r3
 800eefc:	69fb      	ldr	r3, [r7, #28]
 800eefe:	61bb      	str	r3, [r7, #24]
 800ef00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef02:	6979      	ldr	r1, [r7, #20]
 800ef04:	69ba      	ldr	r2, [r7, #24]
 800ef06:	e841 2300 	strex	r3, r2, [r1]
 800ef0a:	613b      	str	r3, [r7, #16]
   return(result);
 800ef0c:	693b      	ldr	r3, [r7, #16]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d1e6      	bne.n	800eee0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2220      	movs	r2, #32
 800ef16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef2a:	bf00      	nop
 800ef2c:	3720      	adds	r7, #32
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}

0800ef32 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ef32:	b480      	push	{r7}
 800ef34:	b083      	sub	sp, #12
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ef3a:	bf00      	nop
 800ef3c:	370c      	adds	r7, #12
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef44:	4770      	bx	lr

0800ef46 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ef46:	b480      	push	{r7}
 800ef48:	b083      	sub	sp, #12
 800ef4a:	af00      	add	r7, sp, #0
 800ef4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ef4e:	bf00      	nop
 800ef50:	370c      	adds	r7, #12
 800ef52:	46bd      	mov	sp, r7
 800ef54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef58:	4770      	bx	lr

0800ef5a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ef5a:	b480      	push	{r7}
 800ef5c:	b083      	sub	sp, #12
 800ef5e:	af00      	add	r7, sp, #0
 800ef60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ef62:	bf00      	nop
 800ef64:	370c      	adds	r7, #12
 800ef66:	46bd      	mov	sp, r7
 800ef68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6c:	4770      	bx	lr

0800ef6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ef6e:	b480      	push	{r7}
 800ef70:	b085      	sub	sp, #20
 800ef72:	af00      	add	r7, sp, #0
 800ef74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ef7c:	2b01      	cmp	r3, #1
 800ef7e:	d101      	bne.n	800ef84 <HAL_UARTEx_DisableFifoMode+0x16>
 800ef80:	2302      	movs	r3, #2
 800ef82:	e027      	b.n	800efd4 <HAL_UARTEx_DisableFifoMode+0x66>
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2201      	movs	r2, #1
 800ef88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2224      	movs	r2, #36	@ 0x24
 800ef90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	681a      	ldr	r2, [r3, #0]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	f022 0201 	bic.w	r2, r2, #1
 800efaa:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800efb2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2200      	movs	r2, #0
 800efb8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	68fa      	ldr	r2, [r7, #12]
 800efc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2220      	movs	r2, #32
 800efc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2200      	movs	r2, #0
 800efce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800efd2:	2300      	movs	r3, #0
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	3714      	adds	r7, #20
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr

0800efe0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b084      	sub	sp, #16
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
 800efe8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	d101      	bne.n	800eff8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eff4:	2302      	movs	r3, #2
 800eff6:	e02d      	b.n	800f054 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2201      	movs	r2, #1
 800effc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2224      	movs	r2, #36	@ 0x24
 800f004:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	681a      	ldr	r2, [r3, #0]
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	f022 0201 	bic.w	r2, r2, #1
 800f01e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	689b      	ldr	r3, [r3, #8]
 800f026:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	683a      	ldr	r2, [r7, #0]
 800f030:	430a      	orrs	r2, r1
 800f032:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f000 f84f 	bl	800f0d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	68fa      	ldr	r2, [r7, #12]
 800f040:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2220      	movs	r2, #32
 800f046:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2200      	movs	r2, #0
 800f04e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f052:	2300      	movs	r3, #0
}
 800f054:	4618      	mov	r0, r3
 800f056:	3710      	adds	r7, #16
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b084      	sub	sp, #16
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
 800f064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f06c:	2b01      	cmp	r3, #1
 800f06e:	d101      	bne.n	800f074 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f070:	2302      	movs	r3, #2
 800f072:	e02d      	b.n	800f0d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2201      	movs	r2, #1
 800f078:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2224      	movs	r2, #36	@ 0x24
 800f080:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	681a      	ldr	r2, [r3, #0]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	f022 0201 	bic.w	r2, r2, #1
 800f09a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	689b      	ldr	r3, [r3, #8]
 800f0a2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	683a      	ldr	r2, [r7, #0]
 800f0ac:	430a      	orrs	r2, r1
 800f0ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f000 f811 	bl	800f0d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	68fa      	ldr	r2, [r7, #12]
 800f0bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2220      	movs	r2, #32
 800f0c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f0ce:	2300      	movs	r3, #0
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3710      	adds	r7, #16
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}

0800f0d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f0d8:	b480      	push	{r7}
 800f0da:	b085      	sub	sp, #20
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d108      	bne.n	800f0fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2201      	movs	r2, #1
 800f0f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f0f8:	e031      	b.n	800f15e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f0fa:	2308      	movs	r3, #8
 800f0fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f0fe:	2308      	movs	r3, #8
 800f100:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	689b      	ldr	r3, [r3, #8]
 800f108:	0e5b      	lsrs	r3, r3, #25
 800f10a:	b2db      	uxtb	r3, r3
 800f10c:	f003 0307 	and.w	r3, r3, #7
 800f110:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	689b      	ldr	r3, [r3, #8]
 800f118:	0f5b      	lsrs	r3, r3, #29
 800f11a:	b2db      	uxtb	r3, r3
 800f11c:	f003 0307 	and.w	r3, r3, #7
 800f120:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f122:	7bbb      	ldrb	r3, [r7, #14]
 800f124:	7b3a      	ldrb	r2, [r7, #12]
 800f126:	4911      	ldr	r1, [pc, #68]	@ (800f16c <UARTEx_SetNbDataToProcess+0x94>)
 800f128:	5c8a      	ldrb	r2, [r1, r2]
 800f12a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f12e:	7b3a      	ldrb	r2, [r7, #12]
 800f130:	490f      	ldr	r1, [pc, #60]	@ (800f170 <UARTEx_SetNbDataToProcess+0x98>)
 800f132:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f134:	fb93 f3f2 	sdiv	r3, r3, r2
 800f138:	b29a      	uxth	r2, r3
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f140:	7bfb      	ldrb	r3, [r7, #15]
 800f142:	7b7a      	ldrb	r2, [r7, #13]
 800f144:	4909      	ldr	r1, [pc, #36]	@ (800f16c <UARTEx_SetNbDataToProcess+0x94>)
 800f146:	5c8a      	ldrb	r2, [r1, r2]
 800f148:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f14c:	7b7a      	ldrb	r2, [r7, #13]
 800f14e:	4908      	ldr	r1, [pc, #32]	@ (800f170 <UARTEx_SetNbDataToProcess+0x98>)
 800f150:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f152:	fb93 f3f2 	sdiv	r3, r3, r2
 800f156:	b29a      	uxth	r2, r3
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f15e:	bf00      	nop
 800f160:	3714      	adds	r7, #20
 800f162:	46bd      	mov	sp, r7
 800f164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f168:	4770      	bx	lr
 800f16a:	bf00      	nop
 800f16c:	08011408 	.word	0x08011408
 800f170:	08011410 	.word	0x08011410

0800f174 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800f174:	b480      	push	{r7}
 800f176:	b08b      	sub	sp, #44	@ 0x2c
 800f178:	af00      	add	r7, sp, #0
 800f17a:	60f8      	str	r0, [r7, #12]
 800f17c:	60b9      	str	r1, [r7, #8]
 800f17e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	685b      	ldr	r3, [r3, #4]
 800f190:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	881b      	ldrh	r3, [r3, #0]
 800f196:	461a      	mov	r2, r3
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	885b      	ldrh	r3, [r3, #2]
 800f19c:	fb02 f303 	mul.w	r3, r2, r3
 800f1a0:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800f1a6:	e013      	b.n	800f1d0 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800f1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1aa:	1d1a      	adds	r2, r3, #4
 800f1ac:	627a      	str	r2, [r7, #36]	@ 0x24
 800f1ae:	ed93 7a00 	vldr	s14, [r3]
 800f1b2:	6a3b      	ldr	r3, [r7, #32]
 800f1b4:	1d1a      	adds	r2, r3, #4
 800f1b6:	623a      	str	r2, [r7, #32]
 800f1b8:	edd3 7a00 	vldr	s15, [r3]
 800f1bc:	69fb      	ldr	r3, [r7, #28]
 800f1be:	1d1a      	adds	r2, r3, #4
 800f1c0:	61fa      	str	r2, [r7, #28]
 800f1c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f1c6:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800f1ca:	69bb      	ldr	r3, [r7, #24]
 800f1cc:	3b01      	subs	r3, #1
 800f1ce:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800f1d0:	69bb      	ldr	r3, [r7, #24]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d1e8      	bne.n	800f1a8 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800f1da:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	372c      	adds	r7, #44	@ 0x2c
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e8:	4770      	bx	lr

0800f1ea <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800f1ea:	b480      	push	{r7}
 800f1ec:	b085      	sub	sp, #20
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	60f8      	str	r0, [r7, #12]
 800f1f2:	607b      	str	r3, [r7, #4]
 800f1f4:	460b      	mov	r3, r1
 800f1f6:	817b      	strh	r3, [r7, #10]
 800f1f8:	4613      	mov	r3, r2
 800f1fa:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	897a      	ldrh	r2, [r7, #10]
 800f200:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	893a      	ldrh	r2, [r7, #8]
 800f206:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	687a      	ldr	r2, [r7, #4]
 800f20c:	605a      	str	r2, [r3, #4]
}
 800f20e:	bf00      	nop
 800f210:	3714      	adds	r7, #20
 800f212:	46bd      	mov	sp, r7
 800f214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f218:	4770      	bx	lr

0800f21a <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800f21a:	b480      	push	{r7}
 800f21c:	b093      	sub	sp, #76	@ 0x4c
 800f21e:	af00      	add	r7, sp, #0
 800f220:	60f8      	str	r0, [r7, #12]
 800f222:	60b9      	str	r1, [r7, #8]
 800f224:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	685b      	ldr	r3, [r3, #4]
 800f230:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	685b      	ldr	r3, [r3, #4]
 800f23c:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	685b      	ldr	r3, [r3, #4]
 800f242:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	881b      	ldrh	r3, [r3, #0]
 800f248:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	885b      	ldrh	r3, [r3, #2]
 800f24e:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	885b      	ldrh	r3, [r3, #2]
 800f254:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800f256:	2300      	movs	r3, #0
 800f258:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f25a:	8b7b      	ldrh	r3, [r7, #26]
 800f25c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800f25e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f260:	009b      	lsls	r3, r3, #2
 800f262:	69fa      	ldr	r2, [r7, #28]
 800f264:	4413      	add	r3, r2
 800f266:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800f268:	8b3b      	ldrh	r3, [r7, #24]
 800f26a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800f272:	f04f 0300 	mov.w	r3, #0
 800f276:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800f278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f27a:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800f27c:	8afb      	ldrh	r3, [r7, #22]
 800f27e:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800f280:	e017      	b.n	800f2b2 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800f282:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f284:	1d1a      	adds	r2, r3, #4
 800f286:	647a      	str	r2, [r7, #68]	@ 0x44
 800f288:	ed93 7a00 	vldr	s14, [r3]
 800f28c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f28e:	edd3 7a00 	vldr	s15, [r3]
 800f292:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f296:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800f29a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f29e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800f2a2:	8b3b      	ldrh	r3, [r7, #24]
 800f2a4:	009b      	lsls	r3, r3, #2
 800f2a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f2a8:	4413      	add	r3, r2
 800f2aa:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800f2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2ae:	3b01      	subs	r3, #1
 800f2b0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800f2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d1e4      	bne.n	800f282 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800f2b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2ba:	1d1a      	adds	r2, r3, #4
 800f2bc:	63ba      	str	r2, [r7, #56]	@ 0x38
 800f2be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f2c0:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800f2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2c4:	3b01      	subs	r3, #1
 800f2c6:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800f2c8:	8b3a      	ldrh	r2, [r7, #24]
 800f2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2cc:	1ad3      	subs	r3, r2, r3
 800f2ce:	009b      	lsls	r3, r3, #2
 800f2d0:	6a3a      	ldr	r2, [r7, #32]
 800f2d2:	4413      	add	r3, r2
 800f2d4:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800f2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d1ca      	bne.n	800f272 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800f2dc:	8b3b      	ldrh	r3, [r7, #24]
 800f2de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f2e0:	4413      	add	r3, r2
 800f2e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800f2e4:	8afb      	ldrh	r3, [r7, #22]
 800f2e6:	009b      	lsls	r3, r3, #2
 800f2e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f2ea:	4413      	add	r3, r2
 800f2ec:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800f2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2f0:	3b01      	subs	r3, #1
 800f2f2:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800f2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d1b1      	bne.n	800f25e <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800f2fe:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800f302:	4618      	mov	r0, r3
 800f304:	374c      	adds	r7, #76	@ 0x4c
 800f306:	46bd      	mov	sp, r7
 800f308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30c:	4770      	bx	lr

0800f30e <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800f30e:	b480      	push	{r7}
 800f310:	b08b      	sub	sp, #44	@ 0x2c
 800f312:	af00      	add	r7, sp, #0
 800f314:	60f8      	str	r0, [r7, #12]
 800f316:	ed87 0a02 	vstr	s0, [r7, #8]
 800f31a:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	685b      	ldr	r3, [r3, #4]
 800f326:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	881b      	ldrh	r3, [r3, #0]
 800f32c:	461a      	mov	r2, r3
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	885b      	ldrh	r3, [r3, #2]
 800f332:	fb02 f303 	mul.w	r3, r2, r3
 800f336:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800f338:	69bb      	ldr	r3, [r7, #24]
 800f33a:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800f33c:	e010      	b.n	800f360 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800f33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f340:	1d1a      	adds	r2, r3, #4
 800f342:	627a      	str	r2, [r7, #36]	@ 0x24
 800f344:	ed93 7a00 	vldr	s14, [r3]
 800f348:	6a3b      	ldr	r3, [r7, #32]
 800f34a:	1d1a      	adds	r2, r3, #4
 800f34c:	623a      	str	r2, [r7, #32]
 800f34e:	edd7 7a02 	vldr	s15, [r7, #8]
 800f352:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f356:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800f35a:	69fb      	ldr	r3, [r7, #28]
 800f35c:	3b01      	subs	r3, #1
 800f35e:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800f360:	69fb      	ldr	r3, [r7, #28]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d1eb      	bne.n	800f33e <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f366:	2300      	movs	r3, #0
 800f368:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800f36a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f36e:	4618      	mov	r0, r3
 800f370:	372c      	adds	r7, #44	@ 0x2c
 800f372:	46bd      	mov	sp, r7
 800f374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f378:	4770      	bx	lr
	...

0800f37c <malloc>:
 800f37c:	4b02      	ldr	r3, [pc, #8]	@ (800f388 <malloc+0xc>)
 800f37e:	4601      	mov	r1, r0
 800f380:	6818      	ldr	r0, [r3, #0]
 800f382:	f000 b825 	b.w	800f3d0 <_malloc_r>
 800f386:	bf00      	nop
 800f388:	20000108 	.word	0x20000108

0800f38c <sbrk_aligned>:
 800f38c:	b570      	push	{r4, r5, r6, lr}
 800f38e:	4e0f      	ldr	r6, [pc, #60]	@ (800f3cc <sbrk_aligned+0x40>)
 800f390:	460c      	mov	r4, r1
 800f392:	6831      	ldr	r1, [r6, #0]
 800f394:	4605      	mov	r5, r0
 800f396:	b911      	cbnz	r1, 800f39e <sbrk_aligned+0x12>
 800f398:	f000 f8ae 	bl	800f4f8 <_sbrk_r>
 800f39c:	6030      	str	r0, [r6, #0]
 800f39e:	4621      	mov	r1, r4
 800f3a0:	4628      	mov	r0, r5
 800f3a2:	f000 f8a9 	bl	800f4f8 <_sbrk_r>
 800f3a6:	1c43      	adds	r3, r0, #1
 800f3a8:	d103      	bne.n	800f3b2 <sbrk_aligned+0x26>
 800f3aa:	f04f 34ff 	mov.w	r4, #4294967295
 800f3ae:	4620      	mov	r0, r4
 800f3b0:	bd70      	pop	{r4, r5, r6, pc}
 800f3b2:	1cc4      	adds	r4, r0, #3
 800f3b4:	f024 0403 	bic.w	r4, r4, #3
 800f3b8:	42a0      	cmp	r0, r4
 800f3ba:	d0f8      	beq.n	800f3ae <sbrk_aligned+0x22>
 800f3bc:	1a21      	subs	r1, r4, r0
 800f3be:	4628      	mov	r0, r5
 800f3c0:	f000 f89a 	bl	800f4f8 <_sbrk_r>
 800f3c4:	3001      	adds	r0, #1
 800f3c6:	d1f2      	bne.n	800f3ae <sbrk_aligned+0x22>
 800f3c8:	e7ef      	b.n	800f3aa <sbrk_aligned+0x1e>
 800f3ca:	bf00      	nop
 800f3cc:	20002120 	.word	0x20002120

0800f3d0 <_malloc_r>:
 800f3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3d4:	1ccd      	adds	r5, r1, #3
 800f3d6:	f025 0503 	bic.w	r5, r5, #3
 800f3da:	3508      	adds	r5, #8
 800f3dc:	2d0c      	cmp	r5, #12
 800f3de:	bf38      	it	cc
 800f3e0:	250c      	movcc	r5, #12
 800f3e2:	2d00      	cmp	r5, #0
 800f3e4:	4606      	mov	r6, r0
 800f3e6:	db01      	blt.n	800f3ec <_malloc_r+0x1c>
 800f3e8:	42a9      	cmp	r1, r5
 800f3ea:	d904      	bls.n	800f3f6 <_malloc_r+0x26>
 800f3ec:	230c      	movs	r3, #12
 800f3ee:	6033      	str	r3, [r6, #0]
 800f3f0:	2000      	movs	r0, #0
 800f3f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f4cc <_malloc_r+0xfc>
 800f3fa:	f000 f869 	bl	800f4d0 <__malloc_lock>
 800f3fe:	f8d8 3000 	ldr.w	r3, [r8]
 800f402:	461c      	mov	r4, r3
 800f404:	bb44      	cbnz	r4, 800f458 <_malloc_r+0x88>
 800f406:	4629      	mov	r1, r5
 800f408:	4630      	mov	r0, r6
 800f40a:	f7ff ffbf 	bl	800f38c <sbrk_aligned>
 800f40e:	1c43      	adds	r3, r0, #1
 800f410:	4604      	mov	r4, r0
 800f412:	d158      	bne.n	800f4c6 <_malloc_r+0xf6>
 800f414:	f8d8 4000 	ldr.w	r4, [r8]
 800f418:	4627      	mov	r7, r4
 800f41a:	2f00      	cmp	r7, #0
 800f41c:	d143      	bne.n	800f4a6 <_malloc_r+0xd6>
 800f41e:	2c00      	cmp	r4, #0
 800f420:	d04b      	beq.n	800f4ba <_malloc_r+0xea>
 800f422:	6823      	ldr	r3, [r4, #0]
 800f424:	4639      	mov	r1, r7
 800f426:	4630      	mov	r0, r6
 800f428:	eb04 0903 	add.w	r9, r4, r3
 800f42c:	f000 f864 	bl	800f4f8 <_sbrk_r>
 800f430:	4581      	cmp	r9, r0
 800f432:	d142      	bne.n	800f4ba <_malloc_r+0xea>
 800f434:	6821      	ldr	r1, [r4, #0]
 800f436:	1a6d      	subs	r5, r5, r1
 800f438:	4629      	mov	r1, r5
 800f43a:	4630      	mov	r0, r6
 800f43c:	f7ff ffa6 	bl	800f38c <sbrk_aligned>
 800f440:	3001      	adds	r0, #1
 800f442:	d03a      	beq.n	800f4ba <_malloc_r+0xea>
 800f444:	6823      	ldr	r3, [r4, #0]
 800f446:	442b      	add	r3, r5
 800f448:	6023      	str	r3, [r4, #0]
 800f44a:	f8d8 3000 	ldr.w	r3, [r8]
 800f44e:	685a      	ldr	r2, [r3, #4]
 800f450:	bb62      	cbnz	r2, 800f4ac <_malloc_r+0xdc>
 800f452:	f8c8 7000 	str.w	r7, [r8]
 800f456:	e00f      	b.n	800f478 <_malloc_r+0xa8>
 800f458:	6822      	ldr	r2, [r4, #0]
 800f45a:	1b52      	subs	r2, r2, r5
 800f45c:	d420      	bmi.n	800f4a0 <_malloc_r+0xd0>
 800f45e:	2a0b      	cmp	r2, #11
 800f460:	d917      	bls.n	800f492 <_malloc_r+0xc2>
 800f462:	1961      	adds	r1, r4, r5
 800f464:	42a3      	cmp	r3, r4
 800f466:	6025      	str	r5, [r4, #0]
 800f468:	bf18      	it	ne
 800f46a:	6059      	strne	r1, [r3, #4]
 800f46c:	6863      	ldr	r3, [r4, #4]
 800f46e:	bf08      	it	eq
 800f470:	f8c8 1000 	streq.w	r1, [r8]
 800f474:	5162      	str	r2, [r4, r5]
 800f476:	604b      	str	r3, [r1, #4]
 800f478:	4630      	mov	r0, r6
 800f47a:	f000 f82f 	bl	800f4dc <__malloc_unlock>
 800f47e:	f104 000b 	add.w	r0, r4, #11
 800f482:	1d23      	adds	r3, r4, #4
 800f484:	f020 0007 	bic.w	r0, r0, #7
 800f488:	1ac2      	subs	r2, r0, r3
 800f48a:	bf1c      	itt	ne
 800f48c:	1a1b      	subne	r3, r3, r0
 800f48e:	50a3      	strne	r3, [r4, r2]
 800f490:	e7af      	b.n	800f3f2 <_malloc_r+0x22>
 800f492:	6862      	ldr	r2, [r4, #4]
 800f494:	42a3      	cmp	r3, r4
 800f496:	bf0c      	ite	eq
 800f498:	f8c8 2000 	streq.w	r2, [r8]
 800f49c:	605a      	strne	r2, [r3, #4]
 800f49e:	e7eb      	b.n	800f478 <_malloc_r+0xa8>
 800f4a0:	4623      	mov	r3, r4
 800f4a2:	6864      	ldr	r4, [r4, #4]
 800f4a4:	e7ae      	b.n	800f404 <_malloc_r+0x34>
 800f4a6:	463c      	mov	r4, r7
 800f4a8:	687f      	ldr	r7, [r7, #4]
 800f4aa:	e7b6      	b.n	800f41a <_malloc_r+0x4a>
 800f4ac:	461a      	mov	r2, r3
 800f4ae:	685b      	ldr	r3, [r3, #4]
 800f4b0:	42a3      	cmp	r3, r4
 800f4b2:	d1fb      	bne.n	800f4ac <_malloc_r+0xdc>
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	6053      	str	r3, [r2, #4]
 800f4b8:	e7de      	b.n	800f478 <_malloc_r+0xa8>
 800f4ba:	230c      	movs	r3, #12
 800f4bc:	6033      	str	r3, [r6, #0]
 800f4be:	4630      	mov	r0, r6
 800f4c0:	f000 f80c 	bl	800f4dc <__malloc_unlock>
 800f4c4:	e794      	b.n	800f3f0 <_malloc_r+0x20>
 800f4c6:	6005      	str	r5, [r0, #0]
 800f4c8:	e7d6      	b.n	800f478 <_malloc_r+0xa8>
 800f4ca:	bf00      	nop
 800f4cc:	20002124 	.word	0x20002124

0800f4d0 <__malloc_lock>:
 800f4d0:	4801      	ldr	r0, [pc, #4]	@ (800f4d8 <__malloc_lock+0x8>)
 800f4d2:	f000 b84b 	b.w	800f56c <__retarget_lock_acquire_recursive>
 800f4d6:	bf00      	nop
 800f4d8:	20002264 	.word	0x20002264

0800f4dc <__malloc_unlock>:
 800f4dc:	4801      	ldr	r0, [pc, #4]	@ (800f4e4 <__malloc_unlock+0x8>)
 800f4de:	f000 b846 	b.w	800f56e <__retarget_lock_release_recursive>
 800f4e2:	bf00      	nop
 800f4e4:	20002264 	.word	0x20002264

0800f4e8 <memset>:
 800f4e8:	4402      	add	r2, r0
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	d100      	bne.n	800f4f2 <memset+0xa>
 800f4f0:	4770      	bx	lr
 800f4f2:	f803 1b01 	strb.w	r1, [r3], #1
 800f4f6:	e7f9      	b.n	800f4ec <memset+0x4>

0800f4f8 <_sbrk_r>:
 800f4f8:	b538      	push	{r3, r4, r5, lr}
 800f4fa:	4d06      	ldr	r5, [pc, #24]	@ (800f514 <_sbrk_r+0x1c>)
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	4604      	mov	r4, r0
 800f500:	4608      	mov	r0, r1
 800f502:	602b      	str	r3, [r5, #0]
 800f504:	f7f7 fd3c 	bl	8006f80 <_sbrk>
 800f508:	1c43      	adds	r3, r0, #1
 800f50a:	d102      	bne.n	800f512 <_sbrk_r+0x1a>
 800f50c:	682b      	ldr	r3, [r5, #0]
 800f50e:	b103      	cbz	r3, 800f512 <_sbrk_r+0x1a>
 800f510:	6023      	str	r3, [r4, #0]
 800f512:	bd38      	pop	{r3, r4, r5, pc}
 800f514:	20002260 	.word	0x20002260

0800f518 <__errno>:
 800f518:	4b01      	ldr	r3, [pc, #4]	@ (800f520 <__errno+0x8>)
 800f51a:	6818      	ldr	r0, [r3, #0]
 800f51c:	4770      	bx	lr
 800f51e:	bf00      	nop
 800f520:	20000108 	.word	0x20000108

0800f524 <__libc_init_array>:
 800f524:	b570      	push	{r4, r5, r6, lr}
 800f526:	4d0d      	ldr	r5, [pc, #52]	@ (800f55c <__libc_init_array+0x38>)
 800f528:	4c0d      	ldr	r4, [pc, #52]	@ (800f560 <__libc_init_array+0x3c>)
 800f52a:	1b64      	subs	r4, r4, r5
 800f52c:	10a4      	asrs	r4, r4, #2
 800f52e:	2600      	movs	r6, #0
 800f530:	42a6      	cmp	r6, r4
 800f532:	d109      	bne.n	800f548 <__libc_init_array+0x24>
 800f534:	4d0b      	ldr	r5, [pc, #44]	@ (800f564 <__libc_init_array+0x40>)
 800f536:	4c0c      	ldr	r4, [pc, #48]	@ (800f568 <__libc_init_array+0x44>)
 800f538:	f001 ff32 	bl	80113a0 <_init>
 800f53c:	1b64      	subs	r4, r4, r5
 800f53e:	10a4      	asrs	r4, r4, #2
 800f540:	2600      	movs	r6, #0
 800f542:	42a6      	cmp	r6, r4
 800f544:	d105      	bne.n	800f552 <__libc_init_array+0x2e>
 800f546:	bd70      	pop	{r4, r5, r6, pc}
 800f548:	f855 3b04 	ldr.w	r3, [r5], #4
 800f54c:	4798      	blx	r3
 800f54e:	3601      	adds	r6, #1
 800f550:	e7ee      	b.n	800f530 <__libc_init_array+0xc>
 800f552:	f855 3b04 	ldr.w	r3, [r5], #4
 800f556:	4798      	blx	r3
 800f558:	3601      	adds	r6, #1
 800f55a:	e7f2      	b.n	800f542 <__libc_init_array+0x1e>
 800f55c:	080119d0 	.word	0x080119d0
 800f560:	080119d0 	.word	0x080119d0
 800f564:	080119d0 	.word	0x080119d0
 800f568:	080119d4 	.word	0x080119d4

0800f56c <__retarget_lock_acquire_recursive>:
 800f56c:	4770      	bx	lr

0800f56e <__retarget_lock_release_recursive>:
 800f56e:	4770      	bx	lr

0800f570 <memcpy>:
 800f570:	440a      	add	r2, r1
 800f572:	4291      	cmp	r1, r2
 800f574:	f100 33ff 	add.w	r3, r0, #4294967295
 800f578:	d100      	bne.n	800f57c <memcpy+0xc>
 800f57a:	4770      	bx	lr
 800f57c:	b510      	push	{r4, lr}
 800f57e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f582:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f586:	4291      	cmp	r1, r2
 800f588:	d1f9      	bne.n	800f57e <memcpy+0xe>
 800f58a:	bd10      	pop	{r4, pc}
 800f58c:	0000      	movs	r0, r0
	...

0800f590 <cos>:
 800f590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f592:	ec53 2b10 	vmov	r2, r3, d0
 800f596:	4826      	ldr	r0, [pc, #152]	@ (800f630 <cos+0xa0>)
 800f598:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f59c:	4281      	cmp	r1, r0
 800f59e:	d806      	bhi.n	800f5ae <cos+0x1e>
 800f5a0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f628 <cos+0x98>
 800f5a4:	b005      	add	sp, #20
 800f5a6:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5aa:	f000 b9bd 	b.w	800f928 <__kernel_cos>
 800f5ae:	4821      	ldr	r0, [pc, #132]	@ (800f634 <cos+0xa4>)
 800f5b0:	4281      	cmp	r1, r0
 800f5b2:	d908      	bls.n	800f5c6 <cos+0x36>
 800f5b4:	4610      	mov	r0, r2
 800f5b6:	4619      	mov	r1, r3
 800f5b8:	f7f0 fe32 	bl	8000220 <__aeabi_dsub>
 800f5bc:	ec41 0b10 	vmov	d0, r0, r1
 800f5c0:	b005      	add	sp, #20
 800f5c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f5c6:	4668      	mov	r0, sp
 800f5c8:	f000 fb32 	bl	800fc30 <__ieee754_rem_pio2>
 800f5cc:	f000 0003 	and.w	r0, r0, #3
 800f5d0:	2801      	cmp	r0, #1
 800f5d2:	d00b      	beq.n	800f5ec <cos+0x5c>
 800f5d4:	2802      	cmp	r0, #2
 800f5d6:	d015      	beq.n	800f604 <cos+0x74>
 800f5d8:	b9d8      	cbnz	r0, 800f612 <cos+0x82>
 800f5da:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f5de:	ed9d 0b00 	vldr	d0, [sp]
 800f5e2:	f000 f9a1 	bl	800f928 <__kernel_cos>
 800f5e6:	ec51 0b10 	vmov	r0, r1, d0
 800f5ea:	e7e7      	b.n	800f5bc <cos+0x2c>
 800f5ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f5f0:	ed9d 0b00 	vldr	d0, [sp]
 800f5f4:	f000 fa60 	bl	800fab8 <__kernel_sin>
 800f5f8:	ec53 2b10 	vmov	r2, r3, d0
 800f5fc:	4610      	mov	r0, r2
 800f5fe:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f602:	e7db      	b.n	800f5bc <cos+0x2c>
 800f604:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f608:	ed9d 0b00 	vldr	d0, [sp]
 800f60c:	f000 f98c 	bl	800f928 <__kernel_cos>
 800f610:	e7f2      	b.n	800f5f8 <cos+0x68>
 800f612:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f616:	ed9d 0b00 	vldr	d0, [sp]
 800f61a:	2001      	movs	r0, #1
 800f61c:	f000 fa4c 	bl	800fab8 <__kernel_sin>
 800f620:	e7e1      	b.n	800f5e6 <cos+0x56>
 800f622:	bf00      	nop
 800f624:	f3af 8000 	nop.w
	...
 800f630:	3fe921fb 	.word	0x3fe921fb
 800f634:	7fefffff 	.word	0x7fefffff

0800f638 <sin>:
 800f638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f63a:	ec53 2b10 	vmov	r2, r3, d0
 800f63e:	4826      	ldr	r0, [pc, #152]	@ (800f6d8 <sin+0xa0>)
 800f640:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f644:	4281      	cmp	r1, r0
 800f646:	d807      	bhi.n	800f658 <sin+0x20>
 800f648:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f6d0 <sin+0x98>
 800f64c:	2000      	movs	r0, #0
 800f64e:	b005      	add	sp, #20
 800f650:	f85d eb04 	ldr.w	lr, [sp], #4
 800f654:	f000 ba30 	b.w	800fab8 <__kernel_sin>
 800f658:	4820      	ldr	r0, [pc, #128]	@ (800f6dc <sin+0xa4>)
 800f65a:	4281      	cmp	r1, r0
 800f65c:	d908      	bls.n	800f670 <sin+0x38>
 800f65e:	4610      	mov	r0, r2
 800f660:	4619      	mov	r1, r3
 800f662:	f7f0 fddd 	bl	8000220 <__aeabi_dsub>
 800f666:	ec41 0b10 	vmov	d0, r0, r1
 800f66a:	b005      	add	sp, #20
 800f66c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f670:	4668      	mov	r0, sp
 800f672:	f000 fadd 	bl	800fc30 <__ieee754_rem_pio2>
 800f676:	f000 0003 	and.w	r0, r0, #3
 800f67a:	2801      	cmp	r0, #1
 800f67c:	d00c      	beq.n	800f698 <sin+0x60>
 800f67e:	2802      	cmp	r0, #2
 800f680:	d011      	beq.n	800f6a6 <sin+0x6e>
 800f682:	b9e8      	cbnz	r0, 800f6c0 <sin+0x88>
 800f684:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f688:	ed9d 0b00 	vldr	d0, [sp]
 800f68c:	2001      	movs	r0, #1
 800f68e:	f000 fa13 	bl	800fab8 <__kernel_sin>
 800f692:	ec51 0b10 	vmov	r0, r1, d0
 800f696:	e7e6      	b.n	800f666 <sin+0x2e>
 800f698:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f69c:	ed9d 0b00 	vldr	d0, [sp]
 800f6a0:	f000 f942 	bl	800f928 <__kernel_cos>
 800f6a4:	e7f5      	b.n	800f692 <sin+0x5a>
 800f6a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f6aa:	ed9d 0b00 	vldr	d0, [sp]
 800f6ae:	2001      	movs	r0, #1
 800f6b0:	f000 fa02 	bl	800fab8 <__kernel_sin>
 800f6b4:	ec53 2b10 	vmov	r2, r3, d0
 800f6b8:	4610      	mov	r0, r2
 800f6ba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f6be:	e7d2      	b.n	800f666 <sin+0x2e>
 800f6c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f6c4:	ed9d 0b00 	vldr	d0, [sp]
 800f6c8:	f000 f92e 	bl	800f928 <__kernel_cos>
 800f6cc:	e7f2      	b.n	800f6b4 <sin+0x7c>
 800f6ce:	bf00      	nop
	...
 800f6d8:	3fe921fb 	.word	0x3fe921fb
 800f6dc:	7fefffff 	.word	0x7fefffff

0800f6e0 <fmodf>:
 800f6e0:	b508      	push	{r3, lr}
 800f6e2:	ed2d 8b02 	vpush	{d8}
 800f6e6:	eef0 8a40 	vmov.f32	s17, s0
 800f6ea:	eeb0 8a60 	vmov.f32	s16, s1
 800f6ee:	f000 fd43 	bl	8010178 <__ieee754_fmodf>
 800f6f2:	eef4 8a48 	vcmp.f32	s17, s16
 800f6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6fa:	d60c      	bvs.n	800f716 <fmodf+0x36>
 800f6fc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f71c <fmodf+0x3c>
 800f700:	eeb4 8a68 	vcmp.f32	s16, s17
 800f704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f708:	d105      	bne.n	800f716 <fmodf+0x36>
 800f70a:	f7ff ff05 	bl	800f518 <__errno>
 800f70e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f712:	2321      	movs	r3, #33	@ 0x21
 800f714:	6003      	str	r3, [r0, #0]
 800f716:	ecbd 8b02 	vpop	{d8}
 800f71a:	bd08      	pop	{r3, pc}
 800f71c:	00000000 	.word	0x00000000

0800f720 <sqrtf>:
 800f720:	b508      	push	{r3, lr}
 800f722:	ed2d 8b02 	vpush	{d8}
 800f726:	eeb0 8a40 	vmov.f32	s16, s0
 800f72a:	f000 f8f7 	bl	800f91c <__ieee754_sqrtf>
 800f72e:	eeb4 8a48 	vcmp.f32	s16, s16
 800f732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f736:	d60c      	bvs.n	800f752 <sqrtf+0x32>
 800f738:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f758 <sqrtf+0x38>
 800f73c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f744:	d505      	bpl.n	800f752 <sqrtf+0x32>
 800f746:	f7ff fee7 	bl	800f518 <__errno>
 800f74a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f74e:	2321      	movs	r3, #33	@ 0x21
 800f750:	6003      	str	r3, [r0, #0]
 800f752:	ecbd 8b02 	vpop	{d8}
 800f756:	bd08      	pop	{r3, pc}
 800f758:	00000000 	.word	0x00000000

0800f75c <cosf>:
 800f75c:	ee10 3a10 	vmov	r3, s0
 800f760:	b507      	push	{r0, r1, r2, lr}
 800f762:	4a1e      	ldr	r2, [pc, #120]	@ (800f7dc <cosf+0x80>)
 800f764:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f768:	4293      	cmp	r3, r2
 800f76a:	d806      	bhi.n	800f77a <cosf+0x1e>
 800f76c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800f7e0 <cosf+0x84>
 800f770:	b003      	add	sp, #12
 800f772:	f85d eb04 	ldr.w	lr, [sp], #4
 800f776:	f000 bc5f 	b.w	8010038 <__kernel_cosf>
 800f77a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f77e:	d304      	bcc.n	800f78a <cosf+0x2e>
 800f780:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f784:	b003      	add	sp, #12
 800f786:	f85d fb04 	ldr.w	pc, [sp], #4
 800f78a:	4668      	mov	r0, sp
 800f78c:	f000 fd76 	bl	801027c <__ieee754_rem_pio2f>
 800f790:	f000 0003 	and.w	r0, r0, #3
 800f794:	2801      	cmp	r0, #1
 800f796:	d009      	beq.n	800f7ac <cosf+0x50>
 800f798:	2802      	cmp	r0, #2
 800f79a:	d010      	beq.n	800f7be <cosf+0x62>
 800f79c:	b9b0      	cbnz	r0, 800f7cc <cosf+0x70>
 800f79e:	eddd 0a01 	vldr	s1, [sp, #4]
 800f7a2:	ed9d 0a00 	vldr	s0, [sp]
 800f7a6:	f000 fc47 	bl	8010038 <__kernel_cosf>
 800f7aa:	e7eb      	b.n	800f784 <cosf+0x28>
 800f7ac:	eddd 0a01 	vldr	s1, [sp, #4]
 800f7b0:	ed9d 0a00 	vldr	s0, [sp]
 800f7b4:	f000 fc98 	bl	80100e8 <__kernel_sinf>
 800f7b8:	eeb1 0a40 	vneg.f32	s0, s0
 800f7bc:	e7e2      	b.n	800f784 <cosf+0x28>
 800f7be:	eddd 0a01 	vldr	s1, [sp, #4]
 800f7c2:	ed9d 0a00 	vldr	s0, [sp]
 800f7c6:	f000 fc37 	bl	8010038 <__kernel_cosf>
 800f7ca:	e7f5      	b.n	800f7b8 <cosf+0x5c>
 800f7cc:	eddd 0a01 	vldr	s1, [sp, #4]
 800f7d0:	ed9d 0a00 	vldr	s0, [sp]
 800f7d4:	2001      	movs	r0, #1
 800f7d6:	f000 fc87 	bl	80100e8 <__kernel_sinf>
 800f7da:	e7d3      	b.n	800f784 <cosf+0x28>
 800f7dc:	3f490fd8 	.word	0x3f490fd8
 800f7e0:	00000000 	.word	0x00000000

0800f7e4 <sinf>:
 800f7e4:	ee10 3a10 	vmov	r3, s0
 800f7e8:	b507      	push	{r0, r1, r2, lr}
 800f7ea:	4a1f      	ldr	r2, [pc, #124]	@ (800f868 <sinf+0x84>)
 800f7ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f7f0:	4293      	cmp	r3, r2
 800f7f2:	d807      	bhi.n	800f804 <sinf+0x20>
 800f7f4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800f86c <sinf+0x88>
 800f7f8:	2000      	movs	r0, #0
 800f7fa:	b003      	add	sp, #12
 800f7fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f800:	f000 bc72 	b.w	80100e8 <__kernel_sinf>
 800f804:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f808:	d304      	bcc.n	800f814 <sinf+0x30>
 800f80a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f80e:	b003      	add	sp, #12
 800f810:	f85d fb04 	ldr.w	pc, [sp], #4
 800f814:	4668      	mov	r0, sp
 800f816:	f000 fd31 	bl	801027c <__ieee754_rem_pio2f>
 800f81a:	f000 0003 	and.w	r0, r0, #3
 800f81e:	2801      	cmp	r0, #1
 800f820:	d00a      	beq.n	800f838 <sinf+0x54>
 800f822:	2802      	cmp	r0, #2
 800f824:	d00f      	beq.n	800f846 <sinf+0x62>
 800f826:	b9c0      	cbnz	r0, 800f85a <sinf+0x76>
 800f828:	eddd 0a01 	vldr	s1, [sp, #4]
 800f82c:	ed9d 0a00 	vldr	s0, [sp]
 800f830:	2001      	movs	r0, #1
 800f832:	f000 fc59 	bl	80100e8 <__kernel_sinf>
 800f836:	e7ea      	b.n	800f80e <sinf+0x2a>
 800f838:	eddd 0a01 	vldr	s1, [sp, #4]
 800f83c:	ed9d 0a00 	vldr	s0, [sp]
 800f840:	f000 fbfa 	bl	8010038 <__kernel_cosf>
 800f844:	e7e3      	b.n	800f80e <sinf+0x2a>
 800f846:	eddd 0a01 	vldr	s1, [sp, #4]
 800f84a:	ed9d 0a00 	vldr	s0, [sp]
 800f84e:	2001      	movs	r0, #1
 800f850:	f000 fc4a 	bl	80100e8 <__kernel_sinf>
 800f854:	eeb1 0a40 	vneg.f32	s0, s0
 800f858:	e7d9      	b.n	800f80e <sinf+0x2a>
 800f85a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f85e:	ed9d 0a00 	vldr	s0, [sp]
 800f862:	f000 fbe9 	bl	8010038 <__kernel_cosf>
 800f866:	e7f5      	b.n	800f854 <sinf+0x70>
 800f868:	3f490fd8 	.word	0x3f490fd8
 800f86c:	00000000 	.word	0x00000000

0800f870 <fmaxf>:
 800f870:	b508      	push	{r3, lr}
 800f872:	ed2d 8b02 	vpush	{d8}
 800f876:	eeb0 8a40 	vmov.f32	s16, s0
 800f87a:	eef0 8a60 	vmov.f32	s17, s1
 800f87e:	f000 f831 	bl	800f8e4 <__fpclassifyf>
 800f882:	b930      	cbnz	r0, 800f892 <fmaxf+0x22>
 800f884:	eeb0 8a68 	vmov.f32	s16, s17
 800f888:	eeb0 0a48 	vmov.f32	s0, s16
 800f88c:	ecbd 8b02 	vpop	{d8}
 800f890:	bd08      	pop	{r3, pc}
 800f892:	eeb0 0a68 	vmov.f32	s0, s17
 800f896:	f000 f825 	bl	800f8e4 <__fpclassifyf>
 800f89a:	2800      	cmp	r0, #0
 800f89c:	d0f4      	beq.n	800f888 <fmaxf+0x18>
 800f89e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8a6:	dded      	ble.n	800f884 <fmaxf+0x14>
 800f8a8:	e7ee      	b.n	800f888 <fmaxf+0x18>

0800f8aa <fminf>:
 800f8aa:	b508      	push	{r3, lr}
 800f8ac:	ed2d 8b02 	vpush	{d8}
 800f8b0:	eeb0 8a40 	vmov.f32	s16, s0
 800f8b4:	eef0 8a60 	vmov.f32	s17, s1
 800f8b8:	f000 f814 	bl	800f8e4 <__fpclassifyf>
 800f8bc:	b930      	cbnz	r0, 800f8cc <fminf+0x22>
 800f8be:	eeb0 8a68 	vmov.f32	s16, s17
 800f8c2:	eeb0 0a48 	vmov.f32	s0, s16
 800f8c6:	ecbd 8b02 	vpop	{d8}
 800f8ca:	bd08      	pop	{r3, pc}
 800f8cc:	eeb0 0a68 	vmov.f32	s0, s17
 800f8d0:	f000 f808 	bl	800f8e4 <__fpclassifyf>
 800f8d4:	2800      	cmp	r0, #0
 800f8d6:	d0f4      	beq.n	800f8c2 <fminf+0x18>
 800f8d8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f8dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8e0:	d5ed      	bpl.n	800f8be <fminf+0x14>
 800f8e2:	e7ee      	b.n	800f8c2 <fminf+0x18>

0800f8e4 <__fpclassifyf>:
 800f8e4:	ee10 3a10 	vmov	r3, s0
 800f8e8:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800f8ec:	d00d      	beq.n	800f90a <__fpclassifyf+0x26>
 800f8ee:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800f8f2:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800f8f6:	d30a      	bcc.n	800f90e <__fpclassifyf+0x2a>
 800f8f8:	4b07      	ldr	r3, [pc, #28]	@ (800f918 <__fpclassifyf+0x34>)
 800f8fa:	1e42      	subs	r2, r0, #1
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d908      	bls.n	800f912 <__fpclassifyf+0x2e>
 800f900:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800f904:	4258      	negs	r0, r3
 800f906:	4158      	adcs	r0, r3
 800f908:	4770      	bx	lr
 800f90a:	2002      	movs	r0, #2
 800f90c:	4770      	bx	lr
 800f90e:	2004      	movs	r0, #4
 800f910:	4770      	bx	lr
 800f912:	2003      	movs	r0, #3
 800f914:	4770      	bx	lr
 800f916:	bf00      	nop
 800f918:	007ffffe 	.word	0x007ffffe

0800f91c <__ieee754_sqrtf>:
 800f91c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f920:	4770      	bx	lr
 800f922:	0000      	movs	r0, r0
 800f924:	0000      	movs	r0, r0
	...

0800f928 <__kernel_cos>:
 800f928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f92c:	ec57 6b10 	vmov	r6, r7, d0
 800f930:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f934:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800f938:	ed8d 1b00 	vstr	d1, [sp]
 800f93c:	d206      	bcs.n	800f94c <__kernel_cos+0x24>
 800f93e:	4630      	mov	r0, r6
 800f940:	4639      	mov	r1, r7
 800f942:	f7f1 f8bf 	bl	8000ac4 <__aeabi_d2iz>
 800f946:	2800      	cmp	r0, #0
 800f948:	f000 8088 	beq.w	800fa5c <__kernel_cos+0x134>
 800f94c:	4632      	mov	r2, r6
 800f94e:	463b      	mov	r3, r7
 800f950:	4630      	mov	r0, r6
 800f952:	4639      	mov	r1, r7
 800f954:	f7f0 fe1c 	bl	8000590 <__aeabi_dmul>
 800f958:	4b51      	ldr	r3, [pc, #324]	@ (800faa0 <__kernel_cos+0x178>)
 800f95a:	2200      	movs	r2, #0
 800f95c:	4604      	mov	r4, r0
 800f95e:	460d      	mov	r5, r1
 800f960:	f7f0 fe16 	bl	8000590 <__aeabi_dmul>
 800f964:	a340      	add	r3, pc, #256	@ (adr r3, 800fa68 <__kernel_cos+0x140>)
 800f966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f96a:	4682      	mov	sl, r0
 800f96c:	468b      	mov	fp, r1
 800f96e:	4620      	mov	r0, r4
 800f970:	4629      	mov	r1, r5
 800f972:	f7f0 fe0d 	bl	8000590 <__aeabi_dmul>
 800f976:	a33e      	add	r3, pc, #248	@ (adr r3, 800fa70 <__kernel_cos+0x148>)
 800f978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f97c:	f7f0 fc52 	bl	8000224 <__adddf3>
 800f980:	4622      	mov	r2, r4
 800f982:	462b      	mov	r3, r5
 800f984:	f7f0 fe04 	bl	8000590 <__aeabi_dmul>
 800f988:	a33b      	add	r3, pc, #236	@ (adr r3, 800fa78 <__kernel_cos+0x150>)
 800f98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f98e:	f7f0 fc47 	bl	8000220 <__aeabi_dsub>
 800f992:	4622      	mov	r2, r4
 800f994:	462b      	mov	r3, r5
 800f996:	f7f0 fdfb 	bl	8000590 <__aeabi_dmul>
 800f99a:	a339      	add	r3, pc, #228	@ (adr r3, 800fa80 <__kernel_cos+0x158>)
 800f99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a0:	f7f0 fc40 	bl	8000224 <__adddf3>
 800f9a4:	4622      	mov	r2, r4
 800f9a6:	462b      	mov	r3, r5
 800f9a8:	f7f0 fdf2 	bl	8000590 <__aeabi_dmul>
 800f9ac:	a336      	add	r3, pc, #216	@ (adr r3, 800fa88 <__kernel_cos+0x160>)
 800f9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b2:	f7f0 fc35 	bl	8000220 <__aeabi_dsub>
 800f9b6:	4622      	mov	r2, r4
 800f9b8:	462b      	mov	r3, r5
 800f9ba:	f7f0 fde9 	bl	8000590 <__aeabi_dmul>
 800f9be:	a334      	add	r3, pc, #208	@ (adr r3, 800fa90 <__kernel_cos+0x168>)
 800f9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c4:	f7f0 fc2e 	bl	8000224 <__adddf3>
 800f9c8:	4622      	mov	r2, r4
 800f9ca:	462b      	mov	r3, r5
 800f9cc:	f7f0 fde0 	bl	8000590 <__aeabi_dmul>
 800f9d0:	4622      	mov	r2, r4
 800f9d2:	462b      	mov	r3, r5
 800f9d4:	f7f0 fddc 	bl	8000590 <__aeabi_dmul>
 800f9d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9dc:	4604      	mov	r4, r0
 800f9de:	460d      	mov	r5, r1
 800f9e0:	4630      	mov	r0, r6
 800f9e2:	4639      	mov	r1, r7
 800f9e4:	f7f0 fdd4 	bl	8000590 <__aeabi_dmul>
 800f9e8:	460b      	mov	r3, r1
 800f9ea:	4602      	mov	r2, r0
 800f9ec:	4629      	mov	r1, r5
 800f9ee:	4620      	mov	r0, r4
 800f9f0:	f7f0 fc16 	bl	8000220 <__aeabi_dsub>
 800f9f4:	4b2b      	ldr	r3, [pc, #172]	@ (800faa4 <__kernel_cos+0x17c>)
 800f9f6:	4598      	cmp	r8, r3
 800f9f8:	4606      	mov	r6, r0
 800f9fa:	460f      	mov	r7, r1
 800f9fc:	d810      	bhi.n	800fa20 <__kernel_cos+0xf8>
 800f9fe:	4602      	mov	r2, r0
 800fa00:	460b      	mov	r3, r1
 800fa02:	4650      	mov	r0, sl
 800fa04:	4659      	mov	r1, fp
 800fa06:	f7f0 fc0b 	bl	8000220 <__aeabi_dsub>
 800fa0a:	460b      	mov	r3, r1
 800fa0c:	4926      	ldr	r1, [pc, #152]	@ (800faa8 <__kernel_cos+0x180>)
 800fa0e:	4602      	mov	r2, r0
 800fa10:	2000      	movs	r0, #0
 800fa12:	f7f0 fc05 	bl	8000220 <__aeabi_dsub>
 800fa16:	ec41 0b10 	vmov	d0, r0, r1
 800fa1a:	b003      	add	sp, #12
 800fa1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa20:	4b22      	ldr	r3, [pc, #136]	@ (800faac <__kernel_cos+0x184>)
 800fa22:	4921      	ldr	r1, [pc, #132]	@ (800faa8 <__kernel_cos+0x180>)
 800fa24:	4598      	cmp	r8, r3
 800fa26:	bf8c      	ite	hi
 800fa28:	4d21      	ldrhi	r5, [pc, #132]	@ (800fab0 <__kernel_cos+0x188>)
 800fa2a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800fa2e:	2400      	movs	r4, #0
 800fa30:	4622      	mov	r2, r4
 800fa32:	462b      	mov	r3, r5
 800fa34:	2000      	movs	r0, #0
 800fa36:	f7f0 fbf3 	bl	8000220 <__aeabi_dsub>
 800fa3a:	4622      	mov	r2, r4
 800fa3c:	4680      	mov	r8, r0
 800fa3e:	4689      	mov	r9, r1
 800fa40:	462b      	mov	r3, r5
 800fa42:	4650      	mov	r0, sl
 800fa44:	4659      	mov	r1, fp
 800fa46:	f7f0 fbeb 	bl	8000220 <__aeabi_dsub>
 800fa4a:	4632      	mov	r2, r6
 800fa4c:	463b      	mov	r3, r7
 800fa4e:	f7f0 fbe7 	bl	8000220 <__aeabi_dsub>
 800fa52:	4602      	mov	r2, r0
 800fa54:	460b      	mov	r3, r1
 800fa56:	4640      	mov	r0, r8
 800fa58:	4649      	mov	r1, r9
 800fa5a:	e7da      	b.n	800fa12 <__kernel_cos+0xea>
 800fa5c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800fa98 <__kernel_cos+0x170>
 800fa60:	e7db      	b.n	800fa1a <__kernel_cos+0xf2>
 800fa62:	bf00      	nop
 800fa64:	f3af 8000 	nop.w
 800fa68:	be8838d4 	.word	0xbe8838d4
 800fa6c:	bda8fae9 	.word	0xbda8fae9
 800fa70:	bdb4b1c4 	.word	0xbdb4b1c4
 800fa74:	3e21ee9e 	.word	0x3e21ee9e
 800fa78:	809c52ad 	.word	0x809c52ad
 800fa7c:	3e927e4f 	.word	0x3e927e4f
 800fa80:	19cb1590 	.word	0x19cb1590
 800fa84:	3efa01a0 	.word	0x3efa01a0
 800fa88:	16c15177 	.word	0x16c15177
 800fa8c:	3f56c16c 	.word	0x3f56c16c
 800fa90:	5555554c 	.word	0x5555554c
 800fa94:	3fa55555 	.word	0x3fa55555
 800fa98:	00000000 	.word	0x00000000
 800fa9c:	3ff00000 	.word	0x3ff00000
 800faa0:	3fe00000 	.word	0x3fe00000
 800faa4:	3fd33332 	.word	0x3fd33332
 800faa8:	3ff00000 	.word	0x3ff00000
 800faac:	3fe90000 	.word	0x3fe90000
 800fab0:	3fd20000 	.word	0x3fd20000
 800fab4:	00000000 	.word	0x00000000

0800fab8 <__kernel_sin>:
 800fab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fabc:	ec55 4b10 	vmov	r4, r5, d0
 800fac0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800fac4:	b085      	sub	sp, #20
 800fac6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800faca:	ed8d 1b02 	vstr	d1, [sp, #8]
 800face:	4680      	mov	r8, r0
 800fad0:	d205      	bcs.n	800fade <__kernel_sin+0x26>
 800fad2:	4620      	mov	r0, r4
 800fad4:	4629      	mov	r1, r5
 800fad6:	f7f0 fff5 	bl	8000ac4 <__aeabi_d2iz>
 800fada:	2800      	cmp	r0, #0
 800fadc:	d052      	beq.n	800fb84 <__kernel_sin+0xcc>
 800fade:	4622      	mov	r2, r4
 800fae0:	462b      	mov	r3, r5
 800fae2:	4620      	mov	r0, r4
 800fae4:	4629      	mov	r1, r5
 800fae6:	f7f0 fd53 	bl	8000590 <__aeabi_dmul>
 800faea:	4682      	mov	sl, r0
 800faec:	468b      	mov	fp, r1
 800faee:	4602      	mov	r2, r0
 800faf0:	460b      	mov	r3, r1
 800faf2:	4620      	mov	r0, r4
 800faf4:	4629      	mov	r1, r5
 800faf6:	f7f0 fd4b 	bl	8000590 <__aeabi_dmul>
 800fafa:	a342      	add	r3, pc, #264	@ (adr r3, 800fc04 <__kernel_sin+0x14c>)
 800fafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb00:	e9cd 0100 	strd	r0, r1, [sp]
 800fb04:	4650      	mov	r0, sl
 800fb06:	4659      	mov	r1, fp
 800fb08:	f7f0 fd42 	bl	8000590 <__aeabi_dmul>
 800fb0c:	a33f      	add	r3, pc, #252	@ (adr r3, 800fc0c <__kernel_sin+0x154>)
 800fb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb12:	f7f0 fb85 	bl	8000220 <__aeabi_dsub>
 800fb16:	4652      	mov	r2, sl
 800fb18:	465b      	mov	r3, fp
 800fb1a:	f7f0 fd39 	bl	8000590 <__aeabi_dmul>
 800fb1e:	a33d      	add	r3, pc, #244	@ (adr r3, 800fc14 <__kernel_sin+0x15c>)
 800fb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb24:	f7f0 fb7e 	bl	8000224 <__adddf3>
 800fb28:	4652      	mov	r2, sl
 800fb2a:	465b      	mov	r3, fp
 800fb2c:	f7f0 fd30 	bl	8000590 <__aeabi_dmul>
 800fb30:	a33a      	add	r3, pc, #232	@ (adr r3, 800fc1c <__kernel_sin+0x164>)
 800fb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb36:	f7f0 fb73 	bl	8000220 <__aeabi_dsub>
 800fb3a:	4652      	mov	r2, sl
 800fb3c:	465b      	mov	r3, fp
 800fb3e:	f7f0 fd27 	bl	8000590 <__aeabi_dmul>
 800fb42:	a338      	add	r3, pc, #224	@ (adr r3, 800fc24 <__kernel_sin+0x16c>)
 800fb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb48:	f7f0 fb6c 	bl	8000224 <__adddf3>
 800fb4c:	4606      	mov	r6, r0
 800fb4e:	460f      	mov	r7, r1
 800fb50:	f1b8 0f00 	cmp.w	r8, #0
 800fb54:	d11b      	bne.n	800fb8e <__kernel_sin+0xd6>
 800fb56:	4602      	mov	r2, r0
 800fb58:	460b      	mov	r3, r1
 800fb5a:	4650      	mov	r0, sl
 800fb5c:	4659      	mov	r1, fp
 800fb5e:	f7f0 fd17 	bl	8000590 <__aeabi_dmul>
 800fb62:	a325      	add	r3, pc, #148	@ (adr r3, 800fbf8 <__kernel_sin+0x140>)
 800fb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb68:	f7f0 fb5a 	bl	8000220 <__aeabi_dsub>
 800fb6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb70:	f7f0 fd0e 	bl	8000590 <__aeabi_dmul>
 800fb74:	4602      	mov	r2, r0
 800fb76:	460b      	mov	r3, r1
 800fb78:	4620      	mov	r0, r4
 800fb7a:	4629      	mov	r1, r5
 800fb7c:	f7f0 fb52 	bl	8000224 <__adddf3>
 800fb80:	4604      	mov	r4, r0
 800fb82:	460d      	mov	r5, r1
 800fb84:	ec45 4b10 	vmov	d0, r4, r5
 800fb88:	b005      	add	sp, #20
 800fb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb92:	4b1b      	ldr	r3, [pc, #108]	@ (800fc00 <__kernel_sin+0x148>)
 800fb94:	2200      	movs	r2, #0
 800fb96:	f7f0 fcfb 	bl	8000590 <__aeabi_dmul>
 800fb9a:	4632      	mov	r2, r6
 800fb9c:	4680      	mov	r8, r0
 800fb9e:	4689      	mov	r9, r1
 800fba0:	463b      	mov	r3, r7
 800fba2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fba6:	f7f0 fcf3 	bl	8000590 <__aeabi_dmul>
 800fbaa:	4602      	mov	r2, r0
 800fbac:	460b      	mov	r3, r1
 800fbae:	4640      	mov	r0, r8
 800fbb0:	4649      	mov	r1, r9
 800fbb2:	f7f0 fb35 	bl	8000220 <__aeabi_dsub>
 800fbb6:	4652      	mov	r2, sl
 800fbb8:	465b      	mov	r3, fp
 800fbba:	f7f0 fce9 	bl	8000590 <__aeabi_dmul>
 800fbbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fbc2:	f7f0 fb2d 	bl	8000220 <__aeabi_dsub>
 800fbc6:	a30c      	add	r3, pc, #48	@ (adr r3, 800fbf8 <__kernel_sin+0x140>)
 800fbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbcc:	4606      	mov	r6, r0
 800fbce:	460f      	mov	r7, r1
 800fbd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fbd4:	f7f0 fcdc 	bl	8000590 <__aeabi_dmul>
 800fbd8:	4602      	mov	r2, r0
 800fbda:	460b      	mov	r3, r1
 800fbdc:	4630      	mov	r0, r6
 800fbde:	4639      	mov	r1, r7
 800fbe0:	f7f0 fb20 	bl	8000224 <__adddf3>
 800fbe4:	4602      	mov	r2, r0
 800fbe6:	460b      	mov	r3, r1
 800fbe8:	4620      	mov	r0, r4
 800fbea:	4629      	mov	r1, r5
 800fbec:	f7f0 fb18 	bl	8000220 <__aeabi_dsub>
 800fbf0:	e7c6      	b.n	800fb80 <__kernel_sin+0xc8>
 800fbf2:	bf00      	nop
 800fbf4:	f3af 8000 	nop.w
 800fbf8:	55555549 	.word	0x55555549
 800fbfc:	3fc55555 	.word	0x3fc55555
 800fc00:	3fe00000 	.word	0x3fe00000
 800fc04:	5acfd57c 	.word	0x5acfd57c
 800fc08:	3de5d93a 	.word	0x3de5d93a
 800fc0c:	8a2b9ceb 	.word	0x8a2b9ceb
 800fc10:	3e5ae5e6 	.word	0x3e5ae5e6
 800fc14:	57b1fe7d 	.word	0x57b1fe7d
 800fc18:	3ec71de3 	.word	0x3ec71de3
 800fc1c:	19c161d5 	.word	0x19c161d5
 800fc20:	3f2a01a0 	.word	0x3f2a01a0
 800fc24:	1110f8a6 	.word	0x1110f8a6
 800fc28:	3f811111 	.word	0x3f811111
 800fc2c:	00000000 	.word	0x00000000

0800fc30 <__ieee754_rem_pio2>:
 800fc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc34:	ec57 6b10 	vmov	r6, r7, d0
 800fc38:	4bc5      	ldr	r3, [pc, #788]	@ (800ff50 <__ieee754_rem_pio2+0x320>)
 800fc3a:	b08d      	sub	sp, #52	@ 0x34
 800fc3c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800fc40:	4598      	cmp	r8, r3
 800fc42:	4604      	mov	r4, r0
 800fc44:	9704      	str	r7, [sp, #16]
 800fc46:	d807      	bhi.n	800fc58 <__ieee754_rem_pio2+0x28>
 800fc48:	2200      	movs	r2, #0
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	ed80 0b00 	vstr	d0, [r0]
 800fc50:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fc54:	2500      	movs	r5, #0
 800fc56:	e028      	b.n	800fcaa <__ieee754_rem_pio2+0x7a>
 800fc58:	4bbe      	ldr	r3, [pc, #760]	@ (800ff54 <__ieee754_rem_pio2+0x324>)
 800fc5a:	4598      	cmp	r8, r3
 800fc5c:	d878      	bhi.n	800fd50 <__ieee754_rem_pio2+0x120>
 800fc5e:	9b04      	ldr	r3, [sp, #16]
 800fc60:	4dbd      	ldr	r5, [pc, #756]	@ (800ff58 <__ieee754_rem_pio2+0x328>)
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	4630      	mov	r0, r6
 800fc66:	a3ac      	add	r3, pc, #688	@ (adr r3, 800ff18 <__ieee754_rem_pio2+0x2e8>)
 800fc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc6c:	4639      	mov	r1, r7
 800fc6e:	dd38      	ble.n	800fce2 <__ieee754_rem_pio2+0xb2>
 800fc70:	f7f0 fad6 	bl	8000220 <__aeabi_dsub>
 800fc74:	45a8      	cmp	r8, r5
 800fc76:	4606      	mov	r6, r0
 800fc78:	460f      	mov	r7, r1
 800fc7a:	d01a      	beq.n	800fcb2 <__ieee754_rem_pio2+0x82>
 800fc7c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800ff20 <__ieee754_rem_pio2+0x2f0>)
 800fc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc82:	f7f0 facd 	bl	8000220 <__aeabi_dsub>
 800fc86:	4602      	mov	r2, r0
 800fc88:	460b      	mov	r3, r1
 800fc8a:	4680      	mov	r8, r0
 800fc8c:	4689      	mov	r9, r1
 800fc8e:	4630      	mov	r0, r6
 800fc90:	4639      	mov	r1, r7
 800fc92:	f7f0 fac5 	bl	8000220 <__aeabi_dsub>
 800fc96:	a3a2      	add	r3, pc, #648	@ (adr r3, 800ff20 <__ieee754_rem_pio2+0x2f0>)
 800fc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc9c:	f7f0 fac0 	bl	8000220 <__aeabi_dsub>
 800fca0:	e9c4 8900 	strd	r8, r9, [r4]
 800fca4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fca8:	2501      	movs	r5, #1
 800fcaa:	4628      	mov	r0, r5
 800fcac:	b00d      	add	sp, #52	@ 0x34
 800fcae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcb2:	a39d      	add	r3, pc, #628	@ (adr r3, 800ff28 <__ieee754_rem_pio2+0x2f8>)
 800fcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcb8:	f7f0 fab2 	bl	8000220 <__aeabi_dsub>
 800fcbc:	a39c      	add	r3, pc, #624	@ (adr r3, 800ff30 <__ieee754_rem_pio2+0x300>)
 800fcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc2:	4606      	mov	r6, r0
 800fcc4:	460f      	mov	r7, r1
 800fcc6:	f7f0 faab 	bl	8000220 <__aeabi_dsub>
 800fcca:	4602      	mov	r2, r0
 800fccc:	460b      	mov	r3, r1
 800fcce:	4680      	mov	r8, r0
 800fcd0:	4689      	mov	r9, r1
 800fcd2:	4630      	mov	r0, r6
 800fcd4:	4639      	mov	r1, r7
 800fcd6:	f7f0 faa3 	bl	8000220 <__aeabi_dsub>
 800fcda:	a395      	add	r3, pc, #596	@ (adr r3, 800ff30 <__ieee754_rem_pio2+0x300>)
 800fcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce0:	e7dc      	b.n	800fc9c <__ieee754_rem_pio2+0x6c>
 800fce2:	f7f0 fa9f 	bl	8000224 <__adddf3>
 800fce6:	45a8      	cmp	r8, r5
 800fce8:	4606      	mov	r6, r0
 800fcea:	460f      	mov	r7, r1
 800fcec:	d018      	beq.n	800fd20 <__ieee754_rem_pio2+0xf0>
 800fcee:	a38c      	add	r3, pc, #560	@ (adr r3, 800ff20 <__ieee754_rem_pio2+0x2f0>)
 800fcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf4:	f7f0 fa96 	bl	8000224 <__adddf3>
 800fcf8:	4602      	mov	r2, r0
 800fcfa:	460b      	mov	r3, r1
 800fcfc:	4680      	mov	r8, r0
 800fcfe:	4689      	mov	r9, r1
 800fd00:	4630      	mov	r0, r6
 800fd02:	4639      	mov	r1, r7
 800fd04:	f7f0 fa8c 	bl	8000220 <__aeabi_dsub>
 800fd08:	a385      	add	r3, pc, #532	@ (adr r3, 800ff20 <__ieee754_rem_pio2+0x2f0>)
 800fd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd0e:	f7f0 fa89 	bl	8000224 <__adddf3>
 800fd12:	f04f 35ff 	mov.w	r5, #4294967295
 800fd16:	e9c4 8900 	strd	r8, r9, [r4]
 800fd1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fd1e:	e7c4      	b.n	800fcaa <__ieee754_rem_pio2+0x7a>
 800fd20:	a381      	add	r3, pc, #516	@ (adr r3, 800ff28 <__ieee754_rem_pio2+0x2f8>)
 800fd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd26:	f7f0 fa7d 	bl	8000224 <__adddf3>
 800fd2a:	a381      	add	r3, pc, #516	@ (adr r3, 800ff30 <__ieee754_rem_pio2+0x300>)
 800fd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd30:	4606      	mov	r6, r0
 800fd32:	460f      	mov	r7, r1
 800fd34:	f7f0 fa76 	bl	8000224 <__adddf3>
 800fd38:	4602      	mov	r2, r0
 800fd3a:	460b      	mov	r3, r1
 800fd3c:	4680      	mov	r8, r0
 800fd3e:	4689      	mov	r9, r1
 800fd40:	4630      	mov	r0, r6
 800fd42:	4639      	mov	r1, r7
 800fd44:	f7f0 fa6c 	bl	8000220 <__aeabi_dsub>
 800fd48:	a379      	add	r3, pc, #484	@ (adr r3, 800ff30 <__ieee754_rem_pio2+0x300>)
 800fd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd4e:	e7de      	b.n	800fd0e <__ieee754_rem_pio2+0xde>
 800fd50:	4b82      	ldr	r3, [pc, #520]	@ (800ff5c <__ieee754_rem_pio2+0x32c>)
 800fd52:	4598      	cmp	r8, r3
 800fd54:	f200 80d1 	bhi.w	800fefa <__ieee754_rem_pio2+0x2ca>
 800fd58:	f000 f966 	bl	8010028 <fabs>
 800fd5c:	ec57 6b10 	vmov	r6, r7, d0
 800fd60:	a375      	add	r3, pc, #468	@ (adr r3, 800ff38 <__ieee754_rem_pio2+0x308>)
 800fd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd66:	4630      	mov	r0, r6
 800fd68:	4639      	mov	r1, r7
 800fd6a:	f7f0 fc11 	bl	8000590 <__aeabi_dmul>
 800fd6e:	4b7c      	ldr	r3, [pc, #496]	@ (800ff60 <__ieee754_rem_pio2+0x330>)
 800fd70:	2200      	movs	r2, #0
 800fd72:	f7f0 fa57 	bl	8000224 <__adddf3>
 800fd76:	f7f0 fea5 	bl	8000ac4 <__aeabi_d2iz>
 800fd7a:	4605      	mov	r5, r0
 800fd7c:	f7f0 fb9e 	bl	80004bc <__aeabi_i2d>
 800fd80:	4602      	mov	r2, r0
 800fd82:	460b      	mov	r3, r1
 800fd84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fd88:	a363      	add	r3, pc, #396	@ (adr r3, 800ff18 <__ieee754_rem_pio2+0x2e8>)
 800fd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd8e:	f7f0 fbff 	bl	8000590 <__aeabi_dmul>
 800fd92:	4602      	mov	r2, r0
 800fd94:	460b      	mov	r3, r1
 800fd96:	4630      	mov	r0, r6
 800fd98:	4639      	mov	r1, r7
 800fd9a:	f7f0 fa41 	bl	8000220 <__aeabi_dsub>
 800fd9e:	a360      	add	r3, pc, #384	@ (adr r3, 800ff20 <__ieee754_rem_pio2+0x2f0>)
 800fda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda4:	4682      	mov	sl, r0
 800fda6:	468b      	mov	fp, r1
 800fda8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdac:	f7f0 fbf0 	bl	8000590 <__aeabi_dmul>
 800fdb0:	2d1f      	cmp	r5, #31
 800fdb2:	4606      	mov	r6, r0
 800fdb4:	460f      	mov	r7, r1
 800fdb6:	dc0c      	bgt.n	800fdd2 <__ieee754_rem_pio2+0x1a2>
 800fdb8:	4b6a      	ldr	r3, [pc, #424]	@ (800ff64 <__ieee754_rem_pio2+0x334>)
 800fdba:	1e6a      	subs	r2, r5, #1
 800fdbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdc0:	4543      	cmp	r3, r8
 800fdc2:	d006      	beq.n	800fdd2 <__ieee754_rem_pio2+0x1a2>
 800fdc4:	4632      	mov	r2, r6
 800fdc6:	463b      	mov	r3, r7
 800fdc8:	4650      	mov	r0, sl
 800fdca:	4659      	mov	r1, fp
 800fdcc:	f7f0 fa28 	bl	8000220 <__aeabi_dsub>
 800fdd0:	e00e      	b.n	800fdf0 <__ieee754_rem_pio2+0x1c0>
 800fdd2:	463b      	mov	r3, r7
 800fdd4:	4632      	mov	r2, r6
 800fdd6:	4650      	mov	r0, sl
 800fdd8:	4659      	mov	r1, fp
 800fdda:	f7f0 fa21 	bl	8000220 <__aeabi_dsub>
 800fdde:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fde2:	9305      	str	r3, [sp, #20]
 800fde4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fde8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800fdec:	2b10      	cmp	r3, #16
 800fdee:	dc02      	bgt.n	800fdf6 <__ieee754_rem_pio2+0x1c6>
 800fdf0:	e9c4 0100 	strd	r0, r1, [r4]
 800fdf4:	e039      	b.n	800fe6a <__ieee754_rem_pio2+0x23a>
 800fdf6:	a34c      	add	r3, pc, #304	@ (adr r3, 800ff28 <__ieee754_rem_pio2+0x2f8>)
 800fdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe00:	f7f0 fbc6 	bl	8000590 <__aeabi_dmul>
 800fe04:	4606      	mov	r6, r0
 800fe06:	460f      	mov	r7, r1
 800fe08:	4602      	mov	r2, r0
 800fe0a:	460b      	mov	r3, r1
 800fe0c:	4650      	mov	r0, sl
 800fe0e:	4659      	mov	r1, fp
 800fe10:	f7f0 fa06 	bl	8000220 <__aeabi_dsub>
 800fe14:	4602      	mov	r2, r0
 800fe16:	460b      	mov	r3, r1
 800fe18:	4680      	mov	r8, r0
 800fe1a:	4689      	mov	r9, r1
 800fe1c:	4650      	mov	r0, sl
 800fe1e:	4659      	mov	r1, fp
 800fe20:	f7f0 f9fe 	bl	8000220 <__aeabi_dsub>
 800fe24:	4632      	mov	r2, r6
 800fe26:	463b      	mov	r3, r7
 800fe28:	f7f0 f9fa 	bl	8000220 <__aeabi_dsub>
 800fe2c:	a340      	add	r3, pc, #256	@ (adr r3, 800ff30 <__ieee754_rem_pio2+0x300>)
 800fe2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe32:	4606      	mov	r6, r0
 800fe34:	460f      	mov	r7, r1
 800fe36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe3a:	f7f0 fba9 	bl	8000590 <__aeabi_dmul>
 800fe3e:	4632      	mov	r2, r6
 800fe40:	463b      	mov	r3, r7
 800fe42:	f7f0 f9ed 	bl	8000220 <__aeabi_dsub>
 800fe46:	4602      	mov	r2, r0
 800fe48:	460b      	mov	r3, r1
 800fe4a:	4606      	mov	r6, r0
 800fe4c:	460f      	mov	r7, r1
 800fe4e:	4640      	mov	r0, r8
 800fe50:	4649      	mov	r1, r9
 800fe52:	f7f0 f9e5 	bl	8000220 <__aeabi_dsub>
 800fe56:	9a05      	ldr	r2, [sp, #20]
 800fe58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fe5c:	1ad3      	subs	r3, r2, r3
 800fe5e:	2b31      	cmp	r3, #49	@ 0x31
 800fe60:	dc20      	bgt.n	800fea4 <__ieee754_rem_pio2+0x274>
 800fe62:	e9c4 0100 	strd	r0, r1, [r4]
 800fe66:	46c2      	mov	sl, r8
 800fe68:	46cb      	mov	fp, r9
 800fe6a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800fe6e:	4650      	mov	r0, sl
 800fe70:	4642      	mov	r2, r8
 800fe72:	464b      	mov	r3, r9
 800fe74:	4659      	mov	r1, fp
 800fe76:	f7f0 f9d3 	bl	8000220 <__aeabi_dsub>
 800fe7a:	463b      	mov	r3, r7
 800fe7c:	4632      	mov	r2, r6
 800fe7e:	f7f0 f9cf 	bl	8000220 <__aeabi_dsub>
 800fe82:	9b04      	ldr	r3, [sp, #16]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fe8a:	f6bf af0e 	bge.w	800fcaa <__ieee754_rem_pio2+0x7a>
 800fe8e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800fe92:	6063      	str	r3, [r4, #4]
 800fe94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fe98:	f8c4 8000 	str.w	r8, [r4]
 800fe9c:	60a0      	str	r0, [r4, #8]
 800fe9e:	60e3      	str	r3, [r4, #12]
 800fea0:	426d      	negs	r5, r5
 800fea2:	e702      	b.n	800fcaa <__ieee754_rem_pio2+0x7a>
 800fea4:	a326      	add	r3, pc, #152	@ (adr r3, 800ff40 <__ieee754_rem_pio2+0x310>)
 800fea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800feae:	f7f0 fb6f 	bl	8000590 <__aeabi_dmul>
 800feb2:	4606      	mov	r6, r0
 800feb4:	460f      	mov	r7, r1
 800feb6:	4602      	mov	r2, r0
 800feb8:	460b      	mov	r3, r1
 800feba:	4640      	mov	r0, r8
 800febc:	4649      	mov	r1, r9
 800febe:	f7f0 f9af 	bl	8000220 <__aeabi_dsub>
 800fec2:	4602      	mov	r2, r0
 800fec4:	460b      	mov	r3, r1
 800fec6:	4682      	mov	sl, r0
 800fec8:	468b      	mov	fp, r1
 800feca:	4640      	mov	r0, r8
 800fecc:	4649      	mov	r1, r9
 800fece:	f7f0 f9a7 	bl	8000220 <__aeabi_dsub>
 800fed2:	4632      	mov	r2, r6
 800fed4:	463b      	mov	r3, r7
 800fed6:	f7f0 f9a3 	bl	8000220 <__aeabi_dsub>
 800feda:	a31b      	add	r3, pc, #108	@ (adr r3, 800ff48 <__ieee754_rem_pio2+0x318>)
 800fedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee0:	4606      	mov	r6, r0
 800fee2:	460f      	mov	r7, r1
 800fee4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fee8:	f7f0 fb52 	bl	8000590 <__aeabi_dmul>
 800feec:	4632      	mov	r2, r6
 800feee:	463b      	mov	r3, r7
 800fef0:	f7f0 f996 	bl	8000220 <__aeabi_dsub>
 800fef4:	4606      	mov	r6, r0
 800fef6:	460f      	mov	r7, r1
 800fef8:	e764      	b.n	800fdc4 <__ieee754_rem_pio2+0x194>
 800fefa:	4b1b      	ldr	r3, [pc, #108]	@ (800ff68 <__ieee754_rem_pio2+0x338>)
 800fefc:	4598      	cmp	r8, r3
 800fefe:	d935      	bls.n	800ff6c <__ieee754_rem_pio2+0x33c>
 800ff00:	4632      	mov	r2, r6
 800ff02:	463b      	mov	r3, r7
 800ff04:	4630      	mov	r0, r6
 800ff06:	4639      	mov	r1, r7
 800ff08:	f7f0 f98a 	bl	8000220 <__aeabi_dsub>
 800ff0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ff10:	e9c4 0100 	strd	r0, r1, [r4]
 800ff14:	e69e      	b.n	800fc54 <__ieee754_rem_pio2+0x24>
 800ff16:	bf00      	nop
 800ff18:	54400000 	.word	0x54400000
 800ff1c:	3ff921fb 	.word	0x3ff921fb
 800ff20:	1a626331 	.word	0x1a626331
 800ff24:	3dd0b461 	.word	0x3dd0b461
 800ff28:	1a600000 	.word	0x1a600000
 800ff2c:	3dd0b461 	.word	0x3dd0b461
 800ff30:	2e037073 	.word	0x2e037073
 800ff34:	3ba3198a 	.word	0x3ba3198a
 800ff38:	6dc9c883 	.word	0x6dc9c883
 800ff3c:	3fe45f30 	.word	0x3fe45f30
 800ff40:	2e000000 	.word	0x2e000000
 800ff44:	3ba3198a 	.word	0x3ba3198a
 800ff48:	252049c1 	.word	0x252049c1
 800ff4c:	397b839a 	.word	0x397b839a
 800ff50:	3fe921fb 	.word	0x3fe921fb
 800ff54:	4002d97b 	.word	0x4002d97b
 800ff58:	3ff921fb 	.word	0x3ff921fb
 800ff5c:	413921fb 	.word	0x413921fb
 800ff60:	3fe00000 	.word	0x3fe00000
 800ff64:	08011418 	.word	0x08011418
 800ff68:	7fefffff 	.word	0x7fefffff
 800ff6c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ff70:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800ff74:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ff78:	4630      	mov	r0, r6
 800ff7a:	460f      	mov	r7, r1
 800ff7c:	f7f0 fda2 	bl	8000ac4 <__aeabi_d2iz>
 800ff80:	f7f0 fa9c 	bl	80004bc <__aeabi_i2d>
 800ff84:	4602      	mov	r2, r0
 800ff86:	460b      	mov	r3, r1
 800ff88:	4630      	mov	r0, r6
 800ff8a:	4639      	mov	r1, r7
 800ff8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ff90:	f7f0 f946 	bl	8000220 <__aeabi_dsub>
 800ff94:	4b22      	ldr	r3, [pc, #136]	@ (8010020 <__ieee754_rem_pio2+0x3f0>)
 800ff96:	2200      	movs	r2, #0
 800ff98:	f7f0 fafa 	bl	8000590 <__aeabi_dmul>
 800ff9c:	460f      	mov	r7, r1
 800ff9e:	4606      	mov	r6, r0
 800ffa0:	f7f0 fd90 	bl	8000ac4 <__aeabi_d2iz>
 800ffa4:	f7f0 fa8a 	bl	80004bc <__aeabi_i2d>
 800ffa8:	4602      	mov	r2, r0
 800ffaa:	460b      	mov	r3, r1
 800ffac:	4630      	mov	r0, r6
 800ffae:	4639      	mov	r1, r7
 800ffb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ffb4:	f7f0 f934 	bl	8000220 <__aeabi_dsub>
 800ffb8:	4b19      	ldr	r3, [pc, #100]	@ (8010020 <__ieee754_rem_pio2+0x3f0>)
 800ffba:	2200      	movs	r2, #0
 800ffbc:	f7f0 fae8 	bl	8000590 <__aeabi_dmul>
 800ffc0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800ffc4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800ffc8:	f04f 0803 	mov.w	r8, #3
 800ffcc:	2600      	movs	r6, #0
 800ffce:	2700      	movs	r7, #0
 800ffd0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ffd4:	4632      	mov	r2, r6
 800ffd6:	463b      	mov	r3, r7
 800ffd8:	46c2      	mov	sl, r8
 800ffda:	f108 38ff 	add.w	r8, r8, #4294967295
 800ffde:	f7f0 fd3f 	bl	8000a60 <__aeabi_dcmpeq>
 800ffe2:	2800      	cmp	r0, #0
 800ffe4:	d1f4      	bne.n	800ffd0 <__ieee754_rem_pio2+0x3a0>
 800ffe6:	4b0f      	ldr	r3, [pc, #60]	@ (8010024 <__ieee754_rem_pio2+0x3f4>)
 800ffe8:	9301      	str	r3, [sp, #4]
 800ffea:	2302      	movs	r3, #2
 800ffec:	9300      	str	r3, [sp, #0]
 800ffee:	462a      	mov	r2, r5
 800fff0:	4653      	mov	r3, sl
 800fff2:	4621      	mov	r1, r4
 800fff4:	a806      	add	r0, sp, #24
 800fff6:	f000 fb5b 	bl	80106b0 <__kernel_rem_pio2>
 800fffa:	9b04      	ldr	r3, [sp, #16]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	4605      	mov	r5, r0
 8010000:	f6bf ae53 	bge.w	800fcaa <__ieee754_rem_pio2+0x7a>
 8010004:	e9d4 2100 	ldrd	r2, r1, [r4]
 8010008:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801000c:	e9c4 2300 	strd	r2, r3, [r4]
 8010010:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8010014:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010018:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801001c:	e740      	b.n	800fea0 <__ieee754_rem_pio2+0x270>
 801001e:	bf00      	nop
 8010020:	41700000 	.word	0x41700000
 8010024:	08011498 	.word	0x08011498

08010028 <fabs>:
 8010028:	ec51 0b10 	vmov	r0, r1, d0
 801002c:	4602      	mov	r2, r0
 801002e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010032:	ec43 2b10 	vmov	d0, r2, r3
 8010036:	4770      	bx	lr

08010038 <__kernel_cosf>:
 8010038:	ee10 3a10 	vmov	r3, s0
 801003c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010040:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010044:	eef0 6a40 	vmov.f32	s13, s0
 8010048:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801004c:	d204      	bcs.n	8010058 <__kernel_cosf+0x20>
 801004e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8010052:	ee17 2a90 	vmov	r2, s15
 8010056:	b342      	cbz	r2, 80100aa <__kernel_cosf+0x72>
 8010058:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801005c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80100c8 <__kernel_cosf+0x90>
 8010060:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80100cc <__kernel_cosf+0x94>
 8010064:	4a1a      	ldr	r2, [pc, #104]	@ (80100d0 <__kernel_cosf+0x98>)
 8010066:	eea7 6a27 	vfma.f32	s12, s14, s15
 801006a:	4293      	cmp	r3, r2
 801006c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80100d4 <__kernel_cosf+0x9c>
 8010070:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010074:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80100d8 <__kernel_cosf+0xa0>
 8010078:	eea7 6a87 	vfma.f32	s12, s15, s14
 801007c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80100dc <__kernel_cosf+0xa4>
 8010080:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010084:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80100e0 <__kernel_cosf+0xa8>
 8010088:	eea7 6a87 	vfma.f32	s12, s15, s14
 801008c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8010090:	ee26 6a07 	vmul.f32	s12, s12, s14
 8010094:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010098:	eee7 0a06 	vfma.f32	s1, s14, s12
 801009c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100a0:	d804      	bhi.n	80100ac <__kernel_cosf+0x74>
 80100a2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80100a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80100aa:	4770      	bx	lr
 80100ac:	4a0d      	ldr	r2, [pc, #52]	@ (80100e4 <__kernel_cosf+0xac>)
 80100ae:	4293      	cmp	r3, r2
 80100b0:	bf9a      	itte	ls
 80100b2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80100b6:	ee07 3a10 	vmovls	s14, r3
 80100ba:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80100be:	ee30 0a47 	vsub.f32	s0, s0, s14
 80100c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80100c6:	e7ec      	b.n	80100a2 <__kernel_cosf+0x6a>
 80100c8:	ad47d74e 	.word	0xad47d74e
 80100cc:	310f74f6 	.word	0x310f74f6
 80100d0:	3e999999 	.word	0x3e999999
 80100d4:	b493f27c 	.word	0xb493f27c
 80100d8:	37d00d01 	.word	0x37d00d01
 80100dc:	bab60b61 	.word	0xbab60b61
 80100e0:	3d2aaaab 	.word	0x3d2aaaab
 80100e4:	3f480000 	.word	0x3f480000

080100e8 <__kernel_sinf>:
 80100e8:	ee10 3a10 	vmov	r3, s0
 80100ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80100f0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80100f4:	d204      	bcs.n	8010100 <__kernel_sinf+0x18>
 80100f6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80100fa:	ee17 3a90 	vmov	r3, s15
 80100fe:	b35b      	cbz	r3, 8010158 <__kernel_sinf+0x70>
 8010100:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010104:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801015c <__kernel_sinf+0x74>
 8010108:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8010160 <__kernel_sinf+0x78>
 801010c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010110:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8010164 <__kernel_sinf+0x7c>
 8010114:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010118:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8010168 <__kernel_sinf+0x80>
 801011c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010120:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801016c <__kernel_sinf+0x84>
 8010124:	ee60 6a07 	vmul.f32	s13, s0, s14
 8010128:	eee6 7a07 	vfma.f32	s15, s12, s14
 801012c:	b930      	cbnz	r0, 801013c <__kernel_sinf+0x54>
 801012e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8010170 <__kernel_sinf+0x88>
 8010132:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010136:	eea6 0a26 	vfma.f32	s0, s12, s13
 801013a:	4770      	bx	lr
 801013c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010140:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8010144:	eee0 7a86 	vfma.f32	s15, s1, s12
 8010148:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801014c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8010174 <__kernel_sinf+0x8c>
 8010150:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8010154:	ee30 0a60 	vsub.f32	s0, s0, s1
 8010158:	4770      	bx	lr
 801015a:	bf00      	nop
 801015c:	2f2ec9d3 	.word	0x2f2ec9d3
 8010160:	b2d72f34 	.word	0xb2d72f34
 8010164:	3638ef1b 	.word	0x3638ef1b
 8010168:	b9500d01 	.word	0xb9500d01
 801016c:	3c088889 	.word	0x3c088889
 8010170:	be2aaaab 	.word	0xbe2aaaab
 8010174:	3e2aaaab 	.word	0x3e2aaaab

08010178 <__ieee754_fmodf>:
 8010178:	b570      	push	{r4, r5, r6, lr}
 801017a:	ee10 6a90 	vmov	r6, s1
 801017e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8010182:	1e5a      	subs	r2, r3, #1
 8010184:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8010188:	d206      	bcs.n	8010198 <__ieee754_fmodf+0x20>
 801018a:	ee10 4a10 	vmov	r4, s0
 801018e:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 8010192:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010196:	d304      	bcc.n	80101a2 <__ieee754_fmodf+0x2a>
 8010198:	ee60 0a20 	vmul.f32	s1, s0, s1
 801019c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80101a0:	bd70      	pop	{r4, r5, r6, pc}
 80101a2:	4299      	cmp	r1, r3
 80101a4:	dbfc      	blt.n	80101a0 <__ieee754_fmodf+0x28>
 80101a6:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 80101aa:	d105      	bne.n	80101b8 <__ieee754_fmodf+0x40>
 80101ac:	4b32      	ldr	r3, [pc, #200]	@ (8010278 <__ieee754_fmodf+0x100>)
 80101ae:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 80101b2:	ed93 0a00 	vldr	s0, [r3]
 80101b6:	e7f3      	b.n	80101a0 <__ieee754_fmodf+0x28>
 80101b8:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80101bc:	d146      	bne.n	801024c <__ieee754_fmodf+0xd4>
 80101be:	020a      	lsls	r2, r1, #8
 80101c0:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 80101c4:	2a00      	cmp	r2, #0
 80101c6:	dc3e      	bgt.n	8010246 <__ieee754_fmodf+0xce>
 80101c8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80101cc:	bf01      	itttt	eq
 80101ce:	021a      	lsleq	r2, r3, #8
 80101d0:	fab2 f282 	clzeq	r2, r2
 80101d4:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 80101d8:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 80101dc:	bf16      	itet	ne
 80101de:	15da      	asrne	r2, r3, #23
 80101e0:	3282      	addeq	r2, #130	@ 0x82
 80101e2:	3a7f      	subne	r2, #127	@ 0x7f
 80101e4:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 80101e8:	bfbb      	ittet	lt
 80101ea:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 80101ee:	1a24      	sublt	r4, r4, r0
 80101f0:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 80101f4:	40a1      	lsllt	r1, r4
 80101f6:	bfa8      	it	ge
 80101f8:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 80101fc:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8010200:	bfb5      	itete	lt
 8010202:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8010206:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 801020a:	1aa4      	sublt	r4, r4, r2
 801020c:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 8010210:	bfb8      	it	lt
 8010212:	fa03 f404 	lsllt.w	r4, r3, r4
 8010216:	1a80      	subs	r0, r0, r2
 8010218:	1b0b      	subs	r3, r1, r4
 801021a:	b9d0      	cbnz	r0, 8010252 <__ieee754_fmodf+0xda>
 801021c:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8010220:	bf28      	it	cs
 8010222:	460b      	movcs	r3, r1
 8010224:	2b00      	cmp	r3, #0
 8010226:	d0c1      	beq.n	80101ac <__ieee754_fmodf+0x34>
 8010228:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801022c:	db19      	blt.n	8010262 <__ieee754_fmodf+0xea>
 801022e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8010232:	db19      	blt.n	8010268 <__ieee754_fmodf+0xf0>
 8010234:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8010238:	327f      	adds	r2, #127	@ 0x7f
 801023a:	432b      	orrs	r3, r5
 801023c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8010240:	ee00 3a10 	vmov	s0, r3
 8010244:	e7ac      	b.n	80101a0 <__ieee754_fmodf+0x28>
 8010246:	3801      	subs	r0, #1
 8010248:	0052      	lsls	r2, r2, #1
 801024a:	e7bb      	b.n	80101c4 <__ieee754_fmodf+0x4c>
 801024c:	15c8      	asrs	r0, r1, #23
 801024e:	387f      	subs	r0, #127	@ 0x7f
 8010250:	e7ba      	b.n	80101c8 <__ieee754_fmodf+0x50>
 8010252:	2b00      	cmp	r3, #0
 8010254:	da02      	bge.n	801025c <__ieee754_fmodf+0xe4>
 8010256:	0049      	lsls	r1, r1, #1
 8010258:	3801      	subs	r0, #1
 801025a:	e7dd      	b.n	8010218 <__ieee754_fmodf+0xa0>
 801025c:	d0a6      	beq.n	80101ac <__ieee754_fmodf+0x34>
 801025e:	0059      	lsls	r1, r3, #1
 8010260:	e7fa      	b.n	8010258 <__ieee754_fmodf+0xe0>
 8010262:	005b      	lsls	r3, r3, #1
 8010264:	3a01      	subs	r2, #1
 8010266:	e7df      	b.n	8010228 <__ieee754_fmodf+0xb0>
 8010268:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 801026c:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8010270:	3282      	adds	r2, #130	@ 0x82
 8010272:	4113      	asrs	r3, r2
 8010274:	432b      	orrs	r3, r5
 8010276:	e7e3      	b.n	8010240 <__ieee754_fmodf+0xc8>
 8010278:	080115a0 	.word	0x080115a0

0801027c <__ieee754_rem_pio2f>:
 801027c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801027e:	ee10 6a10 	vmov	r6, s0
 8010282:	4b88      	ldr	r3, [pc, #544]	@ (80104a4 <__ieee754_rem_pio2f+0x228>)
 8010284:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8010288:	429d      	cmp	r5, r3
 801028a:	b087      	sub	sp, #28
 801028c:	4604      	mov	r4, r0
 801028e:	d805      	bhi.n	801029c <__ieee754_rem_pio2f+0x20>
 8010290:	2300      	movs	r3, #0
 8010292:	ed80 0a00 	vstr	s0, [r0]
 8010296:	6043      	str	r3, [r0, #4]
 8010298:	2000      	movs	r0, #0
 801029a:	e022      	b.n	80102e2 <__ieee754_rem_pio2f+0x66>
 801029c:	4b82      	ldr	r3, [pc, #520]	@ (80104a8 <__ieee754_rem_pio2f+0x22c>)
 801029e:	429d      	cmp	r5, r3
 80102a0:	d83a      	bhi.n	8010318 <__ieee754_rem_pio2f+0x9c>
 80102a2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80102a6:	2e00      	cmp	r6, #0
 80102a8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80104ac <__ieee754_rem_pio2f+0x230>
 80102ac:	4a80      	ldr	r2, [pc, #512]	@ (80104b0 <__ieee754_rem_pio2f+0x234>)
 80102ae:	f023 030f 	bic.w	r3, r3, #15
 80102b2:	dd18      	ble.n	80102e6 <__ieee754_rem_pio2f+0x6a>
 80102b4:	4293      	cmp	r3, r2
 80102b6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80102ba:	bf09      	itett	eq
 80102bc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80104b4 <__ieee754_rem_pio2f+0x238>
 80102c0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80104b8 <__ieee754_rem_pio2f+0x23c>
 80102c4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80104bc <__ieee754_rem_pio2f+0x240>
 80102c8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80102cc:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80102d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80102d4:	ed80 7a00 	vstr	s14, [r0]
 80102d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80102dc:	edc0 7a01 	vstr	s15, [r0, #4]
 80102e0:	2001      	movs	r0, #1
 80102e2:	b007      	add	sp, #28
 80102e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102e6:	4293      	cmp	r3, r2
 80102e8:	ee70 7a07 	vadd.f32	s15, s0, s14
 80102ec:	bf09      	itett	eq
 80102ee:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80104b4 <__ieee754_rem_pio2f+0x238>
 80102f2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80104b8 <__ieee754_rem_pio2f+0x23c>
 80102f6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80104bc <__ieee754_rem_pio2f+0x240>
 80102fa:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80102fe:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010302:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010306:	ed80 7a00 	vstr	s14, [r0]
 801030a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801030e:	edc0 7a01 	vstr	s15, [r0, #4]
 8010312:	f04f 30ff 	mov.w	r0, #4294967295
 8010316:	e7e4      	b.n	80102e2 <__ieee754_rem_pio2f+0x66>
 8010318:	4b69      	ldr	r3, [pc, #420]	@ (80104c0 <__ieee754_rem_pio2f+0x244>)
 801031a:	429d      	cmp	r5, r3
 801031c:	d873      	bhi.n	8010406 <__ieee754_rem_pio2f+0x18a>
 801031e:	f000 f8dd 	bl	80104dc <fabsf>
 8010322:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80104c4 <__ieee754_rem_pio2f+0x248>
 8010326:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801032a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801032e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010332:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010336:	ee17 0a90 	vmov	r0, s15
 801033a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80104ac <__ieee754_rem_pio2f+0x230>
 801033e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8010342:	281f      	cmp	r0, #31
 8010344:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80104b8 <__ieee754_rem_pio2f+0x23c>
 8010348:	ee67 7a27 	vmul.f32	s15, s14, s15
 801034c:	eeb1 6a47 	vneg.f32	s12, s14
 8010350:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010354:	ee16 1a90 	vmov	r1, s13
 8010358:	dc09      	bgt.n	801036e <__ieee754_rem_pio2f+0xf2>
 801035a:	4a5b      	ldr	r2, [pc, #364]	@ (80104c8 <__ieee754_rem_pio2f+0x24c>)
 801035c:	1e47      	subs	r7, r0, #1
 801035e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8010362:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8010366:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801036a:	4293      	cmp	r3, r2
 801036c:	d107      	bne.n	801037e <__ieee754_rem_pio2f+0x102>
 801036e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8010372:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8010376:	2a08      	cmp	r2, #8
 8010378:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801037c:	dc14      	bgt.n	80103a8 <__ieee754_rem_pio2f+0x12c>
 801037e:	6021      	str	r1, [r4, #0]
 8010380:	ed94 7a00 	vldr	s14, [r4]
 8010384:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010388:	2e00      	cmp	r6, #0
 801038a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801038e:	ed84 0a01 	vstr	s0, [r4, #4]
 8010392:	daa6      	bge.n	80102e2 <__ieee754_rem_pio2f+0x66>
 8010394:	eeb1 7a47 	vneg.f32	s14, s14
 8010398:	eeb1 0a40 	vneg.f32	s0, s0
 801039c:	ed84 7a00 	vstr	s14, [r4]
 80103a0:	ed84 0a01 	vstr	s0, [r4, #4]
 80103a4:	4240      	negs	r0, r0
 80103a6:	e79c      	b.n	80102e2 <__ieee754_rem_pio2f+0x66>
 80103a8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80104b4 <__ieee754_rem_pio2f+0x238>
 80103ac:	eef0 6a40 	vmov.f32	s13, s0
 80103b0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80103b4:	ee70 7a66 	vsub.f32	s15, s0, s13
 80103b8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80103bc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80104bc <__ieee754_rem_pio2f+0x240>
 80103c0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80103c4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80103c8:	ee15 2a90 	vmov	r2, s11
 80103cc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80103d0:	1a5b      	subs	r3, r3, r1
 80103d2:	2b19      	cmp	r3, #25
 80103d4:	dc04      	bgt.n	80103e0 <__ieee754_rem_pio2f+0x164>
 80103d6:	edc4 5a00 	vstr	s11, [r4]
 80103da:	eeb0 0a66 	vmov.f32	s0, s13
 80103de:	e7cf      	b.n	8010380 <__ieee754_rem_pio2f+0x104>
 80103e0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80104cc <__ieee754_rem_pio2f+0x250>
 80103e4:	eeb0 0a66 	vmov.f32	s0, s13
 80103e8:	eea6 0a25 	vfma.f32	s0, s12, s11
 80103ec:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80103f0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80104d0 <__ieee754_rem_pio2f+0x254>
 80103f4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80103f8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80103fc:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010400:	ed84 7a00 	vstr	s14, [r4]
 8010404:	e7bc      	b.n	8010380 <__ieee754_rem_pio2f+0x104>
 8010406:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801040a:	d306      	bcc.n	801041a <__ieee754_rem_pio2f+0x19e>
 801040c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010410:	edc0 7a01 	vstr	s15, [r0, #4]
 8010414:	edc0 7a00 	vstr	s15, [r0]
 8010418:	e73e      	b.n	8010298 <__ieee754_rem_pio2f+0x1c>
 801041a:	15ea      	asrs	r2, r5, #23
 801041c:	3a86      	subs	r2, #134	@ 0x86
 801041e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8010422:	ee07 3a90 	vmov	s15, r3
 8010426:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801042a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80104d4 <__ieee754_rem_pio2f+0x258>
 801042e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010432:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010436:	ed8d 7a03 	vstr	s14, [sp, #12]
 801043a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801043e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010442:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010446:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801044a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801044e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010452:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801045a:	edcd 7a05 	vstr	s15, [sp, #20]
 801045e:	d11e      	bne.n	801049e <__ieee754_rem_pio2f+0x222>
 8010460:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010468:	bf0c      	ite	eq
 801046a:	2301      	moveq	r3, #1
 801046c:	2302      	movne	r3, #2
 801046e:	491a      	ldr	r1, [pc, #104]	@ (80104d8 <__ieee754_rem_pio2f+0x25c>)
 8010470:	9101      	str	r1, [sp, #4]
 8010472:	2102      	movs	r1, #2
 8010474:	9100      	str	r1, [sp, #0]
 8010476:	a803      	add	r0, sp, #12
 8010478:	4621      	mov	r1, r4
 801047a:	f000 fc69 	bl	8010d50 <__kernel_rem_pio2f>
 801047e:	2e00      	cmp	r6, #0
 8010480:	f6bf af2f 	bge.w	80102e2 <__ieee754_rem_pio2f+0x66>
 8010484:	edd4 7a00 	vldr	s15, [r4]
 8010488:	eef1 7a67 	vneg.f32	s15, s15
 801048c:	edc4 7a00 	vstr	s15, [r4]
 8010490:	edd4 7a01 	vldr	s15, [r4, #4]
 8010494:	eef1 7a67 	vneg.f32	s15, s15
 8010498:	edc4 7a01 	vstr	s15, [r4, #4]
 801049c:	e782      	b.n	80103a4 <__ieee754_rem_pio2f+0x128>
 801049e:	2303      	movs	r3, #3
 80104a0:	e7e5      	b.n	801046e <__ieee754_rem_pio2f+0x1f2>
 80104a2:	bf00      	nop
 80104a4:	3f490fd8 	.word	0x3f490fd8
 80104a8:	4016cbe3 	.word	0x4016cbe3
 80104ac:	3fc90f80 	.word	0x3fc90f80
 80104b0:	3fc90fd0 	.word	0x3fc90fd0
 80104b4:	37354400 	.word	0x37354400
 80104b8:	37354443 	.word	0x37354443
 80104bc:	2e85a308 	.word	0x2e85a308
 80104c0:	43490f80 	.word	0x43490f80
 80104c4:	3f22f984 	.word	0x3f22f984
 80104c8:	080115a8 	.word	0x080115a8
 80104cc:	2e85a300 	.word	0x2e85a300
 80104d0:	248d3132 	.word	0x248d3132
 80104d4:	43800000 	.word	0x43800000
 80104d8:	08011628 	.word	0x08011628

080104dc <fabsf>:
 80104dc:	ee10 3a10 	vmov	r3, s0
 80104e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80104e4:	ee00 3a10 	vmov	s0, r3
 80104e8:	4770      	bx	lr
 80104ea:	0000      	movs	r0, r0
 80104ec:	0000      	movs	r0, r0
	...

080104f0 <scalbn>:
 80104f0:	b570      	push	{r4, r5, r6, lr}
 80104f2:	ec55 4b10 	vmov	r4, r5, d0
 80104f6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80104fa:	4606      	mov	r6, r0
 80104fc:	462b      	mov	r3, r5
 80104fe:	b991      	cbnz	r1, 8010526 <scalbn+0x36>
 8010500:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010504:	4323      	orrs	r3, r4
 8010506:	d03b      	beq.n	8010580 <scalbn+0x90>
 8010508:	4b33      	ldr	r3, [pc, #204]	@ (80105d8 <scalbn+0xe8>)
 801050a:	4620      	mov	r0, r4
 801050c:	4629      	mov	r1, r5
 801050e:	2200      	movs	r2, #0
 8010510:	f7f0 f83e 	bl	8000590 <__aeabi_dmul>
 8010514:	4b31      	ldr	r3, [pc, #196]	@ (80105dc <scalbn+0xec>)
 8010516:	429e      	cmp	r6, r3
 8010518:	4604      	mov	r4, r0
 801051a:	460d      	mov	r5, r1
 801051c:	da0f      	bge.n	801053e <scalbn+0x4e>
 801051e:	a326      	add	r3, pc, #152	@ (adr r3, 80105b8 <scalbn+0xc8>)
 8010520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010524:	e01e      	b.n	8010564 <scalbn+0x74>
 8010526:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801052a:	4291      	cmp	r1, r2
 801052c:	d10b      	bne.n	8010546 <scalbn+0x56>
 801052e:	4622      	mov	r2, r4
 8010530:	4620      	mov	r0, r4
 8010532:	4629      	mov	r1, r5
 8010534:	f7ef fe76 	bl	8000224 <__adddf3>
 8010538:	4604      	mov	r4, r0
 801053a:	460d      	mov	r5, r1
 801053c:	e020      	b.n	8010580 <scalbn+0x90>
 801053e:	460b      	mov	r3, r1
 8010540:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010544:	3936      	subs	r1, #54	@ 0x36
 8010546:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801054a:	4296      	cmp	r6, r2
 801054c:	dd0d      	ble.n	801056a <scalbn+0x7a>
 801054e:	2d00      	cmp	r5, #0
 8010550:	a11b      	add	r1, pc, #108	@ (adr r1, 80105c0 <scalbn+0xd0>)
 8010552:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010556:	da02      	bge.n	801055e <scalbn+0x6e>
 8010558:	a11b      	add	r1, pc, #108	@ (adr r1, 80105c8 <scalbn+0xd8>)
 801055a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801055e:	a318      	add	r3, pc, #96	@ (adr r3, 80105c0 <scalbn+0xd0>)
 8010560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010564:	f7f0 f814 	bl	8000590 <__aeabi_dmul>
 8010568:	e7e6      	b.n	8010538 <scalbn+0x48>
 801056a:	1872      	adds	r2, r6, r1
 801056c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010570:	428a      	cmp	r2, r1
 8010572:	dcec      	bgt.n	801054e <scalbn+0x5e>
 8010574:	2a00      	cmp	r2, #0
 8010576:	dd06      	ble.n	8010586 <scalbn+0x96>
 8010578:	f36f 531e 	bfc	r3, #20, #11
 801057c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010580:	ec45 4b10 	vmov	d0, r4, r5
 8010584:	bd70      	pop	{r4, r5, r6, pc}
 8010586:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801058a:	da08      	bge.n	801059e <scalbn+0xae>
 801058c:	2d00      	cmp	r5, #0
 801058e:	a10a      	add	r1, pc, #40	@ (adr r1, 80105b8 <scalbn+0xc8>)
 8010590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010594:	dac3      	bge.n	801051e <scalbn+0x2e>
 8010596:	a10e      	add	r1, pc, #56	@ (adr r1, 80105d0 <scalbn+0xe0>)
 8010598:	e9d1 0100 	ldrd	r0, r1, [r1]
 801059c:	e7bf      	b.n	801051e <scalbn+0x2e>
 801059e:	3236      	adds	r2, #54	@ 0x36
 80105a0:	f36f 531e 	bfc	r3, #20, #11
 80105a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80105a8:	4620      	mov	r0, r4
 80105aa:	4b0d      	ldr	r3, [pc, #52]	@ (80105e0 <scalbn+0xf0>)
 80105ac:	4629      	mov	r1, r5
 80105ae:	2200      	movs	r2, #0
 80105b0:	e7d8      	b.n	8010564 <scalbn+0x74>
 80105b2:	bf00      	nop
 80105b4:	f3af 8000 	nop.w
 80105b8:	c2f8f359 	.word	0xc2f8f359
 80105bc:	01a56e1f 	.word	0x01a56e1f
 80105c0:	8800759c 	.word	0x8800759c
 80105c4:	7e37e43c 	.word	0x7e37e43c
 80105c8:	8800759c 	.word	0x8800759c
 80105cc:	fe37e43c 	.word	0xfe37e43c
 80105d0:	c2f8f359 	.word	0xc2f8f359
 80105d4:	81a56e1f 	.word	0x81a56e1f
 80105d8:	43500000 	.word	0x43500000
 80105dc:	ffff3cb0 	.word	0xffff3cb0
 80105e0:	3c900000 	.word	0x3c900000

080105e4 <scalbnf>:
 80105e4:	ee10 3a10 	vmov	r3, s0
 80105e8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80105ec:	d02b      	beq.n	8010646 <scalbnf+0x62>
 80105ee:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80105f2:	d302      	bcc.n	80105fa <scalbnf+0x16>
 80105f4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80105f8:	4770      	bx	lr
 80105fa:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80105fe:	d123      	bne.n	8010648 <scalbnf+0x64>
 8010600:	4b24      	ldr	r3, [pc, #144]	@ (8010694 <scalbnf+0xb0>)
 8010602:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8010698 <scalbnf+0xb4>
 8010606:	4298      	cmp	r0, r3
 8010608:	ee20 0a27 	vmul.f32	s0, s0, s15
 801060c:	db17      	blt.n	801063e <scalbnf+0x5a>
 801060e:	ee10 3a10 	vmov	r3, s0
 8010612:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010616:	3a19      	subs	r2, #25
 8010618:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801061c:	4288      	cmp	r0, r1
 801061e:	dd15      	ble.n	801064c <scalbnf+0x68>
 8010620:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801069c <scalbnf+0xb8>
 8010624:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80106a0 <scalbnf+0xbc>
 8010628:	ee10 3a10 	vmov	r3, s0
 801062c:	eeb0 7a67 	vmov.f32	s14, s15
 8010630:	2b00      	cmp	r3, #0
 8010632:	bfb8      	it	lt
 8010634:	eef0 7a66 	vmovlt.f32	s15, s13
 8010638:	ee27 0a87 	vmul.f32	s0, s15, s14
 801063c:	4770      	bx	lr
 801063e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80106a4 <scalbnf+0xc0>
 8010642:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010646:	4770      	bx	lr
 8010648:	0dd2      	lsrs	r2, r2, #23
 801064a:	e7e5      	b.n	8010618 <scalbnf+0x34>
 801064c:	4410      	add	r0, r2
 801064e:	28fe      	cmp	r0, #254	@ 0xfe
 8010650:	dce6      	bgt.n	8010620 <scalbnf+0x3c>
 8010652:	2800      	cmp	r0, #0
 8010654:	dd06      	ble.n	8010664 <scalbnf+0x80>
 8010656:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801065a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801065e:	ee00 3a10 	vmov	s0, r3
 8010662:	4770      	bx	lr
 8010664:	f110 0f16 	cmn.w	r0, #22
 8010668:	da09      	bge.n	801067e <scalbnf+0x9a>
 801066a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80106a4 <scalbnf+0xc0>
 801066e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80106a8 <scalbnf+0xc4>
 8010672:	ee10 3a10 	vmov	r3, s0
 8010676:	eeb0 7a67 	vmov.f32	s14, s15
 801067a:	2b00      	cmp	r3, #0
 801067c:	e7d9      	b.n	8010632 <scalbnf+0x4e>
 801067e:	3019      	adds	r0, #25
 8010680:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010684:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010688:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80106ac <scalbnf+0xc8>
 801068c:	ee07 3a90 	vmov	s15, r3
 8010690:	e7d7      	b.n	8010642 <scalbnf+0x5e>
 8010692:	bf00      	nop
 8010694:	ffff3cb0 	.word	0xffff3cb0
 8010698:	4c000000 	.word	0x4c000000
 801069c:	7149f2ca 	.word	0x7149f2ca
 80106a0:	f149f2ca 	.word	0xf149f2ca
 80106a4:	0da24260 	.word	0x0da24260
 80106a8:	8da24260 	.word	0x8da24260
 80106ac:	33000000 	.word	0x33000000

080106b0 <__kernel_rem_pio2>:
 80106b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106b4:	ed2d 8b02 	vpush	{d8}
 80106b8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80106bc:	f112 0f14 	cmn.w	r2, #20
 80106c0:	9306      	str	r3, [sp, #24]
 80106c2:	9104      	str	r1, [sp, #16]
 80106c4:	4bc2      	ldr	r3, [pc, #776]	@ (80109d0 <__kernel_rem_pio2+0x320>)
 80106c6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80106c8:	9008      	str	r0, [sp, #32]
 80106ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80106ce:	9300      	str	r3, [sp, #0]
 80106d0:	9b06      	ldr	r3, [sp, #24]
 80106d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80106d6:	bfa8      	it	ge
 80106d8:	1ed4      	subge	r4, r2, #3
 80106da:	9305      	str	r3, [sp, #20]
 80106dc:	bfb2      	itee	lt
 80106de:	2400      	movlt	r4, #0
 80106e0:	2318      	movge	r3, #24
 80106e2:	fb94 f4f3 	sdivge	r4, r4, r3
 80106e6:	f06f 0317 	mvn.w	r3, #23
 80106ea:	fb04 3303 	mla	r3, r4, r3, r3
 80106ee:	eb03 0b02 	add.w	fp, r3, r2
 80106f2:	9b00      	ldr	r3, [sp, #0]
 80106f4:	9a05      	ldr	r2, [sp, #20]
 80106f6:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 80109c0 <__kernel_rem_pio2+0x310>
 80106fa:	eb03 0802 	add.w	r8, r3, r2
 80106fe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010700:	1aa7      	subs	r7, r4, r2
 8010702:	ae20      	add	r6, sp, #128	@ 0x80
 8010704:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010708:	2500      	movs	r5, #0
 801070a:	4545      	cmp	r5, r8
 801070c:	dd12      	ble.n	8010734 <__kernel_rem_pio2+0x84>
 801070e:	9b06      	ldr	r3, [sp, #24]
 8010710:	aa20      	add	r2, sp, #128	@ 0x80
 8010712:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010716:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801071a:	2700      	movs	r7, #0
 801071c:	9b00      	ldr	r3, [sp, #0]
 801071e:	429f      	cmp	r7, r3
 8010720:	dc2e      	bgt.n	8010780 <__kernel_rem_pio2+0xd0>
 8010722:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 80109c0 <__kernel_rem_pio2+0x310>
 8010726:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801072a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801072e:	46a8      	mov	r8, r5
 8010730:	2600      	movs	r6, #0
 8010732:	e01b      	b.n	801076c <__kernel_rem_pio2+0xbc>
 8010734:	42ef      	cmn	r7, r5
 8010736:	d407      	bmi.n	8010748 <__kernel_rem_pio2+0x98>
 8010738:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801073c:	f7ef febe 	bl	80004bc <__aeabi_i2d>
 8010740:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010744:	3501      	adds	r5, #1
 8010746:	e7e0      	b.n	801070a <__kernel_rem_pio2+0x5a>
 8010748:	ec51 0b18 	vmov	r0, r1, d8
 801074c:	e7f8      	b.n	8010740 <__kernel_rem_pio2+0x90>
 801074e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8010752:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010756:	f7ef ff1b 	bl	8000590 <__aeabi_dmul>
 801075a:	4602      	mov	r2, r0
 801075c:	460b      	mov	r3, r1
 801075e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010762:	f7ef fd5f 	bl	8000224 <__adddf3>
 8010766:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801076a:	3601      	adds	r6, #1
 801076c:	9b05      	ldr	r3, [sp, #20]
 801076e:	429e      	cmp	r6, r3
 8010770:	dded      	ble.n	801074e <__kernel_rem_pio2+0x9e>
 8010772:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010776:	3701      	adds	r7, #1
 8010778:	ecaa 7b02 	vstmia	sl!, {d7}
 801077c:	3508      	adds	r5, #8
 801077e:	e7cd      	b.n	801071c <__kernel_rem_pio2+0x6c>
 8010780:	9b00      	ldr	r3, [sp, #0]
 8010782:	f8dd 8000 	ldr.w	r8, [sp]
 8010786:	aa0c      	add	r2, sp, #48	@ 0x30
 8010788:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801078c:	930a      	str	r3, [sp, #40]	@ 0x28
 801078e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010790:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010794:	9309      	str	r3, [sp, #36]	@ 0x24
 8010796:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801079a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801079c:	ab98      	add	r3, sp, #608	@ 0x260
 801079e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80107a2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80107a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80107aa:	ac0c      	add	r4, sp, #48	@ 0x30
 80107ac:	ab70      	add	r3, sp, #448	@ 0x1c0
 80107ae:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80107b2:	46a1      	mov	r9, r4
 80107b4:	46c2      	mov	sl, r8
 80107b6:	f1ba 0f00 	cmp.w	sl, #0
 80107ba:	dc77      	bgt.n	80108ac <__kernel_rem_pio2+0x1fc>
 80107bc:	4658      	mov	r0, fp
 80107be:	ed9d 0b02 	vldr	d0, [sp, #8]
 80107c2:	f7ff fe95 	bl	80104f0 <scalbn>
 80107c6:	ec57 6b10 	vmov	r6, r7, d0
 80107ca:	2200      	movs	r2, #0
 80107cc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80107d0:	4630      	mov	r0, r6
 80107d2:	4639      	mov	r1, r7
 80107d4:	f7ef fedc 	bl	8000590 <__aeabi_dmul>
 80107d8:	ec41 0b10 	vmov	d0, r0, r1
 80107dc:	f000 fd20 	bl	8011220 <floor>
 80107e0:	4b7c      	ldr	r3, [pc, #496]	@ (80109d4 <__kernel_rem_pio2+0x324>)
 80107e2:	ec51 0b10 	vmov	r0, r1, d0
 80107e6:	2200      	movs	r2, #0
 80107e8:	f7ef fed2 	bl	8000590 <__aeabi_dmul>
 80107ec:	4602      	mov	r2, r0
 80107ee:	460b      	mov	r3, r1
 80107f0:	4630      	mov	r0, r6
 80107f2:	4639      	mov	r1, r7
 80107f4:	f7ef fd14 	bl	8000220 <__aeabi_dsub>
 80107f8:	460f      	mov	r7, r1
 80107fa:	4606      	mov	r6, r0
 80107fc:	f7f0 f962 	bl	8000ac4 <__aeabi_d2iz>
 8010800:	9002      	str	r0, [sp, #8]
 8010802:	f7ef fe5b 	bl	80004bc <__aeabi_i2d>
 8010806:	4602      	mov	r2, r0
 8010808:	460b      	mov	r3, r1
 801080a:	4630      	mov	r0, r6
 801080c:	4639      	mov	r1, r7
 801080e:	f7ef fd07 	bl	8000220 <__aeabi_dsub>
 8010812:	f1bb 0f00 	cmp.w	fp, #0
 8010816:	4606      	mov	r6, r0
 8010818:	460f      	mov	r7, r1
 801081a:	dd6c      	ble.n	80108f6 <__kernel_rem_pio2+0x246>
 801081c:	f108 31ff 	add.w	r1, r8, #4294967295
 8010820:	ab0c      	add	r3, sp, #48	@ 0x30
 8010822:	9d02      	ldr	r5, [sp, #8]
 8010824:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010828:	f1cb 0018 	rsb	r0, fp, #24
 801082c:	fa43 f200 	asr.w	r2, r3, r0
 8010830:	4415      	add	r5, r2
 8010832:	4082      	lsls	r2, r0
 8010834:	1a9b      	subs	r3, r3, r2
 8010836:	aa0c      	add	r2, sp, #48	@ 0x30
 8010838:	9502      	str	r5, [sp, #8]
 801083a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801083e:	f1cb 0217 	rsb	r2, fp, #23
 8010842:	fa43 f902 	asr.w	r9, r3, r2
 8010846:	f1b9 0f00 	cmp.w	r9, #0
 801084a:	dd64      	ble.n	8010916 <__kernel_rem_pio2+0x266>
 801084c:	9b02      	ldr	r3, [sp, #8]
 801084e:	2200      	movs	r2, #0
 8010850:	3301      	adds	r3, #1
 8010852:	9302      	str	r3, [sp, #8]
 8010854:	4615      	mov	r5, r2
 8010856:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801085a:	4590      	cmp	r8, r2
 801085c:	f300 80a1 	bgt.w	80109a2 <__kernel_rem_pio2+0x2f2>
 8010860:	f1bb 0f00 	cmp.w	fp, #0
 8010864:	dd07      	ble.n	8010876 <__kernel_rem_pio2+0x1c6>
 8010866:	f1bb 0f01 	cmp.w	fp, #1
 801086a:	f000 80c1 	beq.w	80109f0 <__kernel_rem_pio2+0x340>
 801086e:	f1bb 0f02 	cmp.w	fp, #2
 8010872:	f000 80c8 	beq.w	8010a06 <__kernel_rem_pio2+0x356>
 8010876:	f1b9 0f02 	cmp.w	r9, #2
 801087a:	d14c      	bne.n	8010916 <__kernel_rem_pio2+0x266>
 801087c:	4632      	mov	r2, r6
 801087e:	463b      	mov	r3, r7
 8010880:	4955      	ldr	r1, [pc, #340]	@ (80109d8 <__kernel_rem_pio2+0x328>)
 8010882:	2000      	movs	r0, #0
 8010884:	f7ef fccc 	bl	8000220 <__aeabi_dsub>
 8010888:	4606      	mov	r6, r0
 801088a:	460f      	mov	r7, r1
 801088c:	2d00      	cmp	r5, #0
 801088e:	d042      	beq.n	8010916 <__kernel_rem_pio2+0x266>
 8010890:	4658      	mov	r0, fp
 8010892:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 80109c8 <__kernel_rem_pio2+0x318>
 8010896:	f7ff fe2b 	bl	80104f0 <scalbn>
 801089a:	4630      	mov	r0, r6
 801089c:	4639      	mov	r1, r7
 801089e:	ec53 2b10 	vmov	r2, r3, d0
 80108a2:	f7ef fcbd 	bl	8000220 <__aeabi_dsub>
 80108a6:	4606      	mov	r6, r0
 80108a8:	460f      	mov	r7, r1
 80108aa:	e034      	b.n	8010916 <__kernel_rem_pio2+0x266>
 80108ac:	4b4b      	ldr	r3, [pc, #300]	@ (80109dc <__kernel_rem_pio2+0x32c>)
 80108ae:	2200      	movs	r2, #0
 80108b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80108b4:	f7ef fe6c 	bl	8000590 <__aeabi_dmul>
 80108b8:	f7f0 f904 	bl	8000ac4 <__aeabi_d2iz>
 80108bc:	f7ef fdfe 	bl	80004bc <__aeabi_i2d>
 80108c0:	4b47      	ldr	r3, [pc, #284]	@ (80109e0 <__kernel_rem_pio2+0x330>)
 80108c2:	2200      	movs	r2, #0
 80108c4:	4606      	mov	r6, r0
 80108c6:	460f      	mov	r7, r1
 80108c8:	f7ef fe62 	bl	8000590 <__aeabi_dmul>
 80108cc:	4602      	mov	r2, r0
 80108ce:	460b      	mov	r3, r1
 80108d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80108d4:	f7ef fca4 	bl	8000220 <__aeabi_dsub>
 80108d8:	f7f0 f8f4 	bl	8000ac4 <__aeabi_d2iz>
 80108dc:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80108e0:	f849 0b04 	str.w	r0, [r9], #4
 80108e4:	4639      	mov	r1, r7
 80108e6:	4630      	mov	r0, r6
 80108e8:	f7ef fc9c 	bl	8000224 <__adddf3>
 80108ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80108f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108f4:	e75f      	b.n	80107b6 <__kernel_rem_pio2+0x106>
 80108f6:	d107      	bne.n	8010908 <__kernel_rem_pio2+0x258>
 80108f8:	f108 33ff 	add.w	r3, r8, #4294967295
 80108fc:	aa0c      	add	r2, sp, #48	@ 0x30
 80108fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010902:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8010906:	e79e      	b.n	8010846 <__kernel_rem_pio2+0x196>
 8010908:	4b36      	ldr	r3, [pc, #216]	@ (80109e4 <__kernel_rem_pio2+0x334>)
 801090a:	2200      	movs	r2, #0
 801090c:	f7f0 f8c6 	bl	8000a9c <__aeabi_dcmpge>
 8010910:	2800      	cmp	r0, #0
 8010912:	d143      	bne.n	801099c <__kernel_rem_pio2+0x2ec>
 8010914:	4681      	mov	r9, r0
 8010916:	2200      	movs	r2, #0
 8010918:	2300      	movs	r3, #0
 801091a:	4630      	mov	r0, r6
 801091c:	4639      	mov	r1, r7
 801091e:	f7f0 f89f 	bl	8000a60 <__aeabi_dcmpeq>
 8010922:	2800      	cmp	r0, #0
 8010924:	f000 80c1 	beq.w	8010aaa <__kernel_rem_pio2+0x3fa>
 8010928:	f108 33ff 	add.w	r3, r8, #4294967295
 801092c:	2200      	movs	r2, #0
 801092e:	9900      	ldr	r1, [sp, #0]
 8010930:	428b      	cmp	r3, r1
 8010932:	da70      	bge.n	8010a16 <__kernel_rem_pio2+0x366>
 8010934:	2a00      	cmp	r2, #0
 8010936:	f000 808b 	beq.w	8010a50 <__kernel_rem_pio2+0x3a0>
 801093a:	f108 38ff 	add.w	r8, r8, #4294967295
 801093e:	ab0c      	add	r3, sp, #48	@ 0x30
 8010940:	f1ab 0b18 	sub.w	fp, fp, #24
 8010944:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d0f6      	beq.n	801093a <__kernel_rem_pio2+0x28a>
 801094c:	4658      	mov	r0, fp
 801094e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 80109c8 <__kernel_rem_pio2+0x318>
 8010952:	f7ff fdcd 	bl	80104f0 <scalbn>
 8010956:	f108 0301 	add.w	r3, r8, #1
 801095a:	00da      	lsls	r2, r3, #3
 801095c:	9205      	str	r2, [sp, #20]
 801095e:	ec55 4b10 	vmov	r4, r5, d0
 8010962:	aa70      	add	r2, sp, #448	@ 0x1c0
 8010964:	f8df b074 	ldr.w	fp, [pc, #116]	@ 80109dc <__kernel_rem_pio2+0x32c>
 8010968:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801096c:	4646      	mov	r6, r8
 801096e:	f04f 0a00 	mov.w	sl, #0
 8010972:	2e00      	cmp	r6, #0
 8010974:	f280 80d1 	bge.w	8010b1a <__kernel_rem_pio2+0x46a>
 8010978:	4644      	mov	r4, r8
 801097a:	2c00      	cmp	r4, #0
 801097c:	f2c0 80ff 	blt.w	8010b7e <__kernel_rem_pio2+0x4ce>
 8010980:	4b19      	ldr	r3, [pc, #100]	@ (80109e8 <__kernel_rem_pio2+0x338>)
 8010982:	461f      	mov	r7, r3
 8010984:	ab70      	add	r3, sp, #448	@ 0x1c0
 8010986:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801098a:	9306      	str	r3, [sp, #24]
 801098c:	f04f 0a00 	mov.w	sl, #0
 8010990:	f04f 0b00 	mov.w	fp, #0
 8010994:	2600      	movs	r6, #0
 8010996:	eba8 0504 	sub.w	r5, r8, r4
 801099a:	e0e4      	b.n	8010b66 <__kernel_rem_pio2+0x4b6>
 801099c:	f04f 0902 	mov.w	r9, #2
 80109a0:	e754      	b.n	801084c <__kernel_rem_pio2+0x19c>
 80109a2:	f854 3b04 	ldr.w	r3, [r4], #4
 80109a6:	bb0d      	cbnz	r5, 80109ec <__kernel_rem_pio2+0x33c>
 80109a8:	b123      	cbz	r3, 80109b4 <__kernel_rem_pio2+0x304>
 80109aa:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80109ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80109b2:	2301      	movs	r3, #1
 80109b4:	3201      	adds	r2, #1
 80109b6:	461d      	mov	r5, r3
 80109b8:	e74f      	b.n	801085a <__kernel_rem_pio2+0x1aa>
 80109ba:	bf00      	nop
 80109bc:	f3af 8000 	nop.w
	...
 80109cc:	3ff00000 	.word	0x3ff00000
 80109d0:	08011980 	.word	0x08011980
 80109d4:	40200000 	.word	0x40200000
 80109d8:	3ff00000 	.word	0x3ff00000
 80109dc:	3e700000 	.word	0x3e700000
 80109e0:	41700000 	.word	0x41700000
 80109e4:	3fe00000 	.word	0x3fe00000
 80109e8:	08011940 	.word	0x08011940
 80109ec:	1acb      	subs	r3, r1, r3
 80109ee:	e7de      	b.n	80109ae <__kernel_rem_pio2+0x2fe>
 80109f0:	f108 32ff 	add.w	r2, r8, #4294967295
 80109f4:	ab0c      	add	r3, sp, #48	@ 0x30
 80109f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109fa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80109fe:	a90c      	add	r1, sp, #48	@ 0x30
 8010a00:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010a04:	e737      	b.n	8010876 <__kernel_rem_pio2+0x1c6>
 8010a06:	f108 32ff 	add.w	r2, r8, #4294967295
 8010a0a:	ab0c      	add	r3, sp, #48	@ 0x30
 8010a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a10:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010a14:	e7f3      	b.n	80109fe <__kernel_rem_pio2+0x34e>
 8010a16:	a90c      	add	r1, sp, #48	@ 0x30
 8010a18:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010a1c:	3b01      	subs	r3, #1
 8010a1e:	430a      	orrs	r2, r1
 8010a20:	e785      	b.n	801092e <__kernel_rem_pio2+0x27e>
 8010a22:	3401      	adds	r4, #1
 8010a24:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010a28:	2a00      	cmp	r2, #0
 8010a2a:	d0fa      	beq.n	8010a22 <__kernel_rem_pio2+0x372>
 8010a2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a2e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010a32:	eb0d 0503 	add.w	r5, sp, r3
 8010a36:	9b06      	ldr	r3, [sp, #24]
 8010a38:	aa20      	add	r2, sp, #128	@ 0x80
 8010a3a:	4443      	add	r3, r8
 8010a3c:	f108 0701 	add.w	r7, r8, #1
 8010a40:	3d98      	subs	r5, #152	@ 0x98
 8010a42:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8010a46:	4444      	add	r4, r8
 8010a48:	42bc      	cmp	r4, r7
 8010a4a:	da04      	bge.n	8010a56 <__kernel_rem_pio2+0x3a6>
 8010a4c:	46a0      	mov	r8, r4
 8010a4e:	e6a2      	b.n	8010796 <__kernel_rem_pio2+0xe6>
 8010a50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a52:	2401      	movs	r4, #1
 8010a54:	e7e6      	b.n	8010a24 <__kernel_rem_pio2+0x374>
 8010a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a58:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8010a5c:	f7ef fd2e 	bl	80004bc <__aeabi_i2d>
 8010a60:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8010d20 <__kernel_rem_pio2+0x670>
 8010a64:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010a68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010a6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010a70:	46b2      	mov	sl, r6
 8010a72:	f04f 0800 	mov.w	r8, #0
 8010a76:	9b05      	ldr	r3, [sp, #20]
 8010a78:	4598      	cmp	r8, r3
 8010a7a:	dd05      	ble.n	8010a88 <__kernel_rem_pio2+0x3d8>
 8010a7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010a80:	3701      	adds	r7, #1
 8010a82:	eca5 7b02 	vstmia	r5!, {d7}
 8010a86:	e7df      	b.n	8010a48 <__kernel_rem_pio2+0x398>
 8010a88:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8010a8c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010a90:	f7ef fd7e 	bl	8000590 <__aeabi_dmul>
 8010a94:	4602      	mov	r2, r0
 8010a96:	460b      	mov	r3, r1
 8010a98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a9c:	f7ef fbc2 	bl	8000224 <__adddf3>
 8010aa0:	f108 0801 	add.w	r8, r8, #1
 8010aa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010aa8:	e7e5      	b.n	8010a76 <__kernel_rem_pio2+0x3c6>
 8010aaa:	f1cb 0000 	rsb	r0, fp, #0
 8010aae:	ec47 6b10 	vmov	d0, r6, r7
 8010ab2:	f7ff fd1d 	bl	80104f0 <scalbn>
 8010ab6:	ec55 4b10 	vmov	r4, r5, d0
 8010aba:	4b9b      	ldr	r3, [pc, #620]	@ (8010d28 <__kernel_rem_pio2+0x678>)
 8010abc:	2200      	movs	r2, #0
 8010abe:	4620      	mov	r0, r4
 8010ac0:	4629      	mov	r1, r5
 8010ac2:	f7ef ffeb 	bl	8000a9c <__aeabi_dcmpge>
 8010ac6:	b300      	cbz	r0, 8010b0a <__kernel_rem_pio2+0x45a>
 8010ac8:	4b98      	ldr	r3, [pc, #608]	@ (8010d2c <__kernel_rem_pio2+0x67c>)
 8010aca:	2200      	movs	r2, #0
 8010acc:	4620      	mov	r0, r4
 8010ace:	4629      	mov	r1, r5
 8010ad0:	f7ef fd5e 	bl	8000590 <__aeabi_dmul>
 8010ad4:	f7ef fff6 	bl	8000ac4 <__aeabi_d2iz>
 8010ad8:	4606      	mov	r6, r0
 8010ada:	f7ef fcef 	bl	80004bc <__aeabi_i2d>
 8010ade:	4b92      	ldr	r3, [pc, #584]	@ (8010d28 <__kernel_rem_pio2+0x678>)
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	f7ef fd55 	bl	8000590 <__aeabi_dmul>
 8010ae6:	460b      	mov	r3, r1
 8010ae8:	4602      	mov	r2, r0
 8010aea:	4629      	mov	r1, r5
 8010aec:	4620      	mov	r0, r4
 8010aee:	f7ef fb97 	bl	8000220 <__aeabi_dsub>
 8010af2:	f7ef ffe7 	bl	8000ac4 <__aeabi_d2iz>
 8010af6:	ab0c      	add	r3, sp, #48	@ 0x30
 8010af8:	f10b 0b18 	add.w	fp, fp, #24
 8010afc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010b00:	f108 0801 	add.w	r8, r8, #1
 8010b04:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8010b08:	e720      	b.n	801094c <__kernel_rem_pio2+0x29c>
 8010b0a:	4620      	mov	r0, r4
 8010b0c:	4629      	mov	r1, r5
 8010b0e:	f7ef ffd9 	bl	8000ac4 <__aeabi_d2iz>
 8010b12:	ab0c      	add	r3, sp, #48	@ 0x30
 8010b14:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010b18:	e718      	b.n	801094c <__kernel_rem_pio2+0x29c>
 8010b1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8010b1c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010b20:	f7ef fccc 	bl	80004bc <__aeabi_i2d>
 8010b24:	4622      	mov	r2, r4
 8010b26:	462b      	mov	r3, r5
 8010b28:	f7ef fd32 	bl	8000590 <__aeabi_dmul>
 8010b2c:	4652      	mov	r2, sl
 8010b2e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8010b32:	465b      	mov	r3, fp
 8010b34:	4620      	mov	r0, r4
 8010b36:	4629      	mov	r1, r5
 8010b38:	f7ef fd2a 	bl	8000590 <__aeabi_dmul>
 8010b3c:	3e01      	subs	r6, #1
 8010b3e:	4604      	mov	r4, r0
 8010b40:	460d      	mov	r5, r1
 8010b42:	e716      	b.n	8010972 <__kernel_rem_pio2+0x2c2>
 8010b44:	9906      	ldr	r1, [sp, #24]
 8010b46:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8010b4a:	9106      	str	r1, [sp, #24]
 8010b4c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8010b50:	f7ef fd1e 	bl	8000590 <__aeabi_dmul>
 8010b54:	4602      	mov	r2, r0
 8010b56:	460b      	mov	r3, r1
 8010b58:	4650      	mov	r0, sl
 8010b5a:	4659      	mov	r1, fp
 8010b5c:	f7ef fb62 	bl	8000224 <__adddf3>
 8010b60:	3601      	adds	r6, #1
 8010b62:	4682      	mov	sl, r0
 8010b64:	468b      	mov	fp, r1
 8010b66:	9b00      	ldr	r3, [sp, #0]
 8010b68:	429e      	cmp	r6, r3
 8010b6a:	dc01      	bgt.n	8010b70 <__kernel_rem_pio2+0x4c0>
 8010b6c:	42ae      	cmp	r6, r5
 8010b6e:	dde9      	ble.n	8010b44 <__kernel_rem_pio2+0x494>
 8010b70:	ab48      	add	r3, sp, #288	@ 0x120
 8010b72:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8010b76:	e9c5 ab00 	strd	sl, fp, [r5]
 8010b7a:	3c01      	subs	r4, #1
 8010b7c:	e6fd      	b.n	801097a <__kernel_rem_pio2+0x2ca>
 8010b7e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8010b80:	2b02      	cmp	r3, #2
 8010b82:	dc0b      	bgt.n	8010b9c <__kernel_rem_pio2+0x4ec>
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	dc35      	bgt.n	8010bf4 <__kernel_rem_pio2+0x544>
 8010b88:	d059      	beq.n	8010c3e <__kernel_rem_pio2+0x58e>
 8010b8a:	9b02      	ldr	r3, [sp, #8]
 8010b8c:	f003 0007 	and.w	r0, r3, #7
 8010b90:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8010b94:	ecbd 8b02 	vpop	{d8}
 8010b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b9c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8010b9e:	2b03      	cmp	r3, #3
 8010ba0:	d1f3      	bne.n	8010b8a <__kernel_rem_pio2+0x4da>
 8010ba2:	9b05      	ldr	r3, [sp, #20]
 8010ba4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010ba8:	eb0d 0403 	add.w	r4, sp, r3
 8010bac:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8010bb0:	4625      	mov	r5, r4
 8010bb2:	46c2      	mov	sl, r8
 8010bb4:	f1ba 0f00 	cmp.w	sl, #0
 8010bb8:	dc69      	bgt.n	8010c8e <__kernel_rem_pio2+0x5de>
 8010bba:	4645      	mov	r5, r8
 8010bbc:	2d01      	cmp	r5, #1
 8010bbe:	f300 8087 	bgt.w	8010cd0 <__kernel_rem_pio2+0x620>
 8010bc2:	9c05      	ldr	r4, [sp, #20]
 8010bc4:	ab48      	add	r3, sp, #288	@ 0x120
 8010bc6:	441c      	add	r4, r3
 8010bc8:	2000      	movs	r0, #0
 8010bca:	2100      	movs	r1, #0
 8010bcc:	f1b8 0f01 	cmp.w	r8, #1
 8010bd0:	f300 809c 	bgt.w	8010d0c <__kernel_rem_pio2+0x65c>
 8010bd4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8010bd8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8010bdc:	f1b9 0f00 	cmp.w	r9, #0
 8010be0:	f040 80a6 	bne.w	8010d30 <__kernel_rem_pio2+0x680>
 8010be4:	9b04      	ldr	r3, [sp, #16]
 8010be6:	e9c3 5600 	strd	r5, r6, [r3]
 8010bea:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8010bee:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010bf2:	e7ca      	b.n	8010b8a <__kernel_rem_pio2+0x4da>
 8010bf4:	9d05      	ldr	r5, [sp, #20]
 8010bf6:	ab48      	add	r3, sp, #288	@ 0x120
 8010bf8:	441d      	add	r5, r3
 8010bfa:	4644      	mov	r4, r8
 8010bfc:	2000      	movs	r0, #0
 8010bfe:	2100      	movs	r1, #0
 8010c00:	2c00      	cmp	r4, #0
 8010c02:	da35      	bge.n	8010c70 <__kernel_rem_pio2+0x5c0>
 8010c04:	f1b9 0f00 	cmp.w	r9, #0
 8010c08:	d038      	beq.n	8010c7c <__kernel_rem_pio2+0x5cc>
 8010c0a:	4602      	mov	r2, r0
 8010c0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010c10:	9c04      	ldr	r4, [sp, #16]
 8010c12:	e9c4 2300 	strd	r2, r3, [r4]
 8010c16:	4602      	mov	r2, r0
 8010c18:	460b      	mov	r3, r1
 8010c1a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8010c1e:	f7ef faff 	bl	8000220 <__aeabi_dsub>
 8010c22:	ad4a      	add	r5, sp, #296	@ 0x128
 8010c24:	2401      	movs	r4, #1
 8010c26:	45a0      	cmp	r8, r4
 8010c28:	da2b      	bge.n	8010c82 <__kernel_rem_pio2+0x5d2>
 8010c2a:	f1b9 0f00 	cmp.w	r9, #0
 8010c2e:	d002      	beq.n	8010c36 <__kernel_rem_pio2+0x586>
 8010c30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010c34:	4619      	mov	r1, r3
 8010c36:	9b04      	ldr	r3, [sp, #16]
 8010c38:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010c3c:	e7a5      	b.n	8010b8a <__kernel_rem_pio2+0x4da>
 8010c3e:	9c05      	ldr	r4, [sp, #20]
 8010c40:	ab48      	add	r3, sp, #288	@ 0x120
 8010c42:	441c      	add	r4, r3
 8010c44:	2000      	movs	r0, #0
 8010c46:	2100      	movs	r1, #0
 8010c48:	f1b8 0f00 	cmp.w	r8, #0
 8010c4c:	da09      	bge.n	8010c62 <__kernel_rem_pio2+0x5b2>
 8010c4e:	f1b9 0f00 	cmp.w	r9, #0
 8010c52:	d002      	beq.n	8010c5a <__kernel_rem_pio2+0x5aa>
 8010c54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010c58:	4619      	mov	r1, r3
 8010c5a:	9b04      	ldr	r3, [sp, #16]
 8010c5c:	e9c3 0100 	strd	r0, r1, [r3]
 8010c60:	e793      	b.n	8010b8a <__kernel_rem_pio2+0x4da>
 8010c62:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010c66:	f7ef fadd 	bl	8000224 <__adddf3>
 8010c6a:	f108 38ff 	add.w	r8, r8, #4294967295
 8010c6e:	e7eb      	b.n	8010c48 <__kernel_rem_pio2+0x598>
 8010c70:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8010c74:	f7ef fad6 	bl	8000224 <__adddf3>
 8010c78:	3c01      	subs	r4, #1
 8010c7a:	e7c1      	b.n	8010c00 <__kernel_rem_pio2+0x550>
 8010c7c:	4602      	mov	r2, r0
 8010c7e:	460b      	mov	r3, r1
 8010c80:	e7c6      	b.n	8010c10 <__kernel_rem_pio2+0x560>
 8010c82:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8010c86:	f7ef facd 	bl	8000224 <__adddf3>
 8010c8a:	3401      	adds	r4, #1
 8010c8c:	e7cb      	b.n	8010c26 <__kernel_rem_pio2+0x576>
 8010c8e:	ed35 7b02 	vldmdb	r5!, {d7}
 8010c92:	ed8d 7b00 	vstr	d7, [sp]
 8010c96:	ed95 7b02 	vldr	d7, [r5, #8]
 8010c9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c9e:	ec53 2b17 	vmov	r2, r3, d7
 8010ca2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010ca6:	f7ef fabd 	bl	8000224 <__adddf3>
 8010caa:	4602      	mov	r2, r0
 8010cac:	460b      	mov	r3, r1
 8010cae:	4606      	mov	r6, r0
 8010cb0:	460f      	mov	r7, r1
 8010cb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010cb6:	f7ef fab3 	bl	8000220 <__aeabi_dsub>
 8010cba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010cbe:	f7ef fab1 	bl	8000224 <__adddf3>
 8010cc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010cc6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8010cca:	e9c5 6700 	strd	r6, r7, [r5]
 8010cce:	e771      	b.n	8010bb4 <__kernel_rem_pio2+0x504>
 8010cd0:	ed34 7b02 	vldmdb	r4!, {d7}
 8010cd4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8010cd8:	ec51 0b17 	vmov	r0, r1, d7
 8010cdc:	4652      	mov	r2, sl
 8010cde:	465b      	mov	r3, fp
 8010ce0:	ed8d 7b00 	vstr	d7, [sp]
 8010ce4:	f7ef fa9e 	bl	8000224 <__adddf3>
 8010ce8:	4602      	mov	r2, r0
 8010cea:	460b      	mov	r3, r1
 8010cec:	4606      	mov	r6, r0
 8010cee:	460f      	mov	r7, r1
 8010cf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010cf4:	f7ef fa94 	bl	8000220 <__aeabi_dsub>
 8010cf8:	4652      	mov	r2, sl
 8010cfa:	465b      	mov	r3, fp
 8010cfc:	f7ef fa92 	bl	8000224 <__adddf3>
 8010d00:	3d01      	subs	r5, #1
 8010d02:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010d06:	e9c4 6700 	strd	r6, r7, [r4]
 8010d0a:	e757      	b.n	8010bbc <__kernel_rem_pio2+0x50c>
 8010d0c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010d10:	f7ef fa88 	bl	8000224 <__adddf3>
 8010d14:	f108 38ff 	add.w	r8, r8, #4294967295
 8010d18:	e758      	b.n	8010bcc <__kernel_rem_pio2+0x51c>
 8010d1a:	bf00      	nop
 8010d1c:	f3af 8000 	nop.w
	...
 8010d28:	41700000 	.word	0x41700000
 8010d2c:	3e700000 	.word	0x3e700000
 8010d30:	9b04      	ldr	r3, [sp, #16]
 8010d32:	9a04      	ldr	r2, [sp, #16]
 8010d34:	601d      	str	r5, [r3, #0]
 8010d36:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8010d3a:	605c      	str	r4, [r3, #4]
 8010d3c:	609f      	str	r7, [r3, #8]
 8010d3e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8010d42:	60d3      	str	r3, [r2, #12]
 8010d44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010d48:	6110      	str	r0, [r2, #16]
 8010d4a:	6153      	str	r3, [r2, #20]
 8010d4c:	e71d      	b.n	8010b8a <__kernel_rem_pio2+0x4da>
 8010d4e:	bf00      	nop

08010d50 <__kernel_rem_pio2f>:
 8010d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d54:	ed2d 8b04 	vpush	{d8-d9}
 8010d58:	b0d9      	sub	sp, #356	@ 0x164
 8010d5a:	4690      	mov	r8, r2
 8010d5c:	9001      	str	r0, [sp, #4]
 8010d5e:	4ab6      	ldr	r2, [pc, #728]	@ (8011038 <__kernel_rem_pio2f+0x2e8>)
 8010d60:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8010d62:	f118 0f04 	cmn.w	r8, #4
 8010d66:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8010d6a:	460f      	mov	r7, r1
 8010d6c:	f103 3bff 	add.w	fp, r3, #4294967295
 8010d70:	db26      	blt.n	8010dc0 <__kernel_rem_pio2f+0x70>
 8010d72:	f1b8 0203 	subs.w	r2, r8, #3
 8010d76:	bf48      	it	mi
 8010d78:	f108 0204 	addmi.w	r2, r8, #4
 8010d7c:	10d2      	asrs	r2, r2, #3
 8010d7e:	1c55      	adds	r5, r2, #1
 8010d80:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010d82:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8011048 <__kernel_rem_pio2f+0x2f8>
 8010d86:	00e8      	lsls	r0, r5, #3
 8010d88:	eba2 060b 	sub.w	r6, r2, fp
 8010d8c:	9002      	str	r0, [sp, #8]
 8010d8e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8010d92:	eb0a 0c0b 	add.w	ip, sl, fp
 8010d96:	ac1c      	add	r4, sp, #112	@ 0x70
 8010d98:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8010d9c:	2000      	movs	r0, #0
 8010d9e:	4560      	cmp	r0, ip
 8010da0:	dd10      	ble.n	8010dc4 <__kernel_rem_pio2f+0x74>
 8010da2:	a91c      	add	r1, sp, #112	@ 0x70
 8010da4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8010da8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8010dac:	2600      	movs	r6, #0
 8010dae:	4556      	cmp	r6, sl
 8010db0:	dc24      	bgt.n	8010dfc <__kernel_rem_pio2f+0xac>
 8010db2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010db6:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8011048 <__kernel_rem_pio2f+0x2f8>
 8010dba:	4684      	mov	ip, r0
 8010dbc:	2400      	movs	r4, #0
 8010dbe:	e016      	b.n	8010dee <__kernel_rem_pio2f+0x9e>
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	e7dc      	b.n	8010d7e <__kernel_rem_pio2f+0x2e>
 8010dc4:	42c6      	cmn	r6, r0
 8010dc6:	bf5d      	ittte	pl
 8010dc8:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8010dcc:	ee07 1a90 	vmovpl	s15, r1
 8010dd0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8010dd4:	eef0 7a47 	vmovmi.f32	s15, s14
 8010dd8:	ece4 7a01 	vstmia	r4!, {s15}
 8010ddc:	3001      	adds	r0, #1
 8010dde:	e7de      	b.n	8010d9e <__kernel_rem_pio2f+0x4e>
 8010de0:	ecfe 6a01 	vldmia	lr!, {s13}
 8010de4:	ed3c 7a01 	vldmdb	ip!, {s14}
 8010de8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010dec:	3401      	adds	r4, #1
 8010dee:	455c      	cmp	r4, fp
 8010df0:	ddf6      	ble.n	8010de0 <__kernel_rem_pio2f+0x90>
 8010df2:	ece9 7a01 	vstmia	r9!, {s15}
 8010df6:	3601      	adds	r6, #1
 8010df8:	3004      	adds	r0, #4
 8010dfa:	e7d8      	b.n	8010dae <__kernel_rem_pio2f+0x5e>
 8010dfc:	a908      	add	r1, sp, #32
 8010dfe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010e02:	9104      	str	r1, [sp, #16]
 8010e04:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010e06:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8011044 <__kernel_rem_pio2f+0x2f4>
 8010e0a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8011040 <__kernel_rem_pio2f+0x2f0>
 8010e0e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010e12:	9203      	str	r2, [sp, #12]
 8010e14:	4654      	mov	r4, sl
 8010e16:	00a2      	lsls	r2, r4, #2
 8010e18:	9205      	str	r2, [sp, #20]
 8010e1a:	aa58      	add	r2, sp, #352	@ 0x160
 8010e1c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8010e20:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8010e24:	a944      	add	r1, sp, #272	@ 0x110
 8010e26:	aa08      	add	r2, sp, #32
 8010e28:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8010e2c:	4694      	mov	ip, r2
 8010e2e:	4626      	mov	r6, r4
 8010e30:	2e00      	cmp	r6, #0
 8010e32:	dc4c      	bgt.n	8010ece <__kernel_rem_pio2f+0x17e>
 8010e34:	4628      	mov	r0, r5
 8010e36:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010e3a:	f7ff fbd3 	bl	80105e4 <scalbnf>
 8010e3e:	eeb0 8a40 	vmov.f32	s16, s0
 8010e42:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8010e46:	ee28 0a00 	vmul.f32	s0, s16, s0
 8010e4a:	f000 fa65 	bl	8011318 <floorf>
 8010e4e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8010e52:	eea0 8a67 	vfms.f32	s16, s0, s15
 8010e56:	2d00      	cmp	r5, #0
 8010e58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010e5c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010e60:	ee17 9a90 	vmov	r9, s15
 8010e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010e68:	ee38 8a67 	vsub.f32	s16, s16, s15
 8010e6c:	dd41      	ble.n	8010ef2 <__kernel_rem_pio2f+0x1a2>
 8010e6e:	f104 3cff 	add.w	ip, r4, #4294967295
 8010e72:	a908      	add	r1, sp, #32
 8010e74:	f1c5 0e08 	rsb	lr, r5, #8
 8010e78:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8010e7c:	fa46 f00e 	asr.w	r0, r6, lr
 8010e80:	4481      	add	r9, r0
 8010e82:	fa00 f00e 	lsl.w	r0, r0, lr
 8010e86:	1a36      	subs	r6, r6, r0
 8010e88:	f1c5 0007 	rsb	r0, r5, #7
 8010e8c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8010e90:	4106      	asrs	r6, r0
 8010e92:	2e00      	cmp	r6, #0
 8010e94:	dd3c      	ble.n	8010f10 <__kernel_rem_pio2f+0x1c0>
 8010e96:	f04f 0e00 	mov.w	lr, #0
 8010e9a:	f109 0901 	add.w	r9, r9, #1
 8010e9e:	4670      	mov	r0, lr
 8010ea0:	4574      	cmp	r4, lr
 8010ea2:	dc68      	bgt.n	8010f76 <__kernel_rem_pio2f+0x226>
 8010ea4:	2d00      	cmp	r5, #0
 8010ea6:	dd03      	ble.n	8010eb0 <__kernel_rem_pio2f+0x160>
 8010ea8:	2d01      	cmp	r5, #1
 8010eaa:	d074      	beq.n	8010f96 <__kernel_rem_pio2f+0x246>
 8010eac:	2d02      	cmp	r5, #2
 8010eae:	d07d      	beq.n	8010fac <__kernel_rem_pio2f+0x25c>
 8010eb0:	2e02      	cmp	r6, #2
 8010eb2:	d12d      	bne.n	8010f10 <__kernel_rem_pio2f+0x1c0>
 8010eb4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010eb8:	ee30 8a48 	vsub.f32	s16, s0, s16
 8010ebc:	b340      	cbz	r0, 8010f10 <__kernel_rem_pio2f+0x1c0>
 8010ebe:	4628      	mov	r0, r5
 8010ec0:	9306      	str	r3, [sp, #24]
 8010ec2:	f7ff fb8f 	bl	80105e4 <scalbnf>
 8010ec6:	9b06      	ldr	r3, [sp, #24]
 8010ec8:	ee38 8a40 	vsub.f32	s16, s16, s0
 8010ecc:	e020      	b.n	8010f10 <__kernel_rem_pio2f+0x1c0>
 8010ece:	ee60 7a28 	vmul.f32	s15, s0, s17
 8010ed2:	3e01      	subs	r6, #1
 8010ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010edc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8010ee0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010ee4:	ecac 0a01 	vstmia	ip!, {s0}
 8010ee8:	ed30 0a01 	vldmdb	r0!, {s0}
 8010eec:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010ef0:	e79e      	b.n	8010e30 <__kernel_rem_pio2f+0xe0>
 8010ef2:	d105      	bne.n	8010f00 <__kernel_rem_pio2f+0x1b0>
 8010ef4:	1e60      	subs	r0, r4, #1
 8010ef6:	a908      	add	r1, sp, #32
 8010ef8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8010efc:	11f6      	asrs	r6, r6, #7
 8010efe:	e7c8      	b.n	8010e92 <__kernel_rem_pio2f+0x142>
 8010f00:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010f04:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f0c:	da31      	bge.n	8010f72 <__kernel_rem_pio2f+0x222>
 8010f0e:	2600      	movs	r6, #0
 8010f10:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f18:	f040 8098 	bne.w	801104c <__kernel_rem_pio2f+0x2fc>
 8010f1c:	1e60      	subs	r0, r4, #1
 8010f1e:	2200      	movs	r2, #0
 8010f20:	4550      	cmp	r0, sl
 8010f22:	da4b      	bge.n	8010fbc <__kernel_rem_pio2f+0x26c>
 8010f24:	2a00      	cmp	r2, #0
 8010f26:	d065      	beq.n	8010ff4 <__kernel_rem_pio2f+0x2a4>
 8010f28:	3c01      	subs	r4, #1
 8010f2a:	ab08      	add	r3, sp, #32
 8010f2c:	3d08      	subs	r5, #8
 8010f2e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d0f8      	beq.n	8010f28 <__kernel_rem_pio2f+0x1d8>
 8010f36:	4628      	mov	r0, r5
 8010f38:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010f3c:	f7ff fb52 	bl	80105e4 <scalbnf>
 8010f40:	1c63      	adds	r3, r4, #1
 8010f42:	aa44      	add	r2, sp, #272	@ 0x110
 8010f44:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8011044 <__kernel_rem_pio2f+0x2f4>
 8010f48:	0099      	lsls	r1, r3, #2
 8010f4a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010f4e:	4623      	mov	r3, r4
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	f280 80a9 	bge.w	80110a8 <__kernel_rem_pio2f+0x358>
 8010f56:	4623      	mov	r3, r4
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	f2c0 80c7 	blt.w	80110ec <__kernel_rem_pio2f+0x39c>
 8010f5e:	aa44      	add	r2, sp, #272	@ 0x110
 8010f60:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8010f64:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801103c <__kernel_rem_pio2f+0x2ec>
 8010f68:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8011048 <__kernel_rem_pio2f+0x2f8>
 8010f6c:	2000      	movs	r0, #0
 8010f6e:	1ae2      	subs	r2, r4, r3
 8010f70:	e0b1      	b.n	80110d6 <__kernel_rem_pio2f+0x386>
 8010f72:	2602      	movs	r6, #2
 8010f74:	e78f      	b.n	8010e96 <__kernel_rem_pio2f+0x146>
 8010f76:	f852 1b04 	ldr.w	r1, [r2], #4
 8010f7a:	b948      	cbnz	r0, 8010f90 <__kernel_rem_pio2f+0x240>
 8010f7c:	b121      	cbz	r1, 8010f88 <__kernel_rem_pio2f+0x238>
 8010f7e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8010f82:	f842 1c04 	str.w	r1, [r2, #-4]
 8010f86:	2101      	movs	r1, #1
 8010f88:	f10e 0e01 	add.w	lr, lr, #1
 8010f8c:	4608      	mov	r0, r1
 8010f8e:	e787      	b.n	8010ea0 <__kernel_rem_pio2f+0x150>
 8010f90:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8010f94:	e7f5      	b.n	8010f82 <__kernel_rem_pio2f+0x232>
 8010f96:	f104 3cff 	add.w	ip, r4, #4294967295
 8010f9a:	aa08      	add	r2, sp, #32
 8010f9c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010fa0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8010fa4:	a908      	add	r1, sp, #32
 8010fa6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8010faa:	e781      	b.n	8010eb0 <__kernel_rem_pio2f+0x160>
 8010fac:	f104 3cff 	add.w	ip, r4, #4294967295
 8010fb0:	aa08      	add	r2, sp, #32
 8010fb2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010fb6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8010fba:	e7f3      	b.n	8010fa4 <__kernel_rem_pio2f+0x254>
 8010fbc:	a908      	add	r1, sp, #32
 8010fbe:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8010fc2:	3801      	subs	r0, #1
 8010fc4:	430a      	orrs	r2, r1
 8010fc6:	e7ab      	b.n	8010f20 <__kernel_rem_pio2f+0x1d0>
 8010fc8:	3201      	adds	r2, #1
 8010fca:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8010fce:	2e00      	cmp	r6, #0
 8010fd0:	d0fa      	beq.n	8010fc8 <__kernel_rem_pio2f+0x278>
 8010fd2:	9905      	ldr	r1, [sp, #20]
 8010fd4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8010fd8:	eb0d 0001 	add.w	r0, sp, r1
 8010fdc:	18e6      	adds	r6, r4, r3
 8010fde:	a91c      	add	r1, sp, #112	@ 0x70
 8010fe0:	f104 0c01 	add.w	ip, r4, #1
 8010fe4:	384c      	subs	r0, #76	@ 0x4c
 8010fe6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8010fea:	4422      	add	r2, r4
 8010fec:	4562      	cmp	r2, ip
 8010fee:	da04      	bge.n	8010ffa <__kernel_rem_pio2f+0x2aa>
 8010ff0:	4614      	mov	r4, r2
 8010ff2:	e710      	b.n	8010e16 <__kernel_rem_pio2f+0xc6>
 8010ff4:	9804      	ldr	r0, [sp, #16]
 8010ff6:	2201      	movs	r2, #1
 8010ff8:	e7e7      	b.n	8010fca <__kernel_rem_pio2f+0x27a>
 8010ffa:	9903      	ldr	r1, [sp, #12]
 8010ffc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011000:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8011004:	9105      	str	r1, [sp, #20]
 8011006:	ee07 1a90 	vmov	s15, r1
 801100a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801100e:	2400      	movs	r4, #0
 8011010:	ece6 7a01 	vstmia	r6!, {s15}
 8011014:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8011048 <__kernel_rem_pio2f+0x2f8>
 8011018:	46b1      	mov	r9, r6
 801101a:	455c      	cmp	r4, fp
 801101c:	dd04      	ble.n	8011028 <__kernel_rem_pio2f+0x2d8>
 801101e:	ece0 7a01 	vstmia	r0!, {s15}
 8011022:	f10c 0c01 	add.w	ip, ip, #1
 8011026:	e7e1      	b.n	8010fec <__kernel_rem_pio2f+0x29c>
 8011028:	ecfe 6a01 	vldmia	lr!, {s13}
 801102c:	ed39 7a01 	vldmdb	r9!, {s14}
 8011030:	3401      	adds	r4, #1
 8011032:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011036:	e7f0      	b.n	801101a <__kernel_rem_pio2f+0x2ca>
 8011038:	080119bc 	.word	0x080119bc
 801103c:	08011990 	.word	0x08011990
 8011040:	43800000 	.word	0x43800000
 8011044:	3b800000 	.word	0x3b800000
 8011048:	00000000 	.word	0x00000000
 801104c:	9b02      	ldr	r3, [sp, #8]
 801104e:	eeb0 0a48 	vmov.f32	s0, s16
 8011052:	eba3 0008 	sub.w	r0, r3, r8
 8011056:	f7ff fac5 	bl	80105e4 <scalbnf>
 801105a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8011040 <__kernel_rem_pio2f+0x2f0>
 801105e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8011062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011066:	db19      	blt.n	801109c <__kernel_rem_pio2f+0x34c>
 8011068:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8011044 <__kernel_rem_pio2f+0x2f4>
 801106c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011070:	aa08      	add	r2, sp, #32
 8011072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011076:	3508      	adds	r5, #8
 8011078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801107c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8011080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011084:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011088:	ee10 3a10 	vmov	r3, s0
 801108c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8011090:	ee17 3a90 	vmov	r3, s15
 8011094:	3401      	adds	r4, #1
 8011096:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801109a:	e74c      	b.n	8010f36 <__kernel_rem_pio2f+0x1e6>
 801109c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80110a0:	aa08      	add	r2, sp, #32
 80110a2:	ee10 3a10 	vmov	r3, s0
 80110a6:	e7f6      	b.n	8011096 <__kernel_rem_pio2f+0x346>
 80110a8:	a808      	add	r0, sp, #32
 80110aa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80110ae:	9001      	str	r0, [sp, #4]
 80110b0:	ee07 0a90 	vmov	s15, r0
 80110b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110b8:	3b01      	subs	r3, #1
 80110ba:	ee67 7a80 	vmul.f32	s15, s15, s0
 80110be:	ee20 0a07 	vmul.f32	s0, s0, s14
 80110c2:	ed62 7a01 	vstmdb	r2!, {s15}
 80110c6:	e743      	b.n	8010f50 <__kernel_rem_pio2f+0x200>
 80110c8:	ecfc 6a01 	vldmia	ip!, {s13}
 80110cc:	ecb5 7a01 	vldmia	r5!, {s14}
 80110d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80110d4:	3001      	adds	r0, #1
 80110d6:	4550      	cmp	r0, sl
 80110d8:	dc01      	bgt.n	80110de <__kernel_rem_pio2f+0x38e>
 80110da:	4290      	cmp	r0, r2
 80110dc:	ddf4      	ble.n	80110c8 <__kernel_rem_pio2f+0x378>
 80110de:	a858      	add	r0, sp, #352	@ 0x160
 80110e0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80110e4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80110e8:	3b01      	subs	r3, #1
 80110ea:	e735      	b.n	8010f58 <__kernel_rem_pio2f+0x208>
 80110ec:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80110ee:	2b02      	cmp	r3, #2
 80110f0:	dc09      	bgt.n	8011106 <__kernel_rem_pio2f+0x3b6>
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	dc27      	bgt.n	8011146 <__kernel_rem_pio2f+0x3f6>
 80110f6:	d040      	beq.n	801117a <__kernel_rem_pio2f+0x42a>
 80110f8:	f009 0007 	and.w	r0, r9, #7
 80110fc:	b059      	add	sp, #356	@ 0x164
 80110fe:	ecbd 8b04 	vpop	{d8-d9}
 8011102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011106:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8011108:	2b03      	cmp	r3, #3
 801110a:	d1f5      	bne.n	80110f8 <__kernel_rem_pio2f+0x3a8>
 801110c:	aa30      	add	r2, sp, #192	@ 0xc0
 801110e:	1f0b      	subs	r3, r1, #4
 8011110:	4413      	add	r3, r2
 8011112:	461a      	mov	r2, r3
 8011114:	4620      	mov	r0, r4
 8011116:	2800      	cmp	r0, #0
 8011118:	dc50      	bgt.n	80111bc <__kernel_rem_pio2f+0x46c>
 801111a:	4622      	mov	r2, r4
 801111c:	2a01      	cmp	r2, #1
 801111e:	dc5d      	bgt.n	80111dc <__kernel_rem_pio2f+0x48c>
 8011120:	ab30      	add	r3, sp, #192	@ 0xc0
 8011122:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8011048 <__kernel_rem_pio2f+0x2f8>
 8011126:	440b      	add	r3, r1
 8011128:	2c01      	cmp	r4, #1
 801112a:	dc67      	bgt.n	80111fc <__kernel_rem_pio2f+0x4ac>
 801112c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8011130:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8011134:	2e00      	cmp	r6, #0
 8011136:	d167      	bne.n	8011208 <__kernel_rem_pio2f+0x4b8>
 8011138:	edc7 6a00 	vstr	s13, [r7]
 801113c:	ed87 7a01 	vstr	s14, [r7, #4]
 8011140:	edc7 7a02 	vstr	s15, [r7, #8]
 8011144:	e7d8      	b.n	80110f8 <__kernel_rem_pio2f+0x3a8>
 8011146:	ab30      	add	r3, sp, #192	@ 0xc0
 8011148:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8011048 <__kernel_rem_pio2f+0x2f8>
 801114c:	440b      	add	r3, r1
 801114e:	4622      	mov	r2, r4
 8011150:	2a00      	cmp	r2, #0
 8011152:	da24      	bge.n	801119e <__kernel_rem_pio2f+0x44e>
 8011154:	b34e      	cbz	r6, 80111aa <__kernel_rem_pio2f+0x45a>
 8011156:	eef1 7a47 	vneg.f32	s15, s14
 801115a:	edc7 7a00 	vstr	s15, [r7]
 801115e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8011162:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011166:	aa31      	add	r2, sp, #196	@ 0xc4
 8011168:	2301      	movs	r3, #1
 801116a:	429c      	cmp	r4, r3
 801116c:	da20      	bge.n	80111b0 <__kernel_rem_pio2f+0x460>
 801116e:	b10e      	cbz	r6, 8011174 <__kernel_rem_pio2f+0x424>
 8011170:	eef1 7a67 	vneg.f32	s15, s15
 8011174:	edc7 7a01 	vstr	s15, [r7, #4]
 8011178:	e7be      	b.n	80110f8 <__kernel_rem_pio2f+0x3a8>
 801117a:	ab30      	add	r3, sp, #192	@ 0xc0
 801117c:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8011048 <__kernel_rem_pio2f+0x2f8>
 8011180:	440b      	add	r3, r1
 8011182:	2c00      	cmp	r4, #0
 8011184:	da05      	bge.n	8011192 <__kernel_rem_pio2f+0x442>
 8011186:	b10e      	cbz	r6, 801118c <__kernel_rem_pio2f+0x43c>
 8011188:	eef1 7a67 	vneg.f32	s15, s15
 801118c:	edc7 7a00 	vstr	s15, [r7]
 8011190:	e7b2      	b.n	80110f8 <__kernel_rem_pio2f+0x3a8>
 8011192:	ed33 7a01 	vldmdb	r3!, {s14}
 8011196:	3c01      	subs	r4, #1
 8011198:	ee77 7a87 	vadd.f32	s15, s15, s14
 801119c:	e7f1      	b.n	8011182 <__kernel_rem_pio2f+0x432>
 801119e:	ed73 7a01 	vldmdb	r3!, {s15}
 80111a2:	3a01      	subs	r2, #1
 80111a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80111a8:	e7d2      	b.n	8011150 <__kernel_rem_pio2f+0x400>
 80111aa:	eef0 7a47 	vmov.f32	s15, s14
 80111ae:	e7d4      	b.n	801115a <__kernel_rem_pio2f+0x40a>
 80111b0:	ecb2 7a01 	vldmia	r2!, {s14}
 80111b4:	3301      	adds	r3, #1
 80111b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80111ba:	e7d6      	b.n	801116a <__kernel_rem_pio2f+0x41a>
 80111bc:	ed72 7a01 	vldmdb	r2!, {s15}
 80111c0:	edd2 6a01 	vldr	s13, [r2, #4]
 80111c4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80111c8:	3801      	subs	r0, #1
 80111ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80111ce:	ed82 7a00 	vstr	s14, [r2]
 80111d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111d6:	edc2 7a01 	vstr	s15, [r2, #4]
 80111da:	e79c      	b.n	8011116 <__kernel_rem_pio2f+0x3c6>
 80111dc:	ed73 7a01 	vldmdb	r3!, {s15}
 80111e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80111e4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80111e8:	3a01      	subs	r2, #1
 80111ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80111ee:	ed83 7a00 	vstr	s14, [r3]
 80111f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111f6:	edc3 7a01 	vstr	s15, [r3, #4]
 80111fa:	e78f      	b.n	801111c <__kernel_rem_pio2f+0x3cc>
 80111fc:	ed33 7a01 	vldmdb	r3!, {s14}
 8011200:	3c01      	subs	r4, #1
 8011202:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011206:	e78f      	b.n	8011128 <__kernel_rem_pio2f+0x3d8>
 8011208:	eef1 6a66 	vneg.f32	s13, s13
 801120c:	eeb1 7a47 	vneg.f32	s14, s14
 8011210:	edc7 6a00 	vstr	s13, [r7]
 8011214:	ed87 7a01 	vstr	s14, [r7, #4]
 8011218:	eef1 7a67 	vneg.f32	s15, s15
 801121c:	e790      	b.n	8011140 <__kernel_rem_pio2f+0x3f0>
 801121e:	bf00      	nop

08011220 <floor>:
 8011220:	ec51 0b10 	vmov	r0, r1, d0
 8011224:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801122c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8011230:	2e13      	cmp	r6, #19
 8011232:	460c      	mov	r4, r1
 8011234:	4605      	mov	r5, r0
 8011236:	4680      	mov	r8, r0
 8011238:	dc34      	bgt.n	80112a4 <floor+0x84>
 801123a:	2e00      	cmp	r6, #0
 801123c:	da17      	bge.n	801126e <floor+0x4e>
 801123e:	a332      	add	r3, pc, #200	@ (adr r3, 8011308 <floor+0xe8>)
 8011240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011244:	f7ee ffee 	bl	8000224 <__adddf3>
 8011248:	2200      	movs	r2, #0
 801124a:	2300      	movs	r3, #0
 801124c:	f7ef fc30 	bl	8000ab0 <__aeabi_dcmpgt>
 8011250:	b150      	cbz	r0, 8011268 <floor+0x48>
 8011252:	2c00      	cmp	r4, #0
 8011254:	da55      	bge.n	8011302 <floor+0xe2>
 8011256:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801125a:	432c      	orrs	r4, r5
 801125c:	2500      	movs	r5, #0
 801125e:	42ac      	cmp	r4, r5
 8011260:	4c2b      	ldr	r4, [pc, #172]	@ (8011310 <floor+0xf0>)
 8011262:	bf08      	it	eq
 8011264:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8011268:	4621      	mov	r1, r4
 801126a:	4628      	mov	r0, r5
 801126c:	e023      	b.n	80112b6 <floor+0x96>
 801126e:	4f29      	ldr	r7, [pc, #164]	@ (8011314 <floor+0xf4>)
 8011270:	4137      	asrs	r7, r6
 8011272:	ea01 0307 	and.w	r3, r1, r7
 8011276:	4303      	orrs	r3, r0
 8011278:	d01d      	beq.n	80112b6 <floor+0x96>
 801127a:	a323      	add	r3, pc, #140	@ (adr r3, 8011308 <floor+0xe8>)
 801127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011280:	f7ee ffd0 	bl	8000224 <__adddf3>
 8011284:	2200      	movs	r2, #0
 8011286:	2300      	movs	r3, #0
 8011288:	f7ef fc12 	bl	8000ab0 <__aeabi_dcmpgt>
 801128c:	2800      	cmp	r0, #0
 801128e:	d0eb      	beq.n	8011268 <floor+0x48>
 8011290:	2c00      	cmp	r4, #0
 8011292:	bfbe      	ittt	lt
 8011294:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8011298:	4133      	asrlt	r3, r6
 801129a:	18e4      	addlt	r4, r4, r3
 801129c:	ea24 0407 	bic.w	r4, r4, r7
 80112a0:	2500      	movs	r5, #0
 80112a2:	e7e1      	b.n	8011268 <floor+0x48>
 80112a4:	2e33      	cmp	r6, #51	@ 0x33
 80112a6:	dd0a      	ble.n	80112be <floor+0x9e>
 80112a8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80112ac:	d103      	bne.n	80112b6 <floor+0x96>
 80112ae:	4602      	mov	r2, r0
 80112b0:	460b      	mov	r3, r1
 80112b2:	f7ee ffb7 	bl	8000224 <__adddf3>
 80112b6:	ec41 0b10 	vmov	d0, r0, r1
 80112ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112be:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80112c2:	f04f 37ff 	mov.w	r7, #4294967295
 80112c6:	40df      	lsrs	r7, r3
 80112c8:	4207      	tst	r7, r0
 80112ca:	d0f4      	beq.n	80112b6 <floor+0x96>
 80112cc:	a30e      	add	r3, pc, #56	@ (adr r3, 8011308 <floor+0xe8>)
 80112ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112d2:	f7ee ffa7 	bl	8000224 <__adddf3>
 80112d6:	2200      	movs	r2, #0
 80112d8:	2300      	movs	r3, #0
 80112da:	f7ef fbe9 	bl	8000ab0 <__aeabi_dcmpgt>
 80112de:	2800      	cmp	r0, #0
 80112e0:	d0c2      	beq.n	8011268 <floor+0x48>
 80112e2:	2c00      	cmp	r4, #0
 80112e4:	da0a      	bge.n	80112fc <floor+0xdc>
 80112e6:	2e14      	cmp	r6, #20
 80112e8:	d101      	bne.n	80112ee <floor+0xce>
 80112ea:	3401      	adds	r4, #1
 80112ec:	e006      	b.n	80112fc <floor+0xdc>
 80112ee:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80112f2:	2301      	movs	r3, #1
 80112f4:	40b3      	lsls	r3, r6
 80112f6:	441d      	add	r5, r3
 80112f8:	4545      	cmp	r5, r8
 80112fa:	d3f6      	bcc.n	80112ea <floor+0xca>
 80112fc:	ea25 0507 	bic.w	r5, r5, r7
 8011300:	e7b2      	b.n	8011268 <floor+0x48>
 8011302:	2500      	movs	r5, #0
 8011304:	462c      	mov	r4, r5
 8011306:	e7af      	b.n	8011268 <floor+0x48>
 8011308:	8800759c 	.word	0x8800759c
 801130c:	7e37e43c 	.word	0x7e37e43c
 8011310:	bff00000 	.word	0xbff00000
 8011314:	000fffff 	.word	0x000fffff

08011318 <floorf>:
 8011318:	ee10 3a10 	vmov	r3, s0
 801131c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011320:	3a7f      	subs	r2, #127	@ 0x7f
 8011322:	2a16      	cmp	r2, #22
 8011324:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011328:	dc2b      	bgt.n	8011382 <floorf+0x6a>
 801132a:	2a00      	cmp	r2, #0
 801132c:	da12      	bge.n	8011354 <floorf+0x3c>
 801132e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011394 <floorf+0x7c>
 8011332:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011336:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801133e:	dd06      	ble.n	801134e <floorf+0x36>
 8011340:	2b00      	cmp	r3, #0
 8011342:	da24      	bge.n	801138e <floorf+0x76>
 8011344:	2900      	cmp	r1, #0
 8011346:	4b14      	ldr	r3, [pc, #80]	@ (8011398 <floorf+0x80>)
 8011348:	bf08      	it	eq
 801134a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801134e:	ee00 3a10 	vmov	s0, r3
 8011352:	4770      	bx	lr
 8011354:	4911      	ldr	r1, [pc, #68]	@ (801139c <floorf+0x84>)
 8011356:	4111      	asrs	r1, r2
 8011358:	420b      	tst	r3, r1
 801135a:	d0fa      	beq.n	8011352 <floorf+0x3a>
 801135c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8011394 <floorf+0x7c>
 8011360:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011364:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801136c:	ddef      	ble.n	801134e <floorf+0x36>
 801136e:	2b00      	cmp	r3, #0
 8011370:	bfbe      	ittt	lt
 8011372:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8011376:	fa40 f202 	asrlt.w	r2, r0, r2
 801137a:	189b      	addlt	r3, r3, r2
 801137c:	ea23 0301 	bic.w	r3, r3, r1
 8011380:	e7e5      	b.n	801134e <floorf+0x36>
 8011382:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011386:	d3e4      	bcc.n	8011352 <floorf+0x3a>
 8011388:	ee30 0a00 	vadd.f32	s0, s0, s0
 801138c:	4770      	bx	lr
 801138e:	2300      	movs	r3, #0
 8011390:	e7dd      	b.n	801134e <floorf+0x36>
 8011392:	bf00      	nop
 8011394:	7149f2ca 	.word	0x7149f2ca
 8011398:	bf800000 	.word	0xbf800000
 801139c:	007fffff 	.word	0x007fffff

080113a0 <_init>:
 80113a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113a2:	bf00      	nop
 80113a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113a6:	bc08      	pop	{r3}
 80113a8:	469e      	mov	lr, r3
 80113aa:	4770      	bx	lr

080113ac <_fini>:
 80113ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ae:	bf00      	nop
 80113b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113b2:	bc08      	pop	{r3}
 80113b4:	469e      	mov	lr, r3
 80113b6:	4770      	bx	lr
