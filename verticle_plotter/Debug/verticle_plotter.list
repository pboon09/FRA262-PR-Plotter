
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb30  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800bd08  0800bd08  0000cd08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c158  0800c158  0000e1c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c158  0800c158  0000d158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c160  0800c160  0000e1c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c160  0800c160  0000d160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c164  0800c164  0000d164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c0  20000000  0800c168  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a70  200001c0  0800c328  0000e1c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c30  0800c328  0000ec30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029832  00000000  00000000  0000e1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e0a  00000000  00000000  00037a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab0  00000000  00000000  0003c830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014b5  00000000  00000000  0003e2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cbd7  00000000  00000000  0003f795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027da7  00000000  00000000  0006c36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118b29  00000000  00000000  00094113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001acc3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007640  00000000  00000000  001acc80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001b42c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001c0 	.word	0x200001c0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bcf0 	.word	0x0800bcf0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001c4 	.word	0x200001c4
 8000214:	0800bcf0 	.word	0x0800bcf0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b988 	b.w	8000dbc <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	468e      	mov	lr, r1
 8000acc:	4604      	mov	r4, r0
 8000ace:	4688      	mov	r8, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14a      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4617      	mov	r7, r2
 8000ad8:	d962      	bls.n	8000ba0 <__udivmoddi4+0xdc>
 8000ada:	fab2 f682 	clz	r6, r2
 8000ade:	b14e      	cbz	r6, 8000af4 <__udivmoddi4+0x30>
 8000ae0:	f1c6 0320 	rsb	r3, r6, #32
 8000ae4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ae8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aec:	40b7      	lsls	r7, r6
 8000aee:	ea43 0808 	orr.w	r8, r3, r8
 8000af2:	40b4      	lsls	r4, r6
 8000af4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af8:	fa1f fc87 	uxth.w	ip, r7
 8000afc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b00:	0c23      	lsrs	r3, r4, #16
 8000b02:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b0a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d909      	bls.n	8000b26 <__udivmoddi4+0x62>
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b18:	f080 80ea 	bcs.w	8000cf0 <__udivmoddi4+0x22c>
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	f240 80e7 	bls.w	8000cf0 <__udivmoddi4+0x22c>
 8000b22:	3902      	subs	r1, #2
 8000b24:	443b      	add	r3, r7
 8000b26:	1a9a      	subs	r2, r3, r2
 8000b28:	b2a3      	uxth	r3, r4
 8000b2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b36:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b3a:	459c      	cmp	ip, r3
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0x8e>
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b44:	f080 80d6 	bcs.w	8000cf4 <__udivmoddi4+0x230>
 8000b48:	459c      	cmp	ip, r3
 8000b4a:	f240 80d3 	bls.w	8000cf4 <__udivmoddi4+0x230>
 8000b4e:	443b      	add	r3, r7
 8000b50:	3802      	subs	r0, #2
 8000b52:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b56:	eba3 030c 	sub.w	r3, r3, ip
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	b11d      	cbz	r5, 8000b66 <__udivmoddi4+0xa2>
 8000b5e:	40f3      	lsrs	r3, r6
 8000b60:	2200      	movs	r2, #0
 8000b62:	e9c5 3200 	strd	r3, r2, [r5]
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d905      	bls.n	8000b7a <__udivmoddi4+0xb6>
 8000b6e:	b10d      	cbz	r5, 8000b74 <__udivmoddi4+0xb0>
 8000b70:	e9c5 0100 	strd	r0, r1, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	4608      	mov	r0, r1
 8000b78:	e7f5      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000b7a:	fab3 f183 	clz	r1, r3
 8000b7e:	2900      	cmp	r1, #0
 8000b80:	d146      	bne.n	8000c10 <__udivmoddi4+0x14c>
 8000b82:	4573      	cmp	r3, lr
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xc8>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 8105 	bhi.w	8000d96 <__udivmoddi4+0x2d2>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4690      	mov	r8, r2
 8000b96:	2d00      	cmp	r5, #0
 8000b98:	d0e5      	beq.n	8000b66 <__udivmoddi4+0xa2>
 8000b9a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b9e:	e7e2      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	f000 8090 	beq.w	8000cc6 <__udivmoddi4+0x202>
 8000ba6:	fab2 f682 	clz	r6, r2
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	f040 80a4 	bne.w	8000cf8 <__udivmoddi4+0x234>
 8000bb0:	1a8a      	subs	r2, r1, r2
 8000bb2:	0c03      	lsrs	r3, r0, #16
 8000bb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb8:	b280      	uxth	r0, r0
 8000bba:	b2bc      	uxth	r4, r7
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bc2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bca:	fb04 f20c 	mul.w	r2, r4, ip
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d907      	bls.n	8000be2 <__udivmoddi4+0x11e>
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x11c>
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	f200 80e0 	bhi.w	8000da0 <__udivmoddi4+0x2dc>
 8000be0:	46c4      	mov	ip, r8
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000be8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bf0:	fb02 f404 	mul.w	r4, r2, r4
 8000bf4:	429c      	cmp	r4, r3
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x144>
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x142>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f200 80ca 	bhi.w	8000d9a <__udivmoddi4+0x2d6>
 8000c06:	4602      	mov	r2, r0
 8000c08:	1b1b      	subs	r3, r3, r4
 8000c0a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c0e:	e7a5      	b.n	8000b5c <__udivmoddi4+0x98>
 8000c10:	f1c1 0620 	rsb	r6, r1, #32
 8000c14:	408b      	lsls	r3, r1
 8000c16:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1a:	431f      	orrs	r7, r3
 8000c1c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c20:	fa20 f306 	lsr.w	r3, r0, r6
 8000c24:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c28:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c2c:	4323      	orrs	r3, r4
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	fa1f fc87 	uxth.w	ip, r7
 8000c36:	fbbe f0f9 	udiv	r0, lr, r9
 8000c3a:	0c1c      	lsrs	r4, r3, #16
 8000c3c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c40:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c44:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x1a0>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c56:	f080 809c 	bcs.w	8000d92 <__udivmoddi4+0x2ce>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8099 	bls.w	8000d92 <__udivmoddi4+0x2ce>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	eba4 040e 	sub.w	r4, r4, lr
 8000c68:	fa1f fe83 	uxth.w	lr, r3
 8000c6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c70:	fb09 4413 	mls	r4, r9, r3, r4
 8000c74:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c78:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x1ce>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c86:	f080 8082 	bcs.w	8000d8e <__udivmoddi4+0x2ca>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	d97f      	bls.n	8000d8e <__udivmoddi4+0x2ca>
 8000c8e:	3b02      	subs	r3, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c9e:	4564      	cmp	r4, ip
 8000ca0:	4673      	mov	r3, lr
 8000ca2:	46e1      	mov	r9, ip
 8000ca4:	d362      	bcc.n	8000d6c <__udivmoddi4+0x2a8>
 8000ca6:	d05f      	beq.n	8000d68 <__udivmoddi4+0x2a4>
 8000ca8:	b15d      	cbz	r5, 8000cc2 <__udivmoddi4+0x1fe>
 8000caa:	ebb8 0203 	subs.w	r2, r8, r3
 8000cae:	eb64 0409 	sbc.w	r4, r4, r9
 8000cb2:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb6:	fa22 f301 	lsr.w	r3, r2, r1
 8000cba:	431e      	orrs	r6, r3
 8000cbc:	40cc      	lsrs	r4, r1
 8000cbe:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	e74f      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000cc6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cca:	0c01      	lsrs	r1, r0, #16
 8000ccc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cd0:	b280      	uxth	r0, r0
 8000cd2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4638      	mov	r0, r7
 8000cda:	463c      	mov	r4, r7
 8000cdc:	46b8      	mov	r8, r7
 8000cde:	46be      	mov	lr, r7
 8000ce0:	2620      	movs	r6, #32
 8000ce2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ce6:	eba2 0208 	sub.w	r2, r2, r8
 8000cea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cee:	e766      	b.n	8000bbe <__udivmoddi4+0xfa>
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	e718      	b.n	8000b26 <__udivmoddi4+0x62>
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	e72c      	b.n	8000b52 <__udivmoddi4+0x8e>
 8000cf8:	f1c6 0220 	rsb	r2, r6, #32
 8000cfc:	fa2e f302 	lsr.w	r3, lr, r2
 8000d00:	40b7      	lsls	r7, r6
 8000d02:	40b1      	lsls	r1, r6
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d12:	b2bc      	uxth	r4, r7
 8000d14:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d18:	0c11      	lsrs	r1, r2, #16
 8000d1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1e:	fb08 f904 	mul.w	r9, r8, r4
 8000d22:	40b0      	lsls	r0, r6
 8000d24:	4589      	cmp	r9, r1
 8000d26:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d2a:	b280      	uxth	r0, r0
 8000d2c:	d93e      	bls.n	8000dac <__udivmoddi4+0x2e8>
 8000d2e:	1879      	adds	r1, r7, r1
 8000d30:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d34:	d201      	bcs.n	8000d3a <__udivmoddi4+0x276>
 8000d36:	4589      	cmp	r9, r1
 8000d38:	d81f      	bhi.n	8000d7a <__udivmoddi4+0x2b6>
 8000d3a:	eba1 0109 	sub.w	r1, r1, r9
 8000d3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d42:	fb09 f804 	mul.w	r8, r9, r4
 8000d46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d4a:	b292      	uxth	r2, r2
 8000d4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d50:	4542      	cmp	r2, r8
 8000d52:	d229      	bcs.n	8000da8 <__udivmoddi4+0x2e4>
 8000d54:	18ba      	adds	r2, r7, r2
 8000d56:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d5a:	d2c4      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d5c:	4542      	cmp	r2, r8
 8000d5e:	d2c2      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d60:	f1a9 0102 	sub.w	r1, r9, #2
 8000d64:	443a      	add	r2, r7
 8000d66:	e7be      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000d68:	45f0      	cmp	r8, lr
 8000d6a:	d29d      	bcs.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d6c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d70:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d74:	3801      	subs	r0, #1
 8000d76:	46e1      	mov	r9, ip
 8000d78:	e796      	b.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d7a:	eba7 0909 	sub.w	r9, r7, r9
 8000d7e:	4449      	add	r1, r9
 8000d80:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d84:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d88:	fb09 f804 	mul.w	r8, r9, r4
 8000d8c:	e7db      	b.n	8000d46 <__udivmoddi4+0x282>
 8000d8e:	4673      	mov	r3, lr
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1ce>
 8000d92:	4650      	mov	r0, sl
 8000d94:	e766      	b.n	8000c64 <__udivmoddi4+0x1a0>
 8000d96:	4608      	mov	r0, r1
 8000d98:	e6fd      	b.n	8000b96 <__udivmoddi4+0xd2>
 8000d9a:	443b      	add	r3, r7
 8000d9c:	3a02      	subs	r2, #2
 8000d9e:	e733      	b.n	8000c08 <__udivmoddi4+0x144>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	e71c      	b.n	8000be2 <__udivmoddi4+0x11e>
 8000da8:	4649      	mov	r1, r9
 8000daa:	e79c      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000dac:	eba1 0109 	sub.w	r1, r1, r9
 8000db0:	46c4      	mov	ip, r8
 8000db2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db6:	fb09 f804 	mul.w	r8, r9, r4
 8000dba:	e7c4      	b.n	8000d46 <__udivmoddi4+0x282>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6178      	str	r0, [r7, #20]
 8000dc8:	6139      	str	r1, [r7, #16]
 8000dca:	60fa      	str	r2, [r7, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dd2:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000dee:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	615a      	str	r2, [r3, #20]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	e008      	b.n	8000e14 <ADC_DMA_Init+0x54>
        buffer[i] = 0;
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	4413      	add	r3, r2
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3301      	adds	r3, #1
 8000e12:	61fb      	str	r3, [r7, #28]
 8000e14:	69fa      	ldr	r2, [r7, #28]
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d3f2      	bcc.n	8000e02 <ADC_DMA_Init+0x42>
    }
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3724      	adds	r7, #36	@ 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	217f      	movs	r1, #127	@ 0x7f
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 fa15 	bl	8005268 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6859      	ldr	r1, [r3, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	f003 fafe 	bl	800444c <HAL_ADC_Start_DMA>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8000e58:	b480      	push	{r7}
 8000e5a:	b087      	sub	sp, #28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	e012      	b.n	8000e98 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	4413      	add	r3, r2
 8000e84:	617b      	str	r3, [r7, #20]
        samples++;
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	7b1b      	ldrb	r3, [r3, #12]
 8000e90:	461a      	mov	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4413      	add	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d3e7      	bcc.n	8000e72 <ADC_DMA_GetValue+0x1a>
    }


    // Calculate raw ADC value and convert to voltage
    if (samples > 0) {
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d00f      	beq.n	8000ec8 <ADC_DMA_GetValue+0x70>
        float raw_value = (float)sum / samples;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	ee07 3a90 	vmov	s15, r3
 8000eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	ee07 3a90 	vmov	s15, r3
 8000eb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ec0:	edc7 7a02 	vstr	s15, [r7, #8]
        return raw_value;
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	e001      	b.n	8000ecc <ADC_DMA_GetValue+0x74>
    }

    return 0.0f;
 8000ec8:	f04f 0300 	mov.w	r3, #0
}
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed4:	371c      	adds	r7, #28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <ADC_DMA_GetJoystick>:

    // Compute current using WCS1700 formula
    return 15.1793457908771 * voltage - 24.8674344063837;
}

float ADC_DMA_GetJoystick(ADC_DMA *adc_dma, uint8_t channel_index, float joydata) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	ed87 0a01 	vstr	s0, [r7, #4]
 8000eee:	72fb      	strb	r3, [r7, #11]
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 8000ef0:	7afb      	ldrb	r3, [r7, #11]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f7ff ffaf 	bl	8000e58 <ADC_DMA_GetValue>
 8000efa:	ed87 0a05 	vstr	s0, [r7, #20]

    return mapf(value, 0.0, adc_dma->adc_resolution, 0.0, joydata);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f04:	ed97 2a01 	vldr	s4, [r7, #4]
 8000f08:	eddf 1a08 	vldr	s3, [pc, #32]	@ 8000f2c <ADC_DMA_GetJoystick+0x4c>
 8000f0c:	eeb0 1a67 	vmov.f32	s2, s15
 8000f10:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8000f2c <ADC_DMA_GetJoystick+0x4c>
 8000f14:	ed97 0a05 	vldr	s0, [r7, #20]
 8000f18:	f000 fa92 	bl	8001440 <mapf>
 8000f1c:	eef0 7a40 	vmov.f32	s15, s0
}
 8000f20:	eeb0 0a67 	vmov.f32	s0, s15
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	00000000 	.word	0x00000000

08000f30 <PID_CONTROLLER_Init>:
  if (_u > _upper_limit) return _upper_limit;
  else if (_u < _lower_limit) return _lower_limit;
  return (int32_t)_u;
}

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6178      	str	r0, [r7, #20]
 8000f38:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f3c:	edc7 0a03 	vstr	s1, [r7, #12]
 8000f40:	ed87 1a02 	vstr	s2, [r7, #8]
 8000f44:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]

}
 8000f78:	bf00      	nop
 8000f7a:	371c      	adds	r7, #28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	4613      	mov	r3, r2
 8000f92:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	88fa      	ldrh	r2, [r7, #6]
 8000f9e:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	3328      	adds	r3, #40	@ 0x28
 8000fa4:	88fa      	ldrh	r2, [r7, #6]
 8000fa6:	68b9      	ldr	r1, [r7, #8]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fb29 	bl	8001600 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	8b3a      	ldrh	r2, [r7, #24]
 8000fb8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fd8:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d15f      	bne.n	80010a6 <MDXX_set_range+0xda>
		if (duty == 0) {
 8000fe6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff2:	d115      	bne.n	8001020 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	3310      	adds	r3, #16
 8000ff8:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001178 <MDXX_set_range+0x1ac>
 8000ffc:	ed97 0a02 	vldr	s0, [r7, #8]
 8001000:	4618      	mov	r0, r3
 8001002:	f000 fb21 	bl	8001648 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3328      	adds	r3, #40	@ 0x28
 800100a:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001178 <MDXX_set_range+0x1ac>
 800100e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fb18 	bl	8001648 <PWM_write_range>
			mdxx->cmd = 0;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2200      	movs	r2, #0
 800101c:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 800101e:	e0a6      	b.n	800116e <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8001020:	edd7 7a01 	vldr	s15, [r7, #4]
 8001024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102c:	dd1a      	ble.n	8001064 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3310      	adds	r3, #16
 8001032:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001178 <MDXX_set_range+0x1ac>
 8001036:	ed97 0a02 	vldr	s0, [r7, #8]
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fb04 	bl	8001648 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3328      	adds	r3, #40	@ 0x28
 8001044:	edd7 0a01 	vldr	s1, [r7, #4]
 8001048:	ed97 0a02 	vldr	s0, [r7, #8]
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fafb 	bl	8001648 <PWM_write_range>
			mdxx->cmd = duty;
 8001052:	edd7 7a01 	vldr	s15, [r7, #4]
 8001056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800105a:	ee17 2a90 	vmov	r2, s15
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001062:	e084      	b.n	800116e <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3310      	adds	r3, #16
 8001068:	eddf 0a44 	vldr	s1, [pc, #272]	@ 800117c <MDXX_set_range+0x1b0>
 800106c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fae9 	bl	8001648 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3328      	adds	r3, #40	@ 0x28
 800107a:	edd7 7a01 	vldr	s15, [r7, #4]
 800107e:	eef0 7ae7 	vabs.f32	s15, s15
 8001082:	eef0 0a67 	vmov.f32	s1, s15
 8001086:	ed97 0a02 	vldr	s0, [r7, #8]
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fadc 	bl	8001648 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001090:	edd7 7a01 	vldr	s15, [r7, #4]
 8001094:	eef0 7ae7 	vabs.f32	s15, s15
 8001098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800109c:	ee17 2a90 	vmov	r2, s15
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80010a4:	e063      	b.n	800116e <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d15e      	bne.n	800116e <MDXX_set_range+0x1a2>
		if (duty == 0) {
 80010b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010bc:	d115      	bne.n	80010ea <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80010c8:	2200      	movs	r2, #0
 80010ca:	4619      	mov	r1, r3
 80010cc:	f005 f812 	bl	80060f4 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3328      	adds	r3, #40	@ 0x28
 80010d4:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001178 <MDXX_set_range+0x1ac>
 80010d8:	ed97 0a02 	vldr	s0, [r7, #8]
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 fab3 	bl	8001648 <PWM_write_range>
			mdxx->cmd = 0;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80010e8:	e041      	b.n	800116e <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80010ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f6:	dd1a      	ble.n	800112e <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001102:	2200      	movs	r2, #0
 8001104:	4619      	mov	r1, r3
 8001106:	f004 fff5 	bl	80060f4 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3328      	adds	r3, #40	@ 0x28
 800110e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001112:	ed97 0a02 	vldr	s0, [r7, #8]
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fa96 	bl	8001648 <PWM_write_range>
			mdxx->cmd = duty;
 800111c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001124:	ee17 2a90 	vmov	r2, s15
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800112c:	e01f      	b.n	800116e <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001138:	2201      	movs	r2, #1
 800113a:	4619      	mov	r1, r3
 800113c:	f004 ffda 	bl	80060f4 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	3328      	adds	r3, #40	@ 0x28
 8001144:	edd7 7a01 	vldr	s15, [r7, #4]
 8001148:	eef0 7ae7 	vabs.f32	s15, s15
 800114c:	eef0 0a67 	vmov.f32	s1, s15
 8001150:	ed97 0a02 	vldr	s0, [r7, #8]
 8001154:	4618      	mov	r0, r3
 8001156:	f000 fa77 	bl	8001648 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800115a:	edd7 7a01 	vldr	s15, [r7, #4]
 800115e:	eef0 7ae7 	vabs.f32	s15, s15
 8001162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001166:	ee17 2a90 	vmov	r2, s15
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	00000000 	.word	0x00000000
 800117c:	42c80000 	.word	0x42c80000

08001180 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, // kg
    .c = 64.83e-3,           // m
    .prismatic_pulley = 1.5915e-2 // m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	601a      	str	r2, [r3, #0]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <REVOLUTE_MOTOR_DFD_Init>:
    float v = qd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	605a      	str	r2, [r3, #4]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <PRISMATIC_MOTOR_FFD_Init>:
    float v = (gravity_compensate_plotter + gravity_compensate_rail + mass_torque) * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	601a      	str	r2, [r3, #0]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <PRISMATIC_MOTOR_DFD_Init>:
    float v = sd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	605a      	str	r2, [r3, #4]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001200:	b580      	push	{r7, lr}
 8001202:	ed2d 8b02 	vpush	{d8}
 8001206:	b08a      	sub	sp, #40	@ 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	460b      	mov	r3, r1
 800120e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001212:	edc7 0a00 	vstr	s1, [r7]
 8001216:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001218:	897b      	ldrh	r3, [r7, #10]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	b29b      	uxth	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <FIR_init+0x2a>
        numTaps += 1;
 8001224:	897b      	ldrh	r3, [r7, #10]
 8001226:	3301      	adds	r3, #1
 8001228:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	897a      	ldrh	r2, [r7, #10]
 800122e:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2200      	movs	r2, #0
 8001234:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001236:	897b      	ldrh	r3, [r7, #10]
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4618      	mov	r0, r3
 800123c:	f009 feea 	bl	800b014 <malloc>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001248:	897b      	ldrh	r3, [r7, #10]
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4618      	mov	r0, r3
 800124e:	f009 fee1 	bl	800b014 <malloc>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 80e0 	beq.w	8001424 <FIR_init+0x224>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 80db 	beq.w	8001424 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 800126e:	2300      	movs	r3, #0
 8001270:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001272:	e00a      	b.n	800128a <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001284:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001286:	3301      	adds	r3, #1
 8001288:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800128a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800128c:	897b      	ldrh	r3, [r7, #10]
 800128e:	429a      	cmp	r2, r3
 8001290:	d3f0      	bcc.n	8001274 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001292:	edd7 6a01 	vldr	s13, [r7, #4]
 8001296:	ed97 7a00 	vldr	s14, [r7]
 800129a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800129e:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 80012a2:	897b      	ldrh	r3, [r7, #10]
 80012a4:	085b      	lsrs	r3, r3, #1
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 80012aa:	2300      	movs	r3, #0
 80012ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80012ae:	e077      	b.n	80013a0 <FIR_init+0x1a0>
            if (i == half_taps) {
 80012b0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80012b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d10c      	bne.n	80012d6 <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80012cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012d0:	edc3 7a00 	vstr	s15, [r3]
 80012d4:	e02c      	b.n	8001330 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 80012d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80012d8:	8afb      	ldrh	r3, [r7, #22]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	b29b      	uxth	r3, r3
 80012de:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 80012e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80012e4:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001430 <FIR_init+0x230>
 80012e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012f0:	ee07 3a90 	vmov	s15, r3
 80012f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001300:	f009 ffc6 	bl	800b290 <sinf>
 8001304:	eef0 6a40 	vmov.f32	s13, s0
 8001308:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001314:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001434 <FIR_init+0x234>
 8001318:	ee27 7a87 	vmul.f32	s14, s15, s14
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800132c:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	ed93 8a00 	vldr	s16, [r3]
 8001340:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001344:	ee07 3a90 	vmov	s15, r3
 8001348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001430 <FIR_init+0x230>
 8001350:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001354:	897b      	ldrh	r3, [r7, #10]
 8001356:	3b01      	subs	r3, #1
 8001358:	ee07 3a90 	vmov	s15, r3
 800135c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001360:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001364:	eeb0 0a66 	vmov.f32	s0, s13
 8001368:	f009 ff4e 	bl	800b208 <cosf>
 800136c:	eef0 7a40 	vmov.f32	s15, s0
 8001370:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001438 <FIR_init+0x238>
 8001374:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001378:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800143c <FIR_init+0x23c>
 800137c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001390:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001394:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001398:	b29b      	uxth	r3, r3
 800139a:	3301      	adds	r3, #1
 800139c:	b29b      	uxth	r3, r3
 800139e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80013a0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80013a4:	897b      	ldrh	r3, [r7, #10]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	db82      	blt.n	80012b0 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 80013aa:	f04f 0300 	mov.w	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80013b0:	2300      	movs	r3, #0
 80013b2:	83fb      	strh	r3, [r7, #30]
 80013b4:	e00f      	b.n	80013d6 <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	8bfb      	ldrh	r3, [r7, #30]
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	ed97 7a08 	vldr	s14, [r7, #32]
 80013c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013cc:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80013d0:	8bfb      	ldrh	r3, [r7, #30]
 80013d2:	3301      	adds	r3, #1
 80013d4:	83fb      	strh	r3, [r7, #30]
 80013d6:	8bfa      	ldrh	r2, [r7, #30]
 80013d8:	897b      	ldrh	r3, [r7, #10]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d3eb      	bcc.n	80013b6 <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 80013de:	edd7 7a08 	vldr	s15, [r7, #32]
 80013e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	d01b      	beq.n	8001424 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 80013ec:	2300      	movs	r3, #0
 80013ee:	83bb      	strh	r3, [r7, #28]
 80013f0:	e014      	b.n	800141c <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	8bbb      	ldrh	r3, [r7, #28]
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	edd3 6a00 	vldr	s13, [r3]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	8bbb      	ldrh	r3, [r7, #28]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	ed97 7a08 	vldr	s14, [r7, #32]
 800140e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001412:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001416:	8bbb      	ldrh	r3, [r7, #28]
 8001418:	3301      	adds	r3, #1
 800141a:	83bb      	strh	r3, [r7, #28]
 800141c:	8bba      	ldrh	r2, [r7, #28]
 800141e:	897b      	ldrh	r3, [r7, #10]
 8001420:	429a      	cmp	r2, r3
 8001422:	d3e6      	bcc.n	80013f2 <FIR_init+0x1f2>
            }
        }
    }
}
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	@ 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	ecbd 8b02 	vpop	{d8}
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40c90fdb 	.word	0x40c90fdb
 8001434:	40490fdb 	.word	0x40490fdb
 8001438:	3eeb851f 	.word	0x3eeb851f
 800143c:	3f0a3d71 	.word	0x3f0a3d71

08001440 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	@ 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	ed87 0a05 	vstr	s0, [r7, #20]
 800144a:	edc7 0a04 	vstr	s1, [r7, #16]
 800144e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001452:	edc7 1a02 	vstr	s3, [r7, #8]
 8001456:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 800145a:	ed97 7a05 	vldr	s14, [r7, #20]
 800145e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001462:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001466:	ed97 7a03 	vldr	s14, [r7, #12]
 800146a:	edd7 7a04 	vldr	s15, [r7, #16]
 800146e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001476:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 800147a:	ed97 7a01 	vldr	s14, [r7, #4]
 800147e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001482:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001486:	edd7 7a07 	vldr	s15, [r7, #28]
 800148a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001496:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	ee07 3a90 	vmov	s15, r3
}
 80014a0:	eeb0 0a67 	vmov.f32	s0, s15
 80014a4:	3724      	adds	r7, #36	@ 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80014b4:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <modbus_1t5_Timeout+0x3c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2201      	movs	r2, #1
 80014ba:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80014bc:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <modbus_1t5_Timeout+0x3c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2200      	movs	r2, #0
 80014c6:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 80014c8:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <modbus_1t5_Timeout+0x3c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <modbus_1t5_Timeout+0x3c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f042 0201 	orr.w	r2, r2, #1
 80014de:	601a      	str	r2, [r3, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	200001dc 	.word	0x200001dc

080014f0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80014f8:	4b04      	ldr	r3, [pc, #16]	@ (800150c <modbus_3t5_Timeout+0x1c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2201      	movs	r2, #1
 80014fe:	755a      	strb	r2, [r3, #21]

}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	200001dc 	.word	0x200001dc

08001510 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f008 fc9f 	bl	8009e5c <HAL_UART_GetError>
 800151e:	4603      	mov	r3, r0
 8001520:	2b20      	cmp	r3, #32
 8001522:	d101      	bne.n	8001528 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001524:	f7ff ffc4 	bl	80014b0 <modbus_1t5_Timeout>

	}
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 800153e:	4a2d      	ldr	r2, [pc, #180]	@ (80015f4 <Modbus_init+0xc4>)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001544:	4b2b      	ldr	r3, [pc, #172]	@ (80015f4 <Modbus_init+0xc4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 800154c:	4b29      	ldr	r3, [pc, #164]	@ (80015f4 <Modbus_init+0xc4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001554:	4b27      	ldr	r3, [pc, #156]	@ (80015f4 <Modbus_init+0xc4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 800155c:	4b25      	ldr	r3, [pc, #148]	@ (80015f4 <Modbus_init+0xc4>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	7e3a      	ldrb	r2, [r7, #24]
 8001562:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001564:	4b23      	ldr	r3, [pc, #140]	@ (80015f4 <Modbus_init+0xc4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	69fa      	ldr	r2, [r7, #28]
 800156a:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	4a21      	ldr	r2, [pc, #132]	@ (80015f8 <Modbus_init+0xc8>)
 8001572:	210e      	movs	r1, #14
 8001574:	4618      	mov	r0, r3
 8001576:	f006 ff1f 	bl	80083b8 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2110      	movs	r1, #16
 8001580:	4618      	mov	r0, r3
 8001582:	f008 fc15 	bl	8009db0 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	4618      	mov	r0, r3
 800158c:	f008 fc2c 	bl	8009de8 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	4a19      	ldr	r2, [pc, #100]	@ (80015fc <Modbus_init+0xcc>)
 8001596:	2104      	movs	r1, #4
 8001598:	4618      	mov	r0, r3
 800159a:	f007 ff5d 	bl	8009458 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 800159e:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <Modbus_init+0xc4>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80015a4:	4b13      	ldr	r3, [pc, #76]	@ (80015f4 <Modbus_init+0xc4>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <Modbus_init+0xc4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80015b0:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80015b4:	4413      	add	r3, r2
 80015b6:	3302      	adds	r3, #2
 80015b8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015bc:	4619      	mov	r1, r3
 80015be:	f008 f805 	bl	80095cc <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80015c2:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <Modbus_init+0xc4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d10c      	bne.n	80015ec <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80015d2:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <Modbus_init+0xc4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	4618      	mov	r0, r3
 80015da:	f005 febf 	bl	800735c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80015de:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <Modbus_init+0xc4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f006 f918 	bl	800781c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80015ec:	bf00      	nop
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200001dc 	.word	0x200001dc
 80015f8:	080014f1 	.word	0x080014f1
 80015fc:	08001511 	.word	0x08001511

08001600 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	4613      	mov	r3, r2
 800160c:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4a0b      	ldr	r2, [pc, #44]	@ (8001640 <PWM_init+0x40>)
 8001612:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	88fa      	ldrh	r2, [r7, #6]
 800161e:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8001626:	68b8      	ldr	r0, [r7, #8]
 8001628:	f005 fe28 	bl	800727c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	4619      	mov	r1, r3
 8001630:	68b8      	ldr	r0, [r7, #8]
 8001632:	f005 ff79 	bl	8007528 <HAL_TIM_PWM_Start>
}
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	0a21fe80 	.word	0x0a21fe80
 8001644:	00000000 	.word	0x00000000

08001648 <PWM_write_range>:
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}

void PWM_write_range(PWM* pwm, float freq, float duty){
 8001648:	b5b0      	push	{r4, r5, r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	ed87 0a02 	vstr	s0, [r7, #8]
 8001654:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001658:	edd7 7a02 	vldr	s15, [r7, #8]
 800165c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001664:	d137      	bne.n	80016d6 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	889b      	ldrh	r3, [r3, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d105      	bne.n	800167a <PWM_write_range+0x32>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2200      	movs	r2, #0
 8001676:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001678:	e0e1      	b.n	800183e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	889b      	ldrh	r3, [r3, #4]
 800167e:	2b04      	cmp	r3, #4
 8001680:	d105      	bne.n	800168e <PWM_write_range+0x46>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2300      	movs	r3, #0
 800168a:	6393      	str	r3, [r2, #56]	@ 0x38
 800168c:	e0d7      	b.n	800183e <PWM_write_range+0x1f6>
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	889b      	ldrh	r3, [r3, #4]
 8001692:	2b08      	cmp	r3, #8
 8001694:	d105      	bne.n	80016a2 <PWM_write_range+0x5a>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	2300      	movs	r3, #0
 800169e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80016a0:	e0cd      	b.n	800183e <PWM_write_range+0x1f6>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	889b      	ldrh	r3, [r3, #4]
 80016a6:	2b0c      	cmp	r3, #12
 80016a8:	d105      	bne.n	80016b6 <PWM_write_range+0x6e>
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	2300      	movs	r3, #0
 80016b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b4:	e0c3      	b.n	800183e <PWM_write_range+0x1f6>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	889b      	ldrh	r3, [r3, #4]
 80016ba:	2b10      	cmp	r3, #16
 80016bc:	d105      	bne.n	80016ca <PWM_write_range+0x82>
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	2300      	movs	r3, #0
 80016c6:	6493      	str	r3, [r2, #72]	@ 0x48
 80016c8:	e0b9      	b.n	800183e <PWM_write_range+0x1f6>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2300      	movs	r3, #0
 80016d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80016d4:	e0b3      	b.n	800183e <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80016e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80016e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ee:	ee17 2a90 	vmov	r2, s15
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80016fe:	33fe      	adds	r3, #254	@ 0xfe
 8001700:	4a53      	ldr	r2, [pc, #332]	@ (8001850 <PWM_write_range+0x208>)
 8001702:	fba2 2303 	umull	r2, r3, r2, r3
 8001706:	0bdb      	lsrs	r3, r3, #15
 8001708:	b29b      	uxth	r3, r3
 800170a:	3b01      	subs	r3, #1
 800170c:	b29a      	uxth	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	ee07 3a90 	vmov	s15, r3
 800171a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	899b      	ldrh	r3, [r3, #12]
 8001722:	3301      	adds	r3, #1
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800172c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001730:	ed97 7a02 	vldr	s14, [r7, #8]
 8001734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001738:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800173c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001744:	ee17 3a90 	vmov	r3, s15
 8001748:	b29a      	uxth	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	89db      	ldrh	r3, [r3, #14]
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe feb2 	bl	80004bc <__aeabi_i2d>
 8001758:	4604      	mov	r4, r0
 800175a:	460d      	mov	r5, r1
 800175c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001760:	eef0 7ae7 	vabs.f32	s15, s15
 8001764:	ee17 0a90 	vmov	r0, s15
 8001768:	f7fe feba 	bl	80004e0 <__aeabi_f2d>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4620      	mov	r0, r4
 8001772:	4629      	mov	r1, r5
 8001774:	f7fe ff0c 	bl	8000590 <__aeabi_dmul>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	a331      	add	r3, pc, #196	@ (adr r3, 8001848 <PWM_write_range+0x200>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	f7ff f82d 	bl	80007e4 <__aeabi_ddiv>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff f90f 	bl	80009b4 <__aeabi_d2uiz>
 8001796:	4603      	mov	r3, r0
 8001798:	b29b      	uxth	r3, r3
 800179a:	461a      	mov	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	899a      	ldrh	r2, [r3, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	89da      	ldrh	r2, [r3, #14]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	89da      	ldrh	r2, [r3, #14]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	889b      	ldrh	r3, [r3, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d106      	bne.n	80017d8 <PWM_write_range+0x190>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	6952      	ldr	r2, [r2, #20]
 80017d4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80017d6:	e032      	b.n	800183e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	889b      	ldrh	r3, [r3, #4]
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d106      	bne.n	80017ee <PWM_write_range+0x1a6>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80017ec:	e027      	b.n	800183e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	889b      	ldrh	r3, [r3, #4]
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d106      	bne.n	8001804 <PWM_write_range+0x1bc>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001802:	e01c      	b.n	800183e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	889b      	ldrh	r3, [r3, #4]
 8001808:	2b0c      	cmp	r3, #12
 800180a:	d106      	bne.n	800181a <PWM_write_range+0x1d2>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001818:	e011      	b.n	800183e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	889b      	ldrh	r3, [r3, #4]
 800181e:	2b10      	cmp	r3, #16
 8001820:	d106      	bne.n	8001830 <PWM_write_range+0x1e8>
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800182e:	e006      	b.n	800183e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800183c:	e7ff      	b.n	800183e <PWM_write_range+0x1f6>
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bdb0      	pop	{r4, r5, r7, pc}
 8001846:	bf00      	nop
 8001848:	00000000 	.word	0x00000000
 800184c:	40efffe0 	.word	0x40efffe0
 8001850:	80008001 	.word	0x80008001

08001854 <QEI_init>:
* Created on: Mar 30, 2024
* Author: beamk
*/
#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6178      	str	r0, [r7, #20]
 800185c:	6139      	str	r1, [r7, #16]
 800185e:	60fa      	str	r2, [r7, #12]
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	ed87 0a01 	vstr	s0, [r7, #4]
    qei->htimx = htimx;
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	611a      	str	r2, [r3, #16]
    qei->ppr = ppr;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	619a      	str	r2, [r3, #24]
    qei->freq = freq;
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	621a      	str	r2, [r3, #32]
    qei->c[NOW] = 0;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2200      	movs	r2, #0
 8001882:	605a      	str	r2, [r3, #4]
    qei->pps = 0;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = 0;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->enc_period = 65536 - (65536 % ppr);
 800189c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	fb93 f2f2 	sdiv	r2, r3, r2
 80018a6:	68f9      	ldr	r1, [r7, #12]
 80018a8:	fb01 f202 	mul.w	r2, r1, r2
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	615a      	str	r2, [r3, #20]
    qei->pulses = 0;
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	2200      	movs	r2, #0
 80018ba:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf = 0;
    qei->revs = 0;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->rads = 0;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->mm = 0;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mmps = 0;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	645a      	str	r2, [r3, #68]	@ 0x44

    qei->ratio = ratio;  // Gear ratio or scaling factor
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	649a      	str	r2, [r3, #72]	@ 0x48
    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 80018e2:	213c      	movs	r1, #60	@ 0x3c
 80018e4:	6938      	ldr	r0, [r7, #16]
 80018e6:	f006 f8db 	bl	8007aa0 <HAL_TIM_Encoder_Start>
}
 80018ea:	bf00      	nop
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	0000      	movs	r0, r0
 80018f4:	0000      	movs	r0, r0
	...

080018f8 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 80018f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx); // Update the current count
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	601a      	str	r2, [r3, #0]

    // Calculate the difference in counts
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	60fb      	str	r3, [r7, #12]

    //Unwrap
    if (diff_counts > qei->enc_period / 2) {
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	0fda      	lsrs	r2, r3, #31
 8001920:	4413      	add	r3, r2
 8001922:	105b      	asrs	r3, r3, #1
 8001924:	461a      	mov	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4293      	cmp	r3, r2
 800192a:	dd05      	ble.n	8001938 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	e00e      	b.n	8001956 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period) / 2) {
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	425b      	negs	r3, r3
 800193e:	0fda      	lsrs	r2, r3, #31
 8001940:	4413      	add	r3, r2
 8001942:	105b      	asrs	r3, r3, #1
 8001944:	461a      	mov	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4293      	cmp	r3, r2
 800194a:	da04      	bge.n	8001956 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	61da      	str	r2, [r3, #28]
    //qei->diff_countsf = (float)diff_counts*1.25;

    // Calculate Position with ratio adjustment
    qei->pulses += qei->diff_counts;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	441a      	add	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf += qei->diff_countsf;

    // Apply ratio to all position calculations
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->ratio;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	ee07 3a90 	vmov	s15, r3
 8001978:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	ee07 3a90 	vmov	s15, r3
 8001984:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001988:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * 10.0 * qei->ratio;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fd9b 	bl	80004e0 <__aeabi_f2d>
 80019aa:	4604      	mov	r4, r0
 80019ac:	460d      	mov	r5, r1
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	ee07 3a90 	vmov	s15, r3
 80019b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019ca:	ee16 0a90 	vmov	r0, s13
 80019ce:	f7fe fd87 	bl	80004e0 <__aeabi_f2d>
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	4b36      	ldr	r3, [pc, #216]	@ (8001ab0 <QEI_get_diff_count+0x1b8>)
 80019d8:	f7fe fdda 	bl	8000590 <__aeabi_dmul>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4690      	mov	r8, r2
 80019e2:	4699      	mov	r9, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fd79 	bl	80004e0 <__aeabi_f2d>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4640      	mov	r0, r8
 80019f4:	4649      	mov	r1, r9
 80019f6:	f7fe fdcb 	bl	8000590 <__aeabi_dmul>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4620      	mov	r0, r4
 8001a00:	4629      	mov	r1, r5
 8001a02:	f7fe fc0f 	bl	8000224 <__adddf3>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f7fe fff1 	bl	80009f4 <__aeabi_d2f>
 8001a12:	4602      	mov	r2, r0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->ratio;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7fe fd5f 	bl	80004e0 <__aeabi_f2d>
 8001a22:	4604      	mov	r4, r0
 8001a24:	460d      	mov	r5, r1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	ee07 3a90 	vmov	s15, r3
 8001a3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a42:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a46:	ee17 0a90 	vmov	r0, s15
 8001a4a:	f7fe fd49 	bl	80004e0 <__aeabi_f2d>
 8001a4e:	a316      	add	r3, pc, #88	@ (adr r3, 8001aa8 <QEI_get_diff_count+0x1b0>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7fe fd9c 	bl	8000590 <__aeabi_dmul>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4690      	mov	r8, r2
 8001a5e:	4699      	mov	r9, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fd3b 	bl	80004e0 <__aeabi_f2d>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4640      	mov	r0, r8
 8001a70:	4649      	mov	r1, r9
 8001a72:	f7fe fd8d 	bl	8000590 <__aeabi_dmul>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	4629      	mov	r1, r5
 8001a7e:	f7fe fbd1 	bl	8000224 <__adddf3>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f7fe ffb3 	bl	80009f4 <__aeabi_d2f>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	639a      	str	r2, [r3, #56]	@ 0x38

    qei->c[PREV] = qei->c[NOW]; // Store the previous count
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	605a      	str	r2, [r3, #4]
}
 8001a9c:	bf00      	nop
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001aa6:	bf00      	nop
 8001aa8:	54442d18 	.word	0x54442d18
 8001aac:	400921fb 	.word	0x400921fb
 8001ab0:	40240000 	.word	0x40240000
 8001ab4:	00000000 	.word	0x00000000

08001ab8 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
    // Calculate Velocity with ratio adjustment
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6a12      	ldr	r2, [r2, #32]
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    // Apply ratio to all velocity calculations
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->ratio;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fcfe 	bl	80004e0 <__aeabi_f2d>
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	4b6b      	ldr	r3, [pc, #428]	@ (8001c98 <QEI_compute_data+0x1e0>)
 8001aea:	f7fe fd51 	bl	8000590 <__aeabi_dmul>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4614      	mov	r4, r2
 8001af4:	461d      	mov	r5, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	ee07 3a90 	vmov	s15, r3
 8001afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b02:	ee17 0a90 	vmov	r0, s15
 8001b06:	f7fe fceb 	bl	80004e0 <__aeabi_f2d>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4620      	mov	r0, r4
 8001b10:	4629      	mov	r1, r5
 8001b12:	f7fe fe67 	bl	80007e4 <__aeabi_ddiv>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4614      	mov	r4, r2
 8001b1c:	461d      	mov	r5, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fcdc 	bl	80004e0 <__aeabi_f2d>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	4629      	mov	r1, r5
 8001b30:	f7fe fd2e 	bl	8000590 <__aeabi_dmul>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7fe ff5a 	bl	80009f4 <__aeabi_d2f>
 8001b40:	4602      	mov	r2, r0
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->ratio;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001b4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b50:	ee17 0a90 	vmov	r0, s15
 8001b54:	f7fe fcc4 	bl	80004e0 <__aeabi_f2d>
 8001b58:	a34d      	add	r3, pc, #308	@ (adr r3, 8001c90 <QEI_compute_data+0x1d8>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	f7fe fd17 	bl	8000590 <__aeabi_dmul>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4614      	mov	r4, r2
 8001b68:	461d      	mov	r5, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	ee07 3a90 	vmov	s15, r3
 8001b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b76:	ee17 0a90 	vmov	r0, s15
 8001b7a:	f7fe fcb1 	bl	80004e0 <__aeabi_f2d>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4620      	mov	r0, r4
 8001b84:	4629      	mov	r1, r5
 8001b86:	f7fe fe2d 	bl	80007e4 <__aeabi_ddiv>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4614      	mov	r4, r2
 8001b90:	461d      	mov	r5, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fca2 	bl	80004e0 <__aeabi_f2d>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	f7fe fcf4 	bl	8000590 <__aeabi_dmul>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f7fe ff20 	bl	80009f4 <__aeabi_d2f>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->mmps = qei->pps * 10.0 / (float)(qei->ppr) * qei->ratio;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fc8e 	bl	80004e0 <__aeabi_f2d>
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	4b34      	ldr	r3, [pc, #208]	@ (8001c9c <QEI_compute_data+0x1e4>)
 8001bca:	f7fe fce1 	bl	8000590 <__aeabi_dmul>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4614      	mov	r4, r2
 8001bd4:	461d      	mov	r5, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	ee07 3a90 	vmov	s15, r3
 8001bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be2:	ee17 0a90 	vmov	r0, s15
 8001be6:	f7fe fc7b 	bl	80004e0 <__aeabi_f2d>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4620      	mov	r0, r4
 8001bf0:	4629      	mov	r1, r5
 8001bf2:	f7fe fdf7 	bl	80007e4 <__aeabi_ddiv>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4614      	mov	r4, r2
 8001bfc:	461d      	mov	r5, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fc6c 	bl	80004e0 <__aeabi_f2d>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	4629      	mov	r1, r5
 8001c10:	f7fe fcbe 	bl	8000590 <__aeabi_dmul>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f7fe feea 	bl	80009f4 <__aeabi_d2f>
 8001c20:	4602      	mov	r2, r0
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	645a      	str	r2, [r3, #68]	@ 0x44

    // Calculate Acceleration with ratio adjustment
    qei->r[NOW] = qei->radps;  // radps already has ratio applied
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
    float diff_velocity = (qei->r[NOW] - qei->r[PREV]);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c3e:	edc7 7a03 	vstr	s15, [r7, #12]
    if (diff_velocity == 0) {
 8001c42:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4e:	d104      	bne.n	8001c5a <QEI_compute_data+0x1a2>
        qei->radpss = 0;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c58:	e00f      	b.n	8001c7a <QEI_compute_data+0x1c2>
    } else {
        qei->radpss = diff_velocity / (1 / (qei->freq));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d102      	bne.n	8001c68 <QEI_compute_data+0x1b0>
 8001c62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c66:	e001      	b.n	8001c6c <QEI_compute_data+0x1b4>
 8001c68:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001ca0 <QEI_compute_data+0x1e8>
 8001c6c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
        // No need to multiply by ratio again since diff_velocity already includes it
    }
    qei->r[PREV] = qei->r[NOW]; // Store the previous count
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	60da      	str	r2, [r3, #12]
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bdb0      	pop	{r4, r5, r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	f3af 8000 	nop.w
 8001c90:	54442d18 	.word	0x54442d18
 8001c94:	400921fb 	.word	0x400921fb
 8001c98:	404e0000 	.word	0x404e0000
 8001c9c:	40240000 	.word	0x40240000
 8001ca0:	00000000 	.word	0x00000000

08001ca4 <Trapezoidal_Evaluated>:
    trapGen->time_total = trapGen->t3;
}

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8001ca4:	b480      	push	{r7}
 8001ca6:	b08d      	sub	sp, #52	@ 0x34
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6178      	str	r0, [r7, #20]
 8001cac:	6139      	str	r1, [r7, #16]
 8001cae:	ed87 0a03 	vstr	s0, [r7, #12]
 8001cb2:	edc7 0a02 	vstr	s1, [r7, #8]
 8001cb6:	ed87 1a01 	vstr	s2, [r7, #4]
 8001cba:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cc4:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8001f48 <Trapezoidal_Evaluated+0x2a4>
 8001cc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	ed93 7a03 	vldr	s14, [r3, #12]
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce6:	f200 811b 	bhi.w	8001f20 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2200      	movs	r2, #0
 8001cee:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	7c1b      	ldrb	r3, [r3, #16]
 8001cf4:	b25b      	sxtb	r3, r3
 8001cf6:	ee07 3a90 	vmov	s15, r3
 8001cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfe:	ed97 7a00 	vldr	s14, [r7]
 8001d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d06:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	ed93 7a00 	vldr	s14, [r3]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d16:	eeb4 7a67 	vcmp.f32	s14, s15
 8001d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1e:	d109      	bne.n	8001d34 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	edd3 7a00 	vldr	s15, [r3]
 8001d26:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8001d32:	e00c      	b.n	8001d4e <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	7c1b      	ldrb	r3, [r3, #16]
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	ee07 3a90 	vmov	s15, r3
 8001d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d42:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d4a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	edd3 7a00 	vldr	s15, [r3]
 8001d5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	d824      	bhi.n	8001dae <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8001d64:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001d68:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001d6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d84:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d98:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001daa:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 8001dac:	e0c6      	b.n	8001f3c <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	ed93 7a03 	vldr	s14, [r3, #12]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc2:	d830      	bhi.n	8001e26 <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8001dc4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001dc8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001dcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	edd3 7a00 	vldr	s15, [r3]
 8001dd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	edd3 7a00 	vldr	s15, [r3]
 8001de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dec:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	ed93 7a03 	vldr	s14, [r3, #12]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	edd3 7a00 	vldr	s15, [r3]
 8001dfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e00:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e08:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e1a:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
}
 8001e24:	e08a      	b.n	8001f3c <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3a:	d900      	bls.n	8001e3e <Trapezoidal_Evaluated+0x19a>
}
 8001e3c:	e07e      	b.n	8001f3c <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8001e3e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e42:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001e46:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	edd3 7a00 	vldr	s15, [r3]
 8001e50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	edd3 7a00 	vldr	s15, [r3]
 8001e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e5e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e66:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	edd3 7a00 	vldr	s15, [r3]
 8001e7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e82:	dd11      	ble.n	8001ea8 <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	edd3 7a00 	vldr	s15, [r3]
 8001e90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e94:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	ed93 7a03 	vldr	s14, [r3, #12]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001eb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb8:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 8001ebc:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001ec0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ec4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ec8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001ecc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ed0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001ed4:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001ed8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001edc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ee0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ee4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ee8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 8001ef6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001efa:	edd7 7a07 	vldr	s15, [r7, #28]
 8001efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f02:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001f06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 8001f10:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f14:	eef1 7a67 	vneg.f32	s15, s15
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001f1e:	e00d      	b.n	8001f3c <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	2201      	movs	r2, #1
 8001f24:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
}
 8001f3c:	bf00      	nop
 8001f3e:	3734      	adds	r7, #52	@ 0x34
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	3a83126f 	.word	0x3a83126f

08001f4c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08c      	sub	sp, #48	@ 0x30
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001f52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	2220      	movs	r2, #32
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f009 f90b 	bl	800b180 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f6a:	4b39      	ldr	r3, [pc, #228]	@ (8002050 <MX_ADC1_Init+0x104>)
 8001f6c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001f70:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f72:	4b37      	ldr	r3, [pc, #220]	@ (8002050 <MX_ADC1_Init+0x104>)
 8001f74:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001f78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f7a:	4b35      	ldr	r3, [pc, #212]	@ (8002050 <MX_ADC1_Init+0x104>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f80:	4b33      	ldr	r3, [pc, #204]	@ (8002050 <MX_ADC1_Init+0x104>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001f86:	4b32      	ldr	r3, [pc, #200]	@ (8002050 <MX_ADC1_Init+0x104>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f8c:	4b30      	ldr	r3, [pc, #192]	@ (8002050 <MX_ADC1_Init+0x104>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f92:	4b2f      	ldr	r3, [pc, #188]	@ (8002050 <MX_ADC1_Init+0x104>)
 8001f94:	2204      	movs	r2, #4
 8001f96:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f98:	4b2d      	ldr	r3, [pc, #180]	@ (8002050 <MX_ADC1_Init+0x104>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f9e:	4b2c      	ldr	r3, [pc, #176]	@ (8002050 <MX_ADC1_Init+0x104>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001fa4:	4b2a      	ldr	r3, [pc, #168]	@ (8002050 <MX_ADC1_Init+0x104>)
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001faa:	4b29      	ldr	r3, [pc, #164]	@ (8002050 <MX_ADC1_Init+0x104>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fb2:	4b27      	ldr	r3, [pc, #156]	@ (8002050 <MX_ADC1_Init+0x104>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fb8:	4b25      	ldr	r3, [pc, #148]	@ (8002050 <MX_ADC1_Init+0x104>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001fbe:	4b24      	ldr	r3, [pc, #144]	@ (8002050 <MX_ADC1_Init+0x104>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001fc6:	4b22      	ldr	r3, [pc, #136]	@ (8002050 <MX_ADC1_Init+0x104>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001fcc:	4b20      	ldr	r3, [pc, #128]	@ (8002050 <MX_ADC1_Init+0x104>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fd4:	481e      	ldr	r0, [pc, #120]	@ (8002050 <MX_ADC1_Init+0x104>)
 8001fd6:	f002 f87d 	bl	80040d4 <HAL_ADC_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001fe0:	f000 fd36 	bl	8002a50 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001fe8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fec:	4619      	mov	r1, r3
 8001fee:	4818      	ldr	r0, [pc, #96]	@ (8002050 <MX_ADC1_Init+0x104>)
 8001ff0:	f003 f99c 	bl	800532c <HAL_ADCEx_MultiModeConfigChannel>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001ffa:	f000 fd29 	bl	8002a50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001ffe:	4b15      	ldr	r3, [pc, #84]	@ (8002054 <MX_ADC1_Init+0x108>)
 8002000:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002002:	2306      	movs	r3, #6
 8002004:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002006:	2307      	movs	r3, #7
 8002008:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800200a:	237f      	movs	r3, #127	@ 0x7f
 800200c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800200e:	2304      	movs	r3, #4
 8002010:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	4619      	mov	r1, r3
 800201a:	480d      	ldr	r0, [pc, #52]	@ (8002050 <MX_ADC1_Init+0x104>)
 800201c:	f002 fb08 	bl	8004630 <HAL_ADC_ConfigChannel>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002026:	f000 fd13 	bl	8002a50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800202a:	4b0b      	ldr	r3, [pc, #44]	@ (8002058 <MX_ADC1_Init+0x10c>)
 800202c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800202e:	230c      	movs	r3, #12
 8002030:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	4619      	mov	r1, r3
 8002036:	4806      	ldr	r0, [pc, #24]	@ (8002050 <MX_ADC1_Init+0x104>)
 8002038:	f002 fafa 	bl	8004630 <HAL_ADC_ConfigChannel>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002042:	f000 fd05 	bl	8002a50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002046:	bf00      	nop
 8002048:	3730      	adds	r7, #48	@ 0x30
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200001e0 	.word	0x200001e0
 8002054:	19200040 	.word	0x19200040
 8002058:	1d500080 	.word	0x1d500080

0800205c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b09e      	sub	sp, #120	@ 0x78
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002074:	f107 0310 	add.w	r3, r7, #16
 8002078:	2254      	movs	r2, #84	@ 0x54
 800207a:	2100      	movs	r1, #0
 800207c:	4618      	mov	r0, r3
 800207e:	f009 f87f 	bl	800b180 <memset>
  if(adcHandle->Instance==ADC1)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800208a:	d15e      	bne.n	800214a <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800208c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002090:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002092:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002096:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	4618      	mov	r0, r3
 800209e:	f004 fe3b 	bl	8006d18 <HAL_RCCEx_PeriphCLKConfig>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80020a8:	f000 fcd2 	bl	8002a50 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80020ac:	4b29      	ldr	r3, [pc, #164]	@ (8002154 <HAL_ADC_MspInit+0xf8>)
 80020ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b0:	4a28      	ldr	r2, [pc, #160]	@ (8002154 <HAL_ADC_MspInit+0xf8>)
 80020b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020b8:	4b26      	ldr	r3, [pc, #152]	@ (8002154 <HAL_ADC_MspInit+0xf8>)
 80020ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c4:	4b23      	ldr	r3, [pc, #140]	@ (8002154 <HAL_ADC_MspInit+0xf8>)
 80020c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c8:	4a22      	ldr	r2, [pc, #136]	@ (8002154 <HAL_ADC_MspInit+0xf8>)
 80020ca:	f043 0304 	orr.w	r3, r3, #4
 80020ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020d0:	4b20      	ldr	r3, [pc, #128]	@ (8002154 <HAL_ADC_MspInit+0xf8>)
 80020d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020dc:	2303      	movs	r3, #3
 80020de:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020e0:	2303      	movs	r3, #3
 80020e2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80020ec:	4619      	mov	r1, r3
 80020ee:	481a      	ldr	r0, [pc, #104]	@ (8002158 <HAL_ADC_MspInit+0xfc>)
 80020f0:	f003 fe66 	bl	8005dc0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80020f4:	4b19      	ldr	r3, [pc, #100]	@ (800215c <HAL_ADC_MspInit+0x100>)
 80020f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002160 <HAL_ADC_MspInit+0x104>)
 80020f8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80020fa:	4b18      	ldr	r3, [pc, #96]	@ (800215c <HAL_ADC_MspInit+0x100>)
 80020fc:	2205      	movs	r2, #5
 80020fe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002100:	4b16      	ldr	r3, [pc, #88]	@ (800215c <HAL_ADC_MspInit+0x100>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002106:	4b15      	ldr	r3, [pc, #84]	@ (800215c <HAL_ADC_MspInit+0x100>)
 8002108:	2200      	movs	r2, #0
 800210a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800210c:	4b13      	ldr	r3, [pc, #76]	@ (800215c <HAL_ADC_MspInit+0x100>)
 800210e:	2280      	movs	r2, #128	@ 0x80
 8002110:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002112:	4b12      	ldr	r3, [pc, #72]	@ (800215c <HAL_ADC_MspInit+0x100>)
 8002114:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002118:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800211a:	4b10      	ldr	r3, [pc, #64]	@ (800215c <HAL_ADC_MspInit+0x100>)
 800211c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002120:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002122:	4b0e      	ldr	r3, [pc, #56]	@ (800215c <HAL_ADC_MspInit+0x100>)
 8002124:	2220      	movs	r2, #32
 8002126:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002128:	4b0c      	ldr	r3, [pc, #48]	@ (800215c <HAL_ADC_MspInit+0x100>)
 800212a:	2200      	movs	r2, #0
 800212c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800212e:	480b      	ldr	r0, [pc, #44]	@ (800215c <HAL_ADC_MspInit+0x100>)
 8002130:	f003 fb14 	bl	800575c <HAL_DMA_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 800213a:	f000 fc89 	bl	8002a50 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a06      	ldr	r2, [pc, #24]	@ (800215c <HAL_ADC_MspInit+0x100>)
 8002142:	655a      	str	r2, [r3, #84]	@ 0x54
 8002144:	4a05      	ldr	r2, [pc, #20]	@ (800215c <HAL_ADC_MspInit+0x100>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800214a:	bf00      	nop
 800214c:	3778      	adds	r7, #120	@ 0x78
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000
 8002158:	48000800 	.word	0x48000800
 800215c:	2000024c 	.word	0x2000024c
 8002160:	40020008 	.word	0x40020008

08002164 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800216a:	4b1a      	ldr	r3, [pc, #104]	@ (80021d4 <MX_DMA_Init+0x70>)
 800216c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800216e:	4a19      	ldr	r2, [pc, #100]	@ (80021d4 <MX_DMA_Init+0x70>)
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	6493      	str	r3, [r2, #72]	@ 0x48
 8002176:	4b17      	ldr	r3, [pc, #92]	@ (80021d4 <MX_DMA_Init+0x70>)
 8002178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002182:	4b14      	ldr	r3, [pc, #80]	@ (80021d4 <MX_DMA_Init+0x70>)
 8002184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002186:	4a13      	ldr	r2, [pc, #76]	@ (80021d4 <MX_DMA_Init+0x70>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6493      	str	r3, [r2, #72]	@ 0x48
 800218e:	4b11      	ldr	r3, [pc, #68]	@ (80021d4 <MX_DMA_Init+0x70>)
 8002190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	603b      	str	r3, [r7, #0]
 8002198:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800219a:	2200      	movs	r2, #0
 800219c:	2100      	movs	r1, #0
 800219e:	200b      	movs	r0, #11
 80021a0:	f003 faa7 	bl	80056f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80021a4:	200b      	movs	r0, #11
 80021a6:	f003 fabe 	bl	8005726 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2100      	movs	r1, #0
 80021ae:	200c      	movs	r0, #12
 80021b0:	f003 fa9f 	bl	80056f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80021b4:	200c      	movs	r0, #12
 80021b6:	f003 fab6 	bl	8005726 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	200d      	movs	r0, #13
 80021c0:	f003 fa97 	bl	80056f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80021c4:	200d      	movs	r0, #13
 80021c6:	f003 faae 	bl	8005726 <HAL_NVIC_EnableIRQ>

}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000

080021d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08a      	sub	sp, #40	@ 0x28
 80021dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	609a      	str	r2, [r3, #8]
 80021ea:	60da      	str	r2, [r3, #12]
 80021ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ee:	4b4f      	ldr	r3, [pc, #316]	@ (800232c <MX_GPIO_Init+0x154>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f2:	4a4e      	ldr	r2, [pc, #312]	@ (800232c <MX_GPIO_Init+0x154>)
 80021f4:	f043 0304 	orr.w	r3, r3, #4
 80021f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021fa:	4b4c      	ldr	r3, [pc, #304]	@ (800232c <MX_GPIO_Init+0x154>)
 80021fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002206:	4b49      	ldr	r3, [pc, #292]	@ (800232c <MX_GPIO_Init+0x154>)
 8002208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220a:	4a48      	ldr	r2, [pc, #288]	@ (800232c <MX_GPIO_Init+0x154>)
 800220c:	f043 0320 	orr.w	r3, r3, #32
 8002210:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002212:	4b46      	ldr	r3, [pc, #280]	@ (800232c <MX_GPIO_Init+0x154>)
 8002214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002216:	f003 0320 	and.w	r3, r3, #32
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800221e:	4b43      	ldr	r3, [pc, #268]	@ (800232c <MX_GPIO_Init+0x154>)
 8002220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002222:	4a42      	ldr	r2, [pc, #264]	@ (800232c <MX_GPIO_Init+0x154>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800222a:	4b40      	ldr	r3, [pc, #256]	@ (800232c <MX_GPIO_Init+0x154>)
 800222c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002236:	4b3d      	ldr	r3, [pc, #244]	@ (800232c <MX_GPIO_Init+0x154>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223a:	4a3c      	ldr	r2, [pc, #240]	@ (800232c <MX_GPIO_Init+0x154>)
 800223c:	f043 0302 	orr.w	r3, r3, #2
 8002240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002242:	4b3a      	ldr	r3, [pc, #232]	@ (800232c <MX_GPIO_Init+0x154>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002254:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002258:	f003 ff4c 	bl	80060f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800225c:	2200      	movs	r2, #0
 800225e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002262:	4833      	ldr	r0, [pc, #204]	@ (8002330 <MX_GPIO_Init+0x158>)
 8002264:	f003 ff46 	bl	80060f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002268:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800226c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800226e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	4619      	mov	r1, r3
 800227e:	482c      	ldr	r0, [pc, #176]	@ (8002330 <MX_GPIO_Init+0x158>)
 8002280:	f003 fd9e 	bl	8005dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8002284:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8002288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228a:	2301      	movs	r3, #1
 800228c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002292:	2300      	movs	r3, #0
 8002294:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	4619      	mov	r1, r3
 800229c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022a0:	f003 fd8e 	bl	8005dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_LIM_Pin LOWER_LIM_Pin PHOTO_REVO_Pin PB11
                           PB12 EMER_Pin PROX_Pin SAVE_Pin */
  GPIO_InitStruct.Pin = UPPER_LIM_Pin|LOWER_LIM_Pin|PHOTO_REVO_Pin|GPIO_PIN_11
 80022a4:	f641 43b6 	movw	r3, #7350	@ 0x1cb6
 80022a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|EMER_Pin|PROX_Pin|SAVE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	4619      	mov	r1, r3
 80022b8:	481e      	ldr	r0, [pc, #120]	@ (8002334 <MX_GPIO_Init+0x15c>)
 80022ba:	f003 fd81 	bl	8005dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c4:	2301      	movs	r3, #1
 80022c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	2300      	movs	r3, #0
 80022ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	4619      	mov	r1, r3
 80022d6:	4816      	ldr	r0, [pc, #88]	@ (8002330 <MX_GPIO_Init+0x158>)
 80022d8:	f003 fd72 	bl	8005dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PHOTO_PRIS_Pin */
  GPIO_InitStruct.Pin = PHOTO_PRIS_Pin;
 80022dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PHOTO_PRIS_GPIO_Port, &GPIO_InitStruct);
 80022ea:	f107 0314 	add.w	r3, r7, #20
 80022ee:	4619      	mov	r1, r3
 80022f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022f4:	f003 fd64 	bl	8005dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : START_Pin DELETE_Pin RESET_SYS_Pin */
  GPIO_InitStruct.Pin = START_Pin|DELETE_Pin|RESET_SYS_Pin;
 80022f8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80022fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022fe:	2300      	movs	r3, #0
 8002300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002306:	f107 0314 	add.w	r3, r7, #20
 800230a:	4619      	mov	r1, r3
 800230c:	4808      	ldr	r0, [pc, #32]	@ (8002330 <MX_GPIO_Init+0x158>)
 800230e:	f003 fd57 	bl	8005dc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	2100      	movs	r1, #0
 8002316:	2028      	movs	r0, #40	@ 0x28
 8002318:	f003 f9eb 	bl	80056f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800231c:	2028      	movs	r0, #40	@ 0x28
 800231e:	f003 fa02 	bl	8005726 <HAL_NVIC_EnableIRQ>

}
 8002322:	bf00      	nop
 8002324:	3728      	adds	r7, #40	@ 0x28
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	48000800 	.word	0x48000800
 8002334:	48000400 	.word	0x48000400

08002338 <Kalman_Start>:
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
	  filter->Kalman_Speed = filter->X_k[1];
	  return  filter->Kalman_Speed;
}

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix){
 8002338:	b5b0      	push	{r4, r5, r7, lr}
 800233a:	b0a2      	sub	sp, #136	@ 0x88
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
	filter->Q = 0.05f; //0.05
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4a38      	ldr	r2, [pc, #224]	@ (8002428 <Kalman_Start+0xf0>)
 8002348:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = 1.0f;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002352:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {0.0f, 1.0f, 0.0f, 0.0f};
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	677b      	str	r3, [r7, #116]	@ 0x74
 800235c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002360:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

	float32_t g[4] = {0.0f,
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	667b      	str	r3, [r7, #100]	@ 0x64
 8002376:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800237a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	673b      	str	r3, [r7, #112]	@ 0x70
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8002388:	4b28      	ldr	r3, [pc, #160]	@ (800242c <Kalman_Start+0xf4>)
 800238a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800238e:	461d      	mov	r5, r3
 8002390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800239a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800239c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80023a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 80023a4:	f107 0314 	add.w	r3, r7, #20
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 80023bc:	2300      	movs	r3, #0
 80023be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80023c2:	e028      	b.n	8002416 <Kalman_Start+0xde>
	{
		filter->A[i] = A_matrix[i];
 80023c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	4413      	add	r3, r2
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68f9      	ldr	r1, [r7, #12]
 80023d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023d6:	3314      	adds	r3, #20
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 80023de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	3388      	adds	r3, #136	@ 0x88
 80023e6:	443b      	add	r3, r7
 80023e8:	3b64      	subs	r3, #100	@ 0x64
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68f9      	ldr	r1, [r7, #12]
 80023ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023f2:	3398      	adds	r3, #152	@ 0x98
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002400:	3304      	adds	r3, #4
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 800240c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002410:	3301      	adds	r3, #1
 8002412:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002416:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800241a:	2b0f      	cmp	r3, #15
 800241c:	ddd2      	ble.n	80023c4 <Kalman_Start+0x8c>
	}

	for(i=0;i<4;i++)
 800241e:	2300      	movs	r3, #0
 8002420:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002424:	e03f      	b.n	80024a6 <Kalman_Start+0x16e>
 8002426:	bf00      	nop
 8002428:	3d4ccccd 	.word	0x3d4ccccd
 800242c:	0800bd08 	.word	0x0800bd08
	{
		filter->X_k[i] = x_k[i];
 8002430:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	3388      	adds	r3, #136	@ 0x88
 8002438:	443b      	add	r3, r7
 800243a:	3b74      	subs	r3, #116	@ 0x74
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68f9      	ldr	r1, [r7, #12]
 8002440:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 800244a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	4413      	add	r3, r2
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68f9      	ldr	r1, [r7, #12]
 8002458:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800245c:	3324      	adds	r3, #36	@ 0x24
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8002464:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	3388      	adds	r3, #136	@ 0x88
 800246c:	443b      	add	r3, r7
 800246e:	3b14      	subs	r3, #20
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68f9      	ldr	r1, [r7, #12]
 8002474:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002478:	3328      	adds	r3, #40	@ 0x28
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8002480:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	3388      	adds	r3, #136	@ 0x88
 8002488:	443b      	add	r3, r7
 800248a:	3b24      	subs	r3, #36	@ 0x24
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68f9      	ldr	r1, [r7, #12]
 8002490:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002494:	332c      	adds	r3, #44	@ 0x2c
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 800249c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024a0:	3301      	adds	r3, #1
 80024a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80024a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	ddc0      	ble.n	8002430 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	2104      	movs	r1, #4
 80024ba:	f008 fd93 	bl	800afe4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	3310      	adds	r3, #16
 80024c8:	2204      	movs	r2, #4
 80024ca:	2104      	movs	r1, #4
 80024cc:	f008 fd8a 	bl	800afe4 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	3350      	adds	r3, #80	@ 0x50
 80024da:	2204      	movs	r2, #4
 80024dc:	2104      	movs	r1, #4
 80024de:	f008 fd81 	bl	800afe4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	3390      	adds	r3, #144	@ 0x90
 80024ec:	2201      	movs	r2, #1
 80024ee:	2104      	movs	r1, #4
 80024f0:	f008 fd78 	bl	800afe4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	33a0      	adds	r3, #160	@ 0xa0
 80024fe:	2204      	movs	r2, #4
 8002500:	2101      	movs	r1, #1
 8002502:	f008 fd6f 	bl	800afe4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	33b0      	adds	r3, #176	@ 0xb0
 8002510:	2201      	movs	r2, #1
 8002512:	2104      	movs	r1, #4
 8002514:	f008 fd66 	bl	800afe4 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	33c8      	adds	r3, #200	@ 0xc8
 8002522:	2204      	movs	r2, #4
 8002524:	2104      	movs	r1, #4
 8002526:	f008 fd5d 	bl	800afe4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002536:	2201      	movs	r2, #1
 8002538:	2104      	movs	r1, #4
 800253a:	f008 fd53 	bl	800afe4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800254a:	2204      	movs	r2, #4
 800254c:	2101      	movs	r1, #1
 800254e:	f008 fd49 	bl	800afe4 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800255e:	2204      	movs	r2, #4
 8002560:	2104      	movs	r1, #4
 8002562:	f008 fd3f 	bl	800afe4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002572:	2204      	movs	r2, #4
 8002574:	2104      	movs	r1, #4
 8002576:	f008 fd35 	bl	800afe4 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8002586:	2201      	movs	r2, #1
 8002588:	2104      	movs	r1, #4
 800258a:	f008 fd2b 	bl	800afe4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 800259a:	2201      	movs	r2, #1
 800259c:	2104      	movs	r1, #4
 800259e:	f008 fd21 	bl	800afe4 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80025ae:	2204      	movs	r2, #4
 80025b0:	2101      	movs	r1, #1
 80025b2:	f008 fd17 	bl	800afe4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80025c2:	2201      	movs	r2, #1
 80025c4:	2101      	movs	r1, #1
 80025c6:	f008 fd0d 	bl	800afe4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80025d6:	2201      	movs	r2, #1
 80025d8:	2101      	movs	r1, #1
 80025da:	f008 fd03 	bl	800afe4 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 80025ea:	2201      	movs	r2, #1
 80025ec:	2104      	movs	r1, #4
 80025ee:	f008 fcf9 	bl	800afe4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80025fe:	2201      	movs	r2, #1
 8002600:	2104      	movs	r1, #4
 8002602:	f008 fcef 	bl	800afe4 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8002612:	2201      	movs	r2, #1
 8002614:	2101      	movs	r1, #1
 8002616:	f008 fce5 	bl	800afe4 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8002626:	2201      	movs	r2, #1
 8002628:	2101      	movs	r1, #1
 800262a:	f008 fcdb 	bl	800afe4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800263a:	2201      	movs	r2, #1
 800263c:	2101      	movs	r1, #1
 800263e:	f008 fcd1 	bl	800afe4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800264e:	2201      	movs	r2, #1
 8002650:	2104      	movs	r1, #4
 8002652:	f008 fcc7 	bl	800afe4 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002662:	2201      	movs	r2, #1
 8002664:	2101      	movs	r1, #1
 8002666:	f008 fcbd 	bl	800afe4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002676:	2204      	movs	r2, #4
 8002678:	2104      	movs	r1, #4
 800267a:	f008 fcb3 	bl	800afe4 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	33c4      	adds	r3, #196	@ 0xc4
 8002688:	2201      	movs	r2, #1
 800268a:	2101      	movs	r1, #1
 800268c:	f008 fcaa 	bl	800afe4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 800269c:	2201      	movs	r2, #1
 800269e:	2101      	movs	r1, #1
 80026a0:	f008 fca0 	bl	800afe4 <arm_mat_init_f32>
}
 80026a4:	bf00      	nop
 80026a6:	3788      	adds	r7, #136	@ 0x88
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bdb0      	pop	{r4, r5, r7, pc}

080026ac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80026b0:	f3bf 8f4f 	dsb	sy
}
 80026b4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80026b6:	4b06      	ldr	r3, [pc, #24]	@ (80026d0 <__NVIC_SystemReset+0x24>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80026be:	4904      	ldr	r1, [pc, #16]	@ (80026d0 <__NVIC_SystemReset+0x24>)
 80026c0:	4b04      	ldr	r3, [pc, #16]	@ (80026d4 <__NVIC_SystemReset+0x28>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80026c6:	f3bf 8f4f 	dsb	sy
}
 80026ca:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80026cc:	bf00      	nop
 80026ce:	e7fd      	b.n	80026cc <__NVIC_SystemReset+0x20>
 80026d0:	e000ed00 	.word	0xe000ed00
 80026d4:	05fa0004 	.word	0x05fa0004

080026d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026dc:	f001 fa45 	bl	8003b6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026e0:	f000 f89e 	bl	8002820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026e4:	f7ff fd78 	bl	80021d8 <MX_GPIO_Init>
  MX_DMA_Init();
 80026e8:	f7ff fd3c 	bl	8002164 <MX_DMA_Init>
  MX_ADC1_Init();
 80026ec:	f7ff fc2e 	bl	8001f4c <MX_ADC1_Init>
  MX_TIM2_Init();
 80026f0:	f000 fd86 	bl	8003200 <MX_TIM2_Init>
  MX_TIM3_Init();
 80026f4:	f000 fdd2 	bl	800329c <MX_TIM3_Init>
  MX_TIM4_Init();
 80026f8:	f000 fe26 	bl	8003348 <MX_TIM4_Init>
  MX_TIM5_Init();
 80026fc:	f000 fe7a 	bl	80033f4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002700:	f000 fec6 	bl	8003490 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8002704:	f001 f8fe 	bl	8003904 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8002708:	f000 ff8a 	bl	8003620 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
	plotter_begin();
 800270c:	f000 f9a6 	bl	8002a5c <plotter_begin>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		b1 = !HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin);
 8002710:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002714:	4837      	ldr	r0, [pc, #220]	@ (80027f4 <main+0x11c>)
 8002716:	f003 fcd5 	bl	80060c4 <HAL_GPIO_ReadPin>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	4b33      	ldr	r3, [pc, #204]	@ (80027f8 <main+0x120>)
 800272a:	601a      	str	r2, [r3, #0]
		b2 = !HAL_GPIO_ReadPin(SAVE_GPIO_Port, SAVE_Pin);
 800272c:	2180      	movs	r1, #128	@ 0x80
 800272e:	4833      	ldr	r0, [pc, #204]	@ (80027fc <main+0x124>)
 8002730:	f003 fcc8 	bl	80060c4 <HAL_GPIO_ReadPin>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	bf0c      	ite	eq
 800273a:	2301      	moveq	r3, #1
 800273c:	2300      	movne	r3, #0
 800273e:	b2db      	uxtb	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	4b2f      	ldr	r3, [pc, #188]	@ (8002800 <main+0x128>)
 8002744:	601a      	str	r2, [r3, #0]
		b3 = !HAL_GPIO_ReadPin(DELETE_GPIO_Port, DELETE_Pin);
 8002746:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800274a:	482a      	ldr	r0, [pc, #168]	@ (80027f4 <main+0x11c>)
 800274c:	f003 fcba 	bl	80060c4 <HAL_GPIO_ReadPin>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	bf0c      	ite	eq
 8002756:	2301      	moveq	r3, #1
 8002758:	2300      	movne	r3, #0
 800275a:	b2db      	uxtb	r3, r3
 800275c:	461a      	mov	r2, r3
 800275e:	4b29      	ldr	r3, [pc, #164]	@ (8002804 <main+0x12c>)
 8002760:	601a      	str	r2, [r3, #0]
		b4 = !HAL_GPIO_ReadPin(RESET_SYS_GPIO_Port, RESET_SYS_Pin);
 8002762:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002766:	4823      	ldr	r0, [pc, #140]	@ (80027f4 <main+0x11c>)
 8002768:	f003 fcac 	bl	80060c4 <HAL_GPIO_ReadPin>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	bf0c      	ite	eq
 8002772:	2301      	moveq	r3, #1
 8002774:	2300      	movne	r3, #0
 8002776:	b2db      	uxtb	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	4b23      	ldr	r3, [pc, #140]	@ (8002808 <main+0x130>)
 800277c:	601a      	str	r2, [r3, #0]

		prox = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 800277e:	2120      	movs	r1, #32
 8002780:	481e      	ldr	r0, [pc, #120]	@ (80027fc <main+0x124>)
 8002782:	f003 fc9f 	bl	80060c4 <HAL_GPIO_ReadPin>
 8002786:	4603      	mov	r3, r0
 8002788:	461a      	mov	r2, r3
 800278a:	4b20      	ldr	r3, [pc, #128]	@ (800280c <main+0x134>)
 800278c:	601a      	str	r2, [r3, #0]
		photo_pris = HAL_GPIO_ReadPin(PHOTO_PRIS_GPIO_Port, PHOTO_PRIS_Pin);
 800278e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002792:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002796:	f003 fc95 	bl	80060c4 <HAL_GPIO_ReadPin>
 800279a:	4603      	mov	r3, r0
 800279c:	461a      	mov	r2, r3
 800279e:	4b1c      	ldr	r3, [pc, #112]	@ (8002810 <main+0x138>)
 80027a0:	601a      	str	r2, [r3, #0]
		photo_revo = HAL_GPIO_ReadPin(PHOTO_REVO_GPIO_Port, PHOTO_REVO_Pin);
 80027a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80027a6:	4815      	ldr	r0, [pc, #84]	@ (80027fc <main+0x124>)
 80027a8:	f003 fc8c 	bl	80060c4 <HAL_GPIO_ReadPin>
 80027ac:	4603      	mov	r3, r0
 80027ae:	461a      	mov	r2, r3
 80027b0:	4b18      	ldr	r3, [pc, #96]	@ (8002814 <main+0x13c>)
 80027b2:	601a      	str	r2, [r3, #0]
		up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 80027b4:	2102      	movs	r1, #2
 80027b6:	4811      	ldr	r0, [pc, #68]	@ (80027fc <main+0x124>)
 80027b8:	f003 fc84 	bl	80060c4 <HAL_GPIO_ReadPin>
 80027bc:	4603      	mov	r3, r0
 80027be:	461a      	mov	r2, r3
 80027c0:	4b15      	ldr	r3, [pc, #84]	@ (8002818 <main+0x140>)
 80027c2:	601a      	str	r2, [r3, #0]
		low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 80027c4:	2104      	movs	r1, #4
 80027c6:	480d      	ldr	r0, [pc, #52]	@ (80027fc <main+0x124>)
 80027c8:	f003 fc7c 	bl	80060c4 <HAL_GPIO_ReadPin>
 80027cc:	4603      	mov	r3, r0
 80027ce:	461a      	mov	r2, r3
 80027d0:	4b12      	ldr	r3, [pc, #72]	@ (800281c <main+0x144>)
 80027d2:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, b1);
 80027d4:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <main+0x120>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80027e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027e4:	f003 fc86 	bl	80060f4 <HAL_GPIO_WritePin>

		if (b4) {
 80027e8:	4b07      	ldr	r3, [pc, #28]	@ (8002808 <main+0x130>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d08f      	beq.n	8002710 <main+0x38>
			NVIC_SystemReset();
 80027f0:	f7ff ff5c 	bl	80026ac <__NVIC_SystemReset>
 80027f4:	48000800 	.word	0x48000800
 80027f8:	200002f4 	.word	0x200002f4
 80027fc:	48000400 	.word	0x48000400
 8002800:	200002f8 	.word	0x200002f8
 8002804:	200002fc 	.word	0x200002fc
 8002808:	20000300 	.word	0x20000300
 800280c:	20000304 	.word	0x20000304
 8002810:	20000308 	.word	0x20000308
 8002814:	2000030c 	.word	0x2000030c
 8002818:	20000310 	.word	0x20000310
 800281c:	20000314 	.word	0x20000314

08002820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b094      	sub	sp, #80	@ 0x50
 8002824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002826:	f107 0318 	add.w	r3, r7, #24
 800282a:	2238      	movs	r2, #56	@ 0x38
 800282c:	2100      	movs	r1, #0
 800282e:	4618      	mov	r0, r3
 8002830:	f008 fca6 	bl	800b180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002834:	1d3b      	adds	r3, r7, #4
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	60da      	str	r2, [r3, #12]
 8002840:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002842:	2000      	movs	r0, #0
 8002844:	f003 fc86 	bl	8006154 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002848:	2302      	movs	r3, #2
 800284a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800284c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002850:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002852:	2340      	movs	r3, #64	@ 0x40
 8002854:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002856:	2302      	movs	r3, #2
 8002858:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800285a:	2302      	movs	r3, #2
 800285c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800285e:	2304      	movs	r3, #4
 8002860:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002862:	2355      	movs	r3, #85	@ 0x55
 8002864:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002866:	2302      	movs	r3, #2
 8002868:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800286a:	2302      	movs	r3, #2
 800286c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800286e:	2302      	movs	r3, #2
 8002870:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002872:	f107 0318 	add.w	r3, r7, #24
 8002876:	4618      	mov	r0, r3
 8002878:	f003 fd20 	bl	80062bc <HAL_RCC_OscConfig>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002882:	f000 f8e5 	bl	8002a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002886:	230f      	movs	r3, #15
 8002888:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800288a:	2303      	movs	r3, #3
 800288c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	2104      	movs	r1, #4
 800289e:	4618      	mov	r0, r3
 80028a0:	f004 f81e 	bl	80068e0 <HAL_RCC_ClockConfig>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80028aa:	f000 f8d1 	bl	8002a50 <Error_Handler>
  }
}
 80028ae:	bf00      	nop
 80028b0:	3750      	adds	r7, #80	@ 0x50
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	4603      	mov	r3, r0
 80028be:	80fb      	strh	r3, [r7, #6]

}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a41      	ldr	r2, [pc, #260]	@ (80029f0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d17a      	bne.n	80029e6 <HAL_TIM_PeriodElapsedCallback+0x106>
		QEI_get_diff_count(&prismatic_encoder);
 80028f0:	4840      	ldr	r0, [pc, #256]	@ (80029f4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80028f2:	f7ff f801 	bl	80018f8 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 80028f6:	483f      	ldr	r0, [pc, #252]	@ (80029f4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80028f8:	f7ff f8de 	bl	8001ab8 <QEI_compute_data>

		QEI_get_diff_count(&revolute_encoder);
 80028fc:	483e      	ldr	r0, [pc, #248]	@ (80029f8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80028fe:	f7fe fffb 	bl	80018f8 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 8002902:	483d      	ldr	r0, [pc, #244]	@ (80029f8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002904:	f7ff f8d8 	bl	8001ab8 <QEI_compute_data>

		update_sensors();
 8002908:	f000 fa44 	bl	8002d94 <update_sensors>

		joy_x = ADC_DMA_GetValue(&adc_dma, JOYSTICK_X_CHANNEL);
 800290c:	2106      	movs	r1, #6
 800290e:	483b      	ldr	r0, [pc, #236]	@ (80029fc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002910:	f7fe faa2 	bl	8000e58 <ADC_DMA_GetValue>
 8002914:	eef0 7a40 	vmov.f32	s15, s0
 8002918:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800291c:	ee17 2a90 	vmov	r2, s15
 8002920:	4b37      	ldr	r3, [pc, #220]	@ (8002a00 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002922:	601a      	str	r2, [r3, #0]
		joy_y = ADC_DMA_GetValue(&adc_dma, JOYSTICK_Y_CHANNEL);
 8002924:	2107      	movs	r1, #7
 8002926:	4835      	ldr	r0, [pc, #212]	@ (80029fc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002928:	f7fe fa96 	bl	8000e58 <ADC_DMA_GetValue>
 800292c:	eef0 7a40 	vmov.f32	s15, s0
 8002930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002934:	ee17 2a90 	vmov	r2, s15
 8002938:	4b32      	ldr	r3, [pc, #200]	@ (8002a04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800293a:	601a      	str	r2, [r3, #0]

		MDXX_set_range(&prismatic_motor, 1000, duty_pris);
 800293c:	4b32      	ldr	r3, [pc, #200]	@ (8002a08 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800293e:	edd3 7a00 	vldr	s15, [r3]
 8002942:	eef0 0a67 	vmov.f32	s1, s15
 8002946:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8002a0c <HAL_TIM_PeriodElapsedCallback+0x12c>
 800294a:	4831      	ldr	r0, [pc, #196]	@ (8002a10 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800294c:	f7fe fb3e 	bl	8000fcc <MDXX_set_range>
		MDXX_set_range(&revolute_motor, 1000, duty_revo);
 8002950:	4b30      	ldr	r3, [pc, #192]	@ (8002a14 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002952:	edd3 7a00 	vldr	s15, [r3]
 8002956:	eef0 0a67 	vmov.f32	s1, s15
 800295a:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8002a0c <HAL_TIM_PeriodElapsedCallback+0x12c>
 800295e:	482e      	ldr	r0, [pc, #184]	@ (8002a18 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002960:	f7fe fb34 	bl	8000fcc <MDXX_set_range>
		PWM_write_range(&servo, 50, duty_revo);
 8002964:	4b2b      	ldr	r3, [pc, #172]	@ (8002a14 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002966:	edd3 7a00 	vldr	s15, [r3]
 800296a:	eef0 0a67 	vmov.f32	s1, s15
 800296e:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8002a1c <HAL_TIM_PeriodElapsedCallback+0x13c>
 8002972:	482b      	ldr	r0, [pc, #172]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002974:	f7fe fe68 	bl	8001648 <PWM_write_range>

		if (trajectoryActive && !prisEva.isFinised) {
 8002978:	4b2a      	ldr	r3, [pc, #168]	@ (8002a24 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d02b      	beq.n	80029d8 <HAL_TIM_PeriodElapsedCallback+0xf8>
 8002980:	4b29      	ldr	r3, [pc, #164]	@ (8002a28 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002982:	7c1b      	ldrb	r3, [r3, #16]
 8002984:	f083 0301 	eor.w	r3, r3, #1
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d024      	beq.n	80029d8 <HAL_TIM_PeriodElapsedCallback+0xf8>
			// Evaluate trajectory
			Trapezoidal_Evaluated(&prisGen, &prisEva, initial_p, target_p, vmax,
 800298e:	4b27      	ldr	r3, [pc, #156]	@ (8002a2c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002990:	edd3 7a00 	vldr	s15, [r3]
 8002994:	4b26      	ldr	r3, [pc, #152]	@ (8002a30 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002996:	ed93 7a00 	vldr	s14, [r3]
 800299a:	4b26      	ldr	r3, [pc, #152]	@ (8002a34 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800299c:	edd3 6a00 	vldr	s13, [r3]
 80029a0:	4b25      	ldr	r3, [pc, #148]	@ (8002a38 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80029a2:	ed93 6a00 	vldr	s12, [r3]
 80029a6:	eef0 1a46 	vmov.f32	s3, s12
 80029aa:	eeb0 1a66 	vmov.f32	s2, s13
 80029ae:	eef0 0a47 	vmov.f32	s1, s14
 80029b2:	eeb0 0a67 	vmov.f32	s0, s15
 80029b6:	491c      	ldr	r1, [pc, #112]	@ (8002a28 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80029b8:	4820      	ldr	r0, [pc, #128]	@ (8002a3c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80029ba:	f7ff f973 	bl	8001ca4 <Trapezoidal_Evaluated>
					amax);

			// Update variables for CubeMonitor
			current_position = prisEva.setposition;
 80029be:	4b1a      	ldr	r3, [pc, #104]	@ (8002a28 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002a40 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80029c4:	6013      	str	r3, [r2, #0]
			current_velocity = prisEva.setvelocity;
 80029c6:	4b18      	ldr	r3, [pc, #96]	@ (8002a28 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002a44 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80029cc:	6013      	str	r3, [r2, #0]
			current_acceleration = prisEva.setacceleration;
 80029ce:	4b16      	ldr	r3, [pc, #88]	@ (8002a28 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a48 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80029d4:	6013      	str	r3, [r2, #0]
		} else {
			current_duty = 0.0f;
			trajectoryActive = false;
		}
	}
}
 80029d6:	e006      	b.n	80029e6 <HAL_TIM_PeriodElapsedCallback+0x106>
			current_duty = 0.0f;
 80029d8:	4b1c      	ldr	r3, [pc, #112]	@ (8002a4c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
			trajectoryActive = false;
 80029e0:	4b10      	ldr	r3, [pc, #64]	@ (8002a24 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20001490 	.word	0x20001490
 80029f4:	200003b8 	.word	0x200003b8
 80029f8:	20000404 	.word	0x20000404
 80029fc:	20000530 	.word	0x20000530
 8002a00:	20000318 	.word	0x20000318
 8002a04:	2000031c 	.word	0x2000031c
 8002a08:	200002ec 	.word	0x200002ec
 8002a0c:	447a0000 	.word	0x447a0000
 8002a10:	20000320 	.word	0x20000320
 8002a14:	200002f0 	.word	0x200002f0
 8002a18:	2000036c 	.word	0x2000036c
 8002a1c:	42480000 	.word	0x42480000
 8002a20:	20000518 	.word	0x20000518
 8002a24:	200002d4 	.word	0x200002d4
 8002a28:	200002c0 	.word	0x200002c0
 8002a2c:	200002d8 	.word	0x200002d8
 8002a30:	200000b8 	.word	0x200000b8
 8002a34:	200000bc 	.word	0x200000bc
 8002a38:	200000c0 	.word	0x200000c0
 8002a3c:	200002ac 	.word	0x200002ac
 8002a40:	200002dc 	.word	0x200002dc
 8002a44:	200002e0 	.word	0x200002e0
 8002a48:	200002e4 	.word	0x200002e4
 8002a4c:	200002e8 	.word	0x200002e8

08002a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a54:	b672      	cpsid	i
}
 8002a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a58:	bf00      	nop
 8002a5a:	e7fd      	b.n	8002a58 <Error_Handler+0x8>

08002a5c <plotter_begin>:
float joystick_x = 0.0f;
float joystick_y = 0.0f;
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

void plotter_begin() {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af02      	add	r7, sp, #8
	SIGNAL_init(&sine_sg, SIGNAL_SINE);
 8002a62:	2100      	movs	r1, #0
 8002a64:	4896      	ldr	r0, [pc, #600]	@ (8002cc0 <plotter_begin+0x264>)
 8002a66:	f000 f9b5 	bl	8002dd4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE, SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);
 8002a6a:	eddf 2a96 	vldr	s5, [pc, #600]	@ 8002cc4 <plotter_begin+0x268>
 8002a6e:	ed9f 2a96 	vldr	s4, [pc, #600]	@ 8002cc8 <plotter_begin+0x26c>
 8002a72:	eddf 1a96 	vldr	s3, [pc, #600]	@ 8002ccc <plotter_begin+0x270>
 8002a76:	ed9f 1a95 	vldr	s2, [pc, #596]	@ 8002ccc <plotter_begin+0x270>
 8002a7a:	eddf 0a95 	vldr	s1, [pc, #596]	@ 8002cd0 <plotter_begin+0x274>
 8002a7e:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 8002cc4 <plotter_begin+0x268>
 8002a82:	488f      	ldr	r0, [pc, #572]	@ (8002cc0 <plotter_begin+0x264>)
 8002a84:	f000 fa04 	bl	8002e90 <SIGNAL_config_sine>

	SIGNAL_init(&chirp_linear_sg, SIGNAL_CHIRP);
 8002a88:	2101      	movs	r1, #1
 8002a8a:	4892      	ldr	r0, [pc, #584]	@ (8002cd4 <plotter_begin+0x278>)
 8002a8c:	f000 f9a2 	bl	8002dd4 <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_linear_sg, CHIRP_LINEAR_AMPLITUDE, CHIRP_LINEAR_START_FREQ,
 8002a90:	eddf 2a8c 	vldr	s5, [pc, #560]	@ 8002cc4 <plotter_begin+0x268>
 8002a94:	ed9f 2a8c 	vldr	s4, [pc, #560]	@ 8002cc8 <plotter_begin+0x26c>
 8002a98:	2100      	movs	r1, #0
 8002a9a:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8002a9e:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8002aa2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002aa6:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 8002cc4 <plotter_begin+0x268>
 8002aaa:	488a      	ldr	r0, [pc, #552]	@ (8002cd4 <plotter_begin+0x278>)
 8002aac:	f000 fa1b 	bl	8002ee6 <SIGNAL_config_chirp>
	                   CHIRP_LINEAR_END_FREQ, CHIRP_LINEAR_DURATION, CHIRP_LINEAR,
	                   CHIRP_LINEAR_MIN_SETPOINT, CHIRP_LINEAR_MAX_SETPOINT);

	SIGNAL_init(&chirp_log_sg, SIGNAL_CHIRP);
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	4889      	ldr	r0, [pc, #548]	@ (8002cd8 <plotter_begin+0x27c>)
 8002ab4:	f000 f98e 	bl	8002dd4 <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_log_sg, CHIRP_LOG_AMPLITUDE, CHIRP_LOG_START_FREQ,
 8002ab8:	eddf 2a82 	vldr	s5, [pc, #520]	@ 8002cc4 <plotter_begin+0x268>
 8002abc:	ed9f 2a82 	vldr	s4, [pc, #520]	@ 8002cc8 <plotter_begin+0x26c>
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8002ac6:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8002aca:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002ace:	ed9f 0a7d 	vldr	s0, [pc, #500]	@ 8002cc4 <plotter_begin+0x268>
 8002ad2:	4881      	ldr	r0, [pc, #516]	@ (8002cd8 <plotter_begin+0x27c>)
 8002ad4:	f000 fa07 	bl	8002ee6 <SIGNAL_config_chirp>
	                   CHIRP_LOG_END_FREQ, CHIRP_LOG_DURATION, CHIRP_LOGARITHMIC,
	                   CHIRP_LOG_MIN_SETPOINT, CHIRP_LOG_MAX_SETPOINT);

	SIGNAL_init(&square_sg, SIGNAL_SQUARE);
 8002ad8:	2102      	movs	r1, #2
 8002ada:	4880      	ldr	r0, [pc, #512]	@ (8002cdc <plotter_begin+0x280>)
 8002adc:	f000 f97a 	bl	8002dd4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8002ae0:	ed9f 3a78 	vldr	s6, [pc, #480]	@ 8002cc4 <plotter_begin+0x268>
 8002ae4:	eddf 2a78 	vldr	s5, [pc, #480]	@ 8002cc8 <plotter_begin+0x26c>
 8002ae8:	ed9f 2a78 	vldr	s4, [pc, #480]	@ 8002ccc <plotter_begin+0x270>
 8002aec:	eddf 1a77 	vldr	s3, [pc, #476]	@ 8002ccc <plotter_begin+0x270>
 8002af0:	ed9f 1a7b 	vldr	s2, [pc, #492]	@ 8002ce0 <plotter_begin+0x284>
 8002af4:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002af8:	ed9f 0a72 	vldr	s0, [pc, #456]	@ 8002cc4 <plotter_begin+0x268>
 8002afc:	4877      	ldr	r0, [pc, #476]	@ (8002cdc <plotter_begin+0x280>)
 8002afe:	f000 fa26 	bl	8002f4e <SIGNAL_config_square>
	                    SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	                    SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&ramp_sg, SIGNAL_RAMP);
 8002b02:	2103      	movs	r1, #3
 8002b04:	4877      	ldr	r0, [pc, #476]	@ (8002ce4 <plotter_begin+0x288>)
 8002b06:	f000 f965 	bl	8002dd4 <SIGNAL_init>
	SIGNAL_config_ramp(&ramp_sg, RAMP_AMPLITUDE, RAMP_FREQUENCY,
 8002b0a:	eddf 3a6e 	vldr	s7, [pc, #440]	@ 8002cc4 <plotter_begin+0x268>
 8002b0e:	ed9f 3a6e 	vldr	s6, [pc, #440]	@ 8002cc8 <plotter_begin+0x26c>
 8002b12:	eddf 2a6e 	vldr	s5, [pc, #440]	@ 8002ccc <plotter_begin+0x270>
 8002b16:	ed9f 2a6d 	vldr	s4, [pc, #436]	@ 8002ccc <plotter_begin+0x270>
 8002b1a:	eddf 1a6a 	vldr	s3, [pc, #424]	@ 8002cc4 <plotter_begin+0x268>
 8002b1e:	ed9f 1a6a 	vldr	s2, [pc, #424]	@ 8002cc8 <plotter_begin+0x26c>
 8002b22:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002b26:	ed9f 0a67 	vldr	s0, [pc, #412]	@ 8002cc4 <plotter_begin+0x268>
 8002b2a:	486e      	ldr	r0, [pc, #440]	@ (8002ce4 <plotter_begin+0x288>)
 8002b2c:	f000 fa3f 	bl	8002fae <SIGNAL_config_ramp>
	                  RAMP_START, RAMP_END, RAMP_PHASE, RAMP_OFFSET,
	                  RAMP_MIN_SETPOINT, RAMP_MAX_SETPOINT);

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR_RATIO1);
 8002b30:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002b34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b3c:	496a      	ldr	r1, [pc, #424]	@ (8002ce8 <plotter_begin+0x28c>)
 8002b3e:	486b      	ldr	r0, [pc, #428]	@ (8002cec <plotter_begin+0x290>)
 8002b40:	f7fe fe88 	bl	8001854 <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR_RATIO2);
 8002b44:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002b48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b50:	4967      	ldr	r1, [pc, #412]	@ (8002cf0 <plotter_begin+0x294>)
 8002b52:	4868      	ldr	r0, [pc, #416]	@ (8002cf4 <plotter_begin+0x298>)
 8002b54:	f7fe fe7e 	bl	8001854 <QEI_init>

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx, MOTOR1_GPIO_Pin);
 8002b58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002b62:	2204      	movs	r2, #4
 8002b64:	4964      	ldr	r1, [pc, #400]	@ (8002cf8 <plotter_begin+0x29c>)
 8002b66:	4865      	ldr	r0, [pc, #404]	@ (8002cfc <plotter_begin+0x2a0>)
 8002b68:	f7fe fa0c 	bl	8000f84 <MDXX_GPIO_init>
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx, MOTOR2_GPIO_Pin);
 8002b6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	4b63      	ldr	r3, [pc, #396]	@ (8002d00 <plotter_begin+0x2a4>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	4960      	ldr	r1, [pc, #384]	@ (8002cf8 <plotter_begin+0x29c>)
 8002b78:	4862      	ldr	r0, [pc, #392]	@ (8002d04 <plotter_begin+0x2a8>)
 8002b7a:	f7fe fa03 	bl	8000f84 <MDXX_GPIO_init>

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 8002b7e:	2208      	movs	r2, #8
 8002b80:	495d      	ldr	r1, [pc, #372]	@ (8002cf8 <plotter_begin+0x29c>)
 8002b82:	4861      	ldr	r0, [pc, #388]	@ (8002d08 <plotter_begin+0x2ac>)
 8002b84:	f7fe fd3c 	bl	8001600 <PWM_init>

	MDXX_set_range(&prismatic_motor, 1000, 0);
 8002b88:	eddf 0a50 	vldr	s1, [pc, #320]	@ 8002ccc <plotter_begin+0x270>
 8002b8c:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 8002d0c <plotter_begin+0x2b0>
 8002b90:	485a      	ldr	r0, [pc, #360]	@ (8002cfc <plotter_begin+0x2a0>)
 8002b92:	f7fe fa1b 	bl	8000fcc <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 1000, 0);
 8002b96:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 8002ccc <plotter_begin+0x270>
 8002b9a:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 8002d0c <plotter_begin+0x2b0>
 8002b9e:	4859      	ldr	r0, [pc, #356]	@ (8002d04 <plotter_begin+0x2a8>)
 8002ba0:	f7fe fa14 	bl	8000fcc <MDXX_set_range>
	PWM_write_range(&servo, 50, 0);
 8002ba4:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8002ccc <plotter_begin+0x270>
 8002ba8:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 8002d10 <plotter_begin+0x2b4>
 8002bac:	4856      	ldr	r0, [pc, #344]	@ (8002d08 <plotter_begin+0x2ac>)
 8002bae:	f7fe fd4b 	bl	8001648 <PWM_write_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 0, 0, 0, 65535);
 8002bb2:	eddf 1a58 	vldr	s3, [pc, #352]	@ 8002d14 <plotter_begin+0x2b8>
 8002bb6:	ed9f 1a45 	vldr	s2, [pc, #276]	@ 8002ccc <plotter_begin+0x270>
 8002bba:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8002ccc <plotter_begin+0x270>
 8002bbe:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8002ccc <plotter_begin+0x270>
 8002bc2:	4855      	ldr	r0, [pc, #340]	@ (8002d18 <plotter_begin+0x2bc>)
 8002bc4:	f7fe f9b4 	bl	8000f30 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 0, 0, 0, 65535);
 8002bc8:	eddf 1a52 	vldr	s3, [pc, #328]	@ 8002d14 <plotter_begin+0x2b8>
 8002bcc:	ed9f 1a3f 	vldr	s2, [pc, #252]	@ 8002ccc <plotter_begin+0x270>
 8002bd0:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8002ccc <plotter_begin+0x270>
 8002bd4:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 8002ccc <plotter_begin+0x270>
 8002bd8:	4850      	ldr	r0, [pc, #320]	@ (8002d1c <plotter_begin+0x2c0>)
 8002bda:	f7fe f9a9 	bl	8000f30 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 0, 0, 0, 65535);
 8002bde:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 8002d14 <plotter_begin+0x2b8>
 8002be2:	ed9f 1a3a 	vldr	s2, [pc, #232]	@ 8002ccc <plotter_begin+0x270>
 8002be6:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8002ccc <plotter_begin+0x270>
 8002bea:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8002ccc <plotter_begin+0x270>
 8002bee:	484c      	ldr	r0, [pc, #304]	@ (8002d20 <plotter_begin+0x2c4>)
 8002bf0:	f7fe f99e 	bl	8000f30 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 0, 0, 0, 65535);
 8002bf4:	eddf 1a47 	vldr	s3, [pc, #284]	@ 8002d14 <plotter_begin+0x2b8>
 8002bf8:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 8002ccc <plotter_begin+0x270>
 8002bfc:	eddf 0a33 	vldr	s1, [pc, #204]	@ 8002ccc <plotter_begin+0x270>
 8002c00:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8002ccc <plotter_begin+0x270>
 8002c04:	4847      	ldr	r0, [pc, #284]	@ (8002d24 <plotter_begin+0x2c8>)
 8002c06:	f7fe f993 	bl	8000f30 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8002c0a:	4947      	ldr	r1, [pc, #284]	@ (8002d28 <plotter_begin+0x2cc>)
 8002c0c:	4847      	ldr	r0, [pc, #284]	@ (8002d2c <plotter_begin+0x2d0>)
 8002c0e:	f7fe fab7 	bl	8001180 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8002c12:	4947      	ldr	r1, [pc, #284]	@ (8002d30 <plotter_begin+0x2d4>)
 8002c14:	4847      	ldr	r0, [pc, #284]	@ (8002d34 <plotter_begin+0x2d8>)
 8002c16:	f7fe fad3 	bl	80011c0 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant, &Disturbance_Constant);
 8002c1a:	4a47      	ldr	r2, [pc, #284]	@ (8002d38 <plotter_begin+0x2dc>)
 8002c1c:	4942      	ldr	r1, [pc, #264]	@ (8002d28 <plotter_begin+0x2cc>)
 8002c1e:	4847      	ldr	r0, [pc, #284]	@ (8002d3c <plotter_begin+0x2e0>)
 8002c20:	f7fe fabc 	bl	800119c <REVOLUTE_MOTOR_DFD_Init>
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant, &Disturbance_Constant);
 8002c24:	4a44      	ldr	r2, [pc, #272]	@ (8002d38 <plotter_begin+0x2dc>)
 8002c26:	4942      	ldr	r1, [pc, #264]	@ (8002d30 <plotter_begin+0x2d4>)
 8002c28:	4845      	ldr	r0, [pc, #276]	@ (8002d40 <plotter_begin+0x2e4>)
 8002c2a:	f7fe fad7 	bl	80011dc <PRISMATIC_MOTOR_DFD_Init>

	ADC_DMA_Init(&adc_dma, &hadc1, adc_dma_buffer, ADC_BUFFER_SIZE, ADC_CHANNELS, 3.3f, 4095.0f);
 8002c2e:	2304      	movs	r3, #4
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8002d44 <plotter_begin+0x2e8>
 8002c36:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 8002d48 <plotter_begin+0x2ec>
 8002c3a:	2328      	movs	r3, #40	@ 0x28
 8002c3c:	4a43      	ldr	r2, [pc, #268]	@ (8002d4c <plotter_begin+0x2f0>)
 8002c3e:	4944      	ldr	r1, [pc, #272]	@ (8002d50 <plotter_begin+0x2f4>)
 8002c40:	4844      	ldr	r0, [pc, #272]	@ (8002d54 <plotter_begin+0x2f8>)
 8002c42:	f7fe f8bd 	bl	8000dc0 <ADC_DMA_Init>
	ADC_DMA_Start(&adc_dma);
 8002c46:	4843      	ldr	r0, [pc, #268]	@ (8002d54 <plotter_begin+0x2f8>)
 8002c48:	f7fe f8ef 	bl	8000e2a <ADC_DMA_Start>

	FIR_init(&LP_prismatic_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002c4c:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8002d0c <plotter_begin+0x2b0>
 8002c50:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002c54:	211f      	movs	r1, #31
 8002c56:	4840      	ldr	r0, [pc, #256]	@ (8002d58 <plotter_begin+0x2fc>)
 8002c58:	f7fe fad2 	bl	8001200 <FIR_init>
	FIR_init(&LP_prismatic_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002c5c:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 8002d0c <plotter_begin+0x2b0>
 8002c60:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002c64:	211f      	movs	r1, #31
 8002c66:	483d      	ldr	r0, [pc, #244]	@ (8002d5c <plotter_begin+0x300>)
 8002c68:	f7fe faca 	bl	8001200 <FIR_init>
	FIR_init(&LP_revolute_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002c6c:	eddf 0a27 	vldr	s1, [pc, #156]	@ 8002d0c <plotter_begin+0x2b0>
 8002c70:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002c74:	211f      	movs	r1, #31
 8002c76:	483a      	ldr	r0, [pc, #232]	@ (8002d60 <plotter_begin+0x304>)
 8002c78:	f7fe fac2 	bl	8001200 <FIR_init>
	FIR_init(&LP_revolute_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002c7c:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8002d0c <plotter_begin+0x2b0>
 8002c80:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002c84:	211f      	movs	r1, #31
 8002c86:	4837      	ldr	r0, [pc, #220]	@ (8002d64 <plotter_begin+0x308>)
 8002c88:	f7fe faba 	bl	8001200 <FIR_init>

	Kalman_Start(&flit_revolute_velocity, revolute_A, revolute_B);
 8002c8c:	4a36      	ldr	r2, [pc, #216]	@ (8002d68 <plotter_begin+0x30c>)
 8002c8e:	4937      	ldr	r1, [pc, #220]	@ (8002d6c <plotter_begin+0x310>)
 8002c90:	4837      	ldr	r0, [pc, #220]	@ (8002d70 <plotter_begin+0x314>)
 8002c92:	f7ff fb51 	bl	8002338 <Kalman_Start>
	Kalman_Start(&flit_prismatic_velocity, prismatic_A, prismatic_B);
 8002c96:	4a37      	ldr	r2, [pc, #220]	@ (8002d74 <plotter_begin+0x318>)
 8002c98:	4937      	ldr	r1, [pc, #220]	@ (8002d78 <plotter_begin+0x31c>)
 8002c9a:	4838      	ldr	r0, [pc, #224]	@ (8002d7c <plotter_begin+0x320>)
 8002c9c:	f7ff fb4c 	bl	8002338 <Kalman_Start>

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM, registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);
 8002ca0:	23c8      	movs	r3, #200	@ 0xc8
 8002ca2:	9301      	str	r3, [sp, #4]
 8002ca4:	2315      	movs	r3, #21
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	4b35      	ldr	r3, [pc, #212]	@ (8002d80 <plotter_begin+0x324>)
 8002caa:	4a36      	ldr	r2, [pc, #216]	@ (8002d84 <plotter_begin+0x328>)
 8002cac:	4936      	ldr	r1, [pc, #216]	@ (8002d88 <plotter_begin+0x32c>)
 8002cae:	4837      	ldr	r0, [pc, #220]	@ (8002d8c <plotter_begin+0x330>)
 8002cb0:	f7fe fc3e 	bl	8001530 <Modbus_init>

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8002cb4:	4836      	ldr	r0, [pc, #216]	@ (8002d90 <plotter_begin+0x334>)
 8002cb6:	f004 fb51 	bl	800735c <HAL_TIM_Base_Start_IT>
}
 8002cba:	bf00      	nop
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20000548 	.word	0x20000548
 8002cc4:	3e6eeeef 	.word	0x3e6eeeef
 8002cc8:	be6eeeef 	.word	0xbe6eeeef
 8002ccc:	00000000 	.word	0x00000000
 8002cd0:	3d4ccccd 	.word	0x3d4ccccd
 8002cd4:	2000058c 	.word	0x2000058c
 8002cd8:	200005d0 	.word	0x200005d0
 8002cdc:	20000614 	.word	0x20000614
 8002ce0:	3e99999a 	.word	0x3e99999a
 8002ce4:	20000658 	.word	0x20000658
 8002ce8:	20001628 	.word	0x20001628
 8002cec:	200003b8 	.word	0x200003b8
 8002cf0:	2000155c 	.word	0x2000155c
 8002cf4:	20000404 	.word	0x20000404
 8002cf8:	200017c0 	.word	0x200017c0
 8002cfc:	20000320 	.word	0x20000320
 8002d00:	48000800 	.word	0x48000800
 8002d04:	2000036c 	.word	0x2000036c
 8002d08:	20000518 	.word	0x20000518
 8002d0c:	447a0000 	.word	0x447a0000
 8002d10:	42480000 	.word	0x42480000
 8002d14:	477fff00 	.word	0x477fff00
 8002d18:	20000450 	.word	0x20000450
 8002d1c:	2000047c 	.word	0x2000047c
 8002d20:	200004a8 	.word	0x200004a8
 8002d24:	200004d4 	.word	0x200004d4
 8002d28:	20000000 	.word	0x20000000
 8002d2c:	2000050c 	.word	0x2000050c
 8002d30:	20000048 	.word	0x20000048
 8002d34:	20000500 	.word	0x20000500
 8002d38:	20000090 	.word	0x20000090
 8002d3c:	20000510 	.word	0x20000510
 8002d40:	20000504 	.word	0x20000504
 8002d44:	457ff000 	.word	0x457ff000
 8002d48:	40533333 	.word	0x40533333
 8002d4c:	20000dcc 	.word	0x20000dcc
 8002d50:	200001e0 	.word	0x200001e0
 8002d54:	20000530 	.word	0x20000530
 8002d58:	200006a8 	.word	0x200006a8
 8002d5c:	2000069c 	.word	0x2000069c
 8002d60:	200006c0 	.word	0x200006c0
 8002d64:	200006b4 	.word	0x200006b4
 8002d68:	20000154 	.word	0x20000154
 8002d6c:	20000114 	.word	0x20000114
 8002d70:	20000a4c 	.word	0x20000a4c
 8002d74:	20000104 	.word	0x20000104
 8002d78:	200000c4 	.word	0x200000c4
 8002d7c:	200006cc 	.word	0x200006cc
 8002d80:	200012f4 	.word	0x200012f4
 8002d84:	2000188c 	.word	0x2000188c
 8002d88:	20001958 	.word	0x20001958
 8002d8c:	20000e1c 	.word	0x20000e1c
 8002d90:	20001490 	.word	0x20001490

08002d94 <update_sensors>:

void update_sensors(void) {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
    joystick_x = ADC_DMA_GetJoystick(&adc_dma, JOYSTICK_X_CHANNEL, 1.0);
 8002d98:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002d9c:	2106      	movs	r1, #6
 8002d9e:	480a      	ldr	r0, [pc, #40]	@ (8002dc8 <update_sensors+0x34>)
 8002da0:	f7fe f89e 	bl	8000ee0 <ADC_DMA_GetJoystick>
 8002da4:	eef0 7a40 	vmov.f32	s15, s0
 8002da8:	4b08      	ldr	r3, [pc, #32]	@ (8002dcc <update_sensors+0x38>)
 8002daa:	edc3 7a00 	vstr	s15, [r3]
    joystick_y = ADC_DMA_GetJoystick(&adc_dma, JOYSTICK_Y_CHANNEL, 1.0);
 8002dae:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002db2:	2107      	movs	r1, #7
 8002db4:	4804      	ldr	r0, [pc, #16]	@ (8002dc8 <update_sensors+0x34>)
 8002db6:	f7fe f893 	bl	8000ee0 <ADC_DMA_GetJoystick>
 8002dba:	eef0 7a40 	vmov.f32	s15, s0
 8002dbe:	4b04      	ldr	r3, [pc, #16]	@ (8002dd0 <update_sensors+0x3c>)
 8002dc0:	edc3 7a00 	vstr	s15, [r3]
//    prismatic_current = ADC_DMA_ComputeCurrent(&adc_dma, PRISMATIC_CURRENT_CHANNEL, PRISMATIC_CURRENT_OFFSET);
//    revolute_current = ADC_DMA_ComputeCurrent(&adc_dma, REVOLUTE_CURRENT_CHANNEL, REVOLUTE_CURRENT_OFFSET);
}
 8002dc4:	bf00      	nop
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20000530 	.word	0x20000530
 8002dcc:	20001484 	.word	0x20001484
 8002dd0:	20001488 	.word	0x20001488

08002dd4 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	78fa      	ldrb	r2, [r7, #3]
 8002de4:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002dec:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002df4:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a1b      	ldr	r2, [pc, #108]	@ (8002e88 <SIGNAL_init+0xb4>)
 8002e1a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002e22:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d828      	bhi.n	8002e7c <SIGNAL_init+0xa8>
 8002e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e30 <SIGNAL_init+0x5c>)
 8002e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e30:	08002e7b 	.word	0x08002e7b
 8002e34:	08002e41 	.word	0x08002e41
 8002e38:	08002e5f 	.word	0x08002e5f
 8002e3c:	08002e69 	.word	0x08002e69
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002e4c:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a0e      	ldr	r2, [pc, #56]	@ (8002e8c <SIGNAL_init+0xb8>)
 8002e52:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002e5a:	621a      	str	r2, [r3, #32]
            break;
 8002e5c:	e00e      	b.n	8002e7c <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002e64:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8002e66:	e009      	b.n	8002e7c <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002e76:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8002e78:	e000      	b.n	8002e7c <SIGNAL_init+0xa8>
            break;
 8002e7a:	bf00      	nop
    }
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	bf800000 	.word	0xbf800000
 8002e8c:	41200000 	.word	0x41200000

08002e90 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8002e90:	b480      	push	{r7}
 8002e92:	b089      	sub	sp, #36	@ 0x24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	61f8      	str	r0, [r7, #28]
 8002e98:	ed87 0a06 	vstr	s0, [r7, #24]
 8002e9c:	edc7 0a05 	vstr	s1, [r7, #20]
 8002ea0:	ed87 1a04 	vstr	s2, [r7, #16]
 8002ea4:	edc7 1a03 	vstr	s3, [r7, #12]
 8002ea8:	ed87 2a02 	vstr	s4, [r7, #8]
 8002eac:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002eda:	bf00      	nop
 8002edc:	3724      	adds	r7, #36	@ 0x24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <SIGNAL_config_chirp>:
                         float32_t f_start,
                         float32_t f_end,
                         float32_t duration,
                         ChirpType chirp_type,
                         float32_t min_setpoint,
                         float32_t max_setpoint) {
 8002ee6:	b480      	push	{r7}
 8002ee8:	b089      	sub	sp, #36	@ 0x24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	61f8      	str	r0, [r7, #28]
 8002eee:	ed87 0a06 	vstr	s0, [r7, #24]
 8002ef2:	edc7 0a05 	vstr	s1, [r7, #20]
 8002ef6:	ed87 1a04 	vstr	s2, [r7, #16]
 8002efa:	edc7 1a03 	vstr	s3, [r7, #12]
 8002efe:	460b      	mov	r3, r1
 8002f00:	ed87 2a01 	vstr	s4, [r7, #4]
 8002f04:	edc7 2a00 	vstr	s5, [r7]
 8002f08:	72fb      	strb	r3, [r7, #11]
    sg->type = SIGNAL_CHIRP;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	605a      	str	r2, [r3, #4]
    sg->f_start = f_start;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	619a      	str	r2, [r3, #24]
    sg->f_end = f_end;
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	61da      	str	r2, [r3, #28]
    sg->duration = duration;
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	621a      	str	r2, [r3, #32]
    sg->chirp_type = chirp_type;
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	7afa      	ldrb	r2, [r7, #11]
 8002f2c:	751a      	strb	r2, [r3, #20]
    sg->t = 0.0f;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	625a      	str	r2, [r3, #36]	@ 0x24
    sg->min_setpoint = min_setpoint;
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002f42:	bf00      	nop
 8002f44:	3724      	adds	r7, #36	@ 0x24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8002f4e:	b480      	push	{r7}
 8002f50:	b089      	sub	sp, #36	@ 0x24
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	61f8      	str	r0, [r7, #28]
 8002f56:	ed87 0a06 	vstr	s0, [r7, #24]
 8002f5a:	edc7 0a05 	vstr	s1, [r7, #20]
 8002f5e:	ed87 1a04 	vstr	s2, [r7, #16]
 8002f62:	edc7 1a03 	vstr	s3, [r7, #12]
 8002f66:	ed87 2a02 	vstr	s4, [r7, #8]
 8002f6a:	edc7 2a01 	vstr	s5, [r7, #4]
 8002f6e:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	2202      	movs	r2, #2
 8002f76:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002fa2:	bf00      	nop
 8002fa4:	3724      	adds	r7, #36	@ 0x24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <SIGNAL_config_ramp>:
                        float32_t ramp_start,
                        float32_t ramp_end,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8002fae:	b480      	push	{r7}
 8002fb0:	b08b      	sub	sp, #44	@ 0x2c
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6278      	str	r0, [r7, #36]	@ 0x24
 8002fb6:	ed87 0a08 	vstr	s0, [r7, #32]
 8002fba:	edc7 0a07 	vstr	s1, [r7, #28]
 8002fbe:	ed87 1a06 	vstr	s2, [r7, #24]
 8002fc2:	edc7 1a05 	vstr	s3, [r7, #20]
 8002fc6:	ed87 2a04 	vstr	s4, [r7, #16]
 8002fca:	edc7 2a03 	vstr	s5, [r7, #12]
 8002fce:	ed87 3a02 	vstr	s6, [r7, #8]
 8002fd2:	edc7 3a01 	vstr	s7, [r7, #4]
    sg->type = SIGNAL_RAMP;
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	2203      	movs	r2, #3
 8002fda:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fde:	6a3a      	ldr	r2, [r7, #32]
 8002fe0:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	69fa      	ldr	r2, [r7, #28]
 8002fe6:	609a      	str	r2, [r3, #8]
    sg->ramp_start = ramp_start;
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	62da      	str	r2, [r3, #44]	@ 0x2c
    sg->ramp_end = ramp_end;
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	631a      	str	r2, [r3, #48]	@ 0x30
    sg->phase = phase;
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8003000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800300c:	bf00      	nop
 800300e:	372c      	adds	r7, #44	@ 0x2c
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800301e:	4b0f      	ldr	r3, [pc, #60]	@ (800305c <HAL_MspInit+0x44>)
 8003020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003022:	4a0e      	ldr	r2, [pc, #56]	@ (800305c <HAL_MspInit+0x44>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	6613      	str	r3, [r2, #96]	@ 0x60
 800302a:	4b0c      	ldr	r3, [pc, #48]	@ (800305c <HAL_MspInit+0x44>)
 800302c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	607b      	str	r3, [r7, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003036:	4b09      	ldr	r3, [pc, #36]	@ (800305c <HAL_MspInit+0x44>)
 8003038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800303a:	4a08      	ldr	r2, [pc, #32]	@ (800305c <HAL_MspInit+0x44>)
 800303c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003040:	6593      	str	r3, [r2, #88]	@ 0x58
 8003042:	4b06      	ldr	r3, [pc, #24]	@ (800305c <HAL_MspInit+0x44>)
 8003044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800304a:	603b      	str	r3, [r7, #0]
 800304c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800304e:	f003 f925 	bl	800629c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40021000 	.word	0x40021000

08003060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003064:	bf00      	nop
 8003066:	e7fd      	b.n	8003064 <NMI_Handler+0x4>

08003068 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800306c:	bf00      	nop
 800306e:	e7fd      	b.n	800306c <HardFault_Handler+0x4>

08003070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003074:	bf00      	nop
 8003076:	e7fd      	b.n	8003074 <MemManage_Handler+0x4>

08003078 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800307c:	bf00      	nop
 800307e:	e7fd      	b.n	800307c <BusFault_Handler+0x4>

08003080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003084:	bf00      	nop
 8003086:	e7fd      	b.n	8003084 <UsageFault_Handler+0x4>

08003088 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003096:	b480      	push	{r7}
 8003098:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030b6:	f000 fdab 	bl	8003c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80030c4:	4802      	ldr	r0, [pc, #8]	@ (80030d0 <DMA1_Channel1_IRQHandler+0x10>)
 80030c6:	f002 fd2c 	bl	8005b22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	2000024c 	.word	0x2000024c

080030d4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80030d8:	4802      	ldr	r0, [pc, #8]	@ (80030e4 <DMA1_Channel2_IRQHandler+0x10>)
 80030da:	f002 fd22 	bl	8005b22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20001a24 	.word	0x20001a24

080030e8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80030ec:	4802      	ldr	r0, [pc, #8]	@ (80030f8 <DMA1_Channel3_IRQHandler+0x10>)
 80030ee:	f002 fd18 	bl	8005b22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80030f2:	bf00      	nop
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20001a84 	.word	0x20001a84

080030fc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003100:	4802      	ldr	r0, [pc, #8]	@ (800310c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003102:	f004 fd5b 	bl	8007bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	2000188c 	.word	0x2000188c

08003110 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003114:	4802      	ldr	r0, [pc, #8]	@ (8003120 <TIM2_IRQHandler+0x10>)
 8003116:	f004 fd51 	bl	8007bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20001490 	.word	0x20001490

08003124 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003128:	4802      	ldr	r0, [pc, #8]	@ (8003134 <TIM3_IRQHandler+0x10>)
 800312a:	f004 fd47 	bl	8007bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	2000155c 	.word	0x2000155c

08003138 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800313c:	4802      	ldr	r0, [pc, #8]	@ (8003148 <TIM4_IRQHandler+0x10>)
 800313e:	f004 fd3d 	bl	8007bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20001628 	.word	0x20001628

0800314c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003150:	4802      	ldr	r0, [pc, #8]	@ (800315c <USART2_IRQHandler+0x10>)
 8003152:	f006 fa87 	bl	8009664 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20001958 	.word	0x20001958

08003160 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003164:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003168:	f002 ffdc 	bl	8006124 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800316c:	bf00      	nop
 800316e:	bd80      	pop	{r7, pc}

08003170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003178:	4a14      	ldr	r2, [pc, #80]	@ (80031cc <_sbrk+0x5c>)
 800317a:	4b15      	ldr	r3, [pc, #84]	@ (80031d0 <_sbrk+0x60>)
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003184:	4b13      	ldr	r3, [pc, #76]	@ (80031d4 <_sbrk+0x64>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d102      	bne.n	8003192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800318c:	4b11      	ldr	r3, [pc, #68]	@ (80031d4 <_sbrk+0x64>)
 800318e:	4a12      	ldr	r2, [pc, #72]	@ (80031d8 <_sbrk+0x68>)
 8003190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003192:	4b10      	ldr	r3, [pc, #64]	@ (80031d4 <_sbrk+0x64>)
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4413      	add	r3, r2
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	429a      	cmp	r2, r3
 800319e:	d207      	bcs.n	80031b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031a0:	f008 f806 	bl	800b1b0 <__errno>
 80031a4:	4603      	mov	r3, r0
 80031a6:	220c      	movs	r2, #12
 80031a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031aa:	f04f 33ff 	mov.w	r3, #4294967295
 80031ae:	e009      	b.n	80031c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031b0:	4b08      	ldr	r3, [pc, #32]	@ (80031d4 <_sbrk+0x64>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031b6:	4b07      	ldr	r3, [pc, #28]	@ (80031d4 <_sbrk+0x64>)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	4a05      	ldr	r2, [pc, #20]	@ (80031d4 <_sbrk+0x64>)
 80031c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031c2:	68fb      	ldr	r3, [r7, #12]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20020000 	.word	0x20020000
 80031d0:	00000400 	.word	0x00000400
 80031d4:	2000148c 	.word	0x2000148c
 80031d8:	20001c30 	.word	0x20001c30

080031dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80031e0:	4b06      	ldr	r3, [pc, #24]	@ (80031fc <SystemInit+0x20>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e6:	4a05      	ldr	r2, [pc, #20]	@ (80031fc <SystemInit+0x20>)
 80031e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031f0:	bf00      	nop
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <MX_TIM2_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003206:	f107 0310 	add.w	r3, r7, #16
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	605a      	str	r2, [r3, #4]
 8003210:	609a      	str	r2, [r3, #8]
 8003212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003214:	1d3b      	adds	r3, r7, #4
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	605a      	str	r2, [r3, #4]
 800321c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800321e:	4b1e      	ldr	r3, [pc, #120]	@ (8003298 <MX_TIM2_Init+0x98>)
 8003220:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003224:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8003226:	4b1c      	ldr	r3, [pc, #112]	@ (8003298 <MX_TIM2_Init+0x98>)
 8003228:	22a9      	movs	r2, #169	@ 0xa9
 800322a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800322c:	4b1a      	ldr	r3, [pc, #104]	@ (8003298 <MX_TIM2_Init+0x98>)
 800322e:	2200      	movs	r2, #0
 8003230:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003232:	4b19      	ldr	r3, [pc, #100]	@ (8003298 <MX_TIM2_Init+0x98>)
 8003234:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003238:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800323a:	4b17      	ldr	r3, [pc, #92]	@ (8003298 <MX_TIM2_Init+0x98>)
 800323c:	2200      	movs	r2, #0
 800323e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003240:	4b15      	ldr	r3, [pc, #84]	@ (8003298 <MX_TIM2_Init+0x98>)
 8003242:	2200      	movs	r2, #0
 8003244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003246:	4814      	ldr	r0, [pc, #80]	@ (8003298 <MX_TIM2_Init+0x98>)
 8003248:	f003 ffb4 	bl	80071b4 <HAL_TIM_Base_Init>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003252:	f7ff fbfd 	bl	8002a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003256:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800325a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800325c:	f107 0310 	add.w	r3, r7, #16
 8003260:	4619      	mov	r1, r3
 8003262:	480d      	ldr	r0, [pc, #52]	@ (8003298 <MX_TIM2_Init+0x98>)
 8003264:	f004 ff38 	bl	80080d8 <HAL_TIM_ConfigClockSource>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800326e:	f7ff fbef 	bl	8002a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003272:	2300      	movs	r3, #0
 8003274:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800327a:	1d3b      	adds	r3, r7, #4
 800327c:	4619      	mov	r1, r3
 800327e:	4806      	ldr	r0, [pc, #24]	@ (8003298 <MX_TIM2_Init+0x98>)
 8003280:	f005 ff10 	bl	80090a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800328a:	f7ff fbe1 	bl	8002a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800328e:	bf00      	nop
 8003290:	3720      	adds	r7, #32
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20001490 	.word	0x20001490

0800329c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08c      	sub	sp, #48	@ 0x30
 80032a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80032a2:	f107 030c 	add.w	r3, r7, #12
 80032a6:	2224      	movs	r2, #36	@ 0x24
 80032a8:	2100      	movs	r1, #0
 80032aa:	4618      	mov	r0, r3
 80032ac:	f007 ff68 	bl	800b180 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032b0:	463b      	mov	r3, r7
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	605a      	str	r2, [r3, #4]
 80032b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032ba:	4b21      	ldr	r3, [pc, #132]	@ (8003340 <MX_TIM3_Init+0xa4>)
 80032bc:	4a21      	ldr	r2, [pc, #132]	@ (8003344 <MX_TIM3_Init+0xa8>)
 80032be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80032c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003340 <MX_TIM3_Init+0xa4>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003340 <MX_TIM3_Init+0xa4>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80032cc:	4b1c      	ldr	r3, [pc, #112]	@ (8003340 <MX_TIM3_Init+0xa4>)
 80032ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003340 <MX_TIM3_Init+0xa4>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032da:	4b19      	ldr	r3, [pc, #100]	@ (8003340 <MX_TIM3_Init+0xa4>)
 80032dc:	2200      	movs	r2, #0
 80032de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80032e0:	2303      	movs	r3, #3
 80032e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80032e4:	2300      	movs	r3, #0
 80032e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80032e8:	2301      	movs	r3, #1
 80032ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80032ec:	2300      	movs	r3, #0
 80032ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80032f4:	2300      	movs	r3, #0
 80032f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80032f8:	2301      	movs	r3, #1
 80032fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80032fc:	2300      	movs	r3, #0
 80032fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003304:	f107 030c 	add.w	r3, r7, #12
 8003308:	4619      	mov	r1, r3
 800330a:	480d      	ldr	r0, [pc, #52]	@ (8003340 <MX_TIM3_Init+0xa4>)
 800330c:	f004 fb14 	bl	8007938 <HAL_TIM_Encoder_Init>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003316:	f7ff fb9b 	bl	8002a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800331a:	2300      	movs	r3, #0
 800331c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800331e:	2300      	movs	r3, #0
 8003320:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003322:	463b      	mov	r3, r7
 8003324:	4619      	mov	r1, r3
 8003326:	4806      	ldr	r0, [pc, #24]	@ (8003340 <MX_TIM3_Init+0xa4>)
 8003328:	f005 febc 	bl	80090a4 <HAL_TIMEx_MasterConfigSynchronization>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003332:	f7ff fb8d 	bl	8002a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003336:	bf00      	nop
 8003338:	3730      	adds	r7, #48	@ 0x30
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	2000155c 	.word	0x2000155c
 8003344:	40000400 	.word	0x40000400

08003348 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08c      	sub	sp, #48	@ 0x30
 800334c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800334e:	f107 030c 	add.w	r3, r7, #12
 8003352:	2224      	movs	r2, #36	@ 0x24
 8003354:	2100      	movs	r1, #0
 8003356:	4618      	mov	r0, r3
 8003358:	f007 ff12 	bl	800b180 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800335c:	463b      	mov	r3, r7
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	605a      	str	r2, [r3, #4]
 8003364:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003366:	4b21      	ldr	r3, [pc, #132]	@ (80033ec <MX_TIM4_Init+0xa4>)
 8003368:	4a21      	ldr	r2, [pc, #132]	@ (80033f0 <MX_TIM4_Init+0xa8>)
 800336a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800336c:	4b1f      	ldr	r3, [pc, #124]	@ (80033ec <MX_TIM4_Init+0xa4>)
 800336e:	2200      	movs	r2, #0
 8003370:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003372:	4b1e      	ldr	r3, [pc, #120]	@ (80033ec <MX_TIM4_Init+0xa4>)
 8003374:	2200      	movs	r2, #0
 8003376:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003378:	4b1c      	ldr	r3, [pc, #112]	@ (80033ec <MX_TIM4_Init+0xa4>)
 800337a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800337e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003380:	4b1a      	ldr	r3, [pc, #104]	@ (80033ec <MX_TIM4_Init+0xa4>)
 8003382:	2200      	movs	r2, #0
 8003384:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003386:	4b19      	ldr	r3, [pc, #100]	@ (80033ec <MX_TIM4_Init+0xa4>)
 8003388:	2200      	movs	r2, #0
 800338a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800338c:	2303      	movs	r3, #3
 800338e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003390:	2300      	movs	r3, #0
 8003392:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003394:	2301      	movs	r3, #1
 8003396:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003398:	2300      	movs	r3, #0
 800339a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800339c:	2300      	movs	r3, #0
 800339e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80033a0:	2300      	movs	r3, #0
 80033a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80033a4:	2301      	movs	r3, #1
 80033a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80033a8:	2300      	movs	r3, #0
 80033aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80033b0:	f107 030c 	add.w	r3, r7, #12
 80033b4:	4619      	mov	r1, r3
 80033b6:	480d      	ldr	r0, [pc, #52]	@ (80033ec <MX_TIM4_Init+0xa4>)
 80033b8:	f004 fabe 	bl	8007938 <HAL_TIM_Encoder_Init>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80033c2:	f7ff fb45 	bl	8002a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033c6:	2300      	movs	r3, #0
 80033c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80033ce:	463b      	mov	r3, r7
 80033d0:	4619      	mov	r1, r3
 80033d2:	4806      	ldr	r0, [pc, #24]	@ (80033ec <MX_TIM4_Init+0xa4>)
 80033d4:	f005 fe66 	bl	80090a4 <HAL_TIMEx_MasterConfigSynchronization>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80033de:	f7ff fb37 	bl	8002a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80033e2:	bf00      	nop
 80033e4:	3730      	adds	r7, #48	@ 0x30
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20001628 	.word	0x20001628
 80033f0:	40000800 	.word	0x40000800

080033f4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b088      	sub	sp, #32
 80033f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033fa:	f107 0310 	add.w	r3, r7, #16
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	605a      	str	r2, [r3, #4]
 8003404:	609a      	str	r2, [r3, #8]
 8003406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003408:	1d3b      	adds	r3, r7, #4
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003412:	4b1d      	ldr	r3, [pc, #116]	@ (8003488 <MX_TIM5_Init+0x94>)
 8003414:	4a1d      	ldr	r2, [pc, #116]	@ (800348c <MX_TIM5_Init+0x98>)
 8003416:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8003418:	4b1b      	ldr	r3, [pc, #108]	@ (8003488 <MX_TIM5_Init+0x94>)
 800341a:	22a9      	movs	r2, #169	@ 0xa9
 800341c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800341e:	4b1a      	ldr	r3, [pc, #104]	@ (8003488 <MX_TIM5_Init+0x94>)
 8003420:	2200      	movs	r2, #0
 8003422:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003424:	4b18      	ldr	r3, [pc, #96]	@ (8003488 <MX_TIM5_Init+0x94>)
 8003426:	f04f 32ff 	mov.w	r2, #4294967295
 800342a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800342c:	4b16      	ldr	r3, [pc, #88]	@ (8003488 <MX_TIM5_Init+0x94>)
 800342e:	2200      	movs	r2, #0
 8003430:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003432:	4b15      	ldr	r3, [pc, #84]	@ (8003488 <MX_TIM5_Init+0x94>)
 8003434:	2200      	movs	r2, #0
 8003436:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003438:	4813      	ldr	r0, [pc, #76]	@ (8003488 <MX_TIM5_Init+0x94>)
 800343a:	f003 febb 	bl	80071b4 <HAL_TIM_Base_Init>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003444:	f7ff fb04 	bl	8002a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003448:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800344c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800344e:	f107 0310 	add.w	r3, r7, #16
 8003452:	4619      	mov	r1, r3
 8003454:	480c      	ldr	r0, [pc, #48]	@ (8003488 <MX_TIM5_Init+0x94>)
 8003456:	f004 fe3f 	bl	80080d8 <HAL_TIM_ConfigClockSource>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003460:	f7ff faf6 	bl	8002a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003464:	2300      	movs	r3, #0
 8003466:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003468:	2300      	movs	r3, #0
 800346a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800346c:	1d3b      	adds	r3, r7, #4
 800346e:	4619      	mov	r1, r3
 8003470:	4805      	ldr	r0, [pc, #20]	@ (8003488 <MX_TIM5_Init+0x94>)
 8003472:	f005 fe17 	bl	80090a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800347c:	f7ff fae8 	bl	8002a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003480:	bf00      	nop
 8003482:	3720      	adds	r7, #32
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	200016f4 	.word	0x200016f4
 800348c:	40000c00 	.word	0x40000c00

08003490 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b09c      	sub	sp, #112	@ 0x70
 8003494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003496:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	605a      	str	r2, [r3, #4]
 80034a0:	609a      	str	r2, [r3, #8]
 80034a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	611a      	str	r2, [r3, #16]
 80034c0:	615a      	str	r2, [r3, #20]
 80034c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80034c4:	1d3b      	adds	r3, r7, #4
 80034c6:	2234      	movs	r2, #52	@ 0x34
 80034c8:	2100      	movs	r1, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f007 fe58 	bl	800b180 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80034d0:	4b51      	ldr	r3, [pc, #324]	@ (8003618 <MX_TIM8_Init+0x188>)
 80034d2:	4a52      	ldr	r2, [pc, #328]	@ (800361c <MX_TIM8_Init+0x18c>)
 80034d4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80034d6:	4b50      	ldr	r3, [pc, #320]	@ (8003618 <MX_TIM8_Init+0x188>)
 80034d8:	2200      	movs	r2, #0
 80034da:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034dc:	4b4e      	ldr	r3, [pc, #312]	@ (8003618 <MX_TIM8_Init+0x188>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80034e2:	4b4d      	ldr	r3, [pc, #308]	@ (8003618 <MX_TIM8_Init+0x188>)
 80034e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80034e8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034ea:	4b4b      	ldr	r3, [pc, #300]	@ (8003618 <MX_TIM8_Init+0x188>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80034f0:	4b49      	ldr	r3, [pc, #292]	@ (8003618 <MX_TIM8_Init+0x188>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034f6:	4b48      	ldr	r3, [pc, #288]	@ (8003618 <MX_TIM8_Init+0x188>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80034fc:	4846      	ldr	r0, [pc, #280]	@ (8003618 <MX_TIM8_Init+0x188>)
 80034fe:	f003 fe59 	bl	80071b4 <HAL_TIM_Base_Init>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003508:	f7ff faa2 	bl	8002a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800350c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003510:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003512:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003516:	4619      	mov	r1, r3
 8003518:	483f      	ldr	r0, [pc, #252]	@ (8003618 <MX_TIM8_Init+0x188>)
 800351a:	f004 fddd 	bl	80080d8 <HAL_TIM_ConfigClockSource>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8003524:	f7ff fa94 	bl	8002a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003528:	483b      	ldr	r0, [pc, #236]	@ (8003618 <MX_TIM8_Init+0x188>)
 800352a:	f003 ff8f 	bl	800744c <HAL_TIM_PWM_Init>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8003534:	f7ff fa8c 	bl	8002a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003538:	2300      	movs	r3, #0
 800353a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800353c:	2300      	movs	r3, #0
 800353e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003540:	2300      	movs	r3, #0
 8003542:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003544:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003548:	4619      	mov	r1, r3
 800354a:	4833      	ldr	r0, [pc, #204]	@ (8003618 <MX_TIM8_Init+0x188>)
 800354c:	f005 fdaa 	bl	80090a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8003556:	f7ff fa7b 	bl	8002a50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800355a:	2360      	movs	r3, #96	@ 0x60
 800355c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800355e:	2300      	movs	r3, #0
 8003560:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003562:	2300      	movs	r3, #0
 8003564:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003566:	2300      	movs	r3, #0
 8003568:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800356a:	2300      	movs	r3, #0
 800356c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800356e:	2300      	movs	r3, #0
 8003570:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003572:	2300      	movs	r3, #0
 8003574:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003576:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800357a:	2200      	movs	r2, #0
 800357c:	4619      	mov	r1, r3
 800357e:	4826      	ldr	r0, [pc, #152]	@ (8003618 <MX_TIM8_Init+0x188>)
 8003580:	f004 fc96 	bl	8007eb0 <HAL_TIM_PWM_ConfigChannel>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800358a:	f7ff fa61 	bl	8002a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800358e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003592:	2204      	movs	r2, #4
 8003594:	4619      	mov	r1, r3
 8003596:	4820      	ldr	r0, [pc, #128]	@ (8003618 <MX_TIM8_Init+0x188>)
 8003598:	f004 fc8a 	bl	8007eb0 <HAL_TIM_PWM_ConfigChannel>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 80035a2:	f7ff fa55 	bl	8002a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80035a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80035aa:	2208      	movs	r2, #8
 80035ac:	4619      	mov	r1, r3
 80035ae:	481a      	ldr	r0, [pc, #104]	@ (8003618 <MX_TIM8_Init+0x188>)
 80035b0:	f004 fc7e 	bl	8007eb0 <HAL_TIM_PWM_ConfigChannel>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 80035ba:	f7ff fa49 	bl	8002a50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80035be:	2300      	movs	r3, #0
 80035c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80035c2:	2300      	movs	r3, #0
 80035c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80035d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80035dc:	2300      	movs	r3, #0
 80035de:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80035e0:	2300      	movs	r3, #0
 80035e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80035e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80035ee:	2300      	movs	r3, #0
 80035f0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80035f6:	1d3b      	adds	r3, r7, #4
 80035f8:	4619      	mov	r1, r3
 80035fa:	4807      	ldr	r0, [pc, #28]	@ (8003618 <MX_TIM8_Init+0x188>)
 80035fc:	f005 fde8 	bl	80091d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 8003606:	f7ff fa23 	bl	8002a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800360a:	4803      	ldr	r0, [pc, #12]	@ (8003618 <MX_TIM8_Init+0x188>)
 800360c:	f000 f924 	bl	8003858 <HAL_TIM_MspPostInit>

}
 8003610:	bf00      	nop
 8003612:	3770      	adds	r7, #112	@ 0x70
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	200017c0 	.word	0x200017c0
 800361c:	40013400 	.word	0x40013400

08003620 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003624:	4b14      	ldr	r3, [pc, #80]	@ (8003678 <MX_TIM16_Init+0x58>)
 8003626:	4a15      	ldr	r2, [pc, #84]	@ (800367c <MX_TIM16_Init+0x5c>)
 8003628:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800362a:	4b13      	ldr	r3, [pc, #76]	@ (8003678 <MX_TIM16_Init+0x58>)
 800362c:	22a9      	movs	r2, #169	@ 0xa9
 800362e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003630:	4b11      	ldr	r3, [pc, #68]	@ (8003678 <MX_TIM16_Init+0x58>)
 8003632:	2200      	movs	r2, #0
 8003634:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8003636:	4b10      	ldr	r3, [pc, #64]	@ (8003678 <MX_TIM16_Init+0x58>)
 8003638:	f240 4279 	movw	r2, #1145	@ 0x479
 800363c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800363e:	4b0e      	ldr	r3, [pc, #56]	@ (8003678 <MX_TIM16_Init+0x58>)
 8003640:	2200      	movs	r2, #0
 8003642:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003644:	4b0c      	ldr	r3, [pc, #48]	@ (8003678 <MX_TIM16_Init+0x58>)
 8003646:	2200      	movs	r2, #0
 8003648:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800364a:	4b0b      	ldr	r3, [pc, #44]	@ (8003678 <MX_TIM16_Init+0x58>)
 800364c:	2200      	movs	r2, #0
 800364e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003650:	4809      	ldr	r0, [pc, #36]	@ (8003678 <MX_TIM16_Init+0x58>)
 8003652:	f003 fdaf 	bl	80071b4 <HAL_TIM_Base_Init>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800365c:	f7ff f9f8 	bl	8002a50 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8003660:	2108      	movs	r1, #8
 8003662:	4805      	ldr	r0, [pc, #20]	@ (8003678 <MX_TIM16_Init+0x58>)
 8003664:	f004 f872 	bl	800774c <HAL_TIM_OnePulse_Init>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800366e:	f7ff f9ef 	bl	8002a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003672:	bf00      	nop
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	2000188c 	.word	0x2000188c
 800367c:	40014400 	.word	0x40014400

08003680 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003690:	d114      	bne.n	80036bc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003692:	4b2b      	ldr	r3, [pc, #172]	@ (8003740 <HAL_TIM_Base_MspInit+0xc0>)
 8003694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003696:	4a2a      	ldr	r2, [pc, #168]	@ (8003740 <HAL_TIM_Base_MspInit+0xc0>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	6593      	str	r3, [r2, #88]	@ 0x58
 800369e:	4b28      	ldr	r3, [pc, #160]	@ (8003740 <HAL_TIM_Base_MspInit+0xc0>)
 80036a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80036aa:	2200      	movs	r2, #0
 80036ac:	2100      	movs	r1, #0
 80036ae:	201c      	movs	r0, #28
 80036b0:	f002 f81f 	bl	80056f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036b4:	201c      	movs	r0, #28
 80036b6:	f002 f836 	bl	8005726 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80036ba:	e03c      	b.n	8003736 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a20      	ldr	r2, [pc, #128]	@ (8003744 <HAL_TIM_Base_MspInit+0xc4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d10c      	bne.n	80036e0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80036c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003740 <HAL_TIM_Base_MspInit+0xc0>)
 80036c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003740 <HAL_TIM_Base_MspInit+0xc0>)
 80036cc:	f043 0308 	orr.w	r3, r3, #8
 80036d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80036d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003740 <HAL_TIM_Base_MspInit+0xc0>)
 80036d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	693b      	ldr	r3, [r7, #16]
}
 80036de:	e02a      	b.n	8003736 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a18      	ldr	r2, [pc, #96]	@ (8003748 <HAL_TIM_Base_MspInit+0xc8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d10c      	bne.n	8003704 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80036ea:	4b15      	ldr	r3, [pc, #84]	@ (8003740 <HAL_TIM_Base_MspInit+0xc0>)
 80036ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ee:	4a14      	ldr	r2, [pc, #80]	@ (8003740 <HAL_TIM_Base_MspInit+0xc0>)
 80036f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80036f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80036f6:	4b12      	ldr	r3, [pc, #72]	@ (8003740 <HAL_TIM_Base_MspInit+0xc0>)
 80036f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
}
 8003702:	e018      	b.n	8003736 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM16)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a10      	ldr	r2, [pc, #64]	@ (800374c <HAL_TIM_Base_MspInit+0xcc>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d113      	bne.n	8003736 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800370e:	4b0c      	ldr	r3, [pc, #48]	@ (8003740 <HAL_TIM_Base_MspInit+0xc0>)
 8003710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003712:	4a0b      	ldr	r2, [pc, #44]	@ (8003740 <HAL_TIM_Base_MspInit+0xc0>)
 8003714:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003718:	6613      	str	r3, [r2, #96]	@ 0x60
 800371a:	4b09      	ldr	r3, [pc, #36]	@ (8003740 <HAL_TIM_Base_MspInit+0xc0>)
 800371c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800371e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003722:	60bb      	str	r3, [r7, #8]
 8003724:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003726:	2200      	movs	r2, #0
 8003728:	2100      	movs	r1, #0
 800372a:	2019      	movs	r0, #25
 800372c:	f001 ffe1 	bl	80056f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003730:	2019      	movs	r0, #25
 8003732:	f001 fff8 	bl	8005726 <HAL_NVIC_EnableIRQ>
}
 8003736:	bf00      	nop
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000
 8003744:	40000c00 	.word	0x40000c00
 8003748:	40013400 	.word	0x40013400
 800374c:	40014400 	.word	0x40014400

08003750 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08c      	sub	sp, #48	@ 0x30
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003758:	f107 031c 	add.w	r3, r7, #28
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	60da      	str	r2, [r3, #12]
 8003766:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a37      	ldr	r2, [pc, #220]	@ (800384c <HAL_TIM_Encoder_MspInit+0xfc>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d131      	bne.n	80037d6 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003772:	4b37      	ldr	r3, [pc, #220]	@ (8003850 <HAL_TIM_Encoder_MspInit+0x100>)
 8003774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003776:	4a36      	ldr	r2, [pc, #216]	@ (8003850 <HAL_TIM_Encoder_MspInit+0x100>)
 8003778:	f043 0302 	orr.w	r3, r3, #2
 800377c:	6593      	str	r3, [r2, #88]	@ 0x58
 800377e:	4b34      	ldr	r3, [pc, #208]	@ (8003850 <HAL_TIM_Encoder_MspInit+0x100>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	61bb      	str	r3, [r7, #24]
 8003788:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800378a:	4b31      	ldr	r3, [pc, #196]	@ (8003850 <HAL_TIM_Encoder_MspInit+0x100>)
 800378c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800378e:	4a30      	ldr	r2, [pc, #192]	@ (8003850 <HAL_TIM_Encoder_MspInit+0x100>)
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003796:	4b2e      	ldr	r3, [pc, #184]	@ (8003850 <HAL_TIM_Encoder_MspInit+0x100>)
 8003798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037a2:	23c0      	movs	r3, #192	@ 0xc0
 80037a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a6:	2302      	movs	r3, #2
 80037a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037aa:	2300      	movs	r3, #0
 80037ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ae:	2300      	movs	r3, #0
 80037b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037b2:	2302      	movs	r3, #2
 80037b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b6:	f107 031c 	add.w	r3, r7, #28
 80037ba:	4619      	mov	r1, r3
 80037bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037c0:	f002 fafe 	bl	8005dc0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80037c4:	2200      	movs	r2, #0
 80037c6:	2100      	movs	r1, #0
 80037c8:	201d      	movs	r0, #29
 80037ca:	f001 ff92 	bl	80056f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80037ce:	201d      	movs	r0, #29
 80037d0:	f001 ffa9 	bl	8005726 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80037d4:	e036      	b.n	8003844 <HAL_TIM_Encoder_MspInit+0xf4>
  else if(tim_encoderHandle->Instance==TIM4)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1e      	ldr	r2, [pc, #120]	@ (8003854 <HAL_TIM_Encoder_MspInit+0x104>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d131      	bne.n	8003844 <HAL_TIM_Encoder_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003850 <HAL_TIM_Encoder_MspInit+0x100>)
 80037e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003850 <HAL_TIM_Encoder_MspInit+0x100>)
 80037e6:	f043 0304 	orr.w	r3, r3, #4
 80037ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80037ec:	4b18      	ldr	r3, [pc, #96]	@ (8003850 <HAL_TIM_Encoder_MspInit+0x100>)
 80037ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037f8:	4b15      	ldr	r3, [pc, #84]	@ (8003850 <HAL_TIM_Encoder_MspInit+0x100>)
 80037fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037fc:	4a14      	ldr	r2, [pc, #80]	@ (8003850 <HAL_TIM_Encoder_MspInit+0x100>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003804:	4b12      	ldr	r3, [pc, #72]	@ (8003850 <HAL_TIM_Encoder_MspInit+0x100>)
 8003806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003810:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003816:	2302      	movs	r3, #2
 8003818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381a:	2300      	movs	r3, #0
 800381c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800381e:	2300      	movs	r3, #0
 8003820:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8003822:	230a      	movs	r3, #10
 8003824:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003826:	f107 031c 	add.w	r3, r7, #28
 800382a:	4619      	mov	r1, r3
 800382c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003830:	f002 fac6 	bl	8005dc0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003834:	2200      	movs	r2, #0
 8003836:	2100      	movs	r1, #0
 8003838:	201e      	movs	r0, #30
 800383a:	f001 ff5a 	bl	80056f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800383e:	201e      	movs	r0, #30
 8003840:	f001 ff71 	bl	8005726 <HAL_NVIC_EnableIRQ>
}
 8003844:	bf00      	nop
 8003846:	3730      	adds	r7, #48	@ 0x30
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40000400 	.word	0x40000400
 8003850:	40021000 	.word	0x40021000
 8003854:	40000800 	.word	0x40000800

08003858 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08a      	sub	sp, #40	@ 0x28
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003860:	f107 0314 	add.w	r3, r7, #20
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	605a      	str	r2, [r3, #4]
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	60da      	str	r2, [r3, #12]
 800386e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a1f      	ldr	r2, [pc, #124]	@ (80038f4 <HAL_TIM_MspPostInit+0x9c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d138      	bne.n	80038ec <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800387a:	4b1f      	ldr	r3, [pc, #124]	@ (80038f8 <HAL_TIM_MspPostInit+0xa0>)
 800387c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800387e:	4a1e      	ldr	r2, [pc, #120]	@ (80038f8 <HAL_TIM_MspPostInit+0xa0>)
 8003880:	f043 0304 	orr.w	r3, r3, #4
 8003884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003886:	4b1c      	ldr	r3, [pc, #112]	@ (80038f8 <HAL_TIM_MspPostInit+0xa0>)
 8003888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003892:	4b19      	ldr	r3, [pc, #100]	@ (80038f8 <HAL_TIM_MspPostInit+0xa0>)
 8003894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003896:	4a18      	ldr	r2, [pc, #96]	@ (80038f8 <HAL_TIM_MspPostInit+0xa0>)
 8003898:	f043 0302 	orr.w	r3, r3, #2
 800389c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800389e:	4b16      	ldr	r3, [pc, #88]	@ (80038f8 <HAL_TIM_MspPostInit+0xa0>)
 80038a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038aa:	23c0      	movs	r3, #192	@ 0xc0
 80038ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ae:	2302      	movs	r3, #2
 80038b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b6:	2300      	movs	r3, #0
 80038b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80038ba:	2304      	movs	r3, #4
 80038bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038be:	f107 0314 	add.w	r3, r7, #20
 80038c2:	4619      	mov	r1, r3
 80038c4:	480d      	ldr	r0, [pc, #52]	@ (80038fc <HAL_TIM_MspPostInit+0xa4>)
 80038c6:	f002 fa7b 	bl	8005dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80038ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d0:	2302      	movs	r3, #2
 80038d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d8:	2300      	movs	r3, #0
 80038da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80038dc:	230a      	movs	r3, #10
 80038de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038e0:	f107 0314 	add.w	r3, r7, #20
 80038e4:	4619      	mov	r1, r3
 80038e6:	4806      	ldr	r0, [pc, #24]	@ (8003900 <HAL_TIM_MspPostInit+0xa8>)
 80038e8:	f002 fa6a 	bl	8005dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80038ec:	bf00      	nop
 80038ee:	3728      	adds	r7, #40	@ 0x28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40013400 	.word	0x40013400
 80038f8:	40021000 	.word	0x40021000
 80038fc:	48000800 	.word	0x48000800
 8003900:	48000400 	.word	0x48000400

08003904 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003908:	4b23      	ldr	r3, [pc, #140]	@ (8003998 <MX_USART2_UART_Init+0x94>)
 800390a:	4a24      	ldr	r2, [pc, #144]	@ (800399c <MX_USART2_UART_Init+0x98>)
 800390c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800390e:	4b22      	ldr	r3, [pc, #136]	@ (8003998 <MX_USART2_UART_Init+0x94>)
 8003910:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003914:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003916:	4b20      	ldr	r3, [pc, #128]	@ (8003998 <MX_USART2_UART_Init+0x94>)
 8003918:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800391c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800391e:	4b1e      	ldr	r3, [pc, #120]	@ (8003998 <MX_USART2_UART_Init+0x94>)
 8003920:	2200      	movs	r2, #0
 8003922:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003924:	4b1c      	ldr	r3, [pc, #112]	@ (8003998 <MX_USART2_UART_Init+0x94>)
 8003926:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800392a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800392c:	4b1a      	ldr	r3, [pc, #104]	@ (8003998 <MX_USART2_UART_Init+0x94>)
 800392e:	220c      	movs	r2, #12
 8003930:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003932:	4b19      	ldr	r3, [pc, #100]	@ (8003998 <MX_USART2_UART_Init+0x94>)
 8003934:	2200      	movs	r2, #0
 8003936:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003938:	4b17      	ldr	r3, [pc, #92]	@ (8003998 <MX_USART2_UART_Init+0x94>)
 800393a:	2200      	movs	r2, #0
 800393c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800393e:	4b16      	ldr	r3, [pc, #88]	@ (8003998 <MX_USART2_UART_Init+0x94>)
 8003940:	2200      	movs	r2, #0
 8003942:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003944:	4b14      	ldr	r3, [pc, #80]	@ (8003998 <MX_USART2_UART_Init+0x94>)
 8003946:	2200      	movs	r2, #0
 8003948:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800394a:	4b13      	ldr	r3, [pc, #76]	@ (8003998 <MX_USART2_UART_Init+0x94>)
 800394c:	2200      	movs	r2, #0
 800394e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003950:	4811      	ldr	r0, [pc, #68]	@ (8003998 <MX_USART2_UART_Init+0x94>)
 8003952:	f005 fd21 	bl	8009398 <HAL_UART_Init>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800395c:	f7ff f878 	bl	8002a50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003960:	2100      	movs	r1, #0
 8003962:	480d      	ldr	r0, [pc, #52]	@ (8003998 <MX_USART2_UART_Init+0x94>)
 8003964:	f007 fa74 	bl	800ae50 <HAL_UARTEx_SetTxFifoThreshold>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800396e:	f7ff f86f 	bl	8002a50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003972:	2100      	movs	r1, #0
 8003974:	4808      	ldr	r0, [pc, #32]	@ (8003998 <MX_USART2_UART_Init+0x94>)
 8003976:	f007 faa9 	bl	800aecc <HAL_UARTEx_SetRxFifoThreshold>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8003980:	f7ff f866 	bl	8002a50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003984:	4804      	ldr	r0, [pc, #16]	@ (8003998 <MX_USART2_UART_Init+0x94>)
 8003986:	f007 fa2a 	bl	800adde <HAL_UARTEx_DisableFifoMode>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8003990:	f7ff f85e 	bl	8002a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003994:	bf00      	nop
 8003996:	bd80      	pop	{r7, pc}
 8003998:	20001958 	.word	0x20001958
 800399c:	40004400 	.word	0x40004400

080039a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b09e      	sub	sp, #120	@ 0x78
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	605a      	str	r2, [r3, #4]
 80039b2:	609a      	str	r2, [r3, #8]
 80039b4:	60da      	str	r2, [r3, #12]
 80039b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039b8:	f107 0310 	add.w	r3, r7, #16
 80039bc:	2254      	movs	r2, #84	@ 0x54
 80039be:	2100      	movs	r1, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f007 fbdd 	bl	800b180 <memset>
  if(uartHandle->Instance==USART2)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a4d      	ldr	r2, [pc, #308]	@ (8003b00 <HAL_UART_MspInit+0x160>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	f040 8092 	bne.w	8003af6 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80039d2:	2302      	movs	r3, #2
 80039d4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039da:	f107 0310 	add.w	r3, r7, #16
 80039de:	4618      	mov	r0, r3
 80039e0:	f003 f99a 	bl	8006d18 <HAL_RCCEx_PeriphCLKConfig>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80039ea:	f7ff f831 	bl	8002a50 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80039ee:	4b45      	ldr	r3, [pc, #276]	@ (8003b04 <HAL_UART_MspInit+0x164>)
 80039f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f2:	4a44      	ldr	r2, [pc, #272]	@ (8003b04 <HAL_UART_MspInit+0x164>)
 80039f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80039fa:	4b42      	ldr	r3, [pc, #264]	@ (8003b04 <HAL_UART_MspInit+0x164>)
 80039fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a06:	4b3f      	ldr	r3, [pc, #252]	@ (8003b04 <HAL_UART_MspInit+0x164>)
 8003a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a0a:	4a3e      	ldr	r2, [pc, #248]	@ (8003b04 <HAL_UART_MspInit+0x164>)
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a12:	4b3c      	ldr	r3, [pc, #240]	@ (8003b04 <HAL_UART_MspInit+0x164>)
 8003a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a1e:	230c      	movs	r3, #12
 8003a20:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a22:	2302      	movs	r3, #2
 8003a24:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a2e:	2307      	movs	r3, #7
 8003a30:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a32:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003a36:	4619      	mov	r1, r3
 8003a38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a3c:	f002 f9c0 	bl	8005dc0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8003a40:	4b31      	ldr	r3, [pc, #196]	@ (8003b08 <HAL_UART_MspInit+0x168>)
 8003a42:	4a32      	ldr	r2, [pc, #200]	@ (8003b0c <HAL_UART_MspInit+0x16c>)
 8003a44:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003a46:	4b30      	ldr	r3, [pc, #192]	@ (8003b08 <HAL_UART_MspInit+0x168>)
 8003a48:	221a      	movs	r2, #26
 8003a4a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8003b08 <HAL_UART_MspInit+0x168>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a52:	4b2d      	ldr	r3, [pc, #180]	@ (8003b08 <HAL_UART_MspInit+0x168>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a58:	4b2b      	ldr	r3, [pc, #172]	@ (8003b08 <HAL_UART_MspInit+0x168>)
 8003a5a:	2280      	movs	r2, #128	@ 0x80
 8003a5c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8003b08 <HAL_UART_MspInit+0x168>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a64:	4b28      	ldr	r3, [pc, #160]	@ (8003b08 <HAL_UART_MspInit+0x168>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003a6a:	4b27      	ldr	r3, [pc, #156]	@ (8003b08 <HAL_UART_MspInit+0x168>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a70:	4b25      	ldr	r3, [pc, #148]	@ (8003b08 <HAL_UART_MspInit+0x168>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003a76:	4824      	ldr	r0, [pc, #144]	@ (8003b08 <HAL_UART_MspInit+0x168>)
 8003a78:	f001 fe70 	bl	800575c <HAL_DMA_Init>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8003a82:	f7fe ffe5 	bl	8002a50 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a1f      	ldr	r2, [pc, #124]	@ (8003b08 <HAL_UART_MspInit+0x168>)
 8003a8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003a8e:	4a1e      	ldr	r2, [pc, #120]	@ (8003b08 <HAL_UART_MspInit+0x168>)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8003a94:	4b1e      	ldr	r3, [pc, #120]	@ (8003b10 <HAL_UART_MspInit+0x170>)
 8003a96:	4a1f      	ldr	r2, [pc, #124]	@ (8003b14 <HAL_UART_MspInit+0x174>)
 8003a98:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003b10 <HAL_UART_MspInit+0x170>)
 8003a9c:	221b      	movs	r2, #27
 8003a9e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b10 <HAL_UART_MspInit+0x170>)
 8003aa2:	2210      	movs	r2, #16
 8003aa4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b10 <HAL_UART_MspInit+0x170>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003aac:	4b18      	ldr	r3, [pc, #96]	@ (8003b10 <HAL_UART_MspInit+0x170>)
 8003aae:	2280      	movs	r2, #128	@ 0x80
 8003ab0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ab2:	4b17      	ldr	r3, [pc, #92]	@ (8003b10 <HAL_UART_MspInit+0x170>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ab8:	4b15      	ldr	r3, [pc, #84]	@ (8003b10 <HAL_UART_MspInit+0x170>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003abe:	4b14      	ldr	r3, [pc, #80]	@ (8003b10 <HAL_UART_MspInit+0x170>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ac4:	4b12      	ldr	r3, [pc, #72]	@ (8003b10 <HAL_UART_MspInit+0x170>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003aca:	4811      	ldr	r0, [pc, #68]	@ (8003b10 <HAL_UART_MspInit+0x170>)
 8003acc:	f001 fe46 	bl	800575c <HAL_DMA_Init>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8003ad6:	f7fe ffbb 	bl	8002a50 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a0c      	ldr	r2, [pc, #48]	@ (8003b10 <HAL_UART_MspInit+0x170>)
 8003ade:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003ae0:	4a0b      	ldr	r2, [pc, #44]	@ (8003b10 <HAL_UART_MspInit+0x170>)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	2100      	movs	r1, #0
 8003aea:	2026      	movs	r0, #38	@ 0x26
 8003aec:	f001 fe01 	bl	80056f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003af0:	2026      	movs	r0, #38	@ 0x26
 8003af2:	f001 fe18 	bl	8005726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003af6:	bf00      	nop
 8003af8:	3778      	adds	r7, #120	@ 0x78
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40004400 	.word	0x40004400
 8003b04:	40021000 	.word	0x40021000
 8003b08:	20001a24 	.word	0x20001a24
 8003b0c:	4002001c 	.word	0x4002001c
 8003b10:	20001a84 	.word	0x20001a84
 8003b14:	40020030 	.word	0x40020030

08003b18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b18:	480d      	ldr	r0, [pc, #52]	@ (8003b50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b1c:	f7ff fb5e 	bl	80031dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b20:	480c      	ldr	r0, [pc, #48]	@ (8003b54 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b22:	490d      	ldr	r1, [pc, #52]	@ (8003b58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b24:	4a0d      	ldr	r2, [pc, #52]	@ (8003b5c <LoopForever+0xe>)
  movs r3, #0
 8003b26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003b28:	e002      	b.n	8003b30 <LoopCopyDataInit>

08003b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b2e:	3304      	adds	r3, #4

08003b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b34:	d3f9      	bcc.n	8003b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b36:	4a0a      	ldr	r2, [pc, #40]	@ (8003b60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b38:	4c0a      	ldr	r4, [pc, #40]	@ (8003b64 <LoopForever+0x16>)
  movs r3, #0
 8003b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b3c:	e001      	b.n	8003b42 <LoopFillZerobss>

08003b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b40:	3204      	adds	r2, #4

08003b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b44:	d3fb      	bcc.n	8003b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b46:	f007 fb39 	bl	800b1bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b4a:	f7fe fdc5 	bl	80026d8 <main>

08003b4e <LoopForever>:

LoopForever:
    b LoopForever
 8003b4e:	e7fe      	b.n	8003b4e <LoopForever>
  ldr   r0, =_estack
 8003b50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b58:	200001c0 	.word	0x200001c0
  ldr r2, =_sidata
 8003b5c:	0800c168 	.word	0x0800c168
  ldr r2, =_sbss
 8003b60:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8003b64:	20001c30 	.word	0x20001c30

08003b68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b68:	e7fe      	b.n	8003b68 <ADC1_2_IRQHandler>

08003b6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b082      	sub	sp, #8
 8003b6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b74:	2003      	movs	r0, #3
 8003b76:	f001 fdb1 	bl	80056dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	f000 f80e 	bl	8003b9c <HAL_InitTick>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	71fb      	strb	r3, [r7, #7]
 8003b8a:	e001      	b.n	8003b90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b8c:	f7ff fa44 	bl	8003018 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b90:	79fb      	ldrb	r3, [r7, #7]

}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003ba8:	4b16      	ldr	r3, [pc, #88]	@ (8003c04 <HAL_InitTick+0x68>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d022      	beq.n	8003bf6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003bb0:	4b15      	ldr	r3, [pc, #84]	@ (8003c08 <HAL_InitTick+0x6c>)
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4b13      	ldr	r3, [pc, #76]	@ (8003c04 <HAL_InitTick+0x68>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003bbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f001 fdbc 	bl	8005742 <HAL_SYSTICK_Config>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10f      	bne.n	8003bf0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b0f      	cmp	r3, #15
 8003bd4:	d809      	bhi.n	8003bea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	f04f 30ff 	mov.w	r0, #4294967295
 8003bde:	f001 fd88 	bl	80056f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003be2:	4a0a      	ldr	r2, [pc, #40]	@ (8003c0c <HAL_InitTick+0x70>)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	e007      	b.n	8003bfa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	73fb      	strb	r3, [r7, #15]
 8003bee:	e004      	b.n	8003bfa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	73fb      	strb	r3, [r7, #15]
 8003bf4:	e001      	b.n	8003bfa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	2000016c 	.word	0x2000016c
 8003c08:	20000164 	.word	0x20000164
 8003c0c:	20000168 	.word	0x20000168

08003c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c14:	4b05      	ldr	r3, [pc, #20]	@ (8003c2c <HAL_IncTick+0x1c>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	4b05      	ldr	r3, [pc, #20]	@ (8003c30 <HAL_IncTick+0x20>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	4a03      	ldr	r2, [pc, #12]	@ (8003c2c <HAL_IncTick+0x1c>)
 8003c20:	6013      	str	r3, [r2, #0]
}
 8003c22:	bf00      	nop
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	20001ae4 	.word	0x20001ae4
 8003c30:	2000016c 	.word	0x2000016c

08003c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return uwTick;
 8003c38:	4b03      	ldr	r3, [pc, #12]	@ (8003c48 <HAL_GetTick+0x14>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	20001ae4 	.word	0x20001ae4

08003c4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	431a      	orrs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	609a      	str	r2, [r3, #8]
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	609a      	str	r2, [r3, #8]
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	3360      	adds	r3, #96	@ 0x60
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	4b08      	ldr	r3, [pc, #32]	@ (8003cf8 <LL_ADC_SetOffset+0x44>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003cec:	bf00      	nop
 8003cee:	371c      	adds	r7, #28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	03fff000 	.word	0x03fff000

08003cfc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3360      	adds	r3, #96	@ 0x60
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	3360      	adds	r3, #96	@ 0x60
 8003d38:	461a      	mov	r2, r3
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003d52:	bf00      	nop
 8003d54:	371c      	adds	r7, #28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b087      	sub	sp, #28
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3360      	adds	r3, #96	@ 0x60
 8003d6e:	461a      	mov	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003d88:	bf00      	nop
 8003d8a:	371c      	adds	r7, #28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3360      	adds	r3, #96	@ 0x60
 8003da4:	461a      	mov	r2, r3
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	431a      	orrs	r2, r3
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	615a      	str	r2, [r3, #20]
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b087      	sub	sp, #28
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	3330      	adds	r3, #48	@ 0x30
 8003e26:	461a      	mov	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	4413      	add	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f003 031f 	and.w	r3, r3, #31
 8003e40:	211f      	movs	r1, #31
 8003e42:	fa01 f303 	lsl.w	r3, r1, r3
 8003e46:	43db      	mvns	r3, r3
 8003e48:	401a      	ands	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	0e9b      	lsrs	r3, r3, #26
 8003e4e:	f003 011f 	and.w	r1, r3, #31
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b087      	sub	sp, #28
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	3314      	adds	r3, #20
 8003e7e:	461a      	mov	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	0e5b      	lsrs	r3, r3, #25
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	4413      	add	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	0d1b      	lsrs	r3, r3, #20
 8003e96:	f003 031f 	and.w	r3, r3, #31
 8003e9a:	2107      	movs	r1, #7
 8003e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	401a      	ands	r2, r3
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	0d1b      	lsrs	r3, r3, #20
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003eb8:	bf00      	nop
 8003eba:	371c      	adds	r7, #28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003edc:	43db      	mvns	r3, r3
 8003ede:	401a      	ands	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f003 0318 	and.w	r3, r3, #24
 8003ee6:	4908      	ldr	r1, [pc, #32]	@ (8003f08 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003ee8:	40d9      	lsrs	r1, r3
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	400b      	ands	r3, r1
 8003eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003efa:	bf00      	nop
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	0007ffff 	.word	0x0007ffff

08003f0c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 031f 	and.w	r3, r3, #31
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003f38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6093      	str	r3, [r2, #8]
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f60:	d101      	bne.n	8003f66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003f84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f88:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fb0:	d101      	bne.n	8003fb6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003fd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003fd8:	f043 0201 	orr.w	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ffc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004000:	f043 0202 	orr.w	r2, r3, #2
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <LL_ADC_IsEnabled+0x18>
 8004028:	2301      	movs	r3, #1
 800402a:	e000      	b.n	800402e <LL_ADC_IsEnabled+0x1a>
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b02      	cmp	r3, #2
 800404c:	d101      	bne.n	8004052 <LL_ADC_IsDisableOngoing+0x18>
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <LL_ADC_IsDisableOngoing+0x1a>
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004070:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004074:	f043 0204 	orr.w	r2, r3, #4
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b04      	cmp	r3, #4
 800409a:	d101      	bne.n	80040a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d101      	bne.n	80040c6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80040d4:	b590      	push	{r4, r7, lr}
 80040d6:	b089      	sub	sp, #36	@ 0x24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80040e0:	2300      	movs	r3, #0
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e1a9      	b.n	8004442 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d109      	bne.n	8004110 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7fd ffad 	bl	800205c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff ff19 	bl	8003f4c <LL_ADC_IsDeepPowerDownEnabled>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d004      	beq.n	800412a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff feff 	bl	8003f28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff ff34 	bl	8003f9c <LL_ADC_IsInternalRegulatorEnabled>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d115      	bne.n	8004166 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff ff18 	bl	8003f74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004144:	4b9c      	ldr	r3, [pc, #624]	@ (80043b8 <HAL_ADC_Init+0x2e4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	099b      	lsrs	r3, r3, #6
 800414a:	4a9c      	ldr	r2, [pc, #624]	@ (80043bc <HAL_ADC_Init+0x2e8>)
 800414c:	fba2 2303 	umull	r2, r3, r2, r3
 8004150:	099b      	lsrs	r3, r3, #6
 8004152:	3301      	adds	r3, #1
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004158:	e002      	b.n	8004160 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	3b01      	subs	r3, #1
 800415e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1f9      	bne.n	800415a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff ff16 	bl	8003f9c <LL_ADC_IsInternalRegulatorEnabled>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10d      	bne.n	8004192 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800417a:	f043 0210 	orr.w	r2, r3, #16
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004186:	f043 0201 	orr.w	r2, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff ff76 	bl	8004088 <LL_ADC_REG_IsConversionOngoing>
 800419c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a2:	f003 0310 	and.w	r3, r3, #16
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f040 8142 	bne.w	8004430 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f040 813e 	bne.w	8004430 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80041bc:	f043 0202 	orr.w	r2, r3, #2
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff ff23 	bl	8004014 <LL_ADC_IsEnabled>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d141      	bne.n	8004258 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041dc:	d004      	beq.n	80041e8 <HAL_ADC_Init+0x114>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a77      	ldr	r2, [pc, #476]	@ (80043c0 <HAL_ADC_Init+0x2ec>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d10f      	bne.n	8004208 <HAL_ADC_Init+0x134>
 80041e8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80041ec:	f7ff ff12 	bl	8004014 <LL_ADC_IsEnabled>
 80041f0:	4604      	mov	r4, r0
 80041f2:	4873      	ldr	r0, [pc, #460]	@ (80043c0 <HAL_ADC_Init+0x2ec>)
 80041f4:	f7ff ff0e 	bl	8004014 <LL_ADC_IsEnabled>
 80041f8:	4603      	mov	r3, r0
 80041fa:	4323      	orrs	r3, r4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf0c      	ite	eq
 8004200:	2301      	moveq	r3, #1
 8004202:	2300      	movne	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	e012      	b.n	800422e <HAL_ADC_Init+0x15a>
 8004208:	486e      	ldr	r0, [pc, #440]	@ (80043c4 <HAL_ADC_Init+0x2f0>)
 800420a:	f7ff ff03 	bl	8004014 <LL_ADC_IsEnabled>
 800420e:	4604      	mov	r4, r0
 8004210:	486d      	ldr	r0, [pc, #436]	@ (80043c8 <HAL_ADC_Init+0x2f4>)
 8004212:	f7ff feff 	bl	8004014 <LL_ADC_IsEnabled>
 8004216:	4603      	mov	r3, r0
 8004218:	431c      	orrs	r4, r3
 800421a:	486c      	ldr	r0, [pc, #432]	@ (80043cc <HAL_ADC_Init+0x2f8>)
 800421c:	f7ff fefa 	bl	8004014 <LL_ADC_IsEnabled>
 8004220:	4603      	mov	r3, r0
 8004222:	4323      	orrs	r3, r4
 8004224:	2b00      	cmp	r3, #0
 8004226:	bf0c      	ite	eq
 8004228:	2301      	moveq	r3, #1
 800422a:	2300      	movne	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d012      	beq.n	8004258 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800423a:	d004      	beq.n	8004246 <HAL_ADC_Init+0x172>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a5f      	ldr	r2, [pc, #380]	@ (80043c0 <HAL_ADC_Init+0x2ec>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d101      	bne.n	800424a <HAL_ADC_Init+0x176>
 8004246:	4a62      	ldr	r2, [pc, #392]	@ (80043d0 <HAL_ADC_Init+0x2fc>)
 8004248:	e000      	b.n	800424c <HAL_ADC_Init+0x178>
 800424a:	4a62      	ldr	r2, [pc, #392]	@ (80043d4 <HAL_ADC_Init+0x300>)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	4619      	mov	r1, r3
 8004252:	4610      	mov	r0, r2
 8004254:	f7ff fcfa 	bl	8003c4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	7f5b      	ldrb	r3, [r3, #29]
 800425c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004262:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004268:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800426e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004276:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004278:	4313      	orrs	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004282:	2b01      	cmp	r3, #1
 8004284:	d106      	bne.n	8004294 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428a:	3b01      	subs	r3, #1
 800428c:	045b      	lsls	r3, r3, #17
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	4313      	orrs	r3, r2
 8004292:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004298:	2b00      	cmp	r3, #0
 800429a:	d009      	beq.n	80042b0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	4b48      	ldr	r3, [pc, #288]	@ (80043d8 <HAL_ADC_Init+0x304>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6812      	ldr	r2, [r2, #0]
 80042be:	69b9      	ldr	r1, [r7, #24]
 80042c0:	430b      	orrs	r3, r1
 80042c2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff fee5 	bl	80040ae <LL_ADC_INJ_IsConversionOngoing>
 80042e4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d17f      	bne.n	80043ec <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d17c      	bne.n	80043ec <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80042f6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80042fe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004300:	4313      	orrs	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800430e:	f023 0302 	bic.w	r3, r3, #2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6812      	ldr	r2, [r2, #0]
 8004316:	69b9      	ldr	r1, [r7, #24]
 8004318:	430b      	orrs	r3, r1
 800431a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d017      	beq.n	8004354 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004332:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800433c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004340:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6911      	ldr	r1, [r2, #16]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	430b      	orrs	r3, r1
 800434e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004352:	e013      	b.n	800437c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004362:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6812      	ldr	r2, [r2, #0]
 8004370:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004374:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004378:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004382:	2b01      	cmp	r3, #1
 8004384:	d12a      	bne.n	80043dc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004390:	f023 0304 	bic.w	r3, r3, #4
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800439c:	4311      	orrs	r1, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80043a2:	4311      	orrs	r1, r2
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80043a8:	430a      	orrs	r2, r1
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f042 0201 	orr.w	r2, r2, #1
 80043b4:	611a      	str	r2, [r3, #16]
 80043b6:	e019      	b.n	80043ec <HAL_ADC_Init+0x318>
 80043b8:	20000164 	.word	0x20000164
 80043bc:	053e2d63 	.word	0x053e2d63
 80043c0:	50000100 	.word	0x50000100
 80043c4:	50000400 	.word	0x50000400
 80043c8:	50000500 	.word	0x50000500
 80043cc:	50000600 	.word	0x50000600
 80043d0:	50000300 	.word	0x50000300
 80043d4:	50000700 	.word	0x50000700
 80043d8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	691a      	ldr	r2, [r3, #16]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0201 	bic.w	r2, r2, #1
 80043ea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d10c      	bne.n	800440e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fa:	f023 010f 	bic.w	r1, r3, #15
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	1e5a      	subs	r2, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	631a      	str	r2, [r3, #48]	@ 0x30
 800440c:	e007      	b.n	800441e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 020f 	bic.w	r2, r2, #15
 800441c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004422:	f023 0303 	bic.w	r3, r3, #3
 8004426:	f043 0201 	orr.w	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800442e:	e007      	b.n	8004440 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004434:	f043 0210 	orr.w	r2, r3, #16
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004440:	7ffb      	ldrb	r3, [r7, #31]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3724      	adds	r7, #36	@ 0x24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd90      	pop	{r4, r7, pc}
 800444a:	bf00      	nop

0800444c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004460:	d004      	beq.n	800446c <HAL_ADC_Start_DMA+0x20>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a5a      	ldr	r2, [pc, #360]	@ (80045d0 <HAL_ADC_Start_DMA+0x184>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d101      	bne.n	8004470 <HAL_ADC_Start_DMA+0x24>
 800446c:	4b59      	ldr	r3, [pc, #356]	@ (80045d4 <HAL_ADC_Start_DMA+0x188>)
 800446e:	e000      	b.n	8004472 <HAL_ADC_Start_DMA+0x26>
 8004470:	4b59      	ldr	r3, [pc, #356]	@ (80045d8 <HAL_ADC_Start_DMA+0x18c>)
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff fd4a 	bl	8003f0c <LL_ADC_GetMultimode>
 8004478:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff fe02 	bl	8004088 <LL_ADC_REG_IsConversionOngoing>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	f040 809b 	bne.w	80045c2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <HAL_ADC_Start_DMA+0x4e>
 8004496:	2302      	movs	r3, #2
 8004498:	e096      	b.n	80045c8 <HAL_ADC_Start_DMA+0x17c>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a4d      	ldr	r2, [pc, #308]	@ (80045dc <HAL_ADC_Start_DMA+0x190>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d008      	beq.n	80044be <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d005      	beq.n	80044be <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	2b05      	cmp	r3, #5
 80044b6:	d002      	beq.n	80044be <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	2b09      	cmp	r3, #9
 80044bc:	d17a      	bne.n	80045b4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 fcf6 	bl	8004eb0 <ADC_Enable>
 80044c4:	4603      	mov	r3, r0
 80044c6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80044c8:	7dfb      	ldrb	r3, [r7, #23]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d16d      	bne.n	80045aa <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a3a      	ldr	r2, [pc, #232]	@ (80045d0 <HAL_ADC_Start_DMA+0x184>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d009      	beq.n	8004500 <HAL_ADC_Start_DMA+0xb4>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a3b      	ldr	r2, [pc, #236]	@ (80045e0 <HAL_ADC_Start_DMA+0x194>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d002      	beq.n	80044fc <HAL_ADC_Start_DMA+0xb0>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	e003      	b.n	8004504 <HAL_ADC_Start_DMA+0xb8>
 80044fc:	4b39      	ldr	r3, [pc, #228]	@ (80045e4 <HAL_ADC_Start_DMA+0x198>)
 80044fe:	e001      	b.n	8004504 <HAL_ADC_Start_DMA+0xb8>
 8004500:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	4293      	cmp	r3, r2
 800450a:	d002      	beq.n	8004512 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d105      	bne.n	800451e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004516:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004522:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d006      	beq.n	8004538 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800452e:	f023 0206 	bic.w	r2, r3, #6
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	661a      	str	r2, [r3, #96]	@ 0x60
 8004536:	e002      	b.n	800453e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004542:	4a29      	ldr	r2, [pc, #164]	@ (80045e8 <HAL_ADC_Start_DMA+0x19c>)
 8004544:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800454a:	4a28      	ldr	r2, [pc, #160]	@ (80045ec <HAL_ADC_Start_DMA+0x1a0>)
 800454c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004552:	4a27      	ldr	r2, [pc, #156]	@ (80045f0 <HAL_ADC_Start_DMA+0x1a4>)
 8004554:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	221c      	movs	r2, #28
 800455c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0210 	orr.w	r2, r2, #16
 8004574:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68da      	ldr	r2, [r3, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f042 0201 	orr.w	r2, r2, #1
 8004584:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3340      	adds	r3, #64	@ 0x40
 8004590:	4619      	mov	r1, r3
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f001 f989 	bl	80058ac <HAL_DMA_Start_IT>
 800459a:	4603      	mov	r3, r0
 800459c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff fd5c 	bl	8004060 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80045a8:	e00d      	b.n	80045c6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80045b2:	e008      	b.n	80045c6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80045c0:	e001      	b.n	80045c6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80045c2:	2302      	movs	r3, #2
 80045c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80045c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	50000100 	.word	0x50000100
 80045d4:	50000300 	.word	0x50000300
 80045d8:	50000700 	.word	0x50000700
 80045dc:	50000600 	.word	0x50000600
 80045e0:	50000500 	.word	0x50000500
 80045e4:	50000400 	.word	0x50000400
 80045e8:	0800509b 	.word	0x0800509b
 80045ec:	08005173 	.word	0x08005173
 80045f0:	0800518f 	.word	0x0800518f

080045f4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b0b6      	sub	sp, #216	@ 0xd8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004640:	2300      	movs	r3, #0
 8004642:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800464a:	2b01      	cmp	r3, #1
 800464c:	d102      	bne.n	8004654 <HAL_ADC_ConfigChannel+0x24>
 800464e:	2302      	movs	r3, #2
 8004650:	f000 bc13 	b.w	8004e7a <HAL_ADC_ConfigChannel+0x84a>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff fd11 	bl	8004088 <LL_ADC_REG_IsConversionOngoing>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	f040 83f3 	bne.w	8004e54 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	6859      	ldr	r1, [r3, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	f7ff fbcb 	bl	8003e16 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff fcff 	bl	8004088 <LL_ADC_REG_IsConversionOngoing>
 800468a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff fd0b 	bl	80040ae <LL_ADC_INJ_IsConversionOngoing>
 8004698:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800469c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f040 81d9 	bne.w	8004a58 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f040 81d4 	bne.w	8004a58 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046b8:	d10f      	bne.n	80046da <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2200      	movs	r2, #0
 80046c4:	4619      	mov	r1, r3
 80046c6:	f7ff fbd2 	bl	8003e6e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fb79 	bl	8003dca <LL_ADC_SetSamplingTimeCommonConfig>
 80046d8:	e00e      	b.n	80046f8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6818      	ldr	r0, [r3, #0]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	6819      	ldr	r1, [r3, #0]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	461a      	mov	r2, r3
 80046e8:	f7ff fbc1 	bl	8003e6e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2100      	movs	r1, #0
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff fb69 	bl	8003dca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	695a      	ldr	r2, [r3, #20]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	08db      	lsrs	r3, r3, #3
 8004704:	f003 0303 	and.w	r3, r3, #3
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b04      	cmp	r3, #4
 8004718:	d022      	beq.n	8004760 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	6919      	ldr	r1, [r3, #16]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800472a:	f7ff fac3 	bl	8003cb4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	6919      	ldr	r1, [r3, #16]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	461a      	mov	r2, r3
 800473c:	f7ff fb0f 	bl	8003d5e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6818      	ldr	r0, [r3, #0]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800474c:	2b01      	cmp	r3, #1
 800474e:	d102      	bne.n	8004756 <HAL_ADC_ConfigChannel+0x126>
 8004750:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004754:	e000      	b.n	8004758 <HAL_ADC_ConfigChannel+0x128>
 8004756:	2300      	movs	r3, #0
 8004758:	461a      	mov	r2, r3
 800475a:	f7ff fb1b 	bl	8003d94 <LL_ADC_SetOffsetSaturation>
 800475e:	e17b      	b.n	8004a58 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2100      	movs	r1, #0
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff fac8 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 800476c:	4603      	mov	r3, r0
 800476e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <HAL_ADC_ConfigChannel+0x15c>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2100      	movs	r1, #0
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff fabd 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 8004782:	4603      	mov	r3, r0
 8004784:	0e9b      	lsrs	r3, r3, #26
 8004786:	f003 021f 	and.w	r2, r3, #31
 800478a:	e01e      	b.n	80047ca <HAL_ADC_ConfigChannel+0x19a>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2100      	movs	r1, #0
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff fab2 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 8004798:	4603      	mov	r3, r0
 800479a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80047a2:	fa93 f3a3 	rbit	r3, r3
 80047a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80047aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80047b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80047ba:	2320      	movs	r3, #32
 80047bc:	e004      	b.n	80047c8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80047be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80047c2:	fab3 f383 	clz	r3, r3
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d105      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x1b2>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	0e9b      	lsrs	r3, r3, #26
 80047dc:	f003 031f 	and.w	r3, r3, #31
 80047e0:	e018      	b.n	8004814 <HAL_ADC_ConfigChannel+0x1e4>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80047ee:	fa93 f3a3 	rbit	r3, r3
 80047f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80047f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80047fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004806:	2320      	movs	r3, #32
 8004808:	e004      	b.n	8004814 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800480a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800480e:	fab3 f383 	clz	r3, r3
 8004812:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004814:	429a      	cmp	r2, r3
 8004816:	d106      	bne.n	8004826 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2200      	movs	r2, #0
 800481e:	2100      	movs	r1, #0
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff fa81 	bl	8003d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2101      	movs	r1, #1
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff fa65 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 8004832:	4603      	mov	r3, r0
 8004834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10a      	bne.n	8004852 <HAL_ADC_ConfigChannel+0x222>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2101      	movs	r1, #1
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff fa5a 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 8004848:	4603      	mov	r3, r0
 800484a:	0e9b      	lsrs	r3, r3, #26
 800484c:	f003 021f 	and.w	r2, r3, #31
 8004850:	e01e      	b.n	8004890 <HAL_ADC_ConfigChannel+0x260>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2101      	movs	r1, #1
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff fa4f 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 800485e:	4603      	mov	r3, r0
 8004860:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004864:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004868:	fa93 f3a3 	rbit	r3, r3
 800486c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004870:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004874:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004878:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004880:	2320      	movs	r3, #32
 8004882:	e004      	b.n	800488e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004884:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004888:	fab3 f383 	clz	r3, r3
 800488c:	b2db      	uxtb	r3, r3
 800488e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004898:	2b00      	cmp	r3, #0
 800489a:	d105      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x278>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	0e9b      	lsrs	r3, r3, #26
 80048a2:	f003 031f 	and.w	r3, r3, #31
 80048a6:	e018      	b.n	80048da <HAL_ADC_ConfigChannel+0x2aa>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048b4:	fa93 f3a3 	rbit	r3, r3
 80048b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80048bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80048c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80048c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80048cc:	2320      	movs	r3, #32
 80048ce:	e004      	b.n	80048da <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80048d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80048d4:	fab3 f383 	clz	r3, r3
 80048d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80048da:	429a      	cmp	r2, r3
 80048dc:	d106      	bne.n	80048ec <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2200      	movs	r2, #0
 80048e4:	2101      	movs	r1, #1
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff fa1e 	bl	8003d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2102      	movs	r1, #2
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff fa02 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 80048f8:	4603      	mov	r3, r0
 80048fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10a      	bne.n	8004918 <HAL_ADC_ConfigChannel+0x2e8>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2102      	movs	r1, #2
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff f9f7 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 800490e:	4603      	mov	r3, r0
 8004910:	0e9b      	lsrs	r3, r3, #26
 8004912:	f003 021f 	and.w	r2, r3, #31
 8004916:	e01e      	b.n	8004956 <HAL_ADC_ConfigChannel+0x326>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2102      	movs	r1, #2
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff f9ec 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 8004924:	4603      	mov	r3, r0
 8004926:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800492e:	fa93 f3a3 	rbit	r3, r3
 8004932:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004936:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800493a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800493e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004946:	2320      	movs	r3, #32
 8004948:	e004      	b.n	8004954 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800494a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800494e:	fab3 f383 	clz	r3, r3
 8004952:	b2db      	uxtb	r3, r3
 8004954:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800495e:	2b00      	cmp	r3, #0
 8004960:	d105      	bne.n	800496e <HAL_ADC_ConfigChannel+0x33e>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	0e9b      	lsrs	r3, r3, #26
 8004968:	f003 031f 	and.w	r3, r3, #31
 800496c:	e016      	b.n	800499c <HAL_ADC_ConfigChannel+0x36c>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004976:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800497a:	fa93 f3a3 	rbit	r3, r3
 800497e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004980:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004982:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004986:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800498e:	2320      	movs	r3, #32
 8004990:	e004      	b.n	800499c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004992:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004996:	fab3 f383 	clz	r3, r3
 800499a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800499c:	429a      	cmp	r2, r3
 800499e:	d106      	bne.n	80049ae <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2200      	movs	r2, #0
 80049a6:	2102      	movs	r1, #2
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff f9bd 	bl	8003d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2103      	movs	r1, #3
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff f9a1 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 80049ba:	4603      	mov	r3, r0
 80049bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10a      	bne.n	80049da <HAL_ADC_ConfigChannel+0x3aa>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2103      	movs	r1, #3
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff f996 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 80049d0:	4603      	mov	r3, r0
 80049d2:	0e9b      	lsrs	r3, r3, #26
 80049d4:	f003 021f 	and.w	r2, r3, #31
 80049d8:	e017      	b.n	8004a0a <HAL_ADC_ConfigChannel+0x3da>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2103      	movs	r1, #3
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff f98b 	bl	8003cfc <LL_ADC_GetOffsetChannel>
 80049e6:	4603      	mov	r3, r0
 80049e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049ec:	fa93 f3a3 	rbit	r3, r3
 80049f0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80049f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049f4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80049f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80049fc:	2320      	movs	r3, #32
 80049fe:	e003      	b.n	8004a08 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004a00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a02:	fab3 f383 	clz	r3, r3
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d105      	bne.n	8004a22 <HAL_ADC_ConfigChannel+0x3f2>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	0e9b      	lsrs	r3, r3, #26
 8004a1c:	f003 031f 	and.w	r3, r3, #31
 8004a20:	e011      	b.n	8004a46 <HAL_ADC_ConfigChannel+0x416>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a2a:	fa93 f3a3 	rbit	r3, r3
 8004a2e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004a30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a32:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004a34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004a3a:	2320      	movs	r3, #32
 8004a3c:	e003      	b.n	8004a46 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004a3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a40:	fab3 f383 	clz	r3, r3
 8004a44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d106      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	2103      	movs	r1, #3
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff f968 	bl	8003d28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff fad9 	bl	8004014 <LL_ADC_IsEnabled>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f040 813d 	bne.w	8004ce4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	6819      	ldr	r1, [r3, #0]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	461a      	mov	r2, r3
 8004a78:	f7ff fa24 	bl	8003ec4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	4aa2      	ldr	r2, [pc, #648]	@ (8004d0c <HAL_ADC_ConfigChannel+0x6dc>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	f040 812e 	bne.w	8004ce4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10b      	bne.n	8004ab0 <HAL_ADC_ConfigChannel+0x480>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	0e9b      	lsrs	r3, r3, #26
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	f003 031f 	and.w	r3, r3, #31
 8004aa4:	2b09      	cmp	r3, #9
 8004aa6:	bf94      	ite	ls
 8004aa8:	2301      	movls	r3, #1
 8004aaa:	2300      	movhi	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	e019      	b.n	8004ae4 <HAL_ADC_ConfigChannel+0x4b4>
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ab8:	fa93 f3a3 	rbit	r3, r3
 8004abc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004abe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ac0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004ac2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004ac8:	2320      	movs	r3, #32
 8004aca:	e003      	b.n	8004ad4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004acc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ace:	fab3 f383 	clz	r3, r3
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	f003 031f 	and.w	r3, r3, #31
 8004ada:	2b09      	cmp	r3, #9
 8004adc:	bf94      	ite	ls
 8004ade:	2301      	movls	r3, #1
 8004ae0:	2300      	movhi	r3, #0
 8004ae2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d079      	beq.n	8004bdc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d107      	bne.n	8004b04 <HAL_ADC_ConfigChannel+0x4d4>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	0e9b      	lsrs	r3, r3, #26
 8004afa:	3301      	adds	r3, #1
 8004afc:	069b      	lsls	r3, r3, #26
 8004afe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b02:	e015      	b.n	8004b30 <HAL_ADC_ConfigChannel+0x500>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b0c:	fa93 f3a3 	rbit	r3, r3
 8004b10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004b12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b14:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004b1c:	2320      	movs	r3, #32
 8004b1e:	e003      	b.n	8004b28 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004b20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b22:	fab3 f383 	clz	r3, r3
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	3301      	adds	r3, #1
 8004b2a:	069b      	lsls	r3, r3, #26
 8004b2c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d109      	bne.n	8004b50 <HAL_ADC_ConfigChannel+0x520>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	0e9b      	lsrs	r3, r3, #26
 8004b42:	3301      	adds	r3, #1
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	2101      	movs	r1, #1
 8004b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4e:	e017      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x550>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b58:	fa93 f3a3 	rbit	r3, r3
 8004b5c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004b5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b60:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004b62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004b68:	2320      	movs	r3, #32
 8004b6a:	e003      	b.n	8004b74 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004b6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b6e:	fab3 f383 	clz	r3, r3
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	3301      	adds	r3, #1
 8004b76:	f003 031f 	and.w	r3, r3, #31
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b80:	ea42 0103 	orr.w	r1, r2, r3
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10a      	bne.n	8004ba6 <HAL_ADC_ConfigChannel+0x576>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	0e9b      	lsrs	r3, r3, #26
 8004b96:	3301      	adds	r3, #1
 8004b98:	f003 021f 	and.w	r2, r3, #31
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	4413      	add	r3, r2
 8004ba2:	051b      	lsls	r3, r3, #20
 8004ba4:	e018      	b.n	8004bd8 <HAL_ADC_ConfigChannel+0x5a8>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bae:	fa93 f3a3 	rbit	r3, r3
 8004bb2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004bbe:	2320      	movs	r3, #32
 8004bc0:	e003      	b.n	8004bca <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bc4:	fab3 f383 	clz	r3, r3
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	3301      	adds	r3, #1
 8004bcc:	f003 021f 	and.w	r2, r3, #31
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	4413      	add	r3, r2
 8004bd6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bd8:	430b      	orrs	r3, r1
 8004bda:	e07e      	b.n	8004cda <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d107      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x5c8>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	0e9b      	lsrs	r3, r3, #26
 8004bee:	3301      	adds	r3, #1
 8004bf0:	069b      	lsls	r3, r3, #26
 8004bf2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004bf6:	e015      	b.n	8004c24 <HAL_ADC_ConfigChannel+0x5f4>
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c00:	fa93 f3a3 	rbit	r3, r3
 8004c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c08:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004c10:	2320      	movs	r3, #32
 8004c12:	e003      	b.n	8004c1c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c16:	fab3 f383 	clz	r3, r3
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	069b      	lsls	r3, r3, #26
 8004c20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d109      	bne.n	8004c44 <HAL_ADC_ConfigChannel+0x614>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	0e9b      	lsrs	r3, r3, #26
 8004c36:	3301      	adds	r3, #1
 8004c38:	f003 031f 	and.w	r3, r3, #31
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c42:	e017      	b.n	8004c74 <HAL_ADC_ConfigChannel+0x644>
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	fa93 f3a3 	rbit	r3, r3
 8004c50:	61fb      	str	r3, [r7, #28]
  return result;
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004c5c:	2320      	movs	r3, #32
 8004c5e:	e003      	b.n	8004c68 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c62:	fab3 f383 	clz	r3, r3
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	3301      	adds	r3, #1
 8004c6a:	f003 031f 	and.w	r3, r3, #31
 8004c6e:	2101      	movs	r1, #1
 8004c70:	fa01 f303 	lsl.w	r3, r1, r3
 8004c74:	ea42 0103 	orr.w	r1, r2, r3
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10d      	bne.n	8004ca0 <HAL_ADC_ConfigChannel+0x670>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	0e9b      	lsrs	r3, r3, #26
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	f003 021f 	and.w	r2, r3, #31
 8004c90:	4613      	mov	r3, r2
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	4413      	add	r3, r2
 8004c96:	3b1e      	subs	r3, #30
 8004c98:	051b      	lsls	r3, r3, #20
 8004c9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c9e:	e01b      	b.n	8004cd8 <HAL_ADC_ConfigChannel+0x6a8>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	fa93 f3a3 	rbit	r3, r3
 8004cac:	613b      	str	r3, [r7, #16]
  return result;
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004cb8:	2320      	movs	r3, #32
 8004cba:	e003      	b.n	8004cc4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	fab3 f383 	clz	r3, r3
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	f003 021f 	and.w	r2, r3, #31
 8004cca:	4613      	mov	r3, r2
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	4413      	add	r3, r2
 8004cd0:	3b1e      	subs	r3, #30
 8004cd2:	051b      	lsls	r3, r3, #20
 8004cd4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cd8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cde:	4619      	mov	r1, r3
 8004ce0:	f7ff f8c5 	bl	8003e6e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	4b09      	ldr	r3, [pc, #36]	@ (8004d10 <HAL_ADC_ConfigChannel+0x6e0>)
 8004cea:	4013      	ands	r3, r2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80be 	beq.w	8004e6e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cfa:	d004      	beq.n	8004d06 <HAL_ADC_ConfigChannel+0x6d6>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a04      	ldr	r2, [pc, #16]	@ (8004d14 <HAL_ADC_ConfigChannel+0x6e4>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d10a      	bne.n	8004d1c <HAL_ADC_ConfigChannel+0x6ec>
 8004d06:	4b04      	ldr	r3, [pc, #16]	@ (8004d18 <HAL_ADC_ConfigChannel+0x6e8>)
 8004d08:	e009      	b.n	8004d1e <HAL_ADC_ConfigChannel+0x6ee>
 8004d0a:	bf00      	nop
 8004d0c:	407f0000 	.word	0x407f0000
 8004d10:	80080000 	.word	0x80080000
 8004d14:	50000100 	.word	0x50000100
 8004d18:	50000300 	.word	0x50000300
 8004d1c:	4b59      	ldr	r3, [pc, #356]	@ (8004e84 <HAL_ADC_ConfigChannel+0x854>)
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fe ffba 	bl	8003c98 <LL_ADC_GetCommonPathInternalCh>
 8004d24:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a56      	ldr	r2, [pc, #344]	@ (8004e88 <HAL_ADC_ConfigChannel+0x858>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d004      	beq.n	8004d3c <HAL_ADC_ConfigChannel+0x70c>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a55      	ldr	r2, [pc, #340]	@ (8004e8c <HAL_ADC_ConfigChannel+0x85c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d13a      	bne.n	8004db2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004d3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d134      	bne.n	8004db2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d50:	d005      	beq.n	8004d5e <HAL_ADC_ConfigChannel+0x72e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a4e      	ldr	r2, [pc, #312]	@ (8004e90 <HAL_ADC_ConfigChannel+0x860>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	f040 8085 	bne.w	8004e68 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d66:	d004      	beq.n	8004d72 <HAL_ADC_ConfigChannel+0x742>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a49      	ldr	r2, [pc, #292]	@ (8004e94 <HAL_ADC_ConfigChannel+0x864>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d101      	bne.n	8004d76 <HAL_ADC_ConfigChannel+0x746>
 8004d72:	4a49      	ldr	r2, [pc, #292]	@ (8004e98 <HAL_ADC_ConfigChannel+0x868>)
 8004d74:	e000      	b.n	8004d78 <HAL_ADC_ConfigChannel+0x748>
 8004d76:	4a43      	ldr	r2, [pc, #268]	@ (8004e84 <HAL_ADC_ConfigChannel+0x854>)
 8004d78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d80:	4619      	mov	r1, r3
 8004d82:	4610      	mov	r0, r2
 8004d84:	f7fe ff75 	bl	8003c72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d88:	4b44      	ldr	r3, [pc, #272]	@ (8004e9c <HAL_ADC_ConfigChannel+0x86c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	099b      	lsrs	r3, r3, #6
 8004d8e:	4a44      	ldr	r2, [pc, #272]	@ (8004ea0 <HAL_ADC_ConfigChannel+0x870>)
 8004d90:	fba2 2303 	umull	r2, r3, r2, r3
 8004d94:	099b      	lsrs	r3, r3, #6
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	4613      	mov	r3, r2
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004da2:	e002      	b.n	8004daa <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1f9      	bne.n	8004da4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004db0:	e05a      	b.n	8004e68 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a3b      	ldr	r2, [pc, #236]	@ (8004ea4 <HAL_ADC_ConfigChannel+0x874>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d125      	bne.n	8004e08 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004dbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004dc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d11f      	bne.n	8004e08 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a31      	ldr	r2, [pc, #196]	@ (8004e94 <HAL_ADC_ConfigChannel+0x864>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d104      	bne.n	8004ddc <HAL_ADC_ConfigChannel+0x7ac>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a34      	ldr	r2, [pc, #208]	@ (8004ea8 <HAL_ADC_ConfigChannel+0x878>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d047      	beq.n	8004e6c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004de4:	d004      	beq.n	8004df0 <HAL_ADC_ConfigChannel+0x7c0>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a2a      	ldr	r2, [pc, #168]	@ (8004e94 <HAL_ADC_ConfigChannel+0x864>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d101      	bne.n	8004df4 <HAL_ADC_ConfigChannel+0x7c4>
 8004df0:	4a29      	ldr	r2, [pc, #164]	@ (8004e98 <HAL_ADC_ConfigChannel+0x868>)
 8004df2:	e000      	b.n	8004df6 <HAL_ADC_ConfigChannel+0x7c6>
 8004df4:	4a23      	ldr	r2, [pc, #140]	@ (8004e84 <HAL_ADC_ConfigChannel+0x854>)
 8004df6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004dfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004dfe:	4619      	mov	r1, r3
 8004e00:	4610      	mov	r0, r2
 8004e02:	f7fe ff36 	bl	8003c72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e06:	e031      	b.n	8004e6c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a27      	ldr	r2, [pc, #156]	@ (8004eac <HAL_ADC_ConfigChannel+0x87c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d12d      	bne.n	8004e6e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d127      	bne.n	8004e6e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a1c      	ldr	r2, [pc, #112]	@ (8004e94 <HAL_ADC_ConfigChannel+0x864>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d022      	beq.n	8004e6e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e30:	d004      	beq.n	8004e3c <HAL_ADC_ConfigChannel+0x80c>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a17      	ldr	r2, [pc, #92]	@ (8004e94 <HAL_ADC_ConfigChannel+0x864>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d101      	bne.n	8004e40 <HAL_ADC_ConfigChannel+0x810>
 8004e3c:	4a16      	ldr	r2, [pc, #88]	@ (8004e98 <HAL_ADC_ConfigChannel+0x868>)
 8004e3e:	e000      	b.n	8004e42 <HAL_ADC_ConfigChannel+0x812>
 8004e40:	4a10      	ldr	r2, [pc, #64]	@ (8004e84 <HAL_ADC_ConfigChannel+0x854>)
 8004e42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e46:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	f7fe ff10 	bl	8003c72 <LL_ADC_SetCommonPathInternalCh>
 8004e52:	e00c      	b.n	8004e6e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e58:	f043 0220 	orr.w	r2, r3, #32
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004e66:	e002      	b.n	8004e6e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e68:	bf00      	nop
 8004e6a:	e000      	b.n	8004e6e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004e76:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	37d8      	adds	r7, #216	@ 0xd8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	50000700 	.word	0x50000700
 8004e88:	c3210000 	.word	0xc3210000
 8004e8c:	90c00010 	.word	0x90c00010
 8004e90:	50000600 	.word	0x50000600
 8004e94:	50000100 	.word	0x50000100
 8004e98:	50000300 	.word	0x50000300
 8004e9c:	20000164 	.word	0x20000164
 8004ea0:	053e2d63 	.word	0x053e2d63
 8004ea4:	c7520000 	.word	0xc7520000
 8004ea8:	50000500 	.word	0x50000500
 8004eac:	cb840000 	.word	0xcb840000

08004eb0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7ff f8a7 	bl	8004014 <LL_ADC_IsEnabled>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d176      	bne.n	8004fba <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	4b3c      	ldr	r3, [pc, #240]	@ (8004fc4 <ADC_Enable+0x114>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00d      	beq.n	8004ef6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ede:	f043 0210 	orr.w	r2, r3, #16
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eea:	f043 0201 	orr.w	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e062      	b.n	8004fbc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7ff f862 	bl	8003fc4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f08:	d004      	beq.n	8004f14 <ADC_Enable+0x64>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a2e      	ldr	r2, [pc, #184]	@ (8004fc8 <ADC_Enable+0x118>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d101      	bne.n	8004f18 <ADC_Enable+0x68>
 8004f14:	4b2d      	ldr	r3, [pc, #180]	@ (8004fcc <ADC_Enable+0x11c>)
 8004f16:	e000      	b.n	8004f1a <ADC_Enable+0x6a>
 8004f18:	4b2d      	ldr	r3, [pc, #180]	@ (8004fd0 <ADC_Enable+0x120>)
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fe febc 	bl	8003c98 <LL_ADC_GetCommonPathInternalCh>
 8004f20:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004f22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d013      	beq.n	8004f52 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8004fd4 <ADC_Enable+0x124>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	099b      	lsrs	r3, r3, #6
 8004f30:	4a29      	ldr	r2, [pc, #164]	@ (8004fd8 <ADC_Enable+0x128>)
 8004f32:	fba2 2303 	umull	r2, r3, r2, r3
 8004f36:	099b      	lsrs	r3, r3, #6
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	4413      	add	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004f44:	e002      	b.n	8004f4c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f9      	bne.n	8004f46 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004f52:	f7fe fe6f 	bl	8003c34 <HAL_GetTick>
 8004f56:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f58:	e028      	b.n	8004fac <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff f858 	bl	8004014 <LL_ADC_IsEnabled>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d104      	bne.n	8004f74 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff f828 	bl	8003fc4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f74:	f7fe fe5e 	bl	8003c34 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d914      	bls.n	8004fac <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d00d      	beq.n	8004fac <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f94:	f043 0210 	orr.w	r2, r3, #16
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fa0:	f043 0201 	orr.w	r2, r3, #1
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e007      	b.n	8004fbc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d1cf      	bne.n	8004f5a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	8000003f 	.word	0x8000003f
 8004fc8:	50000100 	.word	0x50000100
 8004fcc:	50000300 	.word	0x50000300
 8004fd0:	50000700 	.word	0x50000700
 8004fd4:	20000164 	.word	0x20000164
 8004fd8:	053e2d63 	.word	0x053e2d63

08004fdc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7ff f826 	bl	800403a <LL_ADC_IsDisableOngoing>
 8004fee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff f80d 	bl	8004014 <LL_ADC_IsEnabled>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d047      	beq.n	8005090 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d144      	bne.n	8005090 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f003 030d 	and.w	r3, r3, #13
 8005010:	2b01      	cmp	r3, #1
 8005012:	d10c      	bne.n	800502e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4618      	mov	r0, r3
 800501a:	f7fe ffe7 	bl	8003fec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2203      	movs	r2, #3
 8005024:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005026:	f7fe fe05 	bl	8003c34 <HAL_GetTick>
 800502a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800502c:	e029      	b.n	8005082 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005032:	f043 0210 	orr.w	r2, r3, #16
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800503e:	f043 0201 	orr.w	r2, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e023      	b.n	8005092 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800504a:	f7fe fdf3 	bl	8003c34 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d914      	bls.n	8005082 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00d      	beq.n	8005082 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800506a:	f043 0210 	orr.w	r2, r3, #16
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005076:	f043 0201 	orr.w	r2, r3, #1
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e007      	b.n	8005092 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1dc      	bne.n	800504a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d14b      	bne.n	800514c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0308 	and.w	r3, r3, #8
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d021      	beq.n	8005112 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fe fe8c 	bl	8003df0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d032      	beq.n	8005144 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d12b      	bne.n	8005144 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d11f      	bne.n	8005144 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005108:	f043 0201 	orr.w	r2, r3, #1
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005110:	e018      	b.n	8005144 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d111      	bne.n	8005144 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005124:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005130:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d105      	bne.n	8005144 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800513c:	f043 0201 	orr.w	r2, r3, #1
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f7ff fa55 	bl	80045f4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800514a:	e00e      	b.n	800516a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005150:	f003 0310 	and.w	r3, r3, #16
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f7ff fa5f 	bl	800461c <HAL_ADC_ErrorCallback>
}
 800515e:	e004      	b.n	800516a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	4798      	blx	r3
}
 800516a:	bf00      	nop
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b084      	sub	sp, #16
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f7ff fa41 	bl	8004608 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005186:	bf00      	nop
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051ac:	f043 0204 	orr.w	r2, r3, #4
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f7ff fa31 	bl	800461c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80051ba:	bf00      	nop
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <LL_ADC_IsEnabled>:
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d101      	bne.n	80051da <LL_ADC_IsEnabled+0x18>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <LL_ADC_IsEnabled+0x1a>
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <LL_ADC_StartCalibration>:
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80051fa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005204:	4313      	orrs	r3, r2
 8005206:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	609a      	str	r2, [r3, #8]
}
 800520e:	bf00      	nop
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <LL_ADC_IsCalibrationOnGoing>:
{
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800522a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800522e:	d101      	bne.n	8005234 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005230:	2301      	movs	r3, #1
 8005232:	e000      	b.n	8005236 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <LL_ADC_REG_IsConversionOngoing>:
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b04      	cmp	r3, #4
 8005254:	d101      	bne.n	800525a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005256:	2301      	movs	r3, #1
 8005258:	e000      	b.n	800525c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005272:	2300      	movs	r3, #0
 8005274:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800527c:	2b01      	cmp	r3, #1
 800527e:	d101      	bne.n	8005284 <HAL_ADCEx_Calibration_Start+0x1c>
 8005280:	2302      	movs	r3, #2
 8005282:	e04d      	b.n	8005320 <HAL_ADCEx_Calibration_Start+0xb8>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7ff fea5 	bl	8004fdc <ADC_Disable>
 8005292:	4603      	mov	r3, r0
 8005294:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005296:	7bfb      	ldrb	r3, [r7, #15]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d136      	bne.n	800530a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80052a4:	f023 0302 	bic.w	r3, r3, #2
 80052a8:	f043 0202 	orr.w	r2, r3, #2
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6839      	ldr	r1, [r7, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7ff ff96 	bl	80051e8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80052bc:	e014      	b.n	80052e8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	3301      	adds	r3, #1
 80052c2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	4a18      	ldr	r2, [pc, #96]	@ (8005328 <HAL_ADCEx_Calibration_Start+0xc0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d90d      	bls.n	80052e8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052d0:	f023 0312 	bic.w	r3, r3, #18
 80052d4:	f043 0210 	orr.w	r2, r3, #16
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e01b      	b.n	8005320 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7ff ff94 	bl	800521a <LL_ADC_IsCalibrationOnGoing>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1e2      	bne.n	80052be <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052fc:	f023 0303 	bic.w	r3, r3, #3
 8005300:	f043 0201 	orr.w	r2, r3, #1
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005308:	e005      	b.n	8005316 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800530e:	f043 0210 	orr.w	r2, r3, #16
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800531e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	0004de01 	.word	0x0004de01

0800532c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800532c:	b590      	push	{r4, r7, lr}
 800532e:	b0a1      	sub	sp, #132	@ 0x84
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005342:	2b01      	cmp	r3, #1
 8005344:	d101      	bne.n	800534a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005346:	2302      	movs	r3, #2
 8005348:	e0e7      	b.n	800551a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005352:	2300      	movs	r3, #0
 8005354:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005356:	2300      	movs	r3, #0
 8005358:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005362:	d102      	bne.n	800536a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005364:	4b6f      	ldr	r3, [pc, #444]	@ (8005524 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005366:	60bb      	str	r3, [r7, #8]
 8005368:	e009      	b.n	800537e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a6e      	ldr	r2, [pc, #440]	@ (8005528 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d102      	bne.n	800537a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005374:	4b6d      	ldr	r3, [pc, #436]	@ (800552c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005376:	60bb      	str	r3, [r7, #8]
 8005378:	e001      	b.n	800537e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800537a:	2300      	movs	r3, #0
 800537c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10b      	bne.n	800539c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005388:	f043 0220 	orr.w	r2, r3, #32
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e0be      	b.n	800551a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff ff4f 	bl	8005242 <LL_ADC_REG_IsConversionOngoing>
 80053a4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7ff ff49 	bl	8005242 <LL_ADC_REG_IsConversionOngoing>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f040 80a0 	bne.w	80054f8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80053b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f040 809c 	bne.w	80054f8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053c8:	d004      	beq.n	80053d4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a55      	ldr	r2, [pc, #340]	@ (8005524 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d101      	bne.n	80053d8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80053d4:	4b56      	ldr	r3, [pc, #344]	@ (8005530 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80053d6:	e000      	b.n	80053da <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80053d8:	4b56      	ldr	r3, [pc, #344]	@ (8005534 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80053da:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d04b      	beq.n	800547c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80053e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	6859      	ldr	r1, [r3, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80053f6:	035b      	lsls	r3, r3, #13
 80053f8:	430b      	orrs	r3, r1
 80053fa:	431a      	orrs	r2, r3
 80053fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005408:	d004      	beq.n	8005414 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a45      	ldr	r2, [pc, #276]	@ (8005524 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d10f      	bne.n	8005434 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005414:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005418:	f7ff fed3 	bl	80051c2 <LL_ADC_IsEnabled>
 800541c:	4604      	mov	r4, r0
 800541e:	4841      	ldr	r0, [pc, #260]	@ (8005524 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005420:	f7ff fecf 	bl	80051c2 <LL_ADC_IsEnabled>
 8005424:	4603      	mov	r3, r0
 8005426:	4323      	orrs	r3, r4
 8005428:	2b00      	cmp	r3, #0
 800542a:	bf0c      	ite	eq
 800542c:	2301      	moveq	r3, #1
 800542e:	2300      	movne	r3, #0
 8005430:	b2db      	uxtb	r3, r3
 8005432:	e012      	b.n	800545a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005434:	483c      	ldr	r0, [pc, #240]	@ (8005528 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005436:	f7ff fec4 	bl	80051c2 <LL_ADC_IsEnabled>
 800543a:	4604      	mov	r4, r0
 800543c:	483b      	ldr	r0, [pc, #236]	@ (800552c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800543e:	f7ff fec0 	bl	80051c2 <LL_ADC_IsEnabled>
 8005442:	4603      	mov	r3, r0
 8005444:	431c      	orrs	r4, r3
 8005446:	483c      	ldr	r0, [pc, #240]	@ (8005538 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005448:	f7ff febb 	bl	80051c2 <LL_ADC_IsEnabled>
 800544c:	4603      	mov	r3, r0
 800544e:	4323      	orrs	r3, r4
 8005450:	2b00      	cmp	r3, #0
 8005452:	bf0c      	ite	eq
 8005454:	2301      	moveq	r3, #1
 8005456:	2300      	movne	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d056      	beq.n	800550c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800545e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005466:	f023 030f 	bic.w	r3, r3, #15
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	6811      	ldr	r1, [r2, #0]
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	6892      	ldr	r2, [r2, #8]
 8005472:	430a      	orrs	r2, r1
 8005474:	431a      	orrs	r2, r3
 8005476:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005478:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800547a:	e047      	b.n	800550c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800547c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005484:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005486:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005490:	d004      	beq.n	800549c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a23      	ldr	r2, [pc, #140]	@ (8005524 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d10f      	bne.n	80054bc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800549c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80054a0:	f7ff fe8f 	bl	80051c2 <LL_ADC_IsEnabled>
 80054a4:	4604      	mov	r4, r0
 80054a6:	481f      	ldr	r0, [pc, #124]	@ (8005524 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80054a8:	f7ff fe8b 	bl	80051c2 <LL_ADC_IsEnabled>
 80054ac:	4603      	mov	r3, r0
 80054ae:	4323      	orrs	r3, r4
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	bf0c      	ite	eq
 80054b4:	2301      	moveq	r3, #1
 80054b6:	2300      	movne	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	e012      	b.n	80054e2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80054bc:	481a      	ldr	r0, [pc, #104]	@ (8005528 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80054be:	f7ff fe80 	bl	80051c2 <LL_ADC_IsEnabled>
 80054c2:	4604      	mov	r4, r0
 80054c4:	4819      	ldr	r0, [pc, #100]	@ (800552c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80054c6:	f7ff fe7c 	bl	80051c2 <LL_ADC_IsEnabled>
 80054ca:	4603      	mov	r3, r0
 80054cc:	431c      	orrs	r4, r3
 80054ce:	481a      	ldr	r0, [pc, #104]	@ (8005538 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80054d0:	f7ff fe77 	bl	80051c2 <LL_ADC_IsEnabled>
 80054d4:	4603      	mov	r3, r0
 80054d6:	4323      	orrs	r3, r4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	bf0c      	ite	eq
 80054dc:	2301      	moveq	r3, #1
 80054de:	2300      	movne	r3, #0
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d012      	beq.n	800550c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80054e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80054ee:	f023 030f 	bic.w	r3, r3, #15
 80054f2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80054f4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80054f6:	e009      	b.n	800550c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054fc:	f043 0220 	orr.w	r2, r3, #32
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800550a:	e000      	b.n	800550e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800550c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005516:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800551a:	4618      	mov	r0, r3
 800551c:	3784      	adds	r7, #132	@ 0x84
 800551e:	46bd      	mov	sp, r7
 8005520:	bd90      	pop	{r4, r7, pc}
 8005522:	bf00      	nop
 8005524:	50000100 	.word	0x50000100
 8005528:	50000400 	.word	0x50000400
 800552c:	50000500 	.word	0x50000500
 8005530:	50000300 	.word	0x50000300
 8005534:	50000700 	.word	0x50000700
 8005538:	50000600 	.word	0x50000600

0800553c <__NVIC_SetPriorityGrouping>:
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f003 0307 	and.w	r3, r3, #7
 800554a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800554c:	4b0c      	ldr	r3, [pc, #48]	@ (8005580 <__NVIC_SetPriorityGrouping+0x44>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005558:	4013      	ands	r3, r2
 800555a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005564:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800556c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800556e:	4a04      	ldr	r2, [pc, #16]	@ (8005580 <__NVIC_SetPriorityGrouping+0x44>)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	60d3      	str	r3, [r2, #12]
}
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	e000ed00 	.word	0xe000ed00

08005584 <__NVIC_GetPriorityGrouping>:
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005588:	4b04      	ldr	r3, [pc, #16]	@ (800559c <__NVIC_GetPriorityGrouping+0x18>)
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	0a1b      	lsrs	r3, r3, #8
 800558e:	f003 0307 	and.w	r3, r3, #7
}
 8005592:	4618      	mov	r0, r3
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	e000ed00 	.word	0xe000ed00

080055a0 <__NVIC_EnableIRQ>:
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	4603      	mov	r3, r0
 80055a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	db0b      	blt.n	80055ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055b2:	79fb      	ldrb	r3, [r7, #7]
 80055b4:	f003 021f 	and.w	r2, r3, #31
 80055b8:	4907      	ldr	r1, [pc, #28]	@ (80055d8 <__NVIC_EnableIRQ+0x38>)
 80055ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055be:	095b      	lsrs	r3, r3, #5
 80055c0:	2001      	movs	r0, #1
 80055c2:	fa00 f202 	lsl.w	r2, r0, r2
 80055c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	e000e100 	.word	0xe000e100

080055dc <__NVIC_SetPriority>:
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	4603      	mov	r3, r0
 80055e4:	6039      	str	r1, [r7, #0]
 80055e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	db0a      	blt.n	8005606 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	490c      	ldr	r1, [pc, #48]	@ (8005628 <__NVIC_SetPriority+0x4c>)
 80055f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055fa:	0112      	lsls	r2, r2, #4
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	440b      	add	r3, r1
 8005600:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005604:	e00a      	b.n	800561c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	b2da      	uxtb	r2, r3
 800560a:	4908      	ldr	r1, [pc, #32]	@ (800562c <__NVIC_SetPriority+0x50>)
 800560c:	79fb      	ldrb	r3, [r7, #7]
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	3b04      	subs	r3, #4
 8005614:	0112      	lsls	r2, r2, #4
 8005616:	b2d2      	uxtb	r2, r2
 8005618:	440b      	add	r3, r1
 800561a:	761a      	strb	r2, [r3, #24]
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	e000e100 	.word	0xe000e100
 800562c:	e000ed00 	.word	0xe000ed00

08005630 <NVIC_EncodePriority>:
{
 8005630:	b480      	push	{r7}
 8005632:	b089      	sub	sp, #36	@ 0x24
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f003 0307 	and.w	r3, r3, #7
 8005642:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	f1c3 0307 	rsb	r3, r3, #7
 800564a:	2b04      	cmp	r3, #4
 800564c:	bf28      	it	cs
 800564e:	2304      	movcs	r3, #4
 8005650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	3304      	adds	r3, #4
 8005656:	2b06      	cmp	r3, #6
 8005658:	d902      	bls.n	8005660 <NVIC_EncodePriority+0x30>
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	3b03      	subs	r3, #3
 800565e:	e000      	b.n	8005662 <NVIC_EncodePriority+0x32>
 8005660:	2300      	movs	r3, #0
 8005662:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005664:	f04f 32ff 	mov.w	r2, #4294967295
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	fa02 f303 	lsl.w	r3, r2, r3
 800566e:	43da      	mvns	r2, r3
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	401a      	ands	r2, r3
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005678:	f04f 31ff 	mov.w	r1, #4294967295
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	fa01 f303 	lsl.w	r3, r1, r3
 8005682:	43d9      	mvns	r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005688:	4313      	orrs	r3, r2
}
 800568a:	4618      	mov	r0, r3
 800568c:	3724      	adds	r7, #36	@ 0x24
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
	...

08005698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056a8:	d301      	bcc.n	80056ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056aa:	2301      	movs	r3, #1
 80056ac:	e00f      	b.n	80056ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056ae:	4a0a      	ldr	r2, [pc, #40]	@ (80056d8 <SysTick_Config+0x40>)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3b01      	subs	r3, #1
 80056b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056b6:	210f      	movs	r1, #15
 80056b8:	f04f 30ff 	mov.w	r0, #4294967295
 80056bc:	f7ff ff8e 	bl	80055dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056c0:	4b05      	ldr	r3, [pc, #20]	@ (80056d8 <SysTick_Config+0x40>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056c6:	4b04      	ldr	r3, [pc, #16]	@ (80056d8 <SysTick_Config+0x40>)
 80056c8:	2207      	movs	r2, #7
 80056ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	e000e010 	.word	0xe000e010

080056dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff ff29 	bl	800553c <__NVIC_SetPriorityGrouping>
}
 80056ea:	bf00      	nop
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b086      	sub	sp, #24
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	4603      	mov	r3, r0
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	607a      	str	r2, [r7, #4]
 80056fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005700:	f7ff ff40 	bl	8005584 <__NVIC_GetPriorityGrouping>
 8005704:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	6978      	ldr	r0, [r7, #20]
 800570c:	f7ff ff90 	bl	8005630 <NVIC_EncodePriority>
 8005710:	4602      	mov	r2, r0
 8005712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005716:	4611      	mov	r1, r2
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff ff5f 	bl	80055dc <__NVIC_SetPriority>
}
 800571e:	bf00      	nop
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	4603      	mov	r3, r0
 800572e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff ff33 	bl	80055a0 <__NVIC_EnableIRQ>
}
 800573a:	bf00      	nop
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b082      	sub	sp, #8
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7ff ffa4 	bl	8005698 <SysTick_Config>
 8005750:	4603      	mov	r3, r0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
	...

0800575c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e08d      	b.n	800588a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	4b47      	ldr	r3, [pc, #284]	@ (8005894 <HAL_DMA_Init+0x138>)
 8005776:	429a      	cmp	r2, r3
 8005778:	d80f      	bhi.n	800579a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	4b45      	ldr	r3, [pc, #276]	@ (8005898 <HAL_DMA_Init+0x13c>)
 8005782:	4413      	add	r3, r2
 8005784:	4a45      	ldr	r2, [pc, #276]	@ (800589c <HAL_DMA_Init+0x140>)
 8005786:	fba2 2303 	umull	r2, r3, r2, r3
 800578a:	091b      	lsrs	r3, r3, #4
 800578c:	009a      	lsls	r2, r3, #2
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a42      	ldr	r2, [pc, #264]	@ (80058a0 <HAL_DMA_Init+0x144>)
 8005796:	641a      	str	r2, [r3, #64]	@ 0x40
 8005798:	e00e      	b.n	80057b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	4b40      	ldr	r3, [pc, #256]	@ (80058a4 <HAL_DMA_Init+0x148>)
 80057a2:	4413      	add	r3, r2
 80057a4:	4a3d      	ldr	r2, [pc, #244]	@ (800589c <HAL_DMA_Init+0x140>)
 80057a6:	fba2 2303 	umull	r2, r3, r2, r3
 80057aa:	091b      	lsrs	r3, r3, #4
 80057ac:	009a      	lsls	r2, r3, #2
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a3c      	ldr	r2, [pc, #240]	@ (80058a8 <HAL_DMA_Init+0x14c>)
 80057b6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80057ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80057dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fa76 	bl	8005cfc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005818:	d102      	bne.n	8005820 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005834:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d010      	beq.n	8005860 <HAL_DMA_Init+0x104>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	2b04      	cmp	r3, #4
 8005844:	d80c      	bhi.n	8005860 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fa96 	bl	8005d78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800585c:	605a      	str	r2, [r3, #4]
 800585e:	e008      	b.n	8005872 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	40020407 	.word	0x40020407
 8005898:	bffdfff8 	.word	0xbffdfff8
 800589c:	cccccccd 	.word	0xcccccccd
 80058a0:	40020000 	.word	0x40020000
 80058a4:	bffdfbf8 	.word	0xbffdfbf8
 80058a8:	40020400 	.word	0x40020400

080058ac <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d101      	bne.n	80058cc <HAL_DMA_Start_IT+0x20>
 80058c8:	2302      	movs	r3, #2
 80058ca:	e066      	b.n	800599a <HAL_DMA_Start_IT+0xee>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d155      	bne.n	800598c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0201 	bic.w	r2, r2, #1
 80058fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	68b9      	ldr	r1, [r7, #8]
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 f9bb 	bl	8005c80 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590e:	2b00      	cmp	r3, #0
 8005910:	d008      	beq.n	8005924 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f042 020e 	orr.w	r2, r2, #14
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	e00f      	b.n	8005944 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0204 	bic.w	r2, r2, #4
 8005932:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 020a 	orr.w	r2, r2, #10
 8005942:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d007      	beq.n	8005962 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800595c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005960:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005966:	2b00      	cmp	r3, #0
 8005968:	d007      	beq.n	800597a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005974:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005978:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f042 0201 	orr.w	r2, r2, #1
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	e005      	b.n	8005998 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005994:	2302      	movs	r3, #2
 8005996:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005998:	7dfb      	ldrb	r3, [r7, #23]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b085      	sub	sp, #20
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d005      	beq.n	80059c6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2204      	movs	r2, #4
 80059be:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	73fb      	strb	r3, [r7, #15]
 80059c4:	e037      	b.n	8005a36 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 020e 	bic.w	r2, r2, #14
 80059d4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059e4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 0201 	bic.w	r2, r2, #1
 80059f4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059fa:	f003 021f 	and.w	r2, r3, #31
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a02:	2101      	movs	r1, #1
 8005a04:	fa01 f202 	lsl.w	r2, r1, r2
 8005a08:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005a12:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00c      	beq.n	8005a36 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a2a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005a34:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d00d      	beq.n	8005a88 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2204      	movs	r2, #4
 8005a70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	73fb      	strb	r3, [r7, #15]
 8005a86:	e047      	b.n	8005b18 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 020e 	bic.w	r2, r2, #14
 8005a96:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 0201 	bic.w	r2, r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ab2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ab6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005abc:	f003 021f 	and.w	r2, r3, #31
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8005aca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ad4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00c      	beq.n	8005af8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ae8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005aec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005af6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	4798      	blx	r3
    }
  }
  return status;
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b084      	sub	sp, #16
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b3e:	f003 031f 	and.w	r3, r3, #31
 8005b42:	2204      	movs	r2, #4
 8005b44:	409a      	lsls	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d026      	beq.n	8005b9c <HAL_DMA_IRQHandler+0x7a>
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d021      	beq.n	8005b9c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d107      	bne.n	8005b76 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0204 	bic.w	r2, r2, #4
 8005b74:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7a:	f003 021f 	and.w	r2, r3, #31
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b82:	2104      	movs	r1, #4
 8005b84:	fa01 f202 	lsl.w	r2, r1, r2
 8005b88:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d071      	beq.n	8005c76 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005b9a:	e06c      	b.n	8005c76 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ba0:	f003 031f 	and.w	r3, r3, #31
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	409a      	lsls	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4013      	ands	r3, r2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d02e      	beq.n	8005c0e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d029      	beq.n	8005c0e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0320 	and.w	r3, r3, #32
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10b      	bne.n	8005be0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 020a 	bic.w	r2, r2, #10
 8005bd6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be4:	f003 021f 	and.w	r2, r3, #31
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bec:	2102      	movs	r1, #2
 8005bee:	fa01 f202 	lsl.w	r2, r1, r2
 8005bf2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d038      	beq.n	8005c76 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005c0c:	e033      	b.n	8005c76 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c12:	f003 031f 	and.w	r3, r3, #31
 8005c16:	2208      	movs	r2, #8
 8005c18:	409a      	lsls	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d02a      	beq.n	8005c78 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f003 0308 	and.w	r3, r3, #8
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d025      	beq.n	8005c78 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 020e 	bic.w	r2, r2, #14
 8005c3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c40:	f003 021f 	and.w	r2, r3, #31
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c48:	2101      	movs	r1, #1
 8005c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8005c4e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d004      	beq.n	8005c78 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005c76:	bf00      	nop
 8005c78:	bf00      	nop
}
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c96:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d004      	beq.n	8005caa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005ca8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cae:	f003 021f 	and.w	r2, r3, #31
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8005cbc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	2b10      	cmp	r3, #16
 8005ccc:	d108      	bne.n	8005ce0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005cde:	e007      	b.n	8005cf0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	60da      	str	r2, [r3, #12]
}
 8005cf0:	bf00      	nop
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	4b16      	ldr	r3, [pc, #88]	@ (8005d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d802      	bhi.n	8005d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005d10:	4b15      	ldr	r3, [pc, #84]	@ (8005d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005d12:	617b      	str	r3, [r7, #20]
 8005d14:	e001      	b.n	8005d1a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005d16:	4b15      	ldr	r3, [pc, #84]	@ (8005d6c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005d18:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	3b08      	subs	r3, #8
 8005d26:	4a12      	ldr	r2, [pc, #72]	@ (8005d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005d28:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2c:	091b      	lsrs	r3, r3, #4
 8005d2e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d34:	089b      	lsrs	r3, r3, #2
 8005d36:	009a      	lsls	r2, r3, #2
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a0b      	ldr	r2, [pc, #44]	@ (8005d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005d46:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f003 031f 	and.w	r3, r3, #31
 8005d4e:	2201      	movs	r2, #1
 8005d50:	409a      	lsls	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005d56:	bf00      	nop
 8005d58:	371c      	adds	r7, #28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	40020407 	.word	0x40020407
 8005d68:	40020800 	.word	0x40020800
 8005d6c:	40020820 	.word	0x40020820
 8005d70:	cccccccd 	.word	0xcccccccd
 8005d74:	40020880 	.word	0x40020880

08005d78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8005db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005d8c:	4413      	add	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	461a      	mov	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a08      	ldr	r2, [pc, #32]	@ (8005dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005d9a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	f003 031f 	and.w	r3, r3, #31
 8005da4:	2201      	movs	r2, #1
 8005da6:	409a      	lsls	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005dac:	bf00      	nop
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	1000823f 	.word	0x1000823f
 8005dbc:	40020940 	.word	0x40020940

08005dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005dce:	e15a      	b.n	8006086 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ddc:	4013      	ands	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 814c 	beq.w	8006080 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f003 0303 	and.w	r3, r3, #3
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d005      	beq.n	8005e00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d130      	bne.n	8005e62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	2203      	movs	r2, #3
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	43db      	mvns	r3, r3
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	4013      	ands	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	fa02 f303 	lsl.w	r3, r2, r3
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e36:	2201      	movs	r2, #1
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3e:	43db      	mvns	r3, r3
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4013      	ands	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	091b      	lsrs	r3, r3, #4
 8005e4c:	f003 0201 	and.w	r2, r3, #1
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	fa02 f303 	lsl.w	r3, r2, r3
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d017      	beq.n	8005e9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	2203      	movs	r2, #3
 8005e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7e:	43db      	mvns	r3, r3
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	4013      	ands	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	689a      	ldr	r2, [r3, #8]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d123      	bne.n	8005ef2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	08da      	lsrs	r2, r3, #3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	3208      	adds	r2, #8
 8005eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	220f      	movs	r2, #15
 8005ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec6:	43db      	mvns	r3, r3
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	691a      	ldr	r2, [r3, #16]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f003 0307 	and.w	r3, r3, #7
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	fa02 f303 	lsl.w	r3, r2, r3
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	08da      	lsrs	r2, r3, #3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	3208      	adds	r2, #8
 8005eec:	6939      	ldr	r1, [r7, #16]
 8005eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	2203      	movs	r2, #3
 8005efe:	fa02 f303 	lsl.w	r3, r2, r3
 8005f02:	43db      	mvns	r3, r3
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	4013      	ands	r3, r2
 8005f08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f003 0203 	and.w	r2, r3, #3
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	005b      	lsls	r3, r3, #1
 8005f16:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 80a6 	beq.w	8006080 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f34:	4b5b      	ldr	r3, [pc, #364]	@ (80060a4 <HAL_GPIO_Init+0x2e4>)
 8005f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f38:	4a5a      	ldr	r2, [pc, #360]	@ (80060a4 <HAL_GPIO_Init+0x2e4>)
 8005f3a:	f043 0301 	orr.w	r3, r3, #1
 8005f3e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005f40:	4b58      	ldr	r3, [pc, #352]	@ (80060a4 <HAL_GPIO_Init+0x2e4>)
 8005f42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	60bb      	str	r3, [r7, #8]
 8005f4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f4c:	4a56      	ldr	r2, [pc, #344]	@ (80060a8 <HAL_GPIO_Init+0x2e8>)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	089b      	lsrs	r3, r3, #2
 8005f52:	3302      	adds	r3, #2
 8005f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f003 0303 	and.w	r3, r3, #3
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	220f      	movs	r2, #15
 8005f64:	fa02 f303 	lsl.w	r3, r2, r3
 8005f68:	43db      	mvns	r3, r3
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005f76:	d01f      	beq.n	8005fb8 <HAL_GPIO_Init+0x1f8>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a4c      	ldr	r2, [pc, #304]	@ (80060ac <HAL_GPIO_Init+0x2ec>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d019      	beq.n	8005fb4 <HAL_GPIO_Init+0x1f4>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a4b      	ldr	r2, [pc, #300]	@ (80060b0 <HAL_GPIO_Init+0x2f0>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d013      	beq.n	8005fb0 <HAL_GPIO_Init+0x1f0>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a4a      	ldr	r2, [pc, #296]	@ (80060b4 <HAL_GPIO_Init+0x2f4>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d00d      	beq.n	8005fac <HAL_GPIO_Init+0x1ec>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a49      	ldr	r2, [pc, #292]	@ (80060b8 <HAL_GPIO_Init+0x2f8>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d007      	beq.n	8005fa8 <HAL_GPIO_Init+0x1e8>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a48      	ldr	r2, [pc, #288]	@ (80060bc <HAL_GPIO_Init+0x2fc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d101      	bne.n	8005fa4 <HAL_GPIO_Init+0x1e4>
 8005fa0:	2305      	movs	r3, #5
 8005fa2:	e00a      	b.n	8005fba <HAL_GPIO_Init+0x1fa>
 8005fa4:	2306      	movs	r3, #6
 8005fa6:	e008      	b.n	8005fba <HAL_GPIO_Init+0x1fa>
 8005fa8:	2304      	movs	r3, #4
 8005faa:	e006      	b.n	8005fba <HAL_GPIO_Init+0x1fa>
 8005fac:	2303      	movs	r3, #3
 8005fae:	e004      	b.n	8005fba <HAL_GPIO_Init+0x1fa>
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	e002      	b.n	8005fba <HAL_GPIO_Init+0x1fa>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e000      	b.n	8005fba <HAL_GPIO_Init+0x1fa>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	f002 0203 	and.w	r2, r2, #3
 8005fc0:	0092      	lsls	r2, r2, #2
 8005fc2:	4093      	lsls	r3, r2
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fca:	4937      	ldr	r1, [pc, #220]	@ (80060a8 <HAL_GPIO_Init+0x2e8>)
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	089b      	lsrs	r3, r3, #2
 8005fd0:	3302      	adds	r3, #2
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005fd8:	4b39      	ldr	r3, [pc, #228]	@ (80060c0 <HAL_GPIO_Init+0x300>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	43db      	mvns	r3, r3
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005ffc:	4a30      	ldr	r2, [pc, #192]	@ (80060c0 <HAL_GPIO_Init+0x300>)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006002:	4b2f      	ldr	r3, [pc, #188]	@ (80060c0 <HAL_GPIO_Init+0x300>)
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	43db      	mvns	r3, r3
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	4013      	ands	r3, r2
 8006010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4313      	orrs	r3, r2
 8006024:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006026:	4a26      	ldr	r2, [pc, #152]	@ (80060c0 <HAL_GPIO_Init+0x300>)
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800602c:	4b24      	ldr	r3, [pc, #144]	@ (80060c0 <HAL_GPIO_Init+0x300>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	43db      	mvns	r3, r3
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4013      	ands	r3, r2
 800603a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d003      	beq.n	8006050 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4313      	orrs	r3, r2
 800604e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006050:	4a1b      	ldr	r2, [pc, #108]	@ (80060c0 <HAL_GPIO_Init+0x300>)
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006056:	4b1a      	ldr	r3, [pc, #104]	@ (80060c0 <HAL_GPIO_Init+0x300>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	43db      	mvns	r3, r3
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	4013      	ands	r3, r2
 8006064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4313      	orrs	r3, r2
 8006078:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800607a:	4a11      	ldr	r2, [pc, #68]	@ (80060c0 <HAL_GPIO_Init+0x300>)
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	3301      	adds	r3, #1
 8006084:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	fa22 f303 	lsr.w	r3, r2, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	f47f ae9d 	bne.w	8005dd0 <HAL_GPIO_Init+0x10>
  }
}
 8006096:	bf00      	nop
 8006098:	bf00      	nop
 800609a:	371c      	adds	r7, #28
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	40021000 	.word	0x40021000
 80060a8:	40010000 	.word	0x40010000
 80060ac:	48000400 	.word	0x48000400
 80060b0:	48000800 	.word	0x48000800
 80060b4:	48000c00 	.word	0x48000c00
 80060b8:	48001000 	.word	0x48001000
 80060bc:	48001400 	.word	0x48001400
 80060c0:	40010400 	.word	0x40010400

080060c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691a      	ldr	r2, [r3, #16]
 80060d4:	887b      	ldrh	r3, [r7, #2]
 80060d6:	4013      	ands	r3, r2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060dc:	2301      	movs	r3, #1
 80060de:	73fb      	strb	r3, [r7, #15]
 80060e0:	e001      	b.n	80060e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060e2:	2300      	movs	r3, #0
 80060e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	460b      	mov	r3, r1
 80060fe:	807b      	strh	r3, [r7, #2]
 8006100:	4613      	mov	r3, r2
 8006102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006104:	787b      	ldrb	r3, [r7, #1]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d003      	beq.n	8006112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800610a:	887a      	ldrh	r2, [r7, #2]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006110:	e002      	b.n	8006118 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006112:	887a      	ldrh	r2, [r7, #2]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	4603      	mov	r3, r0
 800612c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800612e:	4b08      	ldr	r3, [pc, #32]	@ (8006150 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006130:	695a      	ldr	r2, [r3, #20]
 8006132:	88fb      	ldrh	r3, [r7, #6]
 8006134:	4013      	ands	r3, r2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d006      	beq.n	8006148 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800613a:	4a05      	ldr	r2, [pc, #20]	@ (8006150 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800613c:	88fb      	ldrh	r3, [r7, #6]
 800613e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006140:	88fb      	ldrh	r3, [r7, #6]
 8006142:	4618      	mov	r0, r3
 8006144:	f7fc fbb7 	bl	80028b6 <HAL_GPIO_EXTI_Callback>
  }
}
 8006148:	bf00      	nop
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	40010400 	.word	0x40010400

08006154 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d141      	bne.n	80061e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006162:	4b4b      	ldr	r3, [pc, #300]	@ (8006290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800616a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800616e:	d131      	bne.n	80061d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006170:	4b47      	ldr	r3, [pc, #284]	@ (8006290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006176:	4a46      	ldr	r2, [pc, #280]	@ (8006290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006178:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800617c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006180:	4b43      	ldr	r3, [pc, #268]	@ (8006290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006188:	4a41      	ldr	r2, [pc, #260]	@ (8006290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800618a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800618e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006190:	4b40      	ldr	r3, [pc, #256]	@ (8006294 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2232      	movs	r2, #50	@ 0x32
 8006196:	fb02 f303 	mul.w	r3, r2, r3
 800619a:	4a3f      	ldr	r2, [pc, #252]	@ (8006298 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800619c:	fba2 2303 	umull	r2, r3, r2, r3
 80061a0:	0c9b      	lsrs	r3, r3, #18
 80061a2:	3301      	adds	r3, #1
 80061a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061a6:	e002      	b.n	80061ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061ae:	4b38      	ldr	r3, [pc, #224]	@ (8006290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061ba:	d102      	bne.n	80061c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1f2      	bne.n	80061a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80061c2:	4b33      	ldr	r3, [pc, #204]	@ (8006290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061ce:	d158      	bne.n	8006282 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e057      	b.n	8006284 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061d4:	4b2e      	ldr	r3, [pc, #184]	@ (8006290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061da:	4a2d      	ldr	r2, [pc, #180]	@ (8006290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80061e4:	e04d      	b.n	8006282 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061ec:	d141      	bne.n	8006272 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80061ee:	4b28      	ldr	r3, [pc, #160]	@ (8006290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80061f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061fa:	d131      	bne.n	8006260 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061fc:	4b24      	ldr	r3, [pc, #144]	@ (8006290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006202:	4a23      	ldr	r2, [pc, #140]	@ (8006290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006208:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800620c:	4b20      	ldr	r3, [pc, #128]	@ (8006290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006214:	4a1e      	ldr	r2, [pc, #120]	@ (8006290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006216:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800621a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800621c:	4b1d      	ldr	r3, [pc, #116]	@ (8006294 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2232      	movs	r2, #50	@ 0x32
 8006222:	fb02 f303 	mul.w	r3, r2, r3
 8006226:	4a1c      	ldr	r2, [pc, #112]	@ (8006298 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006228:	fba2 2303 	umull	r2, r3, r2, r3
 800622c:	0c9b      	lsrs	r3, r3, #18
 800622e:	3301      	adds	r3, #1
 8006230:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006232:	e002      	b.n	800623a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	3b01      	subs	r3, #1
 8006238:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800623a:	4b15      	ldr	r3, [pc, #84]	@ (8006290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006246:	d102      	bne.n	800624e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1f2      	bne.n	8006234 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800624e:	4b10      	ldr	r3, [pc, #64]	@ (8006290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800625a:	d112      	bne.n	8006282 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e011      	b.n	8006284 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006260:	4b0b      	ldr	r3, [pc, #44]	@ (8006290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006266:	4a0a      	ldr	r2, [pc, #40]	@ (8006290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800626c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006270:	e007      	b.n	8006282 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006272:	4b07      	ldr	r3, [pc, #28]	@ (8006290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800627a:	4a05      	ldr	r2, [pc, #20]	@ (8006290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800627c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006280:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	40007000 	.word	0x40007000
 8006294:	20000164 	.word	0x20000164
 8006298:	431bde83 	.word	0x431bde83

0800629c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80062a0:	4b05      	ldr	r3, [pc, #20]	@ (80062b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	4a04      	ldr	r2, [pc, #16]	@ (80062b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80062a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80062aa:	6093      	str	r3, [r2, #8]
}
 80062ac:	bf00      	nop
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	40007000 	.word	0x40007000

080062bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b088      	sub	sp, #32
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e2fe      	b.n	80068cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d075      	beq.n	80063c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062da:	4b97      	ldr	r3, [pc, #604]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f003 030c 	and.w	r3, r3, #12
 80062e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062e4:	4b94      	ldr	r3, [pc, #592]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f003 0303 	and.w	r3, r3, #3
 80062ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	2b0c      	cmp	r3, #12
 80062f2:	d102      	bne.n	80062fa <HAL_RCC_OscConfig+0x3e>
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d002      	beq.n	8006300 <HAL_RCC_OscConfig+0x44>
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d10b      	bne.n	8006318 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006300:	4b8d      	ldr	r3, [pc, #564]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d05b      	beq.n	80063c4 <HAL_RCC_OscConfig+0x108>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d157      	bne.n	80063c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e2d9      	b.n	80068cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006320:	d106      	bne.n	8006330 <HAL_RCC_OscConfig+0x74>
 8006322:	4b85      	ldr	r3, [pc, #532]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a84      	ldr	r2, [pc, #528]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 8006328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	e01d      	b.n	800636c <HAL_RCC_OscConfig+0xb0>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006338:	d10c      	bne.n	8006354 <HAL_RCC_OscConfig+0x98>
 800633a:	4b7f      	ldr	r3, [pc, #508]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a7e      	ldr	r2, [pc, #504]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 8006340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	4b7c      	ldr	r3, [pc, #496]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a7b      	ldr	r2, [pc, #492]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 800634c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006350:	6013      	str	r3, [r2, #0]
 8006352:	e00b      	b.n	800636c <HAL_RCC_OscConfig+0xb0>
 8006354:	4b78      	ldr	r3, [pc, #480]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a77      	ldr	r2, [pc, #476]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 800635a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	4b75      	ldr	r3, [pc, #468]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a74      	ldr	r2, [pc, #464]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 8006366:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800636a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d013      	beq.n	800639c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006374:	f7fd fc5e 	bl	8003c34 <HAL_GetTick>
 8006378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800637a:	e008      	b.n	800638e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800637c:	f7fd fc5a 	bl	8003c34 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	2b64      	cmp	r3, #100	@ 0x64
 8006388:	d901      	bls.n	800638e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e29e      	b.n	80068cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800638e:	4b6a      	ldr	r3, [pc, #424]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d0f0      	beq.n	800637c <HAL_RCC_OscConfig+0xc0>
 800639a:	e014      	b.n	80063c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800639c:	f7fd fc4a 	bl	8003c34 <HAL_GetTick>
 80063a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063a2:	e008      	b.n	80063b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063a4:	f7fd fc46 	bl	8003c34 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	2b64      	cmp	r3, #100	@ 0x64
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e28a      	b.n	80068cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063b6:	4b60      	ldr	r3, [pc, #384]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1f0      	bne.n	80063a4 <HAL_RCC_OscConfig+0xe8>
 80063c2:	e000      	b.n	80063c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d075      	beq.n	80064be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063d2:	4b59      	ldr	r3, [pc, #356]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f003 030c 	and.w	r3, r3, #12
 80063da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063dc:	4b56      	ldr	r3, [pc, #344]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f003 0303 	and.w	r3, r3, #3
 80063e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	2b0c      	cmp	r3, #12
 80063ea:	d102      	bne.n	80063f2 <HAL_RCC_OscConfig+0x136>
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d002      	beq.n	80063f8 <HAL_RCC_OscConfig+0x13c>
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	2b04      	cmp	r3, #4
 80063f6:	d11f      	bne.n	8006438 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063f8:	4b4f      	ldr	r3, [pc, #316]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006400:	2b00      	cmp	r3, #0
 8006402:	d005      	beq.n	8006410 <HAL_RCC_OscConfig+0x154>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d101      	bne.n	8006410 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e25d      	b.n	80068cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006410:	4b49      	ldr	r3, [pc, #292]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	061b      	lsls	r3, r3, #24
 800641e:	4946      	ldr	r1, [pc, #280]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 8006420:	4313      	orrs	r3, r2
 8006422:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006424:	4b45      	ldr	r3, [pc, #276]	@ (800653c <HAL_RCC_OscConfig+0x280>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4618      	mov	r0, r3
 800642a:	f7fd fbb7 	bl	8003b9c <HAL_InitTick>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d043      	beq.n	80064bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e249      	b.n	80068cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d023      	beq.n	8006488 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006440:	4b3d      	ldr	r3, [pc, #244]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a3c      	ldr	r2, [pc, #240]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 8006446:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800644a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800644c:	f7fd fbf2 	bl	8003c34 <HAL_GetTick>
 8006450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006452:	e008      	b.n	8006466 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006454:	f7fd fbee 	bl	8003c34 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	2b02      	cmp	r3, #2
 8006460:	d901      	bls.n	8006466 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e232      	b.n	80068cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006466:	4b34      	ldr	r3, [pc, #208]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800646e:	2b00      	cmp	r3, #0
 8006470:	d0f0      	beq.n	8006454 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006472:	4b31      	ldr	r3, [pc, #196]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	061b      	lsls	r3, r3, #24
 8006480:	492d      	ldr	r1, [pc, #180]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 8006482:	4313      	orrs	r3, r2
 8006484:	604b      	str	r3, [r1, #4]
 8006486:	e01a      	b.n	80064be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006488:	4b2b      	ldr	r3, [pc, #172]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a2a      	ldr	r2, [pc, #168]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 800648e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006494:	f7fd fbce 	bl	8003c34 <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800649c:	f7fd fbca 	bl	8003c34 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e20e      	b.n	80068cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80064ae:	4b22      	ldr	r3, [pc, #136]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1f0      	bne.n	800649c <HAL_RCC_OscConfig+0x1e0>
 80064ba:	e000      	b.n	80064be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0308 	and.w	r3, r3, #8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d041      	beq.n	800654e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d01c      	beq.n	800650c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064d2:	4b19      	ldr	r3, [pc, #100]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 80064d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064d8:	4a17      	ldr	r2, [pc, #92]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 80064da:	f043 0301 	orr.w	r3, r3, #1
 80064de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064e2:	f7fd fba7 	bl	8003c34 <HAL_GetTick>
 80064e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064e8:	e008      	b.n	80064fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064ea:	f7fd fba3 	bl	8003c34 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d901      	bls.n	80064fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e1e7      	b.n	80068cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 80064fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006502:	f003 0302 	and.w	r3, r3, #2
 8006506:	2b00      	cmp	r3, #0
 8006508:	d0ef      	beq.n	80064ea <HAL_RCC_OscConfig+0x22e>
 800650a:	e020      	b.n	800654e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800650c:	4b0a      	ldr	r3, [pc, #40]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 800650e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006512:	4a09      	ldr	r2, [pc, #36]	@ (8006538 <HAL_RCC_OscConfig+0x27c>)
 8006514:	f023 0301 	bic.w	r3, r3, #1
 8006518:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800651c:	f7fd fb8a 	bl	8003c34 <HAL_GetTick>
 8006520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006522:	e00d      	b.n	8006540 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006524:	f7fd fb86 	bl	8003c34 <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	2b02      	cmp	r3, #2
 8006530:	d906      	bls.n	8006540 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e1ca      	b.n	80068cc <HAL_RCC_OscConfig+0x610>
 8006536:	bf00      	nop
 8006538:	40021000 	.word	0x40021000
 800653c:	20000168 	.word	0x20000168
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006540:	4b8c      	ldr	r3, [pc, #560]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 8006542:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1ea      	bne.n	8006524 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0304 	and.w	r3, r3, #4
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 80a6 	beq.w	80066a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800655c:	2300      	movs	r3, #0
 800655e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006560:	4b84      	ldr	r3, [pc, #528]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 8006562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <HAL_RCC_OscConfig+0x2b4>
 800656c:	2301      	movs	r3, #1
 800656e:	e000      	b.n	8006572 <HAL_RCC_OscConfig+0x2b6>
 8006570:	2300      	movs	r3, #0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00d      	beq.n	8006592 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006576:	4b7f      	ldr	r3, [pc, #508]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 8006578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800657a:	4a7e      	ldr	r2, [pc, #504]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 800657c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006580:	6593      	str	r3, [r2, #88]	@ 0x58
 8006582:	4b7c      	ldr	r3, [pc, #496]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 8006584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800658a:	60fb      	str	r3, [r7, #12]
 800658c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800658e:	2301      	movs	r3, #1
 8006590:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006592:	4b79      	ldr	r3, [pc, #484]	@ (8006778 <HAL_RCC_OscConfig+0x4bc>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800659a:	2b00      	cmp	r3, #0
 800659c:	d118      	bne.n	80065d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800659e:	4b76      	ldr	r3, [pc, #472]	@ (8006778 <HAL_RCC_OscConfig+0x4bc>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a75      	ldr	r2, [pc, #468]	@ (8006778 <HAL_RCC_OscConfig+0x4bc>)
 80065a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065aa:	f7fd fb43 	bl	8003c34 <HAL_GetTick>
 80065ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065b0:	e008      	b.n	80065c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065b2:	f7fd fb3f 	bl	8003c34 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d901      	bls.n	80065c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e183      	b.n	80068cc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065c4:	4b6c      	ldr	r3, [pc, #432]	@ (8006778 <HAL_RCC_OscConfig+0x4bc>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0f0      	beq.n	80065b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d108      	bne.n	80065ea <HAL_RCC_OscConfig+0x32e>
 80065d8:	4b66      	ldr	r3, [pc, #408]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 80065da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065de:	4a65      	ldr	r2, [pc, #404]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 80065e0:	f043 0301 	orr.w	r3, r3, #1
 80065e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80065e8:	e024      	b.n	8006634 <HAL_RCC_OscConfig+0x378>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	2b05      	cmp	r3, #5
 80065f0:	d110      	bne.n	8006614 <HAL_RCC_OscConfig+0x358>
 80065f2:	4b60      	ldr	r3, [pc, #384]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 80065f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065f8:	4a5e      	ldr	r2, [pc, #376]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 80065fa:	f043 0304 	orr.w	r3, r3, #4
 80065fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006602:	4b5c      	ldr	r3, [pc, #368]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 8006604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006608:	4a5a      	ldr	r2, [pc, #360]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 800660a:	f043 0301 	orr.w	r3, r3, #1
 800660e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006612:	e00f      	b.n	8006634 <HAL_RCC_OscConfig+0x378>
 8006614:	4b57      	ldr	r3, [pc, #348]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 8006616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800661a:	4a56      	ldr	r2, [pc, #344]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 800661c:	f023 0301 	bic.w	r3, r3, #1
 8006620:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006624:	4b53      	ldr	r3, [pc, #332]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 8006626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800662a:	4a52      	ldr	r2, [pc, #328]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 800662c:	f023 0304 	bic.w	r3, r3, #4
 8006630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d016      	beq.n	800666a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800663c:	f7fd fafa 	bl	8003c34 <HAL_GetTick>
 8006640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006642:	e00a      	b.n	800665a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006644:	f7fd faf6 	bl	8003c34 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006652:	4293      	cmp	r3, r2
 8006654:	d901      	bls.n	800665a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e138      	b.n	80068cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800665a:	4b46      	ldr	r3, [pc, #280]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 800665c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006660:	f003 0302 	and.w	r3, r3, #2
 8006664:	2b00      	cmp	r3, #0
 8006666:	d0ed      	beq.n	8006644 <HAL_RCC_OscConfig+0x388>
 8006668:	e015      	b.n	8006696 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800666a:	f7fd fae3 	bl	8003c34 <HAL_GetTick>
 800666e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006670:	e00a      	b.n	8006688 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006672:	f7fd fadf 	bl	8003c34 <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006680:	4293      	cmp	r3, r2
 8006682:	d901      	bls.n	8006688 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e121      	b.n	80068cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006688:	4b3a      	ldr	r3, [pc, #232]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 800668a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1ed      	bne.n	8006672 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006696:	7ffb      	ldrb	r3, [r7, #31]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d105      	bne.n	80066a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800669c:	4b35      	ldr	r3, [pc, #212]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 800669e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066a0:	4a34      	ldr	r2, [pc, #208]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 80066a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0320 	and.w	r3, r3, #32
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d03c      	beq.n	800672e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d01c      	beq.n	80066f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80066bc:	4b2d      	ldr	r3, [pc, #180]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 80066be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066c2:	4a2c      	ldr	r2, [pc, #176]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 80066c4:	f043 0301 	orr.w	r3, r3, #1
 80066c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066cc:	f7fd fab2 	bl	8003c34 <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066d4:	f7fd faae 	bl	8003c34 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e0f2      	b.n	80068cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80066e6:	4b23      	ldr	r3, [pc, #140]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 80066e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d0ef      	beq.n	80066d4 <HAL_RCC_OscConfig+0x418>
 80066f4:	e01b      	b.n	800672e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066f6:	4b1f      	ldr	r3, [pc, #124]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 80066f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 80066fe:	f023 0301 	bic.w	r3, r3, #1
 8006702:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006706:	f7fd fa95 	bl	8003c34 <HAL_GetTick>
 800670a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800670c:	e008      	b.n	8006720 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800670e:	f7fd fa91 	bl	8003c34 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b02      	cmp	r3, #2
 800671a:	d901      	bls.n	8006720 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e0d5      	b.n	80068cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006720:	4b14      	ldr	r3, [pc, #80]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 8006722:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1ef      	bne.n	800670e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 80c9 	beq.w	80068ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006738:	4b0e      	ldr	r3, [pc, #56]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f003 030c 	and.w	r3, r3, #12
 8006740:	2b0c      	cmp	r3, #12
 8006742:	f000 8083 	beq.w	800684c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	2b02      	cmp	r3, #2
 800674c:	d15e      	bne.n	800680c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800674e:	4b09      	ldr	r3, [pc, #36]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a08      	ldr	r2, [pc, #32]	@ (8006774 <HAL_RCC_OscConfig+0x4b8>)
 8006754:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800675a:	f7fd fa6b 	bl	8003c34 <HAL_GetTick>
 800675e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006760:	e00c      	b.n	800677c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006762:	f7fd fa67 	bl	8003c34 <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	2b02      	cmp	r3, #2
 800676e:	d905      	bls.n	800677c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e0ab      	b.n	80068cc <HAL_RCC_OscConfig+0x610>
 8006774:	40021000 	.word	0x40021000
 8006778:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800677c:	4b55      	ldr	r3, [pc, #340]	@ (80068d4 <HAL_RCC_OscConfig+0x618>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1ec      	bne.n	8006762 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006788:	4b52      	ldr	r3, [pc, #328]	@ (80068d4 <HAL_RCC_OscConfig+0x618>)
 800678a:	68da      	ldr	r2, [r3, #12]
 800678c:	4b52      	ldr	r3, [pc, #328]	@ (80068d8 <HAL_RCC_OscConfig+0x61c>)
 800678e:	4013      	ands	r3, r2
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	6a11      	ldr	r1, [r2, #32]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006798:	3a01      	subs	r2, #1
 800679a:	0112      	lsls	r2, r2, #4
 800679c:	4311      	orrs	r1, r2
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80067a2:	0212      	lsls	r2, r2, #8
 80067a4:	4311      	orrs	r1, r2
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80067aa:	0852      	lsrs	r2, r2, #1
 80067ac:	3a01      	subs	r2, #1
 80067ae:	0552      	lsls	r2, r2, #21
 80067b0:	4311      	orrs	r1, r2
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80067b6:	0852      	lsrs	r2, r2, #1
 80067b8:	3a01      	subs	r2, #1
 80067ba:	0652      	lsls	r2, r2, #25
 80067bc:	4311      	orrs	r1, r2
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80067c2:	06d2      	lsls	r2, r2, #27
 80067c4:	430a      	orrs	r2, r1
 80067c6:	4943      	ldr	r1, [pc, #268]	@ (80068d4 <HAL_RCC_OscConfig+0x618>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067cc:	4b41      	ldr	r3, [pc, #260]	@ (80068d4 <HAL_RCC_OscConfig+0x618>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a40      	ldr	r2, [pc, #256]	@ (80068d4 <HAL_RCC_OscConfig+0x618>)
 80067d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80067d8:	4b3e      	ldr	r3, [pc, #248]	@ (80068d4 <HAL_RCC_OscConfig+0x618>)
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	4a3d      	ldr	r2, [pc, #244]	@ (80068d4 <HAL_RCC_OscConfig+0x618>)
 80067de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e4:	f7fd fa26 	bl	8003c34 <HAL_GetTick>
 80067e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067ea:	e008      	b.n	80067fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067ec:	f7fd fa22 	bl	8003c34 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e066      	b.n	80068cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067fe:	4b35      	ldr	r3, [pc, #212]	@ (80068d4 <HAL_RCC_OscConfig+0x618>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d0f0      	beq.n	80067ec <HAL_RCC_OscConfig+0x530>
 800680a:	e05e      	b.n	80068ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800680c:	4b31      	ldr	r3, [pc, #196]	@ (80068d4 <HAL_RCC_OscConfig+0x618>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a30      	ldr	r2, [pc, #192]	@ (80068d4 <HAL_RCC_OscConfig+0x618>)
 8006812:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006818:	f7fd fa0c 	bl	8003c34 <HAL_GetTick>
 800681c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800681e:	e008      	b.n	8006832 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006820:	f7fd fa08 	bl	8003c34 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e04c      	b.n	80068cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006832:	4b28      	ldr	r3, [pc, #160]	@ (80068d4 <HAL_RCC_OscConfig+0x618>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1f0      	bne.n	8006820 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800683e:	4b25      	ldr	r3, [pc, #148]	@ (80068d4 <HAL_RCC_OscConfig+0x618>)
 8006840:	68da      	ldr	r2, [r3, #12]
 8006842:	4924      	ldr	r1, [pc, #144]	@ (80068d4 <HAL_RCC_OscConfig+0x618>)
 8006844:	4b25      	ldr	r3, [pc, #148]	@ (80068dc <HAL_RCC_OscConfig+0x620>)
 8006846:	4013      	ands	r3, r2
 8006848:	60cb      	str	r3, [r1, #12]
 800684a:	e03e      	b.n	80068ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d101      	bne.n	8006858 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e039      	b.n	80068cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006858:	4b1e      	ldr	r3, [pc, #120]	@ (80068d4 <HAL_RCC_OscConfig+0x618>)
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	f003 0203 	and.w	r2, r3, #3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	429a      	cmp	r2, r3
 800686a:	d12c      	bne.n	80068c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006876:	3b01      	subs	r3, #1
 8006878:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800687a:	429a      	cmp	r2, r3
 800687c:	d123      	bne.n	80068c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006888:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800688a:	429a      	cmp	r2, r3
 800688c:	d11b      	bne.n	80068c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006898:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800689a:	429a      	cmp	r2, r3
 800689c:	d113      	bne.n	80068c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a8:	085b      	lsrs	r3, r3, #1
 80068aa:	3b01      	subs	r3, #1
 80068ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d109      	bne.n	80068c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068bc:	085b      	lsrs	r3, r3, #1
 80068be:	3b01      	subs	r3, #1
 80068c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d001      	beq.n	80068ca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e000      	b.n	80068cc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3720      	adds	r7, #32
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	40021000 	.word	0x40021000
 80068d8:	019f800c 	.word	0x019f800c
 80068dc:	feeefffc 	.word	0xfeeefffc

080068e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80068ea:	2300      	movs	r3, #0
 80068ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e11e      	b.n	8006b36 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068f8:	4b91      	ldr	r3, [pc, #580]	@ (8006b40 <HAL_RCC_ClockConfig+0x260>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 030f 	and.w	r3, r3, #15
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	429a      	cmp	r2, r3
 8006904:	d910      	bls.n	8006928 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006906:	4b8e      	ldr	r3, [pc, #568]	@ (8006b40 <HAL_RCC_ClockConfig+0x260>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f023 020f 	bic.w	r2, r3, #15
 800690e:	498c      	ldr	r1, [pc, #560]	@ (8006b40 <HAL_RCC_ClockConfig+0x260>)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	4313      	orrs	r3, r2
 8006914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006916:	4b8a      	ldr	r3, [pc, #552]	@ (8006b40 <HAL_RCC_ClockConfig+0x260>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	683a      	ldr	r2, [r7, #0]
 8006920:	429a      	cmp	r2, r3
 8006922:	d001      	beq.n	8006928 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e106      	b.n	8006b36 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b00      	cmp	r3, #0
 8006932:	d073      	beq.n	8006a1c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	2b03      	cmp	r3, #3
 800693a:	d129      	bne.n	8006990 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800693c:	4b81      	ldr	r3, [pc, #516]	@ (8006b44 <HAL_RCC_ClockConfig+0x264>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e0f4      	b.n	8006b36 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800694c:	f000 f99e 	bl	8006c8c <RCC_GetSysClockFreqFromPLLSource>
 8006950:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	4a7c      	ldr	r2, [pc, #496]	@ (8006b48 <HAL_RCC_ClockConfig+0x268>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d93f      	bls.n	80069da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800695a:	4b7a      	ldr	r3, [pc, #488]	@ (8006b44 <HAL_RCC_ClockConfig+0x264>)
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d009      	beq.n	800697a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800696e:	2b00      	cmp	r3, #0
 8006970:	d033      	beq.n	80069da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006976:	2b00      	cmp	r3, #0
 8006978:	d12f      	bne.n	80069da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800697a:	4b72      	ldr	r3, [pc, #456]	@ (8006b44 <HAL_RCC_ClockConfig+0x264>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006982:	4a70      	ldr	r2, [pc, #448]	@ (8006b44 <HAL_RCC_ClockConfig+0x264>)
 8006984:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006988:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800698a:	2380      	movs	r3, #128	@ 0x80
 800698c:	617b      	str	r3, [r7, #20]
 800698e:	e024      	b.n	80069da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	2b02      	cmp	r3, #2
 8006996:	d107      	bne.n	80069a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006998:	4b6a      	ldr	r3, [pc, #424]	@ (8006b44 <HAL_RCC_ClockConfig+0x264>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d109      	bne.n	80069b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e0c6      	b.n	8006b36 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069a8:	4b66      	ldr	r3, [pc, #408]	@ (8006b44 <HAL_RCC_ClockConfig+0x264>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e0be      	b.n	8006b36 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80069b8:	f000 f8ce 	bl	8006b58 <HAL_RCC_GetSysClockFreq>
 80069bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	4a61      	ldr	r2, [pc, #388]	@ (8006b48 <HAL_RCC_ClockConfig+0x268>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d909      	bls.n	80069da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80069c6:	4b5f      	ldr	r3, [pc, #380]	@ (8006b44 <HAL_RCC_ClockConfig+0x264>)
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069ce:	4a5d      	ldr	r2, [pc, #372]	@ (8006b44 <HAL_RCC_ClockConfig+0x264>)
 80069d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80069d6:	2380      	movs	r3, #128	@ 0x80
 80069d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069da:	4b5a      	ldr	r3, [pc, #360]	@ (8006b44 <HAL_RCC_ClockConfig+0x264>)
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f023 0203 	bic.w	r2, r3, #3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	4957      	ldr	r1, [pc, #348]	@ (8006b44 <HAL_RCC_ClockConfig+0x264>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069ec:	f7fd f922 	bl	8003c34 <HAL_GetTick>
 80069f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069f2:	e00a      	b.n	8006a0a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069f4:	f7fd f91e 	bl	8003c34 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e095      	b.n	8006b36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a0a:	4b4e      	ldr	r3, [pc, #312]	@ (8006b44 <HAL_RCC_ClockConfig+0x264>)
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f003 020c 	and.w	r2, r3, #12
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d1eb      	bne.n	80069f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d023      	beq.n	8006a70 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0304 	and.w	r3, r3, #4
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d005      	beq.n	8006a40 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a34:	4b43      	ldr	r3, [pc, #268]	@ (8006b44 <HAL_RCC_ClockConfig+0x264>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	4a42      	ldr	r2, [pc, #264]	@ (8006b44 <HAL_RCC_ClockConfig+0x264>)
 8006a3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006a3e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0308 	and.w	r3, r3, #8
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d007      	beq.n	8006a5c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006a4c:	4b3d      	ldr	r3, [pc, #244]	@ (8006b44 <HAL_RCC_ClockConfig+0x264>)
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006a54:	4a3b      	ldr	r2, [pc, #236]	@ (8006b44 <HAL_RCC_ClockConfig+0x264>)
 8006a56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006a5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a5c:	4b39      	ldr	r3, [pc, #228]	@ (8006b44 <HAL_RCC_ClockConfig+0x264>)
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	4936      	ldr	r1, [pc, #216]	@ (8006b44 <HAL_RCC_ClockConfig+0x264>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	608b      	str	r3, [r1, #8]
 8006a6e:	e008      	b.n	8006a82 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	2b80      	cmp	r3, #128	@ 0x80
 8006a74:	d105      	bne.n	8006a82 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006a76:	4b33      	ldr	r3, [pc, #204]	@ (8006b44 <HAL_RCC_ClockConfig+0x264>)
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	4a32      	ldr	r2, [pc, #200]	@ (8006b44 <HAL_RCC_ClockConfig+0x264>)
 8006a7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a80:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a82:	4b2f      	ldr	r3, [pc, #188]	@ (8006b40 <HAL_RCC_ClockConfig+0x260>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 030f 	and.w	r3, r3, #15
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d21d      	bcs.n	8006acc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a90:	4b2b      	ldr	r3, [pc, #172]	@ (8006b40 <HAL_RCC_ClockConfig+0x260>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f023 020f 	bic.w	r2, r3, #15
 8006a98:	4929      	ldr	r1, [pc, #164]	@ (8006b40 <HAL_RCC_ClockConfig+0x260>)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006aa0:	f7fd f8c8 	bl	8003c34 <HAL_GetTick>
 8006aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aa6:	e00a      	b.n	8006abe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006aa8:	f7fd f8c4 	bl	8003c34 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e03b      	b.n	8006b36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006abe:	4b20      	ldr	r3, [pc, #128]	@ (8006b40 <HAL_RCC_ClockConfig+0x260>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 030f 	and.w	r3, r3, #15
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d1ed      	bne.n	8006aa8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0304 	and.w	r3, r3, #4
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d008      	beq.n	8006aea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8006b44 <HAL_RCC_ClockConfig+0x264>)
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	4917      	ldr	r1, [pc, #92]	@ (8006b44 <HAL_RCC_ClockConfig+0x264>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0308 	and.w	r3, r3, #8
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d009      	beq.n	8006b0a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006af6:	4b13      	ldr	r3, [pc, #76]	@ (8006b44 <HAL_RCC_ClockConfig+0x264>)
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	490f      	ldr	r1, [pc, #60]	@ (8006b44 <HAL_RCC_ClockConfig+0x264>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b0a:	f000 f825 	bl	8006b58 <HAL_RCC_GetSysClockFreq>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	4b0c      	ldr	r3, [pc, #48]	@ (8006b44 <HAL_RCC_ClockConfig+0x264>)
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	091b      	lsrs	r3, r3, #4
 8006b16:	f003 030f 	and.w	r3, r3, #15
 8006b1a:	490c      	ldr	r1, [pc, #48]	@ (8006b4c <HAL_RCC_ClockConfig+0x26c>)
 8006b1c:	5ccb      	ldrb	r3, [r1, r3]
 8006b1e:	f003 031f 	and.w	r3, r3, #31
 8006b22:	fa22 f303 	lsr.w	r3, r2, r3
 8006b26:	4a0a      	ldr	r2, [pc, #40]	@ (8006b50 <HAL_RCC_ClockConfig+0x270>)
 8006b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8006b54 <HAL_RCC_ClockConfig+0x274>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7fd f834 	bl	8003b9c <HAL_InitTick>
 8006b34:	4603      	mov	r3, r0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3718      	adds	r7, #24
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	40022000 	.word	0x40022000
 8006b44:	40021000 	.word	0x40021000
 8006b48:	04c4b400 	.word	0x04c4b400
 8006b4c:	0800bd48 	.word	0x0800bd48
 8006b50:	20000164 	.word	0x20000164
 8006b54:	20000168 	.word	0x20000168

08006b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8006c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f003 030c 	and.w	r3, r3, #12
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	d102      	bne.n	8006b70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006b6a:	4b2a      	ldr	r3, [pc, #168]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b6c:	613b      	str	r3, [r7, #16]
 8006b6e:	e047      	b.n	8006c00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006b70:	4b27      	ldr	r3, [pc, #156]	@ (8006c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f003 030c 	and.w	r3, r3, #12
 8006b78:	2b08      	cmp	r3, #8
 8006b7a:	d102      	bne.n	8006b82 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006b7c:	4b26      	ldr	r3, [pc, #152]	@ (8006c18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b7e:	613b      	str	r3, [r7, #16]
 8006b80:	e03e      	b.n	8006c00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006b82:	4b23      	ldr	r3, [pc, #140]	@ (8006c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f003 030c 	and.w	r3, r3, #12
 8006b8a:	2b0c      	cmp	r3, #12
 8006b8c:	d136      	bne.n	8006bfc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006b8e:	4b20      	ldr	r3, [pc, #128]	@ (8006c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	f003 0303 	and.w	r3, r3, #3
 8006b96:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b98:	4b1d      	ldr	r3, [pc, #116]	@ (8006c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	091b      	lsrs	r3, r3, #4
 8006b9e:	f003 030f 	and.w	r3, r3, #15
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d10c      	bne.n	8006bc6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006bac:	4a1a      	ldr	r2, [pc, #104]	@ (8006c18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb4:	4a16      	ldr	r2, [pc, #88]	@ (8006c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bb6:	68d2      	ldr	r2, [r2, #12]
 8006bb8:	0a12      	lsrs	r2, r2, #8
 8006bba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006bbe:	fb02 f303 	mul.w	r3, r2, r3
 8006bc2:	617b      	str	r3, [r7, #20]
      break;
 8006bc4:	e00c      	b.n	8006be0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006bc6:	4a13      	ldr	r2, [pc, #76]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bce:	4a10      	ldr	r2, [pc, #64]	@ (8006c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bd0:	68d2      	ldr	r2, [r2, #12]
 8006bd2:	0a12      	lsrs	r2, r2, #8
 8006bd4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006bd8:	fb02 f303 	mul.w	r3, r2, r3
 8006bdc:	617b      	str	r3, [r7, #20]
      break;
 8006bde:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006be0:	4b0b      	ldr	r3, [pc, #44]	@ (8006c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	0e5b      	lsrs	r3, r3, #25
 8006be6:	f003 0303 	and.w	r3, r3, #3
 8006bea:	3301      	adds	r3, #1
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf8:	613b      	str	r3, [r7, #16]
 8006bfa:	e001      	b.n	8006c00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006c00:	693b      	ldr	r3, [r7, #16]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	371c      	adds	r7, #28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	40021000 	.word	0x40021000
 8006c14:	00f42400 	.word	0x00f42400
 8006c18:	016e3600 	.word	0x016e3600

08006c1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c20:	4b03      	ldr	r3, [pc, #12]	@ (8006c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c22:	681b      	ldr	r3, [r3, #0]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	20000164 	.word	0x20000164

08006c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006c38:	f7ff fff0 	bl	8006c1c <HAL_RCC_GetHCLKFreq>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	4b06      	ldr	r3, [pc, #24]	@ (8006c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	0a1b      	lsrs	r3, r3, #8
 8006c44:	f003 0307 	and.w	r3, r3, #7
 8006c48:	4904      	ldr	r1, [pc, #16]	@ (8006c5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c4a:	5ccb      	ldrb	r3, [r1, r3]
 8006c4c:	f003 031f 	and.w	r3, r3, #31
 8006c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	40021000 	.word	0x40021000
 8006c5c:	0800bd58 	.word	0x0800bd58

08006c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006c64:	f7ff ffda 	bl	8006c1c <HAL_RCC_GetHCLKFreq>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	4b06      	ldr	r3, [pc, #24]	@ (8006c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	0adb      	lsrs	r3, r3, #11
 8006c70:	f003 0307 	and.w	r3, r3, #7
 8006c74:	4904      	ldr	r1, [pc, #16]	@ (8006c88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c76:	5ccb      	ldrb	r3, [r1, r3]
 8006c78:	f003 031f 	and.w	r3, r3, #31
 8006c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	40021000 	.word	0x40021000
 8006c88:	0800bd58 	.word	0x0800bd58

08006c8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c92:	4b1e      	ldr	r3, [pc, #120]	@ (8006d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	f003 0303 	and.w	r3, r3, #3
 8006c9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8006d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	091b      	lsrs	r3, r3, #4
 8006ca2:	f003 030f 	and.w	r3, r3, #15
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	2b03      	cmp	r3, #3
 8006cae:	d10c      	bne.n	8006cca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006cb0:	4a17      	ldr	r2, [pc, #92]	@ (8006d10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb8:	4a14      	ldr	r2, [pc, #80]	@ (8006d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006cba:	68d2      	ldr	r2, [r2, #12]
 8006cbc:	0a12      	lsrs	r2, r2, #8
 8006cbe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006cc2:	fb02 f303 	mul.w	r3, r2, r3
 8006cc6:	617b      	str	r3, [r7, #20]
    break;
 8006cc8:	e00c      	b.n	8006ce4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006cca:	4a12      	ldr	r2, [pc, #72]	@ (8006d14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd2:	4a0e      	ldr	r2, [pc, #56]	@ (8006d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006cd4:	68d2      	ldr	r2, [r2, #12]
 8006cd6:	0a12      	lsrs	r2, r2, #8
 8006cd8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006cdc:	fb02 f303 	mul.w	r3, r2, r3
 8006ce0:	617b      	str	r3, [r7, #20]
    break;
 8006ce2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ce4:	4b09      	ldr	r3, [pc, #36]	@ (8006d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	0e5b      	lsrs	r3, r3, #25
 8006cea:	f003 0303 	and.w	r3, r3, #3
 8006cee:	3301      	adds	r3, #1
 8006cf0:	005b      	lsls	r3, r3, #1
 8006cf2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cfc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006cfe:	687b      	ldr	r3, [r7, #4]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	371c      	adds	r7, #28
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	40021000 	.word	0x40021000
 8006d10:	016e3600 	.word	0x016e3600
 8006d14:	00f42400 	.word	0x00f42400

08006d18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d20:	2300      	movs	r3, #0
 8006d22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d24:	2300      	movs	r3, #0
 8006d26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 8098 	beq.w	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d36:	2300      	movs	r3, #0
 8006d38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d3a:	4b43      	ldr	r3, [pc, #268]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10d      	bne.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d46:	4b40      	ldr	r3, [pc, #256]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d4a:	4a3f      	ldr	r2, [pc, #252]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d50:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d52:	4b3d      	ldr	r3, [pc, #244]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d5a:	60bb      	str	r3, [r7, #8]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d62:	4b3a      	ldr	r3, [pc, #232]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a39      	ldr	r2, [pc, #228]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d6e:	f7fc ff61 	bl	8003c34 <HAL_GetTick>
 8006d72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d74:	e009      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d76:	f7fc ff5d 	bl	8003c34 <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d902      	bls.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	74fb      	strb	r3, [r7, #19]
        break;
 8006d88:	e005      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d8a:	4b30      	ldr	r3, [pc, #192]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d0ef      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006d96:	7cfb      	ldrb	r3, [r7, #19]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d159      	bne.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006da6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d01e      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d019      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006db8:	4b23      	ldr	r3, [pc, #140]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006dc4:	4b20      	ldr	r3, [pc, #128]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dca:	4a1f      	ldr	r2, [pc, #124]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dda:	4a1b      	ldr	r2, [pc, #108]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ddc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006de0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006de4:	4a18      	ldr	r2, [pc, #96]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d016      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df6:	f7fc ff1d 	bl	8003c34 <HAL_GetTick>
 8006dfa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dfc:	e00b      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dfe:	f7fc ff19 	bl	8003c34 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d902      	bls.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	74fb      	strb	r3, [r7, #19]
            break;
 8006e14:	e006      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e16:	4b0c      	ldr	r3, [pc, #48]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e1c:	f003 0302 	and.w	r3, r3, #2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d0ec      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006e24:	7cfb      	ldrb	r3, [r7, #19]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10b      	bne.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e2a:	4b07      	ldr	r3, [pc, #28]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e38:	4903      	ldr	r1, [pc, #12]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006e40:	e008      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e42:	7cfb      	ldrb	r3, [r7, #19]
 8006e44:	74bb      	strb	r3, [r7, #18]
 8006e46:	e005      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006e48:	40021000 	.word	0x40021000
 8006e4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e50:	7cfb      	ldrb	r3, [r7, #19]
 8006e52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e54:	7c7b      	ldrb	r3, [r7, #17]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d105      	bne.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e5a:	4ba7      	ldr	r3, [pc, #668]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e5e:	4aa6      	ldr	r2, [pc, #664]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e64:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e72:	4ba1      	ldr	r3, [pc, #644]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e78:	f023 0203 	bic.w	r2, r3, #3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	499d      	ldr	r1, [pc, #628]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00a      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e94:	4b98      	ldr	r3, [pc, #608]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e9a:	f023 020c 	bic.w	r2, r3, #12
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	4995      	ldr	r1, [pc, #596]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0304 	and.w	r3, r3, #4
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00a      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006eb6:	4b90      	ldr	r3, [pc, #576]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ebc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	498c      	ldr	r1, [pc, #560]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0308 	and.w	r3, r3, #8
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00a      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ed8:	4b87      	ldr	r3, [pc, #540]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ede:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	4984      	ldr	r1, [pc, #528]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0310 	and.w	r3, r3, #16
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00a      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006efa:	4b7f      	ldr	r3, [pc, #508]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	695b      	ldr	r3, [r3, #20]
 8006f08:	497b      	ldr	r1, [pc, #492]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0320 	and.w	r3, r3, #32
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00a      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f1c:	4b76      	ldr	r3, [pc, #472]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f22:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	4973      	ldr	r1, [pc, #460]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f3e:	4b6e      	ldr	r3, [pc, #440]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f44:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	496a      	ldr	r1, [pc, #424]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00a      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f60:	4b65      	ldr	r3, [pc, #404]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f66:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	4962      	ldr	r1, [pc, #392]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00a      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f82:	4b5d      	ldr	r3, [pc, #372]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f90:	4959      	ldr	r1, [pc, #356]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00a      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006fa4:	4b54      	ldr	r3, [pc, #336]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006faa:	f023 0203 	bic.w	r2, r3, #3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb2:	4951      	ldr	r1, [pc, #324]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00a      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fc6:	4b4c      	ldr	r3, [pc, #304]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fcc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd4:	4948      	ldr	r1, [pc, #288]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d015      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fe8:	4b43      	ldr	r3, [pc, #268]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff6:	4940      	ldr	r1, [pc, #256]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007002:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007006:	d105      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007008:	4b3b      	ldr	r3, [pc, #236]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	4a3a      	ldr	r2, [pc, #232]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800700e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007012:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800701c:	2b00      	cmp	r3, #0
 800701e:	d015      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007020:	4b35      	ldr	r3, [pc, #212]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007026:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800702e:	4932      	ldr	r1, [pc, #200]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007030:	4313      	orrs	r3, r2
 8007032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800703a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800703e:	d105      	bne.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007040:	4b2d      	ldr	r3, [pc, #180]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	4a2c      	ldr	r2, [pc, #176]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007046:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800704a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d015      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007058:	4b27      	ldr	r3, [pc, #156]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800705a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800705e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007066:	4924      	ldr	r1, [pc, #144]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007068:	4313      	orrs	r3, r2
 800706a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007072:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007076:	d105      	bne.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007078:	4b1f      	ldr	r3, [pc, #124]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	4a1e      	ldr	r2, [pc, #120]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800707e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007082:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d015      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007090:	4b19      	ldr	r3, [pc, #100]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007096:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800709e:	4916      	ldr	r1, [pc, #88]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070ae:	d105      	bne.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070b0:	4b11      	ldr	r3, [pc, #68]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	4a10      	ldr	r2, [pc, #64]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d019      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070c8:	4b0b      	ldr	r3, [pc, #44]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d6:	4908      	ldr	r1, [pc, #32]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070e6:	d109      	bne.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070e8:	4b03      	ldr	r3, [pc, #12]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	4a02      	ldr	r2, [pc, #8]	@ (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070f2:	60d3      	str	r3, [r2, #12]
 80070f4:	e002      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80070f6:	bf00      	nop
 80070f8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d015      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007108:	4b29      	ldr	r3, [pc, #164]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800710a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800710e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007116:	4926      	ldr	r1, [pc, #152]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007118:	4313      	orrs	r3, r2
 800711a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007122:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007126:	d105      	bne.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007128:	4b21      	ldr	r3, [pc, #132]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	4a20      	ldr	r2, [pc, #128]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800712e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007132:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d015      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007140:	4b1b      	ldr	r3, [pc, #108]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007146:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800714e:	4918      	ldr	r1, [pc, #96]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007150:	4313      	orrs	r3, r2
 8007152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800715a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800715e:	d105      	bne.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007160:	4b13      	ldr	r3, [pc, #76]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	4a12      	ldr	r2, [pc, #72]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007166:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800716a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d015      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007178:	4b0d      	ldr	r3, [pc, #52]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800717a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800717e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007186:	490a      	ldr	r1, [pc, #40]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007188:	4313      	orrs	r3, r2
 800718a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007192:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007196:	d105      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007198:	4b05      	ldr	r3, [pc, #20]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	4a04      	ldr	r2, [pc, #16]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800719e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80071a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	40021000 	.word	0x40021000

080071b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e054      	b.n	8007270 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d111      	bne.n	80071f6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f001 feec 	bl	8008fb8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d102      	bne.n	80071ee <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a23      	ldr	r2, [pc, #140]	@ (8007278 <HAL_TIM_Base_Init+0xc4>)
 80071ec:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2202      	movs	r2, #2
 80071fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	3304      	adds	r3, #4
 8007206:	4619      	mov	r1, r3
 8007208:	4610      	mov	r0, r2
 800720a:	f001 fa35 	bl	8008678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	08003681 	.word	0x08003681

0800727c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b01      	cmp	r3, #1
 800728e:	d001      	beq.n	8007294 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e04c      	b.n	800732e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2202      	movs	r2, #2
 8007298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a26      	ldr	r2, [pc, #152]	@ (800733c <HAL_TIM_Base_Start+0xc0>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d022      	beq.n	80072ec <HAL_TIM_Base_Start+0x70>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072ae:	d01d      	beq.n	80072ec <HAL_TIM_Base_Start+0x70>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a22      	ldr	r2, [pc, #136]	@ (8007340 <HAL_TIM_Base_Start+0xc4>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d018      	beq.n	80072ec <HAL_TIM_Base_Start+0x70>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a21      	ldr	r2, [pc, #132]	@ (8007344 <HAL_TIM_Base_Start+0xc8>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d013      	beq.n	80072ec <HAL_TIM_Base_Start+0x70>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a1f      	ldr	r2, [pc, #124]	@ (8007348 <HAL_TIM_Base_Start+0xcc>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d00e      	beq.n	80072ec <HAL_TIM_Base_Start+0x70>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a1e      	ldr	r2, [pc, #120]	@ (800734c <HAL_TIM_Base_Start+0xd0>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d009      	beq.n	80072ec <HAL_TIM_Base_Start+0x70>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a1c      	ldr	r2, [pc, #112]	@ (8007350 <HAL_TIM_Base_Start+0xd4>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d004      	beq.n	80072ec <HAL_TIM_Base_Start+0x70>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a1b      	ldr	r2, [pc, #108]	@ (8007354 <HAL_TIM_Base_Start+0xd8>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d115      	bne.n	8007318 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689a      	ldr	r2, [r3, #8]
 80072f2:	4b19      	ldr	r3, [pc, #100]	@ (8007358 <HAL_TIM_Base_Start+0xdc>)
 80072f4:	4013      	ands	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2b06      	cmp	r3, #6
 80072fc:	d015      	beq.n	800732a <HAL_TIM_Base_Start+0xae>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007304:	d011      	beq.n	800732a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f042 0201 	orr.w	r2, r2, #1
 8007314:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007316:	e008      	b.n	800732a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f042 0201 	orr.w	r2, r2, #1
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	e000      	b.n	800732c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800732a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	40012c00 	.word	0x40012c00
 8007340:	40000400 	.word	0x40000400
 8007344:	40000800 	.word	0x40000800
 8007348:	40000c00 	.word	0x40000c00
 800734c:	40013400 	.word	0x40013400
 8007350:	40014000 	.word	0x40014000
 8007354:	40015000 	.word	0x40015000
 8007358:	00010007 	.word	0x00010007

0800735c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b01      	cmp	r3, #1
 800736e:	d001      	beq.n	8007374 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e054      	b.n	800741e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2202      	movs	r2, #2
 8007378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68da      	ldr	r2, [r3, #12]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f042 0201 	orr.w	r2, r2, #1
 800738a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a26      	ldr	r2, [pc, #152]	@ (800742c <HAL_TIM_Base_Start_IT+0xd0>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d022      	beq.n	80073dc <HAL_TIM_Base_Start_IT+0x80>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800739e:	d01d      	beq.n	80073dc <HAL_TIM_Base_Start_IT+0x80>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a22      	ldr	r2, [pc, #136]	@ (8007430 <HAL_TIM_Base_Start_IT+0xd4>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d018      	beq.n	80073dc <HAL_TIM_Base_Start_IT+0x80>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a21      	ldr	r2, [pc, #132]	@ (8007434 <HAL_TIM_Base_Start_IT+0xd8>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d013      	beq.n	80073dc <HAL_TIM_Base_Start_IT+0x80>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a1f      	ldr	r2, [pc, #124]	@ (8007438 <HAL_TIM_Base_Start_IT+0xdc>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d00e      	beq.n	80073dc <HAL_TIM_Base_Start_IT+0x80>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a1e      	ldr	r2, [pc, #120]	@ (800743c <HAL_TIM_Base_Start_IT+0xe0>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d009      	beq.n	80073dc <HAL_TIM_Base_Start_IT+0x80>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a1c      	ldr	r2, [pc, #112]	@ (8007440 <HAL_TIM_Base_Start_IT+0xe4>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d004      	beq.n	80073dc <HAL_TIM_Base_Start_IT+0x80>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a1b      	ldr	r2, [pc, #108]	@ (8007444 <HAL_TIM_Base_Start_IT+0xe8>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d115      	bne.n	8007408 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	689a      	ldr	r2, [r3, #8]
 80073e2:	4b19      	ldr	r3, [pc, #100]	@ (8007448 <HAL_TIM_Base_Start_IT+0xec>)
 80073e4:	4013      	ands	r3, r2
 80073e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b06      	cmp	r3, #6
 80073ec:	d015      	beq.n	800741a <HAL_TIM_Base_Start_IT+0xbe>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073f4:	d011      	beq.n	800741a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f042 0201 	orr.w	r2, r2, #1
 8007404:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007406:	e008      	b.n	800741a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f042 0201 	orr.w	r2, r2, #1
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	e000      	b.n	800741c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800741a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	40012c00 	.word	0x40012c00
 8007430:	40000400 	.word	0x40000400
 8007434:	40000800 	.word	0x40000800
 8007438:	40000c00 	.word	0x40000c00
 800743c:	40013400 	.word	0x40013400
 8007440:	40014000 	.word	0x40014000
 8007444:	40015000 	.word	0x40015000
 8007448:	00010007 	.word	0x00010007

0800744c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e054      	b.n	8007508 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d111      	bne.n	800748e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f001 fda0 	bl	8008fb8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800747c:	2b00      	cmp	r3, #0
 800747e:	d102      	bne.n	8007486 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a23      	ldr	r2, [pc, #140]	@ (8007510 <HAL_TIM_PWM_Init+0xc4>)
 8007484:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2202      	movs	r2, #2
 8007492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	3304      	adds	r3, #4
 800749e:	4619      	mov	r1, r3
 80074a0:	4610      	mov	r0, r2
 80074a2:	f001 f8e9 	bl	8008678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	08007515 	.word	0x08007515

08007514 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d109      	bne.n	800754c <HAL_TIM_PWM_Start+0x24>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b01      	cmp	r3, #1
 8007542:	bf14      	ite	ne
 8007544:	2301      	movne	r3, #1
 8007546:	2300      	moveq	r3, #0
 8007548:	b2db      	uxtb	r3, r3
 800754a:	e03c      	b.n	80075c6 <HAL_TIM_PWM_Start+0x9e>
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2b04      	cmp	r3, #4
 8007550:	d109      	bne.n	8007566 <HAL_TIM_PWM_Start+0x3e>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b01      	cmp	r3, #1
 800755c:	bf14      	ite	ne
 800755e:	2301      	movne	r3, #1
 8007560:	2300      	moveq	r3, #0
 8007562:	b2db      	uxtb	r3, r3
 8007564:	e02f      	b.n	80075c6 <HAL_TIM_PWM_Start+0x9e>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b08      	cmp	r3, #8
 800756a:	d109      	bne.n	8007580 <HAL_TIM_PWM_Start+0x58>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b01      	cmp	r3, #1
 8007576:	bf14      	ite	ne
 8007578:	2301      	movne	r3, #1
 800757a:	2300      	moveq	r3, #0
 800757c:	b2db      	uxtb	r3, r3
 800757e:	e022      	b.n	80075c6 <HAL_TIM_PWM_Start+0x9e>
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2b0c      	cmp	r3, #12
 8007584:	d109      	bne.n	800759a <HAL_TIM_PWM_Start+0x72>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b01      	cmp	r3, #1
 8007590:	bf14      	ite	ne
 8007592:	2301      	movne	r3, #1
 8007594:	2300      	moveq	r3, #0
 8007596:	b2db      	uxtb	r3, r3
 8007598:	e015      	b.n	80075c6 <HAL_TIM_PWM_Start+0x9e>
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b10      	cmp	r3, #16
 800759e:	d109      	bne.n	80075b4 <HAL_TIM_PWM_Start+0x8c>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	bf14      	ite	ne
 80075ac:	2301      	movne	r3, #1
 80075ae:	2300      	moveq	r3, #0
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	e008      	b.n	80075c6 <HAL_TIM_PWM_Start+0x9e>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b01      	cmp	r3, #1
 80075be:	bf14      	ite	ne
 80075c0:	2301      	movne	r3, #1
 80075c2:	2300      	moveq	r3, #0
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d001      	beq.n	80075ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e0a6      	b.n	800771c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d104      	bne.n	80075de <HAL_TIM_PWM_Start+0xb6>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2202      	movs	r2, #2
 80075d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075dc:	e023      	b.n	8007626 <HAL_TIM_PWM_Start+0xfe>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	2b04      	cmp	r3, #4
 80075e2:	d104      	bne.n	80075ee <HAL_TIM_PWM_Start+0xc6>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2202      	movs	r2, #2
 80075e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075ec:	e01b      	b.n	8007626 <HAL_TIM_PWM_Start+0xfe>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2b08      	cmp	r3, #8
 80075f2:	d104      	bne.n	80075fe <HAL_TIM_PWM_Start+0xd6>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075fc:	e013      	b.n	8007626 <HAL_TIM_PWM_Start+0xfe>
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2b0c      	cmp	r3, #12
 8007602:	d104      	bne.n	800760e <HAL_TIM_PWM_Start+0xe6>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2202      	movs	r2, #2
 8007608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800760c:	e00b      	b.n	8007626 <HAL_TIM_PWM_Start+0xfe>
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	2b10      	cmp	r3, #16
 8007612:	d104      	bne.n	800761e <HAL_TIM_PWM_Start+0xf6>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2202      	movs	r2, #2
 8007618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800761c:	e003      	b.n	8007626 <HAL_TIM_PWM_Start+0xfe>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2202      	movs	r2, #2
 8007622:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2201      	movs	r2, #1
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	4618      	mov	r0, r3
 8007630:	f001 fc9c 	bl	8008f6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a3a      	ldr	r2, [pc, #232]	@ (8007724 <HAL_TIM_PWM_Start+0x1fc>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d018      	beq.n	8007670 <HAL_TIM_PWM_Start+0x148>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a39      	ldr	r2, [pc, #228]	@ (8007728 <HAL_TIM_PWM_Start+0x200>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d013      	beq.n	8007670 <HAL_TIM_PWM_Start+0x148>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a37      	ldr	r2, [pc, #220]	@ (800772c <HAL_TIM_PWM_Start+0x204>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d00e      	beq.n	8007670 <HAL_TIM_PWM_Start+0x148>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a36      	ldr	r2, [pc, #216]	@ (8007730 <HAL_TIM_PWM_Start+0x208>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d009      	beq.n	8007670 <HAL_TIM_PWM_Start+0x148>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a34      	ldr	r2, [pc, #208]	@ (8007734 <HAL_TIM_PWM_Start+0x20c>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d004      	beq.n	8007670 <HAL_TIM_PWM_Start+0x148>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a33      	ldr	r2, [pc, #204]	@ (8007738 <HAL_TIM_PWM_Start+0x210>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d101      	bne.n	8007674 <HAL_TIM_PWM_Start+0x14c>
 8007670:	2301      	movs	r3, #1
 8007672:	e000      	b.n	8007676 <HAL_TIM_PWM_Start+0x14e>
 8007674:	2300      	movs	r3, #0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d007      	beq.n	800768a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007688:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a25      	ldr	r2, [pc, #148]	@ (8007724 <HAL_TIM_PWM_Start+0x1fc>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d022      	beq.n	80076da <HAL_TIM_PWM_Start+0x1b2>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800769c:	d01d      	beq.n	80076da <HAL_TIM_PWM_Start+0x1b2>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a26      	ldr	r2, [pc, #152]	@ (800773c <HAL_TIM_PWM_Start+0x214>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d018      	beq.n	80076da <HAL_TIM_PWM_Start+0x1b2>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a24      	ldr	r2, [pc, #144]	@ (8007740 <HAL_TIM_PWM_Start+0x218>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d013      	beq.n	80076da <HAL_TIM_PWM_Start+0x1b2>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a23      	ldr	r2, [pc, #140]	@ (8007744 <HAL_TIM_PWM_Start+0x21c>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d00e      	beq.n	80076da <HAL_TIM_PWM_Start+0x1b2>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a19      	ldr	r2, [pc, #100]	@ (8007728 <HAL_TIM_PWM_Start+0x200>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d009      	beq.n	80076da <HAL_TIM_PWM_Start+0x1b2>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a18      	ldr	r2, [pc, #96]	@ (800772c <HAL_TIM_PWM_Start+0x204>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d004      	beq.n	80076da <HAL_TIM_PWM_Start+0x1b2>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a18      	ldr	r2, [pc, #96]	@ (8007738 <HAL_TIM_PWM_Start+0x210>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d115      	bne.n	8007706 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	689a      	ldr	r2, [r3, #8]
 80076e0:	4b19      	ldr	r3, [pc, #100]	@ (8007748 <HAL_TIM_PWM_Start+0x220>)
 80076e2:	4013      	ands	r3, r2
 80076e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2b06      	cmp	r3, #6
 80076ea:	d015      	beq.n	8007718 <HAL_TIM_PWM_Start+0x1f0>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076f2:	d011      	beq.n	8007718 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f042 0201 	orr.w	r2, r2, #1
 8007702:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007704:	e008      	b.n	8007718 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f042 0201 	orr.w	r2, r2, #1
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	e000      	b.n	800771a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007718:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	40012c00 	.word	0x40012c00
 8007728:	40013400 	.word	0x40013400
 800772c:	40014000 	.word	0x40014000
 8007730:	40014400 	.word	0x40014400
 8007734:	40014800 	.word	0x40014800
 8007738:	40015000 	.word	0x40015000
 800773c:	40000400 	.word	0x40000400
 8007740:	40000800 	.word	0x40000800
 8007744:	40000c00 	.word	0x40000c00
 8007748:	00010007 	.word	0x00010007

0800774c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e04c      	b.n	80077fa <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	d111      	bne.n	8007790 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f001 fc1f 	bl	8008fb8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800777e:	2b00      	cmp	r3, #0
 8007780:	d102      	bne.n	8007788 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a1f      	ldr	r2, [pc, #124]	@ (8007804 <HAL_TIM_OnePulse_Init+0xb8>)
 8007786:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	3304      	adds	r3, #4
 80077a0:	4619      	mov	r1, r3
 80077a2:	4610      	mov	r0, r2
 80077a4:	f000 ff68 	bl	8008678 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 0208 	bic.w	r2, r2, #8
 80077b6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6819      	ldr	r1, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	430a      	orrs	r2, r1
 80077c6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	08007809 	.word	0x08007809

08007808 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800782c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007834:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800783c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007844:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d108      	bne.n	800785e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800784c:	7bbb      	ldrb	r3, [r7, #14]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d105      	bne.n	800785e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007852:	7b7b      	ldrb	r3, [r7, #13]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d102      	bne.n	800785e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007858:	7b3b      	ldrb	r3, [r7, #12]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d001      	beq.n	8007862 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e059      	b.n	8007916 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2202      	movs	r2, #2
 8007866:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2202      	movs	r2, #2
 800786e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2202      	movs	r2, #2
 8007876:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2202      	movs	r2, #2
 800787e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68da      	ldr	r2, [r3, #12]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f042 0202 	orr.w	r2, r2, #2
 8007890:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68da      	ldr	r2, [r3, #12]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f042 0204 	orr.w	r2, r2, #4
 80078a0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2201      	movs	r2, #1
 80078a8:	2100      	movs	r1, #0
 80078aa:	4618      	mov	r0, r3
 80078ac:	f001 fb5e 	bl	8008f6c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2201      	movs	r2, #1
 80078b6:	2104      	movs	r1, #4
 80078b8:	4618      	mov	r0, r3
 80078ba:	f001 fb57 	bl	8008f6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a17      	ldr	r2, [pc, #92]	@ (8007920 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d018      	beq.n	80078fa <HAL_TIM_OnePulse_Start_IT+0xde>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a15      	ldr	r2, [pc, #84]	@ (8007924 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d013      	beq.n	80078fa <HAL_TIM_OnePulse_Start_IT+0xde>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a14      	ldr	r2, [pc, #80]	@ (8007928 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d00e      	beq.n	80078fa <HAL_TIM_OnePulse_Start_IT+0xde>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a12      	ldr	r2, [pc, #72]	@ (800792c <HAL_TIM_OnePulse_Start_IT+0x110>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d009      	beq.n	80078fa <HAL_TIM_OnePulse_Start_IT+0xde>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a11      	ldr	r2, [pc, #68]	@ (8007930 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d004      	beq.n	80078fa <HAL_TIM_OnePulse_Start_IT+0xde>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a0f      	ldr	r2, [pc, #60]	@ (8007934 <HAL_TIM_OnePulse_Start_IT+0x118>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d101      	bne.n	80078fe <HAL_TIM_OnePulse_Start_IT+0xe2>
 80078fa:	2301      	movs	r3, #1
 80078fc:	e000      	b.n	8007900 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80078fe:	2300      	movs	r3, #0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d007      	beq.n	8007914 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007912:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	40012c00 	.word	0x40012c00
 8007924:	40013400 	.word	0x40013400
 8007928:	40014000 	.word	0x40014000
 800792c:	40014400 	.word	0x40014400
 8007930:	40014800 	.word	0x40014800
 8007934:	40015000 	.word	0x40015000

08007938 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e0a2      	b.n	8007a92 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b00      	cmp	r3, #0
 8007956:	d111      	bne.n	800797c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f001 fb29 	bl	8008fb8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800796a:	2b00      	cmp	r3, #0
 800796c:	d102      	bne.n	8007974 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a4a      	ldr	r2, [pc, #296]	@ (8007a9c <HAL_TIM_Encoder_Init+0x164>)
 8007972:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2202      	movs	r2, #2
 8007980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	6812      	ldr	r2, [r2, #0]
 800798e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007992:	f023 0307 	bic.w	r3, r3, #7
 8007996:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	3304      	adds	r3, #4
 80079a0:	4619      	mov	r1, r3
 80079a2:	4610      	mov	r0, r2
 80079a4:	f000 fe68 	bl	8008678 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079d0:	f023 0303 	bic.w	r3, r3, #3
 80079d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	689a      	ldr	r2, [r3, #8]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	021b      	lsls	r3, r3, #8
 80079e0:	4313      	orrs	r3, r2
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80079ee:	f023 030c 	bic.w	r3, r3, #12
 80079f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80079fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80079fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	68da      	ldr	r2, [r3, #12]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	69db      	ldr	r3, [r3, #28]
 8007a08:	021b      	lsls	r3, r3, #8
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	011a      	lsls	r2, r3, #4
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	6a1b      	ldr	r3, [r3, #32]
 8007a1c:	031b      	lsls	r3, r3, #12
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007a2c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007a34:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	685a      	ldr	r2, [r3, #4]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	011b      	lsls	r3, r3, #4
 8007a40:	4313      	orrs	r3, r2
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	693a      	ldr	r2, [r7, #16]
 8007a56:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3718      	adds	r7, #24
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	08003751 	.word	0x08003751

08007aa0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ab0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ab8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ac0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ac8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d110      	bne.n	8007af2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d102      	bne.n	8007adc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ad6:	7b7b      	ldrb	r3, [r7, #13]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d001      	beq.n	8007ae0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e069      	b.n	8007bb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2202      	movs	r2, #2
 8007aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007af0:	e031      	b.n	8007b56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b04      	cmp	r3, #4
 8007af6:	d110      	bne.n	8007b1a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007af8:	7bbb      	ldrb	r3, [r7, #14]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d102      	bne.n	8007b04 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007afe:	7b3b      	ldrb	r3, [r7, #12]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d001      	beq.n	8007b08 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e055      	b.n	8007bb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2202      	movs	r2, #2
 8007b14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b18:	e01d      	b.n	8007b56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d108      	bne.n	8007b32 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b20:	7bbb      	ldrb	r3, [r7, #14]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d105      	bne.n	8007b32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b26:	7b7b      	ldrb	r3, [r7, #13]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d102      	bne.n	8007b32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b2c:	7b3b      	ldrb	r3, [r7, #12]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d001      	beq.n	8007b36 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e03e      	b.n	8007bb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2202      	movs	r2, #2
 8007b3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2202      	movs	r2, #2
 8007b42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2202      	movs	r2, #2
 8007b4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2202      	movs	r2, #2
 8007b52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d003      	beq.n	8007b64 <HAL_TIM_Encoder_Start+0xc4>
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2b04      	cmp	r3, #4
 8007b60:	d008      	beq.n	8007b74 <HAL_TIM_Encoder_Start+0xd4>
 8007b62:	e00f      	b.n	8007b84 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f001 f9fd 	bl	8008f6c <TIM_CCxChannelCmd>
      break;
 8007b72:	e016      	b.n	8007ba2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	2104      	movs	r1, #4
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f001 f9f5 	bl	8008f6c <TIM_CCxChannelCmd>
      break;
 8007b82:	e00e      	b.n	8007ba2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f001 f9ed 	bl	8008f6c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2201      	movs	r2, #1
 8007b98:	2104      	movs	r1, #4
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f001 f9e6 	bl	8008f6c <TIM_CCxChannelCmd>
      break;
 8007ba0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f042 0201 	orr.w	r2, r2, #1
 8007bb0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	f003 0302 	and.w	r3, r3, #2
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d026      	beq.n	8007c2c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f003 0302 	and.w	r3, r3, #2
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d021      	beq.n	8007c2c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f06f 0202 	mvn.w	r2, #2
 8007bf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	f003 0303 	and.w	r3, r3, #3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d005      	beq.n	8007c12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	4798      	blx	r3
 8007c10:	e009      	b.n	8007c26 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	f003 0304 	and.w	r3, r3, #4
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d026      	beq.n	8007c84 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f003 0304 	and.w	r3, r3, #4
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d021      	beq.n	8007c84 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f06f 0204 	mvn.w	r2, #4
 8007c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d005      	beq.n	8007c6a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	4798      	blx	r3
 8007c68:	e009      	b.n	8007c7e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	f003 0308 	and.w	r3, r3, #8
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d026      	beq.n	8007cdc <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f003 0308 	and.w	r3, r3, #8
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d021      	beq.n	8007cdc <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f06f 0208 	mvn.w	r2, #8
 8007ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2204      	movs	r2, #4
 8007ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	69db      	ldr	r3, [r3, #28]
 8007cae:	f003 0303 	and.w	r3, r3, #3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d005      	beq.n	8007cc2 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	4798      	blx	r3
 8007cc0:	e009      	b.n	8007cd6 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	f003 0310 	and.w	r3, r3, #16
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d026      	beq.n	8007d34 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f003 0310 	and.w	r3, r3, #16
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d021      	beq.n	8007d34 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f06f 0210 	mvn.w	r2, #16
 8007cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2208      	movs	r2, #8
 8007cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d005      	beq.n	8007d1a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	4798      	blx	r3
 8007d18:	e009      	b.n	8007d2e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00e      	beq.n	8007d5c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d009      	beq.n	8007d5c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f06f 0201 	mvn.w	r2, #1
 8007d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d104      	bne.n	8007d70 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00e      	beq.n	8007d8e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d009      	beq.n	8007d8e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00e      	beq.n	8007db6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d009      	beq.n	8007db6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00e      	beq.n	8007dde <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d009      	beq.n	8007dde <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	f003 0320 	and.w	r3, r3, #32
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00e      	beq.n	8007e06 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f003 0320 	and.w	r3, r3, #32
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d009      	beq.n	8007e06 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f06f 0220 	mvn.w	r2, #32
 8007dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00e      	beq.n	8007e2e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d009      	beq.n	8007e2e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00e      	beq.n	8007e56 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d009      	beq.n	8007e56 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00e      	beq.n	8007e7e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d009      	beq.n	8007e7e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00e      	beq.n	8007ea6 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d009      	beq.n	8007ea6 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ea6:	bf00      	nop
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
	...

08007eb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d101      	bne.n	8007ece <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007eca:	2302      	movs	r3, #2
 8007ecc:	e0ff      	b.n	80080ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2b14      	cmp	r3, #20
 8007eda:	f200 80f0 	bhi.w	80080be <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007ede:	a201      	add	r2, pc, #4	@ (adr r2, 8007ee4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee4:	08007f39 	.word	0x08007f39
 8007ee8:	080080bf 	.word	0x080080bf
 8007eec:	080080bf 	.word	0x080080bf
 8007ef0:	080080bf 	.word	0x080080bf
 8007ef4:	08007f79 	.word	0x08007f79
 8007ef8:	080080bf 	.word	0x080080bf
 8007efc:	080080bf 	.word	0x080080bf
 8007f00:	080080bf 	.word	0x080080bf
 8007f04:	08007fbb 	.word	0x08007fbb
 8007f08:	080080bf 	.word	0x080080bf
 8007f0c:	080080bf 	.word	0x080080bf
 8007f10:	080080bf 	.word	0x080080bf
 8007f14:	08007ffb 	.word	0x08007ffb
 8007f18:	080080bf 	.word	0x080080bf
 8007f1c:	080080bf 	.word	0x080080bf
 8007f20:	080080bf 	.word	0x080080bf
 8007f24:	0800803d 	.word	0x0800803d
 8007f28:	080080bf 	.word	0x080080bf
 8007f2c:	080080bf 	.word	0x080080bf
 8007f30:	080080bf 	.word	0x080080bf
 8007f34:	0800807d 	.word	0x0800807d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68b9      	ldr	r1, [r7, #8]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 fc4e 	bl	80087e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	699a      	ldr	r2, [r3, #24]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f042 0208 	orr.w	r2, r2, #8
 8007f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	699a      	ldr	r2, [r3, #24]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f022 0204 	bic.w	r2, r2, #4
 8007f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6999      	ldr	r1, [r3, #24]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	691a      	ldr	r2, [r3, #16]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	430a      	orrs	r2, r1
 8007f74:	619a      	str	r2, [r3, #24]
      break;
 8007f76:	e0a5      	b.n	80080c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68b9      	ldr	r1, [r7, #8]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 fcc8 	bl	8008914 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	699a      	ldr	r2, [r3, #24]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	699a      	ldr	r2, [r3, #24]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6999      	ldr	r1, [r3, #24]
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	021a      	lsls	r2, r3, #8
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	619a      	str	r2, [r3, #24]
      break;
 8007fb8:	e084      	b.n	80080c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68b9      	ldr	r1, [r7, #8]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 fd3b 	bl	8008a3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	69da      	ldr	r2, [r3, #28]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f042 0208 	orr.w	r2, r2, #8
 8007fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	69da      	ldr	r2, [r3, #28]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 0204 	bic.w	r2, r2, #4
 8007fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	69d9      	ldr	r1, [r3, #28]
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	691a      	ldr	r2, [r3, #16]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	430a      	orrs	r2, r1
 8007ff6:	61da      	str	r2, [r3, #28]
      break;
 8007ff8:	e064      	b.n	80080c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68b9      	ldr	r1, [r7, #8]
 8008000:	4618      	mov	r0, r3
 8008002:	f000 fdad 	bl	8008b60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	69da      	ldr	r2, [r3, #28]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008014:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	69da      	ldr	r2, [r3, #28]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008024:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	69d9      	ldr	r1, [r3, #28]
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	021a      	lsls	r2, r3, #8
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	430a      	orrs	r2, r1
 8008038:	61da      	str	r2, [r3, #28]
      break;
 800803a:	e043      	b.n	80080c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68b9      	ldr	r1, [r7, #8]
 8008042:	4618      	mov	r0, r3
 8008044:	f000 fe20 	bl	8008c88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f042 0208 	orr.w	r2, r2, #8
 8008056:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f022 0204 	bic.w	r2, r2, #4
 8008066:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	691a      	ldr	r2, [r3, #16]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	430a      	orrs	r2, r1
 8008078:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800807a:	e023      	b.n	80080c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68b9      	ldr	r1, [r7, #8]
 8008082:	4618      	mov	r0, r3
 8008084:	f000 fe6a 	bl	8008d5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008096:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080a6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	021a      	lsls	r2, r3, #8
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	430a      	orrs	r2, r1
 80080ba:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80080bc:	e002      	b.n	80080c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	75fb      	strb	r3, [r7, #23]
      break;
 80080c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3718      	adds	r7, #24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop

080080d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d101      	bne.n	80080f4 <HAL_TIM_ConfigClockSource+0x1c>
 80080f0:	2302      	movs	r3, #2
 80080f2:	e0f6      	b.n	80082e2 <HAL_TIM_ConfigClockSource+0x20a>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2202      	movs	r2, #2
 8008100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008112:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800811e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a6f      	ldr	r2, [pc, #444]	@ (80082ec <HAL_TIM_ConfigClockSource+0x214>)
 800812e:	4293      	cmp	r3, r2
 8008130:	f000 80c1 	beq.w	80082b6 <HAL_TIM_ConfigClockSource+0x1de>
 8008134:	4a6d      	ldr	r2, [pc, #436]	@ (80082ec <HAL_TIM_ConfigClockSource+0x214>)
 8008136:	4293      	cmp	r3, r2
 8008138:	f200 80c6 	bhi.w	80082c8 <HAL_TIM_ConfigClockSource+0x1f0>
 800813c:	4a6c      	ldr	r2, [pc, #432]	@ (80082f0 <HAL_TIM_ConfigClockSource+0x218>)
 800813e:	4293      	cmp	r3, r2
 8008140:	f000 80b9 	beq.w	80082b6 <HAL_TIM_ConfigClockSource+0x1de>
 8008144:	4a6a      	ldr	r2, [pc, #424]	@ (80082f0 <HAL_TIM_ConfigClockSource+0x218>)
 8008146:	4293      	cmp	r3, r2
 8008148:	f200 80be 	bhi.w	80082c8 <HAL_TIM_ConfigClockSource+0x1f0>
 800814c:	4a69      	ldr	r2, [pc, #420]	@ (80082f4 <HAL_TIM_ConfigClockSource+0x21c>)
 800814e:	4293      	cmp	r3, r2
 8008150:	f000 80b1 	beq.w	80082b6 <HAL_TIM_ConfigClockSource+0x1de>
 8008154:	4a67      	ldr	r2, [pc, #412]	@ (80082f4 <HAL_TIM_ConfigClockSource+0x21c>)
 8008156:	4293      	cmp	r3, r2
 8008158:	f200 80b6 	bhi.w	80082c8 <HAL_TIM_ConfigClockSource+0x1f0>
 800815c:	4a66      	ldr	r2, [pc, #408]	@ (80082f8 <HAL_TIM_ConfigClockSource+0x220>)
 800815e:	4293      	cmp	r3, r2
 8008160:	f000 80a9 	beq.w	80082b6 <HAL_TIM_ConfigClockSource+0x1de>
 8008164:	4a64      	ldr	r2, [pc, #400]	@ (80082f8 <HAL_TIM_ConfigClockSource+0x220>)
 8008166:	4293      	cmp	r3, r2
 8008168:	f200 80ae 	bhi.w	80082c8 <HAL_TIM_ConfigClockSource+0x1f0>
 800816c:	4a63      	ldr	r2, [pc, #396]	@ (80082fc <HAL_TIM_ConfigClockSource+0x224>)
 800816e:	4293      	cmp	r3, r2
 8008170:	f000 80a1 	beq.w	80082b6 <HAL_TIM_ConfigClockSource+0x1de>
 8008174:	4a61      	ldr	r2, [pc, #388]	@ (80082fc <HAL_TIM_ConfigClockSource+0x224>)
 8008176:	4293      	cmp	r3, r2
 8008178:	f200 80a6 	bhi.w	80082c8 <HAL_TIM_ConfigClockSource+0x1f0>
 800817c:	4a60      	ldr	r2, [pc, #384]	@ (8008300 <HAL_TIM_ConfigClockSource+0x228>)
 800817e:	4293      	cmp	r3, r2
 8008180:	f000 8099 	beq.w	80082b6 <HAL_TIM_ConfigClockSource+0x1de>
 8008184:	4a5e      	ldr	r2, [pc, #376]	@ (8008300 <HAL_TIM_ConfigClockSource+0x228>)
 8008186:	4293      	cmp	r3, r2
 8008188:	f200 809e 	bhi.w	80082c8 <HAL_TIM_ConfigClockSource+0x1f0>
 800818c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008190:	f000 8091 	beq.w	80082b6 <HAL_TIM_ConfigClockSource+0x1de>
 8008194:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008198:	f200 8096 	bhi.w	80082c8 <HAL_TIM_ConfigClockSource+0x1f0>
 800819c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081a0:	f000 8089 	beq.w	80082b6 <HAL_TIM_ConfigClockSource+0x1de>
 80081a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081a8:	f200 808e 	bhi.w	80082c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80081ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081b0:	d03e      	beq.n	8008230 <HAL_TIM_ConfigClockSource+0x158>
 80081b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081b6:	f200 8087 	bhi.w	80082c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80081ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081be:	f000 8086 	beq.w	80082ce <HAL_TIM_ConfigClockSource+0x1f6>
 80081c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081c6:	d87f      	bhi.n	80082c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80081c8:	2b70      	cmp	r3, #112	@ 0x70
 80081ca:	d01a      	beq.n	8008202 <HAL_TIM_ConfigClockSource+0x12a>
 80081cc:	2b70      	cmp	r3, #112	@ 0x70
 80081ce:	d87b      	bhi.n	80082c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80081d0:	2b60      	cmp	r3, #96	@ 0x60
 80081d2:	d050      	beq.n	8008276 <HAL_TIM_ConfigClockSource+0x19e>
 80081d4:	2b60      	cmp	r3, #96	@ 0x60
 80081d6:	d877      	bhi.n	80082c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80081d8:	2b50      	cmp	r3, #80	@ 0x50
 80081da:	d03c      	beq.n	8008256 <HAL_TIM_ConfigClockSource+0x17e>
 80081dc:	2b50      	cmp	r3, #80	@ 0x50
 80081de:	d873      	bhi.n	80082c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80081e0:	2b40      	cmp	r3, #64	@ 0x40
 80081e2:	d058      	beq.n	8008296 <HAL_TIM_ConfigClockSource+0x1be>
 80081e4:	2b40      	cmp	r3, #64	@ 0x40
 80081e6:	d86f      	bhi.n	80082c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80081e8:	2b30      	cmp	r3, #48	@ 0x30
 80081ea:	d064      	beq.n	80082b6 <HAL_TIM_ConfigClockSource+0x1de>
 80081ec:	2b30      	cmp	r3, #48	@ 0x30
 80081ee:	d86b      	bhi.n	80082c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80081f0:	2b20      	cmp	r3, #32
 80081f2:	d060      	beq.n	80082b6 <HAL_TIM_ConfigClockSource+0x1de>
 80081f4:	2b20      	cmp	r3, #32
 80081f6:	d867      	bhi.n	80082c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d05c      	beq.n	80082b6 <HAL_TIM_ConfigClockSource+0x1de>
 80081fc:	2b10      	cmp	r3, #16
 80081fe:	d05a      	beq.n	80082b6 <HAL_TIM_ConfigClockSource+0x1de>
 8008200:	e062      	b.n	80082c8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008212:	f000 fe8b 	bl	8008f2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008224:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	609a      	str	r2, [r3, #8]
      break;
 800822e:	e04f      	b.n	80082d0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008240:	f000 fe74 	bl	8008f2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	689a      	ldr	r2, [r3, #8]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008252:	609a      	str	r2, [r3, #8]
      break;
 8008254:	e03c      	b.n	80082d0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008262:	461a      	mov	r2, r3
 8008264:	f000 fde6 	bl	8008e34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2150      	movs	r1, #80	@ 0x50
 800826e:	4618      	mov	r0, r3
 8008270:	f000 fe3f 	bl	8008ef2 <TIM_ITRx_SetConfig>
      break;
 8008274:	e02c      	b.n	80082d0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008282:	461a      	mov	r2, r3
 8008284:	f000 fe05 	bl	8008e92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2160      	movs	r1, #96	@ 0x60
 800828e:	4618      	mov	r0, r3
 8008290:	f000 fe2f 	bl	8008ef2 <TIM_ITRx_SetConfig>
      break;
 8008294:	e01c      	b.n	80082d0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082a2:	461a      	mov	r2, r3
 80082a4:	f000 fdc6 	bl	8008e34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2140      	movs	r1, #64	@ 0x40
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 fe1f 	bl	8008ef2 <TIM_ITRx_SetConfig>
      break;
 80082b4:	e00c      	b.n	80082d0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4619      	mov	r1, r3
 80082c0:	4610      	mov	r0, r2
 80082c2:	f000 fe16 	bl	8008ef2 <TIM_ITRx_SetConfig>
      break;
 80082c6:	e003      	b.n	80082d0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	73fb      	strb	r3, [r7, #15]
      break;
 80082cc:	e000      	b.n	80082d0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80082ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	00100070 	.word	0x00100070
 80082f0:	00100060 	.word	0x00100060
 80082f4:	00100050 	.word	0x00100050
 80082f8:	00100040 	.word	0x00100040
 80082fc:	00100030 	.word	0x00100030
 8008300:	00100020 	.word	0x00100020

08008304 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b087      	sub	sp, #28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	460b      	mov	r3, r1
 80083c2:	607a      	str	r2, [r7, #4]
 80083c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d101      	bne.n	80083d4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e14a      	b.n	800866a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b01      	cmp	r3, #1
 80083de:	f040 80dd 	bne.w	800859c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80083e2:	7afb      	ldrb	r3, [r7, #11]
 80083e4:	2b1f      	cmp	r3, #31
 80083e6:	f200 80d6 	bhi.w	8008596 <HAL_TIM_RegisterCallback+0x1de>
 80083ea:	a201      	add	r2, pc, #4	@ (adr r2, 80083f0 <HAL_TIM_RegisterCallback+0x38>)
 80083ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f0:	08008471 	.word	0x08008471
 80083f4:	08008479 	.word	0x08008479
 80083f8:	08008481 	.word	0x08008481
 80083fc:	08008489 	.word	0x08008489
 8008400:	08008491 	.word	0x08008491
 8008404:	08008499 	.word	0x08008499
 8008408:	080084a1 	.word	0x080084a1
 800840c:	080084a9 	.word	0x080084a9
 8008410:	080084b1 	.word	0x080084b1
 8008414:	080084b9 	.word	0x080084b9
 8008418:	080084c1 	.word	0x080084c1
 800841c:	080084c9 	.word	0x080084c9
 8008420:	080084d1 	.word	0x080084d1
 8008424:	080084d9 	.word	0x080084d9
 8008428:	080084e3 	.word	0x080084e3
 800842c:	080084ed 	.word	0x080084ed
 8008430:	080084f7 	.word	0x080084f7
 8008434:	08008501 	.word	0x08008501
 8008438:	0800850b 	.word	0x0800850b
 800843c:	08008515 	.word	0x08008515
 8008440:	0800851f 	.word	0x0800851f
 8008444:	08008529 	.word	0x08008529
 8008448:	08008533 	.word	0x08008533
 800844c:	0800853d 	.word	0x0800853d
 8008450:	08008547 	.word	0x08008547
 8008454:	08008551 	.word	0x08008551
 8008458:	0800855b 	.word	0x0800855b
 800845c:	08008565 	.word	0x08008565
 8008460:	0800856f 	.word	0x0800856f
 8008464:	08008579 	.word	0x08008579
 8008468:	08008583 	.word	0x08008583
 800846c:	0800858d 	.word	0x0800858d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008476:	e0f7      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800847e:	e0f3      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008486:	e0ef      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800848e:	e0eb      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008496:	e0e7      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800849e:	e0e3      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80084a6:	e0df      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80084ae:	e0db      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80084b6:	e0d7      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80084be:	e0d3      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80084c6:	e0cf      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80084ce:	e0cb      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80084d6:	e0c7      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80084e0:	e0c2      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80084ea:	e0bd      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80084f4:	e0b8      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80084fe:	e0b3      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008508:	e0ae      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008512:	e0a9      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800851c:	e0a4      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008526:	e09f      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008530:	e09a      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800853a:	e095      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008544:	e090      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800854e:	e08b      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008558:	e086      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008562:	e081      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800856c:	e07c      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008576:	e077      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008580:	e072      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800858a:	e06d      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008594:	e068      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	75fb      	strb	r3, [r7, #23]
        break;
 800859a:	e065      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d15d      	bne.n	8008664 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80085a8:	7afb      	ldrb	r3, [r7, #11]
 80085aa:	2b0d      	cmp	r3, #13
 80085ac:	d857      	bhi.n	800865e <HAL_TIM_RegisterCallback+0x2a6>
 80085ae:	a201      	add	r2, pc, #4	@ (adr r2, 80085b4 <HAL_TIM_RegisterCallback+0x1fc>)
 80085b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b4:	080085ed 	.word	0x080085ed
 80085b8:	080085f5 	.word	0x080085f5
 80085bc:	080085fd 	.word	0x080085fd
 80085c0:	08008605 	.word	0x08008605
 80085c4:	0800860d 	.word	0x0800860d
 80085c8:	08008615 	.word	0x08008615
 80085cc:	0800861d 	.word	0x0800861d
 80085d0:	08008625 	.word	0x08008625
 80085d4:	0800862d 	.word	0x0800862d
 80085d8:	08008635 	.word	0x08008635
 80085dc:	0800863d 	.word	0x0800863d
 80085e0:	08008645 	.word	0x08008645
 80085e4:	0800864d 	.word	0x0800864d
 80085e8:	08008655 	.word	0x08008655
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80085f2:	e039      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80085fa:	e035      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008602:	e031      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800860a:	e02d      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008612:	e029      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800861a:	e025      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008622:	e021      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800862a:	e01d      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008632:	e019      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800863a:	e015      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008642:	e011      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800864a:	e00d      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008652:	e009      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800865c:	e004      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	75fb      	strb	r3, [r7, #23]
        break;
 8008662:	e001      	b.n	8008668 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008668:	7dfb      	ldrb	r3, [r7, #23]
}
 800866a:	4618      	mov	r0, r3
 800866c:	371c      	adds	r7, #28
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop

08008678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a4c      	ldr	r2, [pc, #304]	@ (80087bc <TIM_Base_SetConfig+0x144>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d017      	beq.n	80086c0 <TIM_Base_SetConfig+0x48>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008696:	d013      	beq.n	80086c0 <TIM_Base_SetConfig+0x48>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a49      	ldr	r2, [pc, #292]	@ (80087c0 <TIM_Base_SetConfig+0x148>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d00f      	beq.n	80086c0 <TIM_Base_SetConfig+0x48>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a48      	ldr	r2, [pc, #288]	@ (80087c4 <TIM_Base_SetConfig+0x14c>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d00b      	beq.n	80086c0 <TIM_Base_SetConfig+0x48>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a47      	ldr	r2, [pc, #284]	@ (80087c8 <TIM_Base_SetConfig+0x150>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d007      	beq.n	80086c0 <TIM_Base_SetConfig+0x48>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a46      	ldr	r2, [pc, #280]	@ (80087cc <TIM_Base_SetConfig+0x154>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d003      	beq.n	80086c0 <TIM_Base_SetConfig+0x48>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a45      	ldr	r2, [pc, #276]	@ (80087d0 <TIM_Base_SetConfig+0x158>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d108      	bne.n	80086d2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a39      	ldr	r2, [pc, #228]	@ (80087bc <TIM_Base_SetConfig+0x144>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d023      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086e0:	d01f      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a36      	ldr	r2, [pc, #216]	@ (80087c0 <TIM_Base_SetConfig+0x148>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d01b      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a35      	ldr	r2, [pc, #212]	@ (80087c4 <TIM_Base_SetConfig+0x14c>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d017      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a34      	ldr	r2, [pc, #208]	@ (80087c8 <TIM_Base_SetConfig+0x150>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d013      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a33      	ldr	r2, [pc, #204]	@ (80087cc <TIM_Base_SetConfig+0x154>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d00f      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a33      	ldr	r2, [pc, #204]	@ (80087d4 <TIM_Base_SetConfig+0x15c>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d00b      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a32      	ldr	r2, [pc, #200]	@ (80087d8 <TIM_Base_SetConfig+0x160>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d007      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a31      	ldr	r2, [pc, #196]	@ (80087dc <TIM_Base_SetConfig+0x164>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d003      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a2c      	ldr	r2, [pc, #176]	@ (80087d0 <TIM_Base_SetConfig+0x158>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d108      	bne.n	8008734 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	4313      	orrs	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	689a      	ldr	r2, [r3, #8]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a18      	ldr	r2, [pc, #96]	@ (80087bc <TIM_Base_SetConfig+0x144>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d013      	beq.n	8008788 <TIM_Base_SetConfig+0x110>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a1a      	ldr	r2, [pc, #104]	@ (80087cc <TIM_Base_SetConfig+0x154>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d00f      	beq.n	8008788 <TIM_Base_SetConfig+0x110>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a1a      	ldr	r2, [pc, #104]	@ (80087d4 <TIM_Base_SetConfig+0x15c>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d00b      	beq.n	8008788 <TIM_Base_SetConfig+0x110>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a19      	ldr	r2, [pc, #100]	@ (80087d8 <TIM_Base_SetConfig+0x160>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d007      	beq.n	8008788 <TIM_Base_SetConfig+0x110>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a18      	ldr	r2, [pc, #96]	@ (80087dc <TIM_Base_SetConfig+0x164>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d003      	beq.n	8008788 <TIM_Base_SetConfig+0x110>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a13      	ldr	r2, [pc, #76]	@ (80087d0 <TIM_Base_SetConfig+0x158>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d103      	bne.n	8008790 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	691a      	ldr	r2, [r3, #16]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d105      	bne.n	80087ae <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	f023 0201 	bic.w	r2, r3, #1
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	611a      	str	r2, [r3, #16]
  }
}
 80087ae:	bf00      	nop
 80087b0:	3714      	adds	r7, #20
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	40012c00 	.word	0x40012c00
 80087c0:	40000400 	.word	0x40000400
 80087c4:	40000800 	.word	0x40000800
 80087c8:	40000c00 	.word	0x40000c00
 80087cc:	40013400 	.word	0x40013400
 80087d0:	40015000 	.word	0x40015000
 80087d4:	40014000 	.word	0x40014000
 80087d8:	40014400 	.word	0x40014400
 80087dc:	40014800 	.word	0x40014800

080087e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b087      	sub	sp, #28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a1b      	ldr	r3, [r3, #32]
 80087f4:	f023 0201 	bic.w	r2, r3, #1
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800880e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f023 0303 	bic.w	r3, r3, #3
 800881a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	4313      	orrs	r3, r2
 8008824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	f023 0302 	bic.w	r3, r3, #2
 800882c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	4313      	orrs	r3, r2
 8008836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a30      	ldr	r2, [pc, #192]	@ (80088fc <TIM_OC1_SetConfig+0x11c>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d013      	beq.n	8008868 <TIM_OC1_SetConfig+0x88>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a2f      	ldr	r2, [pc, #188]	@ (8008900 <TIM_OC1_SetConfig+0x120>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d00f      	beq.n	8008868 <TIM_OC1_SetConfig+0x88>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a2e      	ldr	r2, [pc, #184]	@ (8008904 <TIM_OC1_SetConfig+0x124>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d00b      	beq.n	8008868 <TIM_OC1_SetConfig+0x88>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a2d      	ldr	r2, [pc, #180]	@ (8008908 <TIM_OC1_SetConfig+0x128>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d007      	beq.n	8008868 <TIM_OC1_SetConfig+0x88>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a2c      	ldr	r2, [pc, #176]	@ (800890c <TIM_OC1_SetConfig+0x12c>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d003      	beq.n	8008868 <TIM_OC1_SetConfig+0x88>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a2b      	ldr	r2, [pc, #172]	@ (8008910 <TIM_OC1_SetConfig+0x130>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d10c      	bne.n	8008882 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	f023 0308 	bic.w	r3, r3, #8
 800886e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	697a      	ldr	r2, [r7, #20]
 8008876:	4313      	orrs	r3, r2
 8008878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	f023 0304 	bic.w	r3, r3, #4
 8008880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a1d      	ldr	r2, [pc, #116]	@ (80088fc <TIM_OC1_SetConfig+0x11c>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d013      	beq.n	80088b2 <TIM_OC1_SetConfig+0xd2>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a1c      	ldr	r2, [pc, #112]	@ (8008900 <TIM_OC1_SetConfig+0x120>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d00f      	beq.n	80088b2 <TIM_OC1_SetConfig+0xd2>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a1b      	ldr	r2, [pc, #108]	@ (8008904 <TIM_OC1_SetConfig+0x124>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d00b      	beq.n	80088b2 <TIM_OC1_SetConfig+0xd2>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a1a      	ldr	r2, [pc, #104]	@ (8008908 <TIM_OC1_SetConfig+0x128>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d007      	beq.n	80088b2 <TIM_OC1_SetConfig+0xd2>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a19      	ldr	r2, [pc, #100]	@ (800890c <TIM_OC1_SetConfig+0x12c>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d003      	beq.n	80088b2 <TIM_OC1_SetConfig+0xd2>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a18      	ldr	r2, [pc, #96]	@ (8008910 <TIM_OC1_SetConfig+0x130>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d111      	bne.n	80088d6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80088c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	685a      	ldr	r2, [r3, #4]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	697a      	ldr	r2, [r7, #20]
 80088ee:	621a      	str	r2, [r3, #32]
}
 80088f0:	bf00      	nop
 80088f2:	371c      	adds	r7, #28
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	40012c00 	.word	0x40012c00
 8008900:	40013400 	.word	0x40013400
 8008904:	40014000 	.word	0x40014000
 8008908:	40014400 	.word	0x40014400
 800890c:	40014800 	.word	0x40014800
 8008910:	40015000 	.word	0x40015000

08008914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008914:	b480      	push	{r7}
 8008916:	b087      	sub	sp, #28
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a1b      	ldr	r3, [r3, #32]
 8008928:	f023 0210 	bic.w	r2, r3, #16
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008942:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800894e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	021b      	lsls	r3, r3, #8
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	4313      	orrs	r3, r2
 800895a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	f023 0320 	bic.w	r3, r3, #32
 8008962:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	011b      	lsls	r3, r3, #4
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	4313      	orrs	r3, r2
 800896e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a2c      	ldr	r2, [pc, #176]	@ (8008a24 <TIM_OC2_SetConfig+0x110>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d007      	beq.n	8008988 <TIM_OC2_SetConfig+0x74>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a2b      	ldr	r2, [pc, #172]	@ (8008a28 <TIM_OC2_SetConfig+0x114>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d003      	beq.n	8008988 <TIM_OC2_SetConfig+0x74>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a2a      	ldr	r2, [pc, #168]	@ (8008a2c <TIM_OC2_SetConfig+0x118>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d10d      	bne.n	80089a4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800898e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	011b      	lsls	r3, r3, #4
 8008996:	697a      	ldr	r2, [r7, #20]
 8008998:	4313      	orrs	r3, r2
 800899a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a1f      	ldr	r2, [pc, #124]	@ (8008a24 <TIM_OC2_SetConfig+0x110>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d013      	beq.n	80089d4 <TIM_OC2_SetConfig+0xc0>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008a28 <TIM_OC2_SetConfig+0x114>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d00f      	beq.n	80089d4 <TIM_OC2_SetConfig+0xc0>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a1e      	ldr	r2, [pc, #120]	@ (8008a30 <TIM_OC2_SetConfig+0x11c>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d00b      	beq.n	80089d4 <TIM_OC2_SetConfig+0xc0>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a1d      	ldr	r2, [pc, #116]	@ (8008a34 <TIM_OC2_SetConfig+0x120>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d007      	beq.n	80089d4 <TIM_OC2_SetConfig+0xc0>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a1c      	ldr	r2, [pc, #112]	@ (8008a38 <TIM_OC2_SetConfig+0x124>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d003      	beq.n	80089d4 <TIM_OC2_SetConfig+0xc0>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a17      	ldr	r2, [pc, #92]	@ (8008a2c <TIM_OC2_SetConfig+0x118>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d113      	bne.n	80089fc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80089da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80089e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	695b      	ldr	r3, [r3, #20]
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	693a      	ldr	r2, [r7, #16]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	699b      	ldr	r3, [r3, #24]
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	693a      	ldr	r2, [r7, #16]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	693a      	ldr	r2, [r7, #16]
 8008a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	697a      	ldr	r2, [r7, #20]
 8008a14:	621a      	str	r2, [r3, #32]
}
 8008a16:	bf00      	nop
 8008a18:	371c      	adds	r7, #28
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	40012c00 	.word	0x40012c00
 8008a28:	40013400 	.word	0x40013400
 8008a2c:	40015000 	.word	0x40015000
 8008a30:	40014000 	.word	0x40014000
 8008a34:	40014400 	.word	0x40014400
 8008a38:	40014800 	.word	0x40014800

08008a3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b087      	sub	sp, #28
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a1b      	ldr	r3, [r3, #32]
 8008a50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f023 0303 	bic.w	r3, r3, #3
 8008a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	021b      	lsls	r3, r3, #8
 8008a90:	697a      	ldr	r2, [r7, #20]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a2b      	ldr	r2, [pc, #172]	@ (8008b48 <TIM_OC3_SetConfig+0x10c>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d007      	beq.n	8008aae <TIM_OC3_SetConfig+0x72>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a2a      	ldr	r2, [pc, #168]	@ (8008b4c <TIM_OC3_SetConfig+0x110>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d003      	beq.n	8008aae <TIM_OC3_SetConfig+0x72>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a29      	ldr	r2, [pc, #164]	@ (8008b50 <TIM_OC3_SetConfig+0x114>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d10d      	bne.n	8008aca <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ab4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	021b      	lsls	r3, r3, #8
 8008abc:	697a      	ldr	r2, [r7, #20]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ac8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a1e      	ldr	r2, [pc, #120]	@ (8008b48 <TIM_OC3_SetConfig+0x10c>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d013      	beq.n	8008afa <TIM_OC3_SetConfig+0xbe>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8008b4c <TIM_OC3_SetConfig+0x110>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d00f      	beq.n	8008afa <TIM_OC3_SetConfig+0xbe>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a1d      	ldr	r2, [pc, #116]	@ (8008b54 <TIM_OC3_SetConfig+0x118>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d00b      	beq.n	8008afa <TIM_OC3_SetConfig+0xbe>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8008b58 <TIM_OC3_SetConfig+0x11c>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d007      	beq.n	8008afa <TIM_OC3_SetConfig+0xbe>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a1b      	ldr	r2, [pc, #108]	@ (8008b5c <TIM_OC3_SetConfig+0x120>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d003      	beq.n	8008afa <TIM_OC3_SetConfig+0xbe>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a16      	ldr	r2, [pc, #88]	@ (8008b50 <TIM_OC3_SetConfig+0x114>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d113      	bne.n	8008b22 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	695b      	ldr	r3, [r3, #20]
 8008b0e:	011b      	lsls	r3, r3, #4
 8008b10:	693a      	ldr	r2, [r7, #16]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	011b      	lsls	r3, r3, #4
 8008b1c:	693a      	ldr	r2, [r7, #16]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	685a      	ldr	r2, [r3, #4]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	621a      	str	r2, [r3, #32]
}
 8008b3c:	bf00      	nop
 8008b3e:	371c      	adds	r7, #28
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr
 8008b48:	40012c00 	.word	0x40012c00
 8008b4c:	40013400 	.word	0x40013400
 8008b50:	40015000 	.word	0x40015000
 8008b54:	40014000 	.word	0x40014000
 8008b58:	40014400 	.word	0x40014400
 8008b5c:	40014800 	.word	0x40014800

08008b60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b087      	sub	sp, #28
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a1b      	ldr	r3, [r3, #32]
 8008b6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a1b      	ldr	r3, [r3, #32]
 8008b74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	69db      	ldr	r3, [r3, #28]
 8008b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	021b      	lsls	r3, r3, #8
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	031b      	lsls	r3, r3, #12
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a2c      	ldr	r2, [pc, #176]	@ (8008c70 <TIM_OC4_SetConfig+0x110>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d007      	beq.n	8008bd4 <TIM_OC4_SetConfig+0x74>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a2b      	ldr	r2, [pc, #172]	@ (8008c74 <TIM_OC4_SetConfig+0x114>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d003      	beq.n	8008bd4 <TIM_OC4_SetConfig+0x74>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a2a      	ldr	r2, [pc, #168]	@ (8008c78 <TIM_OC4_SetConfig+0x118>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d10d      	bne.n	8008bf0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	031b      	lsls	r3, r3, #12
 8008be2:	697a      	ldr	r2, [r7, #20]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008bee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a1f      	ldr	r2, [pc, #124]	@ (8008c70 <TIM_OC4_SetConfig+0x110>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d013      	beq.n	8008c20 <TIM_OC4_SetConfig+0xc0>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8008c74 <TIM_OC4_SetConfig+0x114>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d00f      	beq.n	8008c20 <TIM_OC4_SetConfig+0xc0>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a1e      	ldr	r2, [pc, #120]	@ (8008c7c <TIM_OC4_SetConfig+0x11c>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d00b      	beq.n	8008c20 <TIM_OC4_SetConfig+0xc0>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8008c80 <TIM_OC4_SetConfig+0x120>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d007      	beq.n	8008c20 <TIM_OC4_SetConfig+0xc0>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a1c      	ldr	r2, [pc, #112]	@ (8008c84 <TIM_OC4_SetConfig+0x124>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d003      	beq.n	8008c20 <TIM_OC4_SetConfig+0xc0>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a17      	ldr	r2, [pc, #92]	@ (8008c78 <TIM_OC4_SetConfig+0x118>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d113      	bne.n	8008c48 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c26:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008c2e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	695b      	ldr	r3, [r3, #20]
 8008c34:	019b      	lsls	r3, r3, #6
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	019b      	lsls	r3, r3, #6
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	693a      	ldr	r2, [r7, #16]
 8008c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	685a      	ldr	r2, [r3, #4]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	697a      	ldr	r2, [r7, #20]
 8008c60:	621a      	str	r2, [r3, #32]
}
 8008c62:	bf00      	nop
 8008c64:	371c      	adds	r7, #28
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	40012c00 	.word	0x40012c00
 8008c74:	40013400 	.word	0x40013400
 8008c78:	40015000 	.word	0x40015000
 8008c7c:	40014000 	.word	0x40014000
 8008c80:	40014400 	.word	0x40014400
 8008c84:	40014800 	.word	0x40014800

08008c88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b087      	sub	sp, #28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a1b      	ldr	r3, [r3, #32]
 8008c96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a1b      	ldr	r3, [r3, #32]
 8008c9c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008ccc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	041b      	lsls	r3, r3, #16
 8008cd4:	693a      	ldr	r2, [r7, #16]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a19      	ldr	r2, [pc, #100]	@ (8008d44 <TIM_OC5_SetConfig+0xbc>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d013      	beq.n	8008d0a <TIM_OC5_SetConfig+0x82>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a18      	ldr	r2, [pc, #96]	@ (8008d48 <TIM_OC5_SetConfig+0xc0>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d00f      	beq.n	8008d0a <TIM_OC5_SetConfig+0x82>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a17      	ldr	r2, [pc, #92]	@ (8008d4c <TIM_OC5_SetConfig+0xc4>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d00b      	beq.n	8008d0a <TIM_OC5_SetConfig+0x82>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a16      	ldr	r2, [pc, #88]	@ (8008d50 <TIM_OC5_SetConfig+0xc8>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d007      	beq.n	8008d0a <TIM_OC5_SetConfig+0x82>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a15      	ldr	r2, [pc, #84]	@ (8008d54 <TIM_OC5_SetConfig+0xcc>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d003      	beq.n	8008d0a <TIM_OC5_SetConfig+0x82>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a14      	ldr	r2, [pc, #80]	@ (8008d58 <TIM_OC5_SetConfig+0xd0>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d109      	bne.n	8008d1e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	695b      	ldr	r3, [r3, #20]
 8008d16:	021b      	lsls	r3, r3, #8
 8008d18:	697a      	ldr	r2, [r7, #20]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	697a      	ldr	r2, [r7, #20]
 8008d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	685a      	ldr	r2, [r3, #4]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	693a      	ldr	r2, [r7, #16]
 8008d36:	621a      	str	r2, [r3, #32]
}
 8008d38:	bf00      	nop
 8008d3a:	371c      	adds	r7, #28
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr
 8008d44:	40012c00 	.word	0x40012c00
 8008d48:	40013400 	.word	0x40013400
 8008d4c:	40014000 	.word	0x40014000
 8008d50:	40014400 	.word	0x40014400
 8008d54:	40014800 	.word	0x40014800
 8008d58:	40015000 	.word	0x40015000

08008d5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a1b      	ldr	r3, [r3, #32]
 8008d70:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	021b      	lsls	r3, r3, #8
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008da2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	051b      	lsls	r3, r3, #20
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a1a      	ldr	r2, [pc, #104]	@ (8008e1c <TIM_OC6_SetConfig+0xc0>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d013      	beq.n	8008de0 <TIM_OC6_SetConfig+0x84>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a19      	ldr	r2, [pc, #100]	@ (8008e20 <TIM_OC6_SetConfig+0xc4>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d00f      	beq.n	8008de0 <TIM_OC6_SetConfig+0x84>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a18      	ldr	r2, [pc, #96]	@ (8008e24 <TIM_OC6_SetConfig+0xc8>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d00b      	beq.n	8008de0 <TIM_OC6_SetConfig+0x84>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a17      	ldr	r2, [pc, #92]	@ (8008e28 <TIM_OC6_SetConfig+0xcc>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d007      	beq.n	8008de0 <TIM_OC6_SetConfig+0x84>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a16      	ldr	r2, [pc, #88]	@ (8008e2c <TIM_OC6_SetConfig+0xd0>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d003      	beq.n	8008de0 <TIM_OC6_SetConfig+0x84>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a15      	ldr	r2, [pc, #84]	@ (8008e30 <TIM_OC6_SetConfig+0xd4>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d109      	bne.n	8008df4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008de6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	695b      	ldr	r3, [r3, #20]
 8008dec:	029b      	lsls	r3, r3, #10
 8008dee:	697a      	ldr	r2, [r7, #20]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	685a      	ldr	r2, [r3, #4]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	693a      	ldr	r2, [r7, #16]
 8008e0c:	621a      	str	r2, [r3, #32]
}
 8008e0e:	bf00      	nop
 8008e10:	371c      	adds	r7, #28
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	40012c00 	.word	0x40012c00
 8008e20:	40013400 	.word	0x40013400
 8008e24:	40014000 	.word	0x40014000
 8008e28:	40014400 	.word	0x40014400
 8008e2c:	40014800 	.word	0x40014800
 8008e30:	40015000 	.word	0x40015000

08008e34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b087      	sub	sp, #28
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6a1b      	ldr	r3, [r3, #32]
 8008e44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6a1b      	ldr	r3, [r3, #32]
 8008e4a:	f023 0201 	bic.w	r2, r3, #1
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	699b      	ldr	r3, [r3, #24]
 8008e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	011b      	lsls	r3, r3, #4
 8008e64:	693a      	ldr	r2, [r7, #16]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	f023 030a 	bic.w	r3, r3, #10
 8008e70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e72:	697a      	ldr	r2, [r7, #20]
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	697a      	ldr	r2, [r7, #20]
 8008e84:	621a      	str	r2, [r3, #32]
}
 8008e86:	bf00      	nop
 8008e88:	371c      	adds	r7, #28
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b087      	sub	sp, #28
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	60f8      	str	r0, [r7, #12]
 8008e9a:	60b9      	str	r1, [r7, #8]
 8008e9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6a1b      	ldr	r3, [r3, #32]
 8008ea2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6a1b      	ldr	r3, [r3, #32]
 8008ea8:	f023 0210 	bic.w	r2, r3, #16
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008ebc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	031b      	lsls	r3, r3, #12
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008ece:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	011b      	lsls	r3, r3, #4
 8008ed4:	697a      	ldr	r2, [r7, #20]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	621a      	str	r2, [r3, #32]
}
 8008ee6:	bf00      	nop
 8008ee8:	371c      	adds	r7, #28
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr

08008ef2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ef2:	b480      	push	{r7}
 8008ef4:	b085      	sub	sp, #20
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
 8008efa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008f08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f0e:	683a      	ldr	r2, [r7, #0]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	f043 0307 	orr.w	r3, r3, #7
 8008f18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	609a      	str	r2, [r3, #8]
}
 8008f20:	bf00      	nop
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b087      	sub	sp, #28
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
 8008f38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	021a      	lsls	r2, r3, #8
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	431a      	orrs	r2, r3
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	697a      	ldr	r2, [r7, #20]
 8008f5e:	609a      	str	r2, [r3, #8]
}
 8008f60:	bf00      	nop
 8008f62:	371c      	adds	r7, #28
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b087      	sub	sp, #28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	f003 031f 	and.w	r3, r3, #31
 8008f7e:	2201      	movs	r2, #1
 8008f80:	fa02 f303 	lsl.w	r3, r2, r3
 8008f84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6a1a      	ldr	r2, [r3, #32]
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	43db      	mvns	r3, r3
 8008f8e:	401a      	ands	r2, r3
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6a1a      	ldr	r2, [r3, #32]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	f003 031f 	and.w	r3, r3, #31
 8008f9e:	6879      	ldr	r1, [r7, #4]
 8008fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8008fa4:	431a      	orrs	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	621a      	str	r2, [r3, #32]
}
 8008faa:	bf00      	nop
 8008fac:	371c      	adds	r7, #28
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
	...

08008fb8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a26      	ldr	r2, [pc, #152]	@ (800905c <TIM_ResetCallback+0xa4>)
 8008fc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a25      	ldr	r2, [pc, #148]	@ (8009060 <TIM_ResetCallback+0xa8>)
 8008fcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a24      	ldr	r2, [pc, #144]	@ (8009064 <TIM_ResetCallback+0xac>)
 8008fd4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a23      	ldr	r2, [pc, #140]	@ (8009068 <TIM_ResetCallback+0xb0>)
 8008fdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a22      	ldr	r2, [pc, #136]	@ (800906c <TIM_ResetCallback+0xb4>)
 8008fe4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a21      	ldr	r2, [pc, #132]	@ (8009070 <TIM_ResetCallback+0xb8>)
 8008fec:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a20      	ldr	r2, [pc, #128]	@ (8009074 <TIM_ResetCallback+0xbc>)
 8008ff4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8009078 <TIM_ResetCallback+0xc0>)
 8008ffc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a1e      	ldr	r2, [pc, #120]	@ (800907c <TIM_ResetCallback+0xc4>)
 8009004:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4a1d      	ldr	r2, [pc, #116]	@ (8009080 <TIM_ResetCallback+0xc8>)
 800900c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a1c      	ldr	r2, [pc, #112]	@ (8009084 <TIM_ResetCallback+0xcc>)
 8009014:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4a1b      	ldr	r2, [pc, #108]	@ (8009088 <TIM_ResetCallback+0xd0>)
 800901c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4a1a      	ldr	r2, [pc, #104]	@ (800908c <TIM_ResetCallback+0xd4>)
 8009024:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a19      	ldr	r2, [pc, #100]	@ (8009090 <TIM_ResetCallback+0xd8>)
 800902c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a18      	ldr	r2, [pc, #96]	@ (8009094 <TIM_ResetCallback+0xdc>)
 8009034:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a17      	ldr	r2, [pc, #92]	@ (8009098 <TIM_ResetCallback+0xe0>)
 800903c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a16      	ldr	r2, [pc, #88]	@ (800909c <TIM_ResetCallback+0xe4>)
 8009044:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a15      	ldr	r2, [pc, #84]	@ (80090a0 <TIM_ResetCallback+0xe8>)
 800904c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr
 800905c:	080028e1 	.word	0x080028e1
 8009060:	08008305 	.word	0x08008305
 8009064:	0800837d 	.word	0x0800837d
 8009068:	08008391 	.word	0x08008391
 800906c:	0800832d 	.word	0x0800832d
 8009070:	08008341 	.word	0x08008341
 8009074:	08008319 	.word	0x08008319
 8009078:	08008355 	.word	0x08008355
 800907c:	08008369 	.word	0x08008369
 8009080:	080083a5 	.word	0x080083a5
 8009084:	080092f9 	.word	0x080092f9
 8009088:	0800930d 	.word	0x0800930d
 800908c:	08009321 	.word	0x08009321
 8009090:	08009335 	.word	0x08009335
 8009094:	08009349 	.word	0x08009349
 8009098:	0800935d 	.word	0x0800935d
 800909c:	08009371 	.word	0x08009371
 80090a0:	08009385 	.word	0x08009385

080090a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d101      	bne.n	80090bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090b8:	2302      	movs	r3, #2
 80090ba:	e074      	b.n	80091a6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2202      	movs	r2, #2
 80090c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a34      	ldr	r2, [pc, #208]	@ (80091b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d009      	beq.n	80090fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a33      	ldr	r2, [pc, #204]	@ (80091b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d004      	beq.n	80090fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a31      	ldr	r2, [pc, #196]	@ (80091bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d108      	bne.n	800910c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009100:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	4313      	orrs	r3, r2
 800910a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009116:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68fa      	ldr	r2, [r7, #12]
 800911e:	4313      	orrs	r3, r2
 8009120:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	68fa      	ldr	r2, [r7, #12]
 8009128:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a21      	ldr	r2, [pc, #132]	@ (80091b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d022      	beq.n	800917a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800913c:	d01d      	beq.n	800917a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a1f      	ldr	r2, [pc, #124]	@ (80091c0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d018      	beq.n	800917a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a1d      	ldr	r2, [pc, #116]	@ (80091c4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d013      	beq.n	800917a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a1c      	ldr	r2, [pc, #112]	@ (80091c8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d00e      	beq.n	800917a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a15      	ldr	r2, [pc, #84]	@ (80091b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d009      	beq.n	800917a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a18      	ldr	r2, [pc, #96]	@ (80091cc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d004      	beq.n	800917a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a11      	ldr	r2, [pc, #68]	@ (80091bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d10c      	bne.n	8009194 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009180:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	4313      	orrs	r3, r2
 800918a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3714      	adds	r7, #20
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop
 80091b4:	40012c00 	.word	0x40012c00
 80091b8:	40013400 	.word	0x40013400
 80091bc:	40015000 	.word	0x40015000
 80091c0:	40000400 	.word	0x40000400
 80091c4:	40000800 	.word	0x40000800
 80091c8:	40000c00 	.word	0x40000c00
 80091cc:	40014000 	.word	0x40014000

080091d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80091da:	2300      	movs	r3, #0
 80091dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d101      	bne.n	80091ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80091e8:	2302      	movs	r3, #2
 80091ea:	e078      	b.n	80092de <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	4313      	orrs	r3, r2
 8009200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	4313      	orrs	r3, r2
 800920e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	4313      	orrs	r3, r2
 800921c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4313      	orrs	r3, r2
 800922a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	4313      	orrs	r3, r2
 8009238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	695b      	ldr	r3, [r3, #20]
 8009244:	4313      	orrs	r3, r2
 8009246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009252:	4313      	orrs	r3, r2
 8009254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	041b      	lsls	r3, r3, #16
 8009262:	4313      	orrs	r3, r2
 8009264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	69db      	ldr	r3, [r3, #28]
 8009270:	4313      	orrs	r3, r2
 8009272:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a1c      	ldr	r2, [pc, #112]	@ (80092ec <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d009      	beq.n	8009292 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a1b      	ldr	r2, [pc, #108]	@ (80092f0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d004      	beq.n	8009292 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a19      	ldr	r2, [pc, #100]	@ (80092f4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d11c      	bne.n	80092cc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800929c:	051b      	lsls	r3, r3, #20
 800929e:	4313      	orrs	r3, r2
 80092a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	6a1b      	ldr	r3, [r3, #32]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ba:	4313      	orrs	r3, r2
 80092bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c8:	4313      	orrs	r3, r2
 80092ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3714      	adds	r7, #20
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	40012c00 	.word	0x40012c00
 80092f0:	40013400 	.word	0x40013400
 80092f4:	40015000 	.word	0x40015000

080092f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009300:	bf00      	nop
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009314:	bf00      	nop
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009350:	bf00      	nop
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800938c:	bf00      	nop
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d101      	bne.n	80093aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e050      	b.n	800944c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d114      	bne.n	80093de <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 fd5b 	bl	8009e78 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d103      	bne.n	80093d4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a21      	ldr	r2, [pc, #132]	@ (8009454 <HAL_UART_Init+0xbc>)
 80093d0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2224      	movs	r2, #36	@ 0x24
 80093e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f022 0201 	bic.w	r2, r2, #1
 80093f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d002      	beq.n	8009404 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f001 f888 	bl	800a514 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fd89 	bl	8009f1c <UART_SetConfig>
 800940a:	4603      	mov	r3, r0
 800940c:	2b01      	cmp	r3, #1
 800940e:	d101      	bne.n	8009414 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	e01b      	b.n	800944c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	685a      	ldr	r2, [r3, #4]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009422:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	689a      	ldr	r2, [r3, #8]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009432:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f042 0201 	orr.w	r2, r2, #1
 8009442:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f001 f907 	bl	800a658 <UART_CheckIdleState>
 800944a:	4603      	mov	r3, r0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	080039a1 	.word	0x080039a1

08009458 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009458:	b480      	push	{r7}
 800945a:	b087      	sub	sp, #28
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	460b      	mov	r3, r1
 8009462:	607a      	str	r2, [r7, #4]
 8009464:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d109      	bne.n	8009484 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009476:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	e09c      	b.n	80095be <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800948a:	2b20      	cmp	r3, #32
 800948c:	d16c      	bne.n	8009568 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800948e:	7afb      	ldrb	r3, [r7, #11]
 8009490:	2b0c      	cmp	r3, #12
 8009492:	d85e      	bhi.n	8009552 <HAL_UART_RegisterCallback+0xfa>
 8009494:	a201      	add	r2, pc, #4	@ (adr r2, 800949c <HAL_UART_RegisterCallback+0x44>)
 8009496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800949a:	bf00      	nop
 800949c:	080094d1 	.word	0x080094d1
 80094a0:	080094db 	.word	0x080094db
 80094a4:	080094e5 	.word	0x080094e5
 80094a8:	080094ef 	.word	0x080094ef
 80094ac:	080094f9 	.word	0x080094f9
 80094b0:	08009503 	.word	0x08009503
 80094b4:	0800950d 	.word	0x0800950d
 80094b8:	08009517 	.word	0x08009517
 80094bc:	08009521 	.word	0x08009521
 80094c0:	0800952b 	.word	0x0800952b
 80094c4:	08009535 	.word	0x08009535
 80094c8:	0800953f 	.word	0x0800953f
 80094cc:	08009549 	.word	0x08009549
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80094d8:	e070      	b.n	80095bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80094e2:	e06b      	b.n	80095bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80094ec:	e066      	b.n	80095bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80094f6:	e061      	b.n	80095bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009500:	e05c      	b.n	80095bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800950a:	e057      	b.n	80095bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009514:	e052      	b.n	80095bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800951e:	e04d      	b.n	80095bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009528:	e048      	b.n	80095bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009532:	e043      	b.n	80095bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800953c:	e03e      	b.n	80095bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009546:	e039      	b.n	80095bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009550:	e034      	b.n	80095bc <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009558:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	75fb      	strb	r3, [r7, #23]
        break;
 8009566:	e029      	b.n	80095bc <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800956e:	2b00      	cmp	r3, #0
 8009570:	d11a      	bne.n	80095a8 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009572:	7afb      	ldrb	r3, [r7, #11]
 8009574:	2b0b      	cmp	r3, #11
 8009576:	d002      	beq.n	800957e <HAL_UART_RegisterCallback+0x126>
 8009578:	2b0c      	cmp	r3, #12
 800957a:	d005      	beq.n	8009588 <HAL_UART_RegisterCallback+0x130>
 800957c:	e009      	b.n	8009592 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009586:	e019      	b.n	80095bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009590:	e014      	b.n	80095bc <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009598:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	75fb      	strb	r3, [r7, #23]
        break;
 80095a6:	e009      	b.n	80095bc <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80095bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	371c      	adds	r7, #28
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop

080095cc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b08a      	sub	sp, #40	@ 0x28
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	4613      	mov	r3, r2
 80095d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095e0:	2b20      	cmp	r3, #32
 80095e2:	d137      	bne.n	8009654 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d002      	beq.n	80095f0 <HAL_UART_Receive_DMA+0x24>
 80095ea:	88fb      	ldrh	r3, [r7, #6]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d101      	bne.n	80095f4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e030      	b.n	8009656 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a18      	ldr	r2, [pc, #96]	@ (8009660 <HAL_UART_Receive_DMA+0x94>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d01f      	beq.n	8009644 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800960e:	2b00      	cmp	r3, #0
 8009610:	d018      	beq.n	8009644 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	e853 3f00 	ldrex	r3, [r3]
 800961e:	613b      	str	r3, [r7, #16]
   return(result);
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009626:	627b      	str	r3, [r7, #36]	@ 0x24
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	461a      	mov	r2, r3
 800962e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009630:	623b      	str	r3, [r7, #32]
 8009632:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009634:	69f9      	ldr	r1, [r7, #28]
 8009636:	6a3a      	ldr	r2, [r7, #32]
 8009638:	e841 2300 	strex	r3, r2, [r1]
 800963c:	61bb      	str	r3, [r7, #24]
   return(result);
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1e6      	bne.n	8009612 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009644:	88fb      	ldrh	r3, [r7, #6]
 8009646:	461a      	mov	r2, r3
 8009648:	68b9      	ldr	r1, [r7, #8]
 800964a:	68f8      	ldr	r0, [r7, #12]
 800964c:	f001 f91c 	bl	800a888 <UART_Start_Receive_DMA>
 8009650:	4603      	mov	r3, r0
 8009652:	e000      	b.n	8009656 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009654:	2302      	movs	r3, #2
  }
}
 8009656:	4618      	mov	r0, r3
 8009658:	3728      	adds	r7, #40	@ 0x28
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	40008000 	.word	0x40008000

08009664 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b0ba      	sub	sp, #232	@ 0xe8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	69db      	ldr	r3, [r3, #28]
 8009672:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800968a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800968e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009692:	4013      	ands	r3, r2
 8009694:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009698:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800969c:	2b00      	cmp	r3, #0
 800969e:	d11b      	bne.n	80096d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80096a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096a4:	f003 0320 	and.w	r3, r3, #32
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d015      	beq.n	80096d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80096ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096b0:	f003 0320 	and.w	r3, r3, #32
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d105      	bne.n	80096c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80096b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d009      	beq.n	80096d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	f000 8312 	beq.w	8009cf2 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	4798      	blx	r3
      }
      return;
 80096d6:	e30c      	b.n	8009cf2 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80096d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f000 8129 	beq.w	8009934 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80096e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80096e6:	4b90      	ldr	r3, [pc, #576]	@ (8009928 <HAL_UART_IRQHandler+0x2c4>)
 80096e8:	4013      	ands	r3, r2
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d106      	bne.n	80096fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80096ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80096f2:	4b8e      	ldr	r3, [pc, #568]	@ (800992c <HAL_UART_IRQHandler+0x2c8>)
 80096f4:	4013      	ands	r3, r2
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f000 811c 	beq.w	8009934 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80096fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009700:	f003 0301 	and.w	r3, r3, #1
 8009704:	2b00      	cmp	r3, #0
 8009706:	d011      	beq.n	800972c <HAL_UART_IRQHandler+0xc8>
 8009708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800970c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00b      	beq.n	800972c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2201      	movs	r2, #1
 800971a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009722:	f043 0201 	orr.w	r2, r3, #1
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800972c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009730:	f003 0302 	and.w	r3, r3, #2
 8009734:	2b00      	cmp	r3, #0
 8009736:	d011      	beq.n	800975c <HAL_UART_IRQHandler+0xf8>
 8009738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800973c:	f003 0301 	and.w	r3, r3, #1
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00b      	beq.n	800975c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2202      	movs	r2, #2
 800974a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009752:	f043 0204 	orr.w	r2, r3, #4
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800975c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009760:	f003 0304 	and.w	r3, r3, #4
 8009764:	2b00      	cmp	r3, #0
 8009766:	d011      	beq.n	800978c <HAL_UART_IRQHandler+0x128>
 8009768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800976c:	f003 0301 	and.w	r3, r3, #1
 8009770:	2b00      	cmp	r3, #0
 8009772:	d00b      	beq.n	800978c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2204      	movs	r2, #4
 800977a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009782:	f043 0202 	orr.w	r2, r3, #2
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800978c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009790:	f003 0308 	and.w	r3, r3, #8
 8009794:	2b00      	cmp	r3, #0
 8009796:	d017      	beq.n	80097c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800979c:	f003 0320 	and.w	r3, r3, #32
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d105      	bne.n	80097b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80097a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80097a8:	4b5f      	ldr	r3, [pc, #380]	@ (8009928 <HAL_UART_IRQHandler+0x2c4>)
 80097aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00b      	beq.n	80097c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2208      	movs	r2, #8
 80097b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097be:	f043 0208 	orr.w	r2, r3, #8
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80097c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d012      	beq.n	80097fa <HAL_UART_IRQHandler+0x196>
 80097d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00c      	beq.n	80097fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80097e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097f0:	f043 0220 	orr.w	r2, r3, #32
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009800:	2b00      	cmp	r3, #0
 8009802:	f000 8278 	beq.w	8009cf6 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800980a:	f003 0320 	and.w	r3, r3, #32
 800980e:	2b00      	cmp	r3, #0
 8009810:	d013      	beq.n	800983a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009816:	f003 0320 	and.w	r3, r3, #32
 800981a:	2b00      	cmp	r3, #0
 800981c:	d105      	bne.n	800982a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800981e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009826:	2b00      	cmp	r3, #0
 8009828:	d007      	beq.n	800983a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800982e:	2b00      	cmp	r3, #0
 8009830:	d003      	beq.n	800983a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009840:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800984e:	2b40      	cmp	r3, #64	@ 0x40
 8009850:	d005      	beq.n	800985e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009856:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800985a:	2b00      	cmp	r3, #0
 800985c:	d058      	beq.n	8009910 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f001 f8f9 	bl	800aa56 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800986e:	2b40      	cmp	r3, #64	@ 0x40
 8009870:	d148      	bne.n	8009904 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	3308      	adds	r3, #8
 8009878:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009880:	e853 3f00 	ldrex	r3, [r3]
 8009884:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009888:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800988c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009890:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	3308      	adds	r3, #8
 800989a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800989e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80098a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80098aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80098ae:	e841 2300 	strex	r3, r2, [r1]
 80098b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80098b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d1d9      	bne.n	8009872 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d017      	beq.n	80098f8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098ce:	4a18      	ldr	r2, [pc, #96]	@ (8009930 <HAL_UART_IRQHandler+0x2cc>)
 80098d0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098d8:	4618      	mov	r0, r3
 80098da:	f7fc f8bb 	bl	8005a54 <HAL_DMA_Abort_IT>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d01f      	beq.n	8009924 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80098f2:	4610      	mov	r0, r2
 80098f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098f6:	e015      	b.n	8009924 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009902:	e00f      	b.n	8009924 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800990e:	e009      	b.n	8009924 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009922:	e1e8      	b.n	8009cf6 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009924:	bf00      	nop
    return;
 8009926:	e1e6      	b.n	8009cf6 <HAL_UART_IRQHandler+0x692>
 8009928:	10000001 	.word	0x10000001
 800992c:	04000120 	.word	0x04000120
 8009930:	0800ad21 	.word	0x0800ad21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009938:	2b01      	cmp	r3, #1
 800993a:	f040 8176 	bne.w	8009c2a <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800993e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009942:	f003 0310 	and.w	r3, r3, #16
 8009946:	2b00      	cmp	r3, #0
 8009948:	f000 816f 	beq.w	8009c2a <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800994c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009950:	f003 0310 	and.w	r3, r3, #16
 8009954:	2b00      	cmp	r3, #0
 8009956:	f000 8168 	beq.w	8009c2a <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2210      	movs	r2, #16
 8009960:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800996c:	2b40      	cmp	r3, #64	@ 0x40
 800996e:	f040 80dc 	bne.w	8009b2a <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009980:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009984:	2b00      	cmp	r3, #0
 8009986:	f000 80b1 	beq.w	8009aec <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009990:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009994:	429a      	cmp	r2, r3
 8009996:	f080 80a9 	bcs.w	8009aec <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80099a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f003 0320 	and.w	r3, r3, #32
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	f040 8087 	bne.w	8009ac6 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80099c4:	e853 3f00 	ldrex	r3, [r3]
 80099c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80099cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80099d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	461a      	mov	r2, r3
 80099de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80099e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80099ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80099f2:	e841 2300 	strex	r3, r2, [r1]
 80099f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80099fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1da      	bne.n	80099b8 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	3308      	adds	r3, #8
 8009a08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a0c:	e853 3f00 	ldrex	r3, [r3]
 8009a10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009a12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a14:	f023 0301 	bic.w	r3, r3, #1
 8009a18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	3308      	adds	r3, #8
 8009a22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009a26:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009a2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009a2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009a32:	e841 2300 	strex	r3, r2, [r1]
 8009a36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009a38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1e1      	bne.n	8009a02 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	3308      	adds	r3, #8
 8009a44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a48:	e853 3f00 	ldrex	r3, [r3]
 8009a4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009a4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	3308      	adds	r3, #8
 8009a5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009a62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009a64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a66:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009a68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009a6a:	e841 2300 	strex	r3, r2, [r1]
 8009a6e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009a70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d1e3      	bne.n	8009a3e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2220      	movs	r2, #32
 8009a7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a8c:	e853 3f00 	ldrex	r3, [r3]
 8009a90:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a94:	f023 0310 	bic.w	r3, r3, #16
 8009a98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009aa6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009aa8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aaa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009aac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009aae:	e841 2300 	strex	r3, r2, [r1]
 8009ab2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ab4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1e4      	bne.n	8009a84 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7fb ff6e 	bl	80059a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2202      	movs	r2, #2
 8009aca:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009ade:	b292      	uxth	r2, r2
 8009ae0:	1a8a      	subs	r2, r1, r2
 8009ae2:	b292      	uxth	r2, r2
 8009ae4:	4611      	mov	r1, r2
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009aea:	e106      	b.n	8009cfa <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009af6:	429a      	cmp	r2, r3
 8009af8:	f040 80ff 	bne.w	8009cfa <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f003 0320 	and.w	r3, r3, #32
 8009b0a:	2b20      	cmp	r3, #32
 8009b0c:	f040 80f5 	bne.w	8009cfa <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2202      	movs	r2, #2
 8009b14:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009b22:	4611      	mov	r1, r2
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	4798      	blx	r3
      return;
 8009b28:	e0e7      	b.n	8009cfa <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f000 80d9 	beq.w	8009cfe <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8009b4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f000 80d4 	beq.w	8009cfe <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b5e:	e853 3f00 	ldrex	r3, [r3]
 8009b62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	461a      	mov	r2, r3
 8009b74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009b78:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b7a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b80:	e841 2300 	strex	r3, r2, [r1]
 8009b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d1e4      	bne.n	8009b56 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	3308      	adds	r3, #8
 8009b92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b96:	e853 3f00 	ldrex	r3, [r3]
 8009b9a:	623b      	str	r3, [r7, #32]
   return(result);
 8009b9c:	6a3b      	ldr	r3, [r7, #32]
 8009b9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ba2:	f023 0301 	bic.w	r3, r3, #1
 8009ba6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	3308      	adds	r3, #8
 8009bb0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009bb4:	633a      	str	r2, [r7, #48]	@ 0x30
 8009bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bbc:	e841 2300 	strex	r3, r2, [r1]
 8009bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d1e1      	bne.n	8009b8c <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2220      	movs	r2, #32
 8009bcc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	e853 3f00 	ldrex	r3, [r3]
 8009be8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f023 0310 	bic.w	r3, r3, #16
 8009bf0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009bfe:	61fb      	str	r3, [r7, #28]
 8009c00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c02:	69b9      	ldr	r1, [r7, #24]
 8009c04:	69fa      	ldr	r2, [r7, #28]
 8009c06:	e841 2300 	strex	r3, r2, [r1]
 8009c0a:	617b      	str	r3, [r7, #20]
   return(result);
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1e4      	bne.n	8009bdc <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2202      	movs	r2, #2
 8009c16:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009c1e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009c22:	4611      	mov	r1, r2
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009c28:	e069      	b.n	8009cfe <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d010      	beq.n	8009c58 <HAL_UART_IRQHandler+0x5f4>
 8009c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00a      	beq.n	8009c58 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009c4a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c56:	e055      	b.n	8009d04 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d014      	beq.n	8009c8e <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d105      	bne.n	8009c7c <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d008      	beq.n	8009c8e <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d03e      	beq.n	8009d02 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	4798      	blx	r3
    }
    return;
 8009c8c:	e039      	b.n	8009d02 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d009      	beq.n	8009cae <HAL_UART_IRQHandler+0x64a>
 8009c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d003      	beq.n	8009cae <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f001 f84e 	bl	800ad48 <UART_EndTransmit_IT>
    return;
 8009cac:	e02a      	b.n	8009d04 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00b      	beq.n	8009cd2 <HAL_UART_IRQHandler+0x66e>
 8009cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cbe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d005      	beq.n	8009cd2 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009cd0:	e018      	b.n	8009d04 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d012      	beq.n	8009d04 <HAL_UART_IRQHandler+0x6a0>
 8009cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	da0e      	bge.n	8009d04 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009cf0:	e008      	b.n	8009d04 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009cf2:	bf00      	nop
 8009cf4:	e006      	b.n	8009d04 <HAL_UART_IRQHandler+0x6a0>
    return;
 8009cf6:	bf00      	nop
 8009cf8:	e004      	b.n	8009d04 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009cfa:	bf00      	nop
 8009cfc:	e002      	b.n	8009d04 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009cfe:	bf00      	nop
 8009d00:	e000      	b.n	8009d04 <HAL_UART_IRQHandler+0x6a0>
    return;
 8009d02:	bf00      	nop
  }
}
 8009d04:	37e8      	adds	r7, #232	@ 0xe8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop

08009d0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009d14:	bf00      	nop
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009d28:	bf00      	nop
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009d3c:	bf00      	nop
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009d64:	bf00      	nop
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009d8c:	bf00      	nop
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	460b      	mov	r3, r1
 8009da2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009da4:	bf00      	nop
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a09      	ldr	r2, [pc, #36]	@ (8009de4 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d009      	beq.n	8009dd8 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	695b      	ldr	r3, [r3, #20]
 8009dca:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	683a      	ldr	r2, [r7, #0]
 8009dd4:	430a      	orrs	r2, r1
 8009dd6:	615a      	str	r2, [r3, #20]
  }
}
 8009dd8:	bf00      	nop
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr
 8009de4:	40008000 	.word	0x40008000

08009de8 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a18      	ldr	r2, [pc, #96]	@ (8009e58 <HAL_UART_EnableReceiverTimeout+0x70>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d027      	beq.n	8009e4a <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e00:	2b20      	cmp	r3, #32
 8009e02:	d120      	bne.n	8009e46 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d101      	bne.n	8009e12 <HAL_UART_EnableReceiverTimeout+0x2a>
 8009e0e:	2302      	movs	r3, #2
 8009e10:	e01c      	b.n	8009e4c <HAL_UART_EnableReceiverTimeout+0x64>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2201      	movs	r2, #1
 8009e16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2224      	movs	r2, #36	@ 0x24
 8009e1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	685a      	ldr	r2, [r3, #4]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009e30:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2220      	movs	r2, #32
 8009e36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8009e42:	2300      	movs	r3, #0
 8009e44:	e002      	b.n	8009e4c <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8009e46:	2302      	movs	r3, #2
 8009e48:	e000      	b.n	8009e4c <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
  }
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr
 8009e58:	40008000 	.word	0x40008000

08009e5c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	370c      	adds	r7, #12
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr
	...

08009e78 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a1a      	ldr	r2, [pc, #104]	@ (8009eec <UART_InitCallbacksToDefault+0x74>)
 8009e84:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a19      	ldr	r2, [pc, #100]	@ (8009ef0 <UART_InitCallbacksToDefault+0x78>)
 8009e8c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4a18      	ldr	r2, [pc, #96]	@ (8009ef4 <UART_InitCallbacksToDefault+0x7c>)
 8009e94:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a17      	ldr	r2, [pc, #92]	@ (8009ef8 <UART_InitCallbacksToDefault+0x80>)
 8009e9c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a16      	ldr	r2, [pc, #88]	@ (8009efc <UART_InitCallbacksToDefault+0x84>)
 8009ea4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4a15      	ldr	r2, [pc, #84]	@ (8009f00 <UART_InitCallbacksToDefault+0x88>)
 8009eac:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a14      	ldr	r2, [pc, #80]	@ (8009f04 <UART_InitCallbacksToDefault+0x8c>)
 8009eb4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4a13      	ldr	r2, [pc, #76]	@ (8009f08 <UART_InitCallbacksToDefault+0x90>)
 8009ebc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a12      	ldr	r2, [pc, #72]	@ (8009f0c <UART_InitCallbacksToDefault+0x94>)
 8009ec4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4a11      	ldr	r2, [pc, #68]	@ (8009f10 <UART_InitCallbacksToDefault+0x98>)
 8009ecc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a10      	ldr	r2, [pc, #64]	@ (8009f14 <UART_InitCallbacksToDefault+0x9c>)
 8009ed4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a0f      	ldr	r2, [pc, #60]	@ (8009f18 <UART_InitCallbacksToDefault+0xa0>)
 8009edc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009ee0:	bf00      	nop
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr
 8009eec:	08009d21 	.word	0x08009d21
 8009ef0:	08009d0d 	.word	0x08009d0d
 8009ef4:	08009d35 	.word	0x08009d35
 8009ef8:	080028cd 	.word	0x080028cd
 8009efc:	08009d49 	.word	0x08009d49
 8009f00:	08009d5d 	.word	0x08009d5d
 8009f04:	08009d71 	.word	0x08009d71
 8009f08:	08009d85 	.word	0x08009d85
 8009f0c:	0800ada3 	.word	0x0800ada3
 8009f10:	0800adb7 	.word	0x0800adb7
 8009f14:	0800adcb 	.word	0x0800adcb
 8009f18:	08009d99 	.word	0x08009d99

08009f1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f20:	b08c      	sub	sp, #48	@ 0x30
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f26:	2300      	movs	r3, #0
 8009f28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	689a      	ldr	r2, [r3, #8]
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	431a      	orrs	r2, r3
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	695b      	ldr	r3, [r3, #20]
 8009f3a:	431a      	orrs	r2, r3
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	69db      	ldr	r3, [r3, #28]
 8009f40:	4313      	orrs	r3, r2
 8009f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	4baa      	ldr	r3, [pc, #680]	@ (800a1f4 <UART_SetConfig+0x2d8>)
 8009f4c:	4013      	ands	r3, r2
 8009f4e:	697a      	ldr	r2, [r7, #20]
 8009f50:	6812      	ldr	r2, [r2, #0]
 8009f52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f54:	430b      	orrs	r3, r1
 8009f56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	68da      	ldr	r2, [r3, #12]
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	430a      	orrs	r2, r1
 8009f6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	699b      	ldr	r3, [r3, #24]
 8009f72:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a9f      	ldr	r2, [pc, #636]	@ (800a1f8 <UART_SetConfig+0x2dc>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d004      	beq.n	8009f88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	6a1b      	ldr	r3, [r3, #32]
 8009f82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f84:	4313      	orrs	r3, r2
 8009f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009f92:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009f96:	697a      	ldr	r2, [r7, #20]
 8009f98:	6812      	ldr	r2, [r2, #0]
 8009f9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f9c:	430b      	orrs	r3, r1
 8009f9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa6:	f023 010f 	bic.w	r1, r3, #15
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	430a      	orrs	r2, r1
 8009fb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a90      	ldr	r2, [pc, #576]	@ (800a1fc <UART_SetConfig+0x2e0>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d125      	bne.n	800a00c <UART_SetConfig+0xf0>
 8009fc0:	4b8f      	ldr	r3, [pc, #572]	@ (800a200 <UART_SetConfig+0x2e4>)
 8009fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fc6:	f003 0303 	and.w	r3, r3, #3
 8009fca:	2b03      	cmp	r3, #3
 8009fcc:	d81a      	bhi.n	800a004 <UART_SetConfig+0xe8>
 8009fce:	a201      	add	r2, pc, #4	@ (adr r2, 8009fd4 <UART_SetConfig+0xb8>)
 8009fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd4:	08009fe5 	.word	0x08009fe5
 8009fd8:	08009ff5 	.word	0x08009ff5
 8009fdc:	08009fed 	.word	0x08009fed
 8009fe0:	08009ffd 	.word	0x08009ffd
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fea:	e116      	b.n	800a21a <UART_SetConfig+0x2fe>
 8009fec:	2302      	movs	r3, #2
 8009fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ff2:	e112      	b.n	800a21a <UART_SetConfig+0x2fe>
 8009ff4:	2304      	movs	r3, #4
 8009ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ffa:	e10e      	b.n	800a21a <UART_SetConfig+0x2fe>
 8009ffc:	2308      	movs	r3, #8
 8009ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a002:	e10a      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a004:	2310      	movs	r3, #16
 800a006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a00a:	e106      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a7c      	ldr	r2, [pc, #496]	@ (800a204 <UART_SetConfig+0x2e8>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d138      	bne.n	800a088 <UART_SetConfig+0x16c>
 800a016:	4b7a      	ldr	r3, [pc, #488]	@ (800a200 <UART_SetConfig+0x2e4>)
 800a018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a01c:	f003 030c 	and.w	r3, r3, #12
 800a020:	2b0c      	cmp	r3, #12
 800a022:	d82d      	bhi.n	800a080 <UART_SetConfig+0x164>
 800a024:	a201      	add	r2, pc, #4	@ (adr r2, 800a02c <UART_SetConfig+0x110>)
 800a026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02a:	bf00      	nop
 800a02c:	0800a061 	.word	0x0800a061
 800a030:	0800a081 	.word	0x0800a081
 800a034:	0800a081 	.word	0x0800a081
 800a038:	0800a081 	.word	0x0800a081
 800a03c:	0800a071 	.word	0x0800a071
 800a040:	0800a081 	.word	0x0800a081
 800a044:	0800a081 	.word	0x0800a081
 800a048:	0800a081 	.word	0x0800a081
 800a04c:	0800a069 	.word	0x0800a069
 800a050:	0800a081 	.word	0x0800a081
 800a054:	0800a081 	.word	0x0800a081
 800a058:	0800a081 	.word	0x0800a081
 800a05c:	0800a079 	.word	0x0800a079
 800a060:	2300      	movs	r3, #0
 800a062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a066:	e0d8      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a068:	2302      	movs	r3, #2
 800a06a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a06e:	e0d4      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a070:	2304      	movs	r3, #4
 800a072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a076:	e0d0      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a078:	2308      	movs	r3, #8
 800a07a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a07e:	e0cc      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a080:	2310      	movs	r3, #16
 800a082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a086:	e0c8      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a5e      	ldr	r2, [pc, #376]	@ (800a208 <UART_SetConfig+0x2ec>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d125      	bne.n	800a0de <UART_SetConfig+0x1c2>
 800a092:	4b5b      	ldr	r3, [pc, #364]	@ (800a200 <UART_SetConfig+0x2e4>)
 800a094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a098:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a09c:	2b30      	cmp	r3, #48	@ 0x30
 800a09e:	d016      	beq.n	800a0ce <UART_SetConfig+0x1b2>
 800a0a0:	2b30      	cmp	r3, #48	@ 0x30
 800a0a2:	d818      	bhi.n	800a0d6 <UART_SetConfig+0x1ba>
 800a0a4:	2b20      	cmp	r3, #32
 800a0a6:	d00a      	beq.n	800a0be <UART_SetConfig+0x1a2>
 800a0a8:	2b20      	cmp	r3, #32
 800a0aa:	d814      	bhi.n	800a0d6 <UART_SetConfig+0x1ba>
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d002      	beq.n	800a0b6 <UART_SetConfig+0x19a>
 800a0b0:	2b10      	cmp	r3, #16
 800a0b2:	d008      	beq.n	800a0c6 <UART_SetConfig+0x1aa>
 800a0b4:	e00f      	b.n	800a0d6 <UART_SetConfig+0x1ba>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0bc:	e0ad      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a0be:	2302      	movs	r3, #2
 800a0c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0c4:	e0a9      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a0c6:	2304      	movs	r3, #4
 800a0c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0cc:	e0a5      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a0ce:	2308      	movs	r3, #8
 800a0d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0d4:	e0a1      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a0d6:	2310      	movs	r3, #16
 800a0d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0dc:	e09d      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a4a      	ldr	r2, [pc, #296]	@ (800a20c <UART_SetConfig+0x2f0>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d125      	bne.n	800a134 <UART_SetConfig+0x218>
 800a0e8:	4b45      	ldr	r3, [pc, #276]	@ (800a200 <UART_SetConfig+0x2e4>)
 800a0ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a0f2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a0f4:	d016      	beq.n	800a124 <UART_SetConfig+0x208>
 800a0f6:	2bc0      	cmp	r3, #192	@ 0xc0
 800a0f8:	d818      	bhi.n	800a12c <UART_SetConfig+0x210>
 800a0fa:	2b80      	cmp	r3, #128	@ 0x80
 800a0fc:	d00a      	beq.n	800a114 <UART_SetConfig+0x1f8>
 800a0fe:	2b80      	cmp	r3, #128	@ 0x80
 800a100:	d814      	bhi.n	800a12c <UART_SetConfig+0x210>
 800a102:	2b00      	cmp	r3, #0
 800a104:	d002      	beq.n	800a10c <UART_SetConfig+0x1f0>
 800a106:	2b40      	cmp	r3, #64	@ 0x40
 800a108:	d008      	beq.n	800a11c <UART_SetConfig+0x200>
 800a10a:	e00f      	b.n	800a12c <UART_SetConfig+0x210>
 800a10c:	2300      	movs	r3, #0
 800a10e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a112:	e082      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a114:	2302      	movs	r3, #2
 800a116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a11a:	e07e      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a11c:	2304      	movs	r3, #4
 800a11e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a122:	e07a      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a124:	2308      	movs	r3, #8
 800a126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a12a:	e076      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a12c:	2310      	movs	r3, #16
 800a12e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a132:	e072      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a35      	ldr	r2, [pc, #212]	@ (800a210 <UART_SetConfig+0x2f4>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d12a      	bne.n	800a194 <UART_SetConfig+0x278>
 800a13e:	4b30      	ldr	r3, [pc, #192]	@ (800a200 <UART_SetConfig+0x2e4>)
 800a140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a144:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a148:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a14c:	d01a      	beq.n	800a184 <UART_SetConfig+0x268>
 800a14e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a152:	d81b      	bhi.n	800a18c <UART_SetConfig+0x270>
 800a154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a158:	d00c      	beq.n	800a174 <UART_SetConfig+0x258>
 800a15a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a15e:	d815      	bhi.n	800a18c <UART_SetConfig+0x270>
 800a160:	2b00      	cmp	r3, #0
 800a162:	d003      	beq.n	800a16c <UART_SetConfig+0x250>
 800a164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a168:	d008      	beq.n	800a17c <UART_SetConfig+0x260>
 800a16a:	e00f      	b.n	800a18c <UART_SetConfig+0x270>
 800a16c:	2300      	movs	r3, #0
 800a16e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a172:	e052      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a174:	2302      	movs	r3, #2
 800a176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a17a:	e04e      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a17c:	2304      	movs	r3, #4
 800a17e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a182:	e04a      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a184:	2308      	movs	r3, #8
 800a186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a18a:	e046      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a18c:	2310      	movs	r3, #16
 800a18e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a192:	e042      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a17      	ldr	r2, [pc, #92]	@ (800a1f8 <UART_SetConfig+0x2dc>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d13a      	bne.n	800a214 <UART_SetConfig+0x2f8>
 800a19e:	4b18      	ldr	r3, [pc, #96]	@ (800a200 <UART_SetConfig+0x2e4>)
 800a1a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a1a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a1ac:	d01a      	beq.n	800a1e4 <UART_SetConfig+0x2c8>
 800a1ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a1b2:	d81b      	bhi.n	800a1ec <UART_SetConfig+0x2d0>
 800a1b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1b8:	d00c      	beq.n	800a1d4 <UART_SetConfig+0x2b8>
 800a1ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1be:	d815      	bhi.n	800a1ec <UART_SetConfig+0x2d0>
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d003      	beq.n	800a1cc <UART_SetConfig+0x2b0>
 800a1c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1c8:	d008      	beq.n	800a1dc <UART_SetConfig+0x2c0>
 800a1ca:	e00f      	b.n	800a1ec <UART_SetConfig+0x2d0>
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1d2:	e022      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a1d4:	2302      	movs	r3, #2
 800a1d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1da:	e01e      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a1dc:	2304      	movs	r3, #4
 800a1de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1e2:	e01a      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a1e4:	2308      	movs	r3, #8
 800a1e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1ea:	e016      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a1ec:	2310      	movs	r3, #16
 800a1ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1f2:	e012      	b.n	800a21a <UART_SetConfig+0x2fe>
 800a1f4:	cfff69f3 	.word	0xcfff69f3
 800a1f8:	40008000 	.word	0x40008000
 800a1fc:	40013800 	.word	0x40013800
 800a200:	40021000 	.word	0x40021000
 800a204:	40004400 	.word	0x40004400
 800a208:	40004800 	.word	0x40004800
 800a20c:	40004c00 	.word	0x40004c00
 800a210:	40005000 	.word	0x40005000
 800a214:	2310      	movs	r3, #16
 800a216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4aae      	ldr	r2, [pc, #696]	@ (800a4d8 <UART_SetConfig+0x5bc>)
 800a220:	4293      	cmp	r3, r2
 800a222:	f040 8097 	bne.w	800a354 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a226:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a22a:	2b08      	cmp	r3, #8
 800a22c:	d823      	bhi.n	800a276 <UART_SetConfig+0x35a>
 800a22e:	a201      	add	r2, pc, #4	@ (adr r2, 800a234 <UART_SetConfig+0x318>)
 800a230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a234:	0800a259 	.word	0x0800a259
 800a238:	0800a277 	.word	0x0800a277
 800a23c:	0800a261 	.word	0x0800a261
 800a240:	0800a277 	.word	0x0800a277
 800a244:	0800a267 	.word	0x0800a267
 800a248:	0800a277 	.word	0x0800a277
 800a24c:	0800a277 	.word	0x0800a277
 800a250:	0800a277 	.word	0x0800a277
 800a254:	0800a26f 	.word	0x0800a26f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a258:	f7fc fcec 	bl	8006c34 <HAL_RCC_GetPCLK1Freq>
 800a25c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a25e:	e010      	b.n	800a282 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a260:	4b9e      	ldr	r3, [pc, #632]	@ (800a4dc <UART_SetConfig+0x5c0>)
 800a262:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a264:	e00d      	b.n	800a282 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a266:	f7fc fc77 	bl	8006b58 <HAL_RCC_GetSysClockFreq>
 800a26a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a26c:	e009      	b.n	800a282 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a26e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a272:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a274:	e005      	b.n	800a282 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a276:	2300      	movs	r3, #0
 800a278:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a280:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a284:	2b00      	cmp	r3, #0
 800a286:	f000 8130 	beq.w	800a4ea <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a28e:	4a94      	ldr	r2, [pc, #592]	@ (800a4e0 <UART_SetConfig+0x5c4>)
 800a290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a294:	461a      	mov	r2, r3
 800a296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a298:	fbb3 f3f2 	udiv	r3, r3, r2
 800a29c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	685a      	ldr	r2, [r3, #4]
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	005b      	lsls	r3, r3, #1
 800a2a6:	4413      	add	r3, r2
 800a2a8:	69ba      	ldr	r2, [r7, #24]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d305      	bcc.n	800a2ba <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2b4:	69ba      	ldr	r2, [r7, #24]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d903      	bls.n	800a2c2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a2c0:	e113      	b.n	800a4ea <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	60bb      	str	r3, [r7, #8]
 800a2c8:	60fa      	str	r2, [r7, #12]
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ce:	4a84      	ldr	r2, [pc, #528]	@ (800a4e0 <UART_SetConfig+0x5c4>)
 800a2d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	603b      	str	r3, [r7, #0]
 800a2da:	607a      	str	r2, [r7, #4]
 800a2dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a2e4:	f7f6 fbd6 	bl	8000a94 <__aeabi_uldivmod>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	4610      	mov	r0, r2
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	f04f 0200 	mov.w	r2, #0
 800a2f4:	f04f 0300 	mov.w	r3, #0
 800a2f8:	020b      	lsls	r3, r1, #8
 800a2fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a2fe:	0202      	lsls	r2, r0, #8
 800a300:	6979      	ldr	r1, [r7, #20]
 800a302:	6849      	ldr	r1, [r1, #4]
 800a304:	0849      	lsrs	r1, r1, #1
 800a306:	2000      	movs	r0, #0
 800a308:	460c      	mov	r4, r1
 800a30a:	4605      	mov	r5, r0
 800a30c:	eb12 0804 	adds.w	r8, r2, r4
 800a310:	eb43 0905 	adc.w	r9, r3, r5
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	469a      	mov	sl, r3
 800a31c:	4693      	mov	fp, r2
 800a31e:	4652      	mov	r2, sl
 800a320:	465b      	mov	r3, fp
 800a322:	4640      	mov	r0, r8
 800a324:	4649      	mov	r1, r9
 800a326:	f7f6 fbb5 	bl	8000a94 <__aeabi_uldivmod>
 800a32a:	4602      	mov	r2, r0
 800a32c:	460b      	mov	r3, r1
 800a32e:	4613      	mov	r3, r2
 800a330:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a332:	6a3b      	ldr	r3, [r7, #32]
 800a334:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a338:	d308      	bcc.n	800a34c <UART_SetConfig+0x430>
 800a33a:	6a3b      	ldr	r3, [r7, #32]
 800a33c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a340:	d204      	bcs.n	800a34c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	6a3a      	ldr	r2, [r7, #32]
 800a348:	60da      	str	r2, [r3, #12]
 800a34a:	e0ce      	b.n	800a4ea <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a352:	e0ca      	b.n	800a4ea <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	69db      	ldr	r3, [r3, #28]
 800a358:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a35c:	d166      	bne.n	800a42c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a35e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a362:	2b08      	cmp	r3, #8
 800a364:	d827      	bhi.n	800a3b6 <UART_SetConfig+0x49a>
 800a366:	a201      	add	r2, pc, #4	@ (adr r2, 800a36c <UART_SetConfig+0x450>)
 800a368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a36c:	0800a391 	.word	0x0800a391
 800a370:	0800a399 	.word	0x0800a399
 800a374:	0800a3a1 	.word	0x0800a3a1
 800a378:	0800a3b7 	.word	0x0800a3b7
 800a37c:	0800a3a7 	.word	0x0800a3a7
 800a380:	0800a3b7 	.word	0x0800a3b7
 800a384:	0800a3b7 	.word	0x0800a3b7
 800a388:	0800a3b7 	.word	0x0800a3b7
 800a38c:	0800a3af 	.word	0x0800a3af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a390:	f7fc fc50 	bl	8006c34 <HAL_RCC_GetPCLK1Freq>
 800a394:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a396:	e014      	b.n	800a3c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a398:	f7fc fc62 	bl	8006c60 <HAL_RCC_GetPCLK2Freq>
 800a39c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a39e:	e010      	b.n	800a3c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3a0:	4b4e      	ldr	r3, [pc, #312]	@ (800a4dc <UART_SetConfig+0x5c0>)
 800a3a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a3a4:	e00d      	b.n	800a3c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3a6:	f7fc fbd7 	bl	8006b58 <HAL_RCC_GetSysClockFreq>
 800a3aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3ac:	e009      	b.n	800a3c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a3b4:	e005      	b.n	800a3c2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a3c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	f000 8090 	beq.w	800a4ea <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ce:	4a44      	ldr	r2, [pc, #272]	@ (800a4e0 <UART_SetConfig+0x5c4>)
 800a3d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3dc:	005a      	lsls	r2, r3, #1
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	085b      	lsrs	r3, r3, #1
 800a3e4:	441a      	add	r2, r3
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3f0:	6a3b      	ldr	r3, [r7, #32]
 800a3f2:	2b0f      	cmp	r3, #15
 800a3f4:	d916      	bls.n	800a424 <UART_SetConfig+0x508>
 800a3f6:	6a3b      	ldr	r3, [r7, #32]
 800a3f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3fc:	d212      	bcs.n	800a424 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3fe:	6a3b      	ldr	r3, [r7, #32]
 800a400:	b29b      	uxth	r3, r3
 800a402:	f023 030f 	bic.w	r3, r3, #15
 800a406:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a408:	6a3b      	ldr	r3, [r7, #32]
 800a40a:	085b      	lsrs	r3, r3, #1
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	f003 0307 	and.w	r3, r3, #7
 800a412:	b29a      	uxth	r2, r3
 800a414:	8bfb      	ldrh	r3, [r7, #30]
 800a416:	4313      	orrs	r3, r2
 800a418:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	8bfa      	ldrh	r2, [r7, #30]
 800a420:	60da      	str	r2, [r3, #12]
 800a422:	e062      	b.n	800a4ea <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a42a:	e05e      	b.n	800a4ea <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a42c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a430:	2b08      	cmp	r3, #8
 800a432:	d828      	bhi.n	800a486 <UART_SetConfig+0x56a>
 800a434:	a201      	add	r2, pc, #4	@ (adr r2, 800a43c <UART_SetConfig+0x520>)
 800a436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a43a:	bf00      	nop
 800a43c:	0800a461 	.word	0x0800a461
 800a440:	0800a469 	.word	0x0800a469
 800a444:	0800a471 	.word	0x0800a471
 800a448:	0800a487 	.word	0x0800a487
 800a44c:	0800a477 	.word	0x0800a477
 800a450:	0800a487 	.word	0x0800a487
 800a454:	0800a487 	.word	0x0800a487
 800a458:	0800a487 	.word	0x0800a487
 800a45c:	0800a47f 	.word	0x0800a47f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a460:	f7fc fbe8 	bl	8006c34 <HAL_RCC_GetPCLK1Freq>
 800a464:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a466:	e014      	b.n	800a492 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a468:	f7fc fbfa 	bl	8006c60 <HAL_RCC_GetPCLK2Freq>
 800a46c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a46e:	e010      	b.n	800a492 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a470:	4b1a      	ldr	r3, [pc, #104]	@ (800a4dc <UART_SetConfig+0x5c0>)
 800a472:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a474:	e00d      	b.n	800a492 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a476:	f7fc fb6f 	bl	8006b58 <HAL_RCC_GetSysClockFreq>
 800a47a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a47c:	e009      	b.n	800a492 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a47e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a482:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a484:	e005      	b.n	800a492 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a486:	2300      	movs	r3, #0
 800a488:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a490:	bf00      	nop
    }

    if (pclk != 0U)
 800a492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a494:	2b00      	cmp	r3, #0
 800a496:	d028      	beq.n	800a4ea <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a49c:	4a10      	ldr	r2, [pc, #64]	@ (800a4e0 <UART_SetConfig+0x5c4>)
 800a49e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a6:	fbb3 f2f2 	udiv	r2, r3, r2
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	085b      	lsrs	r3, r3, #1
 800a4b0:	441a      	add	r2, r3
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4bc:	6a3b      	ldr	r3, [r7, #32]
 800a4be:	2b0f      	cmp	r3, #15
 800a4c0:	d910      	bls.n	800a4e4 <UART_SetConfig+0x5c8>
 800a4c2:	6a3b      	ldr	r3, [r7, #32]
 800a4c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4c8:	d20c      	bcs.n	800a4e4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a4ca:	6a3b      	ldr	r3, [r7, #32]
 800a4cc:	b29a      	uxth	r2, r3
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	60da      	str	r2, [r3, #12]
 800a4d4:	e009      	b.n	800a4ea <UART_SetConfig+0x5ce>
 800a4d6:	bf00      	nop
 800a4d8:	40008000 	.word	0x40008000
 800a4dc:	00f42400 	.word	0x00f42400
 800a4e0:	0800bd60 	.word	0x0800bd60
      }
      else
      {
        ret = HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	2200      	movs	r2, #0
 800a504:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a506:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3730      	adds	r7, #48	@ 0x30
 800a50e:	46bd      	mov	sp, r7
 800a510:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a514 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a520:	f003 0308 	and.w	r3, r3, #8
 800a524:	2b00      	cmp	r3, #0
 800a526:	d00a      	beq.n	800a53e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	430a      	orrs	r2, r1
 800a53c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a542:	f003 0301 	and.w	r3, r3, #1
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00a      	beq.n	800a560 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	430a      	orrs	r2, r1
 800a55e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a564:	f003 0302 	and.w	r3, r3, #2
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00a      	beq.n	800a582 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	430a      	orrs	r2, r1
 800a580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a586:	f003 0304 	and.w	r3, r3, #4
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00a      	beq.n	800a5a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	430a      	orrs	r2, r1
 800a5a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5a8:	f003 0310 	and.w	r3, r3, #16
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d00a      	beq.n	800a5c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	689b      	ldr	r3, [r3, #8]
 800a5b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	430a      	orrs	r2, r1
 800a5c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ca:	f003 0320 	and.w	r3, r3, #32
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00a      	beq.n	800a5e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	430a      	orrs	r2, r1
 800a5e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d01a      	beq.n	800a62a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	430a      	orrs	r2, r1
 800a608:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a60e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a612:	d10a      	bne.n	800a62a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	430a      	orrs	r2, r1
 800a628:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a62e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00a      	beq.n	800a64c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	430a      	orrs	r2, r1
 800a64a:	605a      	str	r2, [r3, #4]
  }
}
 800a64c:	bf00      	nop
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b098      	sub	sp, #96	@ 0x60
 800a65c:	af02      	add	r7, sp, #8
 800a65e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a668:	f7f9 fae4 	bl	8003c34 <HAL_GetTick>
 800a66c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f003 0308 	and.w	r3, r3, #8
 800a678:	2b08      	cmp	r3, #8
 800a67a:	d12f      	bne.n	800a6dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a67c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a680:	9300      	str	r3, [sp, #0]
 800a682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a684:	2200      	movs	r2, #0
 800a686:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 f88e 	bl	800a7ac <UART_WaitOnFlagUntilTimeout>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d022      	beq.n	800a6dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a69e:	e853 3f00 	ldrex	r3, [r3]
 800a6a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a6a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a6aa:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a6ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6bc:	e841 2300 	strex	r3, r2, [r1]
 800a6c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d1e6      	bne.n	800a696 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2220      	movs	r2, #32
 800a6cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6d8:	2303      	movs	r3, #3
 800a6da:	e063      	b.n	800a7a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f003 0304 	and.w	r3, r3, #4
 800a6e6:	2b04      	cmp	r3, #4
 800a6e8:	d149      	bne.n	800a77e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 f857 	bl	800a7ac <UART_WaitOnFlagUntilTimeout>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d03c      	beq.n	800a77e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a70c:	e853 3f00 	ldrex	r3, [r3]
 800a710:	623b      	str	r3, [r7, #32]
   return(result);
 800a712:	6a3b      	ldr	r3, [r7, #32]
 800a714:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a718:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	461a      	mov	r2, r3
 800a720:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a722:	633b      	str	r3, [r7, #48]	@ 0x30
 800a724:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a726:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a72a:	e841 2300 	strex	r3, r2, [r1]
 800a72e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a732:	2b00      	cmp	r3, #0
 800a734:	d1e6      	bne.n	800a704 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	3308      	adds	r3, #8
 800a73c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	e853 3f00 	ldrex	r3, [r3]
 800a744:	60fb      	str	r3, [r7, #12]
   return(result);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f023 0301 	bic.w	r3, r3, #1
 800a74c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	3308      	adds	r3, #8
 800a754:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a756:	61fa      	str	r2, [r7, #28]
 800a758:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75a:	69b9      	ldr	r1, [r7, #24]
 800a75c:	69fa      	ldr	r2, [r7, #28]
 800a75e:	e841 2300 	strex	r3, r2, [r1]
 800a762:	617b      	str	r3, [r7, #20]
   return(result);
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d1e5      	bne.n	800a736 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2220      	movs	r2, #32
 800a76e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a77a:	2303      	movs	r3, #3
 800a77c:	e012      	b.n	800a7a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2220      	movs	r2, #32
 800a782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2220      	movs	r2, #32
 800a78a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3758      	adds	r7, #88	@ 0x58
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	603b      	str	r3, [r7, #0]
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7bc:	e04f      	b.n	800a85e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c4:	d04b      	beq.n	800a85e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7c6:	f7f9 fa35 	bl	8003c34 <HAL_GetTick>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	1ad3      	subs	r3, r2, r3
 800a7d0:	69ba      	ldr	r2, [r7, #24]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d302      	bcc.n	800a7dc <UART_WaitOnFlagUntilTimeout+0x30>
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d101      	bne.n	800a7e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a7dc:	2303      	movs	r3, #3
 800a7de:	e04e      	b.n	800a87e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f003 0304 	and.w	r3, r3, #4
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d037      	beq.n	800a85e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	2b80      	cmp	r3, #128	@ 0x80
 800a7f2:	d034      	beq.n	800a85e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	2b40      	cmp	r3, #64	@ 0x40
 800a7f8:	d031      	beq.n	800a85e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	69db      	ldr	r3, [r3, #28]
 800a800:	f003 0308 	and.w	r3, r3, #8
 800a804:	2b08      	cmp	r3, #8
 800a806:	d110      	bne.n	800a82a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2208      	movs	r2, #8
 800a80e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	f000 f920 	bl	800aa56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2208      	movs	r2, #8
 800a81a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2200      	movs	r2, #0
 800a822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a826:	2301      	movs	r3, #1
 800a828:	e029      	b.n	800a87e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	69db      	ldr	r3, [r3, #28]
 800a830:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a834:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a838:	d111      	bne.n	800a85e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a842:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f000 f906 	bl	800aa56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2220      	movs	r2, #32
 800a84e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2200      	movs	r2, #0
 800a856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a85a:	2303      	movs	r3, #3
 800a85c:	e00f      	b.n	800a87e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	69da      	ldr	r2, [r3, #28]
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	4013      	ands	r3, r2
 800a868:	68ba      	ldr	r2, [r7, #8]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	bf0c      	ite	eq
 800a86e:	2301      	moveq	r3, #1
 800a870:	2300      	movne	r3, #0
 800a872:	b2db      	uxtb	r3, r3
 800a874:	461a      	mov	r2, r3
 800a876:	79fb      	ldrb	r3, [r7, #7]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d0a0      	beq.n	800a7be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a87c:	2300      	movs	r3, #0
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
	...

0800a888 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b096      	sub	sp, #88	@ 0x58
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	4613      	mov	r3, r2
 800a894:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	68ba      	ldr	r2, [r7, #8]
 800a89a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	88fa      	ldrh	r2, [r7, #6]
 800a8a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2222      	movs	r2, #34	@ 0x22
 800a8b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d02d      	beq.n	800a91a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8c4:	4a40      	ldr	r2, [pc, #256]	@ (800a9c8 <UART_Start_Receive_DMA+0x140>)
 800a8c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8ce:	4a3f      	ldr	r2, [pc, #252]	@ (800a9cc <UART_Start_Receive_DMA+0x144>)
 800a8d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8d8:	4a3d      	ldr	r2, [pc, #244]	@ (800a9d0 <UART_Start_Receive_DMA+0x148>)
 800a8da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	3324      	adds	r3, #36	@ 0x24
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	88fb      	ldrh	r3, [r7, #6]
 800a8fc:	f7fa ffd6 	bl	80058ac <HAL_DMA_Start_IT>
 800a900:	4603      	mov	r3, r0
 800a902:	2b00      	cmp	r3, #0
 800a904:	d009      	beq.n	800a91a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2210      	movs	r2, #16
 800a90a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2220      	movs	r2, #32
 800a912:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	e051      	b.n	800a9be <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d018      	beq.n	800a954 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a92a:	e853 3f00 	ldrex	r3, [r3]
 800a92e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a936:	657b      	str	r3, [r7, #84]	@ 0x54
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	461a      	mov	r2, r3
 800a93e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a940:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a942:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a944:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a946:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a948:	e841 2300 	strex	r3, r2, [r1]
 800a94c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a94e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a950:	2b00      	cmp	r3, #0
 800a952:	d1e6      	bne.n	800a922 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	3308      	adds	r3, #8
 800a95a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a95c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a95e:	e853 3f00 	ldrex	r3, [r3]
 800a962:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a966:	f043 0301 	orr.w	r3, r3, #1
 800a96a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	3308      	adds	r3, #8
 800a972:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a974:	637a      	str	r2, [r7, #52]	@ 0x34
 800a976:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a978:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a97a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a97c:	e841 2300 	strex	r3, r2, [r1]
 800a980:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a984:	2b00      	cmp	r3, #0
 800a986:	d1e5      	bne.n	800a954 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	3308      	adds	r3, #8
 800a98e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	e853 3f00 	ldrex	r3, [r3]
 800a996:	613b      	str	r3, [r7, #16]
   return(result);
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a99e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	3308      	adds	r3, #8
 800a9a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a9a8:	623a      	str	r2, [r7, #32]
 800a9aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ac:	69f9      	ldr	r1, [r7, #28]
 800a9ae:	6a3a      	ldr	r2, [r7, #32]
 800a9b0:	e841 2300 	strex	r3, r2, [r1]
 800a9b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1e5      	bne.n	800a988 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a9bc:	2300      	movs	r3, #0
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3758      	adds	r7, #88	@ 0x58
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	0800ab23 	.word	0x0800ab23
 800a9cc:	0800ac57 	.word	0x0800ac57
 800a9d0:	0800ac9d 	.word	0x0800ac9d

0800a9d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b08f      	sub	sp, #60	@ 0x3c
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e2:	6a3b      	ldr	r3, [r7, #32]
 800a9e4:	e853 3f00 	ldrex	r3, [r3]
 800a9e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a9f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9fc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa02:	e841 2300 	strex	r3, r2, [r1]
 800aa06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d1e6      	bne.n	800a9dc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	3308      	adds	r3, #8
 800aa14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	e853 3f00 	ldrex	r3, [r3]
 800aa1c:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800aa24:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	3308      	adds	r3, #8
 800aa2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa2e:	61ba      	str	r2, [r7, #24]
 800aa30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa32:	6979      	ldr	r1, [r7, #20]
 800aa34:	69ba      	ldr	r2, [r7, #24]
 800aa36:	e841 2300 	strex	r3, r2, [r1]
 800aa3a:	613b      	str	r3, [r7, #16]
   return(result);
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d1e5      	bne.n	800aa0e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2220      	movs	r2, #32
 800aa46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800aa4a:	bf00      	nop
 800aa4c:	373c      	adds	r7, #60	@ 0x3c
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr

0800aa56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa56:	b480      	push	{r7}
 800aa58:	b095      	sub	sp, #84	@ 0x54
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa66:	e853 3f00 	ldrex	r3, [r3]
 800aa6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	461a      	mov	r2, r3
 800aa7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa7c:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa84:	e841 2300 	strex	r3, r2, [r1]
 800aa88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d1e6      	bne.n	800aa5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	3308      	adds	r3, #8
 800aa96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa98:	6a3b      	ldr	r3, [r7, #32]
 800aa9a:	e853 3f00 	ldrex	r3, [r3]
 800aa9e:	61fb      	str	r3, [r7, #28]
   return(result);
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aaa6:	f023 0301 	bic.w	r3, r3, #1
 800aaaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	3308      	adds	r3, #8
 800aab2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aab4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aab6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aaba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aabc:	e841 2300 	strex	r3, r2, [r1]
 800aac0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d1e3      	bne.n	800aa90 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d118      	bne.n	800ab02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	e853 3f00 	ldrex	r3, [r3]
 800aadc:	60bb      	str	r3, [r7, #8]
   return(result);
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	f023 0310 	bic.w	r3, r3, #16
 800aae4:	647b      	str	r3, [r7, #68]	@ 0x44
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	461a      	mov	r2, r3
 800aaec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aaee:	61bb      	str	r3, [r7, #24]
 800aaf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf2:	6979      	ldr	r1, [r7, #20]
 800aaf4:	69ba      	ldr	r2, [r7, #24]
 800aaf6:	e841 2300 	strex	r3, r2, [r1]
 800aafa:	613b      	str	r3, [r7, #16]
   return(result);
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1e6      	bne.n	800aad0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2220      	movs	r2, #32
 800ab06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ab16:	bf00      	nop
 800ab18:	3754      	adds	r7, #84	@ 0x54
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr

0800ab22 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab22:	b580      	push	{r7, lr}
 800ab24:	b09c      	sub	sp, #112	@ 0x70
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab2e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f003 0320 	and.w	r3, r3, #32
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d171      	bne.n	800ac22 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ab3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab40:	2200      	movs	r2, #0
 800ab42:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab4e:	e853 3f00 	ldrex	r3, [r3]
 800ab52:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ab54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ab5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	461a      	mov	r2, r3
 800ab62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab64:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ab66:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ab6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ab6c:	e841 2300 	strex	r3, r2, [r1]
 800ab70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ab72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d1e6      	bne.n	800ab46 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	3308      	adds	r3, #8
 800ab7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab82:	e853 3f00 	ldrex	r3, [r3]
 800ab86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab8a:	f023 0301 	bic.w	r3, r3, #1
 800ab8e:	667b      	str	r3, [r7, #100]	@ 0x64
 800ab90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	3308      	adds	r3, #8
 800ab96:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ab98:	647a      	str	r2, [r7, #68]	@ 0x44
 800ab9a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aba0:	e841 2300 	strex	r3, r2, [r1]
 800aba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d1e5      	bne.n	800ab78 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	3308      	adds	r3, #8
 800abb2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb6:	e853 3f00 	ldrex	r3, [r3]
 800abba:	623b      	str	r3, [r7, #32]
   return(result);
 800abbc:	6a3b      	ldr	r3, [r7, #32]
 800abbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abc2:	663b      	str	r3, [r7, #96]	@ 0x60
 800abc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	3308      	adds	r3, #8
 800abca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800abcc:	633a      	str	r2, [r7, #48]	@ 0x30
 800abce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800abd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abd4:	e841 2300 	strex	r3, r2, [r1]
 800abd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800abda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d1e5      	bne.n	800abac <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800abe0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abe2:	2220      	movs	r2, #32
 800abe4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abec:	2b01      	cmp	r3, #1
 800abee:	d118      	bne.n	800ac22 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	e853 3f00 	ldrex	r3, [r3]
 800abfc:	60fb      	str	r3, [r7, #12]
   return(result);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f023 0310 	bic.w	r3, r3, #16
 800ac04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac0e:	61fb      	str	r3, [r7, #28]
 800ac10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac12:	69b9      	ldr	r1, [r7, #24]
 800ac14:	69fa      	ldr	r2, [r7, #28]
 800ac16:	e841 2300 	strex	r3, r2, [r1]
 800ac1a:	617b      	str	r3, [r7, #20]
   return(result);
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1e6      	bne.n	800abf0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac24:	2200      	movs	r2, #0
 800ac26:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d109      	bne.n	800ac44 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800ac30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac32:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ac36:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ac38:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800ac3c:	4611      	mov	r1, r2
 800ac3e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ac40:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac42:	e004      	b.n	800ac4e <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800ac44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ac4a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ac4c:	4798      	blx	r3
}
 800ac4e:	bf00      	nop
 800ac50:	3770      	adds	r7, #112	@ 0x70
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b084      	sub	sp, #16
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac62:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2201      	movs	r2, #1
 800ac68:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d10b      	bne.n	800ac8a <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ac78:	68fa      	ldr	r2, [r7, #12]
 800ac7a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800ac7e:	0852      	lsrs	r2, r2, #1
 800ac80:	b292      	uxth	r2, r2
 800ac82:	4611      	mov	r1, r2
 800ac84:	68f8      	ldr	r0, [r7, #12]
 800ac86:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac88:	e004      	b.n	800ac94 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	4798      	blx	r3
}
 800ac94:	bf00      	nop
 800ac96:	3710      	adds	r7, #16
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b086      	sub	sp, #24
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aca8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acb0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800acb8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acc4:	2b80      	cmp	r3, #128	@ 0x80
 800acc6:	d109      	bne.n	800acdc <UART_DMAError+0x40>
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	2b21      	cmp	r3, #33	@ 0x21
 800accc:	d106      	bne.n	800acdc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	2200      	movs	r2, #0
 800acd2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800acd6:	6978      	ldr	r0, [r7, #20]
 800acd8:	f7ff fe7c 	bl	800a9d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ace6:	2b40      	cmp	r3, #64	@ 0x40
 800ace8:	d109      	bne.n	800acfe <UART_DMAError+0x62>
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2b22      	cmp	r3, #34	@ 0x22
 800acee:	d106      	bne.n	800acfe <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800acf8:	6978      	ldr	r0, [r7, #20]
 800acfa:	f7ff feac 	bl	800aa56 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad04:	f043 0210 	orr.w	r2, r3, #16
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ad14:	6978      	ldr	r0, [r7, #20]
 800ad16:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad18:	bf00      	nop
 800ad1a:	3718      	adds	r7, #24
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2200      	movs	r2, #0
 800ad32:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad40:	bf00      	nop
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b088      	sub	sp, #32
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	e853 3f00 	ldrex	r3, [r3]
 800ad5c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad64:	61fb      	str	r3, [r7, #28]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	61bb      	str	r3, [r7, #24]
 800ad70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad72:	6979      	ldr	r1, [r7, #20]
 800ad74:	69ba      	ldr	r2, [r7, #24]
 800ad76:	e841 2300 	strex	r3, r2, [r1]
 800ad7a:	613b      	str	r3, [r7, #16]
   return(result);
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1e6      	bne.n	800ad50 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2220      	movs	r2, #32
 800ad86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad9a:	bf00      	nop
 800ad9c:	3720      	adds	r7, #32
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ada2:	b480      	push	{r7}
 800ada4:	b083      	sub	sp, #12
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800adaa:	bf00      	nop
 800adac:	370c      	adds	r7, #12
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr

0800adb6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800adb6:	b480      	push	{r7}
 800adb8:	b083      	sub	sp, #12
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800adbe:	bf00      	nop
 800adc0:	370c      	adds	r7, #12
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800adca:	b480      	push	{r7}
 800adcc:	b083      	sub	sp, #12
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800add2:	bf00      	nop
 800add4:	370c      	adds	r7, #12
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr

0800adde <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800adde:	b480      	push	{r7}
 800ade0:	b085      	sub	sp, #20
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800adec:	2b01      	cmp	r3, #1
 800adee:	d101      	bne.n	800adf4 <HAL_UARTEx_DisableFifoMode+0x16>
 800adf0:	2302      	movs	r3, #2
 800adf2:	e027      	b.n	800ae44 <HAL_UARTEx_DisableFifoMode+0x66>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2201      	movs	r2, #1
 800adf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2224      	movs	r2, #36	@ 0x24
 800ae00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f022 0201 	bic.w	r2, r2, #1
 800ae1a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ae22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	68fa      	ldr	r2, [r7, #12]
 800ae30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2220      	movs	r2, #32
 800ae36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae42:	2300      	movs	r3, #0
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3714      	adds	r7, #20
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d101      	bne.n	800ae68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ae64:	2302      	movs	r3, #2
 800ae66:	e02d      	b.n	800aec4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2224      	movs	r2, #36	@ 0x24
 800ae74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f022 0201 	bic.w	r2, r2, #1
 800ae8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	683a      	ldr	r2, [r7, #0]
 800aea0:	430a      	orrs	r2, r1
 800aea2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 f84f 	bl	800af48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2220      	movs	r2, #32
 800aeb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d101      	bne.n	800aee4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aee0:	2302      	movs	r3, #2
 800aee2:	e02d      	b.n	800af40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2201      	movs	r2, #1
 800aee8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2224      	movs	r2, #36	@ 0x24
 800aef0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f022 0201 	bic.w	r2, r2, #1
 800af0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	683a      	ldr	r2, [r7, #0]
 800af1c:	430a      	orrs	r2, r1
 800af1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 f811 	bl	800af48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	68fa      	ldr	r2, [r7, #12]
 800af2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2220      	movs	r2, #32
 800af32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2200      	movs	r2, #0
 800af3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af54:	2b00      	cmp	r3, #0
 800af56:	d108      	bne.n	800af6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800af68:	e031      	b.n	800afce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800af6a:	2308      	movs	r3, #8
 800af6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800af6e:	2308      	movs	r3, #8
 800af70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	0e5b      	lsrs	r3, r3, #25
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	f003 0307 	and.w	r3, r3, #7
 800af80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	0f5b      	lsrs	r3, r3, #29
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	f003 0307 	and.w	r3, r3, #7
 800af90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af92:	7bbb      	ldrb	r3, [r7, #14]
 800af94:	7b3a      	ldrb	r2, [r7, #12]
 800af96:	4911      	ldr	r1, [pc, #68]	@ (800afdc <UARTEx_SetNbDataToProcess+0x94>)
 800af98:	5c8a      	ldrb	r2, [r1, r2]
 800af9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800af9e:	7b3a      	ldrb	r2, [r7, #12]
 800afa0:	490f      	ldr	r1, [pc, #60]	@ (800afe0 <UARTEx_SetNbDataToProcess+0x98>)
 800afa2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800afa4:	fb93 f3f2 	sdiv	r3, r3, r2
 800afa8:	b29a      	uxth	r2, r3
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800afb0:	7bfb      	ldrb	r3, [r7, #15]
 800afb2:	7b7a      	ldrb	r2, [r7, #13]
 800afb4:	4909      	ldr	r1, [pc, #36]	@ (800afdc <UARTEx_SetNbDataToProcess+0x94>)
 800afb6:	5c8a      	ldrb	r2, [r1, r2]
 800afb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800afbc:	7b7a      	ldrb	r2, [r7, #13]
 800afbe:	4908      	ldr	r1, [pc, #32]	@ (800afe0 <UARTEx_SetNbDataToProcess+0x98>)
 800afc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800afc2:	fb93 f3f2 	sdiv	r3, r3, r2
 800afc6:	b29a      	uxth	r2, r3
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800afce:	bf00      	nop
 800afd0:	3714      	adds	r7, #20
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	0800bd78 	.word	0x0800bd78
 800afe0:	0800bd80 	.word	0x0800bd80

0800afe4 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	607b      	str	r3, [r7, #4]
 800afee:	460b      	mov	r3, r1
 800aff0:	817b      	strh	r3, [r7, #10]
 800aff2:	4613      	mov	r3, r2
 800aff4:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	897a      	ldrh	r2, [r7, #10]
 800affa:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	893a      	ldrh	r2, [r7, #8]
 800b000:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	605a      	str	r2, [r3, #4]
}
 800b008:	bf00      	nop
 800b00a:	3714      	adds	r7, #20
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <malloc>:
 800b014:	4b02      	ldr	r3, [pc, #8]	@ (800b020 <malloc+0xc>)
 800b016:	4601      	mov	r1, r0
 800b018:	6818      	ldr	r0, [r3, #0]
 800b01a:	f000 b825 	b.w	800b068 <_malloc_r>
 800b01e:	bf00      	nop
 800b020:	20000170 	.word	0x20000170

0800b024 <sbrk_aligned>:
 800b024:	b570      	push	{r4, r5, r6, lr}
 800b026:	4e0f      	ldr	r6, [pc, #60]	@ (800b064 <sbrk_aligned+0x40>)
 800b028:	460c      	mov	r4, r1
 800b02a:	6831      	ldr	r1, [r6, #0]
 800b02c:	4605      	mov	r5, r0
 800b02e:	b911      	cbnz	r1, 800b036 <sbrk_aligned+0x12>
 800b030:	f000 f8ae 	bl	800b190 <_sbrk_r>
 800b034:	6030      	str	r0, [r6, #0]
 800b036:	4621      	mov	r1, r4
 800b038:	4628      	mov	r0, r5
 800b03a:	f000 f8a9 	bl	800b190 <_sbrk_r>
 800b03e:	1c43      	adds	r3, r0, #1
 800b040:	d103      	bne.n	800b04a <sbrk_aligned+0x26>
 800b042:	f04f 34ff 	mov.w	r4, #4294967295
 800b046:	4620      	mov	r0, r4
 800b048:	bd70      	pop	{r4, r5, r6, pc}
 800b04a:	1cc4      	adds	r4, r0, #3
 800b04c:	f024 0403 	bic.w	r4, r4, #3
 800b050:	42a0      	cmp	r0, r4
 800b052:	d0f8      	beq.n	800b046 <sbrk_aligned+0x22>
 800b054:	1a21      	subs	r1, r4, r0
 800b056:	4628      	mov	r0, r5
 800b058:	f000 f89a 	bl	800b190 <_sbrk_r>
 800b05c:	3001      	adds	r0, #1
 800b05e:	d1f2      	bne.n	800b046 <sbrk_aligned+0x22>
 800b060:	e7ef      	b.n	800b042 <sbrk_aligned+0x1e>
 800b062:	bf00      	nop
 800b064:	20001ae8 	.word	0x20001ae8

0800b068 <_malloc_r>:
 800b068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b06c:	1ccd      	adds	r5, r1, #3
 800b06e:	f025 0503 	bic.w	r5, r5, #3
 800b072:	3508      	adds	r5, #8
 800b074:	2d0c      	cmp	r5, #12
 800b076:	bf38      	it	cc
 800b078:	250c      	movcc	r5, #12
 800b07a:	2d00      	cmp	r5, #0
 800b07c:	4606      	mov	r6, r0
 800b07e:	db01      	blt.n	800b084 <_malloc_r+0x1c>
 800b080:	42a9      	cmp	r1, r5
 800b082:	d904      	bls.n	800b08e <_malloc_r+0x26>
 800b084:	230c      	movs	r3, #12
 800b086:	6033      	str	r3, [r6, #0]
 800b088:	2000      	movs	r0, #0
 800b08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b08e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b164 <_malloc_r+0xfc>
 800b092:	f000 f869 	bl	800b168 <__malloc_lock>
 800b096:	f8d8 3000 	ldr.w	r3, [r8]
 800b09a:	461c      	mov	r4, r3
 800b09c:	bb44      	cbnz	r4, 800b0f0 <_malloc_r+0x88>
 800b09e:	4629      	mov	r1, r5
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	f7ff ffbf 	bl	800b024 <sbrk_aligned>
 800b0a6:	1c43      	adds	r3, r0, #1
 800b0a8:	4604      	mov	r4, r0
 800b0aa:	d158      	bne.n	800b15e <_malloc_r+0xf6>
 800b0ac:	f8d8 4000 	ldr.w	r4, [r8]
 800b0b0:	4627      	mov	r7, r4
 800b0b2:	2f00      	cmp	r7, #0
 800b0b4:	d143      	bne.n	800b13e <_malloc_r+0xd6>
 800b0b6:	2c00      	cmp	r4, #0
 800b0b8:	d04b      	beq.n	800b152 <_malloc_r+0xea>
 800b0ba:	6823      	ldr	r3, [r4, #0]
 800b0bc:	4639      	mov	r1, r7
 800b0be:	4630      	mov	r0, r6
 800b0c0:	eb04 0903 	add.w	r9, r4, r3
 800b0c4:	f000 f864 	bl	800b190 <_sbrk_r>
 800b0c8:	4581      	cmp	r9, r0
 800b0ca:	d142      	bne.n	800b152 <_malloc_r+0xea>
 800b0cc:	6821      	ldr	r1, [r4, #0]
 800b0ce:	1a6d      	subs	r5, r5, r1
 800b0d0:	4629      	mov	r1, r5
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	f7ff ffa6 	bl	800b024 <sbrk_aligned>
 800b0d8:	3001      	adds	r0, #1
 800b0da:	d03a      	beq.n	800b152 <_malloc_r+0xea>
 800b0dc:	6823      	ldr	r3, [r4, #0]
 800b0de:	442b      	add	r3, r5
 800b0e0:	6023      	str	r3, [r4, #0]
 800b0e2:	f8d8 3000 	ldr.w	r3, [r8]
 800b0e6:	685a      	ldr	r2, [r3, #4]
 800b0e8:	bb62      	cbnz	r2, 800b144 <_malloc_r+0xdc>
 800b0ea:	f8c8 7000 	str.w	r7, [r8]
 800b0ee:	e00f      	b.n	800b110 <_malloc_r+0xa8>
 800b0f0:	6822      	ldr	r2, [r4, #0]
 800b0f2:	1b52      	subs	r2, r2, r5
 800b0f4:	d420      	bmi.n	800b138 <_malloc_r+0xd0>
 800b0f6:	2a0b      	cmp	r2, #11
 800b0f8:	d917      	bls.n	800b12a <_malloc_r+0xc2>
 800b0fa:	1961      	adds	r1, r4, r5
 800b0fc:	42a3      	cmp	r3, r4
 800b0fe:	6025      	str	r5, [r4, #0]
 800b100:	bf18      	it	ne
 800b102:	6059      	strne	r1, [r3, #4]
 800b104:	6863      	ldr	r3, [r4, #4]
 800b106:	bf08      	it	eq
 800b108:	f8c8 1000 	streq.w	r1, [r8]
 800b10c:	5162      	str	r2, [r4, r5]
 800b10e:	604b      	str	r3, [r1, #4]
 800b110:	4630      	mov	r0, r6
 800b112:	f000 f82f 	bl	800b174 <__malloc_unlock>
 800b116:	f104 000b 	add.w	r0, r4, #11
 800b11a:	1d23      	adds	r3, r4, #4
 800b11c:	f020 0007 	bic.w	r0, r0, #7
 800b120:	1ac2      	subs	r2, r0, r3
 800b122:	bf1c      	itt	ne
 800b124:	1a1b      	subne	r3, r3, r0
 800b126:	50a3      	strne	r3, [r4, r2]
 800b128:	e7af      	b.n	800b08a <_malloc_r+0x22>
 800b12a:	6862      	ldr	r2, [r4, #4]
 800b12c:	42a3      	cmp	r3, r4
 800b12e:	bf0c      	ite	eq
 800b130:	f8c8 2000 	streq.w	r2, [r8]
 800b134:	605a      	strne	r2, [r3, #4]
 800b136:	e7eb      	b.n	800b110 <_malloc_r+0xa8>
 800b138:	4623      	mov	r3, r4
 800b13a:	6864      	ldr	r4, [r4, #4]
 800b13c:	e7ae      	b.n	800b09c <_malloc_r+0x34>
 800b13e:	463c      	mov	r4, r7
 800b140:	687f      	ldr	r7, [r7, #4]
 800b142:	e7b6      	b.n	800b0b2 <_malloc_r+0x4a>
 800b144:	461a      	mov	r2, r3
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	42a3      	cmp	r3, r4
 800b14a:	d1fb      	bne.n	800b144 <_malloc_r+0xdc>
 800b14c:	2300      	movs	r3, #0
 800b14e:	6053      	str	r3, [r2, #4]
 800b150:	e7de      	b.n	800b110 <_malloc_r+0xa8>
 800b152:	230c      	movs	r3, #12
 800b154:	6033      	str	r3, [r6, #0]
 800b156:	4630      	mov	r0, r6
 800b158:	f000 f80c 	bl	800b174 <__malloc_unlock>
 800b15c:	e794      	b.n	800b088 <_malloc_r+0x20>
 800b15e:	6005      	str	r5, [r0, #0]
 800b160:	e7d6      	b.n	800b110 <_malloc_r+0xa8>
 800b162:	bf00      	nop
 800b164:	20001aec 	.word	0x20001aec

0800b168 <__malloc_lock>:
 800b168:	4801      	ldr	r0, [pc, #4]	@ (800b170 <__malloc_lock+0x8>)
 800b16a:	f000 b84b 	b.w	800b204 <__retarget_lock_acquire_recursive>
 800b16e:	bf00      	nop
 800b170:	20001c2c 	.word	0x20001c2c

0800b174 <__malloc_unlock>:
 800b174:	4801      	ldr	r0, [pc, #4]	@ (800b17c <__malloc_unlock+0x8>)
 800b176:	f000 b846 	b.w	800b206 <__retarget_lock_release_recursive>
 800b17a:	bf00      	nop
 800b17c:	20001c2c 	.word	0x20001c2c

0800b180 <memset>:
 800b180:	4402      	add	r2, r0
 800b182:	4603      	mov	r3, r0
 800b184:	4293      	cmp	r3, r2
 800b186:	d100      	bne.n	800b18a <memset+0xa>
 800b188:	4770      	bx	lr
 800b18a:	f803 1b01 	strb.w	r1, [r3], #1
 800b18e:	e7f9      	b.n	800b184 <memset+0x4>

0800b190 <_sbrk_r>:
 800b190:	b538      	push	{r3, r4, r5, lr}
 800b192:	4d06      	ldr	r5, [pc, #24]	@ (800b1ac <_sbrk_r+0x1c>)
 800b194:	2300      	movs	r3, #0
 800b196:	4604      	mov	r4, r0
 800b198:	4608      	mov	r0, r1
 800b19a:	602b      	str	r3, [r5, #0]
 800b19c:	f7f7 ffe8 	bl	8003170 <_sbrk>
 800b1a0:	1c43      	adds	r3, r0, #1
 800b1a2:	d102      	bne.n	800b1aa <_sbrk_r+0x1a>
 800b1a4:	682b      	ldr	r3, [r5, #0]
 800b1a6:	b103      	cbz	r3, 800b1aa <_sbrk_r+0x1a>
 800b1a8:	6023      	str	r3, [r4, #0]
 800b1aa:	bd38      	pop	{r3, r4, r5, pc}
 800b1ac:	20001c28 	.word	0x20001c28

0800b1b0 <__errno>:
 800b1b0:	4b01      	ldr	r3, [pc, #4]	@ (800b1b8 <__errno+0x8>)
 800b1b2:	6818      	ldr	r0, [r3, #0]
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop
 800b1b8:	20000170 	.word	0x20000170

0800b1bc <__libc_init_array>:
 800b1bc:	b570      	push	{r4, r5, r6, lr}
 800b1be:	4d0d      	ldr	r5, [pc, #52]	@ (800b1f4 <__libc_init_array+0x38>)
 800b1c0:	4c0d      	ldr	r4, [pc, #52]	@ (800b1f8 <__libc_init_array+0x3c>)
 800b1c2:	1b64      	subs	r4, r4, r5
 800b1c4:	10a4      	asrs	r4, r4, #2
 800b1c6:	2600      	movs	r6, #0
 800b1c8:	42a6      	cmp	r6, r4
 800b1ca:	d109      	bne.n	800b1e0 <__libc_init_array+0x24>
 800b1cc:	4d0b      	ldr	r5, [pc, #44]	@ (800b1fc <__libc_init_array+0x40>)
 800b1ce:	4c0c      	ldr	r4, [pc, #48]	@ (800b200 <__libc_init_array+0x44>)
 800b1d0:	f000 fd8e 	bl	800bcf0 <_init>
 800b1d4:	1b64      	subs	r4, r4, r5
 800b1d6:	10a4      	asrs	r4, r4, #2
 800b1d8:	2600      	movs	r6, #0
 800b1da:	42a6      	cmp	r6, r4
 800b1dc:	d105      	bne.n	800b1ea <__libc_init_array+0x2e>
 800b1de:	bd70      	pop	{r4, r5, r6, pc}
 800b1e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1e4:	4798      	blx	r3
 800b1e6:	3601      	adds	r6, #1
 800b1e8:	e7ee      	b.n	800b1c8 <__libc_init_array+0xc>
 800b1ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1ee:	4798      	blx	r3
 800b1f0:	3601      	adds	r6, #1
 800b1f2:	e7f2      	b.n	800b1da <__libc_init_array+0x1e>
 800b1f4:	0800c160 	.word	0x0800c160
 800b1f8:	0800c160 	.word	0x0800c160
 800b1fc:	0800c160 	.word	0x0800c160
 800b200:	0800c164 	.word	0x0800c164

0800b204 <__retarget_lock_acquire_recursive>:
 800b204:	4770      	bx	lr

0800b206 <__retarget_lock_release_recursive>:
 800b206:	4770      	bx	lr

0800b208 <cosf>:
 800b208:	ee10 3a10 	vmov	r3, s0
 800b20c:	b507      	push	{r0, r1, r2, lr}
 800b20e:	4a1e      	ldr	r2, [pc, #120]	@ (800b288 <cosf+0x80>)
 800b210:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b214:	4293      	cmp	r3, r2
 800b216:	d806      	bhi.n	800b226 <cosf+0x1e>
 800b218:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800b28c <cosf+0x84>
 800b21c:	b003      	add	sp, #12
 800b21e:	f85d eb04 	ldr.w	lr, [sp], #4
 800b222:	f000 b87b 	b.w	800b31c <__kernel_cosf>
 800b226:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b22a:	d304      	bcc.n	800b236 <cosf+0x2e>
 800b22c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b230:	b003      	add	sp, #12
 800b232:	f85d fb04 	ldr.w	pc, [sp], #4
 800b236:	4668      	mov	r0, sp
 800b238:	f000 f910 	bl	800b45c <__ieee754_rem_pio2f>
 800b23c:	f000 0003 	and.w	r0, r0, #3
 800b240:	2801      	cmp	r0, #1
 800b242:	d009      	beq.n	800b258 <cosf+0x50>
 800b244:	2802      	cmp	r0, #2
 800b246:	d010      	beq.n	800b26a <cosf+0x62>
 800b248:	b9b0      	cbnz	r0, 800b278 <cosf+0x70>
 800b24a:	eddd 0a01 	vldr	s1, [sp, #4]
 800b24e:	ed9d 0a00 	vldr	s0, [sp]
 800b252:	f000 f863 	bl	800b31c <__kernel_cosf>
 800b256:	e7eb      	b.n	800b230 <cosf+0x28>
 800b258:	eddd 0a01 	vldr	s1, [sp, #4]
 800b25c:	ed9d 0a00 	vldr	s0, [sp]
 800b260:	f000 f8b4 	bl	800b3cc <__kernel_sinf>
 800b264:	eeb1 0a40 	vneg.f32	s0, s0
 800b268:	e7e2      	b.n	800b230 <cosf+0x28>
 800b26a:	eddd 0a01 	vldr	s1, [sp, #4]
 800b26e:	ed9d 0a00 	vldr	s0, [sp]
 800b272:	f000 f853 	bl	800b31c <__kernel_cosf>
 800b276:	e7f5      	b.n	800b264 <cosf+0x5c>
 800b278:	eddd 0a01 	vldr	s1, [sp, #4]
 800b27c:	ed9d 0a00 	vldr	s0, [sp]
 800b280:	2001      	movs	r0, #1
 800b282:	f000 f8a3 	bl	800b3cc <__kernel_sinf>
 800b286:	e7d3      	b.n	800b230 <cosf+0x28>
 800b288:	3f490fd8 	.word	0x3f490fd8
 800b28c:	00000000 	.word	0x00000000

0800b290 <sinf>:
 800b290:	ee10 3a10 	vmov	r3, s0
 800b294:	b507      	push	{r0, r1, r2, lr}
 800b296:	4a1f      	ldr	r2, [pc, #124]	@ (800b314 <sinf+0x84>)
 800b298:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d807      	bhi.n	800b2b0 <sinf+0x20>
 800b2a0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800b318 <sinf+0x88>
 800b2a4:	2000      	movs	r0, #0
 800b2a6:	b003      	add	sp, #12
 800b2a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2ac:	f000 b88e 	b.w	800b3cc <__kernel_sinf>
 800b2b0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b2b4:	d304      	bcc.n	800b2c0 <sinf+0x30>
 800b2b6:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b2ba:	b003      	add	sp, #12
 800b2bc:	f85d fb04 	ldr.w	pc, [sp], #4
 800b2c0:	4668      	mov	r0, sp
 800b2c2:	f000 f8cb 	bl	800b45c <__ieee754_rem_pio2f>
 800b2c6:	f000 0003 	and.w	r0, r0, #3
 800b2ca:	2801      	cmp	r0, #1
 800b2cc:	d00a      	beq.n	800b2e4 <sinf+0x54>
 800b2ce:	2802      	cmp	r0, #2
 800b2d0:	d00f      	beq.n	800b2f2 <sinf+0x62>
 800b2d2:	b9c0      	cbnz	r0, 800b306 <sinf+0x76>
 800b2d4:	eddd 0a01 	vldr	s1, [sp, #4]
 800b2d8:	ed9d 0a00 	vldr	s0, [sp]
 800b2dc:	2001      	movs	r0, #1
 800b2de:	f000 f875 	bl	800b3cc <__kernel_sinf>
 800b2e2:	e7ea      	b.n	800b2ba <sinf+0x2a>
 800b2e4:	eddd 0a01 	vldr	s1, [sp, #4]
 800b2e8:	ed9d 0a00 	vldr	s0, [sp]
 800b2ec:	f000 f816 	bl	800b31c <__kernel_cosf>
 800b2f0:	e7e3      	b.n	800b2ba <sinf+0x2a>
 800b2f2:	eddd 0a01 	vldr	s1, [sp, #4]
 800b2f6:	ed9d 0a00 	vldr	s0, [sp]
 800b2fa:	2001      	movs	r0, #1
 800b2fc:	f000 f866 	bl	800b3cc <__kernel_sinf>
 800b300:	eeb1 0a40 	vneg.f32	s0, s0
 800b304:	e7d9      	b.n	800b2ba <sinf+0x2a>
 800b306:	eddd 0a01 	vldr	s1, [sp, #4]
 800b30a:	ed9d 0a00 	vldr	s0, [sp]
 800b30e:	f000 f805 	bl	800b31c <__kernel_cosf>
 800b312:	e7f5      	b.n	800b300 <sinf+0x70>
 800b314:	3f490fd8 	.word	0x3f490fd8
 800b318:	00000000 	.word	0x00000000

0800b31c <__kernel_cosf>:
 800b31c:	ee10 3a10 	vmov	r3, s0
 800b320:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b324:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b328:	eef0 6a40 	vmov.f32	s13, s0
 800b32c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b330:	d204      	bcs.n	800b33c <__kernel_cosf+0x20>
 800b332:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b336:	ee17 2a90 	vmov	r2, s15
 800b33a:	b342      	cbz	r2, 800b38e <__kernel_cosf+0x72>
 800b33c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b340:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800b3ac <__kernel_cosf+0x90>
 800b344:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800b3b0 <__kernel_cosf+0x94>
 800b348:	4a1a      	ldr	r2, [pc, #104]	@ (800b3b4 <__kernel_cosf+0x98>)
 800b34a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b34e:	4293      	cmp	r3, r2
 800b350:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b3b8 <__kernel_cosf+0x9c>
 800b354:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b358:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800b3bc <__kernel_cosf+0xa0>
 800b35c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b360:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800b3c0 <__kernel_cosf+0xa4>
 800b364:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b368:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800b3c4 <__kernel_cosf+0xa8>
 800b36c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b370:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800b374:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b378:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b37c:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b380:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b384:	d804      	bhi.n	800b390 <__kernel_cosf+0x74>
 800b386:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b38a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b38e:	4770      	bx	lr
 800b390:	4a0d      	ldr	r2, [pc, #52]	@ (800b3c8 <__kernel_cosf+0xac>)
 800b392:	4293      	cmp	r3, r2
 800b394:	bf9a      	itte	ls
 800b396:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800b39a:	ee07 3a10 	vmovls	s14, r3
 800b39e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800b3a2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b3a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b3aa:	e7ec      	b.n	800b386 <__kernel_cosf+0x6a>
 800b3ac:	ad47d74e 	.word	0xad47d74e
 800b3b0:	310f74f6 	.word	0x310f74f6
 800b3b4:	3e999999 	.word	0x3e999999
 800b3b8:	b493f27c 	.word	0xb493f27c
 800b3bc:	37d00d01 	.word	0x37d00d01
 800b3c0:	bab60b61 	.word	0xbab60b61
 800b3c4:	3d2aaaab 	.word	0x3d2aaaab
 800b3c8:	3f480000 	.word	0x3f480000

0800b3cc <__kernel_sinf>:
 800b3cc:	ee10 3a10 	vmov	r3, s0
 800b3d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b3d4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b3d8:	d204      	bcs.n	800b3e4 <__kernel_sinf+0x18>
 800b3da:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b3de:	ee17 3a90 	vmov	r3, s15
 800b3e2:	b35b      	cbz	r3, 800b43c <__kernel_sinf+0x70>
 800b3e4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b3e8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800b440 <__kernel_sinf+0x74>
 800b3ec:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800b444 <__kernel_sinf+0x78>
 800b3f0:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b3f4:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800b448 <__kernel_sinf+0x7c>
 800b3f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b3fc:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800b44c <__kernel_sinf+0x80>
 800b400:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b404:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800b450 <__kernel_sinf+0x84>
 800b408:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b40c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b410:	b930      	cbnz	r0, 800b420 <__kernel_sinf+0x54>
 800b412:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800b454 <__kernel_sinf+0x88>
 800b416:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b41a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b41e:	4770      	bx	lr
 800b420:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b424:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b428:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b42c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b430:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800b458 <__kernel_sinf+0x8c>
 800b434:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b438:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop
 800b440:	2f2ec9d3 	.word	0x2f2ec9d3
 800b444:	b2d72f34 	.word	0xb2d72f34
 800b448:	3638ef1b 	.word	0x3638ef1b
 800b44c:	b9500d01 	.word	0xb9500d01
 800b450:	3c088889 	.word	0x3c088889
 800b454:	be2aaaab 	.word	0xbe2aaaab
 800b458:	3e2aaaab 	.word	0x3e2aaaab

0800b45c <__ieee754_rem_pio2f>:
 800b45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b45e:	ee10 6a10 	vmov	r6, s0
 800b462:	4b88      	ldr	r3, [pc, #544]	@ (800b684 <__ieee754_rem_pio2f+0x228>)
 800b464:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800b468:	429d      	cmp	r5, r3
 800b46a:	b087      	sub	sp, #28
 800b46c:	4604      	mov	r4, r0
 800b46e:	d805      	bhi.n	800b47c <__ieee754_rem_pio2f+0x20>
 800b470:	2300      	movs	r3, #0
 800b472:	ed80 0a00 	vstr	s0, [r0]
 800b476:	6043      	str	r3, [r0, #4]
 800b478:	2000      	movs	r0, #0
 800b47a:	e022      	b.n	800b4c2 <__ieee754_rem_pio2f+0x66>
 800b47c:	4b82      	ldr	r3, [pc, #520]	@ (800b688 <__ieee754_rem_pio2f+0x22c>)
 800b47e:	429d      	cmp	r5, r3
 800b480:	d83a      	bhi.n	800b4f8 <__ieee754_rem_pio2f+0x9c>
 800b482:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b486:	2e00      	cmp	r6, #0
 800b488:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800b68c <__ieee754_rem_pio2f+0x230>
 800b48c:	4a80      	ldr	r2, [pc, #512]	@ (800b690 <__ieee754_rem_pio2f+0x234>)
 800b48e:	f023 030f 	bic.w	r3, r3, #15
 800b492:	dd18      	ble.n	800b4c6 <__ieee754_rem_pio2f+0x6a>
 800b494:	4293      	cmp	r3, r2
 800b496:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b49a:	bf09      	itett	eq
 800b49c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800b694 <__ieee754_rem_pio2f+0x238>
 800b4a0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800b698 <__ieee754_rem_pio2f+0x23c>
 800b4a4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800b69c <__ieee754_rem_pio2f+0x240>
 800b4a8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b4ac:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800b4b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b4b4:	ed80 7a00 	vstr	s14, [r0]
 800b4b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b4bc:	edc0 7a01 	vstr	s15, [r0, #4]
 800b4c0:	2001      	movs	r0, #1
 800b4c2:	b007      	add	sp, #28
 800b4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b4cc:	bf09      	itett	eq
 800b4ce:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800b694 <__ieee754_rem_pio2f+0x238>
 800b4d2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800b698 <__ieee754_rem_pio2f+0x23c>
 800b4d6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800b69c <__ieee754_rem_pio2f+0x240>
 800b4da:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b4de:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b4e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b4e6:	ed80 7a00 	vstr	s14, [r0]
 800b4ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4ee:	edc0 7a01 	vstr	s15, [r0, #4]
 800b4f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b4f6:	e7e4      	b.n	800b4c2 <__ieee754_rem_pio2f+0x66>
 800b4f8:	4b69      	ldr	r3, [pc, #420]	@ (800b6a0 <__ieee754_rem_pio2f+0x244>)
 800b4fa:	429d      	cmp	r5, r3
 800b4fc:	d873      	bhi.n	800b5e6 <__ieee754_rem_pio2f+0x18a>
 800b4fe:	f000 f8dd 	bl	800b6bc <fabsf>
 800b502:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800b6a4 <__ieee754_rem_pio2f+0x248>
 800b506:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b50a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b50e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b512:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b516:	ee17 0a90 	vmov	r0, s15
 800b51a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b68c <__ieee754_rem_pio2f+0x230>
 800b51e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b522:	281f      	cmp	r0, #31
 800b524:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b698 <__ieee754_rem_pio2f+0x23c>
 800b528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b52c:	eeb1 6a47 	vneg.f32	s12, s14
 800b530:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b534:	ee16 1a90 	vmov	r1, s13
 800b538:	dc09      	bgt.n	800b54e <__ieee754_rem_pio2f+0xf2>
 800b53a:	4a5b      	ldr	r2, [pc, #364]	@ (800b6a8 <__ieee754_rem_pio2f+0x24c>)
 800b53c:	1e47      	subs	r7, r0, #1
 800b53e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b542:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800b546:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d107      	bne.n	800b55e <__ieee754_rem_pio2f+0x102>
 800b54e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800b552:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800b556:	2a08      	cmp	r2, #8
 800b558:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800b55c:	dc14      	bgt.n	800b588 <__ieee754_rem_pio2f+0x12c>
 800b55e:	6021      	str	r1, [r4, #0]
 800b560:	ed94 7a00 	vldr	s14, [r4]
 800b564:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b568:	2e00      	cmp	r6, #0
 800b56a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b56e:	ed84 0a01 	vstr	s0, [r4, #4]
 800b572:	daa6      	bge.n	800b4c2 <__ieee754_rem_pio2f+0x66>
 800b574:	eeb1 7a47 	vneg.f32	s14, s14
 800b578:	eeb1 0a40 	vneg.f32	s0, s0
 800b57c:	ed84 7a00 	vstr	s14, [r4]
 800b580:	ed84 0a01 	vstr	s0, [r4, #4]
 800b584:	4240      	negs	r0, r0
 800b586:	e79c      	b.n	800b4c2 <__ieee754_rem_pio2f+0x66>
 800b588:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800b694 <__ieee754_rem_pio2f+0x238>
 800b58c:	eef0 6a40 	vmov.f32	s13, s0
 800b590:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b594:	ee70 7a66 	vsub.f32	s15, s0, s13
 800b598:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b59c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b69c <__ieee754_rem_pio2f+0x240>
 800b5a0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b5a4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b5a8:	ee15 2a90 	vmov	r2, s11
 800b5ac:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b5b0:	1a5b      	subs	r3, r3, r1
 800b5b2:	2b19      	cmp	r3, #25
 800b5b4:	dc04      	bgt.n	800b5c0 <__ieee754_rem_pio2f+0x164>
 800b5b6:	edc4 5a00 	vstr	s11, [r4]
 800b5ba:	eeb0 0a66 	vmov.f32	s0, s13
 800b5be:	e7cf      	b.n	800b560 <__ieee754_rem_pio2f+0x104>
 800b5c0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800b6ac <__ieee754_rem_pio2f+0x250>
 800b5c4:	eeb0 0a66 	vmov.f32	s0, s13
 800b5c8:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b5cc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b5d0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800b6b0 <__ieee754_rem_pio2f+0x254>
 800b5d4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b5d8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b5dc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b5e0:	ed84 7a00 	vstr	s14, [r4]
 800b5e4:	e7bc      	b.n	800b560 <__ieee754_rem_pio2f+0x104>
 800b5e6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800b5ea:	d306      	bcc.n	800b5fa <__ieee754_rem_pio2f+0x19e>
 800b5ec:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b5f0:	edc0 7a01 	vstr	s15, [r0, #4]
 800b5f4:	edc0 7a00 	vstr	s15, [r0]
 800b5f8:	e73e      	b.n	800b478 <__ieee754_rem_pio2f+0x1c>
 800b5fa:	15ea      	asrs	r2, r5, #23
 800b5fc:	3a86      	subs	r2, #134	@ 0x86
 800b5fe:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b602:	ee07 3a90 	vmov	s15, r3
 800b606:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b60a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800b6b4 <__ieee754_rem_pio2f+0x258>
 800b60e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b612:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b616:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b61a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b61e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b622:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b626:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b62a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b62e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b632:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b63a:	edcd 7a05 	vstr	s15, [sp, #20]
 800b63e:	d11e      	bne.n	800b67e <__ieee754_rem_pio2f+0x222>
 800b640:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b648:	bf0c      	ite	eq
 800b64a:	2301      	moveq	r3, #1
 800b64c:	2302      	movne	r3, #2
 800b64e:	491a      	ldr	r1, [pc, #104]	@ (800b6b8 <__ieee754_rem_pio2f+0x25c>)
 800b650:	9101      	str	r1, [sp, #4]
 800b652:	2102      	movs	r1, #2
 800b654:	9100      	str	r1, [sp, #0]
 800b656:	a803      	add	r0, sp, #12
 800b658:	4621      	mov	r1, r4
 800b65a:	f000 f89d 	bl	800b798 <__kernel_rem_pio2f>
 800b65e:	2e00      	cmp	r6, #0
 800b660:	f6bf af2f 	bge.w	800b4c2 <__ieee754_rem_pio2f+0x66>
 800b664:	edd4 7a00 	vldr	s15, [r4]
 800b668:	eef1 7a67 	vneg.f32	s15, s15
 800b66c:	edc4 7a00 	vstr	s15, [r4]
 800b670:	edd4 7a01 	vldr	s15, [r4, #4]
 800b674:	eef1 7a67 	vneg.f32	s15, s15
 800b678:	edc4 7a01 	vstr	s15, [r4, #4]
 800b67c:	e782      	b.n	800b584 <__ieee754_rem_pio2f+0x128>
 800b67e:	2303      	movs	r3, #3
 800b680:	e7e5      	b.n	800b64e <__ieee754_rem_pio2f+0x1f2>
 800b682:	bf00      	nop
 800b684:	3f490fd8 	.word	0x3f490fd8
 800b688:	4016cbe3 	.word	0x4016cbe3
 800b68c:	3fc90f80 	.word	0x3fc90f80
 800b690:	3fc90fd0 	.word	0x3fc90fd0
 800b694:	37354400 	.word	0x37354400
 800b698:	37354443 	.word	0x37354443
 800b69c:	2e85a308 	.word	0x2e85a308
 800b6a0:	43490f80 	.word	0x43490f80
 800b6a4:	3f22f984 	.word	0x3f22f984
 800b6a8:	0800bd88 	.word	0x0800bd88
 800b6ac:	2e85a300 	.word	0x2e85a300
 800b6b0:	248d3132 	.word	0x248d3132
 800b6b4:	43800000 	.word	0x43800000
 800b6b8:	0800be08 	.word	0x0800be08

0800b6bc <fabsf>:
 800b6bc:	ee10 3a10 	vmov	r3, s0
 800b6c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b6c4:	ee00 3a10 	vmov	s0, r3
 800b6c8:	4770      	bx	lr
	...

0800b6cc <scalbnf>:
 800b6cc:	ee10 3a10 	vmov	r3, s0
 800b6d0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800b6d4:	d02b      	beq.n	800b72e <scalbnf+0x62>
 800b6d6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b6da:	d302      	bcc.n	800b6e2 <scalbnf+0x16>
 800b6dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b6e0:	4770      	bx	lr
 800b6e2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800b6e6:	d123      	bne.n	800b730 <scalbnf+0x64>
 800b6e8:	4b24      	ldr	r3, [pc, #144]	@ (800b77c <scalbnf+0xb0>)
 800b6ea:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800b780 <scalbnf+0xb4>
 800b6ee:	4298      	cmp	r0, r3
 800b6f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b6f4:	db17      	blt.n	800b726 <scalbnf+0x5a>
 800b6f6:	ee10 3a10 	vmov	r3, s0
 800b6fa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b6fe:	3a19      	subs	r2, #25
 800b700:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b704:	4288      	cmp	r0, r1
 800b706:	dd15      	ble.n	800b734 <scalbnf+0x68>
 800b708:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800b784 <scalbnf+0xb8>
 800b70c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800b788 <scalbnf+0xbc>
 800b710:	ee10 3a10 	vmov	r3, s0
 800b714:	eeb0 7a67 	vmov.f32	s14, s15
 800b718:	2b00      	cmp	r3, #0
 800b71a:	bfb8      	it	lt
 800b71c:	eef0 7a66 	vmovlt.f32	s15, s13
 800b720:	ee27 0a87 	vmul.f32	s0, s15, s14
 800b724:	4770      	bx	lr
 800b726:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b78c <scalbnf+0xc0>
 800b72a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b72e:	4770      	bx	lr
 800b730:	0dd2      	lsrs	r2, r2, #23
 800b732:	e7e5      	b.n	800b700 <scalbnf+0x34>
 800b734:	4410      	add	r0, r2
 800b736:	28fe      	cmp	r0, #254	@ 0xfe
 800b738:	dce6      	bgt.n	800b708 <scalbnf+0x3c>
 800b73a:	2800      	cmp	r0, #0
 800b73c:	dd06      	ble.n	800b74c <scalbnf+0x80>
 800b73e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b742:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b746:	ee00 3a10 	vmov	s0, r3
 800b74a:	4770      	bx	lr
 800b74c:	f110 0f16 	cmn.w	r0, #22
 800b750:	da09      	bge.n	800b766 <scalbnf+0x9a>
 800b752:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800b78c <scalbnf+0xc0>
 800b756:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800b790 <scalbnf+0xc4>
 800b75a:	ee10 3a10 	vmov	r3, s0
 800b75e:	eeb0 7a67 	vmov.f32	s14, s15
 800b762:	2b00      	cmp	r3, #0
 800b764:	e7d9      	b.n	800b71a <scalbnf+0x4e>
 800b766:	3019      	adds	r0, #25
 800b768:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b76c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b770:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800b794 <scalbnf+0xc8>
 800b774:	ee07 3a90 	vmov	s15, r3
 800b778:	e7d7      	b.n	800b72a <scalbnf+0x5e>
 800b77a:	bf00      	nop
 800b77c:	ffff3cb0 	.word	0xffff3cb0
 800b780:	4c000000 	.word	0x4c000000
 800b784:	7149f2ca 	.word	0x7149f2ca
 800b788:	f149f2ca 	.word	0xf149f2ca
 800b78c:	0da24260 	.word	0x0da24260
 800b790:	8da24260 	.word	0x8da24260
 800b794:	33000000 	.word	0x33000000

0800b798 <__kernel_rem_pio2f>:
 800b798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b79c:	ed2d 8b04 	vpush	{d8-d9}
 800b7a0:	b0d9      	sub	sp, #356	@ 0x164
 800b7a2:	4690      	mov	r8, r2
 800b7a4:	9001      	str	r0, [sp, #4]
 800b7a6:	4ab6      	ldr	r2, [pc, #728]	@ (800ba80 <__kernel_rem_pio2f+0x2e8>)
 800b7a8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800b7aa:	f118 0f04 	cmn.w	r8, #4
 800b7ae:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800b7b2:	460f      	mov	r7, r1
 800b7b4:	f103 3bff 	add.w	fp, r3, #4294967295
 800b7b8:	db26      	blt.n	800b808 <__kernel_rem_pio2f+0x70>
 800b7ba:	f1b8 0203 	subs.w	r2, r8, #3
 800b7be:	bf48      	it	mi
 800b7c0:	f108 0204 	addmi.w	r2, r8, #4
 800b7c4:	10d2      	asrs	r2, r2, #3
 800b7c6:	1c55      	adds	r5, r2, #1
 800b7c8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b7ca:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800ba90 <__kernel_rem_pio2f+0x2f8>
 800b7ce:	00e8      	lsls	r0, r5, #3
 800b7d0:	eba2 060b 	sub.w	r6, r2, fp
 800b7d4:	9002      	str	r0, [sp, #8]
 800b7d6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800b7da:	eb0a 0c0b 	add.w	ip, sl, fp
 800b7de:	ac1c      	add	r4, sp, #112	@ 0x70
 800b7e0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800b7e4:	2000      	movs	r0, #0
 800b7e6:	4560      	cmp	r0, ip
 800b7e8:	dd10      	ble.n	800b80c <__kernel_rem_pio2f+0x74>
 800b7ea:	a91c      	add	r1, sp, #112	@ 0x70
 800b7ec:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800b7f0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800b7f4:	2600      	movs	r6, #0
 800b7f6:	4556      	cmp	r6, sl
 800b7f8:	dc24      	bgt.n	800b844 <__kernel_rem_pio2f+0xac>
 800b7fa:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b7fe:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800ba90 <__kernel_rem_pio2f+0x2f8>
 800b802:	4684      	mov	ip, r0
 800b804:	2400      	movs	r4, #0
 800b806:	e016      	b.n	800b836 <__kernel_rem_pio2f+0x9e>
 800b808:	2200      	movs	r2, #0
 800b80a:	e7dc      	b.n	800b7c6 <__kernel_rem_pio2f+0x2e>
 800b80c:	42c6      	cmn	r6, r0
 800b80e:	bf5d      	ittte	pl
 800b810:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800b814:	ee07 1a90 	vmovpl	s15, r1
 800b818:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b81c:	eef0 7a47 	vmovmi.f32	s15, s14
 800b820:	ece4 7a01 	vstmia	r4!, {s15}
 800b824:	3001      	adds	r0, #1
 800b826:	e7de      	b.n	800b7e6 <__kernel_rem_pio2f+0x4e>
 800b828:	ecfe 6a01 	vldmia	lr!, {s13}
 800b82c:	ed3c 7a01 	vldmdb	ip!, {s14}
 800b830:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b834:	3401      	adds	r4, #1
 800b836:	455c      	cmp	r4, fp
 800b838:	ddf6      	ble.n	800b828 <__kernel_rem_pio2f+0x90>
 800b83a:	ece9 7a01 	vstmia	r9!, {s15}
 800b83e:	3601      	adds	r6, #1
 800b840:	3004      	adds	r0, #4
 800b842:	e7d8      	b.n	800b7f6 <__kernel_rem_pio2f+0x5e>
 800b844:	a908      	add	r1, sp, #32
 800b846:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b84a:	9104      	str	r1, [sp, #16]
 800b84c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b84e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800ba8c <__kernel_rem_pio2f+0x2f4>
 800b852:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800ba88 <__kernel_rem_pio2f+0x2f0>
 800b856:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800b85a:	9203      	str	r2, [sp, #12]
 800b85c:	4654      	mov	r4, sl
 800b85e:	00a2      	lsls	r2, r4, #2
 800b860:	9205      	str	r2, [sp, #20]
 800b862:	aa58      	add	r2, sp, #352	@ 0x160
 800b864:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800b868:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800b86c:	a944      	add	r1, sp, #272	@ 0x110
 800b86e:	aa08      	add	r2, sp, #32
 800b870:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800b874:	4694      	mov	ip, r2
 800b876:	4626      	mov	r6, r4
 800b878:	2e00      	cmp	r6, #0
 800b87a:	dc4c      	bgt.n	800b916 <__kernel_rem_pio2f+0x17e>
 800b87c:	4628      	mov	r0, r5
 800b87e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b882:	f7ff ff23 	bl	800b6cc <scalbnf>
 800b886:	eeb0 8a40 	vmov.f32	s16, s0
 800b88a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800b88e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b892:	f000 f9e9 	bl	800bc68 <floorf>
 800b896:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800b89a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b89e:	2d00      	cmp	r5, #0
 800b8a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b8a4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b8a8:	ee17 9a90 	vmov	r9, s15
 800b8ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8b0:	ee38 8a67 	vsub.f32	s16, s16, s15
 800b8b4:	dd41      	ble.n	800b93a <__kernel_rem_pio2f+0x1a2>
 800b8b6:	f104 3cff 	add.w	ip, r4, #4294967295
 800b8ba:	a908      	add	r1, sp, #32
 800b8bc:	f1c5 0e08 	rsb	lr, r5, #8
 800b8c0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800b8c4:	fa46 f00e 	asr.w	r0, r6, lr
 800b8c8:	4481      	add	r9, r0
 800b8ca:	fa00 f00e 	lsl.w	r0, r0, lr
 800b8ce:	1a36      	subs	r6, r6, r0
 800b8d0:	f1c5 0007 	rsb	r0, r5, #7
 800b8d4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800b8d8:	4106      	asrs	r6, r0
 800b8da:	2e00      	cmp	r6, #0
 800b8dc:	dd3c      	ble.n	800b958 <__kernel_rem_pio2f+0x1c0>
 800b8de:	f04f 0e00 	mov.w	lr, #0
 800b8e2:	f109 0901 	add.w	r9, r9, #1
 800b8e6:	4670      	mov	r0, lr
 800b8e8:	4574      	cmp	r4, lr
 800b8ea:	dc68      	bgt.n	800b9be <__kernel_rem_pio2f+0x226>
 800b8ec:	2d00      	cmp	r5, #0
 800b8ee:	dd03      	ble.n	800b8f8 <__kernel_rem_pio2f+0x160>
 800b8f0:	2d01      	cmp	r5, #1
 800b8f2:	d074      	beq.n	800b9de <__kernel_rem_pio2f+0x246>
 800b8f4:	2d02      	cmp	r5, #2
 800b8f6:	d07d      	beq.n	800b9f4 <__kernel_rem_pio2f+0x25c>
 800b8f8:	2e02      	cmp	r6, #2
 800b8fa:	d12d      	bne.n	800b958 <__kernel_rem_pio2f+0x1c0>
 800b8fc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b900:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b904:	b340      	cbz	r0, 800b958 <__kernel_rem_pio2f+0x1c0>
 800b906:	4628      	mov	r0, r5
 800b908:	9306      	str	r3, [sp, #24]
 800b90a:	f7ff fedf 	bl	800b6cc <scalbnf>
 800b90e:	9b06      	ldr	r3, [sp, #24]
 800b910:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b914:	e020      	b.n	800b958 <__kernel_rem_pio2f+0x1c0>
 800b916:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b91a:	3e01      	subs	r6, #1
 800b91c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b924:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b928:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b92c:	ecac 0a01 	vstmia	ip!, {s0}
 800b930:	ed30 0a01 	vldmdb	r0!, {s0}
 800b934:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b938:	e79e      	b.n	800b878 <__kernel_rem_pio2f+0xe0>
 800b93a:	d105      	bne.n	800b948 <__kernel_rem_pio2f+0x1b0>
 800b93c:	1e60      	subs	r0, r4, #1
 800b93e:	a908      	add	r1, sp, #32
 800b940:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800b944:	11f6      	asrs	r6, r6, #7
 800b946:	e7c8      	b.n	800b8da <__kernel_rem_pio2f+0x142>
 800b948:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b94c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b954:	da31      	bge.n	800b9ba <__kernel_rem_pio2f+0x222>
 800b956:	2600      	movs	r6, #0
 800b958:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b960:	f040 8098 	bne.w	800ba94 <__kernel_rem_pio2f+0x2fc>
 800b964:	1e60      	subs	r0, r4, #1
 800b966:	2200      	movs	r2, #0
 800b968:	4550      	cmp	r0, sl
 800b96a:	da4b      	bge.n	800ba04 <__kernel_rem_pio2f+0x26c>
 800b96c:	2a00      	cmp	r2, #0
 800b96e:	d065      	beq.n	800ba3c <__kernel_rem_pio2f+0x2a4>
 800b970:	3c01      	subs	r4, #1
 800b972:	ab08      	add	r3, sp, #32
 800b974:	3d08      	subs	r5, #8
 800b976:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d0f8      	beq.n	800b970 <__kernel_rem_pio2f+0x1d8>
 800b97e:	4628      	mov	r0, r5
 800b980:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b984:	f7ff fea2 	bl	800b6cc <scalbnf>
 800b988:	1c63      	adds	r3, r4, #1
 800b98a:	aa44      	add	r2, sp, #272	@ 0x110
 800b98c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800ba8c <__kernel_rem_pio2f+0x2f4>
 800b990:	0099      	lsls	r1, r3, #2
 800b992:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b996:	4623      	mov	r3, r4
 800b998:	2b00      	cmp	r3, #0
 800b99a:	f280 80a9 	bge.w	800baf0 <__kernel_rem_pio2f+0x358>
 800b99e:	4623      	mov	r3, r4
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f2c0 80c7 	blt.w	800bb34 <__kernel_rem_pio2f+0x39c>
 800b9a6:	aa44      	add	r2, sp, #272	@ 0x110
 800b9a8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800b9ac:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800ba84 <__kernel_rem_pio2f+0x2ec>
 800b9b0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800ba90 <__kernel_rem_pio2f+0x2f8>
 800b9b4:	2000      	movs	r0, #0
 800b9b6:	1ae2      	subs	r2, r4, r3
 800b9b8:	e0b1      	b.n	800bb1e <__kernel_rem_pio2f+0x386>
 800b9ba:	2602      	movs	r6, #2
 800b9bc:	e78f      	b.n	800b8de <__kernel_rem_pio2f+0x146>
 800b9be:	f852 1b04 	ldr.w	r1, [r2], #4
 800b9c2:	b948      	cbnz	r0, 800b9d8 <__kernel_rem_pio2f+0x240>
 800b9c4:	b121      	cbz	r1, 800b9d0 <__kernel_rem_pio2f+0x238>
 800b9c6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800b9ca:	f842 1c04 	str.w	r1, [r2, #-4]
 800b9ce:	2101      	movs	r1, #1
 800b9d0:	f10e 0e01 	add.w	lr, lr, #1
 800b9d4:	4608      	mov	r0, r1
 800b9d6:	e787      	b.n	800b8e8 <__kernel_rem_pio2f+0x150>
 800b9d8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800b9dc:	e7f5      	b.n	800b9ca <__kernel_rem_pio2f+0x232>
 800b9de:	f104 3cff 	add.w	ip, r4, #4294967295
 800b9e2:	aa08      	add	r2, sp, #32
 800b9e4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b9e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b9ec:	a908      	add	r1, sp, #32
 800b9ee:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800b9f2:	e781      	b.n	800b8f8 <__kernel_rem_pio2f+0x160>
 800b9f4:	f104 3cff 	add.w	ip, r4, #4294967295
 800b9f8:	aa08      	add	r2, sp, #32
 800b9fa:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b9fe:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800ba02:	e7f3      	b.n	800b9ec <__kernel_rem_pio2f+0x254>
 800ba04:	a908      	add	r1, sp, #32
 800ba06:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800ba0a:	3801      	subs	r0, #1
 800ba0c:	430a      	orrs	r2, r1
 800ba0e:	e7ab      	b.n	800b968 <__kernel_rem_pio2f+0x1d0>
 800ba10:	3201      	adds	r2, #1
 800ba12:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800ba16:	2e00      	cmp	r6, #0
 800ba18:	d0fa      	beq.n	800ba10 <__kernel_rem_pio2f+0x278>
 800ba1a:	9905      	ldr	r1, [sp, #20]
 800ba1c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800ba20:	eb0d 0001 	add.w	r0, sp, r1
 800ba24:	18e6      	adds	r6, r4, r3
 800ba26:	a91c      	add	r1, sp, #112	@ 0x70
 800ba28:	f104 0c01 	add.w	ip, r4, #1
 800ba2c:	384c      	subs	r0, #76	@ 0x4c
 800ba2e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800ba32:	4422      	add	r2, r4
 800ba34:	4562      	cmp	r2, ip
 800ba36:	da04      	bge.n	800ba42 <__kernel_rem_pio2f+0x2aa>
 800ba38:	4614      	mov	r4, r2
 800ba3a:	e710      	b.n	800b85e <__kernel_rem_pio2f+0xc6>
 800ba3c:	9804      	ldr	r0, [sp, #16]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	e7e7      	b.n	800ba12 <__kernel_rem_pio2f+0x27a>
 800ba42:	9903      	ldr	r1, [sp, #12]
 800ba44:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ba48:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800ba4c:	9105      	str	r1, [sp, #20]
 800ba4e:	ee07 1a90 	vmov	s15, r1
 800ba52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba56:	2400      	movs	r4, #0
 800ba58:	ece6 7a01 	vstmia	r6!, {s15}
 800ba5c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800ba90 <__kernel_rem_pio2f+0x2f8>
 800ba60:	46b1      	mov	r9, r6
 800ba62:	455c      	cmp	r4, fp
 800ba64:	dd04      	ble.n	800ba70 <__kernel_rem_pio2f+0x2d8>
 800ba66:	ece0 7a01 	vstmia	r0!, {s15}
 800ba6a:	f10c 0c01 	add.w	ip, ip, #1
 800ba6e:	e7e1      	b.n	800ba34 <__kernel_rem_pio2f+0x29c>
 800ba70:	ecfe 6a01 	vldmia	lr!, {s13}
 800ba74:	ed39 7a01 	vldmdb	r9!, {s14}
 800ba78:	3401      	adds	r4, #1
 800ba7a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ba7e:	e7f0      	b.n	800ba62 <__kernel_rem_pio2f+0x2ca>
 800ba80:	0800c14c 	.word	0x0800c14c
 800ba84:	0800c120 	.word	0x0800c120
 800ba88:	43800000 	.word	0x43800000
 800ba8c:	3b800000 	.word	0x3b800000
 800ba90:	00000000 	.word	0x00000000
 800ba94:	9b02      	ldr	r3, [sp, #8]
 800ba96:	eeb0 0a48 	vmov.f32	s0, s16
 800ba9a:	eba3 0008 	sub.w	r0, r3, r8
 800ba9e:	f7ff fe15 	bl	800b6cc <scalbnf>
 800baa2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800ba88 <__kernel_rem_pio2f+0x2f0>
 800baa6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800baaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baae:	db19      	blt.n	800bae4 <__kernel_rem_pio2f+0x34c>
 800bab0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800ba8c <__kernel_rem_pio2f+0x2f4>
 800bab4:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bab8:	aa08      	add	r2, sp, #32
 800baba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800babe:	3508      	adds	r5, #8
 800bac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bac4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800bac8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bacc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bad0:	ee10 3a10 	vmov	r3, s0
 800bad4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800bad8:	ee17 3a90 	vmov	r3, s15
 800badc:	3401      	adds	r4, #1
 800bade:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800bae2:	e74c      	b.n	800b97e <__kernel_rem_pio2f+0x1e6>
 800bae4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bae8:	aa08      	add	r2, sp, #32
 800baea:	ee10 3a10 	vmov	r3, s0
 800baee:	e7f6      	b.n	800bade <__kernel_rem_pio2f+0x346>
 800baf0:	a808      	add	r0, sp, #32
 800baf2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800baf6:	9001      	str	r0, [sp, #4]
 800baf8:	ee07 0a90 	vmov	s15, r0
 800bafc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb00:	3b01      	subs	r3, #1
 800bb02:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bb06:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bb0a:	ed62 7a01 	vstmdb	r2!, {s15}
 800bb0e:	e743      	b.n	800b998 <__kernel_rem_pio2f+0x200>
 800bb10:	ecfc 6a01 	vldmia	ip!, {s13}
 800bb14:	ecb5 7a01 	vldmia	r5!, {s14}
 800bb18:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bb1c:	3001      	adds	r0, #1
 800bb1e:	4550      	cmp	r0, sl
 800bb20:	dc01      	bgt.n	800bb26 <__kernel_rem_pio2f+0x38e>
 800bb22:	4290      	cmp	r0, r2
 800bb24:	ddf4      	ble.n	800bb10 <__kernel_rem_pio2f+0x378>
 800bb26:	a858      	add	r0, sp, #352	@ 0x160
 800bb28:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800bb2c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800bb30:	3b01      	subs	r3, #1
 800bb32:	e735      	b.n	800b9a0 <__kernel_rem_pio2f+0x208>
 800bb34:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800bb36:	2b02      	cmp	r3, #2
 800bb38:	dc09      	bgt.n	800bb4e <__kernel_rem_pio2f+0x3b6>
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	dc27      	bgt.n	800bb8e <__kernel_rem_pio2f+0x3f6>
 800bb3e:	d040      	beq.n	800bbc2 <__kernel_rem_pio2f+0x42a>
 800bb40:	f009 0007 	and.w	r0, r9, #7
 800bb44:	b059      	add	sp, #356	@ 0x164
 800bb46:	ecbd 8b04 	vpop	{d8-d9}
 800bb4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb4e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800bb50:	2b03      	cmp	r3, #3
 800bb52:	d1f5      	bne.n	800bb40 <__kernel_rem_pio2f+0x3a8>
 800bb54:	aa30      	add	r2, sp, #192	@ 0xc0
 800bb56:	1f0b      	subs	r3, r1, #4
 800bb58:	4413      	add	r3, r2
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	dc50      	bgt.n	800bc04 <__kernel_rem_pio2f+0x46c>
 800bb62:	4622      	mov	r2, r4
 800bb64:	2a01      	cmp	r2, #1
 800bb66:	dc5d      	bgt.n	800bc24 <__kernel_rem_pio2f+0x48c>
 800bb68:	ab30      	add	r3, sp, #192	@ 0xc0
 800bb6a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800ba90 <__kernel_rem_pio2f+0x2f8>
 800bb6e:	440b      	add	r3, r1
 800bb70:	2c01      	cmp	r4, #1
 800bb72:	dc67      	bgt.n	800bc44 <__kernel_rem_pio2f+0x4ac>
 800bb74:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800bb78:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800bb7c:	2e00      	cmp	r6, #0
 800bb7e:	d167      	bne.n	800bc50 <__kernel_rem_pio2f+0x4b8>
 800bb80:	edc7 6a00 	vstr	s13, [r7]
 800bb84:	ed87 7a01 	vstr	s14, [r7, #4]
 800bb88:	edc7 7a02 	vstr	s15, [r7, #8]
 800bb8c:	e7d8      	b.n	800bb40 <__kernel_rem_pio2f+0x3a8>
 800bb8e:	ab30      	add	r3, sp, #192	@ 0xc0
 800bb90:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800ba90 <__kernel_rem_pio2f+0x2f8>
 800bb94:	440b      	add	r3, r1
 800bb96:	4622      	mov	r2, r4
 800bb98:	2a00      	cmp	r2, #0
 800bb9a:	da24      	bge.n	800bbe6 <__kernel_rem_pio2f+0x44e>
 800bb9c:	b34e      	cbz	r6, 800bbf2 <__kernel_rem_pio2f+0x45a>
 800bb9e:	eef1 7a47 	vneg.f32	s15, s14
 800bba2:	edc7 7a00 	vstr	s15, [r7]
 800bba6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800bbaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bbae:	aa31      	add	r2, sp, #196	@ 0xc4
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	429c      	cmp	r4, r3
 800bbb4:	da20      	bge.n	800bbf8 <__kernel_rem_pio2f+0x460>
 800bbb6:	b10e      	cbz	r6, 800bbbc <__kernel_rem_pio2f+0x424>
 800bbb8:	eef1 7a67 	vneg.f32	s15, s15
 800bbbc:	edc7 7a01 	vstr	s15, [r7, #4]
 800bbc0:	e7be      	b.n	800bb40 <__kernel_rem_pio2f+0x3a8>
 800bbc2:	ab30      	add	r3, sp, #192	@ 0xc0
 800bbc4:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800ba90 <__kernel_rem_pio2f+0x2f8>
 800bbc8:	440b      	add	r3, r1
 800bbca:	2c00      	cmp	r4, #0
 800bbcc:	da05      	bge.n	800bbda <__kernel_rem_pio2f+0x442>
 800bbce:	b10e      	cbz	r6, 800bbd4 <__kernel_rem_pio2f+0x43c>
 800bbd0:	eef1 7a67 	vneg.f32	s15, s15
 800bbd4:	edc7 7a00 	vstr	s15, [r7]
 800bbd8:	e7b2      	b.n	800bb40 <__kernel_rem_pio2f+0x3a8>
 800bbda:	ed33 7a01 	vldmdb	r3!, {s14}
 800bbde:	3c01      	subs	r4, #1
 800bbe0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bbe4:	e7f1      	b.n	800bbca <__kernel_rem_pio2f+0x432>
 800bbe6:	ed73 7a01 	vldmdb	r3!, {s15}
 800bbea:	3a01      	subs	r2, #1
 800bbec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bbf0:	e7d2      	b.n	800bb98 <__kernel_rem_pio2f+0x400>
 800bbf2:	eef0 7a47 	vmov.f32	s15, s14
 800bbf6:	e7d4      	b.n	800bba2 <__kernel_rem_pio2f+0x40a>
 800bbf8:	ecb2 7a01 	vldmia	r2!, {s14}
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc02:	e7d6      	b.n	800bbb2 <__kernel_rem_pio2f+0x41a>
 800bc04:	ed72 7a01 	vldmdb	r2!, {s15}
 800bc08:	edd2 6a01 	vldr	s13, [r2, #4]
 800bc0c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bc10:	3801      	subs	r0, #1
 800bc12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc16:	ed82 7a00 	vstr	s14, [r2]
 800bc1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc1e:	edc2 7a01 	vstr	s15, [r2, #4]
 800bc22:	e79c      	b.n	800bb5e <__kernel_rem_pio2f+0x3c6>
 800bc24:	ed73 7a01 	vldmdb	r3!, {s15}
 800bc28:	edd3 6a01 	vldr	s13, [r3, #4]
 800bc2c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bc30:	3a01      	subs	r2, #1
 800bc32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc36:	ed83 7a00 	vstr	s14, [r3]
 800bc3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc3e:	edc3 7a01 	vstr	s15, [r3, #4]
 800bc42:	e78f      	b.n	800bb64 <__kernel_rem_pio2f+0x3cc>
 800bc44:	ed33 7a01 	vldmdb	r3!, {s14}
 800bc48:	3c01      	subs	r4, #1
 800bc4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc4e:	e78f      	b.n	800bb70 <__kernel_rem_pio2f+0x3d8>
 800bc50:	eef1 6a66 	vneg.f32	s13, s13
 800bc54:	eeb1 7a47 	vneg.f32	s14, s14
 800bc58:	edc7 6a00 	vstr	s13, [r7]
 800bc5c:	ed87 7a01 	vstr	s14, [r7, #4]
 800bc60:	eef1 7a67 	vneg.f32	s15, s15
 800bc64:	e790      	b.n	800bb88 <__kernel_rem_pio2f+0x3f0>
 800bc66:	bf00      	nop

0800bc68 <floorf>:
 800bc68:	ee10 3a10 	vmov	r3, s0
 800bc6c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bc70:	3a7f      	subs	r2, #127	@ 0x7f
 800bc72:	2a16      	cmp	r2, #22
 800bc74:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bc78:	dc2b      	bgt.n	800bcd2 <floorf+0x6a>
 800bc7a:	2a00      	cmp	r2, #0
 800bc7c:	da12      	bge.n	800bca4 <floorf+0x3c>
 800bc7e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bce4 <floorf+0x7c>
 800bc82:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bc86:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bc8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc8e:	dd06      	ble.n	800bc9e <floorf+0x36>
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	da24      	bge.n	800bcde <floorf+0x76>
 800bc94:	2900      	cmp	r1, #0
 800bc96:	4b14      	ldr	r3, [pc, #80]	@ (800bce8 <floorf+0x80>)
 800bc98:	bf08      	it	eq
 800bc9a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800bc9e:	ee00 3a10 	vmov	s0, r3
 800bca2:	4770      	bx	lr
 800bca4:	4911      	ldr	r1, [pc, #68]	@ (800bcec <floorf+0x84>)
 800bca6:	4111      	asrs	r1, r2
 800bca8:	420b      	tst	r3, r1
 800bcaa:	d0fa      	beq.n	800bca2 <floorf+0x3a>
 800bcac:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800bce4 <floorf+0x7c>
 800bcb0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bcb4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bcb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcbc:	ddef      	ble.n	800bc9e <floorf+0x36>
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	bfbe      	ittt	lt
 800bcc2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800bcc6:	fa40 f202 	asrlt.w	r2, r0, r2
 800bcca:	189b      	addlt	r3, r3, r2
 800bccc:	ea23 0301 	bic.w	r3, r3, r1
 800bcd0:	e7e5      	b.n	800bc9e <floorf+0x36>
 800bcd2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bcd6:	d3e4      	bcc.n	800bca2 <floorf+0x3a>
 800bcd8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bcdc:	4770      	bx	lr
 800bcde:	2300      	movs	r3, #0
 800bce0:	e7dd      	b.n	800bc9e <floorf+0x36>
 800bce2:	bf00      	nop
 800bce4:	7149f2ca 	.word	0x7149f2ca
 800bce8:	bf800000 	.word	0xbf800000
 800bcec:	007fffff 	.word	0x007fffff

0800bcf0 <_init>:
 800bcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcf2:	bf00      	nop
 800bcf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcf6:	bc08      	pop	{r3}
 800bcf8:	469e      	mov	lr, r3
 800bcfa:	4770      	bx	lr

0800bcfc <_fini>:
 800bcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcfe:	bf00      	nop
 800bd00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd02:	bc08      	pop	{r3}
 800bd04:	469e      	mov	lr, r3
 800bd06:	4770      	bx	lr
