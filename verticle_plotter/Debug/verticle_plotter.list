
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0f4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800e2cc  0800e2cc  0000f2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e72c  0800e72c  000101c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e72c  0800e72c  0000f72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e734  0800e734  000101c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e734  0800e734  0000f734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e738  0800e738  0000f738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c4  20000000  0800e73c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002144  200001c4  0800e900  000101c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002308  0800e900  00010308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aed5  00000000  00000000  000101f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005330  00000000  00000000  0003b0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf8  00000000  00000000  00040400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015ae  00000000  00000000  00041ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d4e2  00000000  00000000  000435a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002987b  00000000  00000000  00070a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119904  00000000  00000000  0009a303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b3c07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c18  00000000  00000000  001b3c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001bb864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001c4 	.word	0x200001c4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800e2b4 	.word	0x0800e2b4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001c8 	.word	0x200001c8
 8000214:	0800e2b4 	.word	0x0800e2b4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2uiz>:
 8000a04:	004a      	lsls	r2, r1, #1
 8000a06:	d211      	bcs.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a0c:	d211      	bcs.n	8000a32 <__aeabi_d2uiz+0x2e>
 8000a0e:	d50d      	bpl.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d40e      	bmi.n	8000a38 <__aeabi_d2uiz+0x34>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_d2uiz+0x3a>
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0000 	mov.w	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_d2f>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a4c:	bf24      	itt	cs
 8000a4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a56:	d90d      	bls.n	8000a74 <__aeabi_d2f+0x30>
 8000a58:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a64:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a6c:	bf08      	it	eq
 8000a6e:	f020 0001 	biceq.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a78:	d121      	bne.n	8000abe <__aeabi_d2f+0x7a>
 8000a7a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a7e:	bfbc      	itt	lt
 8000a80:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a84:	4770      	bxlt	lr
 8000a86:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a8e:	f1c2 0218 	rsb	r2, r2, #24
 8000a92:	f1c2 0c20 	rsb	ip, r2, #32
 8000a96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	f040 0001 	orrne.w	r0, r0, #1
 8000aa4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab0:	ea40 000c 	orr.w	r0, r0, ip
 8000ab4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000abc:	e7cc      	b.n	8000a58 <__aeabi_d2f+0x14>
 8000abe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ac2:	d107      	bne.n	8000ad4 <__aeabi_d2f+0x90>
 8000ac4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac8:	bf1e      	ittt	ne
 8000aca:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ace:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ad2:	4770      	bxne	lr
 8000ad4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000adc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_uldivmod>:
 8000ae4:	b953      	cbnz	r3, 8000afc <__aeabi_uldivmod+0x18>
 8000ae6:	b94a      	cbnz	r2, 8000afc <__aeabi_uldivmod+0x18>
 8000ae8:	2900      	cmp	r1, #0
 8000aea:	bf08      	it	eq
 8000aec:	2800      	cmpeq	r0, #0
 8000aee:	bf1c      	itt	ne
 8000af0:	f04f 31ff 	movne.w	r1, #4294967295
 8000af4:	f04f 30ff 	movne.w	r0, #4294967295
 8000af8:	f000 b988 	b.w	8000e0c <__aeabi_idiv0>
 8000afc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b04:	f000 f806 	bl	8000b14 <__udivmoddi4>
 8000b08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b10:	b004      	add	sp, #16
 8000b12:	4770      	bx	lr

08000b14 <__udivmoddi4>:
 8000b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b18:	9d08      	ldr	r5, [sp, #32]
 8000b1a:	468e      	mov	lr, r1
 8000b1c:	4604      	mov	r4, r0
 8000b1e:	4688      	mov	r8, r1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d14a      	bne.n	8000bba <__udivmoddi4+0xa6>
 8000b24:	428a      	cmp	r2, r1
 8000b26:	4617      	mov	r7, r2
 8000b28:	d962      	bls.n	8000bf0 <__udivmoddi4+0xdc>
 8000b2a:	fab2 f682 	clz	r6, r2
 8000b2e:	b14e      	cbz	r6, 8000b44 <__udivmoddi4+0x30>
 8000b30:	f1c6 0320 	rsb	r3, r6, #32
 8000b34:	fa01 f806 	lsl.w	r8, r1, r6
 8000b38:	fa20 f303 	lsr.w	r3, r0, r3
 8000b3c:	40b7      	lsls	r7, r6
 8000b3e:	ea43 0808 	orr.w	r8, r3, r8
 8000b42:	40b4      	lsls	r4, r6
 8000b44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b48:	fa1f fc87 	uxth.w	ip, r7
 8000b4c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b50:	0c23      	lsrs	r3, r4, #16
 8000b52:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b5a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d909      	bls.n	8000b76 <__udivmoddi4+0x62>
 8000b62:	18fb      	adds	r3, r7, r3
 8000b64:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b68:	f080 80ea 	bcs.w	8000d40 <__udivmoddi4+0x22c>
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	f240 80e7 	bls.w	8000d40 <__udivmoddi4+0x22c>
 8000b72:	3902      	subs	r1, #2
 8000b74:	443b      	add	r3, r7
 8000b76:	1a9a      	subs	r2, r3, r2
 8000b78:	b2a3      	uxth	r3, r4
 8000b7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b86:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b8a:	459c      	cmp	ip, r3
 8000b8c:	d909      	bls.n	8000ba2 <__udivmoddi4+0x8e>
 8000b8e:	18fb      	adds	r3, r7, r3
 8000b90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b94:	f080 80d6 	bcs.w	8000d44 <__udivmoddi4+0x230>
 8000b98:	459c      	cmp	ip, r3
 8000b9a:	f240 80d3 	bls.w	8000d44 <__udivmoddi4+0x230>
 8000b9e:	443b      	add	r3, r7
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ba6:	eba3 030c 	sub.w	r3, r3, ip
 8000baa:	2100      	movs	r1, #0
 8000bac:	b11d      	cbz	r5, 8000bb6 <__udivmoddi4+0xa2>
 8000bae:	40f3      	lsrs	r3, r6
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d905      	bls.n	8000bca <__udivmoddi4+0xb6>
 8000bbe:	b10d      	cbz	r5, 8000bc4 <__udivmoddi4+0xb0>
 8000bc0:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4608      	mov	r0, r1
 8000bc8:	e7f5      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000bca:	fab3 f183 	clz	r1, r3
 8000bce:	2900      	cmp	r1, #0
 8000bd0:	d146      	bne.n	8000c60 <__udivmoddi4+0x14c>
 8000bd2:	4573      	cmp	r3, lr
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0xc8>
 8000bd6:	4282      	cmp	r2, r0
 8000bd8:	f200 8105 	bhi.w	8000de6 <__udivmoddi4+0x2d2>
 8000bdc:	1a84      	subs	r4, r0, r2
 8000bde:	eb6e 0203 	sbc.w	r2, lr, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	4690      	mov	r8, r2
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d0e5      	beq.n	8000bb6 <__udivmoddi4+0xa2>
 8000bea:	e9c5 4800 	strd	r4, r8, [r5]
 8000bee:	e7e2      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000bf0:	2a00      	cmp	r2, #0
 8000bf2:	f000 8090 	beq.w	8000d16 <__udivmoddi4+0x202>
 8000bf6:	fab2 f682 	clz	r6, r2
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	f040 80a4 	bne.w	8000d48 <__udivmoddi4+0x234>
 8000c00:	1a8a      	subs	r2, r1, r2
 8000c02:	0c03      	lsrs	r3, r0, #16
 8000c04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c08:	b280      	uxth	r0, r0
 8000c0a:	b2bc      	uxth	r4, r7
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c12:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c1a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d907      	bls.n	8000c32 <__udivmoddi4+0x11e>
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c28:	d202      	bcs.n	8000c30 <__udivmoddi4+0x11c>
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	f200 80e0 	bhi.w	8000df0 <__udivmoddi4+0x2dc>
 8000c30:	46c4      	mov	ip, r8
 8000c32:	1a9b      	subs	r3, r3, r2
 8000c34:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c38:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c3c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c40:	fb02 f404 	mul.w	r4, r2, r4
 8000c44:	429c      	cmp	r4, r3
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x144>
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x142>
 8000c50:	429c      	cmp	r4, r3
 8000c52:	f200 80ca 	bhi.w	8000dea <__udivmoddi4+0x2d6>
 8000c56:	4602      	mov	r2, r0
 8000c58:	1b1b      	subs	r3, r3, r4
 8000c5a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c5e:	e7a5      	b.n	8000bac <__udivmoddi4+0x98>
 8000c60:	f1c1 0620 	rsb	r6, r1, #32
 8000c64:	408b      	lsls	r3, r1
 8000c66:	fa22 f706 	lsr.w	r7, r2, r6
 8000c6a:	431f      	orrs	r7, r3
 8000c6c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c70:	fa20 f306 	lsr.w	r3, r0, r6
 8000c74:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c78:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c7c:	4323      	orrs	r3, r4
 8000c7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c82:	fa1f fc87 	uxth.w	ip, r7
 8000c86:	fbbe f0f9 	udiv	r0, lr, r9
 8000c8a:	0c1c      	lsrs	r4, r3, #16
 8000c8c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c90:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c94:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c98:	45a6      	cmp	lr, r4
 8000c9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x1a0>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ca6:	f080 809c 	bcs.w	8000de2 <__udivmoddi4+0x2ce>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8099 	bls.w	8000de2 <__udivmoddi4+0x2ce>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	eba4 040e 	sub.w	r4, r4, lr
 8000cb8:	fa1f fe83 	uxth.w	lr, r3
 8000cbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000cc4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000cc8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d908      	bls.n	8000ce2 <__udivmoddi4+0x1ce>
 8000cd0:	193c      	adds	r4, r7, r4
 8000cd2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000cd6:	f080 8082 	bcs.w	8000dde <__udivmoddi4+0x2ca>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	d97f      	bls.n	8000dde <__udivmoddi4+0x2ca>
 8000cde:	3b02      	subs	r3, #2
 8000ce0:	443c      	add	r4, r7
 8000ce2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ce6:	eba4 040c 	sub.w	r4, r4, ip
 8000cea:	fba0 ec02 	umull	lr, ip, r0, r2
 8000cee:	4564      	cmp	r4, ip
 8000cf0:	4673      	mov	r3, lr
 8000cf2:	46e1      	mov	r9, ip
 8000cf4:	d362      	bcc.n	8000dbc <__udivmoddi4+0x2a8>
 8000cf6:	d05f      	beq.n	8000db8 <__udivmoddi4+0x2a4>
 8000cf8:	b15d      	cbz	r5, 8000d12 <__udivmoddi4+0x1fe>
 8000cfa:	ebb8 0203 	subs.w	r2, r8, r3
 8000cfe:	eb64 0409 	sbc.w	r4, r4, r9
 8000d02:	fa04 f606 	lsl.w	r6, r4, r6
 8000d06:	fa22 f301 	lsr.w	r3, r2, r1
 8000d0a:	431e      	orrs	r6, r3
 8000d0c:	40cc      	lsrs	r4, r1
 8000d0e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d12:	2100      	movs	r1, #0
 8000d14:	e74f      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000d16:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d1a:	0c01      	lsrs	r1, r0, #16
 8000d1c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d20:	b280      	uxth	r0, r0
 8000d22:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d26:	463b      	mov	r3, r7
 8000d28:	4638      	mov	r0, r7
 8000d2a:	463c      	mov	r4, r7
 8000d2c:	46b8      	mov	r8, r7
 8000d2e:	46be      	mov	lr, r7
 8000d30:	2620      	movs	r6, #32
 8000d32:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d36:	eba2 0208 	sub.w	r2, r2, r8
 8000d3a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d3e:	e766      	b.n	8000c0e <__udivmoddi4+0xfa>
 8000d40:	4601      	mov	r1, r0
 8000d42:	e718      	b.n	8000b76 <__udivmoddi4+0x62>
 8000d44:	4610      	mov	r0, r2
 8000d46:	e72c      	b.n	8000ba2 <__udivmoddi4+0x8e>
 8000d48:	f1c6 0220 	rsb	r2, r6, #32
 8000d4c:	fa2e f302 	lsr.w	r3, lr, r2
 8000d50:	40b7      	lsls	r7, r6
 8000d52:	40b1      	lsls	r1, r6
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d62:	b2bc      	uxth	r4, r7
 8000d64:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d68:	0c11      	lsrs	r1, r2, #16
 8000d6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6e:	fb08 f904 	mul.w	r9, r8, r4
 8000d72:	40b0      	lsls	r0, r6
 8000d74:	4589      	cmp	r9, r1
 8000d76:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d7a:	b280      	uxth	r0, r0
 8000d7c:	d93e      	bls.n	8000dfc <__udivmoddi4+0x2e8>
 8000d7e:	1879      	adds	r1, r7, r1
 8000d80:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d84:	d201      	bcs.n	8000d8a <__udivmoddi4+0x276>
 8000d86:	4589      	cmp	r9, r1
 8000d88:	d81f      	bhi.n	8000dca <__udivmoddi4+0x2b6>
 8000d8a:	eba1 0109 	sub.w	r1, r1, r9
 8000d8e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d92:	fb09 f804 	mul.w	r8, r9, r4
 8000d96:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d9a:	b292      	uxth	r2, r2
 8000d9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000da0:	4542      	cmp	r2, r8
 8000da2:	d229      	bcs.n	8000df8 <__udivmoddi4+0x2e4>
 8000da4:	18ba      	adds	r2, r7, r2
 8000da6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000daa:	d2c4      	bcs.n	8000d36 <__udivmoddi4+0x222>
 8000dac:	4542      	cmp	r2, r8
 8000dae:	d2c2      	bcs.n	8000d36 <__udivmoddi4+0x222>
 8000db0:	f1a9 0102 	sub.w	r1, r9, #2
 8000db4:	443a      	add	r2, r7
 8000db6:	e7be      	b.n	8000d36 <__udivmoddi4+0x222>
 8000db8:	45f0      	cmp	r8, lr
 8000dba:	d29d      	bcs.n	8000cf8 <__udivmoddi4+0x1e4>
 8000dbc:	ebbe 0302 	subs.w	r3, lr, r2
 8000dc0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000dc4:	3801      	subs	r0, #1
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	e796      	b.n	8000cf8 <__udivmoddi4+0x1e4>
 8000dca:	eba7 0909 	sub.w	r9, r7, r9
 8000dce:	4449      	add	r1, r9
 8000dd0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dd4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dd8:	fb09 f804 	mul.w	r8, r9, r4
 8000ddc:	e7db      	b.n	8000d96 <__udivmoddi4+0x282>
 8000dde:	4673      	mov	r3, lr
 8000de0:	e77f      	b.n	8000ce2 <__udivmoddi4+0x1ce>
 8000de2:	4650      	mov	r0, sl
 8000de4:	e766      	b.n	8000cb4 <__udivmoddi4+0x1a0>
 8000de6:	4608      	mov	r0, r1
 8000de8:	e6fd      	b.n	8000be6 <__udivmoddi4+0xd2>
 8000dea:	443b      	add	r3, r7
 8000dec:	3a02      	subs	r2, #2
 8000dee:	e733      	b.n	8000c58 <__udivmoddi4+0x144>
 8000df0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df4:	443b      	add	r3, r7
 8000df6:	e71c      	b.n	8000c32 <__udivmoddi4+0x11e>
 8000df8:	4649      	mov	r1, r9
 8000dfa:	e79c      	b.n	8000d36 <__udivmoddi4+0x222>
 8000dfc:	eba1 0109 	sub.w	r1, r1, r9
 8000e00:	46c4      	mov	ip, r8
 8000e02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e06:	fb09 f804 	mul.w	r8, r9, r4
 8000e0a:	e7c4      	b.n	8000d96 <__udivmoddi4+0x282>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	@ 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6178      	str	r0, [r7, #20]
 8000e18:	6139      	str	r1, [r7, #16]
 8000e1a:	60fa      	str	r2, [r7, #12]
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e22:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	68ba      	ldr	r2, [r7, #8]
 8000e36:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000e3e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000e4c:	ed97 7a00 	vldr	s14, [r7]
 8000e50:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000e54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	2205      	movs	r2, #5
 8000e62:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e6c:	ee07 3a90 	vmov	s15, r3
 8000e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e74:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000ebc <ADC_DMA_Init+0xac>
 8000e78:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	e008      	b.n	8000ea4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	4413      	add	r3, r2
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	61fb      	str	r3, [r7, #28]
 8000ea4:	69fa      	ldr	r2, [r7, #28]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d3f2      	bcc.n	8000e92 <ADC_DMA_Init+0x82>
    }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3724      	adds	r7, #36	@ 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	42c80000 	.word	0x42c80000

08000ec0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	217f      	movs	r1, #127	@ 0x7f
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f005 ffb6 	bl	8006e40 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6818      	ldr	r0, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6859      	ldr	r1, [r3, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	f005 f89f 	bl	8006024 <HAL_ADC_Start_DMA>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8000ef0:	b480      	push	{r7}
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	e012      	b.n	8000f30 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	617b      	str	r3, [r7, #20]
        samples++;
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	3301      	adds	r3, #1
 8000f22:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7b1b      	ldrb	r3, [r3, #12]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d3e7      	bcc.n	8000f0a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00c      	beq.n	8000f5a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	ee07 3a90 	vmov	s15, r3
 8000f46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	ee07 3a90 	vmov	s15, r3
 8000f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f58:	e001      	b.n	8000f5e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 8000f5a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8000f70 <ADC_DMA_GetValue+0x80>
}
 8000f5e:	eef0 7a66 	vmov.f32	s15, s13
 8000f62:	eeb0 0a67 	vmov.f32	s0, s15
 8000f66:	371c      	adds	r7, #28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	00000000 	.word	0x00000000

08000f74 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f80:	460b      	mov	r3, r1
 8000f82:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	79fa      	ldrb	r2, [r7, #7]
 8000f8e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000fc4 <ADC_DMA_SetCenterPoint+0x50>
 8000fa4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	42c80000 	.word	0x42c80000

08000fc8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fd6:	edc7 0a00 	vstr	s1, [r7]
 8000fda:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 8000fdc:	7afb      	ldrb	r3, [r7, #11]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f7ff ff85 	bl	8000ef0 <ADC_DMA_GetValue>
 8000fe6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ff0:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff8:	eeb0 7ae7 	vabs.f32	s14, s15
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	edd3 7a07 	vldr	s15, [r3, #28]
 8001002:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100a:	d502      	bpl.n	8001012 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	edd3 7a05 	vldr	s15, [r3, #20]
 8001018:	ed97 2a00 	vldr	s4, [r7]
 800101c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001020:	eeb0 1a67 	vmov.f32	s2, s15
 8001024:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001040 <ADC_DMA_GetJoystickValue+0x78>
 8001028:	ed97 0a05 	vldr	s0, [r7, #20]
 800102c:	f000 fb5c 	bl	80016e8 <mapf>
 8001030:	eef0 7a40 	vmov.f32	s15, s0
}
 8001034:	eeb0 0a67 	vmov.f32	s0, s15
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	00000000 	.word	0x00000000

08001044 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	ed87 0a03 	vstr	s0, [r7, #12]
 800104e:	60b8      	str	r0, [r7, #8]
 8001050:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	ee07 3a90 	vmov	s15, r3
 8001058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001060:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001068:	dd01      	ble.n	800106e <PWM_Satuation+0x2a>
		return _upper_limit;
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	e013      	b.n	8001096 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	ee07 3a90 	vmov	s15, r3
 8001074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001078:	ed97 7a03 	vldr	s14, [r7, #12]
 800107c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001084:	d501      	bpl.n	800108a <PWM_Satuation+0x46>
		return _lower_limit;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	e005      	b.n	8001096 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800108a:	edd7 7a03 	vldr	s15, [r7, #12]
 800108e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001092:	ee17 3a90 	vmov	r3, s15
}
 8001096:	4618      	mov	r0, r3
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80010a2:	b480      	push	{r7}
 80010a4:	b087      	sub	sp, #28
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6178      	str	r0, [r7, #20]
 80010aa:	ed87 0a04 	vstr	s0, [r7, #16]
 80010ae:	edc7 0a03 	vstr	s1, [r7, #12]
 80010b2:	ed87 1a02 	vstr	s2, [r7, #8]
 80010b6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	68ba      	ldr	r2, [r7, #8]
 80010ca:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]
	controller->u = 0;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80010fc:	bf00      	nop
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001120:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001128:	bfac      	ite	ge
 800112a:	2301      	movge	r3, #1
 800112c:	2300      	movlt	r3, #0
 800112e:	b2db      	uxtb	r3, r3
 8001130:	f083 0301 	eor.w	r3, r3, #1
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10e      	bne.n	8001158 <PID_CONTROLLER_Compute+0x50>
 800113a:	edd7 7a00 	vldr	s15, [r7]
 800113e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001146:	bfcc      	ite	gt
 8001148:	2301      	movgt	r3, #1
 800114a:	2300      	movle	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f083 0301 	eor.w	r3, r3, #1
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	d057      	beq.n	8001208 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	edd3 7a06 	vldr	s15, [r3, #24]
 8001164:	eef1 7a67 	vneg.f32	s15, s15
 8001168:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800116c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001170:	bf94      	ite	ls
 8001172:	2301      	movls	r3, #1
 8001174:	2300      	movhi	r3, #0
 8001176:	b2db      	uxtb	r3, r3
 8001178:	f083 0301 	eor.w	r3, r3, #1
 800117c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10e      	bne.n	80011a0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001182:	edd7 7a00 	vldr	s15, [r7]
 8001186:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800118a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118e:	bf4c      	ite	mi
 8001190:	2301      	movmi	r3, #1
 8001192:	2300      	movpl	r3, #0
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f083 0301 	eor.w	r3, r3, #1
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d033      	beq.n	8001208 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	edd3 6a00 	vldr	s13, [r3]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80011b2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80011bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80011c0:	edd7 7a00 	vldr	s15, [r7]
 80011c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	ed93 6a00 	vldr	s12, [r3]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80011d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011d8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edd3 7a07 	vldr	s15, [r3, #28]
 80011e2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80011e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	ed93 6a02 	vldr	s12, [r3, #8]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edd3 7a08 	vldr	s15, [r3, #32]
 80011f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80011fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80011fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69da      	ldr	r2, [r3, #28]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121a:	ee07 3a90 	vmov	s15, r3
}
 800121e:	eeb0 0a67 	vmov.f32	s0, s15
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	4613      	mov	r3, r2
 800123a:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3328      	adds	r3, #40	@ 0x28
 800124c:	88fa      	ldrh	r2, [r7, #6]
 800124e:	68b9      	ldr	r1, [r7, #8]
 8001250:	4618      	mov	r0, r3
 8001252:	f000 fe33 	bl	8001ebc <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	8b3a      	ldrh	r2, [r7, #24]
 8001260:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2201      	movs	r2, #1
 8001268:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001280:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800128a:	2b00      	cmp	r3, #0
 800128c:	d15f      	bne.n	800134e <MDXX_set_range+0xda>
		if (duty == 0) {
 800128e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001292:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	d115      	bne.n	80012c8 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	3310      	adds	r3, #16
 80012a0:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001420 <MDXX_set_range+0x1ac>
 80012a4:	ed97 0a02 	vldr	s0, [r7, #8]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 fe29 	bl	8001f00 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	3328      	adds	r3, #40	@ 0x28
 80012b2:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001420 <MDXX_set_range+0x1ac>
 80012b6:	ed97 0a02 	vldr	s0, [r7, #8]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 fe20 	bl	8001f00 <PWM_write_range>
			mdxx->cmd = 0;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2200      	movs	r2, #0
 80012c4:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80012c6:	e0a6      	b.n	8001416 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80012c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd1a      	ble.n	800130c <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	3310      	adds	r3, #16
 80012da:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001420 <MDXX_set_range+0x1ac>
 80012de:	ed97 0a02 	vldr	s0, [r7, #8]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 fe0c 	bl	8001f00 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3328      	adds	r3, #40	@ 0x28
 80012ec:	edd7 0a01 	vldr	s1, [r7, #4]
 80012f0:	ed97 0a02 	vldr	s0, [r7, #8]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 fe03 	bl	8001f00 <PWM_write_range>
			mdxx->cmd = duty;
 80012fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80012fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001302:	ee17 2a90 	vmov	r2, s15
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800130a:	e084      	b.n	8001416 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	3310      	adds	r3, #16
 8001310:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001424 <MDXX_set_range+0x1b0>
 8001314:	ed97 0a02 	vldr	s0, [r7, #8]
 8001318:	4618      	mov	r0, r3
 800131a:	f000 fdf1 	bl	8001f00 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	3328      	adds	r3, #40	@ 0x28
 8001322:	edd7 7a01 	vldr	s15, [r7, #4]
 8001326:	eef0 7ae7 	vabs.f32	s15, s15
 800132a:	eef0 0a67 	vmov.f32	s1, s15
 800132e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001332:	4618      	mov	r0, r3
 8001334:	f000 fde4 	bl	8001f00 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001338:	edd7 7a01 	vldr	s15, [r7, #4]
 800133c:	eef0 7ae7 	vabs.f32	s15, s15
 8001340:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001344:	ee17 2a90 	vmov	r2, s15
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800134c:	e063      	b.n	8001416 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001354:	2b01      	cmp	r3, #1
 8001356:	d15e      	bne.n	8001416 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8001358:	edd7 7a01 	vldr	s15, [r7, #4]
 800135c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001364:	d115      	bne.n	8001392 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001370:	2200      	movs	r2, #0
 8001372:	4619      	mov	r1, r3
 8001374:	f006 fcaa 	bl	8007ccc <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	3328      	adds	r3, #40	@ 0x28
 800137c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001420 <MDXX_set_range+0x1ac>
 8001380:	ed97 0a02 	vldr	s0, [r7, #8]
 8001384:	4618      	mov	r0, r3
 8001386:	f000 fdbb 	bl	8001f00 <PWM_write_range>
			mdxx->cmd = 0;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2200      	movs	r2, #0
 800138e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001390:	e041      	b.n	8001416 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8001392:	edd7 7a01 	vldr	s15, [r7, #4]
 8001396:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800139a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139e:	dd1a      	ble.n	80013d6 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80013aa:	2200      	movs	r2, #0
 80013ac:	4619      	mov	r1, r3
 80013ae:	f006 fc8d 	bl	8007ccc <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	3328      	adds	r3, #40	@ 0x28
 80013b6:	edd7 0a01 	vldr	s1, [r7, #4]
 80013ba:	ed97 0a02 	vldr	s0, [r7, #8]
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 fd9e 	bl	8001f00 <PWM_write_range>
			mdxx->cmd = duty;
 80013c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80013c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013cc:	ee17 2a90 	vmov	r2, s15
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80013d4:	e01f      	b.n	8001416 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80013e0:	2201      	movs	r2, #1
 80013e2:	4619      	mov	r1, r3
 80013e4:	f006 fc72 	bl	8007ccc <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	3328      	adds	r3, #40	@ 0x28
 80013ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80013f0:	eef0 7ae7 	vabs.f32	s15, s15
 80013f4:	eef0 0a67 	vmov.f32	s1, s15
 80013f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fd7f 	bl	8001f00 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001402:	edd7 7a01 	vldr	s15, [r7, #4]
 8001406:	eef0 7ae7 	vabs.f32	s15, s15
 800140a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800140e:	ee17 2a90 	vmov	r2, s15
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	00000000 	.word	0x00000000
 8001424:	42c80000 	.word	0x42c80000

08001428 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, 		// kg
    .c = 64.83e-3,           			// m
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	601a      	str	r2, [r3, #0]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <REVOLUTE_MOTOR_DFD_Init>:
    float v = qd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	605a      	str	r2, [r3, #4]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <PRISMATIC_MOTOR_FFD_Init>:
    float v = (gravity_compensate_plotter + gravity_compensate_rail + 0) * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	601a      	str	r2, [r3, #0]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <PRISMATIC_MOTOR_DFD_Init>:
    float v = sd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	605a      	str	r2, [r3, #4]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	ed2d 8b02 	vpush	{d8}
 80014ae:	b08a      	sub	sp, #40	@ 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	460b      	mov	r3, r1
 80014b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80014ba:	edc7 0a00 	vstr	s1, [r7]
 80014be:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 80014c0:	897b      	ldrh	r3, [r7, #10]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <FIR_init+0x2a>
        numTaps += 1;
 80014cc:	897b      	ldrh	r3, [r7, #10]
 80014ce:	3301      	adds	r3, #1
 80014d0:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	897a      	ldrh	r2, [r7, #10]
 80014d6:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2200      	movs	r2, #0
 80014dc:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 80014de:	897b      	ldrh	r3, [r7, #10]
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f00c f856 	bl	800d594 <malloc>
 80014e8:	4603      	mov	r3, r0
 80014ea:	461a      	mov	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 80014f0:	897b      	ldrh	r3, [r7, #10]
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f00c f84d 	bl	800d594 <malloc>
 80014fa:	4603      	mov	r3, r0
 80014fc:	461a      	mov	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 80e0 	beq.w	80016cc <FIR_init+0x224>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 80db 	beq.w	80016cc <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001516:	2300      	movs	r3, #0
 8001518:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800151a:	e00a      	b.n	8001532 <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 800152c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800152e:	3301      	adds	r3, #1
 8001530:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001532:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001534:	897b      	ldrh	r3, [r7, #10]
 8001536:	429a      	cmp	r2, r3
 8001538:	d3f0      	bcc.n	800151c <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 800153a:	edd7 6a01 	vldr	s13, [r7, #4]
 800153e:	ed97 7a00 	vldr	s14, [r7]
 8001542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001546:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 800154a:	897b      	ldrh	r3, [r7, #10]
 800154c:	085b      	lsrs	r3, r3, #1
 800154e:	b29b      	uxth	r3, r3
 8001550:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001552:	2300      	movs	r3, #0
 8001554:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001556:	e077      	b.n	8001648 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001558:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800155c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001560:	429a      	cmp	r2, r3
 8001562:	d10c      	bne.n	800157e <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	edd7 7a06 	vldr	s15, [r7, #24]
 8001574:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001578:	edc3 7a00 	vstr	s15, [r3]
 800157c:	e02c      	b.n	80015d8 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 800157e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001580:	8afb      	ldrh	r3, [r7, #22]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	b29b      	uxth	r3, r3
 8001586:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001588:	edd7 7a06 	vldr	s15, [r7, #24]
 800158c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80016d8 <FIR_init+0x230>
 8001590:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001594:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001598:	ee07 3a90 	vmov	s15, r3
 800159c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a4:	eeb0 0a67 	vmov.f32	s0, s15
 80015a8:	f00c f950 	bl	800d84c <sinf>
 80015ac:	eef0 6a40 	vmov.f32	s13, s0
 80015b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015b4:	ee07 3a90 	vmov	s15, r3
 80015b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015bc:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80016dc <FIR_init+0x234>
 80015c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015d4:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	ed93 8a00 	vldr	s16, [r3]
 80015e8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80015ec:	ee07 3a90 	vmov	s15, r3
 80015f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80016d8 <FIR_init+0x230>
 80015f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015fc:	897b      	ldrh	r3, [r7, #10]
 80015fe:	3b01      	subs	r3, #1
 8001600:	ee07 3a90 	vmov	s15, r3
 8001604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001608:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800160c:	eeb0 0a66 	vmov.f32	s0, s13
 8001610:	f00c f8d8 	bl	800d7c4 <cosf>
 8001614:	eef0 7a40 	vmov.f32	s15, s0
 8001618:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80016e0 <FIR_init+0x238>
 800161c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001620:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80016e4 <FIR_init+0x23c>
 8001624:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001638:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 800163c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001640:	b29b      	uxth	r3, r3
 8001642:	3301      	adds	r3, #1
 8001644:	b29b      	uxth	r3, r3
 8001646:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001648:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800164c:	897b      	ldrh	r3, [r7, #10]
 800164e:	429a      	cmp	r2, r3
 8001650:	db82      	blt.n	8001558 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001658:	2300      	movs	r3, #0
 800165a:	83fb      	strh	r3, [r7, #30]
 800165c:	e00f      	b.n	800167e <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	8bfb      	ldrh	r3, [r7, #30]
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	edd3 7a00 	vldr	s15, [r3]
 800166c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001674:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001678:	8bfb      	ldrh	r3, [r7, #30]
 800167a:	3301      	adds	r3, #1
 800167c:	83fb      	strh	r3, [r7, #30]
 800167e:	8bfa      	ldrh	r2, [r7, #30]
 8001680:	897b      	ldrh	r3, [r7, #10]
 8001682:	429a      	cmp	r2, r3
 8001684:	d3eb      	bcc.n	800165e <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001686:	edd7 7a08 	vldr	s15, [r7, #32]
 800168a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001692:	d01b      	beq.n	80016cc <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001694:	2300      	movs	r3, #0
 8001696:	83bb      	strh	r3, [r7, #28]
 8001698:	e014      	b.n	80016c4 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	8bbb      	ldrh	r3, [r7, #28]
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	edd3 6a00 	vldr	s13, [r3]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	8bbb      	ldrh	r3, [r7, #28]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	ed97 7a08 	vldr	s14, [r7, #32]
 80016b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ba:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 80016be:	8bbb      	ldrh	r3, [r7, #28]
 80016c0:	3301      	adds	r3, #1
 80016c2:	83bb      	strh	r3, [r7, #28]
 80016c4:	8bba      	ldrh	r2, [r7, #28]
 80016c6:	897b      	ldrh	r3, [r7, #10]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d3e6      	bcc.n	800169a <FIR_init+0x1f2>
            }
        }
    }
}
 80016cc:	bf00      	nop
 80016ce:	3728      	adds	r7, #40	@ 0x28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	ecbd 8b02 	vpop	{d8}
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40c90fdb 	.word	0x40c90fdb
 80016dc:	40490fdb 	.word	0x40490fdb
 80016e0:	3eeb851f 	.word	0x3eeb851f
 80016e4:	3f0a3d71 	.word	0x3f0a3d71

080016e8 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 80016e8:	b480      	push	{r7}
 80016ea:	b089      	sub	sp, #36	@ 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80016f2:	edc7 0a04 	vstr	s1, [r7, #16]
 80016f6:	ed87 1a03 	vstr	s2, [r7, #12]
 80016fa:	edc7 1a02 	vstr	s3, [r7, #8]
 80016fe:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001702:	ed97 7a05 	vldr	s14, [r7, #20]
 8001706:	edd7 7a04 	vldr	s15, [r7, #16]
 800170a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800170e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001712:	edd7 7a04 	vldr	s15, [r7, #16]
 8001716:	ee37 7a67 	vsub.f32	s14, s14, s15
 800171a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800171e:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001722:	ed97 7a01 	vldr	s14, [r7, #4]
 8001726:	edd7 7a02 	vldr	s15, [r7, #8]
 800172a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800172e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001736:	ed97 7a02 	vldr	s14, [r7, #8]
 800173a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800173e:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	ee07 3a90 	vmov	s15, r3
}
 8001748:	eeb0 0a67 	vmov.f32	s0, s15
 800174c:	3724      	adds	r7, #36	@ 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 800175c:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <modbus_1t5_Timeout+0x3c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2201      	movs	r2, #1
 8001762:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001764:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <modbus_1t5_Timeout+0x3c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2200      	movs	r2, #0
 800176e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001770:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <modbus_1t5_Timeout+0x3c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <modbus_1t5_Timeout+0x3c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	200001e0 	.word	0x200001e0

08001798 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80017a0:	4b04      	ldr	r3, [pc, #16]	@ (80017b4 <modbus_3t5_Timeout+0x1c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2201      	movs	r2, #1
 80017a6:	755a      	strb	r2, [r3, #21]

}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	200001e0 	.word	0x200001e0

080017b8 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f00a f92d 	bl	800ba20 <HAL_UART_GetError>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b20      	cmp	r3, #32
 80017ca:	d101      	bne.n	80017d0 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 80017cc:	f7ff ffc4 	bl	8001758 <modbus_1t5_Timeout>

	}
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
 80017e4:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 80017e6:	4a2d      	ldr	r2, [pc, #180]	@ (800189c <Modbus_init+0xc4>)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 80017ec:	4b2b      	ldr	r3, [pc, #172]	@ (800189c <Modbus_init+0xc4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68ba      	ldr	r2, [r7, #8]
 80017f2:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 80017f4:	4b29      	ldr	r3, [pc, #164]	@ (800189c <Modbus_init+0xc4>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 80017fc:	4b27      	ldr	r3, [pc, #156]	@ (800189c <Modbus_init+0xc4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001804:	4b25      	ldr	r3, [pc, #148]	@ (800189c <Modbus_init+0xc4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	7e3a      	ldrb	r2, [r7, #24]
 800180a:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 800180c:	4b23      	ldr	r3, [pc, #140]	@ (800189c <Modbus_init+0xc4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	69fa      	ldr	r2, [r7, #28]
 8001812:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	4a21      	ldr	r2, [pc, #132]	@ (80018a0 <Modbus_init+0xc8>)
 800181a:	210e      	movs	r1, #14
 800181c:	4618      	mov	r0, r3
 800181e:	f008 fbad 	bl	8009f7c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2110      	movs	r1, #16
 8001828:	4618      	mov	r0, r3
 800182a:	f00a f8a3 	bl	800b974 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	4618      	mov	r0, r3
 8001834:	f00a f8ba 	bl	800b9ac <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	4a19      	ldr	r2, [pc, #100]	@ (80018a4 <Modbus_init+0xcc>)
 800183e:	2104      	movs	r1, #4
 8001840:	4618      	mov	r0, r3
 8001842:	f009 fbeb 	bl	800b01c <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001846:	4b15      	ldr	r3, [pc, #84]	@ (800189c <Modbus_init+0xc4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800184c:	4b13      	ldr	r3, [pc, #76]	@ (800189c <Modbus_init+0xc4>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b12      	ldr	r3, [pc, #72]	@ (800189c <Modbus_init+0xc4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001858:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800185c:	4413      	add	r3, r2
 800185e:	3302      	adds	r3, #2
 8001860:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001864:	4619      	mov	r1, r3
 8001866:	f009 fc93 	bl	800b190 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800186a:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <Modbus_init+0xc4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b01      	cmp	r3, #1
 8001878:	d10c      	bne.n	8001894 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800187a:	4b08      	ldr	r3, [pc, #32]	@ (800189c <Modbus_init+0xc4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	4618      	mov	r0, r3
 8001882:	f007 fb57 	bl	8008f34 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001886:	4b05      	ldr	r3, [pc, #20]	@ (800189c <Modbus_init+0xc4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	2100      	movs	r1, #0
 800188e:	4618      	mov	r0, r3
 8001890:	f007 fda6 	bl	80093e0 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	200001e0 	.word	0x200001e0
 80018a0:	08001799 	.word	0x08001799
 80018a4:	080017b9 	.word	0x080017b9

080018a8 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 80018a8:	b480      	push	{r7}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	e00c      	b.n	80018d4 <matrix_copy+0x2c>
        dst[i] = src[i];
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	441a      	add	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	68b9      	ldr	r1, [r7, #8]
 80018c8:	440b      	add	r3, r1
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3301      	adds	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	dbee      	blt.n	80018ba <matrix_copy+0x12>
    }
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	371c      	adds	r7, #28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 80018f8:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 80018fc:	6020      	str	r0, [r4, #0]
 80018fe:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8001902:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8001906:	6001      	str	r1, [r0, #0]
 8001908:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 800190c:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 8001910:	ed81 0a00 	vstr	s0, [r1]
 8001914:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8001918:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 800191c:	600a      	str	r2, [r1, #0]
 800191e:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8001922:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8001926:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 8001928:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800192c:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001930:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2204      	movs	r2, #4
 8001938:	2104      	movs	r1, #4
 800193a:	f00b f970 	bl	800cc1e <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 800193e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001942:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8001946:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2204      	movs	r2, #4
 800194e:	2104      	movs	r1, #4
 8001950:	f00b f965 	bl	800cc1e <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8001954:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001958:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800195c:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2201      	movs	r2, #1
 8001964:	2104      	movs	r1, #4
 8001966:	f00b f95a 	bl	800cc1e <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 800196a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800196e:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8001972:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2201      	movs	r2, #1
 800197a:	2104      	movs	r1, #4
 800197c:	f00b f94f 	bl	800cc1e <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8001980:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8001984:	2240      	movs	r2, #64	@ 0x40
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f00b feb9 	bl	800d700 <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 800198e:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8001992:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8001996:	2204      	movs	r2, #4
 8001998:	2104      	movs	r1, #4
 800199a:	f00b f940 	bl	800cc1e <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 800199e:	2300      	movs	r3, #0
 80019a0:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 80019a4:	e011      	b.n	80019ca <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 80019a6:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 80019b6:	443b      	add	r3, r7
 80019b8:	3b6c      	subs	r3, #108	@ 0x6c
 80019ba:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80019be:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 80019c0:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80019c4:	3301      	adds	r3, #1
 80019c6:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 80019ca:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	dde9      	ble.n	80019a6 <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 80019d2:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80019d6:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 80019da:	2204      	movs	r2, #4
 80019dc:	2104      	movs	r1, #4
 80019de:	f00b f91e 	bl	800cc1e <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 80019e2:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 80019e6:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80019ea:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80019ee:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 80019f2:	ed93 0a00 	vldr	s0, [r3]
 80019f6:	4610      	mov	r0, r2
 80019f8:	f00b fd1a 	bl	800d430 <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 80019fc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001a00:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8001a04:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8001a08:	2210      	movs	r2, #16
 8001a0a:	6819      	ldr	r1, [r3, #0]
 8001a0c:	f7ff ff4c 	bl	80018a8 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 8001a10:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8001a14:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8001a18:	2204      	movs	r2, #4
 8001a1a:	2104      	movs	r1, #4
 8001a1c:	f00b f8ff 	bl	800cc1e <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 8001a20:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001a24:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8001a28:	2204      	movs	r2, #4
 8001a2a:	2104      	movs	r1, #4
 8001a2c:	f00b f8f7 	bl	800cc1e <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8001a30:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8001a34:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8001a38:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f00b f8b3 	bl	800cba8 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8001a42:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8001a46:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8001a4a:	2210      	movs	r2, #16
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff2b 	bl	80018a8 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8001a52:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001a56:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8001a60:	e03a      	b.n	8001ad8 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8001a62:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8001a66:	ee07 3a90 	vmov	s15, r3
 8001a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a6e:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8001a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a76:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8001a7a:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8001a7e:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8001a82:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8001a86:	4618      	mov	r0, r3
 8001a88:	f00b fc58 	bl	800d33c <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8001a8c:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8001a90:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001a94:	2210      	movs	r2, #16
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ff06 	bl	80018a8 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8001a9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001aa0:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8001aa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001aa8:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8001aac:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f00b fcba 	bl	800d430 <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8001abc:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8001ac0:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8001ac4:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f00b f86d 	bl	800cba8 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8001ace:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8001ad8:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8001adc:	2b0a      	cmp	r3, #10
 8001ade:	ddc0      	ble.n	8001a62 <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 8001ae0:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8001ae4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001ae8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001aec:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 8001af0:	ed93 0a00 	vldr	s0, [r3]
 8001af4:	4610      	mov	r0, r2
 8001af6:	f00b fc9b 	bl	800d430 <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 8001afa:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001afe:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001b02:	461a      	mov	r2, r3
 8001b04:	2300      	movs	r3, #0
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	6053      	str	r3, [r2, #4]
 8001b0a:	6093      	str	r3, [r2, #8]
 8001b0c:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 8001b0e:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8001b12:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8001b16:	2201      	movs	r2, #1
 8001b18:	2104      	movs	r1, #4
 8001b1a:	f00b f880 	bl	800cc1e <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 8001b1e:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8001b22:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8001b26:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f00b fc06 	bl	800d33c <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8001b30:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8001b34:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2104      	movs	r1, #4
 8001b3c:	f00b f86f 	bl	800cc1e <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8001b40:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001b44:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001b48:	edd3 7a00 	vldr	s15, [r3]
 8001b4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b50:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001b54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b58:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8001b5c:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001b60:	4611      	mov	r1, r2
 8001b62:	eeb0 0a47 	vmov.f32	s0, s14
 8001b66:	4618      	mov	r0, r3
 8001b68:	f00b fc62 	bl	800d430 <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8001b6c:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8001b70:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8001b74:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f00b f815 	bl	800cba8 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 8001b7e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001b82:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b86:	4618      	mov	r0, r3
 8001b88:	2340      	movs	r3, #64	@ 0x40
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	f00b fdb7 	bl	800d700 <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 8001b92:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001b96:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8001b9a:	2204      	movs	r2, #4
 8001b9c:	2104      	movs	r1, #4
 8001b9e:	f00b f83e 	bl	800cc1e <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 8001ba2:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8001ba6:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8001baa:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f00b fbc4 	bl	800d33c <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8001bb4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001bb8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	6053      	str	r3, [r2, #4]
 8001bc4:	6093      	str	r3, [r2, #8]
 8001bc6:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 8001bc8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001bcc:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2104      	movs	r1, #4
 8001bd4:	f00b f823 	bl	800cc1e <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 8001bd8:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8001bdc:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8001be0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001be4:	4618      	mov	r0, r3
 8001be6:	f00b fba9 	bl	800d33c <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 8001bea:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001bee:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001bf2:	edd3 7a00 	vldr	s15, [r3]
 8001bf6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001bfa:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001bfe:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001c02:	edd3 7a00 	vldr	s15, [r3]
 8001c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c0a:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 8001c0e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c12:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8001c16:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c20:	4618      	mov	r0, r3
 8001c22:	f00b fc05 	bl	800d430 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8001c26:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8001c2a:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8001c2e:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8001c32:	4618      	mov	r0, r3
 8001c34:	f00a ffb8 	bl	800cba8 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 8001c38:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001c3c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8001c40:	4618      	mov	r0, r3
 8001c42:	2340      	movs	r3, #64	@ 0x40
 8001c44:	461a      	mov	r2, r3
 8001c46:	2100      	movs	r1, #0
 8001c48:	f00b fd5a 	bl	800d700 <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 8001c4c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c50:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8001c54:	2204      	movs	r2, #4
 8001c56:	2104      	movs	r1, #4
 8001c58:	f00a ffe1 	bl	800cc1e <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 8001c5c:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8001c60:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8001c64:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f00b fb67 	bl	800d33c <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 8001c6e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001c72:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8001c76:	461a      	mov	r2, r3
 8001c78:	2300      	movs	r3, #0
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	6053      	str	r3, [r2, #4]
 8001c7e:	6093      	str	r3, [r2, #8]
 8001c80:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 8001c82:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001c86:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	2104      	movs	r1, #4
 8001c8e:	f00a ffc6 	bl	800cc1e <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 8001c92:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8001c96:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8001c9a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f00b fb4c 	bl	800d33c <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 8001ca4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001ca8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001cac:	edd3 7a00 	vldr	s15, [r3]
 8001cb0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001cb4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001cb8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001cbc:	edd3 7a00 	vldr	s15, [r3]
 8001cc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cc4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001cc8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd4:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8001cd8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cdc:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8001ce0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	eeb0 0a47 	vmov.f32	s0, s14
 8001cea:	4618      	mov	r0, r3
 8001cec:	f00b fba0 	bl	800d430 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8001cf0:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8001cf4:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8001cf8:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f00a ff53 	bl	800cba8 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 8001d02:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001d06:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	2340      	movs	r3, #64	@ 0x40
 8001d0e:	461a      	mov	r2, r3
 8001d10:	2100      	movs	r1, #0
 8001d12:	f00b fcf5 	bl	800d700 <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 8001d16:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001d1a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001d1e:	2204      	movs	r2, #4
 8001d20:	2104      	movs	r1, #4
 8001d22:	f00a ff7c 	bl	800cc1e <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 8001d26:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001d2a:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8001d2e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001d32:	4618      	mov	r0, r3
 8001d34:	f00b fb02 	bl	800d33c <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 8001d38:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001d3c:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8001d40:	461a      	mov	r2, r3
 8001d42:	2300      	movs	r3, #0
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	6053      	str	r3, [r2, #4]
 8001d48:	6093      	str	r3, [r2, #8]
 8001d4a:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 8001d4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d50:	f107 001c 	add.w	r0, r7, #28
 8001d54:	2201      	movs	r2, #1
 8001d56:	2104      	movs	r1, #4
 8001d58:	f00a ff61 	bl	800cc1e <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 8001d5c:	f107 021c 	add.w	r2, r7, #28
 8001d60:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8001d64:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f00b fae7 	bl	800d33c <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 8001d6e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001d72:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001d76:	edd3 7a00 	vldr	s15, [r3]
 8001d7a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d7e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001d82:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001d86:	edd3 7a00 	vldr	s15, [r3]
 8001d8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d8e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001d92:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001d96:	edd3 7a00 	vldr	s15, [r3]
 8001d9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d9e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001da2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001da6:	edd3 7a00 	vldr	s15, [r3]
 8001daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dae:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001de8 <discretize_system_with_arm+0x4fc>
 8001db2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001db6:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8001dba:	f107 031c 	add.w	r3, r7, #28
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	eeb0 0a47 	vmov.f32	s0, s14
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f00b fb33 	bl	800d430 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8001dca:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8001dce:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8001dd2:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f00a fee6 	bl	800cba8 <arm_mat_add_f32>
}
 8001ddc:	bf00      	nop
 8001dde:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd90      	pop	{r4, r7, pc}
 8001de6:	bf00      	nop
 8001de8:	42f00000 	.word	0x42f00000

08001dec <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b09e      	sub	sp, #120	@ 0x78
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8001df6:	edc7 0a08 	vstr	s1, [r7, #32]
 8001dfa:	ed87 1a07 	vstr	s2, [r7, #28]
 8001dfe:	edc7 1a06 	vstr	s3, [r7, #24]
 8001e02:	ed87 2a05 	vstr	s4, [r7, #20]
 8001e06:	edc7 2a04 	vstr	s5, [r7, #16]
 8001e0a:	ed87 3a03 	vstr	s6, [r7, #12]
 8001e0e:	60b8      	str	r0, [r7, #8]
 8001e10:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 8001e12:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e16:	2240      	movs	r2, #64	@ 0x40
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f00b fc70 	bl	800d700 <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 8001e20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 8001e2e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e32:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 8001e34:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e38:	eef1 6a67 	vneg.f32	s13, s15
 8001e3c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e44:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 8001e48:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8001e4c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e54:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 8001e58:	edd7 6a04 	vldr	s13, [r7, #16]
 8001e5c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e64:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 8001e68:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e6c:	eef1 6a67 	vneg.f32	s13, s15
 8001e70:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e78:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 8001e7c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e80:	eef1 6a67 	vneg.f32	s13, s15
 8001e84:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e8c:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 8001e90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e94:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e9c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 8001ea0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001ea4:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	ed97 0a03 	vldr	s0, [r7, #12]
 8001eb0:	f7ff fd1c 	bl	80018ec <discretize_system_with_arm>
}
 8001eb4:	bf00      	nop
 8001eb6:	3778      	adds	r7, #120	@ 0x78
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8001efc <PWM_init+0x40>)
 8001ece:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	88fa      	ldrh	r2, [r7, #6]
 8001eda:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8001ee2:	68b8      	ldr	r0, [r7, #8]
 8001ee4:	f006 ffb6 	bl	8008e54 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8001ee8:	88fb      	ldrh	r3, [r7, #6]
 8001eea:	4619      	mov	r1, r3
 8001eec:	68b8      	ldr	r0, [r7, #8]
 8001eee:	f007 f8fd 	bl	80090ec <HAL_TIM_PWM_Start>
}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	0a21fe80 	.word	0x0a21fe80

08001f00 <PWM_write_range>:
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}

void PWM_write_range(PWM* pwm, float freq, float duty){
 8001f00:	b5b0      	push	{r4, r5, r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f0c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001f10:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f14:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1c:	d137      	bne.n	8001f8e <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	889b      	ldrh	r3, [r3, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d105      	bne.n	8001f32 <PWM_write_range+0x32>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001f30:	e0e1      	b.n	80020f6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	889b      	ldrh	r3, [r3, #4]
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d105      	bne.n	8001f46 <PWM_write_range+0x46>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	2300      	movs	r3, #0
 8001f42:	6393      	str	r3, [r2, #56]	@ 0x38
 8001f44:	e0d7      	b.n	80020f6 <PWM_write_range+0x1f6>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	889b      	ldrh	r3, [r3, #4]
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d105      	bne.n	8001f5a <PWM_write_range+0x5a>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	2300      	movs	r3, #0
 8001f56:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001f58:	e0cd      	b.n	80020f6 <PWM_write_range+0x1f6>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	889b      	ldrh	r3, [r3, #4]
 8001f5e:	2b0c      	cmp	r3, #12
 8001f60:	d105      	bne.n	8001f6e <PWM_write_range+0x6e>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	2300      	movs	r3, #0
 8001f6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f6c:	e0c3      	b.n	80020f6 <PWM_write_range+0x1f6>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	889b      	ldrh	r3, [r3, #4]
 8001f72:	2b10      	cmp	r3, #16
 8001f74:	d105      	bne.n	8001f82 <PWM_write_range+0x82>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f80:	e0b9      	b.n	80020f6 <PWM_write_range+0x1f6>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001f8c:	e0b3      	b.n	80020f6 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f9a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fa6:	ee17 2a90 	vmov	r2, s15
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001fb6:	33fe      	adds	r3, #254	@ 0xfe
 8001fb8:	4a53      	ldr	r2, [pc, #332]	@ (8002108 <PWM_write_range+0x208>)
 8001fba:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbe:	0bdb      	lsrs	r3, r3, #15
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	ee07 3a90 	vmov	s15, r3
 8001fd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	899b      	ldrh	r3, [r3, #12]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	ee07 3a90 	vmov	s15, r3
 8001fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001fe8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001fec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ff0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ff4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ffc:	ee17 3a90 	vmov	r3, s15
 8002000:	b29a      	uxth	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	89db      	ldrh	r3, [r3, #14]
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fa56 	bl	80004bc <__aeabi_i2d>
 8002010:	4604      	mov	r4, r0
 8002012:	460d      	mov	r5, r1
 8002014:	edd7 7a01 	vldr	s15, [r7, #4]
 8002018:	eef0 7ae7 	vabs.f32	s15, s15
 800201c:	ee17 0a90 	vmov	r0, s15
 8002020:	f7fe fa5e 	bl	80004e0 <__aeabi_f2d>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4620      	mov	r0, r4
 800202a:	4629      	mov	r1, r5
 800202c:	f7fe fab0 	bl	8000590 <__aeabi_dmul>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4610      	mov	r0, r2
 8002036:	4619      	mov	r1, r3
 8002038:	a331      	add	r3, pc, #196	@ (adr r3, 8002100 <PWM_write_range+0x200>)
 800203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203e:	f7fe fbd1 	bl	80007e4 <__aeabi_ddiv>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	f7fe fcdb 	bl	8000a04 <__aeabi_d2uiz>
 800204e:	4603      	mov	r3, r0
 8002050:	b29b      	uxth	r3, r3
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	899a      	ldrh	r2, [r3, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	89da      	ldrh	r2, [r3, #14]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	89da      	ldrh	r2, [r3, #14]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	889b      	ldrh	r3, [r3, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d106      	bne.n	8002090 <PWM_write_range+0x190>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	6952      	ldr	r2, [r2, #20]
 800208c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800208e:	e032      	b.n	80020f6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	889b      	ldrh	r3, [r3, #4]
 8002094:	2b04      	cmp	r3, #4
 8002096:	d106      	bne.n	80020a6 <PWM_write_range+0x1a6>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80020a4:	e027      	b.n	80020f6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	889b      	ldrh	r3, [r3, #4]
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d106      	bne.n	80020bc <PWM_write_range+0x1bc>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80020ba:	e01c      	b.n	80020f6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	889b      	ldrh	r3, [r3, #4]
 80020c0:	2b0c      	cmp	r3, #12
 80020c2:	d106      	bne.n	80020d2 <PWM_write_range+0x1d2>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80020d0:	e011      	b.n	80020f6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	889b      	ldrh	r3, [r3, #4]
 80020d6:	2b10      	cmp	r3, #16
 80020d8:	d106      	bne.n	80020e8 <PWM_write_range+0x1e8>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80020e6:	e006      	b.n	80020f6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80020f4:	e7ff      	b.n	80020f6 <PWM_write_range+0x1f6>
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bdb0      	pop	{r4, r5, r7, pc}
 80020fe:	bf00      	nop
 8002100:	00000000 	.word	0x00000000
 8002104:	40efffe0 	.word	0x40efffe0
 8002108:	80008001 	.word	0x80008001

0800210c <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6178      	str	r0, [r7, #20]
 8002114:	6139      	str	r1, [r7, #16]
 8002116:	60fa      	str	r2, [r7, #12]
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	ed87 0a01 	vstr	s0, [r7, #4]
 800211e:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2200      	movs	r2, #0
 800214a:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 800216c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	fb93 f2f2 	sdiv	r2, r3, r2
 8002176:	68f9      	ldr	r1, [r7, #12]
 8002178:	fb01 f202 	mul.w	r2, r1, r2
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2200      	movs	r2, #0
 800218a:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2200      	movs	r2, #0
 8002190:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 80021da:	213c      	movs	r1, #60	@ 0x3c
 80021dc:	6938      	ldr	r0, [r7, #16]
 80021de:	f007 fa41 	bl	8009664 <HAL_TIM_Encoder_Start>
}
 80021e2:	bf00      	nop
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	0000      	movs	r0, r0
 80021ec:	0000      	movs	r0, r0
	...

080021f0 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 80021f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021f4:	b084      	sub	sp, #16
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	0fda      	lsrs	r2, r3, #31
 8002218:	4413      	add	r3, r2
 800221a:	105b      	asrs	r3, r3, #1
 800221c:	461a      	mov	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4293      	cmp	r3, r2
 8002222:	dd05      	ble.n	8002230 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	e00e      	b.n	800224e <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	0fda      	lsrs	r2, r3, #31
 8002236:	4413      	add	r3, r2
 8002238:	105b      	asrs	r3, r3, #1
 800223a:	425b      	negs	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4293      	cmp	r3, r2
 8002242:	da04      	bge.n	800224e <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	4413      	add	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225c:	441a      	add	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226c:	ee07 3a90 	vmov	s15, r3
 8002270:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	ee07 3a90 	vmov	s15, r3
 800227c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002280:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800228a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800228e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe f91f 	bl	80004e0 <__aeabi_f2d>
 80022a2:	4604      	mov	r4, r0
 80022a4:	460d      	mov	r5, r1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022aa:	ee07 3a90 	vmov	s15, r3
 80022ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	ee07 3a90 	vmov	s15, r3
 80022ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022c6:	ee17 0a90 	vmov	r0, s15
 80022ca:	f7fe f909 	bl	80004e0 <__aeabi_f2d>
 80022ce:	a33c      	add	r3, pc, #240	@ (adr r3, 80023c0 <QEI_get_diff_count+0x1d0>)
 80022d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d4:	f7fe f95c 	bl	8000590 <__aeabi_dmul>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4690      	mov	r8, r2
 80022de:	4699      	mov	r9, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe f8fb 	bl	80004e0 <__aeabi_f2d>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4640      	mov	r0, r8
 80022f0:	4649      	mov	r1, r9
 80022f2:	f7fe f94d 	bl	8000590 <__aeabi_dmul>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4620      	mov	r0, r4
 80022fc:	4629      	mov	r1, r5
 80022fe:	f7fd ff91 	bl	8000224 <__adddf3>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4610      	mov	r0, r2
 8002308:	4619      	mov	r1, r3
 800230a:	f7fe fb9b 	bl	8000a44 <__aeabi_d2f>
 800230e:	4602      	mov	r2, r0
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe f8e1 	bl	80004e0 <__aeabi_f2d>
 800231e:	4604      	mov	r4, r0
 8002320:	460d      	mov	r5, r1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002326:	ee07 3a90 	vmov	s15, r3
 800232a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	ee07 3a90 	vmov	s15, r3
 8002336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800233a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800233e:	ee16 0a90 	vmov	r0, s13
 8002342:	f7fe f8cd 	bl	80004e0 <__aeabi_f2d>
 8002346:	a31e      	add	r3, pc, #120	@ (adr r3, 80023c0 <QEI_get_diff_count+0x1d0>)
 8002348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234c:	f7fe f920 	bl	8000590 <__aeabi_dmul>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4690      	mov	r8, r2
 8002356:	4699      	mov	r9, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe f8bf 	bl	80004e0 <__aeabi_f2d>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4640      	mov	r0, r8
 8002368:	4649      	mov	r1, r9
 800236a:	f7fe f911 	bl	8000590 <__aeabi_dmul>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	4690      	mov	r8, r2
 8002374:	4699      	mov	r9, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe f8b0 	bl	80004e0 <__aeabi_f2d>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4640      	mov	r0, r8
 8002386:	4649      	mov	r1, r9
 8002388:	f7fe f902 	bl	8000590 <__aeabi_dmul>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4620      	mov	r0, r4
 8002392:	4629      	mov	r1, r5
 8002394:	f7fd ff46 	bl	8000224 <__adddf3>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4610      	mov	r0, r2
 800239e:	4619      	mov	r1, r3
 80023a0:	f7fe fb50 	bl	8000a44 <__aeabi_d2f>
 80023a4:	4602      	mov	r2, r0
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	605a      	str	r2, [r3, #4]
}
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023bc:	f3af 8000 	nop.w
 80023c0:	54442d18 	.word	0x54442d18
 80023c4:	400921fb 	.word	0x400921fb

080023c8 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 80023c8:	b5b0      	push	{r4, r5, r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80023d8:	fb02 f303 	mul.w	r3, r2, r3
 80023dc:	ee07 3a90 	vmov	s15, r3
 80023e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe f876 	bl	80004e0 <__aeabi_f2d>
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	4b83      	ldr	r3, [pc, #524]	@ (8002608 <QEI_compute_data+0x240>)
 80023fa:	f7fe f8c9 	bl	8000590 <__aeabi_dmul>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	4614      	mov	r4, r2
 8002404:	461d      	mov	r5, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	ee07 3a90 	vmov	s15, r3
 800240e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002412:	ee17 0a90 	vmov	r0, s15
 8002416:	f7fe f863 	bl	80004e0 <__aeabi_f2d>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4620      	mov	r0, r4
 8002420:	4629      	mov	r1, r5
 8002422:	f7fe f9df 	bl	80007e4 <__aeabi_ddiv>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4614      	mov	r4, r2
 800242c:	461d      	mov	r5, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe f854 	bl	80004e0 <__aeabi_f2d>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4620      	mov	r0, r4
 800243e:	4629      	mov	r1, r5
 8002440:	f7fe f8a6 	bl	8000590 <__aeabi_dmul>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4610      	mov	r0, r2
 800244a:	4619      	mov	r1, r3
 800244c:	f7fe fafa 	bl	8000a44 <__aeabi_d2f>
 8002450:	4602      	mov	r2, r0
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800245c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002460:	ee17 0a90 	vmov	r0, s15
 8002464:	f7fe f83c 	bl	80004e0 <__aeabi_f2d>
 8002468:	a365      	add	r3, pc, #404	@ (adr r3, 8002600 <QEI_compute_data+0x238>)
 800246a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246e:	f7fe f88f 	bl	8000590 <__aeabi_dmul>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4614      	mov	r4, r2
 8002478:	461d      	mov	r5, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	ee07 3a90 	vmov	s15, r3
 8002482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002486:	ee17 0a90 	vmov	r0, s15
 800248a:	f7fe f829 	bl	80004e0 <__aeabi_f2d>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4620      	mov	r0, r4
 8002494:	4629      	mov	r1, r5
 8002496:	f7fe f9a5 	bl	80007e4 <__aeabi_ddiv>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4614      	mov	r4, r2
 80024a0:	461d      	mov	r5, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe f81a 	bl	80004e0 <__aeabi_f2d>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4620      	mov	r0, r4
 80024b2:	4629      	mov	r1, r5
 80024b4:	f7fe f86c 	bl	8000590 <__aeabi_dmul>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	f7fe fac0 	bl	8000a44 <__aeabi_d2f>
 80024c4:	4602      	mov	r2, r0
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe f806 	bl	80004e0 <__aeabi_f2d>
 80024d4:	a34a      	add	r3, pc, #296	@ (adr r3, 8002600 <QEI_compute_data+0x238>)
 80024d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024da:	f7fe f859 	bl	8000590 <__aeabi_dmul>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4614      	mov	r4, r2
 80024e4:	461d      	mov	r5, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fd fff8 	bl	80004e0 <__aeabi_f2d>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4620      	mov	r0, r4
 80024f6:	4629      	mov	r1, r5
 80024f8:	f7fe f84a 	bl	8000590 <__aeabi_dmul>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4614      	mov	r4, r2
 8002502:	461d      	mov	r5, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	ee07 3a90 	vmov	s15, r3
 800250c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002510:	ee17 0a90 	vmov	r0, s15
 8002514:	f7fd ffe4 	bl	80004e0 <__aeabi_f2d>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4620      	mov	r0, r4
 800251e:	4629      	mov	r1, r5
 8002520:	f7fe f960 	bl	80007e4 <__aeabi_ddiv>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4614      	mov	r4, r2
 800252a:	461d      	mov	r5, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002530:	4618      	mov	r0, r3
 8002532:	f7fd ffd5 	bl	80004e0 <__aeabi_f2d>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	4620      	mov	r0, r4
 800253c:	4629      	mov	r1, r5
 800253e:	f7fe f827 	bl	8000590 <__aeabi_dmul>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4610      	mov	r0, r2
 8002548:	4619      	mov	r1, r3
 800254a:	f7fe fa7b 	bl	8000a44 <__aeabi_d2f>
 800254e:	4602      	mov	r2, r0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	ed93 7a02 	vldr	s14, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002574:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8002578:	edd7 7a03 	vldr	s15, [r7, #12]
 800257c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002584:	d00a      	beq.n	800259c <QEI_compute_data+0x1d4>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258a:	ee07 3a90 	vmov	s15, r3
 800258e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002592:	edd7 7a03 	vldr	s15, [r7, #12]
 8002596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259a:	e001      	b.n	80025a0 <QEI_compute_data+0x1d8>
 800259c:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 800260c <QEI_compute_data+0x244>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	ed93 7a04 	vldr	s14, [r3, #16]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	edd3 7a05 	vldr	s15, [r3, #20]
 80025b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b6:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 80025ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80025be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c6:	d00a      	beq.n	80025de <QEI_compute_data+0x216>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025cc:	ee07 3a90 	vmov	s15, r3
 80025d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80025d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025dc:	e001      	b.n	80025e2 <QEI_compute_data+0x21a>
 80025de:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800260c <QEI_compute_data+0x244>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	615a      	str	r2, [r3, #20]
}
 80025f8:	bf00      	nop
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002600:	54442d18 	.word	0x54442d18
 8002604:	400921fb 	.word	0x400921fb
 8002608:	404e0000 	.word	0x404e0000
 800260c:	00000000 	.word	0x00000000

08002610 <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b08e      	sub	sp, #56	@ 0x38
 8002614:	af00      	add	r7, sp, #0
 8002616:	6178      	str	r0, [r7, #20]
 8002618:	ed87 0a04 	vstr	s0, [r7, #16]
 800261c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002620:	ed87 1a02 	vstr	s2, [r7, #8]
 8002624:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	2200      	movs	r2, #0
 800262c:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 800264e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002652:	edd7 7a04 	vldr	s15, [r7, #16]
 8002656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800265a:	eef0 7ae7 	vabs.f32	s15, s15
 800265e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8002662:	ed97 7a03 	vldr	s14, [r7, #12]
 8002666:	edd7 7a04 	vldr	s15, [r7, #16]
 800266a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800266e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002676:	d503      	bpl.n	8002680 <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	22ff      	movs	r2, #255	@ 0xff
 800267c:	741a      	strb	r2, [r3, #16]
 800267e:	e002      	b.n	8002686 <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2201      	movs	r2, #1
 8002684:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 8002686:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800268a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800268e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002692:	d006      	beq.n	80026a2 <Trapezoidal_Generator+0x92>
 8002694:	edd7 7a01 	vldr	s15, [r7, #4]
 8002698:	eef5 7a40 	vcmp.f32	s15, #0.0
 800269c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a0:	d104      	bne.n	80026ac <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	60da      	str	r2, [r3, #12]
        return;
 80026aa:	e06f      	b.n	800278c <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 80026ac:	edd7 6a02 	vldr	s13, [r7, #8]
 80026b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80026b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026b8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 80026bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80026c0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80026c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026c8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80026cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80026d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 80026dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026de:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 80026e0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80026e4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80026e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 80026f0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80026f4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80026f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002700:	db27      	blt.n	8002752 <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8002702:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002706:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800270a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800270e:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8002712:	edd7 6a07 	vldr	s13, [r7, #28]
 8002716:	ed97 7a02 	vldr	s14, [r7, #8]
 800271a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800271e:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002726:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8002728:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800272c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 800273a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800273e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002742:	edd7 7a06 	vldr	s15, [r7, #24]
 8002746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	edc3 7a02 	vstr	s15, [r3, #8]
 8002750:	e018      	b.n	8002784 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8002752:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002756:	edd7 7a01 	vldr	s15, [r7, #4]
 800275a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800275e:	eeb0 0a66 	vmov.f32	s0, s13
 8002762:	f00b f811 	bl	800d788 <sqrtf>
 8002766:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	6a3a      	ldr	r2, [r7, #32]
 800276e:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	6a3a      	ldr	r2, [r7, #32]
 8002774:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 8002776:	edd7 7a08 	vldr	s15, [r7, #32]
 800277a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	60da      	str	r2, [r3, #12]
}
 800278c:	3738      	adds	r7, #56	@ 0x38
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8002794:	b480      	push	{r7}
 8002796:	b08d      	sub	sp, #52	@ 0x34
 8002798:	af00      	add	r7, sp, #0
 800279a:	6178      	str	r0, [r7, #20]
 800279c:	6139      	str	r1, [r7, #16]
 800279e:	ed87 0a03 	vstr	s0, [r7, #12]
 80027a2:	edc7 0a02 	vstr	s1, [r7, #8]
 80027a6:	ed87 1a01 	vstr	s2, [r7, #4]
 80027aa:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80027b4:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8002a38 <Trapezoidal_Evaluated+0x2a4>
 80027b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	ed93 7a03 	vldr	s14, [r3, #12]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80027ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d6:	f200 811b 	bhi.w	8002a10 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	2200      	movs	r2, #0
 80027de:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	7c1b      	ldrb	r3, [r3, #16]
 80027e4:	b25b      	sxtb	r3, r3
 80027e6:	ee07 3a90 	vmov	s15, r3
 80027ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ee:	ed97 7a00 	vldr	s14, [r7]
 80027f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	ed93 7a00 	vldr	s14, [r3]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	edd3 7a01 	vldr	s15, [r3, #4]
 8002806:	eeb4 7a67 	vcmp.f32	s14, s15
 800280a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280e:	d109      	bne.n	8002824 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	edd3 7a00 	vldr	s15, [r3]
 8002816:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800281a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800281e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8002822:	e00c      	b.n	800283e <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	7c1b      	ldrb	r3, [r3, #16]
 8002828:	b25b      	sxtb	r3, r3
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002832:	ed97 7a01 	vldr	s14, [r7, #4]
 8002836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	ed93 7a03 	vldr	s14, [r3, #12]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	edd3 7a00 	vldr	s15, [r3]
 800284a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800284e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002852:	d824      	bhi.n	800289e <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8002854:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002858:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800285c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	edd3 7a03 	vldr	s15, [r3, #12]
 8002866:	ee27 7a27 	vmul.f32	s14, s14, s15
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002870:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002874:	edd7 7a03 	vldr	s15, [r7, #12]
 8002878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	ed93 7a03 	vldr	s14, [r3, #12]
 8002888:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800288c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800289a:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 800289c:	e0c6      	b.n	8002a2c <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	ed93 7a03 	vldr	s14, [r3, #12]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80028aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b2:	d830      	bhi.n	8002916 <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 80028b4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80028b8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80028bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	edd3 7a00 	vldr	s15, [r3]
 80028c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	edd3 7a00 	vldr	s15, [r3]
 80028d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80028d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028dc:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	ed93 7a03 	vldr	s14, [r3, #12]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	edd3 7a00 	vldr	s15, [r3]
 80028ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028f0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80028f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80028fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800290a:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
}
 8002914:	e08a      	b.n	8002a2c <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	ed93 7a03 	vldr	s14, [r3, #12]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002922:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800292a:	d900      	bls.n	800292e <Trapezoidal_Evaluated+0x19a>
}
 800292c:	e07e      	b.n	8002a2c <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 800292e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002932:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002936:	ee27 7a87 	vmul.f32	s14, s15, s14
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	edd3 7a00 	vldr	s15, [r3]
 8002940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	edd3 7a00 	vldr	s15, [r3]
 800294a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800294e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002956:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	ed93 7a01 	vldr	s14, [r3, #4]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	edd3 7a00 	vldr	s15, [r3]
 800296a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800296e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002972:	dd11      	ble.n	8002998 <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	ed93 7a01 	vldr	s14, [r3, #4]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	edd3 7a00 	vldr	s15, [r3]
 8002980:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002984:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800298c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002994:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	ed93 7a03 	vldr	s14, [r3, #12]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80029a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a8:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 80029ac:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80029b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80029b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029b8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80029bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029c0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80029c4:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80029c8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80029cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80029d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80029d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 80029e6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80029ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80029ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80029f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 8002a00:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002a04:	eef1 7a67 	vneg.f32	s15, s15
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002a0e:	e00d      	b.n	8002a2c <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	2201      	movs	r2, #1
 8002a14:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f04f 0200 	mov.w	r2, #0
 8002a22:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	609a      	str	r2, [r3, #8]
}
 8002a2c:	bf00      	nop
 8002a2e:	3734      	adds	r7, #52	@ 0x34
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	3a83126f 	.word	0x3a83126f

08002a3c <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a46:	4603      	mov	r3, r0
 8002a48:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	2b1a      	cmp	r3, #26
 8002a4e:	d018      	beq.n	8002a82 <temperature_to_base+0x46>
 8002a50:	2b1a      	cmp	r3, #26
 8002a52:	dc1d      	bgt.n	8002a90 <temperature_to_base+0x54>
 8002a54:	2b18      	cmp	r3, #24
 8002a56:	d002      	beq.n	8002a5e <temperature_to_base+0x22>
 8002a58:	2b19      	cmp	r3, #25
 8002a5a:	d003      	beq.n	8002a64 <temperature_to_base+0x28>
 8002a5c:	e018      	b.n	8002a90 <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8002a5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a62:	e017      	b.n	8002a94 <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 8002a64:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a68:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002aa4 <temperature_to_base+0x68>
 8002a6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a70:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002a74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a78:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 8002a7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a80:	e008      	b.n	8002a94 <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 8002a82:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a86:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002aa8 <temperature_to_base+0x6c>
 8002a8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a8e:	e001      	b.n	8002a94 <temperature_to_base+0x58>
        default:
            return value;
 8002a90:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8002a94:	eeb0 0a67 	vmov.f32	s0, s15
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	42000000 	.word	0x42000000
 8002aa8:	43889333 	.word	0x43889333

08002aac <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	ed87 0a01 	vstr	s0, [r7, #4]
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 8002aba:	78fb      	ldrb	r3, [r7, #3]
 8002abc:	2b1a      	cmp	r3, #26
 8002abe:	d018      	beq.n	8002af2 <temperature_from_base+0x46>
 8002ac0:	2b1a      	cmp	r3, #26
 8002ac2:	dc1d      	bgt.n	8002b00 <temperature_from_base+0x54>
 8002ac4:	2b18      	cmp	r3, #24
 8002ac6:	d002      	beq.n	8002ace <temperature_from_base+0x22>
 8002ac8:	2b19      	cmp	r3, #25
 8002aca:	d003      	beq.n	8002ad4 <temperature_from_base+0x28>
 8002acc:	e018      	b.n	8002b00 <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8002ace:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ad2:	e017      	b.n	8002b04 <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 8002ad4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ad8:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8002adc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ae0:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8002ae4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ae8:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002b14 <temperature_from_base+0x68>
 8002aec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002af0:	e008      	b.n	8002b04 <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 8002af2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002af6:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002b18 <temperature_from_base+0x6c>
 8002afa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002afe:	e001      	b.n	8002b04 <temperature_from_base+0x58>
        default:
            return value;
 8002b00:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8002b04:	eeb0 0a67 	vmov.f32	s0, s15
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	42000000 	.word	0x42000000
 8002b18:	43889333 	.word	0x43889333

08002b1c <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	e00a      	b.n	8002b4c <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3304      	adds	r3, #4
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2b1a      	cmp	r3, #26
 8002b50:	ddf1      	ble.n	8002b36 <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a11      	ldr	r2, [pc, #68]	@ (8002b9c <init_length_converter+0x80>)
 8002b56:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a11      	ldr	r2, [pc, #68]	@ (8002ba0 <init_length_converter+0x84>)
 8002b5c:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002b64:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a0e      	ldr	r2, [pc, #56]	@ (8002ba4 <init_length_converter+0x88>)
 8002b6a:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a0e      	ldr	r2, [pc, #56]	@ (8002ba8 <init_length_converter+0x8c>)
 8002b70:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a0d      	ldr	r2, [pc, #52]	@ (8002bac <init_length_converter+0x90>)
 8002b76:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb0 <init_length_converter+0x94>)
 8002b7c:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a0c      	ldr	r2, [pc, #48]	@ (8002bb4 <init_length_converter+0x98>)
 8002b82:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	3a83126f 	.word	0x3a83126f
 8002ba0:	3c23d70a 	.word	0x3c23d70a
 8002ba4:	447a0000 	.word	0x447a0000
 8002ba8:	3cd013a9 	.word	0x3cd013a9
 8002bac:	3e9c0ebf 	.word	0x3e9c0ebf
 8002bb0:	3f6a161e 	.word	0x3f6a161e
 8002bb4:	44c92b02 	.word	0x44c92b02

08002bb8 <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	220a      	movs	r2, #10
 8002bca:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	e00a      	b.n	8002be8 <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	3304      	adds	r3, #4
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	3301      	adds	r3, #1
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b1a      	cmp	r3, #26
 8002bec:	ddf1      	ble.n	8002bd2 <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a0e      	ldr	r2, [pc, #56]	@ (8002c2c <init_mass_converter+0x74>)
 8002bf2:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a0e      	ldr	r2, [pc, #56]	@ (8002c30 <init_mass_converter+0x78>)
 8002bf8:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002c00:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a0b      	ldr	r2, [pc, #44]	@ (8002c34 <init_mass_converter+0x7c>)
 8002c06:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a0b      	ldr	r2, [pc, #44]	@ (8002c38 <init_mass_converter+0x80>)
 8002c0c:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a0a      	ldr	r2, [pc, #40]	@ (8002c3c <init_mass_converter+0x84>)
 8002c12:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	358637bd 	.word	0x358637bd
 8002c30:	3a83126f 	.word	0x3a83126f
 8002c34:	447a0000 	.word	0x447a0000
 8002c38:	3ce83d36 	.word	0x3ce83d36
 8002c3c:	3ee83d36 	.word	0x3ee83d36

08002c40 <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	220f      	movs	r2, #15
 8002c52:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8002c54:	2300      	movs	r3, #0
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	e00a      	b.n	8002c70 <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	3304      	adds	r3, #4
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b1a      	cmp	r3, #26
 8002c74:	ddf1      	ble.n	8002c5a <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca4 <init_angle_converter+0x64>)
 8002c7a:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002c82:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a08      	ldr	r2, [pc, #32]	@ (8002ca8 <init_angle_converter+0x68>)
 8002c88:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002c96:	bf00      	nop
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	3c8efa35 	.word	0x3c8efa35
 8002ca8:	3c80adfd 	.word	0x3c80adfd

08002cac <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2214      	movs	r2, #20
 8002cbe:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	e00a      	b.n	8002cdc <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	3304      	adds	r3, #4
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2b1a      	cmp	r3, #26
 8002ce0:	ddf1      	ble.n	8002cc6 <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a10      	ldr	r2, [pc, #64]	@ (8002d28 <init_time_converter+0x7c>)
 8002ce6:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a10      	ldr	r2, [pc, #64]	@ (8002d2c <init_time_converter+0x80>)
 8002cec:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a0f      	ldr	r2, [pc, #60]	@ (8002d30 <init_time_converter+0x84>)
 8002cf2:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002cfa:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a0d      	ldr	r2, [pc, #52]	@ (8002d34 <init_time_converter+0x88>)
 8002d00:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a0c      	ldr	r2, [pc, #48]	@ (8002d38 <init_time_converter+0x8c>)
 8002d06:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a0c      	ldr	r2, [pc, #48]	@ (8002d3c <init_time_converter+0x90>)
 8002d0c:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	3089705f 	.word	0x3089705f
 8002d2c:	358637bd 	.word	0x358637bd
 8002d30:	3a83126f 	.word	0x3a83126f
 8002d34:	42700000 	.word	0x42700000
 8002d38:	45610000 	.word	0x45610000
 8002d3c:	47a8c000 	.word	0x47a8c000

08002d40 <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2204      	movs	r2, #4
 8002d4c:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2218      	movs	r2, #24
 8002d52:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	e00a      	b.n	8002d70 <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	3304      	adds	r3, #4
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b1a      	cmp	r3, #26
 8002d74:	ddf1      	ble.n	8002d5a <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a05      	ldr	r2, [pc, #20]	@ (8002d90 <init_temperature_converter+0x50>)
 8002d7a:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a05      	ldr	r2, [pc, #20]	@ (8002d94 <init_temperature_converter+0x54>)
 8002d80:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	08002a3d 	.word	0x08002a3d
 8002d94:	08002aad 	.word	0x08002aad

08002d98 <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff feba 	bl	8002b1c <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3378      	adds	r3, #120	@ 0x78
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff ff03 	bl	8002bb8 <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	33f0      	adds	r3, #240	@ 0xf0
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff ff42 	bl	8002c40 <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff ff72 	bl	8002cac <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff ffb6 	bl	8002d40 <init_temperature_converter>
}
 8002dd4:	bf00      	nop
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08c      	sub	sp, #48	@ 0x30
 8002de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002de2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002dee:	1d3b      	adds	r3, r7, #4
 8002df0:	2220      	movs	r2, #32
 8002df2:	2100      	movs	r1, #0
 8002df4:	4618      	mov	r0, r3
 8002df6:	f00a fc83 	bl	800d700 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002dfa:	4b39      	ldr	r3, [pc, #228]	@ (8002ee0 <MX_ADC1_Init+0x104>)
 8002dfc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002e00:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002e02:	4b37      	ldr	r3, [pc, #220]	@ (8002ee0 <MX_ADC1_Init+0x104>)
 8002e04:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002e08:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e0a:	4b35      	ldr	r3, [pc, #212]	@ (8002ee0 <MX_ADC1_Init+0x104>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e10:	4b33      	ldr	r3, [pc, #204]	@ (8002ee0 <MX_ADC1_Init+0x104>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002e16:	4b32      	ldr	r3, [pc, #200]	@ (8002ee0 <MX_ADC1_Init+0x104>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002e1c:	4b30      	ldr	r3, [pc, #192]	@ (8002ee0 <MX_ADC1_Init+0x104>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e22:	4b2f      	ldr	r3, [pc, #188]	@ (8002ee0 <MX_ADC1_Init+0x104>)
 8002e24:	2204      	movs	r2, #4
 8002e26:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002e28:	4b2d      	ldr	r3, [pc, #180]	@ (8002ee0 <MX_ADC1_Init+0x104>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ee0 <MX_ADC1_Init+0x104>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8002e34:	4b2a      	ldr	r3, [pc, #168]	@ (8002ee0 <MX_ADC1_Init+0x104>)
 8002e36:	2202      	movs	r2, #2
 8002e38:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e3a:	4b29      	ldr	r3, [pc, #164]	@ (8002ee0 <MX_ADC1_Init+0x104>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e42:	4b27      	ldr	r3, [pc, #156]	@ (8002ee0 <MX_ADC1_Init+0x104>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e48:	4b25      	ldr	r3, [pc, #148]	@ (8002ee0 <MX_ADC1_Init+0x104>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002e4e:	4b24      	ldr	r3, [pc, #144]	@ (8002ee0 <MX_ADC1_Init+0x104>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e56:	4b22      	ldr	r3, [pc, #136]	@ (8002ee0 <MX_ADC1_Init+0x104>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002e5c:	4b20      	ldr	r3, [pc, #128]	@ (8002ee0 <MX_ADC1_Init+0x104>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e64:	481e      	ldr	r0, [pc, #120]	@ (8002ee0 <MX_ADC1_Init+0x104>)
 8002e66:	f002 ff21 	bl	8005cac <HAL_ADC_Init>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002e70:	f000 ffc2 	bl	8003df8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002e74:	2300      	movs	r3, #0
 8002e76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002e78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4818      	ldr	r0, [pc, #96]	@ (8002ee0 <MX_ADC1_Init+0x104>)
 8002e80:	f004 f840 	bl	8006f04 <HAL_ADCEx_MultiModeConfigChannel>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002e8a:	f000 ffb5 	bl	8003df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002e8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ee4 <MX_ADC1_Init+0x108>)
 8002e90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e92:	2306      	movs	r3, #6
 8002e94:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002e96:	2307      	movs	r3, #7
 8002e98:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002e9a:	237f      	movs	r3, #127	@ 0x7f
 8002e9c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002e9e:	2304      	movs	r3, #4
 8002ea0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ea6:	1d3b      	adds	r3, r7, #4
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	480d      	ldr	r0, [pc, #52]	@ (8002ee0 <MX_ADC1_Init+0x104>)
 8002eac:	f003 f9ac 	bl	8006208 <HAL_ADC_ConfigChannel>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002eb6:	f000 ff9f 	bl	8003df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002eba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee8 <MX_ADC1_Init+0x10c>)
 8002ebc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002ebe:	230c      	movs	r3, #12
 8002ec0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ec2:	1d3b      	adds	r3, r7, #4
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4806      	ldr	r0, [pc, #24]	@ (8002ee0 <MX_ADC1_Init+0x104>)
 8002ec8:	f003 f99e 	bl	8006208 <HAL_ADC_ConfigChannel>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002ed2:	f000 ff91 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ed6:	bf00      	nop
 8002ed8:	3730      	adds	r7, #48	@ 0x30
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	200001e4 	.word	0x200001e4
 8002ee4:	19200040 	.word	0x19200040
 8002ee8:	1d500080 	.word	0x1d500080

08002eec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b09e      	sub	sp, #120	@ 0x78
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f04:	f107 0310 	add.w	r3, r7, #16
 8002f08:	2254      	movs	r2, #84	@ 0x54
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f00a fbf7 	bl	800d700 <memset>
  if(adcHandle->Instance==ADC1)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f1a:	d15e      	bne.n	8002fda <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002f1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f20:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002f22:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002f26:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f28:	f107 0310 	add.w	r3, r7, #16
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f005 fcdf 	bl	80088f0 <HAL_RCCEx_PeriphCLKConfig>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002f38:	f000 ff5e 	bl	8003df8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002f3c:	4b29      	ldr	r3, [pc, #164]	@ (8002fe4 <HAL_ADC_MspInit+0xf8>)
 8002f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f40:	4a28      	ldr	r2, [pc, #160]	@ (8002fe4 <HAL_ADC_MspInit+0xf8>)
 8002f42:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f48:	4b26      	ldr	r3, [pc, #152]	@ (8002fe4 <HAL_ADC_MspInit+0xf8>)
 8002f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f54:	4b23      	ldr	r3, [pc, #140]	@ (8002fe4 <HAL_ADC_MspInit+0xf8>)
 8002f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f58:	4a22      	ldr	r2, [pc, #136]	@ (8002fe4 <HAL_ADC_MspInit+0xf8>)
 8002f5a:	f043 0304 	orr.w	r3, r3, #4
 8002f5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f60:	4b20      	ldr	r3, [pc, #128]	@ (8002fe4 <HAL_ADC_MspInit+0xf8>)
 8002f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f70:	2303      	movs	r3, #3
 8002f72:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f78:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	481a      	ldr	r0, [pc, #104]	@ (8002fe8 <HAL_ADC_MspInit+0xfc>)
 8002f80:	f004 fd0a 	bl	8007998 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002f84:	4b19      	ldr	r3, [pc, #100]	@ (8002fec <HAL_ADC_MspInit+0x100>)
 8002f86:	4a1a      	ldr	r2, [pc, #104]	@ (8002ff0 <HAL_ADC_MspInit+0x104>)
 8002f88:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002f8a:	4b18      	ldr	r3, [pc, #96]	@ (8002fec <HAL_ADC_MspInit+0x100>)
 8002f8c:	2205      	movs	r2, #5
 8002f8e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f90:	4b16      	ldr	r3, [pc, #88]	@ (8002fec <HAL_ADC_MspInit+0x100>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f96:	4b15      	ldr	r3, [pc, #84]	@ (8002fec <HAL_ADC_MspInit+0x100>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f9c:	4b13      	ldr	r3, [pc, #76]	@ (8002fec <HAL_ADC_MspInit+0x100>)
 8002f9e:	2280      	movs	r2, #128	@ 0x80
 8002fa0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fa2:	4b12      	ldr	r3, [pc, #72]	@ (8002fec <HAL_ADC_MspInit+0x100>)
 8002fa4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fa8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002faa:	4b10      	ldr	r3, [pc, #64]	@ (8002fec <HAL_ADC_MspInit+0x100>)
 8002fac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fb0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8002fec <HAL_ADC_MspInit+0x100>)
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002fec <HAL_ADC_MspInit+0x100>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002fbe:	480b      	ldr	r0, [pc, #44]	@ (8002fec <HAL_ADC_MspInit+0x100>)
 8002fc0:	f004 f9b8 	bl	8007334 <HAL_DMA_Init>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8002fca:	f000 ff15 	bl	8003df8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a06      	ldr	r2, [pc, #24]	@ (8002fec <HAL_ADC_MspInit+0x100>)
 8002fd2:	655a      	str	r2, [r3, #84]	@ 0x54
 8002fd4:	4a05      	ldr	r2, [pc, #20]	@ (8002fec <HAL_ADC_MspInit+0x100>)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002fda:	bf00      	nop
 8002fdc:	3778      	adds	r7, #120	@ 0x78
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	48000800 	.word	0x48000800
 8002fec:	20000250 	.word	0x20000250
 8002ff0:	40020008 	.word	0x40020008

08002ff4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002ffa:	4b22      	ldr	r3, [pc, #136]	@ (8003084 <MX_DMA_Init+0x90>)
 8002ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ffe:	4a21      	ldr	r2, [pc, #132]	@ (8003084 <MX_DMA_Init+0x90>)
 8003000:	f043 0304 	orr.w	r3, r3, #4
 8003004:	6493      	str	r3, [r2, #72]	@ 0x48
 8003006:	4b1f      	ldr	r3, [pc, #124]	@ (8003084 <MX_DMA_Init+0x90>)
 8003008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	607b      	str	r3, [r7, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003012:	4b1c      	ldr	r3, [pc, #112]	@ (8003084 <MX_DMA_Init+0x90>)
 8003014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003016:	4a1b      	ldr	r2, [pc, #108]	@ (8003084 <MX_DMA_Init+0x90>)
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	6493      	str	r3, [r2, #72]	@ 0x48
 800301e:	4b19      	ldr	r3, [pc, #100]	@ (8003084 <MX_DMA_Init+0x90>)
 8003020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800302a:	2200      	movs	r2, #0
 800302c:	2100      	movs	r1, #0
 800302e:	200b      	movs	r0, #11
 8003030:	f004 f94b 	bl	80072ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003034:	200b      	movs	r0, #11
 8003036:	f004 f962 	bl	80072fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800303a:	2200      	movs	r2, #0
 800303c:	2100      	movs	r1, #0
 800303e:	200c      	movs	r0, #12
 8003040:	f004 f943 	bl	80072ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003044:	200c      	movs	r0, #12
 8003046:	f004 f95a 	bl	80072fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800304a:	2200      	movs	r2, #0
 800304c:	2100      	movs	r1, #0
 800304e:	200d      	movs	r0, #13
 8003050:	f004 f93b 	bl	80072ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003054:	200d      	movs	r0, #13
 8003056:	f004 f952 	bl	80072fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800305a:	2200      	movs	r2, #0
 800305c:	2100      	movs	r1, #0
 800305e:	200e      	movs	r0, #14
 8003060:	f004 f933 	bl	80072ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003064:	200e      	movs	r0, #14
 8003066:	f004 f94a 	bl	80072fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800306a:	2200      	movs	r2, #0
 800306c:	2100      	movs	r1, #0
 800306e:	200f      	movs	r0, #15
 8003070:	f004 f92b 	bl	80072ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003074:	200f      	movs	r0, #15
 8003076:	f004 f942 	bl	80072fe <HAL_NVIC_EnableIRQ>

}
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000

08003088 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08a      	sub	sp, #40	@ 0x28
 800308c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800308e:	f107 0314 	add.w	r3, r7, #20
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	605a      	str	r2, [r3, #4]
 8003098:	609a      	str	r2, [r3, #8]
 800309a:	60da      	str	r2, [r3, #12]
 800309c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800309e:	4b67      	ldr	r3, [pc, #412]	@ (800323c <MX_GPIO_Init+0x1b4>)
 80030a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a2:	4a66      	ldr	r2, [pc, #408]	@ (800323c <MX_GPIO_Init+0x1b4>)
 80030a4:	f043 0304 	orr.w	r3, r3, #4
 80030a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030aa:	4b64      	ldr	r3, [pc, #400]	@ (800323c <MX_GPIO_Init+0x1b4>)
 80030ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030b6:	4b61      	ldr	r3, [pc, #388]	@ (800323c <MX_GPIO_Init+0x1b4>)
 80030b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ba:	4a60      	ldr	r2, [pc, #384]	@ (800323c <MX_GPIO_Init+0x1b4>)
 80030bc:	f043 0320 	orr.w	r3, r3, #32
 80030c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030c2:	4b5e      	ldr	r3, [pc, #376]	@ (800323c <MX_GPIO_Init+0x1b4>)
 80030c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c6:	f003 0320 	and.w	r3, r3, #32
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ce:	4b5b      	ldr	r3, [pc, #364]	@ (800323c <MX_GPIO_Init+0x1b4>)
 80030d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030d2:	4a5a      	ldr	r2, [pc, #360]	@ (800323c <MX_GPIO_Init+0x1b4>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030da:	4b58      	ldr	r3, [pc, #352]	@ (800323c <MX_GPIO_Init+0x1b4>)
 80030dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e6:	4b55      	ldr	r3, [pc, #340]	@ (800323c <MX_GPIO_Init+0x1b4>)
 80030e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ea:	4a54      	ldr	r2, [pc, #336]	@ (800323c <MX_GPIO_Init+0x1b4>)
 80030ec:	f043 0302 	orr.w	r3, r3, #2
 80030f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030f2:	4b52      	ldr	r3, [pc, #328]	@ (800323c <MX_GPIO_Init+0x1b4>)
 80030f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	607b      	str	r3, [r7, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 80030fe:	2200      	movs	r2, #0
 8003100:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8003104:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003108:	f004 fde0 	bl	8007ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800310c:	2200      	movs	r2, #0
 800310e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003112:	484b      	ldr	r0, [pc, #300]	@ (8003240 <MX_GPIO_Init+0x1b8>)
 8003114:	f004 fdda 	bl	8007ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003118:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800311c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800311e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003128:	f107 0314 	add.w	r3, r7, #20
 800312c:	4619      	mov	r1, r3
 800312e:	4844      	ldr	r0, [pc, #272]	@ (8003240 <MX_GPIO_Init+0x1b8>)
 8003130:	f004 fc32 	bl	8007998 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8003134:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8003138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800313a:	2301      	movs	r3, #1
 800313c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003142:	2300      	movs	r3, #0
 8003144:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003146:	f107 0314 	add.w	r3, r7, #20
 800314a:	4619      	mov	r1, r3
 800314c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003150:	f004 fc22 	bl	8007998 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin EMER_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin|EMER_Pin;
 8003154:	f241 0311 	movw	r3, #4113	@ 0x1011
 8003158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800315a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800315e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003160:	2300      	movs	r3, #0
 8003162:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003164:	f107 0314 	add.w	r3, r7, #20
 8003168:	4619      	mov	r1, r3
 800316a:	4836      	ldr	r0, [pc, #216]	@ (8003244 <MX_GPIO_Init+0x1bc>)
 800316c:	f004 fc14 	bl	8007998 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 8003170:	2306      	movs	r3, #6
 8003172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003174:	2300      	movs	r3, #0
 8003176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003178:	2302      	movs	r3, #2
 800317a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317c:	f107 0314 	add.w	r3, r7, #20
 8003180:	4619      	mov	r1, r3
 8003182:	4830      	ldr	r0, [pc, #192]	@ (8003244 <MX_GPIO_Init+0x1bc>)
 8003184:	f004 fc08 	bl	8007998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003188:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800318c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800318e:	2301      	movs	r3, #1
 8003190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003196:	2300      	movs	r3, #0
 8003198:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800319a:	f107 0314 	add.w	r3, r7, #20
 800319e:	4619      	mov	r1, r3
 80031a0:	4827      	ldr	r0, [pc, #156]	@ (8003240 <MX_GPIO_Init+0x1b8>)
 80031a2:	f004 fbf9 	bl	8007998 <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin J2_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin|J2_Pin;
 80031a6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80031aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031b4:	f107 0314 	add.w	r3, r7, #20
 80031b8:	4619      	mov	r1, r3
 80031ba:	4821      	ldr	r0, [pc, #132]	@ (8003240 <MX_GPIO_Init+0x1b8>)
 80031bc:	f004 fbec 	bl	8007998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PROX_Pin */
  GPIO_InitStruct.Pin = PROX_Pin;
 80031c0:	2340      	movs	r3, #64	@ 0x40
 80031c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80031c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031ca:	2301      	movs	r3, #1
 80031cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PROX_GPIO_Port, &GPIO_InitStruct);
 80031ce:	f107 0314 	add.w	r3, r7, #20
 80031d2:	4619      	mov	r1, r3
 80031d4:	481b      	ldr	r0, [pc, #108]	@ (8003244 <MX_GPIO_Init+0x1bc>)
 80031d6:	f004 fbdf 	bl	8007998 <HAL_GPIO_Init>

  /*Configure GPIO pin : J1_Pin */
  GPIO_InitStruct.Pin = J1_Pin;
 80031da:	2380      	movs	r3, #128	@ 0x80
 80031dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031de:	2300      	movs	r3, #0
 80031e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J1_GPIO_Port, &GPIO_InitStruct);
 80031e6:	f107 0314 	add.w	r3, r7, #20
 80031ea:	4619      	mov	r1, r3
 80031ec:	4815      	ldr	r0, [pc, #84]	@ (8003244 <MX_GPIO_Init+0x1bc>)
 80031ee:	f004 fbd3 	bl	8007998 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80031f2:	2200      	movs	r2, #0
 80031f4:	2100      	movs	r1, #0
 80031f6:	2006      	movs	r0, #6
 80031f8:	f004 f867 	bl	80072ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80031fc:	2006      	movs	r0, #6
 80031fe:	f004 f87e 	bl	80072fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003202:	2200      	movs	r2, #0
 8003204:	2100      	movs	r1, #0
 8003206:	200a      	movs	r0, #10
 8003208:	f004 f85f 	bl	80072ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800320c:	200a      	movs	r0, #10
 800320e:	f004 f876 	bl	80072fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003212:	2200      	movs	r2, #0
 8003214:	2100      	movs	r1, #0
 8003216:	2017      	movs	r0, #23
 8003218:	f004 f857 	bl	80072ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800321c:	2017      	movs	r0, #23
 800321e:	f004 f86e 	bl	80072fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003222:	2200      	movs	r2, #0
 8003224:	2100      	movs	r1, #0
 8003226:	2028      	movs	r0, #40	@ 0x28
 8003228:	f004 f84f 	bl	80072ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800322c:	2028      	movs	r0, #40	@ 0x28
 800322e:	f004 f866 	bl	80072fe <HAL_NVIC_EnableIRQ>

}
 8003232:	bf00      	nop
 8003234:	3728      	adds	r7, #40	@ 0x28
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40021000 	.word	0x40021000
 8003240:	48000800 	.word	0x48000800
 8003244:	48000400 	.word	0x48000400

08003248 <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 8003248:	b580      	push	{r7, lr}
 800324a:	b096      	sub	sp, #88	@ 0x58
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	ed87 0a02 	vstr	s0, [r7, #8]
 8003254:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 800325e:	1d3b      	adds	r3, r7, #4
 8003260:	2201      	movs	r2, #1
 8003262:	2101      	movs	r1, #1
 8003264:	f009 fcdb 	bl	800cc1e <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8003274:	4619      	mov	r1, r3
 8003276:	4610      	mov	r0, r2
 8003278:	f00a f94b 	bl	800d512 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8003288:	4619      	mov	r1, r3
 800328a:	4610      	mov	r0, r2
 800328c:	f00a f941 	bl	800d512 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 800329c:	4619      	mov	r1, r3
 800329e:	4610      	mov	r0, r2
 80032a0:	f00a f937 	bl	800d512 <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 80032b0:	4619      	mov	r1, r3
 80032b2:	ed97 0a02 	vldr	s0, [r7, #8]
 80032b6:	4610      	mov	r0, r2
 80032b8:	f00a f8ba 	bl	800d430 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 80032ce:	461a      	mov	r2, r3
 80032d0:	f00a f834 	bl	800d33c <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80032e6:	461a      	mov	r2, r3
 80032e8:	f009 fc5e 	bl	800cba8 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80032fe:	461a      	mov	r2, r3
 8003300:	f00a f81c 	bl	800d33c <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8003316:	461a      	mov	r2, r3
 8003318:	f00a f810 	bl	800d33c <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 800332e:	461a      	mov	r2, r3
 8003330:	f00a f804 	bl	800d33c <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8003346:	4619      	mov	r1, r3
 8003348:	eeb0 0a67 	vmov.f32	s0, s15
 800334c:	4610      	mov	r0, r2
 800334e:	f00a f86f 	bl	800d430 <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8003364:	461a      	mov	r2, r3
 8003366:	f009 fc1f 	bl	800cba8 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 800337c:	461a      	mov	r2, r3
 800337e:	f009 ffdd 	bl	800d33c <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8003394:	461a      	mov	r2, r3
 8003396:	f009 ffd1 	bl	800d33c <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 80033ac:	461a      	mov	r2, r3
 80033ae:	f009 fbfb 	bl	800cba8 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 80033be:	4619      	mov	r1, r3
 80033c0:	4610      	mov	r0, r2
 80033c2:	f009 fc44 	bl	800cc4e <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 80033d8:	461a      	mov	r2, r3
 80033da:	f009 ffaf 	bl	800d33c <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 80033f0:	461a      	mov	r2, r3
 80033f2:	f009 ffa3 	bl	800d33c <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8003408:	461a      	mov	r2, r3
 800340a:	f009 ff97 	bl	800d33c <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8003420:	461a      	mov	r2, r3
 8003422:	f00a f83b 	bl	800d49c <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8003438:	461a      	mov	r2, r3
 800343a:	f009 ff7f 	bl	800d33c <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8003450:	461a      	mov	r2, r3
 8003452:	f009 fba9 	bl	800cba8 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8003468:	461a      	mov	r2, r3
 800346a:	f009 ff67 	bl	800d33c <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 800346e:	f107 0310 	add.w	r3, r7, #16
 8003472:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8003476:	2204      	movs	r2, #4
 8003478:	2104      	movs	r1, #4
 800347a:	f009 fbd0 	bl	800cc1e <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 800348a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800348e:	4619      	mov	r1, r3
 8003490:	f009 ff54 	bl	800d33c <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800349a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800349e:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80034a2:	4618      	mov	r0, r3
 80034a4:	f009 fffa 	bl	800d49c <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 80034b4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80034b8:	4618      	mov	r0, r3
 80034ba:	f009 ff3f 	bl	800d33c <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80034ce:	ee07 3a90 	vmov	s15, r3
}
 80034d2:	eeb0 0a67 	vmov.f32	s0, s15
 80034d6:	3758      	adds	r7, #88	@ 0x58
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 80034dc:	b5b0      	push	{r4, r5, r7, lr}
 80034de:	b0a4      	sub	sp, #144	@ 0x90
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6178      	str	r0, [r7, #20]
 80034e4:	6139      	str	r1, [r7, #16]
 80034e6:	60fa      	str	r2, [r7, #12]
 80034e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80034ec:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8003500:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003504:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 800351e:	f04f 0300 	mov.w	r3, #0
 8003522:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003524:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003528:	673b      	str	r3, [r7, #112]	@ 0x70
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8003536:	4bc6      	ldr	r3, [pc, #792]	@ (8003850 <Kalman_Start+0x374>)
 8003538:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 800353c:	461d      	mov	r5, r3
 800353e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800354a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800354e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8003552:	f107 031c 	add.w	r3, r7, #28
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	605a      	str	r2, [r3, #4]
 800355c:	609a      	str	r2, [r3, #8]
 800355e:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 800356a:	2300      	movs	r3, #0
 800356c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003570:	e028      	b.n	80035c4 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8003572:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4413      	add	r3, r2
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	6979      	ldr	r1, [r7, #20]
 8003580:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003584:	3314      	adds	r3, #20
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 800358c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	3390      	adds	r3, #144	@ 0x90
 8003594:	443b      	add	r3, r7
 8003596:	3b64      	subs	r3, #100	@ 0x64
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	6979      	ldr	r1, [r7, #20]
 800359c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035a0:	3398      	adds	r3, #152	@ 0x98
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035ae:	3304      	adds	r3, #4
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 80035ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035be:	3301      	adds	r3, #1
 80035c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80035c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035c8:	2b0f      	cmp	r3, #15
 80035ca:	ddd2      	ble.n	8003572 <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 80035cc:	2300      	movs	r3, #0
 80035ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80035d2:	e03a      	b.n	800364a <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 80035d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	3390      	adds	r3, #144	@ 0x90
 80035dc:	443b      	add	r3, r7
 80035de:	3b74      	subs	r3, #116	@ 0x74
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	6979      	ldr	r1, [r7, #20]
 80035e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 80035ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4413      	add	r3, r2
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	6979      	ldr	r1, [r7, #20]
 80035fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003600:	3324      	adds	r3, #36	@ 0x24
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8003608:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	3390      	adds	r3, #144	@ 0x90
 8003610:	443b      	add	r3, r7
 8003612:	3b14      	subs	r3, #20
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	6979      	ldr	r1, [r7, #20]
 8003618:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800361c:	3328      	adds	r3, #40	@ 0x28
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8003624:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	3390      	adds	r3, #144	@ 0x90
 800362c:	443b      	add	r3, r7
 800362e:	3b24      	subs	r3, #36	@ 0x24
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	6979      	ldr	r1, [r7, #20]
 8003634:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003638:	332c      	adds	r3, #44	@ 0x2c
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8003640:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003644:	3301      	adds	r3, #1
 8003646:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800364a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800364e:	2b03      	cmp	r3, #3
 8003650:	ddc0      	ble.n	80035d4 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	2201      	movs	r2, #1
 800365c:	2104      	movs	r1, #4
 800365e:	f009 fade 	bl	800cc1e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	3310      	adds	r3, #16
 800366c:	2204      	movs	r2, #4
 800366e:	2104      	movs	r1, #4
 8003670:	f009 fad5 	bl	800cc1e <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	3350      	adds	r3, #80	@ 0x50
 800367e:	2204      	movs	r2, #4
 8003680:	2104      	movs	r1, #4
 8003682:	f009 facc 	bl	800cc1e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	3390      	adds	r3, #144	@ 0x90
 8003690:	2201      	movs	r2, #1
 8003692:	2104      	movs	r1, #4
 8003694:	f009 fac3 	bl	800cc1e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	33a0      	adds	r3, #160	@ 0xa0
 80036a2:	2204      	movs	r2, #4
 80036a4:	2101      	movs	r1, #1
 80036a6:	f009 faba 	bl	800cc1e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	33b0      	adds	r3, #176	@ 0xb0
 80036b4:	2201      	movs	r2, #1
 80036b6:	2104      	movs	r1, #4
 80036b8:	f009 fab1 	bl	800cc1e <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	33c8      	adds	r3, #200	@ 0xc8
 80036c6:	2204      	movs	r2, #4
 80036c8:	2104      	movs	r1, #4
 80036ca:	f009 faa8 	bl	800cc1e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80036da:	2201      	movs	r2, #1
 80036dc:	2104      	movs	r1, #4
 80036de:	f009 fa9e 	bl	800cc1e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80036ee:	2204      	movs	r2, #4
 80036f0:	2101      	movs	r1, #1
 80036f2:	f009 fa94 	bl	800cc1e <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003702:	2204      	movs	r2, #4
 8003704:	2104      	movs	r1, #4
 8003706:	f009 fa8a 	bl	800cc1e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003716:	2204      	movs	r2, #4
 8003718:	2104      	movs	r1, #4
 800371a:	f009 fa80 	bl	800cc1e <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800372a:	2201      	movs	r2, #1
 800372c:	2104      	movs	r1, #4
 800372e:	f009 fa76 	bl	800cc1e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 800373e:	2201      	movs	r2, #1
 8003740:	2104      	movs	r1, #4
 8003742:	f009 fa6c 	bl	800cc1e <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003752:	2204      	movs	r2, #4
 8003754:	2101      	movs	r1, #1
 8003756:	f009 fa62 	bl	800cc1e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8003766:	2201      	movs	r2, #1
 8003768:	2101      	movs	r1, #1
 800376a:	f009 fa58 	bl	800cc1e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800377a:	2201      	movs	r2, #1
 800377c:	2101      	movs	r1, #1
 800377e:	f009 fa4e 	bl	800cc1e <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800378e:	2201      	movs	r2, #1
 8003790:	2104      	movs	r1, #4
 8003792:	f009 fa44 	bl	800cc1e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80037a2:	2201      	movs	r2, #1
 80037a4:	2104      	movs	r1, #4
 80037a6:	f009 fa3a 	bl	800cc1e <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80037b6:	2201      	movs	r2, #1
 80037b8:	2101      	movs	r1, #1
 80037ba:	f009 fa30 	bl	800cc1e <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 80037ca:	2201      	movs	r2, #1
 80037cc:	2101      	movs	r1, #1
 80037ce:	f009 fa26 	bl	800cc1e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80037de:	2201      	movs	r2, #1
 80037e0:	2101      	movs	r1, #1
 80037e2:	f009 fa1c 	bl	800cc1e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80037f2:	2201      	movs	r2, #1
 80037f4:	2104      	movs	r1, #4
 80037f6:	f009 fa12 	bl	800cc1e <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003806:	2201      	movs	r2, #1
 8003808:	2101      	movs	r1, #1
 800380a:	f009 fa08 	bl	800cc1e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800381a:	2204      	movs	r2, #4
 800381c:	2104      	movs	r1, #4
 800381e:	f009 f9fe 	bl	800cc1e <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	33c4      	adds	r3, #196	@ 0xc4
 800382c:	2201      	movs	r2, #1
 800382e:	2101      	movs	r1, #1
 8003830:	f009 f9f5 	bl	800cc1e <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8003840:	2201      	movs	r2, #1
 8003842:	2101      	movs	r1, #1
 8003844:	f009 f9eb 	bl	800cc1e <arm_mat_init_f32>
}
 8003848:	bf00      	nop
 800384a:	3790      	adds	r7, #144	@ 0x90
 800384c:	46bd      	mov	sp, r7
 800384e:	bdb0      	pop	{r4, r5, r7, pc}
 8003850:	0800e2cc 	.word	0x0800e2cc

08003854 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003854:	b598      	push	{r3, r4, r7, lr}
 8003856:	ed2d 8b02 	vpush	{d8}
 800385a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800385c:	f001 ff71 	bl	8005742 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003860:	f000 f8b0 	bl	80039c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003864:	f7ff fc10 	bl	8003088 <MX_GPIO_Init>
	MX_DMA_Init();
 8003868:	f7ff fbc4 	bl	8002ff4 <MX_DMA_Init>
	MX_ADC1_Init();
 800386c:	f7ff fab6 	bl	8002ddc <MX_ADC1_Init>
	MX_TIM2_Init();
 8003870:	f001 f97c 	bl	8004b6c <MX_TIM2_Init>
	MX_TIM3_Init();
 8003874:	f001 f9c8 	bl	8004c08 <MX_TIM3_Init>
	MX_TIM4_Init();
 8003878:	f001 fa1c 	bl	8004cb4 <MX_TIM4_Init>
	MX_TIM5_Init();
 800387c:	f001 fa70 	bl	8004d60 <MX_TIM5_Init>
	MX_TIM8_Init();
 8003880:	f001 fac4 	bl	8004e0c <MX_TIM8_Init>
	MX_USART2_UART_Init();
 8003884:	f001 fd86 	bl	8005394 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8003888:	f001 fb7e 	bl	8004f88 <MX_TIM16_Init>
	MX_TIM1_Init();
 800388c:	f001 f8da 	bl	8004a44 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 8003890:	f001 fd36 	bl	8005300 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 8003894:	f000 fab8 	bl	8003e08 <plotter_begin>

	// Initialize position setpoints to current position to prevent startup errors
	prismatic_axis.position = prismatic_encoder.mm;
 8003898:	4b3c      	ldr	r3, [pc, #240]	@ (800398c <main+0x138>)
 800389a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800389c:	4a3c      	ldr	r2, [pc, #240]	@ (8003990 <main+0x13c>)
 800389e:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 80038a0:	4b3c      	ldr	r3, [pc, #240]	@ (8003994 <main+0x140>)
 80038a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a4:	4a3c      	ldr	r2, [pc, #240]	@ (8003998 <main+0x144>)
 80038a6:	6013      	str	r3, [r2, #0]

	// Reset all error terms and flags
	prismatic_axis.pos_error = 0.0f;
 80038a8:	4b39      	ldr	r3, [pc, #228]	@ (8003990 <main+0x13c>)
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	615a      	str	r2, [r3, #20]
	prismatic_axis.vel_error = 0.0f;
 80038b0:	4b37      	ldr	r3, [pc, #220]	@ (8003990 <main+0x13c>)
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	619a      	str	r2, [r3, #24]
	revolute_axis.pos_error = 0.0f;
 80038b8:	4b37      	ldr	r3, [pc, #220]	@ (8003998 <main+0x144>)
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	615a      	str	r2, [r3, #20]
	revolute_axis.vel_error = 0.0f;
 80038c0:	4b35      	ldr	r3, [pc, #212]	@ (8003998 <main+0x144>)
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	619a      	str	r2, [r3, #24]
	prismatic_axis.trajectory_active = false;
 80038c8:	4b31      	ldr	r3, [pc, #196]	@ (8003990 <main+0x13c>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 80038d0:	4b31      	ldr	r3, [pc, #196]	@ (8003998 <main+0x144>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
//		} else {
//			rev_velocity_target = 0.0f;
//		}
		static uint8_t button_pressed_previous = 0;

		if (b1 && !button_pressed_previous && !trajectoryActive) {
 80038d8:	4b30      	ldr	r3, [pc, #192]	@ (800399c <main+0x148>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d04e      	beq.n	800397e <main+0x12a>
 80038e0:	4b2f      	ldr	r3, [pc, #188]	@ (80039a0 <main+0x14c>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d14a      	bne.n	800397e <main+0x12a>
 80038e8:	4b2e      	ldr	r3, [pc, #184]	@ (80039a4 <main+0x150>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	f083 0301 	eor.w	r3, r3, #1
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d043      	beq.n	800397e <main+0x12a>
			prisEva.t = 0.0f;
 80038f6:	4b2c      	ldr	r3, [pc, #176]	@ (80039a8 <main+0x154>)
 80038f8:	f04f 0200 	mov.w	r2, #0
 80038fc:	60da      	str	r2, [r3, #12]
			prisEva.isFinised = false;
 80038fe:	4b2a      	ldr	r3, [pc, #168]	@ (80039a8 <main+0x154>)
 8003900:	2200      	movs	r2, #0
 8003902:	741a      	strb	r2, [r3, #16]

			initial_p = revolute_encoder.rads;
 8003904:	4b23      	ldr	r3, [pc, #140]	@ (8003994 <main+0x140>)
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	4a28      	ldr	r2, [pc, #160]	@ (80039ac <main+0x158>)
 800390a:	6013      	str	r3, [r2, #0]

			target_p = trajectory_sequence[trajectory_sequence_index];
 800390c:	4b28      	ldr	r3, [pc, #160]	@ (80039b0 <main+0x15c>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	4a28      	ldr	r2, [pc, #160]	@ (80039b4 <main+0x160>)
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a27      	ldr	r2, [pc, #156]	@ (80039b8 <main+0x164>)
 800391a:	6013      	str	r3, [r2, #0]

			//			Trapezoidal_Generator(&prisGen, initial_p, target_p,
			//					ZGX45RGG_400RPM_Constant.qd_max,
			//					ZGX45RGG_400RPM_Constant.qd_max * 3.0);

			Trapezoidal_Generator(&prisGen, initial_p, target_p,
 800391c:	4b23      	ldr	r3, [pc, #140]	@ (80039ac <main+0x158>)
 800391e:	ed93 8a00 	vldr	s16, [r3]
 8003922:	4b25      	ldr	r3, [pc, #148]	@ (80039b8 <main+0x164>)
 8003924:	edd3 8a00 	vldr	s17, [r3]
					ZGX45RGG_150RPM_Constant.traject_qd_max,
 8003928:	4b24      	ldr	r3, [pc, #144]	@ (80039bc <main+0x168>)
 800392a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
			Trapezoidal_Generator(&prisGen, initial_p, target_p,
 800392e:	4610      	mov	r0, r2
 8003930:	4619      	mov	r1, r3
 8003932:	f7fd f887 	bl	8000a44 <__aeabi_d2f>
 8003936:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8003938:	4b20      	ldr	r3, [pc, #128]	@ (80039bc <main+0x168>)
 800393a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
			Trapezoidal_Generator(&prisGen, initial_p, target_p,
 800393e:	4610      	mov	r0, r2
 8003940:	4619      	mov	r1, r3
 8003942:	f7fd f87f 	bl	8000a44 <__aeabi_d2f>
 8003946:	4603      	mov	r3, r0
 8003948:	ee01 3a90 	vmov	s3, r3
 800394c:	ee01 4a10 	vmov	s2, r4
 8003950:	eef0 0a68 	vmov.f32	s1, s17
 8003954:	eeb0 0a48 	vmov.f32	s0, s16
 8003958:	4819      	ldr	r0, [pc, #100]	@ (80039c0 <main+0x16c>)
 800395a:	f7fe fe59 	bl	8002610 <Trapezoidal_Generator>

			trajectoryActive = true;
 800395e:	4b11      	ldr	r3, [pc, #68]	@ (80039a4 <main+0x150>)
 8003960:	2201      	movs	r2, #1
 8003962:	701a      	strb	r2, [r3, #0]

			trajectory_sequence_index = (trajectory_sequence_index + 1) % 4;
 8003964:	4b12      	ldr	r3, [pc, #72]	@ (80039b0 <main+0x15c>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	3301      	adds	r3, #1
 800396a:	425a      	negs	r2, r3
 800396c:	f003 0303 	and.w	r3, r3, #3
 8003970:	f002 0203 	and.w	r2, r2, #3
 8003974:	bf58      	it	pl
 8003976:	4253      	negpl	r3, r2
 8003978:	b2da      	uxtb	r2, r3
 800397a:	4b0d      	ldr	r3, [pc, #52]	@ (80039b0 <main+0x15c>)
 800397c:	701a      	strb	r2, [r3, #0]
		}
		button_pressed_previous = b1;
 800397e:	4b07      	ldr	r3, [pc, #28]	@ (800399c <main+0x148>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	b2da      	uxtb	r2, r3
 8003984:	4b06      	ldr	r3, [pc, #24]	@ (80039a0 <main+0x14c>)
 8003986:	701a      	strb	r2, [r3, #0]
	while (1) {
 8003988:	e7a6      	b.n	80038d8 <main+0x84>
 800398a:	bf00      	nop
 800398c:	20000418 	.word	0x20000418
 8003990:	200002b0 	.word	0x200002b0
 8003994:	20000474 	.word	0x20000474
 8003998:	200002f4 	.word	0x200002f4
 800399c:	200018fc 	.word	0x200018fc
 80039a0:	2000037d 	.word	0x2000037d
 80039a4:	20000368 	.word	0x20000368
 80039a8:	20000354 	.word	0x20000354
 80039ac:	2000036c 	.word	0x2000036c
 80039b0:	2000037c 	.word	0x2000037c
 80039b4:	0800e30c 	.word	0x0800e30c
 80039b8:	20000370 	.word	0x20000370
 80039bc:	20000000 	.word	0x20000000
 80039c0:	20000340 	.word	0x20000340

080039c4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b094      	sub	sp, #80	@ 0x50
 80039c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80039ca:	f107 0318 	add.w	r3, r7, #24
 80039ce:	2238      	movs	r2, #56	@ 0x38
 80039d0:	2100      	movs	r1, #0
 80039d2:	4618      	mov	r0, r3
 80039d4:	f009 fe94 	bl	800d700 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80039d8:	1d3b      	adds	r3, r7, #4
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	605a      	str	r2, [r3, #4]
 80039e0:	609a      	str	r2, [r3, #8]
 80039e2:	60da      	str	r2, [r3, #12]
 80039e4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80039e6:	2000      	movs	r0, #0
 80039e8:	f004 f9a0 	bl	8007d2c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039ec:	2302      	movs	r3, #2
 80039ee:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039f4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039f6:	2340      	movs	r3, #64	@ 0x40
 80039f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039fa:	2302      	movs	r3, #2
 80039fc:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039fe:	2302      	movs	r3, #2
 8003a00:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003a02:	2304      	movs	r3, #4
 8003a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8003a06:	2355      	movs	r3, #85	@ 0x55
 8003a08:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003a12:	2302      	movs	r3, #2
 8003a14:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003a16:	f107 0318 	add.w	r3, r7, #24
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f004 fa3a 	bl	8007e94 <HAL_RCC_OscConfig>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <SystemClock_Config+0x66>
		Error_Handler();
 8003a26:	f000 f9e7 	bl	8003df8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003a2a:	230f      	movs	r3, #15
 8003a2c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a36:	2300      	movs	r3, #0
 8003a38:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8003a3e:	1d3b      	adds	r3, r7, #4
 8003a40:	2104      	movs	r1, #4
 8003a42:	4618      	mov	r0, r3
 8003a44:	f004 fd38 	bl	80084b8 <HAL_RCC_ClockConfig>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <SystemClock_Config+0x8e>
		Error_Handler();
 8003a4e:	f000 f9d3 	bl	8003df8 <Error_Handler>
	}
}
 8003a52:	bf00      	nop
 8003a54:	3750      	adds	r7, #80	@ 0x50
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <control_motor_revolute>:

/* USER CODE BEGIN 4 */
void control_motor_revolute(float pos_target, float vel_target) {
 8003a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a60:	ed2d 8b02 	vpush	{d8}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	ed87 0a01 	vstr	s0, [r7, #4]
 8003a6c:	edc7 0a00 	vstr	s1, [r7]
	revolute_axis.input_voltage = mapf(revolute_axis.command_pos, -65535.0f,
 8003a70:	4b60      	ldr	r3, [pc, #384]	@ (8003bf4 <control_motor_revolute+0x198>)
 8003a72:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003a76:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8003a7a:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8003a7e:	ed9f 1a5e 	vldr	s2, [pc, #376]	@ 8003bf8 <control_motor_revolute+0x19c>
 8003a82:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 8003bfc <control_motor_revolute+0x1a0>
 8003a86:	eeb0 0a67 	vmov.f32	s0, s15
 8003a8a:	f7fd fe2d 	bl	80016e8 <mapf>
 8003a8e:	eef0 7a40 	vmov.f32	s15, s0
 8003a92:	4b58      	ldr	r3, [pc, #352]	@ (8003bf4 <control_motor_revolute+0x198>)
 8003a94:	edc3 7a08 	vstr	s15, [r3, #32]
			65535.0f, -12.0f, 12.0f);

	revolute_axis.kalman_velocity = SteadyStateKalmanFilter(&revolute_kalman,
 8003a98:	4b56      	ldr	r3, [pc, #344]	@ (8003bf4 <control_motor_revolute+0x198>)
 8003a9a:	edd3 7a08 	vldr	s15, [r3, #32]
 8003a9e:	4b58      	ldr	r3, [pc, #352]	@ (8003c00 <control_motor_revolute+0x1a4>)
 8003aa0:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8003aa4:	eef0 0a47 	vmov.f32	s1, s14
 8003aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8003aac:	4855      	ldr	r0, [pc, #340]	@ (8003c04 <control_motor_revolute+0x1a8>)
 8003aae:	f7ff fbcb 	bl	8003248 <SteadyStateKalmanFilter>
 8003ab2:	eef0 7a40 	vmov.f32	s15, s0
 8003ab6:	4b4f      	ldr	r3, [pc, #316]	@ (8003bf4 <control_motor_revolute+0x198>)
 8003ab8:	edc3 7a07 	vstr	s15, [r3, #28]
			revolute_axis.input_voltage, revolute_encoder.rads);

	if (isnan(revolute_axis.kalman_velocity)) {
 8003abc:	4b4d      	ldr	r3, [pc, #308]	@ (8003bf4 <control_motor_revolute+0x198>)
 8003abe:	edd3 7a07 	vldr	s15, [r3, #28]
 8003ac2:	eef4 7a67 	vcmp.f32	s15, s15
 8003ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aca:	d703      	bvc.n	8003ad4 <control_motor_revolute+0x78>
		revolute_axis.kalman_velocity = 0.0f;
 8003acc:	4b49      	ldr	r3, [pc, #292]	@ (8003bf4 <control_motor_revolute+0x198>)
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	61da      	str	r2, [r3, #28]
	}

	revolute_axis.pos_error = pos_target - revolute_encoder.rads;
 8003ad4:	4b4a      	ldr	r3, [pc, #296]	@ (8003c00 <control_motor_revolute+0x1a4>)
 8003ad6:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003ada:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ade:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ae2:	4b44      	ldr	r3, [pc, #272]	@ (8003bf4 <control_motor_revolute+0x198>)
 8003ae4:	edc3 7a05 	vstr	s15, [r3, #20]

	revolute_axis.command_vel = PWM_Satuation(
 8003ae8:	4b42      	ldr	r3, [pc, #264]	@ (8003bf4 <control_motor_revolute+0x198>)
 8003aea:	edd3 7a05 	vldr	s15, [r3, #20]
 8003aee:	eeb0 0a67 	vmov.f32	s0, s15
 8003af2:	4845      	ldr	r0, [pc, #276]	@ (8003c08 <control_motor_revolute+0x1ac>)
 8003af4:	f7fd fb08 	bl	8001108 <PID_CONTROLLER_Compute>
 8003af8:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid,
					revolute_axis.pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 8003afc:	4b43      	ldr	r3, [pc, #268]	@ (8003c0c <control_motor_revolute+0x1b0>)
 8003afe:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 8003b02:	4610      	mov	r0, r2
 8003b04:	4619      	mov	r1, r3
 8003b06:	f7fc ff55 	bl	80009b4 <__aeabi_d2iz>
 8003b0a:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 8003b0c:	4b3f      	ldr	r3, [pc, #252]	@ (8003c0c <control_motor_revolute+0x1b0>)
 8003b0e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003b12:	4690      	mov	r8, r2
 8003b14:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_vel = PWM_Satuation(
 8003b18:	4640      	mov	r0, r8
 8003b1a:	4649      	mov	r1, r9
 8003b1c:	f7fc ff4a 	bl	80009b4 <__aeabi_d2iz>
 8003b20:	4603      	mov	r3, r0
 8003b22:	4619      	mov	r1, r3
 8003b24:	4630      	mov	r0, r6
 8003b26:	eeb0 0a48 	vmov.f32	s0, s16
 8003b2a:	f7fd fa8b 	bl	8001044 <PWM_Satuation>
 8003b2e:	ee07 0a90 	vmov	s15, r0
 8003b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b36:	4b2f      	ldr	r3, [pc, #188]	@ (8003bf4 <control_motor_revolute+0x198>)
 8003b38:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	if (pos_target == 0) {
 8003b3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b40:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b48:	d10a      	bne.n	8003b60 <control_motor_revolute+0x104>
		revolute_axis.vel_error = vel_target - revolute_axis.kalman_velocity;
 8003b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8003bf4 <control_motor_revolute+0x198>)
 8003b4c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003b50:	ed97 7a00 	vldr	s14, [r7]
 8003b54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b58:	4b26      	ldr	r3, [pc, #152]	@ (8003bf4 <control_motor_revolute+0x198>)
 8003b5a:	edc3 7a06 	vstr	s15, [r3, #24]
 8003b5e:	e00e      	b.n	8003b7e <control_motor_revolute+0x122>
	} else {
		revolute_axis.vel_error = vel_target + revolute_axis.command_vel
 8003b60:	4b24      	ldr	r3, [pc, #144]	@ (8003bf4 <control_motor_revolute+0x198>)
 8003b62:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003b66:	edd7 7a00 	vldr	s15, [r7]
 8003b6a:	ee37 7a27 	vadd.f32	s14, s14, s15
				- revolute_axis.kalman_velocity;
 8003b6e:	4b21      	ldr	r3, [pc, #132]	@ (8003bf4 <control_motor_revolute+0x198>)
 8003b70:	edd3 7a07 	vldr	s15, [r3, #28]
 8003b74:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = vel_target + revolute_axis.command_vel
 8003b78:	4b1e      	ldr	r3, [pc, #120]	@ (8003bf4 <control_motor_revolute+0x198>)
 8003b7a:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	revolute_axis.command_pos = PWM_Satuation(
 8003b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf4 <control_motor_revolute+0x198>)
 8003b80:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b84:	eeb0 0a67 	vmov.f32	s0, s15
 8003b88:	4821      	ldr	r0, [pc, #132]	@ (8003c10 <control_motor_revolute+0x1b4>)
 8003b8a:	f7fd fabd 	bl	8001108 <PID_CONTROLLER_Compute>
 8003b8e:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid,
					revolute_axis.vel_error), ZGX45RGG_150RPM_Constant.U_max,
 8003b92:	4b1e      	ldr	r3, [pc, #120]	@ (8003c0c <control_motor_revolute+0x1b0>)
 8003b94:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 8003b98:	4610      	mov	r0, r2
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	f7fc ff0a 	bl	80009b4 <__aeabi_d2iz>
 8003ba0:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 8003ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8003c0c <control_motor_revolute+0x1b0>)
 8003ba4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8003ba8:	4614      	mov	r4, r2
 8003baa:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(
 8003bae:	4620      	mov	r0, r4
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	f7fc feff 	bl	80009b4 <__aeabi_d2iz>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4630      	mov	r0, r6
 8003bbc:	eeb0 0a48 	vmov.f32	s0, s16
 8003bc0:	f7fd fa40 	bl	8001044 <PWM_Satuation>
 8003bc4:	ee07 0a90 	vmov	s15, r0
 8003bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bcc:	4b09      	ldr	r3, [pc, #36]	@ (8003bf4 <control_motor_revolute+0x198>)
 8003bce:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8003bd2:	4b08      	ldr	r3, [pc, #32]	@ (8003bf4 <control_motor_revolute+0x198>)
 8003bd4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003bd8:	eef0 0a67 	vmov.f32	s1, s15
 8003bdc:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8003c14 <control_motor_revolute+0x1b8>
 8003be0:	480d      	ldr	r0, [pc, #52]	@ (8003c18 <control_motor_revolute+0x1bc>)
 8003be2:	f7fd fb47 	bl	8001274 <MDXX_set_range>
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	ecbd 8b02 	vpop	{d8}
 8003bf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003bf4:	200002f4 	.word	0x200002f4
 8003bf8:	477fff00 	.word	0x477fff00
 8003bfc:	c77fff00 	.word	0xc77fff00
 8003c00:	20000474 	.word	0x20000474
 8003c04:	2000151c 	.word	0x2000151c
 8003c08:	20000520 	.word	0x20000520
 8003c0c:	20000000 	.word	0x20000000
 8003c10:	20000548 	.word	0x20000548
 8003c14:	44fa0000 	.word	0x44fa0000
 8003c18:	200003cc 	.word	0x200003cc

08003c1c <HAL_GPIO_EXTI_Callback>:

/**
 * @brief GPIO external interrupt callback
 * @param GPIO_Pin Pin that triggered the interrupt
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4603      	mov	r3, r0
 8003c24:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == EMER_Pin) {
 8003c26:	88fb      	ldrh	r3, [r7, #6]
 8003c28:	2b10      	cmp	r3, #16
 8003c2a:	d105      	bne.n	8003c38 <HAL_GPIO_EXTI_Callback+0x1c>
		rs_current_state = RS_EMERGENCY_TRIGGED;
 8003c2c:	4b10      	ldr	r3, [pc, #64]	@ (8003c70 <HAL_GPIO_EXTI_Callback+0x54>)
 8003c2e:	2205      	movs	r2, #5
 8003c30:	701a      	strb	r2, [r3, #0]
		emer_state = PUSHED;
 8003c32:	4b10      	ldr	r3, [pc, #64]	@ (8003c74 <HAL_GPIO_EXTI_Callback+0x58>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == PROX_Pin) {
 8003c38:	88fb      	ldrh	r3, [r7, #6]
 8003c3a:	2b40      	cmp	r3, #64	@ 0x40
 8003c3c:	d104      	bne.n	8003c48 <HAL_GPIO_EXTI_Callback+0x2c>
		prox_count++;
 8003c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c78 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3301      	adds	r3, #1
 8003c44:	4a0c      	ldr	r2, [pc, #48]	@ (8003c78 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003c46:	6013      	str	r3, [r2, #0]
	}

	if (GPIO_Pin == UPPER_PHOTO_Pin) {
 8003c48:	88fb      	ldrh	r3, [r7, #6]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d102      	bne.n	8003c54 <HAL_GPIO_EXTI_Callback+0x38>
		up_photo = true;
 8003c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c7c <HAL_GPIO_EXTI_Callback+0x60>)
 8003c50:	2201      	movs	r2, #1
 8003c52:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == LOWER_PHOTO_Pin) {
 8003c54:	88fb      	ldrh	r3, [r7, #6]
 8003c56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c5a:	d102      	bne.n	8003c62 <HAL_GPIO_EXTI_Callback+0x46>
		low_photo = true;
 8003c5c:	4b08      	ldr	r3, [pc, #32]	@ (8003c80 <HAL_GPIO_EXTI_Callback+0x64>)
 8003c5e:	2201      	movs	r2, #1
 8003c60:	701a      	strb	r2, [r3, #0]
	}
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	20000114 	.word	0x20000114
 8003c74:	20000115 	.word	0x20000115
 8003c78:	20000338 	.word	0x20000338
 8003c7c:	2000033c 	.word	0x2000033c
 8003c80:	2000033d 	.word	0x2000033d

08003c84 <HAL_UART_RxCpltCallback>:

/**
 * @brief UART receive complete callback
 * @param huart UART handle
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
	// Handle UART reception if needed
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_TIM_PeriodElapsedCallback>:

/**
 * @brief Timer period elapsed callback - main control loop
 * @param htim Timer handle
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003c98:	b590      	push	{r4, r7, lr}
 8003c9a:	ed2d 8b02 	vpush	{d8}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a46      	ldr	r2, [pc, #280]	@ (8003dc0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	f040 8082 	bne.w	8003db2 <HAL_TIM_PeriodElapsedCallback+0x11a>
		// Update sensor readings
		plotter_update_sensors();
 8003cae:	f000 fc4b 	bl	8004548 <plotter_update_sensors>

		// Update encoder readings
		QEI_get_diff_count(&prismatic_encoder);
 8003cb2:	4844      	ldr	r0, [pc, #272]	@ (8003dc4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003cb4:	f7fe fa9c 	bl	80021f0 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 8003cb8:	4842      	ldr	r0, [pc, #264]	@ (8003dc4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003cba:	f7fe fb85 	bl	80023c8 <QEI_compute_data>
		QEI_get_diff_count(&revolute_encoder);
 8003cbe:	4842      	ldr	r0, [pc, #264]	@ (8003dc8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003cc0:	f7fe fa96 	bl	80021f0 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 8003cc4:	4840      	ldr	r0, [pc, #256]	@ (8003dc8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003cc6:	f7fe fb7f 	bl	80023c8 <QEI_compute_data>

		if (trajectoryActive && !prisEva.isFinised) {
 8003cca:	4b40      	ldr	r3, [pc, #256]	@ (8003dcc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d03d      	beq.n	8003d4e <HAL_TIM_PeriodElapsedCallback+0xb6>
 8003cd2:	4b3f      	ldr	r3, [pc, #252]	@ (8003dd0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003cd4:	7c1b      	ldrb	r3, [r3, #16]
 8003cd6:	f083 0301 	eor.w	r3, r3, #1
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d036      	beq.n	8003d4e <HAL_TIM_PeriodElapsedCallback+0xb6>
			Trapezoidal_Evaluated(&prisGen, &prisEva, initial_p, target_p,
 8003ce0:	4b3c      	ldr	r3, [pc, #240]	@ (8003dd4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003ce2:	ed93 8a00 	vldr	s16, [r3]
 8003ce6:	4b3c      	ldr	r3, [pc, #240]	@ (8003dd8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8003ce8:	edd3 8a00 	vldr	s17, [r3]
					ZGX45RGG_150RPM_Constant.traject_qd_max,
 8003cec:	4b3b      	ldr	r3, [pc, #236]	@ (8003ddc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003cee:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
			Trapezoidal_Evaluated(&prisGen, &prisEva, initial_p, target_p,
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	f7fc fea5 	bl	8000a44 <__aeabi_d2f>
 8003cfa:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8003cfc:	4b37      	ldr	r3, [pc, #220]	@ (8003ddc <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003cfe:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
			Trapezoidal_Evaluated(&prisGen, &prisEva, initial_p, target_p,
 8003d02:	4610      	mov	r0, r2
 8003d04:	4619      	mov	r1, r3
 8003d06:	f7fc fe9d 	bl	8000a44 <__aeabi_d2f>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	ee01 3a90 	vmov	s3, r3
 8003d10:	ee01 4a10 	vmov	s2, r4
 8003d14:	eef0 0a68 	vmov.f32	s1, s17
 8003d18:	eeb0 0a48 	vmov.f32	s0, s16
 8003d1c:	492c      	ldr	r1, [pc, #176]	@ (8003dd0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003d1e:	4830      	ldr	r0, [pc, #192]	@ (8003de0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003d20:	f7fe fd38 	bl	8002794 <Trapezoidal_Evaluated>

			current_position = prisEva.setposition;
 8003d24:	4b2a      	ldr	r3, [pc, #168]	@ (8003dd0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a2e      	ldr	r2, [pc, #184]	@ (8003de4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003d2a:	6013      	str	r3, [r2, #0]
			current_velocity = prisEva.setvelocity;
 8003d2c:	4b28      	ldr	r3, [pc, #160]	@ (8003dd0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	4a2d      	ldr	r2, [pc, #180]	@ (8003de8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003d32:	6013      	str	r3, [r2, #0]

			control_motor_revolute(current_position, current_velocity);
 8003d34:	4b2b      	ldr	r3, [pc, #172]	@ (8003de4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003d36:	edd3 7a00 	vldr	s15, [r3]
 8003d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8003de8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003d3c:	ed93 7a00 	vldr	s14, [r3]
 8003d40:	eef0 0a47 	vmov.f32	s1, s14
 8003d44:	eeb0 0a67 	vmov.f32	s0, s15
 8003d48:	f7ff fe88 	bl	8003a5c <control_motor_revolute>

//		rv = SIGNAL_generate(&sine_sg_revolute, 0.001);
//		rp += rv * 0.001;
//		control_motor_revolute(rp, rv);
	}
}
 8003d4c:	e031      	b.n	8003db2 <HAL_TIM_PeriodElapsedCallback+0x11a>
			trajectoryActive = false;
 8003d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8003dcc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	701a      	strb	r2, [r3, #0]
		    revolute_axis.pos_error = 0.0f;
 8003d54:	4b25      	ldr	r3, [pc, #148]	@ (8003dec <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	615a      	str	r2, [r3, #20]
		    revolute_axis.vel_error = 0.0f;
 8003d5c:	4b23      	ldr	r3, [pc, #140]	@ (8003dec <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	619a      	str	r2, [r3, #24]
		    revolute_axis.command_vel = 0.0f;
 8003d64:	4b21      	ldr	r3, [pc, #132]	@ (8003dec <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	629a      	str	r2, [r3, #40]	@ 0x28
		    revolute_axis.command_pos = 0.0f;
 8003d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8003dec <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	625a      	str	r2, [r3, #36]	@ 0x24
		    revolute_axis.input_voltage = 0.0f;
 8003d74:	4b1d      	ldr	r3, [pc, #116]	@ (8003dec <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	621a      	str	r2, [r3, #32]
			revolute_axis.kalman_velocity = SteadyStateKalmanFilter(&revolute_kalman,
 8003d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dec <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003d7e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003d82:	4b11      	ldr	r3, [pc, #68]	@ (8003dc8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003d84:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8003d88:	eef0 0a47 	vmov.f32	s1, s14
 8003d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d90:	4817      	ldr	r0, [pc, #92]	@ (8003df0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003d92:	f7ff fa59 	bl	8003248 <SteadyStateKalmanFilter>
 8003d96:	eef0 7a40 	vmov.f32	s15, s0
 8003d9a:	4b14      	ldr	r3, [pc, #80]	@ (8003dec <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003d9c:	edc3 7a07 	vstr	s15, [r3, #28]
			control_motor_revolute(current_position, 0);
 8003da0:	4b10      	ldr	r3, [pc, #64]	@ (8003de4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003da2:	edd3 7a00 	vldr	s15, [r3]
 8003da6:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8003df4 <HAL_TIM_PeriodElapsedCallback+0x15c>
 8003daa:	eeb0 0a67 	vmov.f32	s0, s15
 8003dae:	f7ff fe55 	bl	8003a5c <control_motor_revolute>
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	ecbd 8b02 	vpop	{d8}
 8003dbc:	bd90      	pop	{r4, r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	200019dc 	.word	0x200019dc
 8003dc4:	20000418 	.word	0x20000418
 8003dc8:	20000474 	.word	0x20000474
 8003dcc:	20000368 	.word	0x20000368
 8003dd0:	20000354 	.word	0x20000354
 8003dd4:	2000036c 	.word	0x2000036c
 8003dd8:	20000370 	.word	0x20000370
 8003ddc:	20000000 	.word	0x20000000
 8003de0:	20000340 	.word	0x20000340
 8003de4:	20000374 	.word	0x20000374
 8003de8:	20000378 	.word	0x20000378
 8003dec:	200002f4 	.word	0x200002f4
 8003df0:	2000151c 	.word	0x2000151c
 8003df4:	00000000 	.word	0x00000000

08003df8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003dfc:	b672      	cpsid	i
}
 8003dfe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003e00:	bf00      	nop
 8003e02:	e7fd      	b.n	8003e00 <Error_Handler+0x8>
 8003e04:	0000      	movs	r0, r0
	...

08003e08 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 8003e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e0c:	ed2d 8b02 	vpush	{d8}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = 500;
 8003e14:	49c4      	ldr	r1, [pc, #784]	@ (8004128 <plotter_begin+0x320>)
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	4bc4      	ldr	r3, [pc, #784]	@ (800412c <plotter_begin+0x324>)
 8003e1c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 2;
 8003e20:	4bc1      	ldr	r3, [pc, #772]	@ (8004128 <plotter_begin+0x320>)
 8003e22:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	f7fc f9fb 	bl	8000224 <__adddf3>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	49bd      	ldr	r1, [pc, #756]	@ (8004128 <plotter_begin+0x320>)
 8003e34:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_400RPM_Constant.traject_sd_max = 500;
 8003e38:	49bb      	ldr	r1, [pc, #748]	@ (8004128 <plotter_begin+0x320>)
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	4bbb      	ldr	r3, [pc, #748]	@ (800412c <plotter_begin+0x324>)
 8003e40:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	ZGX45RGG_400RPM_Constant.traject_sdd_max = ZGX45RGG_400RPM_Constant.sdd_max;
 8003e44:	4bb8      	ldr	r3, [pc, #736]	@ (8004128 <plotter_begin+0x320>)
 8003e46:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8003e4a:	49b7      	ldr	r1, [pc, #732]	@ (8004128 <plotter_begin+0x320>)
 8003e4c:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8003e50:	4bb7      	ldr	r3, [pc, #732]	@ (8004130 <plotter_begin+0x328>)
 8003e52:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* (24.0 / 36.0) - 2.0;
 8003e56:	a3b0      	add	r3, pc, #704	@ (adr r3, 8004118 <plotter_begin+0x310>)
 8003e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5c:	f7fc fb98 	bl	8000590 <__aeabi_dmul>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4610      	mov	r0, r2
 8003e66:	4619      	mov	r1, r3
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003e70:	f7fc f9d6 	bl	8000220 <__aeabi_dsub>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8003e78:	49ad      	ldr	r1, [pc, #692]	@ (8004130 <plotter_begin+0x328>)
 8003e7a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	ZGX45RGG_150RPM_Constant.qdd_max = ZGX45RGG_150RPM_Constant.qd_max * 0.4;
 8003e7e:	4bac      	ldr	r3, [pc, #688]	@ (8004130 <plotter_begin+0x328>)
 8003e80:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8003e84:	a3a6      	add	r3, pc, #664	@ (adr r3, 8004120 <plotter_begin+0x318>)
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	f7fc fb81 	bl	8000590 <__aeabi_dmul>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	49a7      	ldr	r1, [pc, #668]	@ (8004130 <plotter_begin+0x328>)
 8003e94:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	ZGX45RGG_150RPM_Constant.traject_qd_max = ZGX45RGG_150RPM_Constant.qd_max;
 8003e98:	4ba5      	ldr	r3, [pc, #660]	@ (8004130 <plotter_begin+0x328>)
 8003e9a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003e9e:	49a4      	ldr	r1, [pc, #656]	@ (8004130 <plotter_begin+0x328>)
 8003ea0:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	ZGX45RGG_150RPM_Constant.traject_qdd_max = ZGX45RGG_150RPM_Constant.qdd_max;
 8003ea4:	4ba2      	ldr	r3, [pc, #648]	@ (8004130 <plotter_begin+0x328>)
 8003ea6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8003eaa:	49a1      	ldr	r1, [pc, #644]	@ (8004130 <plotter_begin+0x328>)
 8003eac:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	48a0      	ldr	r0, [pc, #640]	@ (8004134 <plotter_begin+0x32c>)
 8003eb4:	f000 fbdc 	bl	8004670 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8003eb8:	eddf 2a9f 	vldr	s5, [pc, #636]	@ 8004138 <plotter_begin+0x330>
 8003ebc:	ed9f 2a9f 	vldr	s4, [pc, #636]	@ 800413c <plotter_begin+0x334>
 8003ec0:	eddf 1a9f 	vldr	s3, [pc, #636]	@ 8004140 <plotter_begin+0x338>
 8003ec4:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 8004140 <plotter_begin+0x338>
 8003ec8:	eddf 0a9e 	vldr	s1, [pc, #632]	@ 8004144 <plotter_begin+0x33c>
 8003ecc:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 8004138 <plotter_begin+0x330>
 8003ed0:	4898      	ldr	r0, [pc, #608]	@ (8004134 <plotter_begin+0x32c>)
 8003ed2:	f000 fc2b 	bl	800472c <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 8003ed6:	2102      	movs	r1, #2
 8003ed8:	489b      	ldr	r0, [pc, #620]	@ (8004148 <plotter_begin+0x340>)
 8003eda:	f000 fbc9 	bl	8004670 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8003ede:	ed9f 3a96 	vldr	s6, [pc, #600]	@ 8004138 <plotter_begin+0x330>
 8003ee2:	eddf 2a96 	vldr	s5, [pc, #600]	@ 800413c <plotter_begin+0x334>
 8003ee6:	ed9f 2a96 	vldr	s4, [pc, #600]	@ 8004140 <plotter_begin+0x338>
 8003eea:	eddf 1a95 	vldr	s3, [pc, #596]	@ 8004140 <plotter_begin+0x338>
 8003eee:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8003ef2:	eddf 0a94 	vldr	s1, [pc, #592]	@ 8004144 <plotter_begin+0x33c>
 8003ef6:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 8004138 <plotter_begin+0x330>
 8003efa:	4893      	ldr	r0, [pc, #588]	@ (8004148 <plotter_begin+0x340>)
 8003efc:	f000 fc41 	bl	8004782 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8003f00:	2100      	movs	r1, #0
 8003f02:	4892      	ldr	r0, [pc, #584]	@ (800414c <plotter_begin+0x344>)
 8003f04:	f000 fbb4 	bl	8004670 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 8003f08:	eddf 2a91 	vldr	s5, [pc, #580]	@ 8004150 <plotter_begin+0x348>
 8003f0c:	ed9f 2a91 	vldr	s4, [pc, #580]	@ 8004154 <plotter_begin+0x34c>
 8003f10:	eddf 1a8b 	vldr	s3, [pc, #556]	@ 8004140 <plotter_begin+0x338>
 8003f14:	ed9f 1a8a 	vldr	s2, [pc, #552]	@ 8004140 <plotter_begin+0x338>
 8003f18:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 8004144 <plotter_begin+0x33c>
 8003f1c:	ed9f 0a8c 	vldr	s0, [pc, #560]	@ 8004150 <plotter_begin+0x348>
 8003f20:	488a      	ldr	r0, [pc, #552]	@ (800414c <plotter_begin+0x344>)
 8003f22:	f000 fc03 	bl	800472c <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 8003f26:	2102      	movs	r1, #2
 8003f28:	488b      	ldr	r0, [pc, #556]	@ (8004158 <plotter_begin+0x350>)
 8003f2a:	f000 fba1 	bl	8004670 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 8003f2e:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 8003f32:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 8003f36:	ed9f 2a82 	vldr	s4, [pc, #520]	@ 8004140 <plotter_begin+0x338>
 8003f3a:	eddf 1a81 	vldr	s3, [pc, #516]	@ 8004140 <plotter_begin+0x338>
 8003f3e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8003f42:	eddf 0a80 	vldr	s1, [pc, #512]	@ 8004144 <plotter_begin+0x33c>
 8003f46:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8003f4a:	4883      	ldr	r0, [pc, #524]	@ (8004158 <plotter_begin+0x350>)
 8003f4c:	f000 fc19 	bl	8004782 <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 8003f50:	2100      	movs	r1, #0
 8003f52:	4882      	ldr	r0, [pc, #520]	@ (800415c <plotter_begin+0x354>)
 8003f54:	f000 fb8c 	bl	8004670 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8003f58:	4b73      	ldr	r3, [pc, #460]	@ (8004128 <plotter_begin+0x320>)
 8003f5a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003f5e:	4610      	mov	r0, r2
 8003f60:	4619      	mov	r1, r3
 8003f62:	f7fc fd6f 	bl	8000a44 <__aeabi_d2f>
 8003f66:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 8003f68:	4b6f      	ldr	r3, [pc, #444]	@ (8004128 <plotter_begin+0x320>)
 8003f6a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003f6e:	4610      	mov	r0, r2
 8003f70:	4619      	mov	r1, r3
 8003f72:	f7fc fd67 	bl	8000a44 <__aeabi_d2f>
 8003f76:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8003f78:	ee07 3a90 	vmov	s15, r3
 8003f7c:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 8003f80:	4b69      	ldr	r3, [pc, #420]	@ (8004128 <plotter_begin+0x320>)
 8003f82:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8003f86:	4610      	mov	r0, r2
 8003f88:	4619      	mov	r1, r3
 8003f8a:	f7fc fd5b 	bl	8000a44 <__aeabi_d2f>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	ee02 3a90 	vmov	s5, r3
 8003f94:	eeb0 2a48 	vmov.f32	s4, s16
 8003f98:	eddf 1a69 	vldr	s3, [pc, #420]	@ 8004140 <plotter_begin+0x338>
 8003f9c:	ed9f 1a68 	vldr	s2, [pc, #416]	@ 8004140 <plotter_begin+0x338>
 8003fa0:	eddf 0a68 	vldr	s1, [pc, #416]	@ 8004144 <plotter_begin+0x33c>
 8003fa4:	ee00 4a10 	vmov	s0, r4
 8003fa8:	486c      	ldr	r0, [pc, #432]	@ (800415c <plotter_begin+0x354>)
 8003faa:	f000 fbbf 	bl	800472c <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 8003fae:	2102      	movs	r1, #2
 8003fb0:	486b      	ldr	r0, [pc, #428]	@ (8004160 <plotter_begin+0x358>)
 8003fb2:	f000 fb5d 	bl	8004670 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8003fb6:	4b5c      	ldr	r3, [pc, #368]	@ (8004128 <plotter_begin+0x320>)
 8003fb8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	f7fc fd40 	bl	8000a44 <__aeabi_d2f>
 8003fc4:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8003fc6:	4b58      	ldr	r3, [pc, #352]	@ (8004128 <plotter_begin+0x320>)
 8003fc8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003fcc:	4610      	mov	r0, r2
 8003fce:	4619      	mov	r1, r3
 8003fd0:	f7fc fd38 	bl	8000a44 <__aeabi_d2f>
 8003fd4:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8003fde:	4b52      	ldr	r3, [pc, #328]	@ (8004128 <plotter_begin+0x320>)
 8003fe0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	f7fc fd2c 	bl	8000a44 <__aeabi_d2f>
 8003fec:	4603      	mov	r3, r0
 8003fee:	ee03 3a10 	vmov	s6, r3
 8003ff2:	eef0 2a48 	vmov.f32	s5, s16
 8003ff6:	ed9f 2a52 	vldr	s4, [pc, #328]	@ 8004140 <plotter_begin+0x338>
 8003ffa:	eddf 1a51 	vldr	s3, [pc, #324]	@ 8004140 <plotter_begin+0x338>
 8003ffe:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8004002:	eddf 0a50 	vldr	s1, [pc, #320]	@ 8004144 <plotter_begin+0x33c>
 8004006:	ee00 4a10 	vmov	s0, r4
 800400a:	4855      	ldr	r0, [pc, #340]	@ (8004160 <plotter_begin+0x358>)
 800400c:	f000 fbb9 	bl	8004782 <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 8004010:	2100      	movs	r1, #0
 8004012:	4854      	ldr	r0, [pc, #336]	@ (8004164 <plotter_begin+0x35c>)
 8004014:	f000 fb2c 	bl	8004670 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8004018:	4b45      	ldr	r3, [pc, #276]	@ (8004130 <plotter_begin+0x328>)
 800401a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800401e:	4610      	mov	r0, r2
 8004020:	4619      	mov	r1, r3
 8004022:	f7fc fd0f 	bl	8000a44 <__aeabi_d2f>
 8004026:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 8004028:	4b41      	ldr	r3, [pc, #260]	@ (8004130 <plotter_begin+0x328>)
 800402a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800402e:	4610      	mov	r0, r2
 8004030:	4619      	mov	r1, r3
 8004032:	f7fc fd07 	bl	8000a44 <__aeabi_d2f>
 8004036:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8004038:	ee07 3a90 	vmov	s15, r3
 800403c:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 8004040:	4b3b      	ldr	r3, [pc, #236]	@ (8004130 <plotter_begin+0x328>)
 8004042:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8004046:	4610      	mov	r0, r2
 8004048:	4619      	mov	r1, r3
 800404a:	f7fc fcfb 	bl	8000a44 <__aeabi_d2f>
 800404e:	4603      	mov	r3, r0
 8004050:	ee02 3a90 	vmov	s5, r3
 8004054:	eeb0 2a48 	vmov.f32	s4, s16
 8004058:	eddf 1a39 	vldr	s3, [pc, #228]	@ 8004140 <plotter_begin+0x338>
 800405c:	ed9f 1a38 	vldr	s2, [pc, #224]	@ 8004140 <plotter_begin+0x338>
 8004060:	eddf 0a38 	vldr	s1, [pc, #224]	@ 8004144 <plotter_begin+0x33c>
 8004064:	ee00 4a10 	vmov	s0, r4
 8004068:	483e      	ldr	r0, [pc, #248]	@ (8004164 <plotter_begin+0x35c>)
 800406a:	f000 fb5f 	bl	800472c <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 800406e:	2102      	movs	r1, #2
 8004070:	483d      	ldr	r0, [pc, #244]	@ (8004168 <plotter_begin+0x360>)
 8004072:	f000 fafd 	bl	8004670 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8004076:	4b2e      	ldr	r3, [pc, #184]	@ (8004130 <plotter_begin+0x328>)
 8004078:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800407c:	4610      	mov	r0, r2
 800407e:	4619      	mov	r1, r3
 8004080:	f7fc fce0 	bl	8000a44 <__aeabi_d2f>
 8004084:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8004086:	4b2a      	ldr	r3, [pc, #168]	@ (8004130 <plotter_begin+0x328>)
 8004088:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800408c:	4610      	mov	r0, r2
 800408e:	4619      	mov	r1, r3
 8004090:	f7fc fcd8 	bl	8000a44 <__aeabi_d2f>
 8004094:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8004096:	ee07 3a90 	vmov	s15, r3
 800409a:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 800409e:	4b24      	ldr	r3, [pc, #144]	@ (8004130 <plotter_begin+0x328>)
 80040a0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80040a4:	4610      	mov	r0, r2
 80040a6:	4619      	mov	r1, r3
 80040a8:	f7fc fccc 	bl	8000a44 <__aeabi_d2f>
 80040ac:	4603      	mov	r3, r0
 80040ae:	ee03 3a10 	vmov	s6, r3
 80040b2:	eef0 2a48 	vmov.f32	s5, s16
 80040b6:	ed9f 2a22 	vldr	s4, [pc, #136]	@ 8004140 <plotter_begin+0x338>
 80040ba:	eddf 1a21 	vldr	s3, [pc, #132]	@ 8004140 <plotter_begin+0x338>
 80040be:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80040c2:	eddf 0a20 	vldr	s1, [pc, #128]	@ 8004144 <plotter_begin+0x33c>
 80040c6:	ee00 4a10 	vmov	s0, r4
 80040ca:	4827      	ldr	r0, [pc, #156]	@ (8004168 <plotter_begin+0x360>)
 80040cc:	f000 fb59 	bl	8004782 <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 80040d0:	4826      	ldr	r0, [pc, #152]	@ (800416c <plotter_begin+0x364>)
 80040d2:	f7fe fe61 	bl	8002d98 <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 80040d6:	4b26      	ldr	r3, [pc, #152]	@ (8004170 <plotter_begin+0x368>)
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fc fa00 	bl	80004e0 <__aeabi_f2d>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	f7fc f89e 	bl	8000224 <__adddf3>
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	4610      	mov	r0, r2
 80040ee:	4619      	mov	r1, r3
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	4b1f      	ldr	r3, [pc, #124]	@ (8004174 <plotter_begin+0x36c>)
 80040f6:	f7fc fa4b 	bl	8000590 <__aeabi_dmul>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 80040fe:	4610      	mov	r0, r2
 8004100:	4619      	mov	r1, r3
 8004102:	f7fc fc9f 	bl	8000a44 <__aeabi_d2f>
 8004106:	4603      	mov	r3, r0
 8004108:	ee00 3a90 	vmov	s1, r3
 800410c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004110:	e032      	b.n	8004178 <plotter_begin+0x370>
 8004112:	bf00      	nop
 8004114:	f3af 8000 	nop.w
 8004118:	55555555 	.word	0x55555555
 800411c:	3fe55555 	.word	0x3fe55555
 8004120:	9999999a 	.word	0x9999999a
 8004124:	3fd99999 	.word	0x3fd99999
 8004128:	20000080 	.word	0x20000080
 800412c:	407f4000 	.word	0x407f4000
 8004130:	20000000 	.word	0x20000000
 8004134:	200005c4 	.word	0x200005c4
 8004138:	477fff00 	.word	0x477fff00
 800413c:	c77fff00 	.word	0xc77fff00
 8004140:	00000000 	.word	0x00000000
 8004144:	3dcccccd 	.word	0x3dcccccd
 8004148:	20000608 	.word	0x20000608
 800414c:	2000064c 	.word	0x2000064c
 8004150:	43480000 	.word	0x43480000
 8004154:	c3480000 	.word	0xc3480000
 8004158:	20000690 	.word	0x20000690
 800415c:	200006d4 	.word	0x200006d4
 8004160:	20000718 	.word	0x20000718
 8004164:	2000075c 	.word	0x2000075c
 8004168:	200007a0 	.word	0x200007a0
 800416c:	200007e4 	.word	0x200007e4
 8004170:	20000100 	.word	0x20000100
 8004174:	408f4000 	.word	0x408f4000
 8004178:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800417c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004180:	499f      	ldr	r1, [pc, #636]	@ (8004400 <plotter_begin+0x5f8>)
 8004182:	48a0      	ldr	r0, [pc, #640]	@ (8004404 <plotter_begin+0x5fc>)
 8004184:	f7fd ffc2 	bl	800210c <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 8004188:	eddf 0a9f 	vldr	s1, [pc, #636]	@ 8004408 <plotter_begin+0x600>
 800418c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004190:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004194:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004198:	499c      	ldr	r1, [pc, #624]	@ (800440c <plotter_begin+0x604>)
 800419a:	489d      	ldr	r0, [pc, #628]	@ (8004410 <plotter_begin+0x608>)
 800419c:	f7fd ffb6 	bl	800210c <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 80041a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80041aa:	2204      	movs	r2, #4
 80041ac:	4999      	ldr	r1, [pc, #612]	@ (8004414 <plotter_begin+0x60c>)
 80041ae:	489a      	ldr	r0, [pc, #616]	@ (8004418 <plotter_begin+0x610>)
 80041b0:	f7fd f83c 	bl	800122c <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 80041b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	4b98      	ldr	r3, [pc, #608]	@ (800441c <plotter_begin+0x614>)
 80041bc:	2200      	movs	r2, #0
 80041be:	4995      	ldr	r1, [pc, #596]	@ (8004414 <plotter_begin+0x60c>)
 80041c0:	4897      	ldr	r0, [pc, #604]	@ (8004420 <plotter_begin+0x618>)
 80041c2:	f7fd f833 	bl	800122c <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 80041c6:	220c      	movs	r2, #12
 80041c8:	4996      	ldr	r1, [pc, #600]	@ (8004424 <plotter_begin+0x61c>)
 80041ca:	4897      	ldr	r0, [pc, #604]	@ (8004428 <plotter_begin+0x620>)
 80041cc:	f7fd fe76 	bl	8001ebc <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 80041d0:	eddf 0a8d 	vldr	s1, [pc, #564]	@ 8004408 <plotter_begin+0x600>
 80041d4:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 800442c <plotter_begin+0x624>
 80041d8:	488f      	ldr	r0, [pc, #572]	@ (8004418 <plotter_begin+0x610>)
 80041da:	f7fd f84b 	bl	8001274 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 80041de:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 8004408 <plotter_begin+0x600>
 80041e2:	ed9f 0a92 	vldr	s0, [pc, #584]	@ 800442c <plotter_begin+0x624>
 80041e6:	488e      	ldr	r0, [pc, #568]	@ (8004420 <plotter_begin+0x618>)
 80041e8:	f7fd f844 	bl	8001274 <MDXX_set_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
			ZGX45RGG_400RPM_Constant.sd_max);
 80041ec:	4b90      	ldr	r3, [pc, #576]	@ (8004430 <plotter_begin+0x628>)
 80041ee:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
 80041f2:	4610      	mov	r0, r2
 80041f4:	4619      	mov	r1, r3
 80041f6:	f7fc fc25 	bl	8000a44 <__aeabi_d2f>
 80041fa:	4603      	mov	r3, r0
 80041fc:	ee01 3a90 	vmov	s3, r3
 8004200:	ed9f 1a8c 	vldr	s2, [pc, #560]	@ 8004434 <plotter_begin+0x62c>
 8004204:	eddf 0a8c 	vldr	s1, [pc, #560]	@ 8004438 <plotter_begin+0x630>
 8004208:	ed9f 0a8c 	vldr	s0, [pc, #560]	@ 800443c <plotter_begin+0x634>
 800420c:	488c      	ldr	r0, [pc, #560]	@ (8004440 <plotter_begin+0x638>)
 800420e:	f7fc ff48 	bl	80010a2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 8004212:	4b87      	ldr	r3, [pc, #540]	@ (8004430 <plotter_begin+0x628>)
 8004214:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
 8004218:	4610      	mov	r0, r2
 800421a:	4619      	mov	r1, r3
 800421c:	f7fc fc12 	bl	8000a44 <__aeabi_d2f>
 8004220:	4603      	mov	r3, r0
 8004222:	ee01 3a90 	vmov	s3, r3
 8004226:	ed9f 1a78 	vldr	s2, [pc, #480]	@ 8004408 <plotter_begin+0x600>
 800422a:	eddf 0a86 	vldr	s1, [pc, #536]	@ 8004444 <plotter_begin+0x63c>
 800422e:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 8004448 <plotter_begin+0x640>
 8004232:	4886      	ldr	r0, [pc, #536]	@ (800444c <plotter_begin+0x644>)
 8004234:	f7fc ff35 	bl	80010a2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 1, 1e-10, 2,
			ZGX45RGG_150RPM_Constant.qd_max);
 8004238:	4b85      	ldr	r3, [pc, #532]	@ (8004450 <plotter_begin+0x648>)
 800423a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 1, 1e-10, 2,
 800423e:	4610      	mov	r0, r2
 8004240:	4619      	mov	r1, r3
 8004242:	f7fc fbff 	bl	8000a44 <__aeabi_d2f>
 8004246:	4603      	mov	r3, r0
 8004248:	ee01 3a90 	vmov	s3, r3
 800424c:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 8004250:	eddf 0a79 	vldr	s1, [pc, #484]	@ 8004438 <plotter_begin+0x630>
 8004254:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004258:	487e      	ldr	r0, [pc, #504]	@ (8004454 <plotter_begin+0x64c>)
 800425a:	f7fc ff22 	bl	80010a2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 7500, 500, 0, //8000
			ZGX45RGG_150RPM_Constant.U_max);
 800425e:	4b7c      	ldr	r3, [pc, #496]	@ (8004450 <plotter_begin+0x648>)
 8004260:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 7500, 500, 0, //8000
 8004264:	4610      	mov	r0, r2
 8004266:	4619      	mov	r1, r3
 8004268:	f7fc fbec 	bl	8000a44 <__aeabi_d2f>
 800426c:	4603      	mov	r3, r0
 800426e:	ee01 3a90 	vmov	s3, r3
 8004272:	ed9f 1a65 	vldr	s2, [pc, #404]	@ 8004408 <plotter_begin+0x600>
 8004276:	eddf 0a78 	vldr	s1, [pc, #480]	@ 8004458 <plotter_begin+0x650>
 800427a:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 800445c <plotter_begin+0x654>
 800427e:	4878      	ldr	r0, [pc, #480]	@ (8004460 <plotter_begin+0x658>)
 8004280:	f7fc ff0f 	bl	80010a2 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8004284:	4972      	ldr	r1, [pc, #456]	@ (8004450 <plotter_begin+0x648>)
 8004286:	4877      	ldr	r0, [pc, #476]	@ (8004464 <plotter_begin+0x65c>)
 8004288:	f7fd f8ce 	bl	8001428 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 800428c:	4968      	ldr	r1, [pc, #416]	@ (8004430 <plotter_begin+0x628>)
 800428e:	4876      	ldr	r0, [pc, #472]	@ (8004468 <plotter_begin+0x660>)
 8004290:	f7fd f8ea 	bl	8001468 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8004294:	4a75      	ldr	r2, [pc, #468]	@ (800446c <plotter_begin+0x664>)
 8004296:	496e      	ldr	r1, [pc, #440]	@ (8004450 <plotter_begin+0x648>)
 8004298:	4875      	ldr	r0, [pc, #468]	@ (8004470 <plotter_begin+0x668>)
 800429a:	f7fd f8d3 	bl	8001444 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 800429e:	4a73      	ldr	r2, [pc, #460]	@ (800446c <plotter_begin+0x664>)
 80042a0:	4963      	ldr	r1, [pc, #396]	@ (8004430 <plotter_begin+0x628>)
 80042a2:	4874      	ldr	r0, [pc, #464]	@ (8004474 <plotter_begin+0x66c>)
 80042a4:	f7fd f8ee 	bl	8001484 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 80042a8:	2302      	movs	r3, #2
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	eddf 0a72 	vldr	s1, [pc, #456]	@ 8004478 <plotter_begin+0x670>
 80042b0:	ed9f 0a72 	vldr	s0, [pc, #456]	@ 800447c <plotter_begin+0x674>
 80042b4:	2364      	movs	r3, #100	@ 0x64
 80042b6:	4a72      	ldr	r2, [pc, #456]	@ (8004480 <plotter_begin+0x678>)
 80042b8:	4972      	ldr	r1, [pc, #456]	@ (8004484 <plotter_begin+0x67c>)
 80042ba:	4873      	ldr	r0, [pc, #460]	@ (8004488 <plotter_begin+0x680>)
 80042bc:	f7fc fda8 	bl	8000e10 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 80042c0:	2105      	movs	r1, #5
 80042c2:	ed9f 0a72 	vldr	s0, [pc, #456]	@ 800448c <plotter_begin+0x684>
 80042c6:	4870      	ldr	r0, [pc, #448]	@ (8004488 <plotter_begin+0x680>)
 80042c8:	f7fc fe54 	bl	8000f74 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 80042cc:	486e      	ldr	r0, [pc, #440]	@ (8004488 <plotter_begin+0x680>)
 80042ce:	f7fc fdf7 	bl	8000ec0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80042d2:	eddf 0a6f 	vldr	s1, [pc, #444]	@ 8004490 <plotter_begin+0x688>
 80042d6:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80042da:	211f      	movs	r1, #31
 80042dc:	486d      	ldr	r0, [pc, #436]	@ (8004494 <plotter_begin+0x68c>)
 80042de:	f7fd f8e3 	bl	80014a8 <FIR_init>
	FIR_init(&prismatic_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80042e2:	eddf 0a6b 	vldr	s1, [pc, #428]	@ 8004490 <plotter_begin+0x688>
 80042e6:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80042ea:	211f      	movs	r1, #31
 80042ec:	486a      	ldr	r0, [pc, #424]	@ (8004498 <plotter_begin+0x690>)
 80042ee:	f7fd f8db 	bl	80014a8 <FIR_init>
	FIR_init(&revolute_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80042f2:	eddf 0a67 	vldr	s1, [pc, #412]	@ 8004490 <plotter_begin+0x688>
 80042f6:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80042fa:	211f      	movs	r1, #31
 80042fc:	4867      	ldr	r0, [pc, #412]	@ (800449c <plotter_begin+0x694>)
 80042fe:	f7fd f8d3 	bl	80014a8 <FIR_init>
	FIR_init(&revolute_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8004302:	eddf 0a63 	vldr	s1, [pc, #396]	@ 8004490 <plotter_begin+0x688>
 8004306:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800430a:	211f      	movs	r1, #31
 800430c:	4864      	ldr	r0, [pc, #400]	@ (80044a0 <plotter_begin+0x698>)
 800430e:	f7fd f8cb 	bl	80014a8 <FIR_init>
//	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
//			ZGX45RGG_150RPM_Constant.B, ZGX45RGG_150RPM_Constant.Kt,
//			ZGX45RGG_150RPM_Constant.Ke, ZGX45RGG_150RPM_Constant.R,
//			ZGX45RGG_150RPM_Constant.L*10.0, 1.0, 0.05);

	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,     // Armature resistance
 8004312:	4b4f      	ldr	r3, [pc, #316]	@ (8004450 <plotter_begin+0x648>)
 8004314:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004318:	4610      	mov	r0, r2
 800431a:	4619      	mov	r1, r3
 800431c:	f7fc fb92 	bl	8000a44 <__aeabi_d2f>
 8004320:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.L,     // Armature inductance
 8004322:	4b4b      	ldr	r3, [pc, #300]	@ (8004450 <plotter_begin+0x648>)
 8004324:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,     // Armature resistance
 8004328:	4610      	mov	r0, r2
 800432a:	4619      	mov	r1, r3
 800432c:	f7fc fb8a 	bl	8000a44 <__aeabi_d2f>
 8004330:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.J,       // Motor inertia
 8004332:	4b47      	ldr	r3, [pc, #284]	@ (8004450 <plotter_begin+0x648>)
 8004334:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,     // Armature resistance
 8004338:	4610      	mov	r0, r2
 800433a:	4619      	mov	r1, r3
 800433c:	f7fc fb82 	bl	8000a44 <__aeabi_d2f>
 8004340:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.B * 2.2,       // Viscous friction coefficient
 8004342:	4b43      	ldr	r3, [pc, #268]	@ (8004450 <plotter_begin+0x648>)
 8004344:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8004348:	a32b      	add	r3, pc, #172	@ (adr r3, 80043f8 <plotter_begin+0x5f0>)
 800434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434e:	f7fc f91f 	bl	8000590 <__aeabi_dmul>
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,     // Armature resistance
 8004356:	4610      	mov	r0, r2
 8004358:	4619      	mov	r1, r3
 800435a:	f7fc fb73 	bl	8000a44 <__aeabi_d2f>
 800435e:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.Ke,     // Back-EMF constant
 8004360:	4b3b      	ldr	r3, [pc, #236]	@ (8004450 <plotter_begin+0x648>)
 8004362:	e9d3 2300 	ldrd	r2, r3, [r3]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,     // Armature resistance
 8004366:	4610      	mov	r0, r2
 8004368:	4619      	mov	r1, r3
 800436a:	f7fc fb6b 	bl	8000a44 <__aeabi_d2f>
 800436e:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.Kt,     // Torque constant
 8004370:	4b37      	ldr	r3, [pc, #220]	@ (8004450 <plotter_begin+0x648>)
 8004372:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,     // Armature resistance
 8004376:	4610      	mov	r0, r2
 8004378:	4619      	mov	r1, r3
 800437a:	f7fc fb63 	bl	8000a44 <__aeabi_d2f>
 800437e:	4603      	mov	r3, r0
 8004380:	4948      	ldr	r1, [pc, #288]	@ (80044a4 <plotter_begin+0x69c>)
 8004382:	4849      	ldr	r0, [pc, #292]	@ (80044a8 <plotter_begin+0x6a0>)
 8004384:	ed9f 3a49 	vldr	s6, [pc, #292]	@ 80044ac <plotter_begin+0x6a4>
 8004388:	ee02 3a90 	vmov	s5, r3
 800438c:	ee02 9a10 	vmov	s4, r9
 8004390:	ee01 8a90 	vmov	s3, r8
 8004394:	ee01 6a10 	vmov	s2, r6
 8004398:	ee00 5a90 	vmov	s1, r5
 800439c:	ee00 4a10 	vmov	s0, r4
 80043a0:	f7fd fd24 	bl	8001dec <GenerateMotorMatrices>
			0.001,      // Sample time
			&revolute_A,     // Output discrete state matrix
			&revolute_B      // Output discrete input matrix
			);

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 80043a4:	eddf 0a42 	vldr	s1, [pc, #264]	@ 80044b0 <plotter_begin+0x6a8>
 80043a8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80043ac:	4a3d      	ldr	r2, [pc, #244]	@ (80044a4 <plotter_begin+0x69c>)
 80043ae:	493e      	ldr	r1, [pc, #248]	@ (80044a8 <plotter_begin+0x6a0>)
 80043b0:	4840      	ldr	r0, [pc, #256]	@ (80044b4 <plotter_begin+0x6ac>)
 80043b2:	f7ff f893 	bl	80034dc <Kalman_Start>
	REVOLUTE_R);
	Kalman_Start(&prismatic_kalman, prismatic_A, prismatic_B, PRISMATIC_Q,
 80043b6:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 80044b0 <plotter_begin+0x6a8>
 80043ba:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80043be:	4a3e      	ldr	r2, [pc, #248]	@ (80044b8 <plotter_begin+0x6b0>)
 80043c0:	493e      	ldr	r1, [pc, #248]	@ (80044bc <plotter_begin+0x6b4>)
 80043c2:	483f      	ldr	r0, [pc, #252]	@ (80044c0 <plotter_begin+0x6b8>)
 80043c4:	f7ff f88a 	bl	80034dc <Kalman_Start>
	PRISMATIC_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 80043c8:	23c8      	movs	r3, #200	@ 0xc8
 80043ca:	9301      	str	r3, [sp, #4]
 80043cc:	2315      	movs	r3, #21
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	4b3c      	ldr	r3, [pc, #240]	@ (80044c4 <plotter_begin+0x6bc>)
 80043d2:	4a3d      	ldr	r2, [pc, #244]	@ (80044c8 <plotter_begin+0x6c0>)
 80043d4:	493d      	ldr	r1, [pc, #244]	@ (80044cc <plotter_begin+0x6c4>)
 80043d6:	483e      	ldr	r0, [pc, #248]	@ (80044d0 <plotter_begin+0x6c8>)
 80043d8:	f7fd f9fe 	bl	80017d8 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 80043dc:	483d      	ldr	r0, [pc, #244]	@ (80044d4 <plotter_begin+0x6cc>)
 80043de:	f004 fda9 	bl	8008f34 <HAL_TIM_Base_Start_IT>

	plotter_reset();
 80043e2:	f000 f879 	bl	80044d8 <plotter_reset>
}
 80043e6:	bf00      	nop
 80043e8:	3704      	adds	r7, #4
 80043ea:	46bd      	mov	sp, r7
 80043ec:	ecbd 8b02 	vpop	{d8}
 80043f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80043f4:	f3af 8000 	nop.w
 80043f8:	9999999a 	.word	0x9999999a
 80043fc:	40019999 	.word	0x40019999
 8004400:	20001c40 	.word	0x20001c40
 8004404:	20000418 	.word	0x20000418
 8004408:	00000000 	.word	0x00000000
 800440c:	20001b74 	.word	0x20001b74
 8004410:	20000474 	.word	0x20000474
 8004414:	20001d0c 	.word	0x20001d0c
 8004418:	20000380 	.word	0x20000380
 800441c:	48000800 	.word	0x48000800
 8004420:	200003cc 	.word	0x200003cc
 8004424:	20001910 	.word	0x20001910
 8004428:	20000588 	.word	0x20000588
 800442c:	44fa0000 	.word	0x44fa0000
 8004430:	20000080 	.word	0x20000080
 8004434:	42f00000 	.word	0x42f00000
 8004438:	2edbe6ff 	.word	0x2edbe6ff
 800443c:	42960000 	.word	0x42960000
 8004440:	200004d0 	.word	0x200004d0
 8004444:	3727c5ac 	.word	0x3727c5ac
 8004448:	43160000 	.word	0x43160000
 800444c:	200004f8 	.word	0x200004f8
 8004450:	20000000 	.word	0x20000000
 8004454:	20000520 	.word	0x20000520
 8004458:	43fa0000 	.word	0x43fa0000
 800445c:	45ea6000 	.word	0x45ea6000
 8004460:	20000548 	.word	0x20000548
 8004464:	2000057c 	.word	0x2000057c
 8004468:	20000570 	.word	0x20000570
 800446c:	20000100 	.word	0x20000100
 8004470:	20000580 	.word	0x20000580
 8004474:	20000574 	.word	0x20000574
 8004478:	457ff000 	.word	0x457ff000
 800447c:	40533333 	.word	0x40533333
 8004480:	20000a6c 	.word	0x20000a6c
 8004484:	200001e4 	.word	0x200001e4
 8004488:	200005a0 	.word	0x200005a0
 800448c:	45000000 	.word	0x45000000
 8004490:	447a0000 	.word	0x447a0000
 8004494:	20000a48 	.word	0x20000a48
 8004498:	20000a3c 	.word	0x20000a3c
 800449c:	20000a60 	.word	0x20000a60
 80044a0:	20000a54 	.word	0x20000a54
 80044a4:	200018dc 	.word	0x200018dc
 80044a8:	2000189c 	.word	0x2000189c
 80044ac:	3a83126f 	.word	0x3a83126f
 80044b0:	3d4ccccd 	.word	0x3d4ccccd
 80044b4:	2000151c 	.word	0x2000151c
 80044b8:	20000158 	.word	0x20000158
 80044bc:	20000118 	.word	0x20000118
 80044c0:	2000119c 	.word	0x2000119c
 80044c4:	2000100c 	.word	0x2000100c
 80044c8:	20001dd8 	.word	0x20001dd8
 80044cc:	20001f70 	.word	0x20001f70
 80044d0:	20000b34 	.word	0x20000b34
 80044d4:	200019dc 	.word	0x200019dc

080044d8 <plotter_reset>:

void plotter_reset() {
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
	prismatic_encoder.diff_counts = 0;
 80044dc:	4b18      	ldr	r3, [pc, #96]	@ (8004540 <plotter_reset+0x68>)
 80044de:	2200      	movs	r2, #0
 80044e0:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_encoder.rpm = 0;
 80044e2:	4b17      	ldr	r3, [pc, #92]	@ (8004540 <plotter_reset+0x68>)
 80044e4:	f04f 0200 	mov.w	r2, #0
 80044e8:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_encoder.pulses = 0;
 80044ea:	4b15      	ldr	r3, [pc, #84]	@ (8004540 <plotter_reset+0x68>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	639a      	str	r2, [r3, #56]	@ 0x38
	prismatic_encoder.revs = 0;
 80044f0:	4b13      	ldr	r3, [pc, #76]	@ (8004540 <plotter_reset+0x68>)
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	63da      	str	r2, [r3, #60]	@ 0x3c
	prismatic_encoder.rads = 0;
 80044f8:	4b11      	ldr	r3, [pc, #68]	@ (8004540 <plotter_reset+0x68>)
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	641a      	str	r2, [r3, #64]	@ 0x40
	prismatic_encoder.mm = 0;
 8004500:	4b0f      	ldr	r3, [pc, #60]	@ (8004540 <plotter_reset+0x68>)
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	649a      	str	r2, [r3, #72]	@ 0x48

	revolute_encoder.diff_counts = 0;
 8004508:	4b0e      	ldr	r3, [pc, #56]	@ (8004544 <plotter_reset+0x6c>)
 800450a:	2200      	movs	r2, #0
 800450c:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_encoder.rpm = 0;
 800450e:	4b0d      	ldr	r3, [pc, #52]	@ (8004544 <plotter_reset+0x6c>)
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_encoder.pulses = 0;
 8004516:	4b0b      	ldr	r3, [pc, #44]	@ (8004544 <plotter_reset+0x6c>)
 8004518:	2200      	movs	r2, #0
 800451a:	639a      	str	r2, [r3, #56]	@ 0x38
	revolute_encoder.revs = 0;
 800451c:	4b09      	ldr	r3, [pc, #36]	@ (8004544 <plotter_reset+0x6c>)
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	63da      	str	r2, [r3, #60]	@ 0x3c
	revolute_encoder.rads = 0;
 8004524:	4b07      	ldr	r3, [pc, #28]	@ (8004544 <plotter_reset+0x6c>)
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	641a      	str	r2, [r3, #64]	@ 0x40
	revolute_encoder.mm = 0;
 800452c:	4b05      	ldr	r3, [pc, #20]	@ (8004544 <plotter_reset+0x6c>)
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8004534:	bf00      	nop
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	20000418 	.word	0x20000418
 8004544:	20000474 	.word	0x20000474

08004548 <plotter_update_sensors>:

void plotter_update_sensors() {
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50,
 800454c:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8004638 <plotter_update_sensors+0xf0>
 8004550:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 800463c <plotter_update_sensors+0xf4>
 8004554:	2106      	movs	r1, #6
 8004556:	483a      	ldr	r0, [pc, #232]	@ (8004640 <plotter_update_sensors+0xf8>)
 8004558:	f7fc fd36 	bl	8000fc8 <ADC_DMA_GetJoystickValue>
 800455c:	eef0 7a40 	vmov.f32	s15, s0
 8004560:	4b38      	ldr	r3, [pc, #224]	@ (8004644 <plotter_update_sensors+0xfc>)
 8004562:	edc3 7a00 	vstr	s15, [r3]
			50);
	joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50,
 8004566:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8004638 <plotter_update_sensors+0xf0>
 800456a:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 800463c <plotter_update_sensors+0xf4>
 800456e:	2107      	movs	r1, #7
 8004570:	4833      	ldr	r0, [pc, #204]	@ (8004640 <plotter_update_sensors+0xf8>)
 8004572:	f7fc fd29 	bl	8000fc8 <ADC_DMA_GetJoystickValue>
 8004576:	eef0 7a40 	vmov.f32	s15, s0
 800457a:	4b33      	ldr	r3, [pc, #204]	@ (8004648 <plotter_update_sensors+0x100>)
 800457c:	edc3 7a00 	vstr	s15, [r3]
			50);

	b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 8004580:	2180      	movs	r1, #128	@ 0x80
 8004582:	4832      	ldr	r0, [pc, #200]	@ (800464c <plotter_update_sensors+0x104>)
 8004584:	f003 fb8a 	bl	8007c9c <HAL_GPIO_ReadPin>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	bf0c      	ite	eq
 800458e:	2301      	moveq	r3, #1
 8004590:	2300      	movne	r3, #0
 8004592:	b2db      	uxtb	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	4b2e      	ldr	r3, [pc, #184]	@ (8004650 <plotter_update_sensors+0x108>)
 8004598:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 800459a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800459e:	482d      	ldr	r0, [pc, #180]	@ (8004654 <plotter_update_sensors+0x10c>)
 80045a0:	f003 fb7c 	bl	8007c9c <HAL_GPIO_ReadPin>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	bf0c      	ite	eq
 80045aa:	2301      	moveq	r3, #1
 80045ac:	2300      	movne	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	461a      	mov	r2, r3
 80045b2:	4b29      	ldr	r3, [pc, #164]	@ (8004658 <plotter_update_sensors+0x110>)
 80045b4:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 80045b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80045ba:	4826      	ldr	r0, [pc, #152]	@ (8004654 <plotter_update_sensors+0x10c>)
 80045bc:	f003 fb6e 	bl	8007c9c <HAL_GPIO_ReadPin>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	bf0c      	ite	eq
 80045c6:	2301      	moveq	r3, #1
 80045c8:	2300      	movne	r3, #0
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	461a      	mov	r2, r3
 80045ce:	4b23      	ldr	r3, [pc, #140]	@ (800465c <plotter_update_sensors+0x114>)
 80045d0:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 80045d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80045d6:	481f      	ldr	r0, [pc, #124]	@ (8004654 <plotter_update_sensors+0x10c>)
 80045d8:	f003 fb60 	bl	8007c9c <HAL_GPIO_ReadPin>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	bf0c      	ite	eq
 80045e2:	2301      	moveq	r3, #1
 80045e4:	2300      	movne	r3, #0
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	461a      	mov	r2, r3
 80045ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004660 <plotter_update_sensors+0x118>)
 80045ec:	601a      	str	r2, [r3, #0]

	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 80045ee:	2104      	movs	r1, #4
 80045f0:	4816      	ldr	r0, [pc, #88]	@ (800464c <plotter_update_sensors+0x104>)
 80045f2:	f003 fb53 	bl	8007c9c <HAL_GPIO_ReadPin>
 80045f6:	4603      	mov	r3, r0
 80045f8:	461a      	mov	r2, r3
 80045fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004664 <plotter_update_sensors+0x11c>)
 80045fc:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 80045fe:	2102      	movs	r1, #2
 8004600:	4812      	ldr	r0, [pc, #72]	@ (800464c <plotter_update_sensors+0x104>)
 8004602:	f003 fb4b 	bl	8007c9c <HAL_GPIO_ReadPin>
 8004606:	4603      	mov	r3, r0
 8004608:	461a      	mov	r2, r3
 800460a:	4b17      	ldr	r3, [pc, #92]	@ (8004668 <plotter_update_sensors+0x120>)
 800460c:	601a      	str	r2, [r3, #0]

	if (up_lim) {
 800460e:	4b15      	ldr	r3, [pc, #84]	@ (8004664 <plotter_update_sensors+0x11c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <plotter_update_sensors+0xd6>
		servo_state = PEN_UP;
 8004616:	4b15      	ldr	r3, [pc, #84]	@ (800466c <plotter_update_sensors+0x124>)
 8004618:	2202      	movs	r2, #2
 800461a:	701a      	strb	r2, [r3, #0]
//	}
//
//	if (prox) {
//		revolute_state = RP_AT_HOME_POSITION;
//	}
}
 800461c:	e00a      	b.n	8004634 <plotter_update_sensors+0xec>
	} else if (low_lim) {
 800461e:	4b12      	ldr	r3, [pc, #72]	@ (8004668 <plotter_update_sensors+0x120>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <plotter_update_sensors+0xe6>
		servo_state = PEN_DOWN;
 8004626:	4b11      	ldr	r3, [pc, #68]	@ (800466c <plotter_update_sensors+0x124>)
 8004628:	2201      	movs	r2, #1
 800462a:	701a      	strb	r2, [r3, #0]
}
 800462c:	e002      	b.n	8004634 <plotter_update_sensors+0xec>
		servo_state = PEN_IDLE;
 800462e:	4b0f      	ldr	r3, [pc, #60]	@ (800466c <plotter_update_sensors+0x124>)
 8004630:	2200      	movs	r2, #0
 8004632:	701a      	strb	r2, [r3, #0]
}
 8004634:	bf00      	nop
 8004636:	bd80      	pop	{r7, pc}
 8004638:	42480000 	.word	0x42480000
 800463c:	c2480000 	.word	0xc2480000
 8004640:	200005a0 	.word	0x200005a0
 8004644:	200018ec 	.word	0x200018ec
 8004648:	200018f0 	.word	0x200018f0
 800464c:	48000400 	.word	0x48000400
 8004650:	200018fc 	.word	0x200018fc
 8004654:	48000800 	.word	0x48000800
 8004658:	20001900 	.word	0x20001900
 800465c:	20001904 	.word	0x20001904
 8004660:	20001908 	.word	0x20001908
 8004664:	200018f4 	.word	0x200018f4
 8004668:	200018f8 	.word	0x200018f8
 800466c:	2000037e 	.word	0x2000037e

08004670 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	460b      	mov	r3, r1
 800467a:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	78fa      	ldrb	r2, [r7, #3]
 8004680:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004688:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004690:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004724 <SIGNAL_init+0xb4>)
 80046b6:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80046be:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d828      	bhi.n	8004718 <SIGNAL_init+0xa8>
 80046c6:	a201      	add	r2, pc, #4	@ (adr r2, 80046cc <SIGNAL_init+0x5c>)
 80046c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046cc:	08004717 	.word	0x08004717
 80046d0:	080046dd 	.word	0x080046dd
 80046d4:	080046fb 	.word	0x080046fb
 80046d8:	08004705 	.word	0x08004705
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80046e8:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a0e      	ldr	r2, [pc, #56]	@ (8004728 <SIGNAL_init+0xb8>)
 80046ee:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80046f6:	621a      	str	r2, [r3, #32]
            break;
 80046f8:	e00e      	b.n	8004718 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8004700:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8004702:	e009      	b.n	8004718 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004712:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8004714:	e000      	b.n	8004718 <SIGNAL_init+0xa8>
            break;
 8004716:	bf00      	nop
    }
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	bf800000 	.word	0xbf800000
 8004728:	41200000 	.word	0x41200000

0800472c <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 800472c:	b480      	push	{r7}
 800472e:	b089      	sub	sp, #36	@ 0x24
 8004730:	af00      	add	r7, sp, #0
 8004732:	61f8      	str	r0, [r7, #28]
 8004734:	ed87 0a06 	vstr	s0, [r7, #24]
 8004738:	edc7 0a05 	vstr	s1, [r7, #20]
 800473c:	ed87 1a04 	vstr	s2, [r7, #16]
 8004740:	edc7 1a03 	vstr	s3, [r7, #12]
 8004744:	ed87 2a02 	vstr	s4, [r7, #8]
 8004748:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	2200      	movs	r2, #0
 8004750:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004776:	bf00      	nop
 8004778:	3724      	adds	r7, #36	@ 0x24
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8004782:	b480      	push	{r7}
 8004784:	b089      	sub	sp, #36	@ 0x24
 8004786:	af00      	add	r7, sp, #0
 8004788:	61f8      	str	r0, [r7, #28]
 800478a:	ed87 0a06 	vstr	s0, [r7, #24]
 800478e:	edc7 0a05 	vstr	s1, [r7, #20]
 8004792:	ed87 1a04 	vstr	s2, [r7, #16]
 8004796:	edc7 1a03 	vstr	s3, [r7, #12]
 800479a:	ed87 2a02 	vstr	s4, [r7, #8]
 800479e:	edc7 2a01 	vstr	s5, [r7, #4]
 80047a2:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	2202      	movs	r2, #2
 80047aa:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80047d6:	bf00      	nop
 80047d8:	3724      	adds	r7, #36	@ 0x24
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
	...

080047e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004828 <HAL_MspInit+0x44>)
 80047ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ee:	4a0e      	ldr	r2, [pc, #56]	@ (8004828 <HAL_MspInit+0x44>)
 80047f0:	f043 0301 	orr.w	r3, r3, #1
 80047f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80047f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004828 <HAL_MspInit+0x44>)
 80047f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	607b      	str	r3, [r7, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004802:	4b09      	ldr	r3, [pc, #36]	@ (8004828 <HAL_MspInit+0x44>)
 8004804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004806:	4a08      	ldr	r2, [pc, #32]	@ (8004828 <HAL_MspInit+0x44>)
 8004808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800480c:	6593      	str	r3, [r2, #88]	@ 0x58
 800480e:	4b06      	ldr	r3, [pc, #24]	@ (8004828 <HAL_MspInit+0x44>)
 8004810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800481a:	f003 fb2b 	bl	8007e74 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800481e:	bf00      	nop
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40021000 	.word	0x40021000

0800482c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004830:	bf00      	nop
 8004832:	e7fd      	b.n	8004830 <NMI_Handler+0x4>

08004834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004838:	bf00      	nop
 800483a:	e7fd      	b.n	8004838 <HardFault_Handler+0x4>

0800483c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004840:	bf00      	nop
 8004842:	e7fd      	b.n	8004840 <MemManage_Handler+0x4>

08004844 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004848:	bf00      	nop
 800484a:	e7fd      	b.n	8004848 <BusFault_Handler+0x4>

0800484c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004850:	bf00      	nop
 8004852:	e7fd      	b.n	8004850 <UsageFault_Handler+0x4>

08004854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004858:	bf00      	nop
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004862:	b480      	push	{r7}
 8004864:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004866:	bf00      	nop
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004874:	bf00      	nop
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004882:	f000 ffb1 	bl	80057e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004886:	bf00      	nop
 8004888:	bd80      	pop	{r7, pc}

0800488a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UPPER_PHOTO_Pin);
 800488e:	2001      	movs	r0, #1
 8004890:	f003 fa34 	bl	8007cfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004894:	bf00      	nop
 8004896:	bd80      	pop	{r7, pc}

08004898 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 800489c:	2010      	movs	r0, #16
 800489e:	f003 fa2d 	bl	8007cfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80048a2:	bf00      	nop
 80048a4:	bd80      	pop	{r7, pc}
	...

080048a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80048ac:	4802      	ldr	r0, [pc, #8]	@ (80048b8 <DMA1_Channel1_IRQHandler+0x10>)
 80048ae:	f002 ff24 	bl	80076fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80048b2:	bf00      	nop
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	20000250 	.word	0x20000250

080048bc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80048c0:	4802      	ldr	r0, [pc, #8]	@ (80048cc <DMA1_Channel2_IRQHandler+0x10>)
 80048c2:	f002 ff1a 	bl	80076fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80048c6:	bf00      	nop
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	200020fc 	.word	0x200020fc

080048d0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80048d4:	4802      	ldr	r0, [pc, #8]	@ (80048e0 <DMA1_Channel3_IRQHandler+0x10>)
 80048d6:	f002 ff10 	bl	80076fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80048da:	bf00      	nop
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	2000215c 	.word	0x2000215c

080048e4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80048e8:	4802      	ldr	r0, [pc, #8]	@ (80048f4 <DMA1_Channel4_IRQHandler+0x10>)
 80048ea:	f002 ff06 	bl	80076fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80048ee:	bf00      	nop
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	2000203c 	.word	0x2000203c

080048f8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80048fc:	4802      	ldr	r0, [pc, #8]	@ (8004908 <DMA1_Channel5_IRQHandler+0x10>)
 80048fe:	f002 fefc 	bl	80076fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004902:	bf00      	nop
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	2000209c 	.word	0x2000209c

0800490c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 8004910:	2040      	movs	r0, #64	@ 0x40
 8004912:	f003 f9f3 	bl	8007cfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004916:	bf00      	nop
 8004918:	bd80      	pop	{r7, pc}
	...

0800491c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004920:	4803      	ldr	r0, [pc, #12]	@ (8004930 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004922:	f004 ff2d 	bl	8009780 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8004926:	4803      	ldr	r0, [pc, #12]	@ (8004934 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8004928:	f004 ff2a 	bl	8009780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800492c:	bf00      	nop
 800492e:	bd80      	pop	{r7, pc}
 8004930:	20001910 	.word	0x20001910
 8004934:	20001dd8 	.word	0x20001dd8

08004938 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800493c:	4802      	ldr	r0, [pc, #8]	@ (8004948 <TIM2_IRQHandler+0x10>)
 800493e:	f004 ff1f 	bl	8009780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004942:	bf00      	nop
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	200019dc 	.word	0x200019dc

0800494c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004950:	4802      	ldr	r0, [pc, #8]	@ (800495c <TIM3_IRQHandler+0x10>)
 8004952:	f004 ff15 	bl	8009780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004956:	bf00      	nop
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	20001aa8 	.word	0x20001aa8

08004960 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004964:	4802      	ldr	r0, [pc, #8]	@ (8004970 <TIM4_IRQHandler+0x10>)
 8004966:	f004 ff0b 	bl	8009780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800496a:	bf00      	nop
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20001b74 	.word	0x20001b74

08004974 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004978:	4802      	ldr	r0, [pc, #8]	@ (8004984 <USART2_IRQHandler+0x10>)
 800497a:	f006 fc55 	bl	800b228 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800497e:	bf00      	nop
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20001f70 	.word	0x20001f70

08004988 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LOWER_PHOTO_Pin);
 800498c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004990:	f003 f9b4 	bl	8007cfc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004994:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004998:	f003 f9b0 	bl	8007cfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800499c:	bf00      	nop
 800499e:	bd80      	pop	{r7, pc}

080049a0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80049a4:	4802      	ldr	r0, [pc, #8]	@ (80049b0 <LPUART1_IRQHandler+0x10>)
 80049a6:	f006 fc3f 	bl	800b228 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80049aa:	bf00      	nop
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20001ea4 	.word	0x20001ea4

080049b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049bc:	4a14      	ldr	r2, [pc, #80]	@ (8004a10 <_sbrk+0x5c>)
 80049be:	4b15      	ldr	r3, [pc, #84]	@ (8004a14 <_sbrk+0x60>)
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80049c8:	4b13      	ldr	r3, [pc, #76]	@ (8004a18 <_sbrk+0x64>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d102      	bne.n	80049d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80049d0:	4b11      	ldr	r3, [pc, #68]	@ (8004a18 <_sbrk+0x64>)
 80049d2:	4a12      	ldr	r2, [pc, #72]	@ (8004a1c <_sbrk+0x68>)
 80049d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80049d6:	4b10      	ldr	r3, [pc, #64]	@ (8004a18 <_sbrk+0x64>)
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4413      	add	r3, r2
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d207      	bcs.n	80049f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80049e4:	f008 fea4 	bl	800d730 <__errno>
 80049e8:	4603      	mov	r3, r0
 80049ea:	220c      	movs	r2, #12
 80049ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80049ee:	f04f 33ff 	mov.w	r3, #4294967295
 80049f2:	e009      	b.n	8004a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80049f4:	4b08      	ldr	r3, [pc, #32]	@ (8004a18 <_sbrk+0x64>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80049fa:	4b07      	ldr	r3, [pc, #28]	@ (8004a18 <_sbrk+0x64>)
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4413      	add	r3, r2
 8004a02:	4a05      	ldr	r2, [pc, #20]	@ (8004a18 <_sbrk+0x64>)
 8004a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a06:	68fb      	ldr	r3, [r7, #12]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3718      	adds	r7, #24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	20020000 	.word	0x20020000
 8004a14:	00000400 	.word	0x00000400
 8004a18:	2000190c 	.word	0x2000190c
 8004a1c:	20002308 	.word	0x20002308

08004a20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004a24:	4b06      	ldr	r3, [pc, #24]	@ (8004a40 <SystemInit+0x20>)
 8004a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2a:	4a05      	ldr	r2, [pc, #20]	@ (8004a40 <SystemInit+0x20>)
 8004a2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004a30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a34:	bf00      	nop
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	e000ed00 	.word	0xe000ed00

08004a44 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b098      	sub	sp, #96	@ 0x60
 8004a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a4a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	605a      	str	r2, [r3, #4]
 8004a54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a56:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	605a      	str	r2, [r3, #4]
 8004a60:	609a      	str	r2, [r3, #8]
 8004a62:	60da      	str	r2, [r3, #12]
 8004a64:	611a      	str	r2, [r3, #16]
 8004a66:	615a      	str	r2, [r3, #20]
 8004a68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004a6a:	1d3b      	adds	r3, r7, #4
 8004a6c:	2234      	movs	r2, #52	@ 0x34
 8004a6e:	2100      	movs	r1, #0
 8004a70:	4618      	mov	r0, r3
 8004a72:	f008 fe45 	bl	800d700 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004a76:	4b3b      	ldr	r3, [pc, #236]	@ (8004b64 <MX_TIM1_Init+0x120>)
 8004a78:	4a3b      	ldr	r2, [pc, #236]	@ (8004b68 <MX_TIM1_Init+0x124>)
 8004a7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004a7c:	4b39      	ldr	r3, [pc, #228]	@ (8004b64 <MX_TIM1_Init+0x120>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a82:	4b38      	ldr	r3, [pc, #224]	@ (8004b64 <MX_TIM1_Init+0x120>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004a88:	4b36      	ldr	r3, [pc, #216]	@ (8004b64 <MX_TIM1_Init+0x120>)
 8004a8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a90:	4b34      	ldr	r3, [pc, #208]	@ (8004b64 <MX_TIM1_Init+0x120>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004a96:	4b33      	ldr	r3, [pc, #204]	@ (8004b64 <MX_TIM1_Init+0x120>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a9c:	4b31      	ldr	r3, [pc, #196]	@ (8004b64 <MX_TIM1_Init+0x120>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004aa2:	4830      	ldr	r0, [pc, #192]	@ (8004b64 <MX_TIM1_Init+0x120>)
 8004aa4:	f004 fabe 	bl	8009024 <HAL_TIM_PWM_Init>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8004aae:	f7ff f9a3 	bl	8003df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004aba:	2300      	movs	r3, #0
 8004abc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004abe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	4827      	ldr	r0, [pc, #156]	@ (8004b64 <MX_TIM1_Init+0x120>)
 8004ac6:	f006 f8cf 	bl	800ac68 <HAL_TIMEx_MasterConfigSynchronization>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004ad0:	f7ff f992 	bl	8003df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ad4:	2360      	movs	r3, #96	@ 0x60
 8004ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004adc:	2300      	movs	r3, #0
 8004ade:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004aec:	2300      	movs	r3, #0
 8004aee:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004af0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004af4:	220c      	movs	r2, #12
 8004af6:	4619      	mov	r1, r3
 8004af8:	481a      	ldr	r0, [pc, #104]	@ (8004b64 <MX_TIM1_Init+0x120>)
 8004afa:	f004 ffbb 	bl	8009a74 <HAL_TIM_PWM_ConfigChannel>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004b04:	f7ff f978 	bl	8003df8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004b14:	2300      	movs	r3, #0
 8004b16:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004b1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004b20:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004b22:	2300      	movs	r3, #0
 8004b24:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004b26:	2300      	movs	r3, #0
 8004b28:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004b2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b32:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004b34:	2300      	movs	r3, #0
 8004b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004b40:	1d3b      	adds	r3, r7, #4
 8004b42:	4619      	mov	r1, r3
 8004b44:	4807      	ldr	r0, [pc, #28]	@ (8004b64 <MX_TIM1_Init+0x120>)
 8004b46:	f006 f925 	bl	800ad94 <HAL_TIMEx_ConfigBreakDeadTime>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8004b50:	f7ff f952 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004b54:	4803      	ldr	r0, [pc, #12]	@ (8004b64 <MX_TIM1_Init+0x120>)
 8004b56:	f000 fb77 	bl	8005248 <HAL_TIM_MspPostInit>

}
 8004b5a:	bf00      	nop
 8004b5c:	3760      	adds	r7, #96	@ 0x60
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	20001910 	.word	0x20001910
 8004b68:	40012c00 	.word	0x40012c00

08004b6c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b088      	sub	sp, #32
 8004b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b72:	f107 0310 	add.w	r3, r7, #16
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	605a      	str	r2, [r3, #4]
 8004b7c:	609a      	str	r2, [r3, #8]
 8004b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b80:	1d3b      	adds	r3, r7, #4
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	605a      	str	r2, [r3, #4]
 8004b88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8004c04 <MX_TIM2_Init+0x98>)
 8004b8c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004b90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8004b92:	4b1c      	ldr	r3, [pc, #112]	@ (8004c04 <MX_TIM2_Init+0x98>)
 8004b94:	22a9      	movs	r2, #169	@ 0xa9
 8004b96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b98:	4b1a      	ldr	r3, [pc, #104]	@ (8004c04 <MX_TIM2_Init+0x98>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8004b9e:	4b19      	ldr	r3, [pc, #100]	@ (8004c04 <MX_TIM2_Init+0x98>)
 8004ba0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004ba4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ba6:	4b17      	ldr	r3, [pc, #92]	@ (8004c04 <MX_TIM2_Init+0x98>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bac:	4b15      	ldr	r3, [pc, #84]	@ (8004c04 <MX_TIM2_Init+0x98>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004bb2:	4814      	ldr	r0, [pc, #80]	@ (8004c04 <MX_TIM2_Init+0x98>)
 8004bb4:	f004 f8ea 	bl	8008d8c <HAL_TIM_Base_Init>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004bbe:	f7ff f91b 	bl	8003df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004bc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004bc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004bc8:	f107 0310 	add.w	r3, r7, #16
 8004bcc:	4619      	mov	r1, r3
 8004bce:	480d      	ldr	r0, [pc, #52]	@ (8004c04 <MX_TIM2_Init+0x98>)
 8004bd0:	f005 f864 	bl	8009c9c <HAL_TIM_ConfigClockSource>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004bda:	f7ff f90d 	bl	8003df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bde:	2300      	movs	r3, #0
 8004be0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004be6:	1d3b      	adds	r3, r7, #4
 8004be8:	4619      	mov	r1, r3
 8004bea:	4806      	ldr	r0, [pc, #24]	@ (8004c04 <MX_TIM2_Init+0x98>)
 8004bec:	f006 f83c 	bl	800ac68 <HAL_TIMEx_MasterConfigSynchronization>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004bf6:	f7ff f8ff 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004bfa:	bf00      	nop
 8004bfc:	3720      	adds	r7, #32
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	200019dc 	.word	0x200019dc

08004c08 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08c      	sub	sp, #48	@ 0x30
 8004c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004c0e:	f107 030c 	add.w	r3, r7, #12
 8004c12:	2224      	movs	r2, #36	@ 0x24
 8004c14:	2100      	movs	r1, #0
 8004c16:	4618      	mov	r0, r3
 8004c18:	f008 fd72 	bl	800d700 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c1c:	463b      	mov	r3, r7
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	605a      	str	r2, [r3, #4]
 8004c24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004c26:	4b21      	ldr	r3, [pc, #132]	@ (8004cac <MX_TIM3_Init+0xa4>)
 8004c28:	4a21      	ldr	r2, [pc, #132]	@ (8004cb0 <MX_TIM3_Init+0xa8>)
 8004c2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8004cac <MX_TIM3_Init+0xa4>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c32:	4b1e      	ldr	r3, [pc, #120]	@ (8004cac <MX_TIM3_Init+0xa4>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004c38:	4b1c      	ldr	r3, [pc, #112]	@ (8004cac <MX_TIM3_Init+0xa4>)
 8004c3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c40:	4b1a      	ldr	r3, [pc, #104]	@ (8004cac <MX_TIM3_Init+0xa4>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c46:	4b19      	ldr	r3, [pc, #100]	@ (8004cac <MX_TIM3_Init+0xa4>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004c50:	2300      	movs	r3, #0
 8004c52:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004c54:	2301      	movs	r3, #1
 8004c56:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004c60:	2300      	movs	r3, #0
 8004c62:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004c64:	2301      	movs	r3, #1
 8004c66:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004c70:	f107 030c 	add.w	r3, r7, #12
 8004c74:	4619      	mov	r1, r3
 8004c76:	480d      	ldr	r0, [pc, #52]	@ (8004cac <MX_TIM3_Init+0xa4>)
 8004c78:	f004 fc40 	bl	80094fc <HAL_TIM_Encoder_Init>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8004c82:	f7ff f8b9 	bl	8003df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c86:	2300      	movs	r3, #0
 8004c88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004c8e:	463b      	mov	r3, r7
 8004c90:	4619      	mov	r1, r3
 8004c92:	4806      	ldr	r0, [pc, #24]	@ (8004cac <MX_TIM3_Init+0xa4>)
 8004c94:	f005 ffe8 	bl	800ac68 <HAL_TIMEx_MasterConfigSynchronization>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8004c9e:	f7ff f8ab 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004ca2:	bf00      	nop
 8004ca4:	3730      	adds	r7, #48	@ 0x30
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20001aa8 	.word	0x20001aa8
 8004cb0:	40000400 	.word	0x40000400

08004cb4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08c      	sub	sp, #48	@ 0x30
 8004cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004cba:	f107 030c 	add.w	r3, r7, #12
 8004cbe:	2224      	movs	r2, #36	@ 0x24
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f008 fd1c 	bl	800d700 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cc8:	463b      	mov	r3, r7
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	605a      	str	r2, [r3, #4]
 8004cd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004cd2:	4b21      	ldr	r3, [pc, #132]	@ (8004d58 <MX_TIM4_Init+0xa4>)
 8004cd4:	4a21      	ldr	r2, [pc, #132]	@ (8004d5c <MX_TIM4_Init+0xa8>)
 8004cd6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8004d58 <MX_TIM4_Init+0xa4>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cde:	4b1e      	ldr	r3, [pc, #120]	@ (8004d58 <MX_TIM4_Init+0xa4>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8004d58 <MX_TIM4_Init+0xa4>)
 8004ce6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004cea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cec:	4b1a      	ldr	r3, [pc, #104]	@ (8004d58 <MX_TIM4_Init+0xa4>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cf2:	4b19      	ldr	r3, [pc, #100]	@ (8004d58 <MX_TIM4_Init+0xa4>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004d00:	2301      	movs	r3, #1
 8004d02:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004d04:	2300      	movs	r3, #0
 8004d06:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004d10:	2301      	movs	r3, #1
 8004d12:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004d14:	2300      	movs	r3, #0
 8004d16:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004d1c:	f107 030c 	add.w	r3, r7, #12
 8004d20:	4619      	mov	r1, r3
 8004d22:	480d      	ldr	r0, [pc, #52]	@ (8004d58 <MX_TIM4_Init+0xa4>)
 8004d24:	f004 fbea 	bl	80094fc <HAL_TIM_Encoder_Init>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8004d2e:	f7ff f863 	bl	8003df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d32:	2300      	movs	r3, #0
 8004d34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d36:	2300      	movs	r3, #0
 8004d38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004d3a:	463b      	mov	r3, r7
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4806      	ldr	r0, [pc, #24]	@ (8004d58 <MX_TIM4_Init+0xa4>)
 8004d40:	f005 ff92 	bl	800ac68 <HAL_TIMEx_MasterConfigSynchronization>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8004d4a:	f7ff f855 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004d4e:	bf00      	nop
 8004d50:	3730      	adds	r7, #48	@ 0x30
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20001b74 	.word	0x20001b74
 8004d5c:	40000800 	.word	0x40000800

08004d60 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08c      	sub	sp, #48	@ 0x30
 8004d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004d66:	f107 030c 	add.w	r3, r7, #12
 8004d6a:	2224      	movs	r2, #36	@ 0x24
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f008 fcc6 	bl	800d700 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d74:	463b      	mov	r3, r7
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	605a      	str	r2, [r3, #4]
 8004d7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004d7e:	4b21      	ldr	r3, [pc, #132]	@ (8004e04 <MX_TIM5_Init+0xa4>)
 8004d80:	4a21      	ldr	r2, [pc, #132]	@ (8004e08 <MX_TIM5_Init+0xa8>)
 8004d82:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004d84:	4b1f      	ldr	r3, [pc, #124]	@ (8004e04 <MX_TIM5_Init+0xa4>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8004e04 <MX_TIM5_Init+0xa4>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8004d90:	4b1c      	ldr	r3, [pc, #112]	@ (8004e04 <MX_TIM5_Init+0xa4>)
 8004d92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d96:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d98:	4b1a      	ldr	r3, [pc, #104]	@ (8004e04 <MX_TIM5_Init+0xa4>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d9e:	4b19      	ldr	r3, [pc, #100]	@ (8004e04 <MX_TIM5_Init+0xa4>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004da4:	2303      	movs	r3, #3
 8004da6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004da8:	2300      	movs	r3, #0
 8004daa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004dac:	2301      	movs	r3, #1
 8004dae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004db0:	2300      	movs	r3, #0
 8004db2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004db8:	2300      	movs	r3, #0
 8004dba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8004dc8:	f107 030c 	add.w	r3, r7, #12
 8004dcc:	4619      	mov	r1, r3
 8004dce:	480d      	ldr	r0, [pc, #52]	@ (8004e04 <MX_TIM5_Init+0xa4>)
 8004dd0:	f004 fb94 	bl	80094fc <HAL_TIM_Encoder_Init>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8004dda:	f7ff f80d 	bl	8003df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004dde:	2300      	movs	r3, #0
 8004de0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004de2:	2300      	movs	r3, #0
 8004de4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004de6:	463b      	mov	r3, r7
 8004de8:	4619      	mov	r1, r3
 8004dea:	4806      	ldr	r0, [pc, #24]	@ (8004e04 <MX_TIM5_Init+0xa4>)
 8004dec:	f005 ff3c 	bl	800ac68 <HAL_TIMEx_MasterConfigSynchronization>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8004df6:	f7fe ffff 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004dfa:	bf00      	nop
 8004dfc:	3730      	adds	r7, #48	@ 0x30
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20001c40 	.word	0x20001c40
 8004e08:	40000c00 	.word	0x40000c00

08004e0c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b09c      	sub	sp, #112	@ 0x70
 8004e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e12:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004e16:	2200      	movs	r2, #0
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	605a      	str	r2, [r3, #4]
 8004e1c:	609a      	str	r2, [r3, #8]
 8004e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e20:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	605a      	str	r2, [r3, #4]
 8004e2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e2c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	605a      	str	r2, [r3, #4]
 8004e36:	609a      	str	r2, [r3, #8]
 8004e38:	60da      	str	r2, [r3, #12]
 8004e3a:	611a      	str	r2, [r3, #16]
 8004e3c:	615a      	str	r2, [r3, #20]
 8004e3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004e40:	1d3b      	adds	r3, r7, #4
 8004e42:	2234      	movs	r2, #52	@ 0x34
 8004e44:	2100      	movs	r1, #0
 8004e46:	4618      	mov	r0, r3
 8004e48:	f008 fc5a 	bl	800d700 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004e4c:	4b4c      	ldr	r3, [pc, #304]	@ (8004f80 <MX_TIM8_Init+0x174>)
 8004e4e:	4a4d      	ldr	r2, [pc, #308]	@ (8004f84 <MX_TIM8_Init+0x178>)
 8004e50:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004e52:	4b4b      	ldr	r3, [pc, #300]	@ (8004f80 <MX_TIM8_Init+0x174>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e58:	4b49      	ldr	r3, [pc, #292]	@ (8004f80 <MX_TIM8_Init+0x174>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004e5e:	4b48      	ldr	r3, [pc, #288]	@ (8004f80 <MX_TIM8_Init+0x174>)
 8004e60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e64:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8004e66:	4b46      	ldr	r3, [pc, #280]	@ (8004f80 <MX_TIM8_Init+0x174>)
 8004e68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e6c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004e6e:	4b44      	ldr	r3, [pc, #272]	@ (8004f80 <MX_TIM8_Init+0x174>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e74:	4b42      	ldr	r3, [pc, #264]	@ (8004f80 <MX_TIM8_Init+0x174>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004e7a:	4841      	ldr	r0, [pc, #260]	@ (8004f80 <MX_TIM8_Init+0x174>)
 8004e7c:	f003 ff86 	bl	8008d8c <HAL_TIM_Base_Init>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8004e86:	f7fe ffb7 	bl	8003df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e8e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004e90:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004e94:	4619      	mov	r1, r3
 8004e96:	483a      	ldr	r0, [pc, #232]	@ (8004f80 <MX_TIM8_Init+0x174>)
 8004e98:	f004 ff00 	bl	8009c9c <HAL_TIM_ConfigClockSource>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8004ea2:	f7fe ffa9 	bl	8003df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004ea6:	4836      	ldr	r0, [pc, #216]	@ (8004f80 <MX_TIM8_Init+0x174>)
 8004ea8:	f004 f8bc 	bl	8009024 <HAL_TIM_PWM_Init>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8004eb2:	f7fe ffa1 	bl	8003df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004ec2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	482d      	ldr	r0, [pc, #180]	@ (8004f80 <MX_TIM8_Init+0x174>)
 8004eca:	f005 fecd 	bl	800ac68 <HAL_TIMEx_MasterConfigSynchronization>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8004ed4:	f7fe ff90 	bl	8003df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ed8:	2360      	movs	r3, #96	@ 0x60
 8004eda:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8004edc:	2300      	movs	r3, #0
 8004ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004eec:	2300      	movs	r3, #0
 8004eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ef4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004ef8:	2200      	movs	r2, #0
 8004efa:	4619      	mov	r1, r3
 8004efc:	4820      	ldr	r0, [pc, #128]	@ (8004f80 <MX_TIM8_Init+0x174>)
 8004efe:	f004 fdb9 	bl	8009a74 <HAL_TIM_PWM_ConfigChannel>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8004f08:	f7fe ff76 	bl	8003df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004f0c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004f10:	2204      	movs	r2, #4
 8004f12:	4619      	mov	r1, r3
 8004f14:	481a      	ldr	r0, [pc, #104]	@ (8004f80 <MX_TIM8_Init+0x174>)
 8004f16:	f004 fdad 	bl	8009a74 <HAL_TIM_PWM_ConfigChannel>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8004f20:	f7fe ff6a 	bl	8003df8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004f24:	2300      	movs	r3, #0
 8004f26:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004f30:	2300      	movs	r3, #0
 8004f32:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004f38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004f3c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004f42:	2300      	movs	r3, #0
 8004f44:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004f46:	2300      	movs	r3, #0
 8004f48:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004f4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004f50:	2300      	movs	r3, #0
 8004f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004f54:	2300      	movs	r3, #0
 8004f56:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004f5c:	1d3b      	adds	r3, r7, #4
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4807      	ldr	r0, [pc, #28]	@ (8004f80 <MX_TIM8_Init+0x174>)
 8004f62:	f005 ff17 	bl	800ad94 <HAL_TIMEx_ConfigBreakDeadTime>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 8004f6c:	f7fe ff44 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004f70:	4803      	ldr	r0, [pc, #12]	@ (8004f80 <MX_TIM8_Init+0x174>)
 8004f72:	f000 f969 	bl	8005248 <HAL_TIM_MspPostInit>

}
 8004f76:	bf00      	nop
 8004f78:	3770      	adds	r7, #112	@ 0x70
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	20001d0c 	.word	0x20001d0c
 8004f84:	40013400 	.word	0x40013400

08004f88 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004f8c:	4b14      	ldr	r3, [pc, #80]	@ (8004fe0 <MX_TIM16_Init+0x58>)
 8004f8e:	4a15      	ldr	r2, [pc, #84]	@ (8004fe4 <MX_TIM16_Init+0x5c>)
 8004f90:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8004f92:	4b13      	ldr	r3, [pc, #76]	@ (8004fe0 <MX_TIM16_Init+0x58>)
 8004f94:	22a9      	movs	r2, #169	@ 0xa9
 8004f96:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f98:	4b11      	ldr	r3, [pc, #68]	@ (8004fe0 <MX_TIM16_Init+0x58>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8004f9e:	4b10      	ldr	r3, [pc, #64]	@ (8004fe0 <MX_TIM16_Init+0x58>)
 8004fa0:	f240 4279 	movw	r2, #1145	@ 0x479
 8004fa4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe0 <MX_TIM16_Init+0x58>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004fac:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe0 <MX_TIM16_Init+0x58>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe0 <MX_TIM16_Init+0x58>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004fb8:	4809      	ldr	r0, [pc, #36]	@ (8004fe0 <MX_TIM16_Init+0x58>)
 8004fba:	f003 fee7 	bl	8008d8c <HAL_TIM_Base_Init>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8004fc4:	f7fe ff18 	bl	8003df8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8004fc8:	2108      	movs	r1, #8
 8004fca:	4805      	ldr	r0, [pc, #20]	@ (8004fe0 <MX_TIM16_Init+0x58>)
 8004fcc:	f004 f9a0 	bl	8009310 <HAL_TIM_OnePulse_Init>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8004fd6:	f7fe ff0f 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004fda:	bf00      	nop
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20001dd8 	.word	0x20001dd8
 8004fe4:	40014400 	.word	0x40014400

08004fe8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800502c <HAL_TIM_PWM_MspInit+0x44>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d113      	bne.n	8005022 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8005030 <HAL_TIM_PWM_MspInit+0x48>)
 8004ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8005030 <HAL_TIM_PWM_MspInit+0x48>)
 8005000:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005004:	6613      	str	r3, [r2, #96]	@ 0x60
 8005006:	4b0a      	ldr	r3, [pc, #40]	@ (8005030 <HAL_TIM_PWM_MspInit+0x48>)
 8005008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800500a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005012:	2200      	movs	r2, #0
 8005014:	2100      	movs	r1, #0
 8005016:	2019      	movs	r0, #25
 8005018:	f002 f957 	bl	80072ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800501c:	2019      	movs	r0, #25
 800501e:	f002 f96e 	bl	80072fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8005022:	bf00      	nop
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	40012c00 	.word	0x40012c00
 8005030:	40021000 	.word	0x40021000

08005034 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005044:	d114      	bne.n	8005070 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005046:	4b22      	ldr	r3, [pc, #136]	@ (80050d0 <HAL_TIM_Base_MspInit+0x9c>)
 8005048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800504a:	4a21      	ldr	r2, [pc, #132]	@ (80050d0 <HAL_TIM_Base_MspInit+0x9c>)
 800504c:	f043 0301 	orr.w	r3, r3, #1
 8005050:	6593      	str	r3, [r2, #88]	@ 0x58
 8005052:	4b1f      	ldr	r3, [pc, #124]	@ (80050d0 <HAL_TIM_Base_MspInit+0x9c>)
 8005054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800505e:	2200      	movs	r2, #0
 8005060:	2100      	movs	r1, #0
 8005062:	201c      	movs	r0, #28
 8005064:	f002 f931 	bl	80072ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005068:	201c      	movs	r0, #28
 800506a:	f002 f948 	bl	80072fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800506e:	e02a      	b.n	80050c6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a17      	ldr	r2, [pc, #92]	@ (80050d4 <HAL_TIM_Base_MspInit+0xa0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d10c      	bne.n	8005094 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800507a:	4b15      	ldr	r3, [pc, #84]	@ (80050d0 <HAL_TIM_Base_MspInit+0x9c>)
 800507c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800507e:	4a14      	ldr	r2, [pc, #80]	@ (80050d0 <HAL_TIM_Base_MspInit+0x9c>)
 8005080:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005084:	6613      	str	r3, [r2, #96]	@ 0x60
 8005086:	4b12      	ldr	r3, [pc, #72]	@ (80050d0 <HAL_TIM_Base_MspInit+0x9c>)
 8005088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800508a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800508e:	613b      	str	r3, [r7, #16]
 8005090:	693b      	ldr	r3, [r7, #16]
}
 8005092:	e018      	b.n	80050c6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a0f      	ldr	r2, [pc, #60]	@ (80050d8 <HAL_TIM_Base_MspInit+0xa4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d113      	bne.n	80050c6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800509e:	4b0c      	ldr	r3, [pc, #48]	@ (80050d0 <HAL_TIM_Base_MspInit+0x9c>)
 80050a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050a2:	4a0b      	ldr	r2, [pc, #44]	@ (80050d0 <HAL_TIM_Base_MspInit+0x9c>)
 80050a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80050aa:	4b09      	ldr	r3, [pc, #36]	@ (80050d0 <HAL_TIM_Base_MspInit+0x9c>)
 80050ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80050b6:	2200      	movs	r2, #0
 80050b8:	2100      	movs	r1, #0
 80050ba:	2019      	movs	r0, #25
 80050bc:	f002 f905 	bl	80072ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80050c0:	2019      	movs	r0, #25
 80050c2:	f002 f91c 	bl	80072fe <HAL_NVIC_EnableIRQ>
}
 80050c6:	bf00      	nop
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	40021000 	.word	0x40021000
 80050d4:	40013400 	.word	0x40013400
 80050d8:	40014400 	.word	0x40014400

080050dc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08e      	sub	sp, #56	@ 0x38
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	605a      	str	r2, [r3, #4]
 80050ee:	609a      	str	r2, [r3, #8]
 80050f0:	60da      	str	r2, [r3, #12]
 80050f2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a4f      	ldr	r2, [pc, #316]	@ (8005238 <HAL_TIM_Encoder_MspInit+0x15c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d131      	bne.n	8005162 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80050fe:	4b4f      	ldr	r3, [pc, #316]	@ (800523c <HAL_TIM_Encoder_MspInit+0x160>)
 8005100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005102:	4a4e      	ldr	r2, [pc, #312]	@ (800523c <HAL_TIM_Encoder_MspInit+0x160>)
 8005104:	f043 0302 	orr.w	r3, r3, #2
 8005108:	6593      	str	r3, [r2, #88]	@ 0x58
 800510a:	4b4c      	ldr	r3, [pc, #304]	@ (800523c <HAL_TIM_Encoder_MspInit+0x160>)
 800510c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	623b      	str	r3, [r7, #32]
 8005114:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005116:	4b49      	ldr	r3, [pc, #292]	@ (800523c <HAL_TIM_Encoder_MspInit+0x160>)
 8005118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800511a:	4a48      	ldr	r2, [pc, #288]	@ (800523c <HAL_TIM_Encoder_MspInit+0x160>)
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005122:	4b46      	ldr	r3, [pc, #280]	@ (800523c <HAL_TIM_Encoder_MspInit+0x160>)
 8005124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	61fb      	str	r3, [r7, #28]
 800512c:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800512e:	23c0      	movs	r3, #192	@ 0xc0
 8005130:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005132:	2302      	movs	r3, #2
 8005134:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005136:	2300      	movs	r3, #0
 8005138:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800513a:	2300      	movs	r3, #0
 800513c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800513e:	2302      	movs	r3, #2
 8005140:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005142:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005146:	4619      	mov	r1, r3
 8005148:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800514c:	f002 fc24 	bl	8007998 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005150:	2200      	movs	r2, #0
 8005152:	2100      	movs	r1, #0
 8005154:	201d      	movs	r0, #29
 8005156:	f002 f8b8 	bl	80072ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800515a:	201d      	movs	r0, #29
 800515c:	f002 f8cf 	bl	80072fe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8005160:	e065      	b.n	800522e <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a36      	ldr	r2, [pc, #216]	@ (8005240 <HAL_TIM_Encoder_MspInit+0x164>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d132      	bne.n	80051d2 <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800516c:	4b33      	ldr	r3, [pc, #204]	@ (800523c <HAL_TIM_Encoder_MspInit+0x160>)
 800516e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005170:	4a32      	ldr	r2, [pc, #200]	@ (800523c <HAL_TIM_Encoder_MspInit+0x160>)
 8005172:	f043 0304 	orr.w	r3, r3, #4
 8005176:	6593      	str	r3, [r2, #88]	@ 0x58
 8005178:	4b30      	ldr	r3, [pc, #192]	@ (800523c <HAL_TIM_Encoder_MspInit+0x160>)
 800517a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	61bb      	str	r3, [r7, #24]
 8005182:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005184:	4b2d      	ldr	r3, [pc, #180]	@ (800523c <HAL_TIM_Encoder_MspInit+0x160>)
 8005186:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005188:	4a2c      	ldr	r2, [pc, #176]	@ (800523c <HAL_TIM_Encoder_MspInit+0x160>)
 800518a:	f043 0301 	orr.w	r3, r3, #1
 800518e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005190:	4b2a      	ldr	r3, [pc, #168]	@ (800523c <HAL_TIM_Encoder_MspInit+0x160>)
 8005192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800519c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80051a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a2:	2302      	movs	r3, #2
 80051a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a6:	2300      	movs	r3, #0
 80051a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051aa:	2300      	movs	r3, #0
 80051ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80051ae:	230a      	movs	r3, #10
 80051b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051b6:	4619      	mov	r1, r3
 80051b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80051bc:	f002 fbec 	bl	8007998 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80051c0:	2200      	movs	r2, #0
 80051c2:	2100      	movs	r1, #0
 80051c4:	201e      	movs	r0, #30
 80051c6:	f002 f880 	bl	80072ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80051ca:	201e      	movs	r0, #30
 80051cc:	f002 f897 	bl	80072fe <HAL_NVIC_EnableIRQ>
}
 80051d0:	e02d      	b.n	800522e <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a1b      	ldr	r2, [pc, #108]	@ (8005244 <HAL_TIM_Encoder_MspInit+0x168>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d128      	bne.n	800522e <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80051dc:	4b17      	ldr	r3, [pc, #92]	@ (800523c <HAL_TIM_Encoder_MspInit+0x160>)
 80051de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e0:	4a16      	ldr	r2, [pc, #88]	@ (800523c <HAL_TIM_Encoder_MspInit+0x160>)
 80051e2:	f043 0308 	orr.w	r3, r3, #8
 80051e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80051e8:	4b14      	ldr	r3, [pc, #80]	@ (800523c <HAL_TIM_Encoder_MspInit+0x160>)
 80051ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ec:	f003 0308 	and.w	r3, r3, #8
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051f4:	4b11      	ldr	r3, [pc, #68]	@ (800523c <HAL_TIM_Encoder_MspInit+0x160>)
 80051f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051f8:	4a10      	ldr	r2, [pc, #64]	@ (800523c <HAL_TIM_Encoder_MspInit+0x160>)
 80051fa:	f043 0301 	orr.w	r3, r3, #1
 80051fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005200:	4b0e      	ldr	r3, [pc, #56]	@ (800523c <HAL_TIM_Encoder_MspInit+0x160>)
 8005202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800520c:	2303      	movs	r3, #3
 800520e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005210:	2302      	movs	r3, #2
 8005212:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005214:	2300      	movs	r3, #0
 8005216:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005218:	2300      	movs	r3, #0
 800521a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800521c:	2302      	movs	r3, #2
 800521e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005220:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005224:	4619      	mov	r1, r3
 8005226:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800522a:	f002 fbb5 	bl	8007998 <HAL_GPIO_Init>
}
 800522e:	bf00      	nop
 8005230:	3738      	adds	r7, #56	@ 0x38
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40000400 	.word	0x40000400
 800523c:	40021000 	.word	0x40021000
 8005240:	40000800 	.word	0x40000800
 8005244:	40000c00 	.word	0x40000c00

08005248 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b08a      	sub	sp, #40	@ 0x28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005250:	f107 0314 	add.w	r3, r7, #20
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	605a      	str	r2, [r3, #4]
 800525a:	609a      	str	r2, [r3, #8]
 800525c:	60da      	str	r2, [r3, #12]
 800525e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a22      	ldr	r2, [pc, #136]	@ (80052f0 <HAL_TIM_MspPostInit+0xa8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d11c      	bne.n	80052a4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800526a:	4b22      	ldr	r3, [pc, #136]	@ (80052f4 <HAL_TIM_MspPostInit+0xac>)
 800526c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800526e:	4a21      	ldr	r2, [pc, #132]	@ (80052f4 <HAL_TIM_MspPostInit+0xac>)
 8005270:	f043 0304 	orr.w	r3, r3, #4
 8005274:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005276:	4b1f      	ldr	r3, [pc, #124]	@ (80052f4 <HAL_TIM_MspPostInit+0xac>)
 8005278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800527a:	f003 0304 	and.w	r3, r3, #4
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005282:	2308      	movs	r3, #8
 8005284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005286:	2302      	movs	r3, #2
 8005288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528a:	2300      	movs	r3, #0
 800528c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800528e:	2300      	movs	r3, #0
 8005290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005292:	2302      	movs	r3, #2
 8005294:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005296:	f107 0314 	add.w	r3, r7, #20
 800529a:	4619      	mov	r1, r3
 800529c:	4816      	ldr	r0, [pc, #88]	@ (80052f8 <HAL_TIM_MspPostInit+0xb0>)
 800529e:	f002 fb7b 	bl	8007998 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80052a2:	e020      	b.n	80052e6 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a14      	ldr	r2, [pc, #80]	@ (80052fc <HAL_TIM_MspPostInit+0xb4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d11b      	bne.n	80052e6 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052ae:	4b11      	ldr	r3, [pc, #68]	@ (80052f4 <HAL_TIM_MspPostInit+0xac>)
 80052b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052b2:	4a10      	ldr	r2, [pc, #64]	@ (80052f4 <HAL_TIM_MspPostInit+0xac>)
 80052b4:	f043 0304 	orr.w	r3, r3, #4
 80052b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80052ba:	4b0e      	ldr	r3, [pc, #56]	@ (80052f4 <HAL_TIM_MspPostInit+0xac>)
 80052bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80052c6:	23c0      	movs	r3, #192	@ 0xc0
 80052c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ca:	2302      	movs	r3, #2
 80052cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052d2:	2300      	movs	r3, #0
 80052d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80052d6:	2304      	movs	r3, #4
 80052d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052da:	f107 0314 	add.w	r3, r7, #20
 80052de:	4619      	mov	r1, r3
 80052e0:	4805      	ldr	r0, [pc, #20]	@ (80052f8 <HAL_TIM_MspPostInit+0xb0>)
 80052e2:	f002 fb59 	bl	8007998 <HAL_GPIO_Init>
}
 80052e6:	bf00      	nop
 80052e8:	3728      	adds	r7, #40	@ 0x28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40012c00 	.word	0x40012c00
 80052f4:	40021000 	.word	0x40021000
 80052f8:	48000800 	.word	0x48000800
 80052fc:	40013400 	.word	0x40013400

08005300 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005304:	4b20      	ldr	r3, [pc, #128]	@ (8005388 <MX_LPUART1_UART_Init+0x88>)
 8005306:	4a21      	ldr	r2, [pc, #132]	@ (800538c <MX_LPUART1_UART_Init+0x8c>)
 8005308:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 800530a:	4b1f      	ldr	r3, [pc, #124]	@ (8005388 <MX_LPUART1_UART_Init+0x88>)
 800530c:	4a20      	ldr	r2, [pc, #128]	@ (8005390 <MX_LPUART1_UART_Init+0x90>)
 800530e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005310:	4b1d      	ldr	r3, [pc, #116]	@ (8005388 <MX_LPUART1_UART_Init+0x88>)
 8005312:	2200      	movs	r2, #0
 8005314:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005316:	4b1c      	ldr	r3, [pc, #112]	@ (8005388 <MX_LPUART1_UART_Init+0x88>)
 8005318:	2200      	movs	r2, #0
 800531a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800531c:	4b1a      	ldr	r3, [pc, #104]	@ (8005388 <MX_LPUART1_UART_Init+0x88>)
 800531e:	2200      	movs	r2, #0
 8005320:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005322:	4b19      	ldr	r3, [pc, #100]	@ (8005388 <MX_LPUART1_UART_Init+0x88>)
 8005324:	220c      	movs	r2, #12
 8005326:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005328:	4b17      	ldr	r3, [pc, #92]	@ (8005388 <MX_LPUART1_UART_Init+0x88>)
 800532a:	2200      	movs	r2, #0
 800532c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800532e:	4b16      	ldr	r3, [pc, #88]	@ (8005388 <MX_LPUART1_UART_Init+0x88>)
 8005330:	2200      	movs	r2, #0
 8005332:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005334:	4b14      	ldr	r3, [pc, #80]	@ (8005388 <MX_LPUART1_UART_Init+0x88>)
 8005336:	2200      	movs	r2, #0
 8005338:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800533a:	4b13      	ldr	r3, [pc, #76]	@ (8005388 <MX_LPUART1_UART_Init+0x88>)
 800533c:	2200      	movs	r2, #0
 800533e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005340:	4811      	ldr	r0, [pc, #68]	@ (8005388 <MX_LPUART1_UART_Init+0x88>)
 8005342:	f005 fe0b 	bl	800af5c <HAL_UART_Init>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800534c:	f7fe fd54 	bl	8003df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005350:	2100      	movs	r1, #0
 8005352:	480d      	ldr	r0, [pc, #52]	@ (8005388 <MX_LPUART1_UART_Init+0x88>)
 8005354:	f007 fb5e 	bl	800ca14 <HAL_UARTEx_SetTxFifoThreshold>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800535e:	f7fe fd4b 	bl	8003df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005362:	2100      	movs	r1, #0
 8005364:	4808      	ldr	r0, [pc, #32]	@ (8005388 <MX_LPUART1_UART_Init+0x88>)
 8005366:	f007 fb93 	bl	800ca90 <HAL_UARTEx_SetRxFifoThreshold>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8005370:	f7fe fd42 	bl	8003df8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8005374:	4804      	ldr	r0, [pc, #16]	@ (8005388 <MX_LPUART1_UART_Init+0x88>)
 8005376:	f007 fb14 	bl	800c9a2 <HAL_UARTEx_DisableFifoMode>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8005380:	f7fe fd3a 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8005384:	bf00      	nop
 8005386:	bd80      	pop	{r7, pc}
 8005388:	20001ea4 	.word	0x20001ea4
 800538c:	40008000 	.word	0x40008000
 8005390:	001e8480 	.word	0x001e8480

08005394 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005398:	4b23      	ldr	r3, [pc, #140]	@ (8005428 <MX_USART2_UART_Init+0x94>)
 800539a:	4a24      	ldr	r2, [pc, #144]	@ (800542c <MX_USART2_UART_Init+0x98>)
 800539c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800539e:	4b22      	ldr	r3, [pc, #136]	@ (8005428 <MX_USART2_UART_Init+0x94>)
 80053a0:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80053a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80053a6:	4b20      	ldr	r3, [pc, #128]	@ (8005428 <MX_USART2_UART_Init+0x94>)
 80053a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80053ac:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80053ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005428 <MX_USART2_UART_Init+0x94>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80053b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005428 <MX_USART2_UART_Init+0x94>)
 80053b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80053ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80053bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005428 <MX_USART2_UART_Init+0x94>)
 80053be:	220c      	movs	r2, #12
 80053c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053c2:	4b19      	ldr	r3, [pc, #100]	@ (8005428 <MX_USART2_UART_Init+0x94>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80053c8:	4b17      	ldr	r3, [pc, #92]	@ (8005428 <MX_USART2_UART_Init+0x94>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80053ce:	4b16      	ldr	r3, [pc, #88]	@ (8005428 <MX_USART2_UART_Init+0x94>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80053d4:	4b14      	ldr	r3, [pc, #80]	@ (8005428 <MX_USART2_UART_Init+0x94>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80053da:	4b13      	ldr	r3, [pc, #76]	@ (8005428 <MX_USART2_UART_Init+0x94>)
 80053dc:	2200      	movs	r2, #0
 80053de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80053e0:	4811      	ldr	r0, [pc, #68]	@ (8005428 <MX_USART2_UART_Init+0x94>)
 80053e2:	f005 fdbb 	bl	800af5c <HAL_UART_Init>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80053ec:	f7fe fd04 	bl	8003df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80053f0:	2100      	movs	r1, #0
 80053f2:	480d      	ldr	r0, [pc, #52]	@ (8005428 <MX_USART2_UART_Init+0x94>)
 80053f4:	f007 fb0e 	bl	800ca14 <HAL_UARTEx_SetTxFifoThreshold>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80053fe:	f7fe fcfb 	bl	8003df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005402:	2100      	movs	r1, #0
 8005404:	4808      	ldr	r0, [pc, #32]	@ (8005428 <MX_USART2_UART_Init+0x94>)
 8005406:	f007 fb43 	bl	800ca90 <HAL_UARTEx_SetRxFifoThreshold>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8005410:	f7fe fcf2 	bl	8003df8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005414:	4804      	ldr	r0, [pc, #16]	@ (8005428 <MX_USART2_UART_Init+0x94>)
 8005416:	f007 fac4 	bl	800c9a2 <HAL_UARTEx_DisableFifoMode>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8005420:	f7fe fcea 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005424:	bf00      	nop
 8005426:	bd80      	pop	{r7, pc}
 8005428:	20001f70 	.word	0x20001f70
 800542c:	40004400 	.word	0x40004400

08005430 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b0a0      	sub	sp, #128	@ 0x80
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005438:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	605a      	str	r2, [r3, #4]
 8005442:	609a      	str	r2, [r3, #8]
 8005444:	60da      	str	r2, [r3, #12]
 8005446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005448:	f107 0318 	add.w	r3, r7, #24
 800544c:	2254      	movs	r2, #84	@ 0x54
 800544e:	2100      	movs	r1, #0
 8005450:	4618      	mov	r0, r3
 8005452:	f008 f955 	bl	800d700 <memset>
  if(uartHandle->Instance==LPUART1)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a99      	ldr	r2, [pc, #612]	@ (80056c0 <HAL_UART_MspInit+0x290>)
 800545c:	4293      	cmp	r3, r2
 800545e:	f040 8093 	bne.w	8005588 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005462:	2320      	movs	r3, #32
 8005464:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8005466:	2300      	movs	r3, #0
 8005468:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800546a:	f107 0318 	add.w	r3, r7, #24
 800546e:	4618      	mov	r0, r3
 8005470:	f003 fa3e 	bl	80088f0 <HAL_RCCEx_PeriphCLKConfig>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800547a:	f7fe fcbd 	bl	8003df8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800547e:	4b91      	ldr	r3, [pc, #580]	@ (80056c4 <HAL_UART_MspInit+0x294>)
 8005480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005482:	4a90      	ldr	r2, [pc, #576]	@ (80056c4 <HAL_UART_MspInit+0x294>)
 8005484:	f043 0301 	orr.w	r3, r3, #1
 8005488:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800548a:	4b8e      	ldr	r3, [pc, #568]	@ (80056c4 <HAL_UART_MspInit+0x294>)
 800548c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005496:	4b8b      	ldr	r3, [pc, #556]	@ (80056c4 <HAL_UART_MspInit+0x294>)
 8005498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800549a:	4a8a      	ldr	r2, [pc, #552]	@ (80056c4 <HAL_UART_MspInit+0x294>)
 800549c:	f043 0302 	orr.w	r3, r3, #2
 80054a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80054a2:	4b88      	ldr	r3, [pc, #544]	@ (80056c4 <HAL_UART_MspInit+0x294>)
 80054a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	613b      	str	r3, [r7, #16]
 80054ac:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80054ae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80054b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b4:	2302      	movs	r3, #2
 80054b6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b8:	2300      	movs	r3, #0
 80054ba:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054bc:	2300      	movs	r3, #0
 80054be:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80054c0:	2308      	movs	r3, #8
 80054c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054c4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80054c8:	4619      	mov	r1, r3
 80054ca:	487f      	ldr	r0, [pc, #508]	@ (80056c8 <HAL_UART_MspInit+0x298>)
 80054cc:	f002 fa64 	bl	8007998 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 80054d0:	4b7e      	ldr	r3, [pc, #504]	@ (80056cc <HAL_UART_MspInit+0x29c>)
 80054d2:	4a7f      	ldr	r2, [pc, #508]	@ (80056d0 <HAL_UART_MspInit+0x2a0>)
 80054d4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80054d6:	4b7d      	ldr	r3, [pc, #500]	@ (80056cc <HAL_UART_MspInit+0x29c>)
 80054d8:	2222      	movs	r2, #34	@ 0x22
 80054da:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80054dc:	4b7b      	ldr	r3, [pc, #492]	@ (80056cc <HAL_UART_MspInit+0x29c>)
 80054de:	2200      	movs	r2, #0
 80054e0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054e2:	4b7a      	ldr	r3, [pc, #488]	@ (80056cc <HAL_UART_MspInit+0x29c>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80054e8:	4b78      	ldr	r3, [pc, #480]	@ (80056cc <HAL_UART_MspInit+0x29c>)
 80054ea:	2280      	movs	r2, #128	@ 0x80
 80054ec:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054ee:	4b77      	ldr	r3, [pc, #476]	@ (80056cc <HAL_UART_MspInit+0x29c>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054f4:	4b75      	ldr	r3, [pc, #468]	@ (80056cc <HAL_UART_MspInit+0x29c>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80054fa:	4b74      	ldr	r3, [pc, #464]	@ (80056cc <HAL_UART_MspInit+0x29c>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005500:	4b72      	ldr	r3, [pc, #456]	@ (80056cc <HAL_UART_MspInit+0x29c>)
 8005502:	2200      	movs	r2, #0
 8005504:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8005506:	4871      	ldr	r0, [pc, #452]	@ (80056cc <HAL_UART_MspInit+0x29c>)
 8005508:	f001 ff14 	bl	8007334 <HAL_DMA_Init>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8005512:	f7fe fc71 	bl	8003df8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a6c      	ldr	r2, [pc, #432]	@ (80056cc <HAL_UART_MspInit+0x29c>)
 800551a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800551e:	4a6b      	ldr	r2, [pc, #428]	@ (80056cc <HAL_UART_MspInit+0x29c>)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 8005524:	4b6b      	ldr	r3, [pc, #428]	@ (80056d4 <HAL_UART_MspInit+0x2a4>)
 8005526:	4a6c      	ldr	r2, [pc, #432]	@ (80056d8 <HAL_UART_MspInit+0x2a8>)
 8005528:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800552a:	4b6a      	ldr	r3, [pc, #424]	@ (80056d4 <HAL_UART_MspInit+0x2a4>)
 800552c:	2223      	movs	r2, #35	@ 0x23
 800552e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005530:	4b68      	ldr	r3, [pc, #416]	@ (80056d4 <HAL_UART_MspInit+0x2a4>)
 8005532:	2210      	movs	r2, #16
 8005534:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005536:	4b67      	ldr	r3, [pc, #412]	@ (80056d4 <HAL_UART_MspInit+0x2a4>)
 8005538:	2200      	movs	r2, #0
 800553a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800553c:	4b65      	ldr	r3, [pc, #404]	@ (80056d4 <HAL_UART_MspInit+0x2a4>)
 800553e:	2280      	movs	r2, #128	@ 0x80
 8005540:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005542:	4b64      	ldr	r3, [pc, #400]	@ (80056d4 <HAL_UART_MspInit+0x2a4>)
 8005544:	2200      	movs	r2, #0
 8005546:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005548:	4b62      	ldr	r3, [pc, #392]	@ (80056d4 <HAL_UART_MspInit+0x2a4>)
 800554a:	2200      	movs	r2, #0
 800554c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800554e:	4b61      	ldr	r3, [pc, #388]	@ (80056d4 <HAL_UART_MspInit+0x2a4>)
 8005550:	2200      	movs	r2, #0
 8005552:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005554:	4b5f      	ldr	r3, [pc, #380]	@ (80056d4 <HAL_UART_MspInit+0x2a4>)
 8005556:	2200      	movs	r2, #0
 8005558:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800555a:	485e      	ldr	r0, [pc, #376]	@ (80056d4 <HAL_UART_MspInit+0x2a4>)
 800555c:	f001 feea 	bl	8007334 <HAL_DMA_Init>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8005566:	f7fe fc47 	bl	8003df8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a59      	ldr	r2, [pc, #356]	@ (80056d4 <HAL_UART_MspInit+0x2a4>)
 800556e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005570:	4a58      	ldr	r2, [pc, #352]	@ (80056d4 <HAL_UART_MspInit+0x2a4>)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8005576:	2200      	movs	r2, #0
 8005578:	2100      	movs	r1, #0
 800557a:	205b      	movs	r0, #91	@ 0x5b
 800557c:	f001 fea5 	bl	80072ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8005580:	205b      	movs	r0, #91	@ 0x5b
 8005582:	f001 febc 	bl	80072fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005586:	e097      	b.n	80056b8 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a53      	ldr	r2, [pc, #332]	@ (80056dc <HAL_UART_MspInit+0x2ac>)
 800558e:	4293      	cmp	r3, r2
 8005590:	f040 8092 	bne.w	80056b8 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005594:	2302      	movs	r3, #2
 8005596:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005598:	2300      	movs	r3, #0
 800559a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800559c:	f107 0318 	add.w	r3, r7, #24
 80055a0:	4618      	mov	r0, r3
 80055a2:	f003 f9a5 	bl	80088f0 <HAL_RCCEx_PeriphCLKConfig>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <HAL_UART_MspInit+0x180>
      Error_Handler();
 80055ac:	f7fe fc24 	bl	8003df8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80055b0:	4b44      	ldr	r3, [pc, #272]	@ (80056c4 <HAL_UART_MspInit+0x294>)
 80055b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b4:	4a43      	ldr	r2, [pc, #268]	@ (80056c4 <HAL_UART_MspInit+0x294>)
 80055b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80055bc:	4b41      	ldr	r3, [pc, #260]	@ (80056c4 <HAL_UART_MspInit+0x294>)
 80055be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055c8:	4b3e      	ldr	r3, [pc, #248]	@ (80056c4 <HAL_UART_MspInit+0x294>)
 80055ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055cc:	4a3d      	ldr	r2, [pc, #244]	@ (80056c4 <HAL_UART_MspInit+0x294>)
 80055ce:	f043 0301 	orr.w	r3, r3, #1
 80055d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80055d4:	4b3b      	ldr	r3, [pc, #236]	@ (80056c4 <HAL_UART_MspInit+0x294>)
 80055d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	60bb      	str	r3, [r7, #8]
 80055de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80055e0:	230c      	movs	r3, #12
 80055e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055e4:	2302      	movs	r3, #2
 80055e6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e8:	2300      	movs	r3, #0
 80055ea:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ec:	2300      	movs	r3, #0
 80055ee:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80055f0:	2307      	movs	r3, #7
 80055f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055f4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80055f8:	4619      	mov	r1, r3
 80055fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80055fe:	f002 f9cb 	bl	8007998 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8005602:	4b37      	ldr	r3, [pc, #220]	@ (80056e0 <HAL_UART_MspInit+0x2b0>)
 8005604:	4a37      	ldr	r2, [pc, #220]	@ (80056e4 <HAL_UART_MspInit+0x2b4>)
 8005606:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005608:	4b35      	ldr	r3, [pc, #212]	@ (80056e0 <HAL_UART_MspInit+0x2b0>)
 800560a:	221a      	movs	r2, #26
 800560c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800560e:	4b34      	ldr	r3, [pc, #208]	@ (80056e0 <HAL_UART_MspInit+0x2b0>)
 8005610:	2200      	movs	r2, #0
 8005612:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005614:	4b32      	ldr	r3, [pc, #200]	@ (80056e0 <HAL_UART_MspInit+0x2b0>)
 8005616:	2200      	movs	r2, #0
 8005618:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800561a:	4b31      	ldr	r3, [pc, #196]	@ (80056e0 <HAL_UART_MspInit+0x2b0>)
 800561c:	2280      	movs	r2, #128	@ 0x80
 800561e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005620:	4b2f      	ldr	r3, [pc, #188]	@ (80056e0 <HAL_UART_MspInit+0x2b0>)
 8005622:	2200      	movs	r2, #0
 8005624:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005626:	4b2e      	ldr	r3, [pc, #184]	@ (80056e0 <HAL_UART_MspInit+0x2b0>)
 8005628:	2200      	movs	r2, #0
 800562a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800562c:	4b2c      	ldr	r3, [pc, #176]	@ (80056e0 <HAL_UART_MspInit+0x2b0>)
 800562e:	2200      	movs	r2, #0
 8005630:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005632:	4b2b      	ldr	r3, [pc, #172]	@ (80056e0 <HAL_UART_MspInit+0x2b0>)
 8005634:	2200      	movs	r2, #0
 8005636:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005638:	4829      	ldr	r0, [pc, #164]	@ (80056e0 <HAL_UART_MspInit+0x2b0>)
 800563a:	f001 fe7b 	bl	8007334 <HAL_DMA_Init>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8005644:	f7fe fbd8 	bl	8003df8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a25      	ldr	r2, [pc, #148]	@ (80056e0 <HAL_UART_MspInit+0x2b0>)
 800564c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005650:	4a23      	ldr	r2, [pc, #140]	@ (80056e0 <HAL_UART_MspInit+0x2b0>)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8005656:	4b24      	ldr	r3, [pc, #144]	@ (80056e8 <HAL_UART_MspInit+0x2b8>)
 8005658:	4a24      	ldr	r2, [pc, #144]	@ (80056ec <HAL_UART_MspInit+0x2bc>)
 800565a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800565c:	4b22      	ldr	r3, [pc, #136]	@ (80056e8 <HAL_UART_MspInit+0x2b8>)
 800565e:	221b      	movs	r2, #27
 8005660:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005662:	4b21      	ldr	r3, [pc, #132]	@ (80056e8 <HAL_UART_MspInit+0x2b8>)
 8005664:	2210      	movs	r2, #16
 8005666:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005668:	4b1f      	ldr	r3, [pc, #124]	@ (80056e8 <HAL_UART_MspInit+0x2b8>)
 800566a:	2200      	movs	r2, #0
 800566c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800566e:	4b1e      	ldr	r3, [pc, #120]	@ (80056e8 <HAL_UART_MspInit+0x2b8>)
 8005670:	2280      	movs	r2, #128	@ 0x80
 8005672:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005674:	4b1c      	ldr	r3, [pc, #112]	@ (80056e8 <HAL_UART_MspInit+0x2b8>)
 8005676:	2200      	movs	r2, #0
 8005678:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800567a:	4b1b      	ldr	r3, [pc, #108]	@ (80056e8 <HAL_UART_MspInit+0x2b8>)
 800567c:	2200      	movs	r2, #0
 800567e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005680:	4b19      	ldr	r3, [pc, #100]	@ (80056e8 <HAL_UART_MspInit+0x2b8>)
 8005682:	2200      	movs	r2, #0
 8005684:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005686:	4b18      	ldr	r3, [pc, #96]	@ (80056e8 <HAL_UART_MspInit+0x2b8>)
 8005688:	2200      	movs	r2, #0
 800568a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800568c:	4816      	ldr	r0, [pc, #88]	@ (80056e8 <HAL_UART_MspInit+0x2b8>)
 800568e:	f001 fe51 	bl	8007334 <HAL_DMA_Init>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8005698:	f7fe fbae 	bl	8003df8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a12      	ldr	r2, [pc, #72]	@ (80056e8 <HAL_UART_MspInit+0x2b8>)
 80056a0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80056a2:	4a11      	ldr	r2, [pc, #68]	@ (80056e8 <HAL_UART_MspInit+0x2b8>)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80056a8:	2200      	movs	r2, #0
 80056aa:	2100      	movs	r1, #0
 80056ac:	2026      	movs	r0, #38	@ 0x26
 80056ae:	f001 fe0c 	bl	80072ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80056b2:	2026      	movs	r0, #38	@ 0x26
 80056b4:	f001 fe23 	bl	80072fe <HAL_NVIC_EnableIRQ>
}
 80056b8:	bf00      	nop
 80056ba:	3780      	adds	r7, #128	@ 0x80
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	40008000 	.word	0x40008000
 80056c4:	40021000 	.word	0x40021000
 80056c8:	48000400 	.word	0x48000400
 80056cc:	2000203c 	.word	0x2000203c
 80056d0:	40020044 	.word	0x40020044
 80056d4:	2000209c 	.word	0x2000209c
 80056d8:	40020058 	.word	0x40020058
 80056dc:	40004400 	.word	0x40004400
 80056e0:	200020fc 	.word	0x200020fc
 80056e4:	4002001c 	.word	0x4002001c
 80056e8:	2000215c 	.word	0x2000215c
 80056ec:	40020030 	.word	0x40020030

080056f0 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 80056f0:	480d      	ldr	r0, [pc, #52]	@ (8005728 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80056f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80056f4:	f7ff f994 	bl	8004a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80056f8:	480c      	ldr	r0, [pc, #48]	@ (800572c <LoopForever+0x6>)
  ldr r1, =_edata
 80056fa:	490d      	ldr	r1, [pc, #52]	@ (8005730 <LoopForever+0xa>)
  ldr r2, =_sidata
 80056fc:	4a0d      	ldr	r2, [pc, #52]	@ (8005734 <LoopForever+0xe>)
  movs r3, #0
 80056fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005700:	e002      	b.n	8005708 <LoopCopyDataInit>

08005702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005706:	3304      	adds	r3, #4

08005708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800570a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800570c:	d3f9      	bcc.n	8005702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800570e:	4a0a      	ldr	r2, [pc, #40]	@ (8005738 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005710:	4c0a      	ldr	r4, [pc, #40]	@ (800573c <LoopForever+0x16>)
  movs r3, #0
 8005712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005714:	e001      	b.n	800571a <LoopFillZerobss>

08005716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005718:	3204      	adds	r2, #4

0800571a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800571a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800571c:	d3fb      	bcc.n	8005716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800571e:	f008 f80d 	bl	800d73c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005722:	f7fe f897 	bl	8003854 <main>

08005726 <LoopForever>:

LoopForever:
    b LoopForever
 8005726:	e7fe      	b.n	8005726 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8005728:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800572c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005730:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 8005734:	0800e73c 	.word	0x0800e73c
  ldr r2, =_sbss
 8005738:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 800573c:	20002308 	.word	0x20002308

08005740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005740:	e7fe      	b.n	8005740 <ADC1_2_IRQHandler>

08005742 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b082      	sub	sp, #8
 8005746:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005748:	2300      	movs	r3, #0
 800574a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800574c:	2003      	movs	r0, #3
 800574e:	f001 fdb1 	bl	80072b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005752:	2000      	movs	r0, #0
 8005754:	f000 f80e 	bl	8005774 <HAL_InitTick>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	71fb      	strb	r3, [r7, #7]
 8005762:	e001      	b.n	8005768 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005764:	f7ff f83e 	bl	80047e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005768:	79fb      	ldrb	r3, [r7, #7]

}
 800576a:	4618      	mov	r0, r3
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800577c:	2300      	movs	r3, #0
 800577e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005780:	4b16      	ldr	r3, [pc, #88]	@ (80057dc <HAL_InitTick+0x68>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d022      	beq.n	80057ce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005788:	4b15      	ldr	r3, [pc, #84]	@ (80057e0 <HAL_InitTick+0x6c>)
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	4b13      	ldr	r3, [pc, #76]	@ (80057dc <HAL_InitTick+0x68>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005794:	fbb1 f3f3 	udiv	r3, r1, r3
 8005798:	fbb2 f3f3 	udiv	r3, r2, r3
 800579c:	4618      	mov	r0, r3
 800579e:	f001 fdbc 	bl	800731a <HAL_SYSTICK_Config>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10f      	bne.n	80057c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b0f      	cmp	r3, #15
 80057ac:	d809      	bhi.n	80057c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057ae:	2200      	movs	r2, #0
 80057b0:	6879      	ldr	r1, [r7, #4]
 80057b2:	f04f 30ff 	mov.w	r0, #4294967295
 80057b6:	f001 fd88 	bl	80072ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80057ba:	4a0a      	ldr	r2, [pc, #40]	@ (80057e4 <HAL_InitTick+0x70>)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6013      	str	r3, [r2, #0]
 80057c0:	e007      	b.n	80057d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	73fb      	strb	r3, [r7, #15]
 80057c6:	e004      	b.n	80057d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	73fb      	strb	r3, [r7, #15]
 80057cc:	e001      	b.n	80057d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	20000170 	.word	0x20000170
 80057e0:	20000168 	.word	0x20000168
 80057e4:	2000016c 	.word	0x2000016c

080057e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80057ec:	4b05      	ldr	r3, [pc, #20]	@ (8005804 <HAL_IncTick+0x1c>)
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	4b05      	ldr	r3, [pc, #20]	@ (8005808 <HAL_IncTick+0x20>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4413      	add	r3, r2
 80057f6:	4a03      	ldr	r2, [pc, #12]	@ (8005804 <HAL_IncTick+0x1c>)
 80057f8:	6013      	str	r3, [r2, #0]
}
 80057fa:	bf00      	nop
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	200021bc 	.word	0x200021bc
 8005808:	20000170 	.word	0x20000170

0800580c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
  return uwTick;
 8005810:	4b03      	ldr	r3, [pc, #12]	@ (8005820 <HAL_GetTick+0x14>)
 8005812:	681b      	ldr	r3, [r3, #0]
}
 8005814:	4618      	mov	r0, r3
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	200021bc 	.word	0x200021bc

08005824 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	431a      	orrs	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	609a      	str	r2, [r3, #8]
}
 800583e:	bf00      	nop
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	609a      	str	r2, [r3, #8]
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	3360      	adds	r3, #96	@ 0x60
 800589e:	461a      	mov	r2, r3
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	4b08      	ldr	r3, [pc, #32]	@ (80058d0 <LL_ADC_SetOffset+0x44>)
 80058ae:	4013      	ands	r3, r2
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80058c4:	bf00      	nop
 80058c6:	371c      	adds	r7, #28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	03fff000 	.word	0x03fff000

080058d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	3360      	adds	r3, #96	@ 0x60
 80058e2:	461a      	mov	r2, r3
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3360      	adds	r3, #96	@ 0x60
 8005910:	461a      	mov	r2, r3
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	431a      	orrs	r2, r3
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800592a:	bf00      	nop
 800592c:	371c      	adds	r7, #28
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005936:	b480      	push	{r7}
 8005938:	b087      	sub	sp, #28
 800593a:	af00      	add	r7, sp, #0
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	60b9      	str	r1, [r7, #8]
 8005940:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3360      	adds	r3, #96	@ 0x60
 8005946:	461a      	mov	r2, r3
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	431a      	orrs	r2, r3
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005960:	bf00      	nop
 8005962:	371c      	adds	r7, #28
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	3360      	adds	r3, #96	@ 0x60
 800597c:	461a      	mov	r2, r3
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	431a      	orrs	r2, r3
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005996:	bf00      	nop
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	615a      	str	r2, [r3, #20]
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80059dc:	2301      	movs	r3, #1
 80059de:	e000      	b.n	80059e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b087      	sub	sp, #28
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	60f8      	str	r0, [r7, #12]
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	3330      	adds	r3, #48	@ 0x30
 80059fe:	461a      	mov	r2, r3
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	0a1b      	lsrs	r3, r3, #8
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	f003 030c 	and.w	r3, r3, #12
 8005a0a:	4413      	add	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f003 031f 	and.w	r3, r3, #31
 8005a18:	211f      	movs	r1, #31
 8005a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a1e:	43db      	mvns	r3, r3
 8005a20:	401a      	ands	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	0e9b      	lsrs	r3, r3, #26
 8005a26:	f003 011f 	and.w	r1, r3, #31
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f003 031f 	and.w	r3, r3, #31
 8005a30:	fa01 f303 	lsl.w	r3, r1, r3
 8005a34:	431a      	orrs	r2, r3
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005a3a:	bf00      	nop
 8005a3c:	371c      	adds	r7, #28
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b087      	sub	sp, #28
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3314      	adds	r3, #20
 8005a56:	461a      	mov	r2, r3
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	0e5b      	lsrs	r3, r3, #25
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	f003 0304 	and.w	r3, r3, #4
 8005a62:	4413      	add	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	0d1b      	lsrs	r3, r3, #20
 8005a6e:	f003 031f 	and.w	r3, r3, #31
 8005a72:	2107      	movs	r1, #7
 8005a74:	fa01 f303 	lsl.w	r3, r1, r3
 8005a78:	43db      	mvns	r3, r3
 8005a7a:	401a      	ands	r2, r3
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	0d1b      	lsrs	r3, r3, #20
 8005a80:	f003 031f 	and.w	r3, r3, #31
 8005a84:	6879      	ldr	r1, [r7, #4]
 8005a86:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005a90:	bf00      	nop
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	401a      	ands	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f003 0318 	and.w	r3, r3, #24
 8005abe:	4908      	ldr	r1, [pc, #32]	@ (8005ae0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005ac0:	40d9      	lsrs	r1, r3
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	400b      	ands	r3, r1
 8005ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aca:	431a      	orrs	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005ad2:	bf00      	nop
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	0007ffff 	.word	0x0007ffff

08005ae4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f003 031f 	and.w	r3, r3, #31
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005b10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6093      	str	r3, [r2, #8]
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b38:	d101      	bne.n	8005b3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e000      	b.n	8005b40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005b5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005b60:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b88:	d101      	bne.n	8005b8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e000      	b.n	8005b90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005bac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005bb0:	f043 0201 	orr.w	r2, r3, #1
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005bd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005bd8:	f043 0202 	orr.w	r2, r3, #2
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <LL_ADC_IsEnabled+0x18>
 8005c00:	2301      	movs	r3, #1
 8005c02:	e000      	b.n	8005c06 <LL_ADC_IsEnabled+0x1a>
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d101      	bne.n	8005c2a <LL_ADC_IsDisableOngoing+0x18>
 8005c26:	2301      	movs	r3, #1
 8005c28:	e000      	b.n	8005c2c <LL_ADC_IsDisableOngoing+0x1a>
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005c4c:	f043 0204 	orr.w	r2, r3, #4
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b04      	cmp	r3, #4
 8005c72:	d101      	bne.n	8005c78 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005c74:	2301      	movs	r3, #1
 8005c76:	e000      	b.n	8005c7a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b083      	sub	sp, #12
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 0308 	and.w	r3, r3, #8
 8005c96:	2b08      	cmp	r3, #8
 8005c98:	d101      	bne.n	8005c9e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e000      	b.n	8005ca0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005cac:	b590      	push	{r4, r7, lr}
 8005cae:	b089      	sub	sp, #36	@ 0x24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e1a9      	b.n	800601a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d109      	bne.n	8005ce8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7fd f909 	bl	8002eec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7ff ff19 	bl	8005b24 <LL_ADC_IsDeepPowerDownEnabled>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d004      	beq.n	8005d02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff feff 	bl	8005b00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7ff ff34 	bl	8005b74 <LL_ADC_IsInternalRegulatorEnabled>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d115      	bne.n	8005d3e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7ff ff18 	bl	8005b4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005d1c:	4b9c      	ldr	r3, [pc, #624]	@ (8005f90 <HAL_ADC_Init+0x2e4>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	099b      	lsrs	r3, r3, #6
 8005d22:	4a9c      	ldr	r2, [pc, #624]	@ (8005f94 <HAL_ADC_Init+0x2e8>)
 8005d24:	fba2 2303 	umull	r2, r3, r2, r3
 8005d28:	099b      	lsrs	r3, r3, #6
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005d30:	e002      	b.n	8005d38 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	3b01      	subs	r3, #1
 8005d36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1f9      	bne.n	8005d32 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff ff16 	bl	8005b74 <LL_ADC_IsInternalRegulatorEnabled>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10d      	bne.n	8005d6a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d52:	f043 0210 	orr.w	r2, r3, #16
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d5e:	f043 0201 	orr.w	r2, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff ff76 	bl	8005c60 <LL_ADC_REG_IsConversionOngoing>
 8005d74:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d7a:	f003 0310 	and.w	r3, r3, #16
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f040 8142 	bne.w	8006008 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f040 813e 	bne.w	8006008 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d90:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005d94:	f043 0202 	orr.w	r2, r3, #2
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff ff23 	bl	8005bec <LL_ADC_IsEnabled>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d141      	bne.n	8005e30 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005db4:	d004      	beq.n	8005dc0 <HAL_ADC_Init+0x114>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a77      	ldr	r2, [pc, #476]	@ (8005f98 <HAL_ADC_Init+0x2ec>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d10f      	bne.n	8005de0 <HAL_ADC_Init+0x134>
 8005dc0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005dc4:	f7ff ff12 	bl	8005bec <LL_ADC_IsEnabled>
 8005dc8:	4604      	mov	r4, r0
 8005dca:	4873      	ldr	r0, [pc, #460]	@ (8005f98 <HAL_ADC_Init+0x2ec>)
 8005dcc:	f7ff ff0e 	bl	8005bec <LL_ADC_IsEnabled>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	4323      	orrs	r3, r4
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	bf0c      	ite	eq
 8005dd8:	2301      	moveq	r3, #1
 8005dda:	2300      	movne	r3, #0
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	e012      	b.n	8005e06 <HAL_ADC_Init+0x15a>
 8005de0:	486e      	ldr	r0, [pc, #440]	@ (8005f9c <HAL_ADC_Init+0x2f0>)
 8005de2:	f7ff ff03 	bl	8005bec <LL_ADC_IsEnabled>
 8005de6:	4604      	mov	r4, r0
 8005de8:	486d      	ldr	r0, [pc, #436]	@ (8005fa0 <HAL_ADC_Init+0x2f4>)
 8005dea:	f7ff feff 	bl	8005bec <LL_ADC_IsEnabled>
 8005dee:	4603      	mov	r3, r0
 8005df0:	431c      	orrs	r4, r3
 8005df2:	486c      	ldr	r0, [pc, #432]	@ (8005fa4 <HAL_ADC_Init+0x2f8>)
 8005df4:	f7ff fefa 	bl	8005bec <LL_ADC_IsEnabled>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	4323      	orrs	r3, r4
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	bf0c      	ite	eq
 8005e00:	2301      	moveq	r3, #1
 8005e02:	2300      	movne	r3, #0
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d012      	beq.n	8005e30 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e12:	d004      	beq.n	8005e1e <HAL_ADC_Init+0x172>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a5f      	ldr	r2, [pc, #380]	@ (8005f98 <HAL_ADC_Init+0x2ec>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d101      	bne.n	8005e22 <HAL_ADC_Init+0x176>
 8005e1e:	4a62      	ldr	r2, [pc, #392]	@ (8005fa8 <HAL_ADC_Init+0x2fc>)
 8005e20:	e000      	b.n	8005e24 <HAL_ADC_Init+0x178>
 8005e22:	4a62      	ldr	r2, [pc, #392]	@ (8005fac <HAL_ADC_Init+0x300>)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	4619      	mov	r1, r3
 8005e2a:	4610      	mov	r0, r2
 8005e2c:	f7ff fcfa 	bl	8005824 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	7f5b      	ldrb	r3, [r3, #29]
 8005e34:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005e3a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005e40:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005e46:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e4e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005e50:	4313      	orrs	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d106      	bne.n	8005e6c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e62:	3b01      	subs	r3, #1
 8005e64:	045b      	lsls	r3, r3, #17
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d009      	beq.n	8005e88 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e78:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e80:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	4b48      	ldr	r3, [pc, #288]	@ (8005fb0 <HAL_ADC_Init+0x304>)
 8005e90:	4013      	ands	r3, r2
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6812      	ldr	r2, [r2, #0]
 8005e96:	69b9      	ldr	r1, [r7, #24]
 8005e98:	430b      	orrs	r3, r1
 8005e9a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff fee5 	bl	8005c86 <LL_ADC_INJ_IsConversionOngoing>
 8005ebc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d17f      	bne.n	8005fc4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d17c      	bne.n	8005fc4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005ece:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005ed6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ee6:	f023 0302 	bic.w	r3, r3, #2
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6812      	ldr	r2, [r2, #0]
 8005eee:	69b9      	ldr	r1, [r7, #24]
 8005ef0:	430b      	orrs	r3, r1
 8005ef2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d017      	beq.n	8005f2c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691a      	ldr	r2, [r3, #16]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005f0a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005f14:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005f18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	6911      	ldr	r1, [r2, #16]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	6812      	ldr	r2, [r2, #0]
 8005f24:	430b      	orrs	r3, r1
 8005f26:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005f2a:	e013      	b.n	8005f54 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691a      	ldr	r2, [r3, #16]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005f3a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	6812      	ldr	r2, [r2, #0]
 8005f48:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005f4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005f50:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d12a      	bne.n	8005fb4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005f68:	f023 0304 	bic.w	r3, r3, #4
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005f74:	4311      	orrs	r1, r2
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005f7a:	4311      	orrs	r1, r2
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005f80:	430a      	orrs	r2, r1
 8005f82:	431a      	orrs	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f042 0201 	orr.w	r2, r2, #1
 8005f8c:	611a      	str	r2, [r3, #16]
 8005f8e:	e019      	b.n	8005fc4 <HAL_ADC_Init+0x318>
 8005f90:	20000168 	.word	0x20000168
 8005f94:	053e2d63 	.word	0x053e2d63
 8005f98:	50000100 	.word	0x50000100
 8005f9c:	50000400 	.word	0x50000400
 8005fa0:	50000500 	.word	0x50000500
 8005fa4:	50000600 	.word	0x50000600
 8005fa8:	50000300 	.word	0x50000300
 8005fac:	50000700 	.word	0x50000700
 8005fb0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	691a      	ldr	r2, [r3, #16]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 0201 	bic.w	r2, r2, #1
 8005fc2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d10c      	bne.n	8005fe6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd2:	f023 010f 	bic.w	r1, r3, #15
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	1e5a      	subs	r2, r3, #1
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fe4:	e007      	b.n	8005ff6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 020f 	bic.w	r2, r2, #15
 8005ff4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ffa:	f023 0303 	bic.w	r3, r3, #3
 8005ffe:	f043 0201 	orr.w	r2, r3, #1
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006006:	e007      	b.n	8006018 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800600c:	f043 0210 	orr.w	r2, r3, #16
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006018:	7ffb      	ldrb	r3, [r7, #31]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3724      	adds	r7, #36	@ 0x24
 800601e:	46bd      	mov	sp, r7
 8006020:	bd90      	pop	{r4, r7, pc}
 8006022:	bf00      	nop

08006024 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006038:	d004      	beq.n	8006044 <HAL_ADC_Start_DMA+0x20>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a5a      	ldr	r2, [pc, #360]	@ (80061a8 <HAL_ADC_Start_DMA+0x184>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d101      	bne.n	8006048 <HAL_ADC_Start_DMA+0x24>
 8006044:	4b59      	ldr	r3, [pc, #356]	@ (80061ac <HAL_ADC_Start_DMA+0x188>)
 8006046:	e000      	b.n	800604a <HAL_ADC_Start_DMA+0x26>
 8006048:	4b59      	ldr	r3, [pc, #356]	@ (80061b0 <HAL_ADC_Start_DMA+0x18c>)
 800604a:	4618      	mov	r0, r3
 800604c:	f7ff fd4a 	bl	8005ae4 <LL_ADC_GetMultimode>
 8006050:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff fe02 	bl	8005c60 <LL_ADC_REG_IsConversionOngoing>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	f040 809b 	bne.w	800619a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800606a:	2b01      	cmp	r3, #1
 800606c:	d101      	bne.n	8006072 <HAL_ADC_Start_DMA+0x4e>
 800606e:	2302      	movs	r3, #2
 8006070:	e096      	b.n	80061a0 <HAL_ADC_Start_DMA+0x17c>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a4d      	ldr	r2, [pc, #308]	@ (80061b4 <HAL_ADC_Start_DMA+0x190>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d008      	beq.n	8006096 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d005      	beq.n	8006096 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	2b05      	cmp	r3, #5
 800608e:	d002      	beq.n	8006096 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	2b09      	cmp	r3, #9
 8006094:	d17a      	bne.n	800618c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f000 fcf6 	bl	8006a88 <ADC_Enable>
 800609c:	4603      	mov	r3, r0
 800609e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80060a0:	7dfb      	ldrb	r3, [r7, #23]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d16d      	bne.n	8006182 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060aa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80060ae:	f023 0301 	bic.w	r3, r3, #1
 80060b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a3a      	ldr	r2, [pc, #232]	@ (80061a8 <HAL_ADC_Start_DMA+0x184>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d009      	beq.n	80060d8 <HAL_ADC_Start_DMA+0xb4>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a3b      	ldr	r2, [pc, #236]	@ (80061b8 <HAL_ADC_Start_DMA+0x194>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d002      	beq.n	80060d4 <HAL_ADC_Start_DMA+0xb0>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	e003      	b.n	80060dc <HAL_ADC_Start_DMA+0xb8>
 80060d4:	4b39      	ldr	r3, [pc, #228]	@ (80061bc <HAL_ADC_Start_DMA+0x198>)
 80060d6:	e001      	b.n	80060dc <HAL_ADC_Start_DMA+0xb8>
 80060d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	6812      	ldr	r2, [r2, #0]
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d002      	beq.n	80060ea <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d105      	bne.n	80060f6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060ee:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d006      	beq.n	8006110 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006106:	f023 0206 	bic.w	r2, r3, #6
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	661a      	str	r2, [r3, #96]	@ 0x60
 800610e:	e002      	b.n	8006116 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800611a:	4a29      	ldr	r2, [pc, #164]	@ (80061c0 <HAL_ADC_Start_DMA+0x19c>)
 800611c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006122:	4a28      	ldr	r2, [pc, #160]	@ (80061c4 <HAL_ADC_Start_DMA+0x1a0>)
 8006124:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800612a:	4a27      	ldr	r2, [pc, #156]	@ (80061c8 <HAL_ADC_Start_DMA+0x1a4>)
 800612c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	221c      	movs	r2, #28
 8006134:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f042 0210 	orr.w	r2, r2, #16
 800614c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68da      	ldr	r2, [r3, #12]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f042 0201 	orr.w	r2, r2, #1
 800615c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3340      	adds	r3, #64	@ 0x40
 8006168:	4619      	mov	r1, r3
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f001 f989 	bl	8007484 <HAL_DMA_Start_IT>
 8006172:	4603      	mov	r3, r0
 8006174:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff fd5c 	bl	8005c38 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006180:	e00d      	b.n	800619e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800618a:	e008      	b.n	800619e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8006198:	e001      	b.n	800619e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800619a:	2302      	movs	r3, #2
 800619c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800619e:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3718      	adds	r7, #24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	50000100 	.word	0x50000100
 80061ac:	50000300 	.word	0x50000300
 80061b0:	50000700 	.word	0x50000700
 80061b4:	50000600 	.word	0x50000600
 80061b8:	50000500 	.word	0x50000500
 80061bc:	50000400 	.word	0x50000400
 80061c0:	08006c73 	.word	0x08006c73
 80061c4:	08006d4b 	.word	0x08006d4b
 80061c8:	08006d67 	.word	0x08006d67

080061cc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b0b6      	sub	sp, #216	@ 0xd8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006218:	2300      	movs	r3, #0
 800621a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006222:	2b01      	cmp	r3, #1
 8006224:	d102      	bne.n	800622c <HAL_ADC_ConfigChannel+0x24>
 8006226:	2302      	movs	r3, #2
 8006228:	f000 bc13 	b.w	8006a52 <HAL_ADC_ConfigChannel+0x84a>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4618      	mov	r0, r3
 800623a:	f7ff fd11 	bl	8005c60 <LL_ADC_REG_IsConversionOngoing>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	f040 83f3 	bne.w	8006a2c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6818      	ldr	r0, [r3, #0]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	6859      	ldr	r1, [r3, #4]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	f7ff fbcb 	bl	80059ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4618      	mov	r0, r3
 800625e:	f7ff fcff 	bl	8005c60 <LL_ADC_REG_IsConversionOngoing>
 8006262:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4618      	mov	r0, r3
 800626c:	f7ff fd0b 	bl	8005c86 <LL_ADC_INJ_IsConversionOngoing>
 8006270:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006274:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006278:	2b00      	cmp	r3, #0
 800627a:	f040 81d9 	bne.w	8006630 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800627e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006282:	2b00      	cmp	r3, #0
 8006284:	f040 81d4 	bne.w	8006630 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006290:	d10f      	bne.n	80062b2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2200      	movs	r2, #0
 800629c:	4619      	mov	r1, r3
 800629e:	f7ff fbd2 	bl	8005a46 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7ff fb79 	bl	80059a2 <LL_ADC_SetSamplingTimeCommonConfig>
 80062b0:	e00e      	b.n	80062d0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6818      	ldr	r0, [r3, #0]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	6819      	ldr	r1, [r3, #0]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	461a      	mov	r2, r3
 80062c0:	f7ff fbc1 	bl	8005a46 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2100      	movs	r1, #0
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff fb69 	bl	80059a2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	695a      	ldr	r2, [r3, #20]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	08db      	lsrs	r3, r3, #3
 80062dc:	f003 0303 	and.w	r3, r3, #3
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	fa02 f303 	lsl.w	r3, r2, r3
 80062e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d022      	beq.n	8006338 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6818      	ldr	r0, [r3, #0]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	6919      	ldr	r1, [r3, #16]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006302:	f7ff fac3 	bl	800588c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6818      	ldr	r0, [r3, #0]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	6919      	ldr	r1, [r3, #16]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	461a      	mov	r2, r3
 8006314:	f7ff fb0f 	bl	8005936 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6818      	ldr	r0, [r3, #0]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006324:	2b01      	cmp	r3, #1
 8006326:	d102      	bne.n	800632e <HAL_ADC_ConfigChannel+0x126>
 8006328:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800632c:	e000      	b.n	8006330 <HAL_ADC_ConfigChannel+0x128>
 800632e:	2300      	movs	r3, #0
 8006330:	461a      	mov	r2, r3
 8006332:	f7ff fb1b 	bl	800596c <LL_ADC_SetOffsetSaturation>
 8006336:	e17b      	b.n	8006630 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2100      	movs	r1, #0
 800633e:	4618      	mov	r0, r3
 8006340:	f7ff fac8 	bl	80058d4 <LL_ADC_GetOffsetChannel>
 8006344:	4603      	mov	r3, r0
 8006346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10a      	bne.n	8006364 <HAL_ADC_ConfigChannel+0x15c>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2100      	movs	r1, #0
 8006354:	4618      	mov	r0, r3
 8006356:	f7ff fabd 	bl	80058d4 <LL_ADC_GetOffsetChannel>
 800635a:	4603      	mov	r3, r0
 800635c:	0e9b      	lsrs	r3, r3, #26
 800635e:	f003 021f 	and.w	r2, r3, #31
 8006362:	e01e      	b.n	80063a2 <HAL_ADC_ConfigChannel+0x19a>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2100      	movs	r1, #0
 800636a:	4618      	mov	r0, r3
 800636c:	f7ff fab2 	bl	80058d4 <LL_ADC_GetOffsetChannel>
 8006370:	4603      	mov	r3, r0
 8006372:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006376:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800637a:	fa93 f3a3 	rbit	r3, r3
 800637e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006382:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006386:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800638a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006392:	2320      	movs	r3, #32
 8006394:	e004      	b.n	80063a0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006396:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800639a:	fab3 f383 	clz	r3, r3
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d105      	bne.n	80063ba <HAL_ADC_ConfigChannel+0x1b2>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	0e9b      	lsrs	r3, r3, #26
 80063b4:	f003 031f 	and.w	r3, r3, #31
 80063b8:	e018      	b.n	80063ec <HAL_ADC_ConfigChannel+0x1e4>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80063c6:	fa93 f3a3 	rbit	r3, r3
 80063ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80063ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80063d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80063de:	2320      	movs	r3, #32
 80063e0:	e004      	b.n	80063ec <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80063e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80063e6:	fab3 f383 	clz	r3, r3
 80063ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d106      	bne.n	80063fe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2200      	movs	r2, #0
 80063f6:	2100      	movs	r1, #0
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7ff fa81 	bl	8005900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2101      	movs	r1, #1
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff fa65 	bl	80058d4 <LL_ADC_GetOffsetChannel>
 800640a:	4603      	mov	r3, r0
 800640c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10a      	bne.n	800642a <HAL_ADC_ConfigChannel+0x222>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2101      	movs	r1, #1
 800641a:	4618      	mov	r0, r3
 800641c:	f7ff fa5a 	bl	80058d4 <LL_ADC_GetOffsetChannel>
 8006420:	4603      	mov	r3, r0
 8006422:	0e9b      	lsrs	r3, r3, #26
 8006424:	f003 021f 	and.w	r2, r3, #31
 8006428:	e01e      	b.n	8006468 <HAL_ADC_ConfigChannel+0x260>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2101      	movs	r1, #1
 8006430:	4618      	mov	r0, r3
 8006432:	f7ff fa4f 	bl	80058d4 <LL_ADC_GetOffsetChannel>
 8006436:	4603      	mov	r3, r0
 8006438:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800643c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006440:	fa93 f3a3 	rbit	r3, r3
 8006444:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8006448:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800644c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8006450:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006458:	2320      	movs	r3, #32
 800645a:	e004      	b.n	8006466 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800645c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006460:	fab3 f383 	clz	r3, r3
 8006464:	b2db      	uxtb	r3, r3
 8006466:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006470:	2b00      	cmp	r3, #0
 8006472:	d105      	bne.n	8006480 <HAL_ADC_ConfigChannel+0x278>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	0e9b      	lsrs	r3, r3, #26
 800647a:	f003 031f 	and.w	r3, r3, #31
 800647e:	e018      	b.n	80064b2 <HAL_ADC_ConfigChannel+0x2aa>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006488:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800648c:	fa93 f3a3 	rbit	r3, r3
 8006490:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8006494:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006498:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800649c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80064a4:	2320      	movs	r3, #32
 80064a6:	e004      	b.n	80064b2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80064a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064ac:	fab3 f383 	clz	r3, r3
 80064b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d106      	bne.n	80064c4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2200      	movs	r2, #0
 80064bc:	2101      	movs	r1, #1
 80064be:	4618      	mov	r0, r3
 80064c0:	f7ff fa1e 	bl	8005900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2102      	movs	r1, #2
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7ff fa02 	bl	80058d4 <LL_ADC_GetOffsetChannel>
 80064d0:	4603      	mov	r3, r0
 80064d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10a      	bne.n	80064f0 <HAL_ADC_ConfigChannel+0x2e8>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2102      	movs	r1, #2
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7ff f9f7 	bl	80058d4 <LL_ADC_GetOffsetChannel>
 80064e6:	4603      	mov	r3, r0
 80064e8:	0e9b      	lsrs	r3, r3, #26
 80064ea:	f003 021f 	and.w	r2, r3, #31
 80064ee:	e01e      	b.n	800652e <HAL_ADC_ConfigChannel+0x326>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2102      	movs	r1, #2
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7ff f9ec 	bl	80058d4 <LL_ADC_GetOffsetChannel>
 80064fc:	4603      	mov	r3, r0
 80064fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006502:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006506:	fa93 f3a3 	rbit	r3, r3
 800650a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800650e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006512:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8006516:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800651e:	2320      	movs	r3, #32
 8006520:	e004      	b.n	800652c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006522:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006526:	fab3 f383 	clz	r3, r3
 800652a:	b2db      	uxtb	r3, r3
 800652c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006536:	2b00      	cmp	r3, #0
 8006538:	d105      	bne.n	8006546 <HAL_ADC_ConfigChannel+0x33e>
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	0e9b      	lsrs	r3, r3, #26
 8006540:	f003 031f 	and.w	r3, r3, #31
 8006544:	e016      	b.n	8006574 <HAL_ADC_ConfigChannel+0x36c>
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800654e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006552:	fa93 f3a3 	rbit	r3, r3
 8006556:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8006558:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800655a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800655e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006566:	2320      	movs	r3, #32
 8006568:	e004      	b.n	8006574 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800656a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800656e:	fab3 f383 	clz	r3, r3
 8006572:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006574:	429a      	cmp	r2, r3
 8006576:	d106      	bne.n	8006586 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2200      	movs	r2, #0
 800657e:	2102      	movs	r1, #2
 8006580:	4618      	mov	r0, r3
 8006582:	f7ff f9bd 	bl	8005900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2103      	movs	r1, #3
 800658c:	4618      	mov	r0, r3
 800658e:	f7ff f9a1 	bl	80058d4 <LL_ADC_GetOffsetChannel>
 8006592:	4603      	mov	r3, r0
 8006594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10a      	bne.n	80065b2 <HAL_ADC_ConfigChannel+0x3aa>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2103      	movs	r1, #3
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7ff f996 	bl	80058d4 <LL_ADC_GetOffsetChannel>
 80065a8:	4603      	mov	r3, r0
 80065aa:	0e9b      	lsrs	r3, r3, #26
 80065ac:	f003 021f 	and.w	r2, r3, #31
 80065b0:	e017      	b.n	80065e2 <HAL_ADC_ConfigChannel+0x3da>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2103      	movs	r1, #3
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7ff f98b 	bl	80058d4 <LL_ADC_GetOffsetChannel>
 80065be:	4603      	mov	r3, r0
 80065c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065c4:	fa93 f3a3 	rbit	r3, r3
 80065c8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80065ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065cc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80065ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80065d4:	2320      	movs	r3, #32
 80065d6:	e003      	b.n	80065e0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80065d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065da:	fab3 f383 	clz	r3, r3
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d105      	bne.n	80065fa <HAL_ADC_ConfigChannel+0x3f2>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	0e9b      	lsrs	r3, r3, #26
 80065f4:	f003 031f 	and.w	r3, r3, #31
 80065f8:	e011      	b.n	800661e <HAL_ADC_ConfigChannel+0x416>
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006600:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006602:	fa93 f3a3 	rbit	r3, r3
 8006606:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8006608:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800660a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800660c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006612:	2320      	movs	r3, #32
 8006614:	e003      	b.n	800661e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006616:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006618:	fab3 f383 	clz	r3, r3
 800661c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800661e:	429a      	cmp	r2, r3
 8006620:	d106      	bne.n	8006630 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2200      	movs	r2, #0
 8006628:	2103      	movs	r1, #3
 800662a:	4618      	mov	r0, r3
 800662c:	f7ff f968 	bl	8005900 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4618      	mov	r0, r3
 8006636:	f7ff fad9 	bl	8005bec <LL_ADC_IsEnabled>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	f040 813d 	bne.w	80068bc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6818      	ldr	r0, [r3, #0]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	6819      	ldr	r1, [r3, #0]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	461a      	mov	r2, r3
 8006650:	f7ff fa24 	bl	8005a9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	4aa2      	ldr	r2, [pc, #648]	@ (80068e4 <HAL_ADC_ConfigChannel+0x6dc>)
 800665a:	4293      	cmp	r3, r2
 800665c:	f040 812e 	bne.w	80068bc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10b      	bne.n	8006688 <HAL_ADC_ConfigChannel+0x480>
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	0e9b      	lsrs	r3, r3, #26
 8006676:	3301      	adds	r3, #1
 8006678:	f003 031f 	and.w	r3, r3, #31
 800667c:	2b09      	cmp	r3, #9
 800667e:	bf94      	ite	ls
 8006680:	2301      	movls	r3, #1
 8006682:	2300      	movhi	r3, #0
 8006684:	b2db      	uxtb	r3, r3
 8006686:	e019      	b.n	80066bc <HAL_ADC_ConfigChannel+0x4b4>
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800668e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006690:	fa93 f3a3 	rbit	r3, r3
 8006694:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8006696:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006698:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800669a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80066a0:	2320      	movs	r3, #32
 80066a2:	e003      	b.n	80066ac <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80066a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066a6:	fab3 f383 	clz	r3, r3
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	3301      	adds	r3, #1
 80066ae:	f003 031f 	and.w	r3, r3, #31
 80066b2:	2b09      	cmp	r3, #9
 80066b4:	bf94      	ite	ls
 80066b6:	2301      	movls	r3, #1
 80066b8:	2300      	movhi	r3, #0
 80066ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d079      	beq.n	80067b4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d107      	bne.n	80066dc <HAL_ADC_ConfigChannel+0x4d4>
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	0e9b      	lsrs	r3, r3, #26
 80066d2:	3301      	adds	r3, #1
 80066d4:	069b      	lsls	r3, r3, #26
 80066d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80066da:	e015      	b.n	8006708 <HAL_ADC_ConfigChannel+0x500>
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066e4:	fa93 f3a3 	rbit	r3, r3
 80066e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80066ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80066ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80066f4:	2320      	movs	r3, #32
 80066f6:	e003      	b.n	8006700 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80066f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066fa:	fab3 f383 	clz	r3, r3
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	3301      	adds	r3, #1
 8006702:	069b      	lsls	r3, r3, #26
 8006704:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006710:	2b00      	cmp	r3, #0
 8006712:	d109      	bne.n	8006728 <HAL_ADC_ConfigChannel+0x520>
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	0e9b      	lsrs	r3, r3, #26
 800671a:	3301      	adds	r3, #1
 800671c:	f003 031f 	and.w	r3, r3, #31
 8006720:	2101      	movs	r1, #1
 8006722:	fa01 f303 	lsl.w	r3, r1, r3
 8006726:	e017      	b.n	8006758 <HAL_ADC_ConfigChannel+0x550>
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800672e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006730:	fa93 f3a3 	rbit	r3, r3
 8006734:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8006736:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006738:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800673a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006740:	2320      	movs	r3, #32
 8006742:	e003      	b.n	800674c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006744:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006746:	fab3 f383 	clz	r3, r3
 800674a:	b2db      	uxtb	r3, r3
 800674c:	3301      	adds	r3, #1
 800674e:	f003 031f 	and.w	r3, r3, #31
 8006752:	2101      	movs	r1, #1
 8006754:	fa01 f303 	lsl.w	r3, r1, r3
 8006758:	ea42 0103 	orr.w	r1, r2, r3
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10a      	bne.n	800677e <HAL_ADC_ConfigChannel+0x576>
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	0e9b      	lsrs	r3, r3, #26
 800676e:	3301      	adds	r3, #1
 8006770:	f003 021f 	and.w	r2, r3, #31
 8006774:	4613      	mov	r3, r2
 8006776:	005b      	lsls	r3, r3, #1
 8006778:	4413      	add	r3, r2
 800677a:	051b      	lsls	r3, r3, #20
 800677c:	e018      	b.n	80067b0 <HAL_ADC_ConfigChannel+0x5a8>
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006786:	fa93 f3a3 	rbit	r3, r3
 800678a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800678c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800678e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8006790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006796:	2320      	movs	r3, #32
 8006798:	e003      	b.n	80067a2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800679a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800679c:	fab3 f383 	clz	r3, r3
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	3301      	adds	r3, #1
 80067a4:	f003 021f 	and.w	r2, r3, #31
 80067a8:	4613      	mov	r3, r2
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	4413      	add	r3, r2
 80067ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80067b0:	430b      	orrs	r3, r1
 80067b2:	e07e      	b.n	80068b2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d107      	bne.n	80067d0 <HAL_ADC_ConfigChannel+0x5c8>
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	0e9b      	lsrs	r3, r3, #26
 80067c6:	3301      	adds	r3, #1
 80067c8:	069b      	lsls	r3, r3, #26
 80067ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80067ce:	e015      	b.n	80067fc <HAL_ADC_ConfigChannel+0x5f4>
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d8:	fa93 f3a3 	rbit	r3, r3
 80067dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80067de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80067e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80067e8:	2320      	movs	r3, #32
 80067ea:	e003      	b.n	80067f4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80067ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ee:	fab3 f383 	clz	r3, r3
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	3301      	adds	r3, #1
 80067f6:	069b      	lsls	r3, r3, #26
 80067f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006804:	2b00      	cmp	r3, #0
 8006806:	d109      	bne.n	800681c <HAL_ADC_ConfigChannel+0x614>
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	0e9b      	lsrs	r3, r3, #26
 800680e:	3301      	adds	r3, #1
 8006810:	f003 031f 	and.w	r3, r3, #31
 8006814:	2101      	movs	r1, #1
 8006816:	fa01 f303 	lsl.w	r3, r1, r3
 800681a:	e017      	b.n	800684c <HAL_ADC_ConfigChannel+0x644>
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	fa93 f3a3 	rbit	r3, r3
 8006828:	61fb      	str	r3, [r7, #28]
  return result;
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006834:	2320      	movs	r3, #32
 8006836:	e003      	b.n	8006840 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683a:	fab3 f383 	clz	r3, r3
 800683e:	b2db      	uxtb	r3, r3
 8006840:	3301      	adds	r3, #1
 8006842:	f003 031f 	and.w	r3, r3, #31
 8006846:	2101      	movs	r1, #1
 8006848:	fa01 f303 	lsl.w	r3, r1, r3
 800684c:	ea42 0103 	orr.w	r1, r2, r3
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10d      	bne.n	8006878 <HAL_ADC_ConfigChannel+0x670>
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	0e9b      	lsrs	r3, r3, #26
 8006862:	3301      	adds	r3, #1
 8006864:	f003 021f 	and.w	r2, r3, #31
 8006868:	4613      	mov	r3, r2
 800686a:	005b      	lsls	r3, r3, #1
 800686c:	4413      	add	r3, r2
 800686e:	3b1e      	subs	r3, #30
 8006870:	051b      	lsls	r3, r3, #20
 8006872:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006876:	e01b      	b.n	80068b0 <HAL_ADC_ConfigChannel+0x6a8>
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	fa93 f3a3 	rbit	r3, r3
 8006884:	613b      	str	r3, [r7, #16]
  return result;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006890:	2320      	movs	r3, #32
 8006892:	e003      	b.n	800689c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	fab3 f383 	clz	r3, r3
 800689a:	b2db      	uxtb	r3, r3
 800689c:	3301      	adds	r3, #1
 800689e:	f003 021f 	and.w	r2, r3, #31
 80068a2:	4613      	mov	r3, r2
 80068a4:	005b      	lsls	r3, r3, #1
 80068a6:	4413      	add	r3, r2
 80068a8:	3b1e      	subs	r3, #30
 80068aa:	051b      	lsls	r3, r3, #20
 80068ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80068b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80068b6:	4619      	mov	r1, r3
 80068b8:	f7ff f8c5 	bl	8005a46 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	4b09      	ldr	r3, [pc, #36]	@ (80068e8 <HAL_ADC_ConfigChannel+0x6e0>)
 80068c2:	4013      	ands	r3, r2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 80be 	beq.w	8006a46 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068d2:	d004      	beq.n	80068de <HAL_ADC_ConfigChannel+0x6d6>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a04      	ldr	r2, [pc, #16]	@ (80068ec <HAL_ADC_ConfigChannel+0x6e4>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d10a      	bne.n	80068f4 <HAL_ADC_ConfigChannel+0x6ec>
 80068de:	4b04      	ldr	r3, [pc, #16]	@ (80068f0 <HAL_ADC_ConfigChannel+0x6e8>)
 80068e0:	e009      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x6ee>
 80068e2:	bf00      	nop
 80068e4:	407f0000 	.word	0x407f0000
 80068e8:	80080000 	.word	0x80080000
 80068ec:	50000100 	.word	0x50000100
 80068f0:	50000300 	.word	0x50000300
 80068f4:	4b59      	ldr	r3, [pc, #356]	@ (8006a5c <HAL_ADC_ConfigChannel+0x854>)
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fe ffba 	bl	8005870 <LL_ADC_GetCommonPathInternalCh>
 80068fc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a56      	ldr	r2, [pc, #344]	@ (8006a60 <HAL_ADC_ConfigChannel+0x858>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d004      	beq.n	8006914 <HAL_ADC_ConfigChannel+0x70c>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a55      	ldr	r2, [pc, #340]	@ (8006a64 <HAL_ADC_ConfigChannel+0x85c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d13a      	bne.n	800698a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006914:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006918:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d134      	bne.n	800698a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006928:	d005      	beq.n	8006936 <HAL_ADC_ConfigChannel+0x72e>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a4e      	ldr	r2, [pc, #312]	@ (8006a68 <HAL_ADC_ConfigChannel+0x860>)
 8006930:	4293      	cmp	r3, r2
 8006932:	f040 8085 	bne.w	8006a40 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800693e:	d004      	beq.n	800694a <HAL_ADC_ConfigChannel+0x742>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a49      	ldr	r2, [pc, #292]	@ (8006a6c <HAL_ADC_ConfigChannel+0x864>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d101      	bne.n	800694e <HAL_ADC_ConfigChannel+0x746>
 800694a:	4a49      	ldr	r2, [pc, #292]	@ (8006a70 <HAL_ADC_ConfigChannel+0x868>)
 800694c:	e000      	b.n	8006950 <HAL_ADC_ConfigChannel+0x748>
 800694e:	4a43      	ldr	r2, [pc, #268]	@ (8006a5c <HAL_ADC_ConfigChannel+0x854>)
 8006950:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006954:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006958:	4619      	mov	r1, r3
 800695a:	4610      	mov	r0, r2
 800695c:	f7fe ff75 	bl	800584a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006960:	4b44      	ldr	r3, [pc, #272]	@ (8006a74 <HAL_ADC_ConfigChannel+0x86c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	099b      	lsrs	r3, r3, #6
 8006966:	4a44      	ldr	r2, [pc, #272]	@ (8006a78 <HAL_ADC_ConfigChannel+0x870>)
 8006968:	fba2 2303 	umull	r2, r3, r2, r3
 800696c:	099b      	lsrs	r3, r3, #6
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	4613      	mov	r3, r2
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	4413      	add	r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800697a:	e002      	b.n	8006982 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	3b01      	subs	r3, #1
 8006980:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1f9      	bne.n	800697c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006988:	e05a      	b.n	8006a40 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a3b      	ldr	r2, [pc, #236]	@ (8006a7c <HAL_ADC_ConfigChannel+0x874>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d125      	bne.n	80069e0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006994:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006998:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d11f      	bne.n	80069e0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a31      	ldr	r2, [pc, #196]	@ (8006a6c <HAL_ADC_ConfigChannel+0x864>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d104      	bne.n	80069b4 <HAL_ADC_ConfigChannel+0x7ac>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a34      	ldr	r2, [pc, #208]	@ (8006a80 <HAL_ADC_ConfigChannel+0x878>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d047      	beq.n	8006a44 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069bc:	d004      	beq.n	80069c8 <HAL_ADC_ConfigChannel+0x7c0>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a2a      	ldr	r2, [pc, #168]	@ (8006a6c <HAL_ADC_ConfigChannel+0x864>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d101      	bne.n	80069cc <HAL_ADC_ConfigChannel+0x7c4>
 80069c8:	4a29      	ldr	r2, [pc, #164]	@ (8006a70 <HAL_ADC_ConfigChannel+0x868>)
 80069ca:	e000      	b.n	80069ce <HAL_ADC_ConfigChannel+0x7c6>
 80069cc:	4a23      	ldr	r2, [pc, #140]	@ (8006a5c <HAL_ADC_ConfigChannel+0x854>)
 80069ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80069d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069d6:	4619      	mov	r1, r3
 80069d8:	4610      	mov	r0, r2
 80069da:	f7fe ff36 	bl	800584a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80069de:	e031      	b.n	8006a44 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a27      	ldr	r2, [pc, #156]	@ (8006a84 <HAL_ADC_ConfigChannel+0x87c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d12d      	bne.n	8006a46 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80069ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80069ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d127      	bne.n	8006a46 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a1c      	ldr	r2, [pc, #112]	@ (8006a6c <HAL_ADC_ConfigChannel+0x864>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d022      	beq.n	8006a46 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a08:	d004      	beq.n	8006a14 <HAL_ADC_ConfigChannel+0x80c>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a17      	ldr	r2, [pc, #92]	@ (8006a6c <HAL_ADC_ConfigChannel+0x864>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d101      	bne.n	8006a18 <HAL_ADC_ConfigChannel+0x810>
 8006a14:	4a16      	ldr	r2, [pc, #88]	@ (8006a70 <HAL_ADC_ConfigChannel+0x868>)
 8006a16:	e000      	b.n	8006a1a <HAL_ADC_ConfigChannel+0x812>
 8006a18:	4a10      	ldr	r2, [pc, #64]	@ (8006a5c <HAL_ADC_ConfigChannel+0x854>)
 8006a1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006a1e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006a22:	4619      	mov	r1, r3
 8006a24:	4610      	mov	r0, r2
 8006a26:	f7fe ff10 	bl	800584a <LL_ADC_SetCommonPathInternalCh>
 8006a2a:	e00c      	b.n	8006a46 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a30:	f043 0220 	orr.w	r2, r3, #32
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8006a3e:	e002      	b.n	8006a46 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006a40:	bf00      	nop
 8006a42:	e000      	b.n	8006a46 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006a44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006a4e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	37d8      	adds	r7, #216	@ 0xd8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	50000700 	.word	0x50000700
 8006a60:	c3210000 	.word	0xc3210000
 8006a64:	90c00010 	.word	0x90c00010
 8006a68:	50000600 	.word	0x50000600
 8006a6c:	50000100 	.word	0x50000100
 8006a70:	50000300 	.word	0x50000300
 8006a74:	20000168 	.word	0x20000168
 8006a78:	053e2d63 	.word	0x053e2d63
 8006a7c:	c7520000 	.word	0xc7520000
 8006a80:	50000500 	.word	0x50000500
 8006a84:	cb840000 	.word	0xcb840000

08006a88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006a90:	2300      	movs	r3, #0
 8006a92:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7ff f8a7 	bl	8005bec <LL_ADC_IsEnabled>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d176      	bne.n	8006b92 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689a      	ldr	r2, [r3, #8]
 8006aaa:	4b3c      	ldr	r3, [pc, #240]	@ (8006b9c <ADC_Enable+0x114>)
 8006aac:	4013      	ands	r3, r2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00d      	beq.n	8006ace <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ab6:	f043 0210 	orr.w	r2, r3, #16
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ac2:	f043 0201 	orr.w	r2, r3, #1
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e062      	b.n	8006b94 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7ff f862 	bl	8005b9c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ae0:	d004      	beq.n	8006aec <ADC_Enable+0x64>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a2e      	ldr	r2, [pc, #184]	@ (8006ba0 <ADC_Enable+0x118>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d101      	bne.n	8006af0 <ADC_Enable+0x68>
 8006aec:	4b2d      	ldr	r3, [pc, #180]	@ (8006ba4 <ADC_Enable+0x11c>)
 8006aee:	e000      	b.n	8006af2 <ADC_Enable+0x6a>
 8006af0:	4b2d      	ldr	r3, [pc, #180]	@ (8006ba8 <ADC_Enable+0x120>)
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fe febc 	bl	8005870 <LL_ADC_GetCommonPathInternalCh>
 8006af8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006afa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d013      	beq.n	8006b2a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006b02:	4b2a      	ldr	r3, [pc, #168]	@ (8006bac <ADC_Enable+0x124>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	099b      	lsrs	r3, r3, #6
 8006b08:	4a29      	ldr	r2, [pc, #164]	@ (8006bb0 <ADC_Enable+0x128>)
 8006b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b0e:	099b      	lsrs	r3, r3, #6
 8006b10:	1c5a      	adds	r2, r3, #1
 8006b12:	4613      	mov	r3, r2
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	4413      	add	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006b1c:	e002      	b.n	8006b24 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1f9      	bne.n	8006b1e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006b2a:	f7fe fe6f 	bl	800580c <HAL_GetTick>
 8006b2e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006b30:	e028      	b.n	8006b84 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7ff f858 	bl	8005bec <LL_ADC_IsEnabled>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d104      	bne.n	8006b4c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7ff f828 	bl	8005b9c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006b4c:	f7fe fe5e 	bl	800580c <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d914      	bls.n	8006b84 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d00d      	beq.n	8006b84 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b6c:	f043 0210 	orr.w	r2, r3, #16
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b78:	f043 0201 	orr.w	r2, r3, #1
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e007      	b.n	8006b94 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d1cf      	bne.n	8006b32 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	8000003f 	.word	0x8000003f
 8006ba0:	50000100 	.word	0x50000100
 8006ba4:	50000300 	.word	0x50000300
 8006ba8:	50000700 	.word	0x50000700
 8006bac:	20000168 	.word	0x20000168
 8006bb0:	053e2d63 	.word	0x053e2d63

08006bb4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7ff f826 	bl	8005c12 <LL_ADC_IsDisableOngoing>
 8006bc6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7ff f80d 	bl	8005bec <LL_ADC_IsEnabled>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d047      	beq.n	8006c68 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d144      	bne.n	8006c68 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f003 030d 	and.w	r3, r3, #13
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d10c      	bne.n	8006c06 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7fe ffe7 	bl	8005bc4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2203      	movs	r2, #3
 8006bfc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006bfe:	f7fe fe05 	bl	800580c <HAL_GetTick>
 8006c02:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006c04:	e029      	b.n	8006c5a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c0a:	f043 0210 	orr.w	r2, r3, #16
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c16:	f043 0201 	orr.w	r2, r3, #1
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e023      	b.n	8006c6a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006c22:	f7fe fdf3 	bl	800580c <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d914      	bls.n	8006c5a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00d      	beq.n	8006c5a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c42:	f043 0210 	orr.w	r2, r3, #16
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c4e:	f043 0201 	orr.w	r2, r3, #1
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e007      	b.n	8006c6a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1dc      	bne.n	8006c22 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b084      	sub	sp, #16
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c84:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d14b      	bne.n	8006d24 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c90:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0308 	and.w	r3, r3, #8
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d021      	beq.n	8006cea <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7fe fe8c 	bl	80059c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d032      	beq.n	8006d1c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d12b      	bne.n	8006d1c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d11f      	bne.n	8006d1c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ce0:	f043 0201 	orr.w	r2, r3, #1
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006ce8:	e018      	b.n	8006d1c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d111      	bne.n	8006d1c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d105      	bne.n	8006d1c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d14:	f043 0201 	orr.w	r2, r3, #1
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f7ff fa55 	bl	80061cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006d22:	e00e      	b.n	8006d42 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d28:	f003 0310 	and.w	r3, r3, #16
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d003      	beq.n	8006d38 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f7ff fa5f 	bl	80061f4 <HAL_ADC_ErrorCallback>
}
 8006d36:	e004      	b.n	8006d42 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	4798      	blx	r3
}
 8006d42:	bf00      	nop
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f7ff fa41 	bl	80061e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d5e:	bf00      	nop
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b084      	sub	sp, #16
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d84:	f043 0204 	orr.w	r2, r3, #4
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f7ff fa31 	bl	80061f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d92:	bf00      	nop
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <LL_ADC_IsEnabled>:
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b083      	sub	sp, #12
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d101      	bne.n	8006db2 <LL_ADC_IsEnabled+0x18>
 8006dae:	2301      	movs	r3, #1
 8006db0:	e000      	b.n	8006db4 <LL_ADC_IsEnabled+0x1a>
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <LL_ADC_StartCalibration>:
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8006dd2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	609a      	str	r2, [r3, #8]
}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <LL_ADC_IsCalibrationOnGoing>:
{
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e06:	d101      	bne.n	8006e0c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e000      	b.n	8006e0e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <LL_ADC_REG_IsConversionOngoing>:
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b083      	sub	sp, #12
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f003 0304 	and.w	r3, r3, #4
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	d101      	bne.n	8006e32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e000      	b.n	8006e34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d101      	bne.n	8006e5c <HAL_ADCEx_Calibration_Start+0x1c>
 8006e58:	2302      	movs	r3, #2
 8006e5a:	e04d      	b.n	8006ef8 <HAL_ADCEx_Calibration_Start+0xb8>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff fea5 	bl	8006bb4 <ADC_Disable>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d136      	bne.n	8006ee2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e78:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006e7c:	f023 0302 	bic.w	r3, r3, #2
 8006e80:	f043 0202 	orr.w	r2, r3, #2
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	6839      	ldr	r1, [r7, #0]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7ff ff96 	bl	8006dc0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006e94:	e014      	b.n	8006ec0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	4a18      	ldr	r2, [pc, #96]	@ (8006f00 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d90d      	bls.n	8006ec0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ea8:	f023 0312 	bic.w	r3, r3, #18
 8006eac:	f043 0210 	orr.w	r2, r3, #16
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e01b      	b.n	8006ef8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7ff ff94 	bl	8006df2 <LL_ADC_IsCalibrationOnGoing>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e2      	bne.n	8006e96 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ed4:	f023 0303 	bic.w	r3, r3, #3
 8006ed8:	f043 0201 	orr.w	r2, r3, #1
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006ee0:	e005      	b.n	8006eee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ee6:	f043 0210 	orr.w	r2, r3, #16
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	0004de01 	.word	0x0004de01

08006f04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006f04:	b590      	push	{r4, r7, lr}
 8006f06:	b0a1      	sub	sp, #132	@ 0x84
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d101      	bne.n	8006f22 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006f1e:	2302      	movs	r3, #2
 8006f20:	e0e7      	b.n	80070f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006f2e:	2300      	movs	r3, #0
 8006f30:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f3a:	d102      	bne.n	8006f42 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006f3c:	4b6f      	ldr	r3, [pc, #444]	@ (80070fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006f3e:	60bb      	str	r3, [r7, #8]
 8006f40:	e009      	b.n	8006f56 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a6e      	ldr	r2, [pc, #440]	@ (8007100 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d102      	bne.n	8006f52 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006f4c:	4b6d      	ldr	r3, [pc, #436]	@ (8007104 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006f4e:	60bb      	str	r3, [r7, #8]
 8006f50:	e001      	b.n	8006f56 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006f52:	2300      	movs	r3, #0
 8006f54:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10b      	bne.n	8006f74 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f60:	f043 0220 	orr.w	r2, r3, #32
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e0be      	b.n	80070f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7ff ff4f 	bl	8006e1a <LL_ADC_REG_IsConversionOngoing>
 8006f7c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7ff ff49 	bl	8006e1a <LL_ADC_REG_IsConversionOngoing>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f040 80a0 	bne.w	80070d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006f90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f040 809c 	bne.w	80070d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fa0:	d004      	beq.n	8006fac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a55      	ldr	r2, [pc, #340]	@ (80070fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d101      	bne.n	8006fb0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006fac:	4b56      	ldr	r3, [pc, #344]	@ (8007108 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006fae:	e000      	b.n	8006fb2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006fb0:	4b56      	ldr	r3, [pc, #344]	@ (800710c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8006fb2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d04b      	beq.n	8007054 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006fbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	6859      	ldr	r1, [r3, #4]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006fce:	035b      	lsls	r3, r3, #13
 8006fd0:	430b      	orrs	r3, r1
 8006fd2:	431a      	orrs	r2, r3
 8006fd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006fd6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fe0:	d004      	beq.n	8006fec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a45      	ldr	r2, [pc, #276]	@ (80070fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d10f      	bne.n	800700c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006fec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006ff0:	f7ff fed3 	bl	8006d9a <LL_ADC_IsEnabled>
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	4841      	ldr	r0, [pc, #260]	@ (80070fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006ff8:	f7ff fecf 	bl	8006d9a <LL_ADC_IsEnabled>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	4323      	orrs	r3, r4
 8007000:	2b00      	cmp	r3, #0
 8007002:	bf0c      	ite	eq
 8007004:	2301      	moveq	r3, #1
 8007006:	2300      	movne	r3, #0
 8007008:	b2db      	uxtb	r3, r3
 800700a:	e012      	b.n	8007032 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800700c:	483c      	ldr	r0, [pc, #240]	@ (8007100 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800700e:	f7ff fec4 	bl	8006d9a <LL_ADC_IsEnabled>
 8007012:	4604      	mov	r4, r0
 8007014:	483b      	ldr	r0, [pc, #236]	@ (8007104 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007016:	f7ff fec0 	bl	8006d9a <LL_ADC_IsEnabled>
 800701a:	4603      	mov	r3, r0
 800701c:	431c      	orrs	r4, r3
 800701e:	483c      	ldr	r0, [pc, #240]	@ (8007110 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007020:	f7ff febb 	bl	8006d9a <LL_ADC_IsEnabled>
 8007024:	4603      	mov	r3, r0
 8007026:	4323      	orrs	r3, r4
 8007028:	2b00      	cmp	r3, #0
 800702a:	bf0c      	ite	eq
 800702c:	2301      	moveq	r3, #1
 800702e:	2300      	movne	r3, #0
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d056      	beq.n	80070e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007036:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800703e:	f023 030f 	bic.w	r3, r3, #15
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	6811      	ldr	r1, [r2, #0]
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	6892      	ldr	r2, [r2, #8]
 800704a:	430a      	orrs	r2, r1
 800704c:	431a      	orrs	r2, r3
 800704e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007050:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007052:	e047      	b.n	80070e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007054:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800705c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800705e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007068:	d004      	beq.n	8007074 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a23      	ldr	r2, [pc, #140]	@ (80070fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d10f      	bne.n	8007094 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8007074:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007078:	f7ff fe8f 	bl	8006d9a <LL_ADC_IsEnabled>
 800707c:	4604      	mov	r4, r0
 800707e:	481f      	ldr	r0, [pc, #124]	@ (80070fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007080:	f7ff fe8b 	bl	8006d9a <LL_ADC_IsEnabled>
 8007084:	4603      	mov	r3, r0
 8007086:	4323      	orrs	r3, r4
 8007088:	2b00      	cmp	r3, #0
 800708a:	bf0c      	ite	eq
 800708c:	2301      	moveq	r3, #1
 800708e:	2300      	movne	r3, #0
 8007090:	b2db      	uxtb	r3, r3
 8007092:	e012      	b.n	80070ba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8007094:	481a      	ldr	r0, [pc, #104]	@ (8007100 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007096:	f7ff fe80 	bl	8006d9a <LL_ADC_IsEnabled>
 800709a:	4604      	mov	r4, r0
 800709c:	4819      	ldr	r0, [pc, #100]	@ (8007104 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800709e:	f7ff fe7c 	bl	8006d9a <LL_ADC_IsEnabled>
 80070a2:	4603      	mov	r3, r0
 80070a4:	431c      	orrs	r4, r3
 80070a6:	481a      	ldr	r0, [pc, #104]	@ (8007110 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80070a8:	f7ff fe77 	bl	8006d9a <LL_ADC_IsEnabled>
 80070ac:	4603      	mov	r3, r0
 80070ae:	4323      	orrs	r3, r4
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	bf0c      	ite	eq
 80070b4:	2301      	moveq	r3, #1
 80070b6:	2300      	movne	r3, #0
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d012      	beq.n	80070e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80070be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80070c6:	f023 030f 	bic.w	r3, r3, #15
 80070ca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80070cc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80070ce:	e009      	b.n	80070e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070d4:	f043 0220 	orr.w	r2, r3, #32
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80070e2:	e000      	b.n	80070e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80070e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80070ee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3784      	adds	r7, #132	@ 0x84
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd90      	pop	{r4, r7, pc}
 80070fa:	bf00      	nop
 80070fc:	50000100 	.word	0x50000100
 8007100:	50000400 	.word	0x50000400
 8007104:	50000500 	.word	0x50000500
 8007108:	50000300 	.word	0x50000300
 800710c:	50000700 	.word	0x50000700
 8007110:	50000600 	.word	0x50000600

08007114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f003 0307 	and.w	r3, r3, #7
 8007122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007124:	4b0c      	ldr	r3, [pc, #48]	@ (8007158 <__NVIC_SetPriorityGrouping+0x44>)
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007130:	4013      	ands	r3, r2
 8007132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800713c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007146:	4a04      	ldr	r2, [pc, #16]	@ (8007158 <__NVIC_SetPriorityGrouping+0x44>)
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	60d3      	str	r3, [r2, #12]
}
 800714c:	bf00      	nop
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr
 8007158:	e000ed00 	.word	0xe000ed00

0800715c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800715c:	b480      	push	{r7}
 800715e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007160:	4b04      	ldr	r3, [pc, #16]	@ (8007174 <__NVIC_GetPriorityGrouping+0x18>)
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	0a1b      	lsrs	r3, r3, #8
 8007166:	f003 0307 	and.w	r3, r3, #7
}
 800716a:	4618      	mov	r0, r3
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr
 8007174:	e000ed00 	.word	0xe000ed00

08007178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	4603      	mov	r3, r0
 8007180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007186:	2b00      	cmp	r3, #0
 8007188:	db0b      	blt.n	80071a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800718a:	79fb      	ldrb	r3, [r7, #7]
 800718c:	f003 021f 	and.w	r2, r3, #31
 8007190:	4907      	ldr	r1, [pc, #28]	@ (80071b0 <__NVIC_EnableIRQ+0x38>)
 8007192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007196:	095b      	lsrs	r3, r3, #5
 8007198:	2001      	movs	r0, #1
 800719a:	fa00 f202 	lsl.w	r2, r0, r2
 800719e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80071a2:	bf00      	nop
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	e000e100 	.word	0xe000e100

080071b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	4603      	mov	r3, r0
 80071bc:	6039      	str	r1, [r7, #0]
 80071be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	db0a      	blt.n	80071de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	b2da      	uxtb	r2, r3
 80071cc:	490c      	ldr	r1, [pc, #48]	@ (8007200 <__NVIC_SetPriority+0x4c>)
 80071ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071d2:	0112      	lsls	r2, r2, #4
 80071d4:	b2d2      	uxtb	r2, r2
 80071d6:	440b      	add	r3, r1
 80071d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80071dc:	e00a      	b.n	80071f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	b2da      	uxtb	r2, r3
 80071e2:	4908      	ldr	r1, [pc, #32]	@ (8007204 <__NVIC_SetPriority+0x50>)
 80071e4:	79fb      	ldrb	r3, [r7, #7]
 80071e6:	f003 030f 	and.w	r3, r3, #15
 80071ea:	3b04      	subs	r3, #4
 80071ec:	0112      	lsls	r2, r2, #4
 80071ee:	b2d2      	uxtb	r2, r2
 80071f0:	440b      	add	r3, r1
 80071f2:	761a      	strb	r2, [r3, #24]
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr
 8007200:	e000e100 	.word	0xe000e100
 8007204:	e000ed00 	.word	0xe000ed00

08007208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007208:	b480      	push	{r7}
 800720a:	b089      	sub	sp, #36	@ 0x24
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f003 0307 	and.w	r3, r3, #7
 800721a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	f1c3 0307 	rsb	r3, r3, #7
 8007222:	2b04      	cmp	r3, #4
 8007224:	bf28      	it	cs
 8007226:	2304      	movcs	r3, #4
 8007228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	3304      	adds	r3, #4
 800722e:	2b06      	cmp	r3, #6
 8007230:	d902      	bls.n	8007238 <NVIC_EncodePriority+0x30>
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	3b03      	subs	r3, #3
 8007236:	e000      	b.n	800723a <NVIC_EncodePriority+0x32>
 8007238:	2300      	movs	r3, #0
 800723a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800723c:	f04f 32ff 	mov.w	r2, #4294967295
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	fa02 f303 	lsl.w	r3, r2, r3
 8007246:	43da      	mvns	r2, r3
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	401a      	ands	r2, r3
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007250:	f04f 31ff 	mov.w	r1, #4294967295
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	fa01 f303 	lsl.w	r3, r1, r3
 800725a:	43d9      	mvns	r1, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007260:	4313      	orrs	r3, r2
         );
}
 8007262:	4618      	mov	r0, r3
 8007264:	3724      	adds	r7, #36	@ 0x24
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
	...

08007270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	3b01      	subs	r3, #1
 800727c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007280:	d301      	bcc.n	8007286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007282:	2301      	movs	r3, #1
 8007284:	e00f      	b.n	80072a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007286:	4a0a      	ldr	r2, [pc, #40]	@ (80072b0 <SysTick_Config+0x40>)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	3b01      	subs	r3, #1
 800728c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800728e:	210f      	movs	r1, #15
 8007290:	f04f 30ff 	mov.w	r0, #4294967295
 8007294:	f7ff ff8e 	bl	80071b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007298:	4b05      	ldr	r3, [pc, #20]	@ (80072b0 <SysTick_Config+0x40>)
 800729a:	2200      	movs	r2, #0
 800729c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800729e:	4b04      	ldr	r3, [pc, #16]	@ (80072b0 <SysTick_Config+0x40>)
 80072a0:	2207      	movs	r2, #7
 80072a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3708      	adds	r7, #8
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	e000e010 	.word	0xe000e010

080072b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7ff ff29 	bl	8007114 <__NVIC_SetPriorityGrouping>
}
 80072c2:	bf00      	nop
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b086      	sub	sp, #24
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	4603      	mov	r3, r0
 80072d2:	60b9      	str	r1, [r7, #8]
 80072d4:	607a      	str	r2, [r7, #4]
 80072d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80072d8:	f7ff ff40 	bl	800715c <__NVIC_GetPriorityGrouping>
 80072dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	68b9      	ldr	r1, [r7, #8]
 80072e2:	6978      	ldr	r0, [r7, #20]
 80072e4:	f7ff ff90 	bl	8007208 <NVIC_EncodePriority>
 80072e8:	4602      	mov	r2, r0
 80072ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072ee:	4611      	mov	r1, r2
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7ff ff5f 	bl	80071b4 <__NVIC_SetPriority>
}
 80072f6:	bf00      	nop
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b082      	sub	sp, #8
 8007302:	af00      	add	r7, sp, #0
 8007304:	4603      	mov	r3, r0
 8007306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff ff33 	bl	8007178 <__NVIC_EnableIRQ>
}
 8007312:	bf00      	nop
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b082      	sub	sp, #8
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7ff ffa4 	bl	8007270 <SysTick_Config>
 8007328:	4603      	mov	r3, r0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
	...

08007334 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e08d      	b.n	8007462 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	4b47      	ldr	r3, [pc, #284]	@ (800746c <HAL_DMA_Init+0x138>)
 800734e:	429a      	cmp	r2, r3
 8007350:	d80f      	bhi.n	8007372 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	461a      	mov	r2, r3
 8007358:	4b45      	ldr	r3, [pc, #276]	@ (8007470 <HAL_DMA_Init+0x13c>)
 800735a:	4413      	add	r3, r2
 800735c:	4a45      	ldr	r2, [pc, #276]	@ (8007474 <HAL_DMA_Init+0x140>)
 800735e:	fba2 2303 	umull	r2, r3, r2, r3
 8007362:	091b      	lsrs	r3, r3, #4
 8007364:	009a      	lsls	r2, r3, #2
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a42      	ldr	r2, [pc, #264]	@ (8007478 <HAL_DMA_Init+0x144>)
 800736e:	641a      	str	r2, [r3, #64]	@ 0x40
 8007370:	e00e      	b.n	8007390 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	461a      	mov	r2, r3
 8007378:	4b40      	ldr	r3, [pc, #256]	@ (800747c <HAL_DMA_Init+0x148>)
 800737a:	4413      	add	r3, r2
 800737c:	4a3d      	ldr	r2, [pc, #244]	@ (8007474 <HAL_DMA_Init+0x140>)
 800737e:	fba2 2303 	umull	r2, r3, r2, r3
 8007382:	091b      	lsrs	r3, r3, #4
 8007384:	009a      	lsls	r2, r3, #2
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a3c      	ldr	r2, [pc, #240]	@ (8007480 <HAL_DMA_Init+0x14c>)
 800738e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80073a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80073b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fa76 	bl	80078d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073f0:	d102      	bne.n	80073f8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007400:	b2d2      	uxtb	r2, r2
 8007402:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800740c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d010      	beq.n	8007438 <HAL_DMA_Init+0x104>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	2b04      	cmp	r3, #4
 800741c:	d80c      	bhi.n	8007438 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fa96 	bl	8007950 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007428:	2200      	movs	r2, #0
 800742a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007434:	605a      	str	r2, [r3, #4]
 8007436:	e008      	b.n	800744a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	40020407 	.word	0x40020407
 8007470:	bffdfff8 	.word	0xbffdfff8
 8007474:	cccccccd 	.word	0xcccccccd
 8007478:	40020000 	.word	0x40020000
 800747c:	bffdfbf8 	.word	0xbffdfbf8
 8007480:	40020400 	.word	0x40020400

08007484 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
 8007490:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800749c:	2b01      	cmp	r3, #1
 800749e:	d101      	bne.n	80074a4 <HAL_DMA_Start_IT+0x20>
 80074a0:	2302      	movs	r3, #2
 80074a2:	e066      	b.n	8007572 <HAL_DMA_Start_IT+0xee>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d155      	bne.n	8007564 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2202      	movs	r2, #2
 80074bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f022 0201 	bic.w	r2, r2, #1
 80074d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	68b9      	ldr	r1, [r7, #8]
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 f9bb 	bl	8007858 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d008      	beq.n	80074fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f042 020e 	orr.w	r2, r2, #14
 80074f8:	601a      	str	r2, [r3, #0]
 80074fa:	e00f      	b.n	800751c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0204 	bic.w	r2, r2, #4
 800750a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 020a 	orr.w	r2, r2, #10
 800751a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d007      	beq.n	800753a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007534:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007538:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800753e:	2b00      	cmp	r3, #0
 8007540:	d007      	beq.n	8007552 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800754c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007550:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f042 0201 	orr.w	r2, r2, #1
 8007560:	601a      	str	r2, [r3, #0]
 8007562:	e005      	b.n	8007570 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800756c:	2302      	movs	r3, #2
 800756e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007570:	7dfb      	ldrb	r3, [r7, #23]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3718      	adds	r7, #24
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800757a:	b480      	push	{r7}
 800757c:	b085      	sub	sp, #20
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b02      	cmp	r3, #2
 8007590:	d005      	beq.n	800759e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2204      	movs	r2, #4
 8007596:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	73fb      	strb	r3, [r7, #15]
 800759c:	e037      	b.n	800760e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 020e 	bic.w	r2, r2, #14
 80075ac:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80075bc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f022 0201 	bic.w	r2, r2, #1
 80075cc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075d2:	f003 021f 	and.w	r2, r3, #31
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075da:	2101      	movs	r1, #1
 80075dc:	fa01 f202 	lsl.w	r2, r1, r2
 80075e0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80075ea:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00c      	beq.n	800760e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007602:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800760c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800761e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007634:	2300      	movs	r3, #0
 8007636:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b02      	cmp	r3, #2
 8007642:	d00d      	beq.n	8007660 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2204      	movs	r2, #4
 8007648:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	73fb      	strb	r3, [r7, #15]
 800765e:	e047      	b.n	80076f0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 020e 	bic.w	r2, r2, #14
 800766e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f022 0201 	bic.w	r2, r2, #1
 800767e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800768a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800768e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007694:	f003 021f 	and.w	r2, r3, #31
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800769c:	2101      	movs	r1, #1
 800769e:	fa01 f202 	lsl.w	r2, r1, r2
 80076a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80076ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00c      	beq.n	80076d0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80076c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80076ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d003      	beq.n	80076f0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	4798      	blx	r3
    }
  }
  return status;
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b084      	sub	sp, #16
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007716:	f003 031f 	and.w	r3, r3, #31
 800771a:	2204      	movs	r2, #4
 800771c:	409a      	lsls	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	4013      	ands	r3, r2
 8007722:	2b00      	cmp	r3, #0
 8007724:	d026      	beq.n	8007774 <HAL_DMA_IRQHandler+0x7a>
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	f003 0304 	and.w	r3, r3, #4
 800772c:	2b00      	cmp	r3, #0
 800772e:	d021      	beq.n	8007774 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0320 	and.w	r3, r3, #32
 800773a:	2b00      	cmp	r3, #0
 800773c:	d107      	bne.n	800774e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0204 	bic.w	r2, r2, #4
 800774c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007752:	f003 021f 	and.w	r2, r3, #31
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775a:	2104      	movs	r1, #4
 800775c:	fa01 f202 	lsl.w	r2, r1, r2
 8007760:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007766:	2b00      	cmp	r3, #0
 8007768:	d071      	beq.n	800784e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007772:	e06c      	b.n	800784e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007778:	f003 031f 	and.w	r3, r3, #31
 800777c:	2202      	movs	r2, #2
 800777e:	409a      	lsls	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4013      	ands	r3, r2
 8007784:	2b00      	cmp	r3, #0
 8007786:	d02e      	beq.n	80077e6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	f003 0302 	and.w	r3, r3, #2
 800778e:	2b00      	cmp	r3, #0
 8007790:	d029      	beq.n	80077e6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0320 	and.w	r3, r3, #32
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10b      	bne.n	80077b8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f022 020a 	bic.w	r2, r2, #10
 80077ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077bc:	f003 021f 	and.w	r2, r3, #31
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c4:	2102      	movs	r1, #2
 80077c6:	fa01 f202 	lsl.w	r2, r1, r2
 80077ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d038      	beq.n	800784e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80077e4:	e033      	b.n	800784e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ea:	f003 031f 	and.w	r3, r3, #31
 80077ee:	2208      	movs	r2, #8
 80077f0:	409a      	lsls	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	4013      	ands	r3, r2
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d02a      	beq.n	8007850 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f003 0308 	and.w	r3, r3, #8
 8007800:	2b00      	cmp	r3, #0
 8007802:	d025      	beq.n	8007850 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f022 020e 	bic.w	r2, r2, #14
 8007812:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007818:	f003 021f 	and.w	r2, r3, #31
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007820:	2101      	movs	r1, #1
 8007822:	fa01 f202 	lsl.w	r2, r1, r2
 8007826:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007842:	2b00      	cmp	r3, #0
 8007844:	d004      	beq.n	8007850 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800784e:	bf00      	nop
 8007850:	bf00      	nop
}
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
 8007864:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800786e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007874:	2b00      	cmp	r3, #0
 8007876:	d004      	beq.n	8007882 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007880:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007886:	f003 021f 	and.w	r2, r3, #31
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800788e:	2101      	movs	r1, #1
 8007890:	fa01 f202 	lsl.w	r2, r1, r2
 8007894:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	2b10      	cmp	r3, #16
 80078a4:	d108      	bne.n	80078b8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80078b6:	e007      	b.n	80078c8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	60da      	str	r2, [r3, #12]
}
 80078c8:	bf00      	nop
 80078ca:	3714      	adds	r7, #20
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	461a      	mov	r2, r3
 80078e2:	4b16      	ldr	r3, [pc, #88]	@ (800793c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d802      	bhi.n	80078ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80078e8:	4b15      	ldr	r3, [pc, #84]	@ (8007940 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80078ea:	617b      	str	r3, [r7, #20]
 80078ec:	e001      	b.n	80078f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80078ee:	4b15      	ldr	r3, [pc, #84]	@ (8007944 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80078f0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	3b08      	subs	r3, #8
 80078fe:	4a12      	ldr	r2, [pc, #72]	@ (8007948 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007900:	fba2 2303 	umull	r2, r3, r2, r3
 8007904:	091b      	lsrs	r3, r3, #4
 8007906:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800790c:	089b      	lsrs	r3, r3, #2
 800790e:	009a      	lsls	r2, r3, #2
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	4413      	add	r3, r2
 8007914:	461a      	mov	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a0b      	ldr	r2, [pc, #44]	@ (800794c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800791e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f003 031f 	and.w	r3, r3, #31
 8007926:	2201      	movs	r2, #1
 8007928:	409a      	lsls	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800792e:	bf00      	nop
 8007930:	371c      	adds	r7, #28
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	40020407 	.word	0x40020407
 8007940:	40020800 	.word	0x40020800
 8007944:	40020820 	.word	0x40020820
 8007948:	cccccccd 	.word	0xcccccccd
 800794c:	40020880 	.word	0x40020880

08007950 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	b2db      	uxtb	r3, r3
 800795e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	4b0b      	ldr	r3, [pc, #44]	@ (8007990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007964:	4413      	add	r3, r2
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	461a      	mov	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a08      	ldr	r2, [pc, #32]	@ (8007994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007972:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	3b01      	subs	r3, #1
 8007978:	f003 031f 	and.w	r3, r3, #31
 800797c:	2201      	movs	r2, #1
 800797e:	409a      	lsls	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007984:	bf00      	nop
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	1000823f 	.word	0x1000823f
 8007994:	40020940 	.word	0x40020940

08007998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007998:	b480      	push	{r7}
 800799a:	b087      	sub	sp, #28
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80079a6:	e15a      	b.n	8007c5e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	2101      	movs	r1, #1
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	fa01 f303 	lsl.w	r3, r1, r3
 80079b4:	4013      	ands	r3, r2
 80079b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 814c 	beq.w	8007c58 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	f003 0303 	and.w	r3, r3, #3
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d005      	beq.n	80079d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d130      	bne.n	8007a3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	005b      	lsls	r3, r3, #1
 80079e2:	2203      	movs	r2, #3
 80079e4:	fa02 f303 	lsl.w	r3, r2, r3
 80079e8:	43db      	mvns	r3, r3
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	4013      	ands	r3, r2
 80079ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	68da      	ldr	r2, [r3, #12]
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	005b      	lsls	r3, r3, #1
 80079f8:	fa02 f303 	lsl.w	r3, r2, r3
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a0e:	2201      	movs	r2, #1
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	fa02 f303 	lsl.w	r3, r2, r3
 8007a16:	43db      	mvns	r3, r3
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	091b      	lsrs	r3, r3, #4
 8007a24:	f003 0201 	and.w	r2, r3, #1
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	f003 0303 	and.w	r3, r3, #3
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d017      	beq.n	8007a76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	005b      	lsls	r3, r3, #1
 8007a50:	2203      	movs	r2, #3
 8007a52:	fa02 f303 	lsl.w	r3, r2, r3
 8007a56:	43db      	mvns	r3, r3
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	689a      	ldr	r2, [r3, #8]
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	005b      	lsls	r3, r3, #1
 8007a66:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	f003 0303 	and.w	r3, r3, #3
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d123      	bne.n	8007aca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	08da      	lsrs	r2, r3, #3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	3208      	adds	r2, #8
 8007a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	f003 0307 	and.w	r3, r3, #7
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	220f      	movs	r2, #15
 8007a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9e:	43db      	mvns	r3, r3
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	691a      	ldr	r2, [r3, #16]
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f003 0307 	and.w	r3, r3, #7
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	08da      	lsrs	r2, r3, #3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3208      	adds	r2, #8
 8007ac4:	6939      	ldr	r1, [r7, #16]
 8007ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	005b      	lsls	r3, r3, #1
 8007ad4:	2203      	movs	r2, #3
 8007ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8007ada:	43db      	mvns	r3, r3
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	4013      	ands	r3, r2
 8007ae0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f003 0203 	and.w	r2, r3, #3
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	005b      	lsls	r3, r3, #1
 8007aee:	fa02 f303 	lsl.w	r3, r2, r3
 8007af2:	693a      	ldr	r2, [r7, #16]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	693a      	ldr	r2, [r7, #16]
 8007afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 80a6 	beq.w	8007c58 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b0c:	4b5b      	ldr	r3, [pc, #364]	@ (8007c7c <HAL_GPIO_Init+0x2e4>)
 8007b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b10:	4a5a      	ldr	r2, [pc, #360]	@ (8007c7c <HAL_GPIO_Init+0x2e4>)
 8007b12:	f043 0301 	orr.w	r3, r3, #1
 8007b16:	6613      	str	r3, [r2, #96]	@ 0x60
 8007b18:	4b58      	ldr	r3, [pc, #352]	@ (8007c7c <HAL_GPIO_Init+0x2e4>)
 8007b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b1c:	f003 0301 	and.w	r3, r3, #1
 8007b20:	60bb      	str	r3, [r7, #8]
 8007b22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b24:	4a56      	ldr	r2, [pc, #344]	@ (8007c80 <HAL_GPIO_Init+0x2e8>)
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	089b      	lsrs	r3, r3, #2
 8007b2a:	3302      	adds	r3, #2
 8007b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f003 0303 	and.w	r3, r3, #3
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	220f      	movs	r2, #15
 8007b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b40:	43db      	mvns	r3, r3
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	4013      	ands	r3, r2
 8007b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007b4e:	d01f      	beq.n	8007b90 <HAL_GPIO_Init+0x1f8>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a4c      	ldr	r2, [pc, #304]	@ (8007c84 <HAL_GPIO_Init+0x2ec>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d019      	beq.n	8007b8c <HAL_GPIO_Init+0x1f4>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a4b      	ldr	r2, [pc, #300]	@ (8007c88 <HAL_GPIO_Init+0x2f0>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d013      	beq.n	8007b88 <HAL_GPIO_Init+0x1f0>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a4a      	ldr	r2, [pc, #296]	@ (8007c8c <HAL_GPIO_Init+0x2f4>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d00d      	beq.n	8007b84 <HAL_GPIO_Init+0x1ec>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a49      	ldr	r2, [pc, #292]	@ (8007c90 <HAL_GPIO_Init+0x2f8>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d007      	beq.n	8007b80 <HAL_GPIO_Init+0x1e8>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a48      	ldr	r2, [pc, #288]	@ (8007c94 <HAL_GPIO_Init+0x2fc>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d101      	bne.n	8007b7c <HAL_GPIO_Init+0x1e4>
 8007b78:	2305      	movs	r3, #5
 8007b7a:	e00a      	b.n	8007b92 <HAL_GPIO_Init+0x1fa>
 8007b7c:	2306      	movs	r3, #6
 8007b7e:	e008      	b.n	8007b92 <HAL_GPIO_Init+0x1fa>
 8007b80:	2304      	movs	r3, #4
 8007b82:	e006      	b.n	8007b92 <HAL_GPIO_Init+0x1fa>
 8007b84:	2303      	movs	r3, #3
 8007b86:	e004      	b.n	8007b92 <HAL_GPIO_Init+0x1fa>
 8007b88:	2302      	movs	r3, #2
 8007b8a:	e002      	b.n	8007b92 <HAL_GPIO_Init+0x1fa>
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e000      	b.n	8007b92 <HAL_GPIO_Init+0x1fa>
 8007b90:	2300      	movs	r3, #0
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	f002 0203 	and.w	r2, r2, #3
 8007b98:	0092      	lsls	r2, r2, #2
 8007b9a:	4093      	lsls	r3, r2
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ba2:	4937      	ldr	r1, [pc, #220]	@ (8007c80 <HAL_GPIO_Init+0x2e8>)
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	089b      	lsrs	r3, r3, #2
 8007ba8:	3302      	adds	r3, #2
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007bb0:	4b39      	ldr	r3, [pc, #228]	@ (8007c98 <HAL_GPIO_Init+0x300>)
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	43db      	mvns	r3, r3
 8007bba:	693a      	ldr	r2, [r7, #16]
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d003      	beq.n	8007bd4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007bd4:	4a30      	ldr	r2, [pc, #192]	@ (8007c98 <HAL_GPIO_Init+0x300>)
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007bda:	4b2f      	ldr	r3, [pc, #188]	@ (8007c98 <HAL_GPIO_Init+0x300>)
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	43db      	mvns	r3, r3
 8007be4:	693a      	ldr	r2, [r7, #16]
 8007be6:	4013      	ands	r3, r2
 8007be8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007bfe:	4a26      	ldr	r2, [pc, #152]	@ (8007c98 <HAL_GPIO_Init+0x300>)
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007c04:	4b24      	ldr	r3, [pc, #144]	@ (8007c98 <HAL_GPIO_Init+0x300>)
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	43db      	mvns	r3, r3
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	4013      	ands	r3, r2
 8007c12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d003      	beq.n	8007c28 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007c28:	4a1b      	ldr	r2, [pc, #108]	@ (8007c98 <HAL_GPIO_Init+0x300>)
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8007c98 <HAL_GPIO_Init+0x300>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	43db      	mvns	r3, r3
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d003      	beq.n	8007c52 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007c4a:	693a      	ldr	r2, [r7, #16]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007c52:	4a11      	ldr	r2, [pc, #68]	@ (8007c98 <HAL_GPIO_Init+0x300>)
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	fa22 f303 	lsr.w	r3, r2, r3
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f47f ae9d 	bne.w	80079a8 <HAL_GPIO_Init+0x10>
  }
}
 8007c6e:	bf00      	nop
 8007c70:	bf00      	nop
 8007c72:	371c      	adds	r7, #28
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	40021000 	.word	0x40021000
 8007c80:	40010000 	.word	0x40010000
 8007c84:	48000400 	.word	0x48000400
 8007c88:	48000800 	.word	0x48000800
 8007c8c:	48000c00 	.word	0x48000c00
 8007c90:	48001000 	.word	0x48001000
 8007c94:	48001400 	.word	0x48001400
 8007c98:	40010400 	.word	0x40010400

08007c9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	691a      	ldr	r2, [r3, #16]
 8007cac:	887b      	ldrh	r3, [r7, #2]
 8007cae:	4013      	ands	r3, r2
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	73fb      	strb	r3, [r7, #15]
 8007cb8:	e001      	b.n	8007cbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	807b      	strh	r3, [r7, #2]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007cdc:	787b      	ldrb	r3, [r7, #1]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d003      	beq.n	8007cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007ce2:	887a      	ldrh	r2, [r7, #2]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007ce8:	e002      	b.n	8007cf0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007cea:	887a      	ldrh	r2, [r7, #2]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	4603      	mov	r3, r0
 8007d04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007d06:	4b08      	ldr	r3, [pc, #32]	@ (8007d28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007d08:	695a      	ldr	r2, [r3, #20]
 8007d0a:	88fb      	ldrh	r3, [r7, #6]
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d006      	beq.n	8007d20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007d12:	4a05      	ldr	r2, [pc, #20]	@ (8007d28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007d14:	88fb      	ldrh	r3, [r7, #6]
 8007d16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007d18:	88fb      	ldrh	r3, [r7, #6]
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fb ff7e 	bl	8003c1c <HAL_GPIO_EXTI_Callback>
  }
}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	40010400 	.word	0x40010400

08007d2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d141      	bne.n	8007dbe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007d3a:	4b4b      	ldr	r3, [pc, #300]	@ (8007e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d46:	d131      	bne.n	8007dac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d48:	4b47      	ldr	r3, [pc, #284]	@ (8007e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d4e:	4a46      	ldr	r2, [pc, #280]	@ (8007e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d58:	4b43      	ldr	r3, [pc, #268]	@ (8007e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007d60:	4a41      	ldr	r2, [pc, #260]	@ (8007e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007d66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007d68:	4b40      	ldr	r3, [pc, #256]	@ (8007e6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2232      	movs	r2, #50	@ 0x32
 8007d6e:	fb02 f303 	mul.w	r3, r2, r3
 8007d72:	4a3f      	ldr	r2, [pc, #252]	@ (8007e70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007d74:	fba2 2303 	umull	r2, r3, r2, r3
 8007d78:	0c9b      	lsrs	r3, r3, #18
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d7e:	e002      	b.n	8007d86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d86:	4b38      	ldr	r3, [pc, #224]	@ (8007e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d92:	d102      	bne.n	8007d9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1f2      	bne.n	8007d80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007d9a:	4b33      	ldr	r3, [pc, #204]	@ (8007e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d9c:	695b      	ldr	r3, [r3, #20]
 8007d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007da6:	d158      	bne.n	8007e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e057      	b.n	8007e5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007dac:	4b2e      	ldr	r3, [pc, #184]	@ (8007e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007db2:	4a2d      	ldr	r2, [pc, #180]	@ (8007e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007db8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007dbc:	e04d      	b.n	8007e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dc4:	d141      	bne.n	8007e4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007dc6:	4b28      	ldr	r3, [pc, #160]	@ (8007e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dd2:	d131      	bne.n	8007e38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007dd4:	4b24      	ldr	r3, [pc, #144]	@ (8007e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dda:	4a23      	ldr	r2, [pc, #140]	@ (8007e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007de0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007de4:	4b20      	ldr	r3, [pc, #128]	@ (8007e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007dec:	4a1e      	ldr	r2, [pc, #120]	@ (8007e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007df2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007df4:	4b1d      	ldr	r3, [pc, #116]	@ (8007e6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2232      	movs	r2, #50	@ 0x32
 8007dfa:	fb02 f303 	mul.w	r3, r2, r3
 8007dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8007e70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007e00:	fba2 2303 	umull	r2, r3, r2, r3
 8007e04:	0c9b      	lsrs	r3, r3, #18
 8007e06:	3301      	adds	r3, #1
 8007e08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e0a:	e002      	b.n	8007e12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e12:	4b15      	ldr	r3, [pc, #84]	@ (8007e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e1e:	d102      	bne.n	8007e26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1f2      	bne.n	8007e0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007e26:	4b10      	ldr	r3, [pc, #64]	@ (8007e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e32:	d112      	bne.n	8007e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007e34:	2303      	movs	r3, #3
 8007e36:	e011      	b.n	8007e5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007e38:	4b0b      	ldr	r3, [pc, #44]	@ (8007e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8007e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007e48:	e007      	b.n	8007e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007e4a:	4b07      	ldr	r3, [pc, #28]	@ (8007e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007e52:	4a05      	ldr	r2, [pc, #20]	@ (8007e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007e58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3714      	adds	r7, #20
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr
 8007e68:	40007000 	.word	0x40007000
 8007e6c:	20000168 	.word	0x20000168
 8007e70:	431bde83 	.word	0x431bde83

08007e74 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007e74:	b480      	push	{r7}
 8007e76:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007e78:	4b05      	ldr	r3, [pc, #20]	@ (8007e90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	4a04      	ldr	r2, [pc, #16]	@ (8007e90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007e7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007e82:	6093      	str	r3, [r2, #8]
}
 8007e84:	bf00      	nop
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	40007000 	.word	0x40007000

08007e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b088      	sub	sp, #32
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d101      	bne.n	8007ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e2fe      	b.n	80084a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d075      	beq.n	8007f9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007eb2:	4b97      	ldr	r3, [pc, #604]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f003 030c 	and.w	r3, r3, #12
 8007eba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ebc:	4b94      	ldr	r3, [pc, #592]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	f003 0303 	and.w	r3, r3, #3
 8007ec4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	2b0c      	cmp	r3, #12
 8007eca:	d102      	bne.n	8007ed2 <HAL_RCC_OscConfig+0x3e>
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	d002      	beq.n	8007ed8 <HAL_RCC_OscConfig+0x44>
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	2b08      	cmp	r3, #8
 8007ed6:	d10b      	bne.n	8007ef0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ed8:	4b8d      	ldr	r3, [pc, #564]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d05b      	beq.n	8007f9c <HAL_RCC_OscConfig+0x108>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d157      	bne.n	8007f9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	e2d9      	b.n	80084a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ef8:	d106      	bne.n	8007f08 <HAL_RCC_OscConfig+0x74>
 8007efa:	4b85      	ldr	r3, [pc, #532]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a84      	ldr	r2, [pc, #528]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 8007f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f04:	6013      	str	r3, [r2, #0]
 8007f06:	e01d      	b.n	8007f44 <HAL_RCC_OscConfig+0xb0>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f10:	d10c      	bne.n	8007f2c <HAL_RCC_OscConfig+0x98>
 8007f12:	4b7f      	ldr	r3, [pc, #508]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a7e      	ldr	r2, [pc, #504]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 8007f18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007f1c:	6013      	str	r3, [r2, #0]
 8007f1e:	4b7c      	ldr	r3, [pc, #496]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a7b      	ldr	r2, [pc, #492]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 8007f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f28:	6013      	str	r3, [r2, #0]
 8007f2a:	e00b      	b.n	8007f44 <HAL_RCC_OscConfig+0xb0>
 8007f2c:	4b78      	ldr	r3, [pc, #480]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a77      	ldr	r2, [pc, #476]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 8007f32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f36:	6013      	str	r3, [r2, #0]
 8007f38:	4b75      	ldr	r3, [pc, #468]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a74      	ldr	r2, [pc, #464]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 8007f3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d013      	beq.n	8007f74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f4c:	f7fd fc5e 	bl	800580c <HAL_GetTick>
 8007f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f52:	e008      	b.n	8007f66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f54:	f7fd fc5a 	bl	800580c <HAL_GetTick>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	2b64      	cmp	r3, #100	@ 0x64
 8007f60:	d901      	bls.n	8007f66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007f62:	2303      	movs	r3, #3
 8007f64:	e29e      	b.n	80084a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f66:	4b6a      	ldr	r3, [pc, #424]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0f0      	beq.n	8007f54 <HAL_RCC_OscConfig+0xc0>
 8007f72:	e014      	b.n	8007f9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f74:	f7fd fc4a 	bl	800580c <HAL_GetTick>
 8007f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f7a:	e008      	b.n	8007f8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f7c:	f7fd fc46 	bl	800580c <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	2b64      	cmp	r3, #100	@ 0x64
 8007f88:	d901      	bls.n	8007f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e28a      	b.n	80084a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f8e:	4b60      	ldr	r3, [pc, #384]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1f0      	bne.n	8007f7c <HAL_RCC_OscConfig+0xe8>
 8007f9a:	e000      	b.n	8007f9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0302 	and.w	r3, r3, #2
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d075      	beq.n	8008096 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007faa:	4b59      	ldr	r3, [pc, #356]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f003 030c 	and.w	r3, r3, #12
 8007fb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007fb4:	4b56      	ldr	r3, [pc, #344]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	f003 0303 	and.w	r3, r3, #3
 8007fbc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	2b0c      	cmp	r3, #12
 8007fc2:	d102      	bne.n	8007fca <HAL_RCC_OscConfig+0x136>
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d002      	beq.n	8007fd0 <HAL_RCC_OscConfig+0x13c>
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	2b04      	cmp	r3, #4
 8007fce:	d11f      	bne.n	8008010 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fd0:	4b4f      	ldr	r3, [pc, #316]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d005      	beq.n	8007fe8 <HAL_RCC_OscConfig+0x154>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e25d      	b.n	80084a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fe8:	4b49      	ldr	r3, [pc, #292]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	061b      	lsls	r3, r3, #24
 8007ff6:	4946      	ldr	r1, [pc, #280]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007ffc:	4b45      	ldr	r3, [pc, #276]	@ (8008114 <HAL_RCC_OscConfig+0x280>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4618      	mov	r0, r3
 8008002:	f7fd fbb7 	bl	8005774 <HAL_InitTick>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d043      	beq.n	8008094 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e249      	b.n	80084a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d023      	beq.n	8008060 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008018:	4b3d      	ldr	r3, [pc, #244]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a3c      	ldr	r2, [pc, #240]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 800801e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008024:	f7fd fbf2 	bl	800580c <HAL_GetTick>
 8008028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800802a:	e008      	b.n	800803e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800802c:	f7fd fbee 	bl	800580c <HAL_GetTick>
 8008030:	4602      	mov	r2, r0
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	2b02      	cmp	r3, #2
 8008038:	d901      	bls.n	800803e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e232      	b.n	80084a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800803e:	4b34      	ldr	r3, [pc, #208]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008046:	2b00      	cmp	r3, #0
 8008048:	d0f0      	beq.n	800802c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800804a:	4b31      	ldr	r3, [pc, #196]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	061b      	lsls	r3, r3, #24
 8008058:	492d      	ldr	r1, [pc, #180]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 800805a:	4313      	orrs	r3, r2
 800805c:	604b      	str	r3, [r1, #4]
 800805e:	e01a      	b.n	8008096 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008060:	4b2b      	ldr	r3, [pc, #172]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a2a      	ldr	r2, [pc, #168]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 8008066:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800806a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800806c:	f7fd fbce 	bl	800580c <HAL_GetTick>
 8008070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008072:	e008      	b.n	8008086 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008074:	f7fd fbca 	bl	800580c <HAL_GetTick>
 8008078:	4602      	mov	r2, r0
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	2b02      	cmp	r3, #2
 8008080:	d901      	bls.n	8008086 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e20e      	b.n	80084a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008086:	4b22      	ldr	r3, [pc, #136]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1f0      	bne.n	8008074 <HAL_RCC_OscConfig+0x1e0>
 8008092:	e000      	b.n	8008096 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008094:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 0308 	and.w	r3, r3, #8
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d041      	beq.n	8008126 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d01c      	beq.n	80080e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080aa:	4b19      	ldr	r3, [pc, #100]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 80080ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080b0:	4a17      	ldr	r2, [pc, #92]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 80080b2:	f043 0301 	orr.w	r3, r3, #1
 80080b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080ba:	f7fd fba7 	bl	800580c <HAL_GetTick>
 80080be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80080c0:	e008      	b.n	80080d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080c2:	f7fd fba3 	bl	800580c <HAL_GetTick>
 80080c6:	4602      	mov	r2, r0
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d901      	bls.n	80080d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e1e7      	b.n	80084a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80080d4:	4b0e      	ldr	r3, [pc, #56]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 80080d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080da:	f003 0302 	and.w	r3, r3, #2
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d0ef      	beq.n	80080c2 <HAL_RCC_OscConfig+0x22e>
 80080e2:	e020      	b.n	8008126 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 80080e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080ea:	4a09      	ldr	r2, [pc, #36]	@ (8008110 <HAL_RCC_OscConfig+0x27c>)
 80080ec:	f023 0301 	bic.w	r3, r3, #1
 80080f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080f4:	f7fd fb8a 	bl	800580c <HAL_GetTick>
 80080f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080fa:	e00d      	b.n	8008118 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080fc:	f7fd fb86 	bl	800580c <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b02      	cmp	r3, #2
 8008108:	d906      	bls.n	8008118 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e1ca      	b.n	80084a4 <HAL_RCC_OscConfig+0x610>
 800810e:	bf00      	nop
 8008110:	40021000 	.word	0x40021000
 8008114:	2000016c 	.word	0x2000016c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008118:	4b8c      	ldr	r3, [pc, #560]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 800811a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800811e:	f003 0302 	and.w	r3, r3, #2
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1ea      	bne.n	80080fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 0304 	and.w	r3, r3, #4
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 80a6 	beq.w	8008280 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008134:	2300      	movs	r3, #0
 8008136:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008138:	4b84      	ldr	r3, [pc, #528]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 800813a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800813c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008140:	2b00      	cmp	r3, #0
 8008142:	d101      	bne.n	8008148 <HAL_RCC_OscConfig+0x2b4>
 8008144:	2301      	movs	r3, #1
 8008146:	e000      	b.n	800814a <HAL_RCC_OscConfig+0x2b6>
 8008148:	2300      	movs	r3, #0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00d      	beq.n	800816a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800814e:	4b7f      	ldr	r3, [pc, #508]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 8008150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008152:	4a7e      	ldr	r2, [pc, #504]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 8008154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008158:	6593      	str	r3, [r2, #88]	@ 0x58
 800815a:	4b7c      	ldr	r3, [pc, #496]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 800815c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800815e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008162:	60fb      	str	r3, [r7, #12]
 8008164:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008166:	2301      	movs	r3, #1
 8008168:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800816a:	4b79      	ldr	r3, [pc, #484]	@ (8008350 <HAL_RCC_OscConfig+0x4bc>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008172:	2b00      	cmp	r3, #0
 8008174:	d118      	bne.n	80081a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008176:	4b76      	ldr	r3, [pc, #472]	@ (8008350 <HAL_RCC_OscConfig+0x4bc>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a75      	ldr	r2, [pc, #468]	@ (8008350 <HAL_RCC_OscConfig+0x4bc>)
 800817c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008182:	f7fd fb43 	bl	800580c <HAL_GetTick>
 8008186:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008188:	e008      	b.n	800819c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800818a:	f7fd fb3f 	bl	800580c <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	2b02      	cmp	r3, #2
 8008196:	d901      	bls.n	800819c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e183      	b.n	80084a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800819c:	4b6c      	ldr	r3, [pc, #432]	@ (8008350 <HAL_RCC_OscConfig+0x4bc>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d0f0      	beq.n	800818a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d108      	bne.n	80081c2 <HAL_RCC_OscConfig+0x32e>
 80081b0:	4b66      	ldr	r3, [pc, #408]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 80081b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081b6:	4a65      	ldr	r2, [pc, #404]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 80081b8:	f043 0301 	orr.w	r3, r3, #1
 80081bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80081c0:	e024      	b.n	800820c <HAL_RCC_OscConfig+0x378>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	2b05      	cmp	r3, #5
 80081c8:	d110      	bne.n	80081ec <HAL_RCC_OscConfig+0x358>
 80081ca:	4b60      	ldr	r3, [pc, #384]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 80081cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081d0:	4a5e      	ldr	r2, [pc, #376]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 80081d2:	f043 0304 	orr.w	r3, r3, #4
 80081d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80081da:	4b5c      	ldr	r3, [pc, #368]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 80081dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081e0:	4a5a      	ldr	r2, [pc, #360]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 80081e2:	f043 0301 	orr.w	r3, r3, #1
 80081e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80081ea:	e00f      	b.n	800820c <HAL_RCC_OscConfig+0x378>
 80081ec:	4b57      	ldr	r3, [pc, #348]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 80081ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081f2:	4a56      	ldr	r2, [pc, #344]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 80081f4:	f023 0301 	bic.w	r3, r3, #1
 80081f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80081fc:	4b53      	ldr	r3, [pc, #332]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 80081fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008202:	4a52      	ldr	r2, [pc, #328]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 8008204:	f023 0304 	bic.w	r3, r3, #4
 8008208:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d016      	beq.n	8008242 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008214:	f7fd fafa 	bl	800580c <HAL_GetTick>
 8008218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800821a:	e00a      	b.n	8008232 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800821c:	f7fd faf6 	bl	800580c <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800822a:	4293      	cmp	r3, r2
 800822c:	d901      	bls.n	8008232 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800822e:	2303      	movs	r3, #3
 8008230:	e138      	b.n	80084a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008232:	4b46      	ldr	r3, [pc, #280]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 8008234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008238:	f003 0302 	and.w	r3, r3, #2
 800823c:	2b00      	cmp	r3, #0
 800823e:	d0ed      	beq.n	800821c <HAL_RCC_OscConfig+0x388>
 8008240:	e015      	b.n	800826e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008242:	f7fd fae3 	bl	800580c <HAL_GetTick>
 8008246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008248:	e00a      	b.n	8008260 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800824a:	f7fd fadf 	bl	800580c <HAL_GetTick>
 800824e:	4602      	mov	r2, r0
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008258:	4293      	cmp	r3, r2
 800825a:	d901      	bls.n	8008260 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e121      	b.n	80084a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008260:	4b3a      	ldr	r3, [pc, #232]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 8008262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008266:	f003 0302 	and.w	r3, r3, #2
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1ed      	bne.n	800824a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800826e:	7ffb      	ldrb	r3, [r7, #31]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d105      	bne.n	8008280 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008274:	4b35      	ldr	r3, [pc, #212]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 8008276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008278:	4a34      	ldr	r2, [pc, #208]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 800827a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800827e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0320 	and.w	r3, r3, #32
 8008288:	2b00      	cmp	r3, #0
 800828a:	d03c      	beq.n	8008306 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	699b      	ldr	r3, [r3, #24]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d01c      	beq.n	80082ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008294:	4b2d      	ldr	r3, [pc, #180]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 8008296:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800829a:	4a2c      	ldr	r2, [pc, #176]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 800829c:	f043 0301 	orr.w	r3, r3, #1
 80082a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082a4:	f7fd fab2 	bl	800580c <HAL_GetTick>
 80082a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80082aa:	e008      	b.n	80082be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80082ac:	f7fd faae 	bl	800580c <HAL_GetTick>
 80082b0:	4602      	mov	r2, r0
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d901      	bls.n	80082be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e0f2      	b.n	80084a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80082be:	4b23      	ldr	r3, [pc, #140]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 80082c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80082c4:	f003 0302 	and.w	r3, r3, #2
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d0ef      	beq.n	80082ac <HAL_RCC_OscConfig+0x418>
 80082cc:	e01b      	b.n	8008306 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80082ce:	4b1f      	ldr	r3, [pc, #124]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 80082d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80082d4:	4a1d      	ldr	r2, [pc, #116]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 80082d6:	f023 0301 	bic.w	r3, r3, #1
 80082da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082de:	f7fd fa95 	bl	800580c <HAL_GetTick>
 80082e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80082e4:	e008      	b.n	80082f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80082e6:	f7fd fa91 	bl	800580c <HAL_GetTick>
 80082ea:	4602      	mov	r2, r0
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	1ad3      	subs	r3, r2, r3
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d901      	bls.n	80082f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	e0d5      	b.n	80084a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80082f8:	4b14      	ldr	r3, [pc, #80]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 80082fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80082fe:	f003 0302 	and.w	r3, r3, #2
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1ef      	bne.n	80082e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	69db      	ldr	r3, [r3, #28]
 800830a:	2b00      	cmp	r3, #0
 800830c:	f000 80c9 	beq.w	80084a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008310:	4b0e      	ldr	r3, [pc, #56]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	f003 030c 	and.w	r3, r3, #12
 8008318:	2b0c      	cmp	r3, #12
 800831a:	f000 8083 	beq.w	8008424 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	2b02      	cmp	r3, #2
 8008324:	d15e      	bne.n	80083e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008326:	4b09      	ldr	r3, [pc, #36]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a08      	ldr	r2, [pc, #32]	@ (800834c <HAL_RCC_OscConfig+0x4b8>)
 800832c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008332:	f7fd fa6b 	bl	800580c <HAL_GetTick>
 8008336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008338:	e00c      	b.n	8008354 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800833a:	f7fd fa67 	bl	800580c <HAL_GetTick>
 800833e:	4602      	mov	r2, r0
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	2b02      	cmp	r3, #2
 8008346:	d905      	bls.n	8008354 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e0ab      	b.n	80084a4 <HAL_RCC_OscConfig+0x610>
 800834c:	40021000 	.word	0x40021000
 8008350:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008354:	4b55      	ldr	r3, [pc, #340]	@ (80084ac <HAL_RCC_OscConfig+0x618>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1ec      	bne.n	800833a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008360:	4b52      	ldr	r3, [pc, #328]	@ (80084ac <HAL_RCC_OscConfig+0x618>)
 8008362:	68da      	ldr	r2, [r3, #12]
 8008364:	4b52      	ldr	r3, [pc, #328]	@ (80084b0 <HAL_RCC_OscConfig+0x61c>)
 8008366:	4013      	ands	r3, r2
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	6a11      	ldr	r1, [r2, #32]
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008370:	3a01      	subs	r2, #1
 8008372:	0112      	lsls	r2, r2, #4
 8008374:	4311      	orrs	r1, r2
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800837a:	0212      	lsls	r2, r2, #8
 800837c:	4311      	orrs	r1, r2
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008382:	0852      	lsrs	r2, r2, #1
 8008384:	3a01      	subs	r2, #1
 8008386:	0552      	lsls	r2, r2, #21
 8008388:	4311      	orrs	r1, r2
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800838e:	0852      	lsrs	r2, r2, #1
 8008390:	3a01      	subs	r2, #1
 8008392:	0652      	lsls	r2, r2, #25
 8008394:	4311      	orrs	r1, r2
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800839a:	06d2      	lsls	r2, r2, #27
 800839c:	430a      	orrs	r2, r1
 800839e:	4943      	ldr	r1, [pc, #268]	@ (80084ac <HAL_RCC_OscConfig+0x618>)
 80083a0:	4313      	orrs	r3, r2
 80083a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083a4:	4b41      	ldr	r3, [pc, #260]	@ (80084ac <HAL_RCC_OscConfig+0x618>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a40      	ldr	r2, [pc, #256]	@ (80084ac <HAL_RCC_OscConfig+0x618>)
 80083aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80083b0:	4b3e      	ldr	r3, [pc, #248]	@ (80084ac <HAL_RCC_OscConfig+0x618>)
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	4a3d      	ldr	r2, [pc, #244]	@ (80084ac <HAL_RCC_OscConfig+0x618>)
 80083b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083bc:	f7fd fa26 	bl	800580c <HAL_GetTick>
 80083c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083c2:	e008      	b.n	80083d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083c4:	f7fd fa22 	bl	800580c <HAL_GetTick>
 80083c8:	4602      	mov	r2, r0
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	1ad3      	subs	r3, r2, r3
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d901      	bls.n	80083d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e066      	b.n	80084a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083d6:	4b35      	ldr	r3, [pc, #212]	@ (80084ac <HAL_RCC_OscConfig+0x618>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d0f0      	beq.n	80083c4 <HAL_RCC_OscConfig+0x530>
 80083e2:	e05e      	b.n	80084a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083e4:	4b31      	ldr	r3, [pc, #196]	@ (80084ac <HAL_RCC_OscConfig+0x618>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a30      	ldr	r2, [pc, #192]	@ (80084ac <HAL_RCC_OscConfig+0x618>)
 80083ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083f0:	f7fd fa0c 	bl	800580c <HAL_GetTick>
 80083f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083f6:	e008      	b.n	800840a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083f8:	f7fd fa08 	bl	800580c <HAL_GetTick>
 80083fc:	4602      	mov	r2, r0
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	2b02      	cmp	r3, #2
 8008404:	d901      	bls.n	800840a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e04c      	b.n	80084a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800840a:	4b28      	ldr	r3, [pc, #160]	@ (80084ac <HAL_RCC_OscConfig+0x618>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1f0      	bne.n	80083f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008416:	4b25      	ldr	r3, [pc, #148]	@ (80084ac <HAL_RCC_OscConfig+0x618>)
 8008418:	68da      	ldr	r2, [r3, #12]
 800841a:	4924      	ldr	r1, [pc, #144]	@ (80084ac <HAL_RCC_OscConfig+0x618>)
 800841c:	4b25      	ldr	r3, [pc, #148]	@ (80084b4 <HAL_RCC_OscConfig+0x620>)
 800841e:	4013      	ands	r3, r2
 8008420:	60cb      	str	r3, [r1, #12]
 8008422:	e03e      	b.n	80084a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	69db      	ldr	r3, [r3, #28]
 8008428:	2b01      	cmp	r3, #1
 800842a:	d101      	bne.n	8008430 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	e039      	b.n	80084a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008430:	4b1e      	ldr	r3, [pc, #120]	@ (80084ac <HAL_RCC_OscConfig+0x618>)
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	f003 0203 	and.w	r2, r3, #3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a1b      	ldr	r3, [r3, #32]
 8008440:	429a      	cmp	r2, r3
 8008442:	d12c      	bne.n	800849e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800844e:	3b01      	subs	r3, #1
 8008450:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008452:	429a      	cmp	r2, r3
 8008454:	d123      	bne.n	800849e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008460:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008462:	429a      	cmp	r2, r3
 8008464:	d11b      	bne.n	800849e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008470:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008472:	429a      	cmp	r2, r3
 8008474:	d113      	bne.n	800849e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008480:	085b      	lsrs	r3, r3, #1
 8008482:	3b01      	subs	r3, #1
 8008484:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008486:	429a      	cmp	r2, r3
 8008488:	d109      	bne.n	800849e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008494:	085b      	lsrs	r3, r3, #1
 8008496:	3b01      	subs	r3, #1
 8008498:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800849a:	429a      	cmp	r2, r3
 800849c:	d001      	beq.n	80084a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e000      	b.n	80084a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3720      	adds	r7, #32
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	40021000 	.word	0x40021000
 80084b0:	019f800c 	.word	0x019f800c
 80084b4:	feeefffc 	.word	0xfeeefffc

080084b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80084c2:	2300      	movs	r3, #0
 80084c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e11e      	b.n	800870e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80084d0:	4b91      	ldr	r3, [pc, #580]	@ (8008718 <HAL_RCC_ClockConfig+0x260>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 030f 	and.w	r3, r3, #15
 80084d8:	683a      	ldr	r2, [r7, #0]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d910      	bls.n	8008500 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084de:	4b8e      	ldr	r3, [pc, #568]	@ (8008718 <HAL_RCC_ClockConfig+0x260>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f023 020f 	bic.w	r2, r3, #15
 80084e6:	498c      	ldr	r1, [pc, #560]	@ (8008718 <HAL_RCC_ClockConfig+0x260>)
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084ee:	4b8a      	ldr	r3, [pc, #552]	@ (8008718 <HAL_RCC_ClockConfig+0x260>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 030f 	and.w	r3, r3, #15
 80084f6:	683a      	ldr	r2, [r7, #0]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d001      	beq.n	8008500 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e106      	b.n	800870e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	2b00      	cmp	r3, #0
 800850a:	d073      	beq.n	80085f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	2b03      	cmp	r3, #3
 8008512:	d129      	bne.n	8008568 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008514:	4b81      	ldr	r3, [pc, #516]	@ (800871c <HAL_RCC_ClockConfig+0x264>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800851c:	2b00      	cmp	r3, #0
 800851e:	d101      	bne.n	8008524 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e0f4      	b.n	800870e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008524:	f000 f99e 	bl	8008864 <RCC_GetSysClockFreqFromPLLSource>
 8008528:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	4a7c      	ldr	r2, [pc, #496]	@ (8008720 <HAL_RCC_ClockConfig+0x268>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d93f      	bls.n	80085b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008532:	4b7a      	ldr	r3, [pc, #488]	@ (800871c <HAL_RCC_ClockConfig+0x264>)
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d009      	beq.n	8008552 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008546:	2b00      	cmp	r3, #0
 8008548:	d033      	beq.n	80085b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800854e:	2b00      	cmp	r3, #0
 8008550:	d12f      	bne.n	80085b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008552:	4b72      	ldr	r3, [pc, #456]	@ (800871c <HAL_RCC_ClockConfig+0x264>)
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800855a:	4a70      	ldr	r2, [pc, #448]	@ (800871c <HAL_RCC_ClockConfig+0x264>)
 800855c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008560:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008562:	2380      	movs	r3, #128	@ 0x80
 8008564:	617b      	str	r3, [r7, #20]
 8008566:	e024      	b.n	80085b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	2b02      	cmp	r3, #2
 800856e:	d107      	bne.n	8008580 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008570:	4b6a      	ldr	r3, [pc, #424]	@ (800871c <HAL_RCC_ClockConfig+0x264>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008578:	2b00      	cmp	r3, #0
 800857a:	d109      	bne.n	8008590 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e0c6      	b.n	800870e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008580:	4b66      	ldr	r3, [pc, #408]	@ (800871c <HAL_RCC_ClockConfig+0x264>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e0be      	b.n	800870e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008590:	f000 f8ce 	bl	8008730 <HAL_RCC_GetSysClockFreq>
 8008594:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	4a61      	ldr	r2, [pc, #388]	@ (8008720 <HAL_RCC_ClockConfig+0x268>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d909      	bls.n	80085b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800859e:	4b5f      	ldr	r3, [pc, #380]	@ (800871c <HAL_RCC_ClockConfig+0x264>)
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085a6:	4a5d      	ldr	r2, [pc, #372]	@ (800871c <HAL_RCC_ClockConfig+0x264>)
 80085a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80085ae:	2380      	movs	r3, #128	@ 0x80
 80085b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80085b2:	4b5a      	ldr	r3, [pc, #360]	@ (800871c <HAL_RCC_ClockConfig+0x264>)
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f023 0203 	bic.w	r2, r3, #3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	4957      	ldr	r1, [pc, #348]	@ (800871c <HAL_RCC_ClockConfig+0x264>)
 80085c0:	4313      	orrs	r3, r2
 80085c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085c4:	f7fd f922 	bl	800580c <HAL_GetTick>
 80085c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085ca:	e00a      	b.n	80085e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085cc:	f7fd f91e 	bl	800580c <HAL_GetTick>
 80085d0:	4602      	mov	r2, r0
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085da:	4293      	cmp	r3, r2
 80085dc:	d901      	bls.n	80085e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e095      	b.n	800870e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085e2:	4b4e      	ldr	r3, [pc, #312]	@ (800871c <HAL_RCC_ClockConfig+0x264>)
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	f003 020c 	and.w	r2, r3, #12
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d1eb      	bne.n	80085cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 0302 	and.w	r3, r3, #2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d023      	beq.n	8008648 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0304 	and.w	r3, r3, #4
 8008608:	2b00      	cmp	r3, #0
 800860a:	d005      	beq.n	8008618 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800860c:	4b43      	ldr	r3, [pc, #268]	@ (800871c <HAL_RCC_ClockConfig+0x264>)
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	4a42      	ldr	r2, [pc, #264]	@ (800871c <HAL_RCC_ClockConfig+0x264>)
 8008612:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008616:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 0308 	and.w	r3, r3, #8
 8008620:	2b00      	cmp	r3, #0
 8008622:	d007      	beq.n	8008634 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008624:	4b3d      	ldr	r3, [pc, #244]	@ (800871c <HAL_RCC_ClockConfig+0x264>)
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800862c:	4a3b      	ldr	r2, [pc, #236]	@ (800871c <HAL_RCC_ClockConfig+0x264>)
 800862e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008632:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008634:	4b39      	ldr	r3, [pc, #228]	@ (800871c <HAL_RCC_ClockConfig+0x264>)
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	4936      	ldr	r1, [pc, #216]	@ (800871c <HAL_RCC_ClockConfig+0x264>)
 8008642:	4313      	orrs	r3, r2
 8008644:	608b      	str	r3, [r1, #8]
 8008646:	e008      	b.n	800865a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	2b80      	cmp	r3, #128	@ 0x80
 800864c:	d105      	bne.n	800865a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800864e:	4b33      	ldr	r3, [pc, #204]	@ (800871c <HAL_RCC_ClockConfig+0x264>)
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	4a32      	ldr	r2, [pc, #200]	@ (800871c <HAL_RCC_ClockConfig+0x264>)
 8008654:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008658:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800865a:	4b2f      	ldr	r3, [pc, #188]	@ (8008718 <HAL_RCC_ClockConfig+0x260>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 030f 	and.w	r3, r3, #15
 8008662:	683a      	ldr	r2, [r7, #0]
 8008664:	429a      	cmp	r2, r3
 8008666:	d21d      	bcs.n	80086a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008668:	4b2b      	ldr	r3, [pc, #172]	@ (8008718 <HAL_RCC_ClockConfig+0x260>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f023 020f 	bic.w	r2, r3, #15
 8008670:	4929      	ldr	r1, [pc, #164]	@ (8008718 <HAL_RCC_ClockConfig+0x260>)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	4313      	orrs	r3, r2
 8008676:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008678:	f7fd f8c8 	bl	800580c <HAL_GetTick>
 800867c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800867e:	e00a      	b.n	8008696 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008680:	f7fd f8c4 	bl	800580c <HAL_GetTick>
 8008684:	4602      	mov	r2, r0
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800868e:	4293      	cmp	r3, r2
 8008690:	d901      	bls.n	8008696 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e03b      	b.n	800870e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008696:	4b20      	ldr	r3, [pc, #128]	@ (8008718 <HAL_RCC_ClockConfig+0x260>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 030f 	and.w	r3, r3, #15
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d1ed      	bne.n	8008680 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 0304 	and.w	r3, r3, #4
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d008      	beq.n	80086c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086b0:	4b1a      	ldr	r3, [pc, #104]	@ (800871c <HAL_RCC_ClockConfig+0x264>)
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	4917      	ldr	r1, [pc, #92]	@ (800871c <HAL_RCC_ClockConfig+0x264>)
 80086be:	4313      	orrs	r3, r2
 80086c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0308 	and.w	r3, r3, #8
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d009      	beq.n	80086e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80086ce:	4b13      	ldr	r3, [pc, #76]	@ (800871c <HAL_RCC_ClockConfig+0x264>)
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	00db      	lsls	r3, r3, #3
 80086dc:	490f      	ldr	r1, [pc, #60]	@ (800871c <HAL_RCC_ClockConfig+0x264>)
 80086de:	4313      	orrs	r3, r2
 80086e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80086e2:	f000 f825 	bl	8008730 <HAL_RCC_GetSysClockFreq>
 80086e6:	4602      	mov	r2, r0
 80086e8:	4b0c      	ldr	r3, [pc, #48]	@ (800871c <HAL_RCC_ClockConfig+0x264>)
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	091b      	lsrs	r3, r3, #4
 80086ee:	f003 030f 	and.w	r3, r3, #15
 80086f2:	490c      	ldr	r1, [pc, #48]	@ (8008724 <HAL_RCC_ClockConfig+0x26c>)
 80086f4:	5ccb      	ldrb	r3, [r1, r3]
 80086f6:	f003 031f 	and.w	r3, r3, #31
 80086fa:	fa22 f303 	lsr.w	r3, r2, r3
 80086fe:	4a0a      	ldr	r2, [pc, #40]	@ (8008728 <HAL_RCC_ClockConfig+0x270>)
 8008700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008702:	4b0a      	ldr	r3, [pc, #40]	@ (800872c <HAL_RCC_ClockConfig+0x274>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4618      	mov	r0, r3
 8008708:	f7fd f834 	bl	8005774 <HAL_InitTick>
 800870c:	4603      	mov	r3, r0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	40022000 	.word	0x40022000
 800871c:	40021000 	.word	0x40021000
 8008720:	04c4b400 	.word	0x04c4b400
 8008724:	0800e31c 	.word	0x0800e31c
 8008728:	20000168 	.word	0x20000168
 800872c:	2000016c 	.word	0x2000016c

08008730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008730:	b480      	push	{r7}
 8008732:	b087      	sub	sp, #28
 8008734:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008736:	4b2c      	ldr	r3, [pc, #176]	@ (80087e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	f003 030c 	and.w	r3, r3, #12
 800873e:	2b04      	cmp	r3, #4
 8008740:	d102      	bne.n	8008748 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008742:	4b2a      	ldr	r3, [pc, #168]	@ (80087ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8008744:	613b      	str	r3, [r7, #16]
 8008746:	e047      	b.n	80087d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008748:	4b27      	ldr	r3, [pc, #156]	@ (80087e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f003 030c 	and.w	r3, r3, #12
 8008750:	2b08      	cmp	r3, #8
 8008752:	d102      	bne.n	800875a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008754:	4b26      	ldr	r3, [pc, #152]	@ (80087f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008756:	613b      	str	r3, [r7, #16]
 8008758:	e03e      	b.n	80087d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800875a:	4b23      	ldr	r3, [pc, #140]	@ (80087e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f003 030c 	and.w	r3, r3, #12
 8008762:	2b0c      	cmp	r3, #12
 8008764:	d136      	bne.n	80087d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008766:	4b20      	ldr	r3, [pc, #128]	@ (80087e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	f003 0303 	and.w	r3, r3, #3
 800876e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008770:	4b1d      	ldr	r3, [pc, #116]	@ (80087e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	091b      	lsrs	r3, r3, #4
 8008776:	f003 030f 	and.w	r3, r3, #15
 800877a:	3301      	adds	r3, #1
 800877c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2b03      	cmp	r3, #3
 8008782:	d10c      	bne.n	800879e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008784:	4a1a      	ldr	r2, [pc, #104]	@ (80087f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	fbb2 f3f3 	udiv	r3, r2, r3
 800878c:	4a16      	ldr	r2, [pc, #88]	@ (80087e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800878e:	68d2      	ldr	r2, [r2, #12]
 8008790:	0a12      	lsrs	r2, r2, #8
 8008792:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008796:	fb02 f303 	mul.w	r3, r2, r3
 800879a:	617b      	str	r3, [r7, #20]
      break;
 800879c:	e00c      	b.n	80087b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800879e:	4a13      	ldr	r2, [pc, #76]	@ (80087ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80087a6:	4a10      	ldr	r2, [pc, #64]	@ (80087e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80087a8:	68d2      	ldr	r2, [r2, #12]
 80087aa:	0a12      	lsrs	r2, r2, #8
 80087ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80087b0:	fb02 f303 	mul.w	r3, r2, r3
 80087b4:	617b      	str	r3, [r7, #20]
      break;
 80087b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80087b8:	4b0b      	ldr	r3, [pc, #44]	@ (80087e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	0e5b      	lsrs	r3, r3, #25
 80087be:	f003 0303 	and.w	r3, r3, #3
 80087c2:	3301      	adds	r3, #1
 80087c4:	005b      	lsls	r3, r3, #1
 80087c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d0:	613b      	str	r3, [r7, #16]
 80087d2:	e001      	b.n	80087d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80087d4:	2300      	movs	r3, #0
 80087d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80087d8:	693b      	ldr	r3, [r7, #16]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	371c      	adds	r7, #28
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	40021000 	.word	0x40021000
 80087ec:	00f42400 	.word	0x00f42400
 80087f0:	016e3600 	.word	0x016e3600

080087f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087f4:	b480      	push	{r7}
 80087f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087f8:	4b03      	ldr	r3, [pc, #12]	@ (8008808 <HAL_RCC_GetHCLKFreq+0x14>)
 80087fa:	681b      	ldr	r3, [r3, #0]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	20000168 	.word	0x20000168

0800880c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008810:	f7ff fff0 	bl	80087f4 <HAL_RCC_GetHCLKFreq>
 8008814:	4602      	mov	r2, r0
 8008816:	4b06      	ldr	r3, [pc, #24]	@ (8008830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	0a1b      	lsrs	r3, r3, #8
 800881c:	f003 0307 	and.w	r3, r3, #7
 8008820:	4904      	ldr	r1, [pc, #16]	@ (8008834 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008822:	5ccb      	ldrb	r3, [r1, r3]
 8008824:	f003 031f 	and.w	r3, r3, #31
 8008828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800882c:	4618      	mov	r0, r3
 800882e:	bd80      	pop	{r7, pc}
 8008830:	40021000 	.word	0x40021000
 8008834:	0800e32c 	.word	0x0800e32c

08008838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800883c:	f7ff ffda 	bl	80087f4 <HAL_RCC_GetHCLKFreq>
 8008840:	4602      	mov	r2, r0
 8008842:	4b06      	ldr	r3, [pc, #24]	@ (800885c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	0adb      	lsrs	r3, r3, #11
 8008848:	f003 0307 	and.w	r3, r3, #7
 800884c:	4904      	ldr	r1, [pc, #16]	@ (8008860 <HAL_RCC_GetPCLK2Freq+0x28>)
 800884e:	5ccb      	ldrb	r3, [r1, r3]
 8008850:	f003 031f 	and.w	r3, r3, #31
 8008854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008858:	4618      	mov	r0, r3
 800885a:	bd80      	pop	{r7, pc}
 800885c:	40021000 	.word	0x40021000
 8008860:	0800e32c 	.word	0x0800e32c

08008864 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008864:	b480      	push	{r7}
 8008866:	b087      	sub	sp, #28
 8008868:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800886a:	4b1e      	ldr	r3, [pc, #120]	@ (80088e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	f003 0303 	and.w	r3, r3, #3
 8008872:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008874:	4b1b      	ldr	r3, [pc, #108]	@ (80088e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	091b      	lsrs	r3, r3, #4
 800887a:	f003 030f 	and.w	r3, r3, #15
 800887e:	3301      	adds	r3, #1
 8008880:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	2b03      	cmp	r3, #3
 8008886:	d10c      	bne.n	80088a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008888:	4a17      	ldr	r2, [pc, #92]	@ (80088e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008890:	4a14      	ldr	r2, [pc, #80]	@ (80088e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008892:	68d2      	ldr	r2, [r2, #12]
 8008894:	0a12      	lsrs	r2, r2, #8
 8008896:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800889a:	fb02 f303 	mul.w	r3, r2, r3
 800889e:	617b      	str	r3, [r7, #20]
    break;
 80088a0:	e00c      	b.n	80088bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80088a2:	4a12      	ldr	r2, [pc, #72]	@ (80088ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088aa:	4a0e      	ldr	r2, [pc, #56]	@ (80088e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80088ac:	68d2      	ldr	r2, [r2, #12]
 80088ae:	0a12      	lsrs	r2, r2, #8
 80088b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80088b4:	fb02 f303 	mul.w	r3, r2, r3
 80088b8:	617b      	str	r3, [r7, #20]
    break;
 80088ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80088bc:	4b09      	ldr	r3, [pc, #36]	@ (80088e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	0e5b      	lsrs	r3, r3, #25
 80088c2:	f003 0303 	and.w	r3, r3, #3
 80088c6:	3301      	adds	r3, #1
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80088cc:	697a      	ldr	r2, [r7, #20]
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80088d6:	687b      	ldr	r3, [r7, #4]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	371c      	adds	r7, #28
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr
 80088e4:	40021000 	.word	0x40021000
 80088e8:	016e3600 	.word	0x016e3600
 80088ec:	00f42400 	.word	0x00f42400

080088f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80088f8:	2300      	movs	r3, #0
 80088fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80088fc:	2300      	movs	r3, #0
 80088fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008908:	2b00      	cmp	r3, #0
 800890a:	f000 8098 	beq.w	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800890e:	2300      	movs	r3, #0
 8008910:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008912:	4b43      	ldr	r3, [pc, #268]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10d      	bne.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800891e:	4b40      	ldr	r3, [pc, #256]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008922:	4a3f      	ldr	r2, [pc, #252]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008928:	6593      	str	r3, [r2, #88]	@ 0x58
 800892a:	4b3d      	ldr	r3, [pc, #244]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800892c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800892e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008932:	60bb      	str	r3, [r7, #8]
 8008934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008936:	2301      	movs	r3, #1
 8008938:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800893a:	4b3a      	ldr	r3, [pc, #232]	@ (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a39      	ldr	r2, [pc, #228]	@ (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008940:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008944:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008946:	f7fc ff61 	bl	800580c <HAL_GetTick>
 800894a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800894c:	e009      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800894e:	f7fc ff5d 	bl	800580c <HAL_GetTick>
 8008952:	4602      	mov	r2, r0
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	2b02      	cmp	r3, #2
 800895a:	d902      	bls.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	74fb      	strb	r3, [r7, #19]
        break;
 8008960:	e005      	b.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008962:	4b30      	ldr	r3, [pc, #192]	@ (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800896a:	2b00      	cmp	r3, #0
 800896c:	d0ef      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800896e:	7cfb      	ldrb	r3, [r7, #19]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d159      	bne.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008974:	4b2a      	ldr	r3, [pc, #168]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800897a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800897e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d01e      	beq.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800898a:	697a      	ldr	r2, [r7, #20]
 800898c:	429a      	cmp	r2, r3
 800898e:	d019      	beq.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008990:	4b23      	ldr	r3, [pc, #140]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008996:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800899a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800899c:	4b20      	ldr	r3, [pc, #128]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800899e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089a2:	4a1f      	ldr	r2, [pc, #124]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089ac:	4b1c      	ldr	r3, [pc, #112]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089b2:	4a1b      	ldr	r2, [pc, #108]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80089bc:	4a18      	ldr	r2, [pc, #96]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d016      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ce:	f7fc ff1d 	bl	800580c <HAL_GetTick>
 80089d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089d4:	e00b      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089d6:	f7fc ff19 	bl	800580c <HAL_GetTick>
 80089da:	4602      	mov	r2, r0
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d902      	bls.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	74fb      	strb	r3, [r7, #19]
            break;
 80089ec:	e006      	b.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089f4:	f003 0302 	and.w	r3, r3, #2
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d0ec      	beq.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80089fc:	7cfb      	ldrb	r3, [r7, #19]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10b      	bne.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a02:	4b07      	ldr	r3, [pc, #28]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a10:	4903      	ldr	r1, [pc, #12]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a12:	4313      	orrs	r3, r2
 8008a14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008a18:	e008      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a1a:	7cfb      	ldrb	r3, [r7, #19]
 8008a1c:	74bb      	strb	r3, [r7, #18]
 8008a1e:	e005      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008a20:	40021000 	.word	0x40021000
 8008a24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a28:	7cfb      	ldrb	r3, [r7, #19]
 8008a2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a2c:	7c7b      	ldrb	r3, [r7, #17]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d105      	bne.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a32:	4ba7      	ldr	r3, [pc, #668]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a36:	4aa6      	ldr	r2, [pc, #664]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a3c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00a      	beq.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008a4a:	4ba1      	ldr	r3, [pc, #644]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a50:	f023 0203 	bic.w	r2, r3, #3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	499d      	ldr	r1, [pc, #628]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 0302 	and.w	r3, r3, #2
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00a      	beq.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008a6c:	4b98      	ldr	r3, [pc, #608]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a72:	f023 020c 	bic.w	r2, r3, #12
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	4995      	ldr	r1, [pc, #596]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 0304 	and.w	r3, r3, #4
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00a      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008a8e:	4b90      	ldr	r3, [pc, #576]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a94:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	498c      	ldr	r1, [pc, #560]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 0308 	and.w	r3, r3, #8
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00a      	beq.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008ab0:	4b87      	ldr	r3, [pc, #540]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ab6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	4984      	ldr	r1, [pc, #528]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 0310 	and.w	r3, r3, #16
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00a      	beq.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008ad2:	4b7f      	ldr	r3, [pc, #508]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ad8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	695b      	ldr	r3, [r3, #20]
 8008ae0:	497b      	ldr	r1, [pc, #492]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 0320 	and.w	r3, r3, #32
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00a      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008af4:	4b76      	ldr	r3, [pc, #472]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008afa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	4973      	ldr	r1, [pc, #460]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b04:	4313      	orrs	r3, r2
 8008b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00a      	beq.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008b16:	4b6e      	ldr	r3, [pc, #440]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b1c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	69db      	ldr	r3, [r3, #28]
 8008b24:	496a      	ldr	r1, [pc, #424]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b26:	4313      	orrs	r3, r2
 8008b28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00a      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008b38:	4b65      	ldr	r3, [pc, #404]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b3e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	4962      	ldr	r1, [pc, #392]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00a      	beq.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008b5a:	4b5d      	ldr	r3, [pc, #372]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b68:	4959      	ldr	r1, [pc, #356]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00a      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008b7c:	4b54      	ldr	r3, [pc, #336]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b82:	f023 0203 	bic.w	r2, r3, #3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b8a:	4951      	ldr	r1, [pc, #324]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00a      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b9e:	4b4c      	ldr	r3, [pc, #304]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ba4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bac:	4948      	ldr	r1, [pc, #288]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d015      	beq.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008bc0:	4b43      	ldr	r3, [pc, #268]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bce:	4940      	ldr	r1, [pc, #256]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bde:	d105      	bne.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008be0:	4b3b      	ldr	r3, [pc, #236]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	4a3a      	ldr	r2, [pc, #232]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008be6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bea:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d015      	beq.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008bf8:	4b35      	ldr	r3, [pc, #212]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bfe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c06:	4932      	ldr	r1, [pc, #200]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008c16:	d105      	bne.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c18:	4b2d      	ldr	r3, [pc, #180]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	4a2c      	ldr	r2, [pc, #176]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c22:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d015      	beq.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008c30:	4b27      	ldr	r3, [pc, #156]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c36:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c3e:	4924      	ldr	r1, [pc, #144]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c40:	4313      	orrs	r3, r2
 8008c42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c4e:	d105      	bne.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c50:	4b1f      	ldr	r3, [pc, #124]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	4a1e      	ldr	r2, [pc, #120]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c5a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d015      	beq.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c68:	4b19      	ldr	r3, [pc, #100]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c76:	4916      	ldr	r1, [pc, #88]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c86:	d105      	bne.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c88:	4b11      	ldr	r3, [pc, #68]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	4a10      	ldr	r2, [pc, #64]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c92:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d019      	beq.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ca6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cae:	4908      	ldr	r1, [pc, #32]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cbe:	d109      	bne.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008cc0:	4b03      	ldr	r3, [pc, #12]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	4a02      	ldr	r2, [pc, #8]	@ (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008cca:	60d3      	str	r3, [r2, #12]
 8008ccc:	e002      	b.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008cce:	bf00      	nop
 8008cd0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d015      	beq.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008ce0:	4b29      	ldr	r3, [pc, #164]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ce6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cee:	4926      	ldr	r1, [pc, #152]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cfe:	d105      	bne.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008d00:	4b21      	ldr	r3, [pc, #132]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	4a20      	ldr	r2, [pc, #128]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d0a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d015      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008d18:	4b1b      	ldr	r3, [pc, #108]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d1e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d26:	4918      	ldr	r1, [pc, #96]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d36:	d105      	bne.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008d38:	4b13      	ldr	r3, [pc, #76]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	4a12      	ldr	r2, [pc, #72]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d42:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d015      	beq.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008d50:	4b0d      	ldr	r3, [pc, #52]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008d56:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d5e:	490a      	ldr	r1, [pc, #40]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d60:	4313      	orrs	r3, r2
 8008d62:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d6e:	d105      	bne.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d70:	4b05      	ldr	r3, [pc, #20]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	4a04      	ldr	r2, [pc, #16]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d7a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008d7c:	7cbb      	ldrb	r3, [r7, #18]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3718      	adds	r7, #24
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	40021000 	.word	0x40021000

08008d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d101      	bne.n	8008d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e054      	b.n	8008e48 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d111      	bne.n	8008dce <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f001 fee2 	bl	800ab7c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d102      	bne.n	8008dc6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a23      	ldr	r2, [pc, #140]	@ (8008e50 <HAL_TIM_Base_Init+0xc4>)
 8008dc4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2202      	movs	r2, #2
 8008dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	3304      	adds	r3, #4
 8008dde:	4619      	mov	r1, r3
 8008de0:	4610      	mov	r0, r2
 8008de2:	f001 fa2b 	bl	800a23c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2201      	movs	r2, #1
 8008e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2201      	movs	r2, #1
 8008e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2201      	movs	r2, #1
 8008e32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	08005035 	.word	0x08005035

08008e54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d001      	beq.n	8008e6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e04c      	b.n	8008f06 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2202      	movs	r2, #2
 8008e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a26      	ldr	r2, [pc, #152]	@ (8008f14 <HAL_TIM_Base_Start+0xc0>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d022      	beq.n	8008ec4 <HAL_TIM_Base_Start+0x70>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e86:	d01d      	beq.n	8008ec4 <HAL_TIM_Base_Start+0x70>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a22      	ldr	r2, [pc, #136]	@ (8008f18 <HAL_TIM_Base_Start+0xc4>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d018      	beq.n	8008ec4 <HAL_TIM_Base_Start+0x70>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a21      	ldr	r2, [pc, #132]	@ (8008f1c <HAL_TIM_Base_Start+0xc8>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d013      	beq.n	8008ec4 <HAL_TIM_Base_Start+0x70>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a1f      	ldr	r2, [pc, #124]	@ (8008f20 <HAL_TIM_Base_Start+0xcc>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d00e      	beq.n	8008ec4 <HAL_TIM_Base_Start+0x70>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8008f24 <HAL_TIM_Base_Start+0xd0>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d009      	beq.n	8008ec4 <HAL_TIM_Base_Start+0x70>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8008f28 <HAL_TIM_Base_Start+0xd4>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d004      	beq.n	8008ec4 <HAL_TIM_Base_Start+0x70>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8008f2c <HAL_TIM_Base_Start+0xd8>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d115      	bne.n	8008ef0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	689a      	ldr	r2, [r3, #8]
 8008eca:	4b19      	ldr	r3, [pc, #100]	@ (8008f30 <HAL_TIM_Base_Start+0xdc>)
 8008ecc:	4013      	ands	r3, r2
 8008ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2b06      	cmp	r3, #6
 8008ed4:	d015      	beq.n	8008f02 <HAL_TIM_Base_Start+0xae>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008edc:	d011      	beq.n	8008f02 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f042 0201 	orr.w	r2, r2, #1
 8008eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eee:	e008      	b.n	8008f02 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f042 0201 	orr.w	r2, r2, #1
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	e000      	b.n	8008f04 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3714      	adds	r7, #20
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	40012c00 	.word	0x40012c00
 8008f18:	40000400 	.word	0x40000400
 8008f1c:	40000800 	.word	0x40000800
 8008f20:	40000c00 	.word	0x40000c00
 8008f24:	40013400 	.word	0x40013400
 8008f28:	40014000 	.word	0x40014000
 8008f2c:	40015000 	.word	0x40015000
 8008f30:	00010007 	.word	0x00010007

08008f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d001      	beq.n	8008f4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e054      	b.n	8008ff6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2202      	movs	r2, #2
 8008f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	68da      	ldr	r2, [r3, #12]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f042 0201 	orr.w	r2, r2, #1
 8008f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a26      	ldr	r2, [pc, #152]	@ (8009004 <HAL_TIM_Base_Start_IT+0xd0>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d022      	beq.n	8008fb4 <HAL_TIM_Base_Start_IT+0x80>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f76:	d01d      	beq.n	8008fb4 <HAL_TIM_Base_Start_IT+0x80>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a22      	ldr	r2, [pc, #136]	@ (8009008 <HAL_TIM_Base_Start_IT+0xd4>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d018      	beq.n	8008fb4 <HAL_TIM_Base_Start_IT+0x80>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a21      	ldr	r2, [pc, #132]	@ (800900c <HAL_TIM_Base_Start_IT+0xd8>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d013      	beq.n	8008fb4 <HAL_TIM_Base_Start_IT+0x80>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a1f      	ldr	r2, [pc, #124]	@ (8009010 <HAL_TIM_Base_Start_IT+0xdc>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d00e      	beq.n	8008fb4 <HAL_TIM_Base_Start_IT+0x80>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8009014 <HAL_TIM_Base_Start_IT+0xe0>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d009      	beq.n	8008fb4 <HAL_TIM_Base_Start_IT+0x80>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8009018 <HAL_TIM_Base_Start_IT+0xe4>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d004      	beq.n	8008fb4 <HAL_TIM_Base_Start_IT+0x80>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a1b      	ldr	r2, [pc, #108]	@ (800901c <HAL_TIM_Base_Start_IT+0xe8>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d115      	bne.n	8008fe0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	689a      	ldr	r2, [r3, #8]
 8008fba:	4b19      	ldr	r3, [pc, #100]	@ (8009020 <HAL_TIM_Base_Start_IT+0xec>)
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2b06      	cmp	r3, #6
 8008fc4:	d015      	beq.n	8008ff2 <HAL_TIM_Base_Start_IT+0xbe>
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fcc:	d011      	beq.n	8008ff2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f042 0201 	orr.w	r2, r2, #1
 8008fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fde:	e008      	b.n	8008ff2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f042 0201 	orr.w	r2, r2, #1
 8008fee:	601a      	str	r2, [r3, #0]
 8008ff0:	e000      	b.n	8008ff4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ff2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3714      	adds	r7, #20
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	40012c00 	.word	0x40012c00
 8009008:	40000400 	.word	0x40000400
 800900c:	40000800 	.word	0x40000800
 8009010:	40000c00 	.word	0x40000c00
 8009014:	40013400 	.word	0x40013400
 8009018:	40014000 	.word	0x40014000
 800901c:	40015000 	.word	0x40015000
 8009020:	00010007 	.word	0x00010007

08009024 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e054      	b.n	80090e0 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800903c:	b2db      	uxtb	r3, r3
 800903e:	2b00      	cmp	r3, #0
 8009040:	d111      	bne.n	8009066 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f001 fd96 	bl	800ab7c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009054:	2b00      	cmp	r3, #0
 8009056:	d102      	bne.n	800905e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a23      	ldr	r2, [pc, #140]	@ (80090e8 <HAL_TIM_PWM_Init+0xc4>)
 800905c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2202      	movs	r2, #2
 800906a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	3304      	adds	r3, #4
 8009076:	4619      	mov	r1, r3
 8009078:	4610      	mov	r0, r2
 800907a:	f001 f8df 	bl	800a23c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2201      	movs	r2, #1
 800908a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2201      	movs	r2, #1
 8009092:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2201      	movs	r2, #1
 80090a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2201      	movs	r2, #1
 80090ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2201      	movs	r2, #1
 80090ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2201      	movs	r2, #1
 80090d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	08004fe9 	.word	0x08004fe9

080090ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d109      	bne.n	8009110 <HAL_TIM_PWM_Start+0x24>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b01      	cmp	r3, #1
 8009106:	bf14      	ite	ne
 8009108:	2301      	movne	r3, #1
 800910a:	2300      	moveq	r3, #0
 800910c:	b2db      	uxtb	r3, r3
 800910e:	e03c      	b.n	800918a <HAL_TIM_PWM_Start+0x9e>
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	2b04      	cmp	r3, #4
 8009114:	d109      	bne.n	800912a <HAL_TIM_PWM_Start+0x3e>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800911c:	b2db      	uxtb	r3, r3
 800911e:	2b01      	cmp	r3, #1
 8009120:	bf14      	ite	ne
 8009122:	2301      	movne	r3, #1
 8009124:	2300      	moveq	r3, #0
 8009126:	b2db      	uxtb	r3, r3
 8009128:	e02f      	b.n	800918a <HAL_TIM_PWM_Start+0x9e>
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2b08      	cmp	r3, #8
 800912e:	d109      	bne.n	8009144 <HAL_TIM_PWM_Start+0x58>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009136:	b2db      	uxtb	r3, r3
 8009138:	2b01      	cmp	r3, #1
 800913a:	bf14      	ite	ne
 800913c:	2301      	movne	r3, #1
 800913e:	2300      	moveq	r3, #0
 8009140:	b2db      	uxtb	r3, r3
 8009142:	e022      	b.n	800918a <HAL_TIM_PWM_Start+0x9e>
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	2b0c      	cmp	r3, #12
 8009148:	d109      	bne.n	800915e <HAL_TIM_PWM_Start+0x72>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009150:	b2db      	uxtb	r3, r3
 8009152:	2b01      	cmp	r3, #1
 8009154:	bf14      	ite	ne
 8009156:	2301      	movne	r3, #1
 8009158:	2300      	moveq	r3, #0
 800915a:	b2db      	uxtb	r3, r3
 800915c:	e015      	b.n	800918a <HAL_TIM_PWM_Start+0x9e>
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	2b10      	cmp	r3, #16
 8009162:	d109      	bne.n	8009178 <HAL_TIM_PWM_Start+0x8c>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800916a:	b2db      	uxtb	r3, r3
 800916c:	2b01      	cmp	r3, #1
 800916e:	bf14      	ite	ne
 8009170:	2301      	movne	r3, #1
 8009172:	2300      	moveq	r3, #0
 8009174:	b2db      	uxtb	r3, r3
 8009176:	e008      	b.n	800918a <HAL_TIM_PWM_Start+0x9e>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800917e:	b2db      	uxtb	r3, r3
 8009180:	2b01      	cmp	r3, #1
 8009182:	bf14      	ite	ne
 8009184:	2301      	movne	r3, #1
 8009186:	2300      	moveq	r3, #0
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b00      	cmp	r3, #0
 800918c:	d001      	beq.n	8009192 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	e0a6      	b.n	80092e0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d104      	bne.n	80091a2 <HAL_TIM_PWM_Start+0xb6>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2202      	movs	r2, #2
 800919c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80091a0:	e023      	b.n	80091ea <HAL_TIM_PWM_Start+0xfe>
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	2b04      	cmp	r3, #4
 80091a6:	d104      	bne.n	80091b2 <HAL_TIM_PWM_Start+0xc6>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2202      	movs	r2, #2
 80091ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80091b0:	e01b      	b.n	80091ea <HAL_TIM_PWM_Start+0xfe>
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	2b08      	cmp	r3, #8
 80091b6:	d104      	bne.n	80091c2 <HAL_TIM_PWM_Start+0xd6>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2202      	movs	r2, #2
 80091bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80091c0:	e013      	b.n	80091ea <HAL_TIM_PWM_Start+0xfe>
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	2b0c      	cmp	r3, #12
 80091c6:	d104      	bne.n	80091d2 <HAL_TIM_PWM_Start+0xe6>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2202      	movs	r2, #2
 80091cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80091d0:	e00b      	b.n	80091ea <HAL_TIM_PWM_Start+0xfe>
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	2b10      	cmp	r3, #16
 80091d6:	d104      	bne.n	80091e2 <HAL_TIM_PWM_Start+0xf6>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2202      	movs	r2, #2
 80091dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80091e0:	e003      	b.n	80091ea <HAL_TIM_PWM_Start+0xfe>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2202      	movs	r2, #2
 80091e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2201      	movs	r2, #1
 80091f0:	6839      	ldr	r1, [r7, #0]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f001 fc9c 	bl	800ab30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a3a      	ldr	r2, [pc, #232]	@ (80092e8 <HAL_TIM_PWM_Start+0x1fc>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d018      	beq.n	8009234 <HAL_TIM_PWM_Start+0x148>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a39      	ldr	r2, [pc, #228]	@ (80092ec <HAL_TIM_PWM_Start+0x200>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d013      	beq.n	8009234 <HAL_TIM_PWM_Start+0x148>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a37      	ldr	r2, [pc, #220]	@ (80092f0 <HAL_TIM_PWM_Start+0x204>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d00e      	beq.n	8009234 <HAL_TIM_PWM_Start+0x148>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a36      	ldr	r2, [pc, #216]	@ (80092f4 <HAL_TIM_PWM_Start+0x208>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d009      	beq.n	8009234 <HAL_TIM_PWM_Start+0x148>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a34      	ldr	r2, [pc, #208]	@ (80092f8 <HAL_TIM_PWM_Start+0x20c>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d004      	beq.n	8009234 <HAL_TIM_PWM_Start+0x148>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a33      	ldr	r2, [pc, #204]	@ (80092fc <HAL_TIM_PWM_Start+0x210>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d101      	bne.n	8009238 <HAL_TIM_PWM_Start+0x14c>
 8009234:	2301      	movs	r3, #1
 8009236:	e000      	b.n	800923a <HAL_TIM_PWM_Start+0x14e>
 8009238:	2300      	movs	r3, #0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d007      	beq.n	800924e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800924c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a25      	ldr	r2, [pc, #148]	@ (80092e8 <HAL_TIM_PWM_Start+0x1fc>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d022      	beq.n	800929e <HAL_TIM_PWM_Start+0x1b2>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009260:	d01d      	beq.n	800929e <HAL_TIM_PWM_Start+0x1b2>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a26      	ldr	r2, [pc, #152]	@ (8009300 <HAL_TIM_PWM_Start+0x214>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d018      	beq.n	800929e <HAL_TIM_PWM_Start+0x1b2>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a24      	ldr	r2, [pc, #144]	@ (8009304 <HAL_TIM_PWM_Start+0x218>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d013      	beq.n	800929e <HAL_TIM_PWM_Start+0x1b2>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a23      	ldr	r2, [pc, #140]	@ (8009308 <HAL_TIM_PWM_Start+0x21c>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d00e      	beq.n	800929e <HAL_TIM_PWM_Start+0x1b2>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a19      	ldr	r2, [pc, #100]	@ (80092ec <HAL_TIM_PWM_Start+0x200>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d009      	beq.n	800929e <HAL_TIM_PWM_Start+0x1b2>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a18      	ldr	r2, [pc, #96]	@ (80092f0 <HAL_TIM_PWM_Start+0x204>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d004      	beq.n	800929e <HAL_TIM_PWM_Start+0x1b2>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a18      	ldr	r2, [pc, #96]	@ (80092fc <HAL_TIM_PWM_Start+0x210>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d115      	bne.n	80092ca <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	689a      	ldr	r2, [r3, #8]
 80092a4:	4b19      	ldr	r3, [pc, #100]	@ (800930c <HAL_TIM_PWM_Start+0x220>)
 80092a6:	4013      	ands	r3, r2
 80092a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2b06      	cmp	r3, #6
 80092ae:	d015      	beq.n	80092dc <HAL_TIM_PWM_Start+0x1f0>
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092b6:	d011      	beq.n	80092dc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f042 0201 	orr.w	r2, r2, #1
 80092c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092c8:	e008      	b.n	80092dc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f042 0201 	orr.w	r2, r2, #1
 80092d8:	601a      	str	r2, [r3, #0]
 80092da:	e000      	b.n	80092de <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	40012c00 	.word	0x40012c00
 80092ec:	40013400 	.word	0x40013400
 80092f0:	40014000 	.word	0x40014000
 80092f4:	40014400 	.word	0x40014400
 80092f8:	40014800 	.word	0x40014800
 80092fc:	40015000 	.word	0x40015000
 8009300:	40000400 	.word	0x40000400
 8009304:	40000800 	.word	0x40000800
 8009308:	40000c00 	.word	0x40000c00
 800930c:	00010007 	.word	0x00010007

08009310 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d101      	bne.n	8009324 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	e04c      	b.n	80093be <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800932a:	b2db      	uxtb	r3, r3
 800932c:	2b00      	cmp	r3, #0
 800932e:	d111      	bne.n	8009354 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f001 fc1f 	bl	800ab7c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009342:	2b00      	cmp	r3, #0
 8009344:	d102      	bne.n	800934c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4a1f      	ldr	r2, [pc, #124]	@ (80093c8 <HAL_TIM_OnePulse_Init+0xb8>)
 800934a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2202      	movs	r2, #2
 8009358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	3304      	adds	r3, #4
 8009364:	4619      	mov	r1, r3
 8009366:	4610      	mov	r0, r2
 8009368:	f000 ff68 	bl	800a23c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f022 0208 	bic.w	r2, r2, #8
 800937a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6819      	ldr	r1, [r3, #0]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	683a      	ldr	r2, [r7, #0]
 8009388:	430a      	orrs	r2, r1
 800938a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3708      	adds	r7, #8
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	080093cd 	.word	0x080093cd

080093cc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80093f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80093f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009400:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009408:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800940a:	7bfb      	ldrb	r3, [r7, #15]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d108      	bne.n	8009422 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009410:	7bbb      	ldrb	r3, [r7, #14]
 8009412:	2b01      	cmp	r3, #1
 8009414:	d105      	bne.n	8009422 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009416:	7b7b      	ldrb	r3, [r7, #13]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d102      	bne.n	8009422 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800941c:	7b3b      	ldrb	r3, [r7, #12]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d001      	beq.n	8009426 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	e059      	b.n	80094da <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2202      	movs	r2, #2
 800942a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2202      	movs	r2, #2
 8009432:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2202      	movs	r2, #2
 800943a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2202      	movs	r2, #2
 8009442:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68da      	ldr	r2, [r3, #12]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f042 0202 	orr.w	r2, r2, #2
 8009454:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	68da      	ldr	r2, [r3, #12]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f042 0204 	orr.w	r2, r2, #4
 8009464:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2201      	movs	r2, #1
 800946c:	2100      	movs	r1, #0
 800946e:	4618      	mov	r0, r3
 8009470:	f001 fb5e 	bl	800ab30 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2201      	movs	r2, #1
 800947a:	2104      	movs	r1, #4
 800947c:	4618      	mov	r0, r3
 800947e:	f001 fb57 	bl	800ab30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a17      	ldr	r2, [pc, #92]	@ (80094e4 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d018      	beq.n	80094be <HAL_TIM_OnePulse_Start_IT+0xde>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a15      	ldr	r2, [pc, #84]	@ (80094e8 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d013      	beq.n	80094be <HAL_TIM_OnePulse_Start_IT+0xde>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a14      	ldr	r2, [pc, #80]	@ (80094ec <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d00e      	beq.n	80094be <HAL_TIM_OnePulse_Start_IT+0xde>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a12      	ldr	r2, [pc, #72]	@ (80094f0 <HAL_TIM_OnePulse_Start_IT+0x110>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d009      	beq.n	80094be <HAL_TIM_OnePulse_Start_IT+0xde>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a11      	ldr	r2, [pc, #68]	@ (80094f4 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d004      	beq.n	80094be <HAL_TIM_OnePulse_Start_IT+0xde>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a0f      	ldr	r2, [pc, #60]	@ (80094f8 <HAL_TIM_OnePulse_Start_IT+0x118>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d101      	bne.n	80094c2 <HAL_TIM_OnePulse_Start_IT+0xe2>
 80094be:	2301      	movs	r3, #1
 80094c0:	e000      	b.n	80094c4 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80094c2:	2300      	movs	r3, #0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d007      	beq.n	80094d8 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80094d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	40012c00 	.word	0x40012c00
 80094e8:	40013400 	.word	0x40013400
 80094ec:	40014000 	.word	0x40014000
 80094f0:	40014400 	.word	0x40014400
 80094f4:	40014800 	.word	0x40014800
 80094f8:	40015000 	.word	0x40015000

080094fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b086      	sub	sp, #24
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d101      	bne.n	8009510 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	e0a2      	b.n	8009656 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009516:	b2db      	uxtb	r3, r3
 8009518:	2b00      	cmp	r3, #0
 800951a:	d111      	bne.n	8009540 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f001 fb29 	bl	800ab7c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800952e:	2b00      	cmp	r3, #0
 8009530:	d102      	bne.n	8009538 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a4a      	ldr	r2, [pc, #296]	@ (8009660 <HAL_TIM_Encoder_Init+0x164>)
 8009536:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2202      	movs	r2, #2
 8009544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	6812      	ldr	r2, [r2, #0]
 8009552:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8009556:	f023 0307 	bic.w	r3, r3, #7
 800955a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	3304      	adds	r3, #4
 8009564:	4619      	mov	r1, r3
 8009566:	4610      	mov	r0, r2
 8009568:	f000 fe68 	bl	800a23c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	6a1b      	ldr	r3, [r3, #32]
 8009582:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	697a      	ldr	r2, [r7, #20]
 800958a:	4313      	orrs	r3, r2
 800958c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009594:	f023 0303 	bic.w	r3, r3, #3
 8009598:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	689a      	ldr	r2, [r3, #8]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	021b      	lsls	r3, r3, #8
 80095a4:	4313      	orrs	r3, r2
 80095a6:	693a      	ldr	r2, [r7, #16]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80095b2:	f023 030c 	bic.w	r3, r3, #12
 80095b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80095be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80095c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	68da      	ldr	r2, [r3, #12]
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	69db      	ldr	r3, [r3, #28]
 80095cc:	021b      	lsls	r3, r3, #8
 80095ce:	4313      	orrs	r3, r2
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	011a      	lsls	r2, r3, #4
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	6a1b      	ldr	r3, [r3, #32]
 80095e0:	031b      	lsls	r3, r3, #12
 80095e2:	4313      	orrs	r3, r2
 80095e4:	693a      	ldr	r2, [r7, #16]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80095f0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80095f8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	685a      	ldr	r2, [r3, #4]
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	695b      	ldr	r3, [r3, #20]
 8009602:	011b      	lsls	r3, r3, #4
 8009604:	4313      	orrs	r3, r2
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	4313      	orrs	r3, r2
 800960a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	697a      	ldr	r2, [r7, #20]
 8009612:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	693a      	ldr	r2, [r7, #16]
 800961a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3718      	adds	r7, #24
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	080050dd 	.word	0x080050dd

08009664 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009674:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800967c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009684:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800968c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d110      	bne.n	80096b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009694:	7bfb      	ldrb	r3, [r7, #15]
 8009696:	2b01      	cmp	r3, #1
 8009698:	d102      	bne.n	80096a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800969a:	7b7b      	ldrb	r3, [r7, #13]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d001      	beq.n	80096a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	e069      	b.n	8009778 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2202      	movs	r2, #2
 80096a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2202      	movs	r2, #2
 80096b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096b4:	e031      	b.n	800971a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	2b04      	cmp	r3, #4
 80096ba:	d110      	bne.n	80096de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80096bc:	7bbb      	ldrb	r3, [r7, #14]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d102      	bne.n	80096c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80096c2:	7b3b      	ldrb	r3, [r7, #12]
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d001      	beq.n	80096cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80096c8:	2301      	movs	r3, #1
 80096ca:	e055      	b.n	8009778 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2202      	movs	r2, #2
 80096d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2202      	movs	r2, #2
 80096d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80096dc:	e01d      	b.n	800971a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80096de:	7bfb      	ldrb	r3, [r7, #15]
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d108      	bne.n	80096f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80096e4:	7bbb      	ldrb	r3, [r7, #14]
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d105      	bne.n	80096f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80096ea:	7b7b      	ldrb	r3, [r7, #13]
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d102      	bne.n	80096f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80096f0:	7b3b      	ldrb	r3, [r7, #12]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d001      	beq.n	80096fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	e03e      	b.n	8009778 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2202      	movs	r2, #2
 80096fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2202      	movs	r2, #2
 8009706:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2202      	movs	r2, #2
 800970e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2202      	movs	r2, #2
 8009716:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d003      	beq.n	8009728 <HAL_TIM_Encoder_Start+0xc4>
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	2b04      	cmp	r3, #4
 8009724:	d008      	beq.n	8009738 <HAL_TIM_Encoder_Start+0xd4>
 8009726:	e00f      	b.n	8009748 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2201      	movs	r2, #1
 800972e:	2100      	movs	r1, #0
 8009730:	4618      	mov	r0, r3
 8009732:	f001 f9fd 	bl	800ab30 <TIM_CCxChannelCmd>
      break;
 8009736:	e016      	b.n	8009766 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2201      	movs	r2, #1
 800973e:	2104      	movs	r1, #4
 8009740:	4618      	mov	r0, r3
 8009742:	f001 f9f5 	bl	800ab30 <TIM_CCxChannelCmd>
      break;
 8009746:	e00e      	b.n	8009766 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2201      	movs	r2, #1
 800974e:	2100      	movs	r1, #0
 8009750:	4618      	mov	r0, r3
 8009752:	f001 f9ed 	bl	800ab30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2201      	movs	r2, #1
 800975c:	2104      	movs	r1, #4
 800975e:	4618      	mov	r0, r3
 8009760:	f001 f9e6 	bl	800ab30 <TIM_CCxChannelCmd>
      break;
 8009764:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f042 0201 	orr.w	r2, r2, #1
 8009774:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	f003 0302 	and.w	r3, r3, #2
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d026      	beq.n	80097f0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f003 0302 	and.w	r3, r3, #2
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d021      	beq.n	80097f0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f06f 0202 	mvn.w	r2, #2
 80097b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2201      	movs	r2, #1
 80097ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	699b      	ldr	r3, [r3, #24]
 80097c2:	f003 0303 	and.w	r3, r3, #3
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d005      	beq.n	80097d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	4798      	blx	r3
 80097d4:	e009      	b.n	80097ea <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	f003 0304 	and.w	r3, r3, #4
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d026      	beq.n	8009848 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f003 0304 	and.w	r3, r3, #4
 8009800:	2b00      	cmp	r3, #0
 8009802:	d021      	beq.n	8009848 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f06f 0204 	mvn.w	r2, #4
 800980c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2202      	movs	r2, #2
 8009812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	699b      	ldr	r3, [r3, #24]
 800981a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800981e:	2b00      	cmp	r3, #0
 8009820:	d005      	beq.n	800982e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	4798      	blx	r3
 800982c:	e009      	b.n	8009842 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	f003 0308 	and.w	r3, r3, #8
 800984e:	2b00      	cmp	r3, #0
 8009850:	d026      	beq.n	80098a0 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f003 0308 	and.w	r3, r3, #8
 8009858:	2b00      	cmp	r3, #0
 800985a:	d021      	beq.n	80098a0 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f06f 0208 	mvn.w	r2, #8
 8009864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2204      	movs	r2, #4
 800986a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	69db      	ldr	r3, [r3, #28]
 8009872:	f003 0303 	and.w	r3, r3, #3
 8009876:	2b00      	cmp	r3, #0
 8009878:	d005      	beq.n	8009886 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	4798      	blx	r3
 8009884:	e009      	b.n	800989a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	f003 0310 	and.w	r3, r3, #16
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d026      	beq.n	80098f8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f003 0310 	and.w	r3, r3, #16
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d021      	beq.n	80098f8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f06f 0210 	mvn.w	r2, #16
 80098bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2208      	movs	r2, #8
 80098c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	69db      	ldr	r3, [r3, #28]
 80098ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d005      	beq.n	80098de <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	4798      	blx	r3
 80098dc:	e009      	b.n	80098f2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	f003 0301 	and.w	r3, r3, #1
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00e      	beq.n	8009920 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f003 0301 	and.w	r3, r3, #1
 8009908:	2b00      	cmp	r3, #0
 800990a:	d009      	beq.n	8009920 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f06f 0201 	mvn.w	r2, #1
 8009914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009926:	2b00      	cmp	r3, #0
 8009928:	d104      	bne.n	8009934 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00e      	beq.n	8009952 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800993a:	2b00      	cmp	r3, #0
 800993c:	d009      	beq.n	8009952 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00e      	beq.n	800997a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009962:	2b00      	cmp	r3, #0
 8009964:	d009      	beq.n	800997a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800996e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00e      	beq.n	80099a2 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800998a:	2b00      	cmp	r3, #0
 800998c:	d009      	beq.n	80099a2 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	f003 0320 	and.w	r3, r3, #32
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00e      	beq.n	80099ca <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f003 0320 	and.w	r3, r3, #32
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d009      	beq.n	80099ca <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f06f 0220 	mvn.w	r2, #32
 80099be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00e      	beq.n	80099f2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d009      	beq.n	80099f2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80099e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00e      	beq.n	8009a1a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d009      	beq.n	8009a1a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00e      	beq.n	8009a42 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d009      	beq.n	8009a42 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00e      	beq.n	8009a6a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d009      	beq.n	8009a6a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a6a:	bf00      	nop
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
	...

08009a74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b086      	sub	sp, #24
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a80:	2300      	movs	r3, #0
 8009a82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d101      	bne.n	8009a92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009a8e:	2302      	movs	r3, #2
 8009a90:	e0ff      	b.n	8009c92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2201      	movs	r2, #1
 8009a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2b14      	cmp	r3, #20
 8009a9e:	f200 80f0 	bhi.w	8009c82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8009aa8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa8:	08009afd 	.word	0x08009afd
 8009aac:	08009c83 	.word	0x08009c83
 8009ab0:	08009c83 	.word	0x08009c83
 8009ab4:	08009c83 	.word	0x08009c83
 8009ab8:	08009b3d 	.word	0x08009b3d
 8009abc:	08009c83 	.word	0x08009c83
 8009ac0:	08009c83 	.word	0x08009c83
 8009ac4:	08009c83 	.word	0x08009c83
 8009ac8:	08009b7f 	.word	0x08009b7f
 8009acc:	08009c83 	.word	0x08009c83
 8009ad0:	08009c83 	.word	0x08009c83
 8009ad4:	08009c83 	.word	0x08009c83
 8009ad8:	08009bbf 	.word	0x08009bbf
 8009adc:	08009c83 	.word	0x08009c83
 8009ae0:	08009c83 	.word	0x08009c83
 8009ae4:	08009c83 	.word	0x08009c83
 8009ae8:	08009c01 	.word	0x08009c01
 8009aec:	08009c83 	.word	0x08009c83
 8009af0:	08009c83 	.word	0x08009c83
 8009af4:	08009c83 	.word	0x08009c83
 8009af8:	08009c41 	.word	0x08009c41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	68b9      	ldr	r1, [r7, #8]
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 fc4e 	bl	800a3a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	699a      	ldr	r2, [r3, #24]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f042 0208 	orr.w	r2, r2, #8
 8009b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	699a      	ldr	r2, [r3, #24]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f022 0204 	bic.w	r2, r2, #4
 8009b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	6999      	ldr	r1, [r3, #24]
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	691a      	ldr	r2, [r3, #16]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	430a      	orrs	r2, r1
 8009b38:	619a      	str	r2, [r3, #24]
      break;
 8009b3a:	e0a5      	b.n	8009c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	68b9      	ldr	r1, [r7, #8]
 8009b42:	4618      	mov	r0, r3
 8009b44:	f000 fcc8 	bl	800a4d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	699a      	ldr	r2, [r3, #24]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	699a      	ldr	r2, [r3, #24]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	6999      	ldr	r1, [r3, #24]
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	021a      	lsls	r2, r3, #8
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	430a      	orrs	r2, r1
 8009b7a:	619a      	str	r2, [r3, #24]
      break;
 8009b7c:	e084      	b.n	8009c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	68b9      	ldr	r1, [r7, #8]
 8009b84:	4618      	mov	r0, r3
 8009b86:	f000 fd3b 	bl	800a600 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	69da      	ldr	r2, [r3, #28]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f042 0208 	orr.w	r2, r2, #8
 8009b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	69da      	ldr	r2, [r3, #28]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f022 0204 	bic.w	r2, r2, #4
 8009ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	69d9      	ldr	r1, [r3, #28]
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	691a      	ldr	r2, [r3, #16]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	430a      	orrs	r2, r1
 8009bba:	61da      	str	r2, [r3, #28]
      break;
 8009bbc:	e064      	b.n	8009c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	68b9      	ldr	r1, [r7, #8]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f000 fdad 	bl	800a724 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	69da      	ldr	r2, [r3, #28]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	69da      	ldr	r2, [r3, #28]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	69d9      	ldr	r1, [r3, #28]
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	021a      	lsls	r2, r3, #8
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	430a      	orrs	r2, r1
 8009bfc:	61da      	str	r2, [r3, #28]
      break;
 8009bfe:	e043      	b.n	8009c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68b9      	ldr	r1, [r7, #8]
 8009c06:	4618      	mov	r0, r3
 8009c08:	f000 fe20 	bl	800a84c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f042 0208 	orr.w	r2, r2, #8
 8009c1a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f022 0204 	bic.w	r2, r2, #4
 8009c2a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	691a      	ldr	r2, [r3, #16]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	430a      	orrs	r2, r1
 8009c3c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009c3e:	e023      	b.n	8009c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68b9      	ldr	r1, [r7, #8]
 8009c46:	4618      	mov	r0, r3
 8009c48:	f000 fe6a 	bl	800a920 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c5a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c6a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	021a      	lsls	r2, r3, #8
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	430a      	orrs	r2, r1
 8009c7e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009c80:	e002      	b.n	8009c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	75fb      	strb	r3, [r7, #23]
      break;
 8009c86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3718      	adds	r7, #24
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop

08009c9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d101      	bne.n	8009cb8 <HAL_TIM_ConfigClockSource+0x1c>
 8009cb4:	2302      	movs	r3, #2
 8009cb6:	e0f6      	b.n	8009ea6 <HAL_TIM_ConfigClockSource+0x20a>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2202      	movs	r2, #2
 8009cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009cd6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009ce2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	68ba      	ldr	r2, [r7, #8]
 8009cea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a6f      	ldr	r2, [pc, #444]	@ (8009eb0 <HAL_TIM_ConfigClockSource+0x214>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	f000 80c1 	beq.w	8009e7a <HAL_TIM_ConfigClockSource+0x1de>
 8009cf8:	4a6d      	ldr	r2, [pc, #436]	@ (8009eb0 <HAL_TIM_ConfigClockSource+0x214>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	f200 80c6 	bhi.w	8009e8c <HAL_TIM_ConfigClockSource+0x1f0>
 8009d00:	4a6c      	ldr	r2, [pc, #432]	@ (8009eb4 <HAL_TIM_ConfigClockSource+0x218>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	f000 80b9 	beq.w	8009e7a <HAL_TIM_ConfigClockSource+0x1de>
 8009d08:	4a6a      	ldr	r2, [pc, #424]	@ (8009eb4 <HAL_TIM_ConfigClockSource+0x218>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	f200 80be 	bhi.w	8009e8c <HAL_TIM_ConfigClockSource+0x1f0>
 8009d10:	4a69      	ldr	r2, [pc, #420]	@ (8009eb8 <HAL_TIM_ConfigClockSource+0x21c>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	f000 80b1 	beq.w	8009e7a <HAL_TIM_ConfigClockSource+0x1de>
 8009d18:	4a67      	ldr	r2, [pc, #412]	@ (8009eb8 <HAL_TIM_ConfigClockSource+0x21c>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	f200 80b6 	bhi.w	8009e8c <HAL_TIM_ConfigClockSource+0x1f0>
 8009d20:	4a66      	ldr	r2, [pc, #408]	@ (8009ebc <HAL_TIM_ConfigClockSource+0x220>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	f000 80a9 	beq.w	8009e7a <HAL_TIM_ConfigClockSource+0x1de>
 8009d28:	4a64      	ldr	r2, [pc, #400]	@ (8009ebc <HAL_TIM_ConfigClockSource+0x220>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	f200 80ae 	bhi.w	8009e8c <HAL_TIM_ConfigClockSource+0x1f0>
 8009d30:	4a63      	ldr	r2, [pc, #396]	@ (8009ec0 <HAL_TIM_ConfigClockSource+0x224>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	f000 80a1 	beq.w	8009e7a <HAL_TIM_ConfigClockSource+0x1de>
 8009d38:	4a61      	ldr	r2, [pc, #388]	@ (8009ec0 <HAL_TIM_ConfigClockSource+0x224>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	f200 80a6 	bhi.w	8009e8c <HAL_TIM_ConfigClockSource+0x1f0>
 8009d40:	4a60      	ldr	r2, [pc, #384]	@ (8009ec4 <HAL_TIM_ConfigClockSource+0x228>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	f000 8099 	beq.w	8009e7a <HAL_TIM_ConfigClockSource+0x1de>
 8009d48:	4a5e      	ldr	r2, [pc, #376]	@ (8009ec4 <HAL_TIM_ConfigClockSource+0x228>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	f200 809e 	bhi.w	8009e8c <HAL_TIM_ConfigClockSource+0x1f0>
 8009d50:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009d54:	f000 8091 	beq.w	8009e7a <HAL_TIM_ConfigClockSource+0x1de>
 8009d58:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009d5c:	f200 8096 	bhi.w	8009e8c <HAL_TIM_ConfigClockSource+0x1f0>
 8009d60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d64:	f000 8089 	beq.w	8009e7a <HAL_TIM_ConfigClockSource+0x1de>
 8009d68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d6c:	f200 808e 	bhi.w	8009e8c <HAL_TIM_ConfigClockSource+0x1f0>
 8009d70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d74:	d03e      	beq.n	8009df4 <HAL_TIM_ConfigClockSource+0x158>
 8009d76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d7a:	f200 8087 	bhi.w	8009e8c <HAL_TIM_ConfigClockSource+0x1f0>
 8009d7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d82:	f000 8086 	beq.w	8009e92 <HAL_TIM_ConfigClockSource+0x1f6>
 8009d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d8a:	d87f      	bhi.n	8009e8c <HAL_TIM_ConfigClockSource+0x1f0>
 8009d8c:	2b70      	cmp	r3, #112	@ 0x70
 8009d8e:	d01a      	beq.n	8009dc6 <HAL_TIM_ConfigClockSource+0x12a>
 8009d90:	2b70      	cmp	r3, #112	@ 0x70
 8009d92:	d87b      	bhi.n	8009e8c <HAL_TIM_ConfigClockSource+0x1f0>
 8009d94:	2b60      	cmp	r3, #96	@ 0x60
 8009d96:	d050      	beq.n	8009e3a <HAL_TIM_ConfigClockSource+0x19e>
 8009d98:	2b60      	cmp	r3, #96	@ 0x60
 8009d9a:	d877      	bhi.n	8009e8c <HAL_TIM_ConfigClockSource+0x1f0>
 8009d9c:	2b50      	cmp	r3, #80	@ 0x50
 8009d9e:	d03c      	beq.n	8009e1a <HAL_TIM_ConfigClockSource+0x17e>
 8009da0:	2b50      	cmp	r3, #80	@ 0x50
 8009da2:	d873      	bhi.n	8009e8c <HAL_TIM_ConfigClockSource+0x1f0>
 8009da4:	2b40      	cmp	r3, #64	@ 0x40
 8009da6:	d058      	beq.n	8009e5a <HAL_TIM_ConfigClockSource+0x1be>
 8009da8:	2b40      	cmp	r3, #64	@ 0x40
 8009daa:	d86f      	bhi.n	8009e8c <HAL_TIM_ConfigClockSource+0x1f0>
 8009dac:	2b30      	cmp	r3, #48	@ 0x30
 8009dae:	d064      	beq.n	8009e7a <HAL_TIM_ConfigClockSource+0x1de>
 8009db0:	2b30      	cmp	r3, #48	@ 0x30
 8009db2:	d86b      	bhi.n	8009e8c <HAL_TIM_ConfigClockSource+0x1f0>
 8009db4:	2b20      	cmp	r3, #32
 8009db6:	d060      	beq.n	8009e7a <HAL_TIM_ConfigClockSource+0x1de>
 8009db8:	2b20      	cmp	r3, #32
 8009dba:	d867      	bhi.n	8009e8c <HAL_TIM_ConfigClockSource+0x1f0>
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d05c      	beq.n	8009e7a <HAL_TIM_ConfigClockSource+0x1de>
 8009dc0:	2b10      	cmp	r3, #16
 8009dc2:	d05a      	beq.n	8009e7a <HAL_TIM_ConfigClockSource+0x1de>
 8009dc4:	e062      	b.n	8009e8c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009dd6:	f000 fe8b 	bl	800aaf0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009de8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68ba      	ldr	r2, [r7, #8]
 8009df0:	609a      	str	r2, [r3, #8]
      break;
 8009df2:	e04f      	b.n	8009e94 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009e04:	f000 fe74 	bl	800aaf0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	689a      	ldr	r2, [r3, #8]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009e16:	609a      	str	r2, [r3, #8]
      break;
 8009e18:	e03c      	b.n	8009e94 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e26:	461a      	mov	r2, r3
 8009e28:	f000 fde6 	bl	800a9f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2150      	movs	r1, #80	@ 0x50
 8009e32:	4618      	mov	r0, r3
 8009e34:	f000 fe3f 	bl	800aab6 <TIM_ITRx_SetConfig>
      break;
 8009e38:	e02c      	b.n	8009e94 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e46:	461a      	mov	r2, r3
 8009e48:	f000 fe05 	bl	800aa56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2160      	movs	r1, #96	@ 0x60
 8009e52:	4618      	mov	r0, r3
 8009e54:	f000 fe2f 	bl	800aab6 <TIM_ITRx_SetConfig>
      break;
 8009e58:	e01c      	b.n	8009e94 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e66:	461a      	mov	r2, r3
 8009e68:	f000 fdc6 	bl	800a9f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2140      	movs	r1, #64	@ 0x40
 8009e72:	4618      	mov	r0, r3
 8009e74:	f000 fe1f 	bl	800aab6 <TIM_ITRx_SetConfig>
      break;
 8009e78:	e00c      	b.n	8009e94 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4619      	mov	r1, r3
 8009e84:	4610      	mov	r0, r2
 8009e86:	f000 fe16 	bl	800aab6 <TIM_ITRx_SetConfig>
      break;
 8009e8a:	e003      	b.n	8009e94 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8009e90:	e000      	b.n	8009e94 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009e92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	00100070 	.word	0x00100070
 8009eb4:	00100060 	.word	0x00100060
 8009eb8:	00100050 	.word	0x00100050
 8009ebc:	00100040 	.word	0x00100040
 8009ec0:	00100030 	.word	0x00100030
 8009ec4:	00100020 	.word	0x00100020

08009ec8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009ed0:	bf00      	nop
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ee4:	bf00      	nop
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ef8:	bf00      	nop
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009f0c:	bf00      	nop
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009f34:	bf00      	nop
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f48:	bf00      	nop
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009f5c:	bf00      	nop
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009f70:	bf00      	nop
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b087      	sub	sp, #28
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	460b      	mov	r3, r1
 8009f86:	607a      	str	r2, [r7, #4]
 8009f88:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d101      	bne.n	8009f98 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	e14a      	b.n	800a22e <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	f040 80dd 	bne.w	800a160 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8009fa6:	7afb      	ldrb	r3, [r7, #11]
 8009fa8:	2b1f      	cmp	r3, #31
 8009faa:	f200 80d6 	bhi.w	800a15a <HAL_TIM_RegisterCallback+0x1de>
 8009fae:	a201      	add	r2, pc, #4	@ (adr r2, 8009fb4 <HAL_TIM_RegisterCallback+0x38>)
 8009fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb4:	0800a035 	.word	0x0800a035
 8009fb8:	0800a03d 	.word	0x0800a03d
 8009fbc:	0800a045 	.word	0x0800a045
 8009fc0:	0800a04d 	.word	0x0800a04d
 8009fc4:	0800a055 	.word	0x0800a055
 8009fc8:	0800a05d 	.word	0x0800a05d
 8009fcc:	0800a065 	.word	0x0800a065
 8009fd0:	0800a06d 	.word	0x0800a06d
 8009fd4:	0800a075 	.word	0x0800a075
 8009fd8:	0800a07d 	.word	0x0800a07d
 8009fdc:	0800a085 	.word	0x0800a085
 8009fe0:	0800a08d 	.word	0x0800a08d
 8009fe4:	0800a095 	.word	0x0800a095
 8009fe8:	0800a09d 	.word	0x0800a09d
 8009fec:	0800a0a7 	.word	0x0800a0a7
 8009ff0:	0800a0b1 	.word	0x0800a0b1
 8009ff4:	0800a0bb 	.word	0x0800a0bb
 8009ff8:	0800a0c5 	.word	0x0800a0c5
 8009ffc:	0800a0cf 	.word	0x0800a0cf
 800a000:	0800a0d9 	.word	0x0800a0d9
 800a004:	0800a0e3 	.word	0x0800a0e3
 800a008:	0800a0ed 	.word	0x0800a0ed
 800a00c:	0800a0f7 	.word	0x0800a0f7
 800a010:	0800a101 	.word	0x0800a101
 800a014:	0800a10b 	.word	0x0800a10b
 800a018:	0800a115 	.word	0x0800a115
 800a01c:	0800a11f 	.word	0x0800a11f
 800a020:	0800a129 	.word	0x0800a129
 800a024:	0800a133 	.word	0x0800a133
 800a028:	0800a13d 	.word	0x0800a13d
 800a02c:	0800a147 	.word	0x0800a147
 800a030:	0800a151 	.word	0x0800a151
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800a03a:	e0f7      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800a042:	e0f3      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800a04a:	e0ef      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800a052:	e0eb      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800a05a:	e0e7      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800a062:	e0e3      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800a06a:	e0df      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800a072:	e0db      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800a07a:	e0d7      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800a082:	e0d3      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800a08a:	e0cf      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800a092:	e0cb      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800a09a:	e0c7      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800a0a4:	e0c2      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800a0ae:	e0bd      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800a0b8:	e0b8      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800a0c2:	e0b3      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800a0cc:	e0ae      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a0d6:	e0a9      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a0e0:	e0a4      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a0ea:	e09f      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a0f4:	e09a      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a0fe:	e095      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a108:	e090      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a112:	e08b      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a11c:	e086      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800a126:	e081      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800a130:	e07c      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800a13a:	e077      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800a144:	e072      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a14e:	e06d      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a158:	e068      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	75fb      	strb	r3, [r7, #23]
        break;
 800a15e:	e065      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a166:	b2db      	uxtb	r3, r3
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d15d      	bne.n	800a228 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800a16c:	7afb      	ldrb	r3, [r7, #11]
 800a16e:	2b0d      	cmp	r3, #13
 800a170:	d857      	bhi.n	800a222 <HAL_TIM_RegisterCallback+0x2a6>
 800a172:	a201      	add	r2, pc, #4	@ (adr r2, 800a178 <HAL_TIM_RegisterCallback+0x1fc>)
 800a174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a178:	0800a1b1 	.word	0x0800a1b1
 800a17c:	0800a1b9 	.word	0x0800a1b9
 800a180:	0800a1c1 	.word	0x0800a1c1
 800a184:	0800a1c9 	.word	0x0800a1c9
 800a188:	0800a1d1 	.word	0x0800a1d1
 800a18c:	0800a1d9 	.word	0x0800a1d9
 800a190:	0800a1e1 	.word	0x0800a1e1
 800a194:	0800a1e9 	.word	0x0800a1e9
 800a198:	0800a1f1 	.word	0x0800a1f1
 800a19c:	0800a1f9 	.word	0x0800a1f9
 800a1a0:	0800a201 	.word	0x0800a201
 800a1a4:	0800a209 	.word	0x0800a209
 800a1a8:	0800a211 	.word	0x0800a211
 800a1ac:	0800a219 	.word	0x0800a219
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800a1b6:	e039      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800a1be:	e035      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800a1c6:	e031      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800a1ce:	e02d      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800a1d6:	e029      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800a1de:	e025      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800a1e6:	e021      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800a1ee:	e01d      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800a1f6:	e019      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800a1fe:	e015      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800a206:	e011      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800a20e:	e00d      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800a216:	e009      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800a220:	e004      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	75fb      	strb	r3, [r7, #23]
        break;
 800a226:	e001      	b.n	800a22c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a22c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	371c      	adds	r7, #28
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop

0800a23c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b085      	sub	sp, #20
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4a4c      	ldr	r2, [pc, #304]	@ (800a380 <TIM_Base_SetConfig+0x144>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d017      	beq.n	800a284 <TIM_Base_SetConfig+0x48>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a25a:	d013      	beq.n	800a284 <TIM_Base_SetConfig+0x48>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4a49      	ldr	r2, [pc, #292]	@ (800a384 <TIM_Base_SetConfig+0x148>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d00f      	beq.n	800a284 <TIM_Base_SetConfig+0x48>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4a48      	ldr	r2, [pc, #288]	@ (800a388 <TIM_Base_SetConfig+0x14c>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d00b      	beq.n	800a284 <TIM_Base_SetConfig+0x48>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4a47      	ldr	r2, [pc, #284]	@ (800a38c <TIM_Base_SetConfig+0x150>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d007      	beq.n	800a284 <TIM_Base_SetConfig+0x48>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4a46      	ldr	r2, [pc, #280]	@ (800a390 <TIM_Base_SetConfig+0x154>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d003      	beq.n	800a284 <TIM_Base_SetConfig+0x48>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4a45      	ldr	r2, [pc, #276]	@ (800a394 <TIM_Base_SetConfig+0x158>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d108      	bne.n	800a296 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a28a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	68fa      	ldr	r2, [r7, #12]
 800a292:	4313      	orrs	r3, r2
 800a294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4a39      	ldr	r2, [pc, #228]	@ (800a380 <TIM_Base_SetConfig+0x144>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d023      	beq.n	800a2e6 <TIM_Base_SetConfig+0xaa>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2a4:	d01f      	beq.n	800a2e6 <TIM_Base_SetConfig+0xaa>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4a36      	ldr	r2, [pc, #216]	@ (800a384 <TIM_Base_SetConfig+0x148>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d01b      	beq.n	800a2e6 <TIM_Base_SetConfig+0xaa>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a35      	ldr	r2, [pc, #212]	@ (800a388 <TIM_Base_SetConfig+0x14c>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d017      	beq.n	800a2e6 <TIM_Base_SetConfig+0xaa>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a34      	ldr	r2, [pc, #208]	@ (800a38c <TIM_Base_SetConfig+0x150>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d013      	beq.n	800a2e6 <TIM_Base_SetConfig+0xaa>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4a33      	ldr	r2, [pc, #204]	@ (800a390 <TIM_Base_SetConfig+0x154>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d00f      	beq.n	800a2e6 <TIM_Base_SetConfig+0xaa>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a33      	ldr	r2, [pc, #204]	@ (800a398 <TIM_Base_SetConfig+0x15c>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d00b      	beq.n	800a2e6 <TIM_Base_SetConfig+0xaa>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a32      	ldr	r2, [pc, #200]	@ (800a39c <TIM_Base_SetConfig+0x160>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d007      	beq.n	800a2e6 <TIM_Base_SetConfig+0xaa>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	4a31      	ldr	r2, [pc, #196]	@ (800a3a0 <TIM_Base_SetConfig+0x164>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d003      	beq.n	800a2e6 <TIM_Base_SetConfig+0xaa>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	4a2c      	ldr	r2, [pc, #176]	@ (800a394 <TIM_Base_SetConfig+0x158>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d108      	bne.n	800a2f8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a2ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	4313      	orrs	r3, r2
 800a304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	68fa      	ldr	r2, [r7, #12]
 800a30a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	689a      	ldr	r2, [r3, #8]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4a18      	ldr	r2, [pc, #96]	@ (800a380 <TIM_Base_SetConfig+0x144>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d013      	beq.n	800a34c <TIM_Base_SetConfig+0x110>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4a1a      	ldr	r2, [pc, #104]	@ (800a390 <TIM_Base_SetConfig+0x154>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d00f      	beq.n	800a34c <TIM_Base_SetConfig+0x110>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a1a      	ldr	r2, [pc, #104]	@ (800a398 <TIM_Base_SetConfig+0x15c>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d00b      	beq.n	800a34c <TIM_Base_SetConfig+0x110>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4a19      	ldr	r2, [pc, #100]	@ (800a39c <TIM_Base_SetConfig+0x160>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d007      	beq.n	800a34c <TIM_Base_SetConfig+0x110>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a18      	ldr	r2, [pc, #96]	@ (800a3a0 <TIM_Base_SetConfig+0x164>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d003      	beq.n	800a34c <TIM_Base_SetConfig+0x110>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a13      	ldr	r2, [pc, #76]	@ (800a394 <TIM_Base_SetConfig+0x158>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d103      	bne.n	800a354 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	691a      	ldr	r2, [r3, #16]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2201      	movs	r2, #1
 800a358:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	691b      	ldr	r3, [r3, #16]
 800a35e:	f003 0301 	and.w	r3, r3, #1
 800a362:	2b01      	cmp	r3, #1
 800a364:	d105      	bne.n	800a372 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	f023 0201 	bic.w	r2, r3, #1
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	611a      	str	r2, [r3, #16]
  }
}
 800a372:	bf00      	nop
 800a374:	3714      	adds	r7, #20
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
 800a37e:	bf00      	nop
 800a380:	40012c00 	.word	0x40012c00
 800a384:	40000400 	.word	0x40000400
 800a388:	40000800 	.word	0x40000800
 800a38c:	40000c00 	.word	0x40000c00
 800a390:	40013400 	.word	0x40013400
 800a394:	40015000 	.word	0x40015000
 800a398:	40014000 	.word	0x40014000
 800a39c:	40014400 	.word	0x40014400
 800a3a0:	40014800 	.word	0x40014800

0800a3a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b087      	sub	sp, #28
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6a1b      	ldr	r3, [r3, #32]
 800a3b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6a1b      	ldr	r3, [r3, #32]
 800a3b8:	f023 0201 	bic.w	r2, r3, #1
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	699b      	ldr	r3, [r3, #24]
 800a3ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a3d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f023 0303 	bic.w	r3, r3, #3
 800a3de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	f023 0302 	bic.w	r3, r3, #2
 800a3f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4a30      	ldr	r2, [pc, #192]	@ (800a4c0 <TIM_OC1_SetConfig+0x11c>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d013      	beq.n	800a42c <TIM_OC1_SetConfig+0x88>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4a2f      	ldr	r2, [pc, #188]	@ (800a4c4 <TIM_OC1_SetConfig+0x120>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d00f      	beq.n	800a42c <TIM_OC1_SetConfig+0x88>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4a2e      	ldr	r2, [pc, #184]	@ (800a4c8 <TIM_OC1_SetConfig+0x124>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d00b      	beq.n	800a42c <TIM_OC1_SetConfig+0x88>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	4a2d      	ldr	r2, [pc, #180]	@ (800a4cc <TIM_OC1_SetConfig+0x128>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d007      	beq.n	800a42c <TIM_OC1_SetConfig+0x88>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4a2c      	ldr	r2, [pc, #176]	@ (800a4d0 <TIM_OC1_SetConfig+0x12c>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d003      	beq.n	800a42c <TIM_OC1_SetConfig+0x88>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4a2b      	ldr	r2, [pc, #172]	@ (800a4d4 <TIM_OC1_SetConfig+0x130>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d10c      	bne.n	800a446 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	f023 0308 	bic.w	r3, r3, #8
 800a432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	697a      	ldr	r2, [r7, #20]
 800a43a:	4313      	orrs	r3, r2
 800a43c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	f023 0304 	bic.w	r3, r3, #4
 800a444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	4a1d      	ldr	r2, [pc, #116]	@ (800a4c0 <TIM_OC1_SetConfig+0x11c>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d013      	beq.n	800a476 <TIM_OC1_SetConfig+0xd2>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	4a1c      	ldr	r2, [pc, #112]	@ (800a4c4 <TIM_OC1_SetConfig+0x120>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d00f      	beq.n	800a476 <TIM_OC1_SetConfig+0xd2>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4a1b      	ldr	r2, [pc, #108]	@ (800a4c8 <TIM_OC1_SetConfig+0x124>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d00b      	beq.n	800a476 <TIM_OC1_SetConfig+0xd2>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4a1a      	ldr	r2, [pc, #104]	@ (800a4cc <TIM_OC1_SetConfig+0x128>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d007      	beq.n	800a476 <TIM_OC1_SetConfig+0xd2>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	4a19      	ldr	r2, [pc, #100]	@ (800a4d0 <TIM_OC1_SetConfig+0x12c>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d003      	beq.n	800a476 <TIM_OC1_SetConfig+0xd2>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4a18      	ldr	r2, [pc, #96]	@ (800a4d4 <TIM_OC1_SetConfig+0x130>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d111      	bne.n	800a49a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a47c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	695b      	ldr	r3, [r3, #20]
 800a48a:	693a      	ldr	r2, [r7, #16]
 800a48c:	4313      	orrs	r3, r2
 800a48e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	699b      	ldr	r3, [r3, #24]
 800a494:	693a      	ldr	r2, [r7, #16]
 800a496:	4313      	orrs	r3, r2
 800a498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	693a      	ldr	r2, [r7, #16]
 800a49e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	685a      	ldr	r2, [r3, #4]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	697a      	ldr	r2, [r7, #20]
 800a4b2:	621a      	str	r2, [r3, #32]
}
 800a4b4:	bf00      	nop
 800a4b6:	371c      	adds	r7, #28
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr
 800a4c0:	40012c00 	.word	0x40012c00
 800a4c4:	40013400 	.word	0x40013400
 800a4c8:	40014000 	.word	0x40014000
 800a4cc:	40014400 	.word	0x40014400
 800a4d0:	40014800 	.word	0x40014800
 800a4d4:	40015000 	.word	0x40015000

0800a4d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b087      	sub	sp, #28
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a1b      	ldr	r3, [r3, #32]
 800a4e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6a1b      	ldr	r3, [r3, #32]
 800a4ec:	f023 0210 	bic.w	r2, r3, #16
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	699b      	ldr	r3, [r3, #24]
 800a4fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a506:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a50a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	021b      	lsls	r3, r3, #8
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	4313      	orrs	r3, r2
 800a51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	f023 0320 	bic.w	r3, r3, #32
 800a526:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	011b      	lsls	r3, r3, #4
 800a52e:	697a      	ldr	r2, [r7, #20]
 800a530:	4313      	orrs	r3, r2
 800a532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	4a2c      	ldr	r2, [pc, #176]	@ (800a5e8 <TIM_OC2_SetConfig+0x110>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d007      	beq.n	800a54c <TIM_OC2_SetConfig+0x74>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4a2b      	ldr	r2, [pc, #172]	@ (800a5ec <TIM_OC2_SetConfig+0x114>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d003      	beq.n	800a54c <TIM_OC2_SetConfig+0x74>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a2a      	ldr	r2, [pc, #168]	@ (800a5f0 <TIM_OC2_SetConfig+0x118>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d10d      	bne.n	800a568 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a552:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	011b      	lsls	r3, r3, #4
 800a55a:	697a      	ldr	r2, [r7, #20]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a566:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4a1f      	ldr	r2, [pc, #124]	@ (800a5e8 <TIM_OC2_SetConfig+0x110>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d013      	beq.n	800a598 <TIM_OC2_SetConfig+0xc0>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	4a1e      	ldr	r2, [pc, #120]	@ (800a5ec <TIM_OC2_SetConfig+0x114>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d00f      	beq.n	800a598 <TIM_OC2_SetConfig+0xc0>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4a1e      	ldr	r2, [pc, #120]	@ (800a5f4 <TIM_OC2_SetConfig+0x11c>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d00b      	beq.n	800a598 <TIM_OC2_SetConfig+0xc0>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4a1d      	ldr	r2, [pc, #116]	@ (800a5f8 <TIM_OC2_SetConfig+0x120>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d007      	beq.n	800a598 <TIM_OC2_SetConfig+0xc0>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a1c      	ldr	r2, [pc, #112]	@ (800a5fc <TIM_OC2_SetConfig+0x124>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d003      	beq.n	800a598 <TIM_OC2_SetConfig+0xc0>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4a17      	ldr	r2, [pc, #92]	@ (800a5f0 <TIM_OC2_SetConfig+0x118>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d113      	bne.n	800a5c0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a59e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a5a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	695b      	ldr	r3, [r3, #20]
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	693a      	ldr	r2, [r7, #16]
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	699b      	ldr	r3, [r3, #24]
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	693a      	ldr	r2, [r7, #16]
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	693a      	ldr	r2, [r7, #16]
 800a5c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	68fa      	ldr	r2, [r7, #12]
 800a5ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	685a      	ldr	r2, [r3, #4]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	697a      	ldr	r2, [r7, #20]
 800a5d8:	621a      	str	r2, [r3, #32]
}
 800a5da:	bf00      	nop
 800a5dc:	371c      	adds	r7, #28
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr
 800a5e6:	bf00      	nop
 800a5e8:	40012c00 	.word	0x40012c00
 800a5ec:	40013400 	.word	0x40013400
 800a5f0:	40015000 	.word	0x40015000
 800a5f4:	40014000 	.word	0x40014000
 800a5f8:	40014400 	.word	0x40014400
 800a5fc:	40014800 	.word	0x40014800

0800a600 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a600:	b480      	push	{r7}
 800a602:	b087      	sub	sp, #28
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a1b      	ldr	r3, [r3, #32]
 800a60e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6a1b      	ldr	r3, [r3, #32]
 800a614:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	69db      	ldr	r3, [r3, #28]
 800a626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a62e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f023 0303 	bic.w	r3, r3, #3
 800a63a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	4313      	orrs	r3, r2
 800a644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a64c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	021b      	lsls	r3, r3, #8
 800a654:	697a      	ldr	r2, [r7, #20]
 800a656:	4313      	orrs	r3, r2
 800a658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	4a2b      	ldr	r2, [pc, #172]	@ (800a70c <TIM_OC3_SetConfig+0x10c>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d007      	beq.n	800a672 <TIM_OC3_SetConfig+0x72>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4a2a      	ldr	r2, [pc, #168]	@ (800a710 <TIM_OC3_SetConfig+0x110>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d003      	beq.n	800a672 <TIM_OC3_SetConfig+0x72>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4a29      	ldr	r2, [pc, #164]	@ (800a714 <TIM_OC3_SetConfig+0x114>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d10d      	bne.n	800a68e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a678:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	021b      	lsls	r3, r3, #8
 800a680:	697a      	ldr	r2, [r7, #20]
 800a682:	4313      	orrs	r3, r2
 800a684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a68c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4a1e      	ldr	r2, [pc, #120]	@ (800a70c <TIM_OC3_SetConfig+0x10c>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d013      	beq.n	800a6be <TIM_OC3_SetConfig+0xbe>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	4a1d      	ldr	r2, [pc, #116]	@ (800a710 <TIM_OC3_SetConfig+0x110>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d00f      	beq.n	800a6be <TIM_OC3_SetConfig+0xbe>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4a1d      	ldr	r2, [pc, #116]	@ (800a718 <TIM_OC3_SetConfig+0x118>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d00b      	beq.n	800a6be <TIM_OC3_SetConfig+0xbe>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	4a1c      	ldr	r2, [pc, #112]	@ (800a71c <TIM_OC3_SetConfig+0x11c>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d007      	beq.n	800a6be <TIM_OC3_SetConfig+0xbe>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4a1b      	ldr	r2, [pc, #108]	@ (800a720 <TIM_OC3_SetConfig+0x120>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d003      	beq.n	800a6be <TIM_OC3_SetConfig+0xbe>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4a16      	ldr	r2, [pc, #88]	@ (800a714 <TIM_OC3_SetConfig+0x114>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d113      	bne.n	800a6e6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a6c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a6cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	011b      	lsls	r3, r3, #4
 800a6d4:	693a      	ldr	r2, [r7, #16]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	011b      	lsls	r3, r3, #4
 800a6e0:	693a      	ldr	r2, [r7, #16]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	693a      	ldr	r2, [r7, #16]
 800a6ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	685a      	ldr	r2, [r3, #4]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	697a      	ldr	r2, [r7, #20]
 800a6fe:	621a      	str	r2, [r3, #32]
}
 800a700:	bf00      	nop
 800a702:	371c      	adds	r7, #28
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr
 800a70c:	40012c00 	.word	0x40012c00
 800a710:	40013400 	.word	0x40013400
 800a714:	40015000 	.word	0x40015000
 800a718:	40014000 	.word	0x40014000
 800a71c:	40014400 	.word	0x40014400
 800a720:	40014800 	.word	0x40014800

0800a724 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a724:	b480      	push	{r7}
 800a726:	b087      	sub	sp, #28
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a1b      	ldr	r3, [r3, #32]
 800a732:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6a1b      	ldr	r3, [r3, #32]
 800a738:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	69db      	ldr	r3, [r3, #28]
 800a74a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a752:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a75e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	021b      	lsls	r3, r3, #8
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	4313      	orrs	r3, r2
 800a76a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a772:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	031b      	lsls	r3, r3, #12
 800a77a:	697a      	ldr	r2, [r7, #20]
 800a77c:	4313      	orrs	r3, r2
 800a77e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a2c      	ldr	r2, [pc, #176]	@ (800a834 <TIM_OC4_SetConfig+0x110>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d007      	beq.n	800a798 <TIM_OC4_SetConfig+0x74>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4a2b      	ldr	r2, [pc, #172]	@ (800a838 <TIM_OC4_SetConfig+0x114>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d003      	beq.n	800a798 <TIM_OC4_SetConfig+0x74>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	4a2a      	ldr	r2, [pc, #168]	@ (800a83c <TIM_OC4_SetConfig+0x118>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d10d      	bne.n	800a7b4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a79e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	031b      	lsls	r3, r3, #12
 800a7a6:	697a      	ldr	r2, [r7, #20]
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a7b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	4a1f      	ldr	r2, [pc, #124]	@ (800a834 <TIM_OC4_SetConfig+0x110>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d013      	beq.n	800a7e4 <TIM_OC4_SetConfig+0xc0>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	4a1e      	ldr	r2, [pc, #120]	@ (800a838 <TIM_OC4_SetConfig+0x114>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d00f      	beq.n	800a7e4 <TIM_OC4_SetConfig+0xc0>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4a1e      	ldr	r2, [pc, #120]	@ (800a840 <TIM_OC4_SetConfig+0x11c>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d00b      	beq.n	800a7e4 <TIM_OC4_SetConfig+0xc0>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4a1d      	ldr	r2, [pc, #116]	@ (800a844 <TIM_OC4_SetConfig+0x120>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d007      	beq.n	800a7e4 <TIM_OC4_SetConfig+0xc0>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	4a1c      	ldr	r2, [pc, #112]	@ (800a848 <TIM_OC4_SetConfig+0x124>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d003      	beq.n	800a7e4 <TIM_OC4_SetConfig+0xc0>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	4a17      	ldr	r2, [pc, #92]	@ (800a83c <TIM_OC4_SetConfig+0x118>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d113      	bne.n	800a80c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a7ea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a7f2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	695b      	ldr	r3, [r3, #20]
 800a7f8:	019b      	lsls	r3, r3, #6
 800a7fa:	693a      	ldr	r2, [r7, #16]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	699b      	ldr	r3, [r3, #24]
 800a804:	019b      	lsls	r3, r3, #6
 800a806:	693a      	ldr	r2, [r7, #16]
 800a808:	4313      	orrs	r3, r2
 800a80a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	693a      	ldr	r2, [r7, #16]
 800a810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	685a      	ldr	r2, [r3, #4]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	697a      	ldr	r2, [r7, #20]
 800a824:	621a      	str	r2, [r3, #32]
}
 800a826:	bf00      	nop
 800a828:	371c      	adds	r7, #28
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	40012c00 	.word	0x40012c00
 800a838:	40013400 	.word	0x40013400
 800a83c:	40015000 	.word	0x40015000
 800a840:	40014000 	.word	0x40014000
 800a844:	40014400 	.word	0x40014400
 800a848:	40014800 	.word	0x40014800

0800a84c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b087      	sub	sp, #28
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6a1b      	ldr	r3, [r3, #32]
 800a85a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6a1b      	ldr	r3, [r3, #32]
 800a860:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a87a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a87e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	4313      	orrs	r3, r2
 800a888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a890:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	041b      	lsls	r3, r3, #16
 800a898:	693a      	ldr	r2, [r7, #16]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	4a19      	ldr	r2, [pc, #100]	@ (800a908 <TIM_OC5_SetConfig+0xbc>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d013      	beq.n	800a8ce <TIM_OC5_SetConfig+0x82>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4a18      	ldr	r2, [pc, #96]	@ (800a90c <TIM_OC5_SetConfig+0xc0>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d00f      	beq.n	800a8ce <TIM_OC5_SetConfig+0x82>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4a17      	ldr	r2, [pc, #92]	@ (800a910 <TIM_OC5_SetConfig+0xc4>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d00b      	beq.n	800a8ce <TIM_OC5_SetConfig+0x82>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a16      	ldr	r2, [pc, #88]	@ (800a914 <TIM_OC5_SetConfig+0xc8>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d007      	beq.n	800a8ce <TIM_OC5_SetConfig+0x82>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4a15      	ldr	r2, [pc, #84]	@ (800a918 <TIM_OC5_SetConfig+0xcc>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d003      	beq.n	800a8ce <TIM_OC5_SetConfig+0x82>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4a14      	ldr	r2, [pc, #80]	@ (800a91c <TIM_OC5_SetConfig+0xd0>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d109      	bne.n	800a8e2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a8d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	695b      	ldr	r3, [r3, #20]
 800a8da:	021b      	lsls	r3, r3, #8
 800a8dc:	697a      	ldr	r2, [r7, #20]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	697a      	ldr	r2, [r7, #20]
 800a8e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	68fa      	ldr	r2, [r7, #12]
 800a8ec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	685a      	ldr	r2, [r3, #4]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	693a      	ldr	r2, [r7, #16]
 800a8fa:	621a      	str	r2, [r3, #32]
}
 800a8fc:	bf00      	nop
 800a8fe:	371c      	adds	r7, #28
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr
 800a908:	40012c00 	.word	0x40012c00
 800a90c:	40013400 	.word	0x40013400
 800a910:	40014000 	.word	0x40014000
 800a914:	40014400 	.word	0x40014400
 800a918:	40014800 	.word	0x40014800
 800a91c:	40015000 	.word	0x40015000

0800a920 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a920:	b480      	push	{r7}
 800a922:	b087      	sub	sp, #28
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6a1b      	ldr	r3, [r3, #32]
 800a92e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6a1b      	ldr	r3, [r3, #32]
 800a934:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a94e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	021b      	lsls	r3, r3, #8
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a966:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	051b      	lsls	r3, r3, #20
 800a96e:	693a      	ldr	r2, [r7, #16]
 800a970:	4313      	orrs	r3, r2
 800a972:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4a1a      	ldr	r2, [pc, #104]	@ (800a9e0 <TIM_OC6_SetConfig+0xc0>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d013      	beq.n	800a9a4 <TIM_OC6_SetConfig+0x84>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a19      	ldr	r2, [pc, #100]	@ (800a9e4 <TIM_OC6_SetConfig+0xc4>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d00f      	beq.n	800a9a4 <TIM_OC6_SetConfig+0x84>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4a18      	ldr	r2, [pc, #96]	@ (800a9e8 <TIM_OC6_SetConfig+0xc8>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d00b      	beq.n	800a9a4 <TIM_OC6_SetConfig+0x84>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a17      	ldr	r2, [pc, #92]	@ (800a9ec <TIM_OC6_SetConfig+0xcc>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d007      	beq.n	800a9a4 <TIM_OC6_SetConfig+0x84>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a16      	ldr	r2, [pc, #88]	@ (800a9f0 <TIM_OC6_SetConfig+0xd0>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d003      	beq.n	800a9a4 <TIM_OC6_SetConfig+0x84>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4a15      	ldr	r2, [pc, #84]	@ (800a9f4 <TIM_OC6_SetConfig+0xd4>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d109      	bne.n	800a9b8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a9aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	695b      	ldr	r3, [r3, #20]
 800a9b0:	029b      	lsls	r3, r3, #10
 800a9b2:	697a      	ldr	r2, [r7, #20]
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	697a      	ldr	r2, [r7, #20]
 800a9bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	685a      	ldr	r2, [r3, #4]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	693a      	ldr	r2, [r7, #16]
 800a9d0:	621a      	str	r2, [r3, #32]
}
 800a9d2:	bf00      	nop
 800a9d4:	371c      	adds	r7, #28
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr
 800a9de:	bf00      	nop
 800a9e0:	40012c00 	.word	0x40012c00
 800a9e4:	40013400 	.word	0x40013400
 800a9e8:	40014000 	.word	0x40014000
 800a9ec:	40014400 	.word	0x40014400
 800a9f0:	40014800 	.word	0x40014800
 800a9f4:	40015000 	.word	0x40015000

0800a9f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b087      	sub	sp, #28
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	6a1b      	ldr	r3, [r3, #32]
 800aa08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	6a1b      	ldr	r3, [r3, #32]
 800aa0e:	f023 0201 	bic.w	r2, r3, #1
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	699b      	ldr	r3, [r3, #24]
 800aa1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aa22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	011b      	lsls	r3, r3, #4
 800aa28:	693a      	ldr	r2, [r7, #16]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	f023 030a 	bic.w	r3, r3, #10
 800aa34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa36:	697a      	ldr	r2, [r7, #20]
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	693a      	ldr	r2, [r7, #16]
 800aa42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	621a      	str	r2, [r3, #32]
}
 800aa4a:	bf00      	nop
 800aa4c:	371c      	adds	r7, #28
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr

0800aa56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa56:	b480      	push	{r7}
 800aa58:	b087      	sub	sp, #28
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	60f8      	str	r0, [r7, #12]
 800aa5e:	60b9      	str	r1, [r7, #8]
 800aa60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	6a1b      	ldr	r3, [r3, #32]
 800aa6c:	f023 0210 	bic.w	r2, r3, #16
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	699b      	ldr	r3, [r3, #24]
 800aa78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800aa80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	031b      	lsls	r3, r3, #12
 800aa86:	693a      	ldr	r2, [r7, #16]
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800aa92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	011b      	lsls	r3, r3, #4
 800aa98:	697a      	ldr	r2, [r7, #20]
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	693a      	ldr	r2, [r7, #16]
 800aaa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	697a      	ldr	r2, [r7, #20]
 800aaa8:	621a      	str	r2, [r3, #32]
}
 800aaaa:	bf00      	nop
 800aaac:	371c      	adds	r7, #28
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aab6:	b480      	push	{r7}
 800aab8:	b085      	sub	sp, #20
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
 800aabe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800aacc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aad0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aad2:	683a      	ldr	r2, [r7, #0]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	4313      	orrs	r3, r2
 800aad8:	f043 0307 	orr.w	r3, r3, #7
 800aadc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	609a      	str	r2, [r3, #8]
}
 800aae4:	bf00      	nop
 800aae6:	3714      	adds	r7, #20
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b087      	sub	sp, #28
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	607a      	str	r2, [r7, #4]
 800aafc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ab0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	021a      	lsls	r2, r3, #8
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	431a      	orrs	r2, r3
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	4313      	orrs	r3, r2
 800ab18:	697a      	ldr	r2, [r7, #20]
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	697a      	ldr	r2, [r7, #20]
 800ab22:	609a      	str	r2, [r3, #8]
}
 800ab24:	bf00      	nop
 800ab26:	371c      	adds	r7, #28
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b087      	sub	sp, #28
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	f003 031f 	and.w	r3, r3, #31
 800ab42:	2201      	movs	r2, #1
 800ab44:	fa02 f303 	lsl.w	r3, r2, r3
 800ab48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6a1a      	ldr	r2, [r3, #32]
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	43db      	mvns	r3, r3
 800ab52:	401a      	ands	r2, r3
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	6a1a      	ldr	r2, [r3, #32]
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	f003 031f 	and.w	r3, r3, #31
 800ab62:	6879      	ldr	r1, [r7, #4]
 800ab64:	fa01 f303 	lsl.w	r3, r1, r3
 800ab68:	431a      	orrs	r2, r3
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	621a      	str	r2, [r3, #32]
}
 800ab6e:	bf00      	nop
 800ab70:	371c      	adds	r7, #28
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
	...

0800ab7c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a26      	ldr	r2, [pc, #152]	@ (800ac20 <TIM_ResetCallback+0xa4>)
 800ab88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4a25      	ldr	r2, [pc, #148]	@ (800ac24 <TIM_ResetCallback+0xa8>)
 800ab90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	4a24      	ldr	r2, [pc, #144]	@ (800ac28 <TIM_ResetCallback+0xac>)
 800ab98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4a23      	ldr	r2, [pc, #140]	@ (800ac2c <TIM_ResetCallback+0xb0>)
 800aba0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4a22      	ldr	r2, [pc, #136]	@ (800ac30 <TIM_ResetCallback+0xb4>)
 800aba8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4a21      	ldr	r2, [pc, #132]	@ (800ac34 <TIM_ResetCallback+0xb8>)
 800abb0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a20      	ldr	r2, [pc, #128]	@ (800ac38 <TIM_ResetCallback+0xbc>)
 800abb8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	4a1f      	ldr	r2, [pc, #124]	@ (800ac3c <TIM_ResetCallback+0xc0>)
 800abc0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	4a1e      	ldr	r2, [pc, #120]	@ (800ac40 <TIM_ResetCallback+0xc4>)
 800abc8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	4a1d      	ldr	r2, [pc, #116]	@ (800ac44 <TIM_ResetCallback+0xc8>)
 800abd0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	4a1c      	ldr	r2, [pc, #112]	@ (800ac48 <TIM_ResetCallback+0xcc>)
 800abd8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	4a1b      	ldr	r2, [pc, #108]	@ (800ac4c <TIM_ResetCallback+0xd0>)
 800abe0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	4a1a      	ldr	r2, [pc, #104]	@ (800ac50 <TIM_ResetCallback+0xd4>)
 800abe8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	4a19      	ldr	r2, [pc, #100]	@ (800ac54 <TIM_ResetCallback+0xd8>)
 800abf0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	4a18      	ldr	r2, [pc, #96]	@ (800ac58 <TIM_ResetCallback+0xdc>)
 800abf8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	4a17      	ldr	r2, [pc, #92]	@ (800ac5c <TIM_ResetCallback+0xe0>)
 800ac00:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	4a16      	ldr	r2, [pc, #88]	@ (800ac60 <TIM_ResetCallback+0xe4>)
 800ac08:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4a15      	ldr	r2, [pc, #84]	@ (800ac64 <TIM_ResetCallback+0xe8>)
 800ac10:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800ac14:	bf00      	nop
 800ac16:	370c      	adds	r7, #12
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr
 800ac20:	08003c99 	.word	0x08003c99
 800ac24:	08009ec9 	.word	0x08009ec9
 800ac28:	08009f41 	.word	0x08009f41
 800ac2c:	08009f55 	.word	0x08009f55
 800ac30:	08009ef1 	.word	0x08009ef1
 800ac34:	08009f05 	.word	0x08009f05
 800ac38:	08009edd 	.word	0x08009edd
 800ac3c:	08009f19 	.word	0x08009f19
 800ac40:	08009f2d 	.word	0x08009f2d
 800ac44:	08009f69 	.word	0x08009f69
 800ac48:	0800aebd 	.word	0x0800aebd
 800ac4c:	0800aed1 	.word	0x0800aed1
 800ac50:	0800aee5 	.word	0x0800aee5
 800ac54:	0800aef9 	.word	0x0800aef9
 800ac58:	0800af0d 	.word	0x0800af0d
 800ac5c:	0800af21 	.word	0x0800af21
 800ac60:	0800af35 	.word	0x0800af35
 800ac64:	0800af49 	.word	0x0800af49

0800ac68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d101      	bne.n	800ac80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac7c:	2302      	movs	r3, #2
 800ac7e:	e074      	b.n	800ad6a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2202      	movs	r2, #2
 800ac8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a34      	ldr	r2, [pc, #208]	@ (800ad78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d009      	beq.n	800acbe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a33      	ldr	r2, [pc, #204]	@ (800ad7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d004      	beq.n	800acbe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a31      	ldr	r2, [pc, #196]	@ (800ad80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d108      	bne.n	800acd0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800acc4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	68fa      	ldr	r2, [r7, #12]
 800accc:	4313      	orrs	r3, r2
 800acce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800acd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	68fa      	ldr	r2, [r7, #12]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	68fa      	ldr	r2, [r7, #12]
 800acec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a21      	ldr	r2, [pc, #132]	@ (800ad78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d022      	beq.n	800ad3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad00:	d01d      	beq.n	800ad3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a1f      	ldr	r2, [pc, #124]	@ (800ad84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d018      	beq.n	800ad3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a1d      	ldr	r2, [pc, #116]	@ (800ad88 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d013      	beq.n	800ad3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a1c      	ldr	r2, [pc, #112]	@ (800ad8c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d00e      	beq.n	800ad3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a15      	ldr	r2, [pc, #84]	@ (800ad7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d009      	beq.n	800ad3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a18      	ldr	r2, [pc, #96]	@ (800ad90 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d004      	beq.n	800ad3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a11      	ldr	r2, [pc, #68]	@ (800ad80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d10c      	bne.n	800ad58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	68ba      	ldr	r2, [r7, #8]
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	68ba      	ldr	r2, [r7, #8]
 800ad56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ad68:	2300      	movs	r3, #0
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3714      	adds	r7, #20
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr
 800ad76:	bf00      	nop
 800ad78:	40012c00 	.word	0x40012c00
 800ad7c:	40013400 	.word	0x40013400
 800ad80:	40015000 	.word	0x40015000
 800ad84:	40000400 	.word	0x40000400
 800ad88:	40000800 	.word	0x40000800
 800ad8c:	40000c00 	.word	0x40000c00
 800ad90:	40014000 	.word	0x40014000

0800ad94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b085      	sub	sp, #20
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d101      	bne.n	800adb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800adac:	2302      	movs	r3, #2
 800adae:	e078      	b.n	800aea2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2201      	movs	r2, #1
 800adb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	4313      	orrs	r3, r2
 800adc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	4313      	orrs	r3, r2
 800add2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	4313      	orrs	r3, r2
 800ade0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4313      	orrs	r3, r2
 800adee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	691b      	ldr	r3, [r3, #16]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	695b      	ldr	r3, [r3, #20]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae16:	4313      	orrs	r3, r2
 800ae18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	699b      	ldr	r3, [r3, #24]
 800ae24:	041b      	lsls	r3, r3, #16
 800ae26:	4313      	orrs	r3, r2
 800ae28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	69db      	ldr	r3, [r3, #28]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a1c      	ldr	r2, [pc, #112]	@ (800aeb0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d009      	beq.n	800ae56 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a1b      	ldr	r2, [pc, #108]	@ (800aeb4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d004      	beq.n	800ae56 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a19      	ldr	r2, [pc, #100]	@ (800aeb8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d11c      	bne.n	800ae90 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae60:	051b      	lsls	r3, r3, #20
 800ae62:	4313      	orrs	r3, r2
 800ae64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	6a1b      	ldr	r3, [r3, #32]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	68fa      	ldr	r2, [r7, #12]
 800ae96:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aea0:	2300      	movs	r3, #0
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3714      	adds	r7, #20
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	40012c00 	.word	0x40012c00
 800aeb4:	40013400 	.word	0x40013400
 800aeb8:	40015000 	.word	0x40015000

0800aebc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aec4:	bf00      	nop
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b083      	sub	sp, #12
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800aed8:	bf00      	nop
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b083      	sub	sp, #12
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aeec:	bf00      	nop
 800aeee:	370c      	adds	r7, #12
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800af00:	bf00      	nop
 800af02:	370c      	adds	r7, #12
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr

0800af0c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800af14:	bf00      	nop
 800af16:	370c      	adds	r7, #12
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800af28:	bf00      	nop
 800af2a:	370c      	adds	r7, #12
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800af3c:	bf00      	nop
 800af3e:	370c      	adds	r7, #12
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800af50:	bf00      	nop
 800af52:	370c      	adds	r7, #12
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d101      	bne.n	800af6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af6a:	2301      	movs	r3, #1
 800af6c:	e050      	b.n	800b010 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af74:	2b00      	cmp	r3, #0
 800af76:	d114      	bne.n	800afa2 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 fd5b 	bl	800ba3c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d103      	bne.n	800af98 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4a21      	ldr	r2, [pc, #132]	@ (800b018 <HAL_UART_Init+0xbc>)
 800af94:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2224      	movs	r2, #36	@ 0x24
 800afa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f022 0201 	bic.w	r2, r2, #1
 800afb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d002      	beq.n	800afc8 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f001 f888 	bl	800c0d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 fd89 	bl	800bae0 <UART_SetConfig>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d101      	bne.n	800afd8 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800afd4:	2301      	movs	r3, #1
 800afd6:	e01b      	b.n	800b010 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	685a      	ldr	r2, [r3, #4]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800afe6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	689a      	ldr	r2, [r3, #8]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aff6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f042 0201 	orr.w	r2, r2, #1
 800b006:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f001 f907 	bl	800c21c <UART_CheckIdleState>
 800b00e:	4603      	mov	r3, r0
}
 800b010:	4618      	mov	r0, r3
 800b012:	3708      	adds	r7, #8
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}
 800b018:	08005431 	.word	0x08005431

0800b01c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b087      	sub	sp, #28
 800b020:	af00      	add	r7, sp, #0
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	460b      	mov	r3, r1
 800b026:	607a      	str	r2, [r7, #4]
 800b028:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d109      	bne.n	800b048 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b03a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800b044:	2301      	movs	r3, #1
 800b046:	e09c      	b.n	800b182 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b04e:	2b20      	cmp	r3, #32
 800b050:	d16c      	bne.n	800b12c <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800b052:	7afb      	ldrb	r3, [r7, #11]
 800b054:	2b0c      	cmp	r3, #12
 800b056:	d85e      	bhi.n	800b116 <HAL_UART_RegisterCallback+0xfa>
 800b058:	a201      	add	r2, pc, #4	@ (adr r2, 800b060 <HAL_UART_RegisterCallback+0x44>)
 800b05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b05e:	bf00      	nop
 800b060:	0800b095 	.word	0x0800b095
 800b064:	0800b09f 	.word	0x0800b09f
 800b068:	0800b0a9 	.word	0x0800b0a9
 800b06c:	0800b0b3 	.word	0x0800b0b3
 800b070:	0800b0bd 	.word	0x0800b0bd
 800b074:	0800b0c7 	.word	0x0800b0c7
 800b078:	0800b0d1 	.word	0x0800b0d1
 800b07c:	0800b0db 	.word	0x0800b0db
 800b080:	0800b0e5 	.word	0x0800b0e5
 800b084:	0800b0ef 	.word	0x0800b0ef
 800b088:	0800b0f9 	.word	0x0800b0f9
 800b08c:	0800b103 	.word	0x0800b103
 800b090:	0800b10d 	.word	0x0800b10d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800b09c:	e070      	b.n	800b180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	687a      	ldr	r2, [r7, #4]
 800b0a2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800b0a6:	e06b      	b.n	800b180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800b0b0:	e066      	b.n	800b180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800b0ba:	e061      	b.n	800b180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	687a      	ldr	r2, [r7, #4]
 800b0c0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800b0c4:	e05c      	b.n	800b180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800b0ce:	e057      	b.n	800b180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800b0d8:	e052      	b.n	800b180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800b0e2:	e04d      	b.n	800b180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800b0ec:	e048      	b.n	800b180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800b0f6:	e043      	b.n	800b180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800b100:	e03e      	b.n	800b180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800b10a:	e039      	b.n	800b180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800b114:	e034      	b.n	800b180 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b11c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800b126:	2301      	movs	r3, #1
 800b128:	75fb      	strb	r3, [r7, #23]
        break;
 800b12a:	e029      	b.n	800b180 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b132:	2b00      	cmp	r3, #0
 800b134:	d11a      	bne.n	800b16c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800b136:	7afb      	ldrb	r3, [r7, #11]
 800b138:	2b0b      	cmp	r3, #11
 800b13a:	d002      	beq.n	800b142 <HAL_UART_RegisterCallback+0x126>
 800b13c:	2b0c      	cmp	r3, #12
 800b13e:	d005      	beq.n	800b14c <HAL_UART_RegisterCallback+0x130>
 800b140:	e009      	b.n	800b156 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800b14a:	e019      	b.n	800b180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800b154:	e014      	b.n	800b180 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b15c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	75fb      	strb	r3, [r7, #23]
        break;
 800b16a:	e009      	b.n	800b180 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b172:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800b17c:	2301      	movs	r3, #1
 800b17e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b180:	7dfb      	ldrb	r3, [r7, #23]
}
 800b182:	4618      	mov	r0, r3
 800b184:	371c      	adds	r7, #28
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr
 800b18e:	bf00      	nop

0800b190 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b08a      	sub	sp, #40	@ 0x28
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	4613      	mov	r3, r2
 800b19c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1a4:	2b20      	cmp	r3, #32
 800b1a6:	d137      	bne.n	800b218 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d002      	beq.n	800b1b4 <HAL_UART_Receive_DMA+0x24>
 800b1ae:	88fb      	ldrh	r3, [r7, #6]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d101      	bne.n	800b1b8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	e030      	b.n	800b21a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a18      	ldr	r2, [pc, #96]	@ (800b224 <HAL_UART_Receive_DMA+0x94>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d01f      	beq.n	800b208 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d018      	beq.n	800b208 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	e853 3f00 	ldrex	r3, [r3]
 800b1e2:	613b      	str	r3, [r7, #16]
   return(result);
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b1ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f4:	623b      	str	r3, [r7, #32]
 800b1f6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f8:	69f9      	ldr	r1, [r7, #28]
 800b1fa:	6a3a      	ldr	r2, [r7, #32]
 800b1fc:	e841 2300 	strex	r3, r2, [r1]
 800b200:	61bb      	str	r3, [r7, #24]
   return(result);
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d1e6      	bne.n	800b1d6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b208:	88fb      	ldrh	r3, [r7, #6]
 800b20a:	461a      	mov	r2, r3
 800b20c:	68b9      	ldr	r1, [r7, #8]
 800b20e:	68f8      	ldr	r0, [r7, #12]
 800b210:	f001 f91c 	bl	800c44c <UART_Start_Receive_DMA>
 800b214:	4603      	mov	r3, r0
 800b216:	e000      	b.n	800b21a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b218:	2302      	movs	r3, #2
  }
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3728      	adds	r7, #40	@ 0x28
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	40008000 	.word	0x40008000

0800b228 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b0ba      	sub	sp, #232	@ 0xe8
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	69db      	ldr	r3, [r3, #28]
 800b236:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b24e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b252:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b256:	4013      	ands	r3, r2
 800b258:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b25c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b260:	2b00      	cmp	r3, #0
 800b262:	d11b      	bne.n	800b29c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b268:	f003 0320 	and.w	r3, r3, #32
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d015      	beq.n	800b29c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b274:	f003 0320 	and.w	r3, r3, #32
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d105      	bne.n	800b288 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b27c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b284:	2b00      	cmp	r3, #0
 800b286:	d009      	beq.n	800b29c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	f000 8312 	beq.w	800b8b6 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	4798      	blx	r3
      }
      return;
 800b29a:	e30c      	b.n	800b8b6 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b29c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	f000 8129 	beq.w	800b4f8 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b2a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b2aa:	4b90      	ldr	r3, [pc, #576]	@ (800b4ec <HAL_UART_IRQHandler+0x2c4>)
 800b2ac:	4013      	ands	r3, r2
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d106      	bne.n	800b2c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b2b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b2b6:	4b8e      	ldr	r3, [pc, #568]	@ (800b4f0 <HAL_UART_IRQHandler+0x2c8>)
 800b2b8:	4013      	ands	r3, r2
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	f000 811c 	beq.w	800b4f8 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b2c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2c4:	f003 0301 	and.w	r3, r3, #1
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d011      	beq.n	800b2f0 <HAL_UART_IRQHandler+0xc8>
 800b2cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d00b      	beq.n	800b2f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2e6:	f043 0201 	orr.w	r2, r3, #1
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2f4:	f003 0302 	and.w	r3, r3, #2
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d011      	beq.n	800b320 <HAL_UART_IRQHandler+0xf8>
 800b2fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b300:	f003 0301 	and.w	r3, r3, #1
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00b      	beq.n	800b320 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2202      	movs	r2, #2
 800b30e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b316:	f043 0204 	orr.w	r2, r3, #4
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b324:	f003 0304 	and.w	r3, r3, #4
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d011      	beq.n	800b350 <HAL_UART_IRQHandler+0x128>
 800b32c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b330:	f003 0301 	and.w	r3, r3, #1
 800b334:	2b00      	cmp	r3, #0
 800b336:	d00b      	beq.n	800b350 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2204      	movs	r2, #4
 800b33e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b346:	f043 0202 	orr.w	r2, r3, #2
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b354:	f003 0308 	and.w	r3, r3, #8
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d017      	beq.n	800b38c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b35c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b360:	f003 0320 	and.w	r3, r3, #32
 800b364:	2b00      	cmp	r3, #0
 800b366:	d105      	bne.n	800b374 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b368:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b36c:	4b5f      	ldr	r3, [pc, #380]	@ (800b4ec <HAL_UART_IRQHandler+0x2c4>)
 800b36e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b370:	2b00      	cmp	r3, #0
 800b372:	d00b      	beq.n	800b38c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2208      	movs	r2, #8
 800b37a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b382:	f043 0208 	orr.w	r2, r3, #8
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b38c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b390:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b394:	2b00      	cmp	r3, #0
 800b396:	d012      	beq.n	800b3be <HAL_UART_IRQHandler+0x196>
 800b398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b39c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d00c      	beq.n	800b3be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b3ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3b4:	f043 0220 	orr.w	r2, r3, #32
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	f000 8278 	beq.w	800b8ba <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b3ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3ce:	f003 0320 	and.w	r3, r3, #32
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d013      	beq.n	800b3fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b3d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3da:	f003 0320 	and.w	r3, r3, #32
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d105      	bne.n	800b3ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b3e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b3e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d007      	beq.n	800b3fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d003      	beq.n	800b3fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b404:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b412:	2b40      	cmp	r3, #64	@ 0x40
 800b414:	d005      	beq.n	800b422 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b41a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d058      	beq.n	800b4d4 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f001 f8f9 	bl	800c61a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b432:	2b40      	cmp	r3, #64	@ 0x40
 800b434:	d148      	bne.n	800b4c8 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	3308      	adds	r3, #8
 800b43c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b440:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b444:	e853 3f00 	ldrex	r3, [r3]
 800b448:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b44c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b450:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b454:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	3308      	adds	r3, #8
 800b45e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b462:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b466:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b46a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b46e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b472:	e841 2300 	strex	r3, r2, [r1]
 800b476:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b47a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d1d9      	bne.n	800b436 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d017      	beq.n	800b4bc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b492:	4a18      	ldr	r2, [pc, #96]	@ (800b4f4 <HAL_UART_IRQHandler+0x2cc>)
 800b494:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b49c:	4618      	mov	r0, r3
 800b49e:	f7fc f8c5 	bl	800762c <HAL_DMA_Abort_IT>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d01f      	beq.n	800b4e8 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b4b6:	4610      	mov	r0, r2
 800b4b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4ba:	e015      	b.n	800b4e8 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4c6:	e00f      	b.n	800b4e8 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4d2:	e009      	b.n	800b4e8 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b4e6:	e1e8      	b.n	800b8ba <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4e8:	bf00      	nop
    return;
 800b4ea:	e1e6      	b.n	800b8ba <HAL_UART_IRQHandler+0x692>
 800b4ec:	10000001 	.word	0x10000001
 800b4f0:	04000120 	.word	0x04000120
 800b4f4:	0800c8e5 	.word	0x0800c8e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	f040 8176 	bne.w	800b7ee <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b506:	f003 0310 	and.w	r3, r3, #16
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	f000 816f 	beq.w	800b7ee <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b514:	f003 0310 	and.w	r3, r3, #16
 800b518:	2b00      	cmp	r3, #0
 800b51a:	f000 8168 	beq.w	800b7ee <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2210      	movs	r2, #16
 800b524:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b530:	2b40      	cmp	r3, #64	@ 0x40
 800b532:	f040 80dc 	bne.w	800b6ee <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b544:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b548:	2b00      	cmp	r3, #0
 800b54a:	f000 80b1 	beq.w	800b6b0 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b554:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b558:	429a      	cmp	r2, r3
 800b55a:	f080 80a9 	bcs.w	800b6b0 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b564:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f003 0320 	and.w	r3, r3, #32
 800b576:	2b00      	cmp	r3, #0
 800b578:	f040 8087 	bne.w	800b68a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b584:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b588:	e853 3f00 	ldrex	r3, [r3]
 800b58c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b590:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b598:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b5a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b5aa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b5b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b5b6:	e841 2300 	strex	r3, r2, [r1]
 800b5ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b5be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1da      	bne.n	800b57c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	3308      	adds	r3, #8
 800b5cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b5d0:	e853 3f00 	ldrex	r3, [r3]
 800b5d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b5d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5d8:	f023 0301 	bic.w	r3, r3, #1
 800b5dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	3308      	adds	r3, #8
 800b5e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b5ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b5ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b5f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b5f6:	e841 2300 	strex	r3, r2, [r1]
 800b5fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b5fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d1e1      	bne.n	800b5c6 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	3308      	adds	r3, #8
 800b608:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b60a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b60c:	e853 3f00 	ldrex	r3, [r3]
 800b610:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b612:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b614:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b618:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	3308      	adds	r3, #8
 800b622:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b626:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b628:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b62a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b62c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b62e:	e841 2300 	strex	r3, r2, [r1]
 800b632:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b634:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b636:	2b00      	cmp	r3, #0
 800b638:	d1e3      	bne.n	800b602 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2220      	movs	r2, #32
 800b63e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b64e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b650:	e853 3f00 	ldrex	r3, [r3]
 800b654:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b656:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b658:	f023 0310 	bic.w	r3, r3, #16
 800b65c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	461a      	mov	r2, r3
 800b666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b66a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b66c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b66e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b670:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b672:	e841 2300 	strex	r3, r2, [r1]
 800b676:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b678:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d1e4      	bne.n	800b648 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b684:	4618      	mov	r0, r3
 800b686:	f7fb ff78 	bl	800757a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2202      	movs	r2, #2
 800b68e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800b6a2:	b292      	uxth	r2, r2
 800b6a4:	1a8a      	subs	r2, r1, r2
 800b6a6:	b292      	uxth	r2, r2
 800b6a8:	4611      	mov	r1, r2
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b6ae:	e106      	b.n	800b8be <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b6b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	f040 80ff 	bne.w	800b8be <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f003 0320 	and.w	r3, r3, #32
 800b6ce:	2b20      	cmp	r3, #32
 800b6d0:	f040 80f5 	bne.w	800b8be <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2202      	movs	r2, #2
 800b6d8:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b6e6:	4611      	mov	r1, r2
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	4798      	blx	r3
      return;
 800b6ec:	e0e7      	b.n	800b8be <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	1ad3      	subs	r3, r2, r3
 800b6fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b708:	b29b      	uxth	r3, r3
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	f000 80d9 	beq.w	800b8c2 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800b710:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b714:	2b00      	cmp	r3, #0
 800b716:	f000 80d4 	beq.w	800b8c2 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b722:	e853 3f00 	ldrex	r3, [r3]
 800b726:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b72a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b72e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	461a      	mov	r2, r3
 800b738:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b73c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b73e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b740:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b742:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b744:	e841 2300 	strex	r3, r2, [r1]
 800b748:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b74a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d1e4      	bne.n	800b71a <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	3308      	adds	r3, #8
 800b756:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b75a:	e853 3f00 	ldrex	r3, [r3]
 800b75e:	623b      	str	r3, [r7, #32]
   return(result);
 800b760:	6a3b      	ldr	r3, [r7, #32]
 800b762:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b766:	f023 0301 	bic.w	r3, r3, #1
 800b76a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	3308      	adds	r3, #8
 800b774:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b778:	633a      	str	r2, [r7, #48]	@ 0x30
 800b77a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b77c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b77e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b780:	e841 2300 	strex	r3, r2, [r1]
 800b784:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1e1      	bne.n	800b750 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2220      	movs	r2, #32
 800b790:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	e853 3f00 	ldrex	r3, [r3]
 800b7ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	f023 0310 	bic.w	r3, r3, #16
 800b7b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	461a      	mov	r2, r3
 800b7be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b7c2:	61fb      	str	r3, [r7, #28]
 800b7c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c6:	69b9      	ldr	r1, [r7, #24]
 800b7c8:	69fa      	ldr	r2, [r7, #28]
 800b7ca:	e841 2300 	strex	r3, r2, [r1]
 800b7ce:	617b      	str	r3, [r7, #20]
   return(result);
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d1e4      	bne.n	800b7a0 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2202      	movs	r2, #2
 800b7da:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b7e2:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800b7e6:	4611      	mov	r1, r2
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b7ec:	e069      	b.n	800b8c2 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b7ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d010      	beq.n	800b81c <HAL_UART_IRQHandler+0x5f4>
 800b7fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b7fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b802:	2b00      	cmp	r3, #0
 800b804:	d00a      	beq.n	800b81c <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b80e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b81a:	e055      	b.n	800b8c8 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b81c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b824:	2b00      	cmp	r3, #0
 800b826:	d014      	beq.n	800b852 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b82c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b830:	2b00      	cmp	r3, #0
 800b832:	d105      	bne.n	800b840 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b838:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d008      	beq.n	800b852 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b844:	2b00      	cmp	r3, #0
 800b846:	d03e      	beq.n	800b8c6 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	4798      	blx	r3
    }
    return;
 800b850:	e039      	b.n	800b8c6 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d009      	beq.n	800b872 <HAL_UART_IRQHandler+0x64a>
 800b85e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b866:	2b00      	cmp	r3, #0
 800b868:	d003      	beq.n	800b872 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f001 f84e 	bl	800c90c <UART_EndTransmit_IT>
    return;
 800b870:	e02a      	b.n	800b8c8 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b876:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00b      	beq.n	800b896 <HAL_UART_IRQHandler+0x66e>
 800b87e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b882:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b886:	2b00      	cmp	r3, #0
 800b888:	d005      	beq.n	800b896 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b894:	e018      	b.n	800b8c8 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b89a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d012      	beq.n	800b8c8 <HAL_UART_IRQHandler+0x6a0>
 800b8a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	da0e      	bge.n	800b8c8 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b8b4:	e008      	b.n	800b8c8 <HAL_UART_IRQHandler+0x6a0>
      return;
 800b8b6:	bf00      	nop
 800b8b8:	e006      	b.n	800b8c8 <HAL_UART_IRQHandler+0x6a0>
    return;
 800b8ba:	bf00      	nop
 800b8bc:	e004      	b.n	800b8c8 <HAL_UART_IRQHandler+0x6a0>
      return;
 800b8be:	bf00      	nop
 800b8c0:	e002      	b.n	800b8c8 <HAL_UART_IRQHandler+0x6a0>
      return;
 800b8c2:	bf00      	nop
 800b8c4:	e000      	b.n	800b8c8 <HAL_UART_IRQHandler+0x6a0>
    return;
 800b8c6:	bf00      	nop
  }
}
 800b8c8:	37e8      	adds	r7, #232	@ 0xe8
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop

0800b8d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b8d8:	bf00      	nop
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b8ec:	bf00      	nop
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b900:	bf00      	nop
 800b902:	370c      	adds	r7, #12
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr

0800b90c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b083      	sub	sp, #12
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b914:	bf00      	nop
 800b916:	370c      	adds	r7, #12
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr

0800b920 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b920:	b480      	push	{r7}
 800b922:	b083      	sub	sp, #12
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b928:	bf00      	nop
 800b92a:	370c      	adds	r7, #12
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b93c:	bf00      	nop
 800b93e:	370c      	adds	r7, #12
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b950:	bf00      	nop
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	460b      	mov	r3, r1
 800b966:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b968:	bf00      	nop
 800b96a:	370c      	adds	r7, #12
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4a09      	ldr	r2, [pc, #36]	@ (800b9a8 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d009      	beq.n	800b99c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	695b      	ldr	r3, [r3, #20]
 800b98e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	683a      	ldr	r2, [r7, #0]
 800b998:	430a      	orrs	r2, r1
 800b99a:	615a      	str	r2, [r3, #20]
  }
}
 800b99c:	bf00      	nop
 800b99e:	370c      	adds	r7, #12
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr
 800b9a8:	40008000 	.word	0x40008000

0800b9ac <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4a18      	ldr	r2, [pc, #96]	@ (800ba1c <HAL_UART_EnableReceiverTimeout+0x70>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d027      	beq.n	800ba0e <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b9c4:	2b20      	cmp	r3, #32
 800b9c6:	d120      	bne.n	800ba0a <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d101      	bne.n	800b9d6 <HAL_UART_EnableReceiverTimeout+0x2a>
 800b9d2:	2302      	movs	r3, #2
 800b9d4:	e01c      	b.n	800ba10 <HAL_UART_EnableReceiverTimeout+0x64>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2201      	movs	r2, #1
 800b9da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2224      	movs	r2, #36	@ 0x24
 800b9e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	685a      	ldr	r2, [r3, #4]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800b9f4:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2220      	movs	r2, #32
 800b9fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800ba06:	2300      	movs	r3, #0
 800ba08:	e002      	b.n	800ba10 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800ba0a:	2302      	movs	r3, #2
 800ba0c:	e000      	b.n	800ba10 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800ba0e:	2301      	movs	r3, #1
  }
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	370c      	adds	r7, #12
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr
 800ba1c:	40008000 	.word	0x40008000

0800ba20 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	370c      	adds	r7, #12
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr
	...

0800ba3c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	4a1a      	ldr	r2, [pc, #104]	@ (800bab0 <UART_InitCallbacksToDefault+0x74>)
 800ba48:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	4a19      	ldr	r2, [pc, #100]	@ (800bab4 <UART_InitCallbacksToDefault+0x78>)
 800ba50:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	4a18      	ldr	r2, [pc, #96]	@ (800bab8 <UART_InitCallbacksToDefault+0x7c>)
 800ba58:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	4a17      	ldr	r2, [pc, #92]	@ (800babc <UART_InitCallbacksToDefault+0x80>)
 800ba60:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	4a16      	ldr	r2, [pc, #88]	@ (800bac0 <UART_InitCallbacksToDefault+0x84>)
 800ba68:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	4a15      	ldr	r2, [pc, #84]	@ (800bac4 <UART_InitCallbacksToDefault+0x88>)
 800ba70:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	4a14      	ldr	r2, [pc, #80]	@ (800bac8 <UART_InitCallbacksToDefault+0x8c>)
 800ba78:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	4a13      	ldr	r2, [pc, #76]	@ (800bacc <UART_InitCallbacksToDefault+0x90>)
 800ba80:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4a12      	ldr	r2, [pc, #72]	@ (800bad0 <UART_InitCallbacksToDefault+0x94>)
 800ba88:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	4a11      	ldr	r2, [pc, #68]	@ (800bad4 <UART_InitCallbacksToDefault+0x98>)
 800ba90:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	4a10      	ldr	r2, [pc, #64]	@ (800bad8 <UART_InitCallbacksToDefault+0x9c>)
 800ba98:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	4a0f      	ldr	r2, [pc, #60]	@ (800badc <UART_InitCallbacksToDefault+0xa0>)
 800baa0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800baa4:	bf00      	nop
 800baa6:	370c      	adds	r7, #12
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr
 800bab0:	0800b8e5 	.word	0x0800b8e5
 800bab4:	0800b8d1 	.word	0x0800b8d1
 800bab8:	0800b8f9 	.word	0x0800b8f9
 800babc:	08003c85 	.word	0x08003c85
 800bac0:	0800b90d 	.word	0x0800b90d
 800bac4:	0800b921 	.word	0x0800b921
 800bac8:	0800b935 	.word	0x0800b935
 800bacc:	0800b949 	.word	0x0800b949
 800bad0:	0800c967 	.word	0x0800c967
 800bad4:	0800c97b 	.word	0x0800c97b
 800bad8:	0800c98f 	.word	0x0800c98f
 800badc:	0800b95d 	.word	0x0800b95d

0800bae0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bae4:	b08c      	sub	sp, #48	@ 0x30
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800baea:	2300      	movs	r3, #0
 800baec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	689a      	ldr	r2, [r3, #8]
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	691b      	ldr	r3, [r3, #16]
 800baf8:	431a      	orrs	r2, r3
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	695b      	ldr	r3, [r3, #20]
 800bafe:	431a      	orrs	r2, r3
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	69db      	ldr	r3, [r3, #28]
 800bb04:	4313      	orrs	r3, r2
 800bb06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	681a      	ldr	r2, [r3, #0]
 800bb0e:	4baa      	ldr	r3, [pc, #680]	@ (800bdb8 <UART_SetConfig+0x2d8>)
 800bb10:	4013      	ands	r3, r2
 800bb12:	697a      	ldr	r2, [r7, #20]
 800bb14:	6812      	ldr	r2, [r2, #0]
 800bb16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bb18:	430b      	orrs	r3, r1
 800bb1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	68da      	ldr	r2, [r3, #12]
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	430a      	orrs	r2, r1
 800bb30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	699b      	ldr	r3, [r3, #24]
 800bb36:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a9f      	ldr	r2, [pc, #636]	@ (800bdbc <UART_SetConfig+0x2dc>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d004      	beq.n	800bb4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	6a1b      	ldr	r3, [r3, #32]
 800bb46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	689b      	ldr	r3, [r3, #8]
 800bb52:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800bb56:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800bb5a:	697a      	ldr	r2, [r7, #20]
 800bb5c:	6812      	ldr	r2, [r2, #0]
 800bb5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bb60:	430b      	orrs	r3, r1
 800bb62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb6a:	f023 010f 	bic.w	r1, r3, #15
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	430a      	orrs	r2, r1
 800bb78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a90      	ldr	r2, [pc, #576]	@ (800bdc0 <UART_SetConfig+0x2e0>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d125      	bne.n	800bbd0 <UART_SetConfig+0xf0>
 800bb84:	4b8f      	ldr	r3, [pc, #572]	@ (800bdc4 <UART_SetConfig+0x2e4>)
 800bb86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb8a:	f003 0303 	and.w	r3, r3, #3
 800bb8e:	2b03      	cmp	r3, #3
 800bb90:	d81a      	bhi.n	800bbc8 <UART_SetConfig+0xe8>
 800bb92:	a201      	add	r2, pc, #4	@ (adr r2, 800bb98 <UART_SetConfig+0xb8>)
 800bb94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb98:	0800bba9 	.word	0x0800bba9
 800bb9c:	0800bbb9 	.word	0x0800bbb9
 800bba0:	0800bbb1 	.word	0x0800bbb1
 800bba4:	0800bbc1 	.word	0x0800bbc1
 800bba8:	2301      	movs	r3, #1
 800bbaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbae:	e116      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bbb0:	2302      	movs	r3, #2
 800bbb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbb6:	e112      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bbb8:	2304      	movs	r3, #4
 800bbba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbbe:	e10e      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bbc0:	2308      	movs	r3, #8
 800bbc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbc6:	e10a      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bbc8:	2310      	movs	r3, #16
 800bbca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbce:	e106      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a7c      	ldr	r2, [pc, #496]	@ (800bdc8 <UART_SetConfig+0x2e8>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d138      	bne.n	800bc4c <UART_SetConfig+0x16c>
 800bbda:	4b7a      	ldr	r3, [pc, #488]	@ (800bdc4 <UART_SetConfig+0x2e4>)
 800bbdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bbe0:	f003 030c 	and.w	r3, r3, #12
 800bbe4:	2b0c      	cmp	r3, #12
 800bbe6:	d82d      	bhi.n	800bc44 <UART_SetConfig+0x164>
 800bbe8:	a201      	add	r2, pc, #4	@ (adr r2, 800bbf0 <UART_SetConfig+0x110>)
 800bbea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbee:	bf00      	nop
 800bbf0:	0800bc25 	.word	0x0800bc25
 800bbf4:	0800bc45 	.word	0x0800bc45
 800bbf8:	0800bc45 	.word	0x0800bc45
 800bbfc:	0800bc45 	.word	0x0800bc45
 800bc00:	0800bc35 	.word	0x0800bc35
 800bc04:	0800bc45 	.word	0x0800bc45
 800bc08:	0800bc45 	.word	0x0800bc45
 800bc0c:	0800bc45 	.word	0x0800bc45
 800bc10:	0800bc2d 	.word	0x0800bc2d
 800bc14:	0800bc45 	.word	0x0800bc45
 800bc18:	0800bc45 	.word	0x0800bc45
 800bc1c:	0800bc45 	.word	0x0800bc45
 800bc20:	0800bc3d 	.word	0x0800bc3d
 800bc24:	2300      	movs	r3, #0
 800bc26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc2a:	e0d8      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bc2c:	2302      	movs	r3, #2
 800bc2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc32:	e0d4      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bc34:	2304      	movs	r3, #4
 800bc36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc3a:	e0d0      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bc3c:	2308      	movs	r3, #8
 800bc3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc42:	e0cc      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bc44:	2310      	movs	r3, #16
 800bc46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc4a:	e0c8      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a5e      	ldr	r2, [pc, #376]	@ (800bdcc <UART_SetConfig+0x2ec>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d125      	bne.n	800bca2 <UART_SetConfig+0x1c2>
 800bc56:	4b5b      	ldr	r3, [pc, #364]	@ (800bdc4 <UART_SetConfig+0x2e4>)
 800bc58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc5c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bc60:	2b30      	cmp	r3, #48	@ 0x30
 800bc62:	d016      	beq.n	800bc92 <UART_SetConfig+0x1b2>
 800bc64:	2b30      	cmp	r3, #48	@ 0x30
 800bc66:	d818      	bhi.n	800bc9a <UART_SetConfig+0x1ba>
 800bc68:	2b20      	cmp	r3, #32
 800bc6a:	d00a      	beq.n	800bc82 <UART_SetConfig+0x1a2>
 800bc6c:	2b20      	cmp	r3, #32
 800bc6e:	d814      	bhi.n	800bc9a <UART_SetConfig+0x1ba>
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d002      	beq.n	800bc7a <UART_SetConfig+0x19a>
 800bc74:	2b10      	cmp	r3, #16
 800bc76:	d008      	beq.n	800bc8a <UART_SetConfig+0x1aa>
 800bc78:	e00f      	b.n	800bc9a <UART_SetConfig+0x1ba>
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc80:	e0ad      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bc82:	2302      	movs	r3, #2
 800bc84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc88:	e0a9      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bc8a:	2304      	movs	r3, #4
 800bc8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc90:	e0a5      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bc92:	2308      	movs	r3, #8
 800bc94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc98:	e0a1      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bc9a:	2310      	movs	r3, #16
 800bc9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bca0:	e09d      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4a4a      	ldr	r2, [pc, #296]	@ (800bdd0 <UART_SetConfig+0x2f0>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d125      	bne.n	800bcf8 <UART_SetConfig+0x218>
 800bcac:	4b45      	ldr	r3, [pc, #276]	@ (800bdc4 <UART_SetConfig+0x2e4>)
 800bcae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcb2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bcb6:	2bc0      	cmp	r3, #192	@ 0xc0
 800bcb8:	d016      	beq.n	800bce8 <UART_SetConfig+0x208>
 800bcba:	2bc0      	cmp	r3, #192	@ 0xc0
 800bcbc:	d818      	bhi.n	800bcf0 <UART_SetConfig+0x210>
 800bcbe:	2b80      	cmp	r3, #128	@ 0x80
 800bcc0:	d00a      	beq.n	800bcd8 <UART_SetConfig+0x1f8>
 800bcc2:	2b80      	cmp	r3, #128	@ 0x80
 800bcc4:	d814      	bhi.n	800bcf0 <UART_SetConfig+0x210>
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d002      	beq.n	800bcd0 <UART_SetConfig+0x1f0>
 800bcca:	2b40      	cmp	r3, #64	@ 0x40
 800bccc:	d008      	beq.n	800bce0 <UART_SetConfig+0x200>
 800bcce:	e00f      	b.n	800bcf0 <UART_SetConfig+0x210>
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bcd6:	e082      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bcd8:	2302      	movs	r3, #2
 800bcda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bcde:	e07e      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bce0:	2304      	movs	r3, #4
 800bce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bce6:	e07a      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bce8:	2308      	movs	r3, #8
 800bcea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bcee:	e076      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bcf0:	2310      	movs	r3, #16
 800bcf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bcf6:	e072      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a35      	ldr	r2, [pc, #212]	@ (800bdd4 <UART_SetConfig+0x2f4>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d12a      	bne.n	800bd58 <UART_SetConfig+0x278>
 800bd02:	4b30      	ldr	r3, [pc, #192]	@ (800bdc4 <UART_SetConfig+0x2e4>)
 800bd04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bd10:	d01a      	beq.n	800bd48 <UART_SetConfig+0x268>
 800bd12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bd16:	d81b      	bhi.n	800bd50 <UART_SetConfig+0x270>
 800bd18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd1c:	d00c      	beq.n	800bd38 <UART_SetConfig+0x258>
 800bd1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd22:	d815      	bhi.n	800bd50 <UART_SetConfig+0x270>
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d003      	beq.n	800bd30 <UART_SetConfig+0x250>
 800bd28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd2c:	d008      	beq.n	800bd40 <UART_SetConfig+0x260>
 800bd2e:	e00f      	b.n	800bd50 <UART_SetConfig+0x270>
 800bd30:	2300      	movs	r3, #0
 800bd32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bd36:	e052      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bd38:	2302      	movs	r3, #2
 800bd3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bd3e:	e04e      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bd40:	2304      	movs	r3, #4
 800bd42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bd46:	e04a      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bd48:	2308      	movs	r3, #8
 800bd4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bd4e:	e046      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bd50:	2310      	movs	r3, #16
 800bd52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bd56:	e042      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4a17      	ldr	r2, [pc, #92]	@ (800bdbc <UART_SetConfig+0x2dc>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d13a      	bne.n	800bdd8 <UART_SetConfig+0x2f8>
 800bd62:	4b18      	ldr	r3, [pc, #96]	@ (800bdc4 <UART_SetConfig+0x2e4>)
 800bd64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bd6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bd70:	d01a      	beq.n	800bda8 <UART_SetConfig+0x2c8>
 800bd72:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bd76:	d81b      	bhi.n	800bdb0 <UART_SetConfig+0x2d0>
 800bd78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bd7c:	d00c      	beq.n	800bd98 <UART_SetConfig+0x2b8>
 800bd7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bd82:	d815      	bhi.n	800bdb0 <UART_SetConfig+0x2d0>
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d003      	beq.n	800bd90 <UART_SetConfig+0x2b0>
 800bd88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd8c:	d008      	beq.n	800bda0 <UART_SetConfig+0x2c0>
 800bd8e:	e00f      	b.n	800bdb0 <UART_SetConfig+0x2d0>
 800bd90:	2300      	movs	r3, #0
 800bd92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bd96:	e022      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bd98:	2302      	movs	r3, #2
 800bd9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bd9e:	e01e      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bda0:	2304      	movs	r3, #4
 800bda2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bda6:	e01a      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bda8:	2308      	movs	r3, #8
 800bdaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bdae:	e016      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bdb0:	2310      	movs	r3, #16
 800bdb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bdb6:	e012      	b.n	800bdde <UART_SetConfig+0x2fe>
 800bdb8:	cfff69f3 	.word	0xcfff69f3
 800bdbc:	40008000 	.word	0x40008000
 800bdc0:	40013800 	.word	0x40013800
 800bdc4:	40021000 	.word	0x40021000
 800bdc8:	40004400 	.word	0x40004400
 800bdcc:	40004800 	.word	0x40004800
 800bdd0:	40004c00 	.word	0x40004c00
 800bdd4:	40005000 	.word	0x40005000
 800bdd8:	2310      	movs	r3, #16
 800bdda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4aae      	ldr	r2, [pc, #696]	@ (800c09c <UART_SetConfig+0x5bc>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	f040 8097 	bne.w	800bf18 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bdea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bdee:	2b08      	cmp	r3, #8
 800bdf0:	d823      	bhi.n	800be3a <UART_SetConfig+0x35a>
 800bdf2:	a201      	add	r2, pc, #4	@ (adr r2, 800bdf8 <UART_SetConfig+0x318>)
 800bdf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdf8:	0800be1d 	.word	0x0800be1d
 800bdfc:	0800be3b 	.word	0x0800be3b
 800be00:	0800be25 	.word	0x0800be25
 800be04:	0800be3b 	.word	0x0800be3b
 800be08:	0800be2b 	.word	0x0800be2b
 800be0c:	0800be3b 	.word	0x0800be3b
 800be10:	0800be3b 	.word	0x0800be3b
 800be14:	0800be3b 	.word	0x0800be3b
 800be18:	0800be33 	.word	0x0800be33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be1c:	f7fc fcf6 	bl	800880c <HAL_RCC_GetPCLK1Freq>
 800be20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800be22:	e010      	b.n	800be46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800be24:	4b9e      	ldr	r3, [pc, #632]	@ (800c0a0 <UART_SetConfig+0x5c0>)
 800be26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800be28:	e00d      	b.n	800be46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800be2a:	f7fc fc81 	bl	8008730 <HAL_RCC_GetSysClockFreq>
 800be2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800be30:	e009      	b.n	800be46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800be38:	e005      	b.n	800be46 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800be3a:	2300      	movs	r3, #0
 800be3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800be3e:	2301      	movs	r3, #1
 800be40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800be44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800be46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be48:	2b00      	cmp	r3, #0
 800be4a:	f000 8130 	beq.w	800c0ae <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be52:	4a94      	ldr	r2, [pc, #592]	@ (800c0a4 <UART_SetConfig+0x5c4>)
 800be54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be58:	461a      	mov	r2, r3
 800be5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800be60:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	685a      	ldr	r2, [r3, #4]
 800be66:	4613      	mov	r3, r2
 800be68:	005b      	lsls	r3, r3, #1
 800be6a:	4413      	add	r3, r2
 800be6c:	69ba      	ldr	r2, [r7, #24]
 800be6e:	429a      	cmp	r2, r3
 800be70:	d305      	bcc.n	800be7e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800be78:	69ba      	ldr	r2, [r7, #24]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d903      	bls.n	800be86 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800be7e:	2301      	movs	r3, #1
 800be80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800be84:	e113      	b.n	800c0ae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be88:	2200      	movs	r2, #0
 800be8a:	60bb      	str	r3, [r7, #8]
 800be8c:	60fa      	str	r2, [r7, #12]
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be92:	4a84      	ldr	r2, [pc, #528]	@ (800c0a4 <UART_SetConfig+0x5c4>)
 800be94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be98:	b29b      	uxth	r3, r3
 800be9a:	2200      	movs	r2, #0
 800be9c:	603b      	str	r3, [r7, #0]
 800be9e:	607a      	str	r2, [r7, #4]
 800bea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bea4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bea8:	f7f4 fe1c 	bl	8000ae4 <__aeabi_uldivmod>
 800beac:	4602      	mov	r2, r0
 800beae:	460b      	mov	r3, r1
 800beb0:	4610      	mov	r0, r2
 800beb2:	4619      	mov	r1, r3
 800beb4:	f04f 0200 	mov.w	r2, #0
 800beb8:	f04f 0300 	mov.w	r3, #0
 800bebc:	020b      	lsls	r3, r1, #8
 800bebe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bec2:	0202      	lsls	r2, r0, #8
 800bec4:	6979      	ldr	r1, [r7, #20]
 800bec6:	6849      	ldr	r1, [r1, #4]
 800bec8:	0849      	lsrs	r1, r1, #1
 800beca:	2000      	movs	r0, #0
 800becc:	460c      	mov	r4, r1
 800bece:	4605      	mov	r5, r0
 800bed0:	eb12 0804 	adds.w	r8, r2, r4
 800bed4:	eb43 0905 	adc.w	r9, r3, r5
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	2200      	movs	r2, #0
 800bede:	469a      	mov	sl, r3
 800bee0:	4693      	mov	fp, r2
 800bee2:	4652      	mov	r2, sl
 800bee4:	465b      	mov	r3, fp
 800bee6:	4640      	mov	r0, r8
 800bee8:	4649      	mov	r1, r9
 800beea:	f7f4 fdfb 	bl	8000ae4 <__aeabi_uldivmod>
 800beee:	4602      	mov	r2, r0
 800bef0:	460b      	mov	r3, r1
 800bef2:	4613      	mov	r3, r2
 800bef4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bef6:	6a3b      	ldr	r3, [r7, #32]
 800bef8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800befc:	d308      	bcc.n	800bf10 <UART_SetConfig+0x430>
 800befe:	6a3b      	ldr	r3, [r7, #32]
 800bf00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf04:	d204      	bcs.n	800bf10 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	6a3a      	ldr	r2, [r7, #32]
 800bf0c:	60da      	str	r2, [r3, #12]
 800bf0e:	e0ce      	b.n	800c0ae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800bf10:	2301      	movs	r3, #1
 800bf12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bf16:	e0ca      	b.n	800c0ae <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	69db      	ldr	r3, [r3, #28]
 800bf1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bf20:	d166      	bne.n	800bff0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800bf22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bf26:	2b08      	cmp	r3, #8
 800bf28:	d827      	bhi.n	800bf7a <UART_SetConfig+0x49a>
 800bf2a:	a201      	add	r2, pc, #4	@ (adr r2, 800bf30 <UART_SetConfig+0x450>)
 800bf2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf30:	0800bf55 	.word	0x0800bf55
 800bf34:	0800bf5d 	.word	0x0800bf5d
 800bf38:	0800bf65 	.word	0x0800bf65
 800bf3c:	0800bf7b 	.word	0x0800bf7b
 800bf40:	0800bf6b 	.word	0x0800bf6b
 800bf44:	0800bf7b 	.word	0x0800bf7b
 800bf48:	0800bf7b 	.word	0x0800bf7b
 800bf4c:	0800bf7b 	.word	0x0800bf7b
 800bf50:	0800bf73 	.word	0x0800bf73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf54:	f7fc fc5a 	bl	800880c <HAL_RCC_GetPCLK1Freq>
 800bf58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bf5a:	e014      	b.n	800bf86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf5c:	f7fc fc6c 	bl	8008838 <HAL_RCC_GetPCLK2Freq>
 800bf60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bf62:	e010      	b.n	800bf86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bf64:	4b4e      	ldr	r3, [pc, #312]	@ (800c0a0 <UART_SetConfig+0x5c0>)
 800bf66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bf68:	e00d      	b.n	800bf86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf6a:	f7fc fbe1 	bl	8008730 <HAL_RCC_GetSysClockFreq>
 800bf6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bf70:	e009      	b.n	800bf86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bf78:	e005      	b.n	800bf86 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bf84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bf86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	f000 8090 	beq.w	800c0ae <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf92:	4a44      	ldr	r2, [pc, #272]	@ (800c0a4 <UART_SetConfig+0x5c4>)
 800bf94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf98:	461a      	mov	r2, r3
 800bf9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf9c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bfa0:	005a      	lsls	r2, r3, #1
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	085b      	lsrs	r3, r3, #1
 800bfa8:	441a      	add	r2, r3
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bfb4:	6a3b      	ldr	r3, [r7, #32]
 800bfb6:	2b0f      	cmp	r3, #15
 800bfb8:	d916      	bls.n	800bfe8 <UART_SetConfig+0x508>
 800bfba:	6a3b      	ldr	r3, [r7, #32]
 800bfbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bfc0:	d212      	bcs.n	800bfe8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bfc2:	6a3b      	ldr	r3, [r7, #32]
 800bfc4:	b29b      	uxth	r3, r3
 800bfc6:	f023 030f 	bic.w	r3, r3, #15
 800bfca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bfcc:	6a3b      	ldr	r3, [r7, #32]
 800bfce:	085b      	lsrs	r3, r3, #1
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	f003 0307 	and.w	r3, r3, #7
 800bfd6:	b29a      	uxth	r2, r3
 800bfd8:	8bfb      	ldrh	r3, [r7, #30]
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	8bfa      	ldrh	r2, [r7, #30]
 800bfe4:	60da      	str	r2, [r3, #12]
 800bfe6:	e062      	b.n	800c0ae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bfe8:	2301      	movs	r3, #1
 800bfea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bfee:	e05e      	b.n	800c0ae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bff0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bff4:	2b08      	cmp	r3, #8
 800bff6:	d828      	bhi.n	800c04a <UART_SetConfig+0x56a>
 800bff8:	a201      	add	r2, pc, #4	@ (adr r2, 800c000 <UART_SetConfig+0x520>)
 800bffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bffe:	bf00      	nop
 800c000:	0800c025 	.word	0x0800c025
 800c004:	0800c02d 	.word	0x0800c02d
 800c008:	0800c035 	.word	0x0800c035
 800c00c:	0800c04b 	.word	0x0800c04b
 800c010:	0800c03b 	.word	0x0800c03b
 800c014:	0800c04b 	.word	0x0800c04b
 800c018:	0800c04b 	.word	0x0800c04b
 800c01c:	0800c04b 	.word	0x0800c04b
 800c020:	0800c043 	.word	0x0800c043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c024:	f7fc fbf2 	bl	800880c <HAL_RCC_GetPCLK1Freq>
 800c028:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c02a:	e014      	b.n	800c056 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c02c:	f7fc fc04 	bl	8008838 <HAL_RCC_GetPCLK2Freq>
 800c030:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c032:	e010      	b.n	800c056 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c034:	4b1a      	ldr	r3, [pc, #104]	@ (800c0a0 <UART_SetConfig+0x5c0>)
 800c036:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c038:	e00d      	b.n	800c056 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c03a:	f7fc fb79 	bl	8008730 <HAL_RCC_GetSysClockFreq>
 800c03e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c040:	e009      	b.n	800c056 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c046:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c048:	e005      	b.n	800c056 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c04a:	2300      	movs	r3, #0
 800c04c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c04e:	2301      	movs	r3, #1
 800c050:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c054:	bf00      	nop
    }

    if (pclk != 0U)
 800c056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d028      	beq.n	800c0ae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c060:	4a10      	ldr	r2, [pc, #64]	@ (800c0a4 <UART_SetConfig+0x5c4>)
 800c062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c066:	461a      	mov	r2, r3
 800c068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c06a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	085b      	lsrs	r3, r3, #1
 800c074:	441a      	add	r2, r3
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c07e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c080:	6a3b      	ldr	r3, [r7, #32]
 800c082:	2b0f      	cmp	r3, #15
 800c084:	d910      	bls.n	800c0a8 <UART_SetConfig+0x5c8>
 800c086:	6a3b      	ldr	r3, [r7, #32]
 800c088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c08c:	d20c      	bcs.n	800c0a8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c08e:	6a3b      	ldr	r3, [r7, #32]
 800c090:	b29a      	uxth	r2, r3
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	60da      	str	r2, [r3, #12]
 800c098:	e009      	b.n	800c0ae <UART_SetConfig+0x5ce>
 800c09a:	bf00      	nop
 800c09c:	40008000 	.word	0x40008000
 800c0a0:	00f42400 	.word	0x00f42400
 800c0a4:	0800e334 	.word	0x0800e334
      }
      else
      {
        ret = HAL_ERROR;
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c0ca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3730      	adds	r7, #48	@ 0x30
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c0d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b083      	sub	sp, #12
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0e4:	f003 0308 	and.w	r3, r3, #8
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d00a      	beq.n	800c102 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	430a      	orrs	r2, r1
 800c100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c106:	f003 0301 	and.w	r3, r3, #1
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d00a      	beq.n	800c124 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	430a      	orrs	r2, r1
 800c122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c128:	f003 0302 	and.w	r3, r3, #2
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d00a      	beq.n	800c146 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	685b      	ldr	r3, [r3, #4]
 800c136:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	430a      	orrs	r2, r1
 800c144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c14a:	f003 0304 	and.w	r3, r3, #4
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d00a      	beq.n	800c168 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	430a      	orrs	r2, r1
 800c166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c16c:	f003 0310 	and.w	r3, r3, #16
 800c170:	2b00      	cmp	r3, #0
 800c172:	d00a      	beq.n	800c18a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	689b      	ldr	r3, [r3, #8]
 800c17a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	430a      	orrs	r2, r1
 800c188:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c18e:	f003 0320 	and.w	r3, r3, #32
 800c192:	2b00      	cmp	r3, #0
 800c194:	d00a      	beq.n	800c1ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	430a      	orrs	r2, r1
 800c1aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d01a      	beq.n	800c1ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	430a      	orrs	r2, r1
 800c1cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c1d6:	d10a      	bne.n	800c1ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	430a      	orrs	r2, r1
 800c1ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d00a      	beq.n	800c210 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	430a      	orrs	r2, r1
 800c20e:	605a      	str	r2, [r3, #4]
  }
}
 800c210:	bf00      	nop
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b098      	sub	sp, #96	@ 0x60
 800c220:	af02      	add	r7, sp, #8
 800c222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c22c:	f7f9 faee 	bl	800580c <HAL_GetTick>
 800c230:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f003 0308 	and.w	r3, r3, #8
 800c23c:	2b08      	cmp	r3, #8
 800c23e:	d12f      	bne.n	800c2a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c240:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c244:	9300      	str	r3, [sp, #0]
 800c246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c248:	2200      	movs	r2, #0
 800c24a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 f88e 	bl	800c370 <UART_WaitOnFlagUntilTimeout>
 800c254:	4603      	mov	r3, r0
 800c256:	2b00      	cmp	r3, #0
 800c258:	d022      	beq.n	800c2a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c262:	e853 3f00 	ldrex	r3, [r3]
 800c266:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c26a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c26e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	461a      	mov	r2, r3
 800c276:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c278:	647b      	str	r3, [r7, #68]	@ 0x44
 800c27a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c27c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c27e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c280:	e841 2300 	strex	r3, r2, [r1]
 800c284:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d1e6      	bne.n	800c25a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2220      	movs	r2, #32
 800c290:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2200      	movs	r2, #0
 800c298:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c29c:	2303      	movs	r3, #3
 800c29e:	e063      	b.n	800c368 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f003 0304 	and.w	r3, r3, #4
 800c2aa:	2b04      	cmp	r3, #4
 800c2ac:	d149      	bne.n	800c342 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c2ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c2b2:	9300      	str	r3, [sp, #0]
 800c2b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 f857 	bl	800c370 <UART_WaitOnFlagUntilTimeout>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d03c      	beq.n	800c342 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d0:	e853 3f00 	ldrex	r3, [r3]
 800c2d4:	623b      	str	r3, [r7, #32]
   return(result);
 800c2d6:	6a3b      	ldr	r3, [r7, #32]
 800c2d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c2dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c2ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2ee:	e841 2300 	strex	r3, r2, [r1]
 800c2f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d1e6      	bne.n	800c2c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	3308      	adds	r3, #8
 800c300:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	e853 3f00 	ldrex	r3, [r3]
 800c308:	60fb      	str	r3, [r7, #12]
   return(result);
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f023 0301 	bic.w	r3, r3, #1
 800c310:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	3308      	adds	r3, #8
 800c318:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c31a:	61fa      	str	r2, [r7, #28]
 800c31c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c31e:	69b9      	ldr	r1, [r7, #24]
 800c320:	69fa      	ldr	r2, [r7, #28]
 800c322:	e841 2300 	strex	r3, r2, [r1]
 800c326:	617b      	str	r3, [r7, #20]
   return(result);
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d1e5      	bne.n	800c2fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2220      	movs	r2, #32
 800c332:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2200      	movs	r2, #0
 800c33a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c33e:	2303      	movs	r3, #3
 800c340:	e012      	b.n	800c368 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2220      	movs	r2, #32
 800c346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2220      	movs	r2, #32
 800c34e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2200      	movs	r2, #0
 800c356:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2200      	movs	r2, #0
 800c35c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2200      	movs	r2, #0
 800c362:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c366:	2300      	movs	r3, #0
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3758      	adds	r7, #88	@ 0x58
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	603b      	str	r3, [r7, #0]
 800c37c:	4613      	mov	r3, r2
 800c37e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c380:	e04f      	b.n	800c422 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c388:	d04b      	beq.n	800c422 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c38a:	f7f9 fa3f 	bl	800580c <HAL_GetTick>
 800c38e:	4602      	mov	r2, r0
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	1ad3      	subs	r3, r2, r3
 800c394:	69ba      	ldr	r2, [r7, #24]
 800c396:	429a      	cmp	r2, r3
 800c398:	d302      	bcc.n	800c3a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d101      	bne.n	800c3a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c3a0:	2303      	movs	r3, #3
 800c3a2:	e04e      	b.n	800c442 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f003 0304 	and.w	r3, r3, #4
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d037      	beq.n	800c422 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	2b80      	cmp	r3, #128	@ 0x80
 800c3b6:	d034      	beq.n	800c422 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	2b40      	cmp	r3, #64	@ 0x40
 800c3bc:	d031      	beq.n	800c422 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	69db      	ldr	r3, [r3, #28]
 800c3c4:	f003 0308 	and.w	r3, r3, #8
 800c3c8:	2b08      	cmp	r3, #8
 800c3ca:	d110      	bne.n	800c3ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2208      	movs	r2, #8
 800c3d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f000 f920 	bl	800c61a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2208      	movs	r2, #8
 800c3de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	e029      	b.n	800c442 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	69db      	ldr	r3, [r3, #28]
 800c3f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c3f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c3fc:	d111      	bne.n	800c422 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c406:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c408:	68f8      	ldr	r0, [r7, #12]
 800c40a:	f000 f906 	bl	800c61a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2220      	movs	r2, #32
 800c412:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2200      	movs	r2, #0
 800c41a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c41e:	2303      	movs	r3, #3
 800c420:	e00f      	b.n	800c442 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	69da      	ldr	r2, [r3, #28]
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	4013      	ands	r3, r2
 800c42c:	68ba      	ldr	r2, [r7, #8]
 800c42e:	429a      	cmp	r2, r3
 800c430:	bf0c      	ite	eq
 800c432:	2301      	moveq	r3, #1
 800c434:	2300      	movne	r3, #0
 800c436:	b2db      	uxtb	r3, r3
 800c438:	461a      	mov	r2, r3
 800c43a:	79fb      	ldrb	r3, [r7, #7]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d0a0      	beq.n	800c382 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c440:	2300      	movs	r3, #0
}
 800c442:	4618      	mov	r0, r3
 800c444:	3710      	adds	r7, #16
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
	...

0800c44c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b096      	sub	sp, #88	@ 0x58
 800c450:	af00      	add	r7, sp, #0
 800c452:	60f8      	str	r0, [r7, #12]
 800c454:	60b9      	str	r1, [r7, #8]
 800c456:	4613      	mov	r3, r2
 800c458:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	68ba      	ldr	r2, [r7, #8]
 800c45e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	88fa      	ldrh	r2, [r7, #6]
 800c464:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2200      	movs	r2, #0
 800c46c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2222      	movs	r2, #34	@ 0x22
 800c474:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d02d      	beq.n	800c4de <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c488:	4a40      	ldr	r2, [pc, #256]	@ (800c58c <UART_Start_Receive_DMA+0x140>)
 800c48a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c492:	4a3f      	ldr	r2, [pc, #252]	@ (800c590 <UART_Start_Receive_DMA+0x144>)
 800c494:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c49c:	4a3d      	ldr	r2, [pc, #244]	@ (800c594 <UART_Start_Receive_DMA+0x148>)
 800c49e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	3324      	adds	r3, #36	@ 0x24
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4bc:	461a      	mov	r2, r3
 800c4be:	88fb      	ldrh	r3, [r7, #6]
 800c4c0:	f7fa ffe0 	bl	8007484 <HAL_DMA_Start_IT>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d009      	beq.n	800c4de <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	2210      	movs	r2, #16
 800c4ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2220      	movs	r2, #32
 800c4d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c4da:	2301      	movs	r3, #1
 800c4dc:	e051      	b.n	800c582 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	691b      	ldr	r3, [r3, #16]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d018      	beq.n	800c518 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4ee:	e853 3f00 	ldrex	r3, [r3]
 800c4f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c4fa:	657b      	str	r3, [r7, #84]	@ 0x54
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	461a      	mov	r2, r3
 800c502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c504:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c506:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c508:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c50a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c50c:	e841 2300 	strex	r3, r2, [r1]
 800c510:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c514:	2b00      	cmp	r3, #0
 800c516:	d1e6      	bne.n	800c4e6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	3308      	adds	r3, #8
 800c51e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c522:	e853 3f00 	ldrex	r3, [r3]
 800c526:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c52a:	f043 0301 	orr.w	r3, r3, #1
 800c52e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	3308      	adds	r3, #8
 800c536:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c538:	637a      	str	r2, [r7, #52]	@ 0x34
 800c53a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c53c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c53e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c540:	e841 2300 	strex	r3, r2, [r1]
 800c544:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d1e5      	bne.n	800c518 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	3308      	adds	r3, #8
 800c552:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	e853 3f00 	ldrex	r3, [r3]
 800c55a:	613b      	str	r3, [r7, #16]
   return(result);
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	3308      	adds	r3, #8
 800c56a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c56c:	623a      	str	r2, [r7, #32]
 800c56e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c570:	69f9      	ldr	r1, [r7, #28]
 800c572:	6a3a      	ldr	r2, [r7, #32]
 800c574:	e841 2300 	strex	r3, r2, [r1]
 800c578:	61bb      	str	r3, [r7, #24]
   return(result);
 800c57a:	69bb      	ldr	r3, [r7, #24]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d1e5      	bne.n	800c54c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c580:	2300      	movs	r3, #0
}
 800c582:	4618      	mov	r0, r3
 800c584:	3758      	adds	r7, #88	@ 0x58
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	0800c6e7 	.word	0x0800c6e7
 800c590:	0800c81b 	.word	0x0800c81b
 800c594:	0800c861 	.word	0x0800c861

0800c598 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c598:	b480      	push	{r7}
 800c59a:	b08f      	sub	sp, #60	@ 0x3c
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a6:	6a3b      	ldr	r3, [r7, #32]
 800c5a8:	e853 3f00 	ldrex	r3, [r3]
 800c5ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800c5ae:	69fb      	ldr	r3, [r7, #28]
 800c5b0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c5b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c5c0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c5c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5c6:	e841 2300 	strex	r3, r2, [r1]
 800c5ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d1e6      	bne.n	800c5a0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	3308      	adds	r3, #8
 800c5d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	e853 3f00 	ldrex	r3, [r3]
 800c5e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c5e8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	3308      	adds	r3, #8
 800c5f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5f2:	61ba      	str	r2, [r7, #24]
 800c5f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f6:	6979      	ldr	r1, [r7, #20]
 800c5f8:	69ba      	ldr	r2, [r7, #24]
 800c5fa:	e841 2300 	strex	r3, r2, [r1]
 800c5fe:	613b      	str	r3, [r7, #16]
   return(result);
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d1e5      	bne.n	800c5d2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2220      	movs	r2, #32
 800c60a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c60e:	bf00      	nop
 800c610:	373c      	adds	r7, #60	@ 0x3c
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr

0800c61a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c61a:	b480      	push	{r7}
 800c61c:	b095      	sub	sp, #84	@ 0x54
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c62a:	e853 3f00 	ldrex	r3, [r3]
 800c62e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c632:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c636:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	461a      	mov	r2, r3
 800c63e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c640:	643b      	str	r3, [r7, #64]	@ 0x40
 800c642:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c644:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c646:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c648:	e841 2300 	strex	r3, r2, [r1]
 800c64c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c650:	2b00      	cmp	r3, #0
 800c652:	d1e6      	bne.n	800c622 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	3308      	adds	r3, #8
 800c65a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c65c:	6a3b      	ldr	r3, [r7, #32]
 800c65e:	e853 3f00 	ldrex	r3, [r3]
 800c662:	61fb      	str	r3, [r7, #28]
   return(result);
 800c664:	69fb      	ldr	r3, [r7, #28]
 800c666:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c66a:	f023 0301 	bic.w	r3, r3, #1
 800c66e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	3308      	adds	r3, #8
 800c676:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c678:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c67a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c67c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c67e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c680:	e841 2300 	strex	r3, r2, [r1]
 800c684:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d1e3      	bne.n	800c654 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c690:	2b01      	cmp	r3, #1
 800c692:	d118      	bne.n	800c6c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	e853 3f00 	ldrex	r3, [r3]
 800c6a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	f023 0310 	bic.w	r3, r3, #16
 800c6a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6b2:	61bb      	str	r3, [r7, #24]
 800c6b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6b6:	6979      	ldr	r1, [r7, #20]
 800c6b8:	69ba      	ldr	r2, [r7, #24]
 800c6ba:	e841 2300 	strex	r3, r2, [r1]
 800c6be:	613b      	str	r3, [r7, #16]
   return(result);
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d1e6      	bne.n	800c694 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2220      	movs	r2, #32
 800c6ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c6da:	bf00      	nop
 800c6dc:	3754      	adds	r7, #84	@ 0x54
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr

0800c6e6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	b09c      	sub	sp, #112	@ 0x70
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6f2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f003 0320 	and.w	r3, r3, #32
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d171      	bne.n	800c7e6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c704:	2200      	movs	r2, #0
 800c706:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c70a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c712:	e853 3f00 	ldrex	r3, [r3]
 800c716:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c718:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c71a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c71e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c720:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	461a      	mov	r2, r3
 800c726:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c728:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c72a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c72c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c72e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c730:	e841 2300 	strex	r3, r2, [r1]
 800c734:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c736:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d1e6      	bne.n	800c70a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c73c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	3308      	adds	r3, #8
 800c742:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c746:	e853 3f00 	ldrex	r3, [r3]
 800c74a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c74c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c74e:	f023 0301 	bic.w	r3, r3, #1
 800c752:	667b      	str	r3, [r7, #100]	@ 0x64
 800c754:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	3308      	adds	r3, #8
 800c75a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c75c:	647a      	str	r2, [r7, #68]	@ 0x44
 800c75e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c760:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c762:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c764:	e841 2300 	strex	r3, r2, [r1]
 800c768:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c76a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d1e5      	bne.n	800c73c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c770:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	3308      	adds	r3, #8
 800c776:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c77a:	e853 3f00 	ldrex	r3, [r3]
 800c77e:	623b      	str	r3, [r7, #32]
   return(result);
 800c780:	6a3b      	ldr	r3, [r7, #32]
 800c782:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c786:	663b      	str	r3, [r7, #96]	@ 0x60
 800c788:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	3308      	adds	r3, #8
 800c78e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c790:	633a      	str	r2, [r7, #48]	@ 0x30
 800c792:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c794:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c796:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c798:	e841 2300 	strex	r3, r2, [r1]
 800c79c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c79e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d1e5      	bne.n	800c770 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c7a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7a6:	2220      	movs	r2, #32
 800c7a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d118      	bne.n	800c7e6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	e853 3f00 	ldrex	r3, [r3]
 800c7c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	f023 0310 	bic.w	r3, r3, #16
 800c7c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c7ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c7d2:	61fb      	str	r3, [r7, #28]
 800c7d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7d6:	69b9      	ldr	r1, [r7, #24]
 800c7d8:	69fa      	ldr	r2, [r7, #28]
 800c7da:	e841 2300 	strex	r3, r2, [r1]
 800c7de:	617b      	str	r3, [r7, #20]
   return(result);
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d1e6      	bne.n	800c7b4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c7e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d109      	bne.n	800c808 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800c7f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c7fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c7fc:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c800:	4611      	mov	r1, r2
 800c802:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c804:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c806:	e004      	b.n	800c812 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800c808:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c80a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c80e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c810:	4798      	blx	r3
}
 800c812:	bf00      	nop
 800c814:	3770      	adds	r7, #112	@ 0x70
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}

0800c81a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c81a:	b580      	push	{r7, lr}
 800c81c:	b084      	sub	sp, #16
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c826:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2201      	movs	r2, #1
 800c82c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c832:	2b01      	cmp	r3, #1
 800c834:	d10b      	bne.n	800c84e <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c83c:	68fa      	ldr	r2, [r7, #12]
 800c83e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c842:	0852      	lsrs	r2, r2, #1
 800c844:	b292      	uxth	r2, r2
 800c846:	4611      	mov	r1, r2
 800c848:	68f8      	ldr	r0, [r7, #12]
 800c84a:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c84c:	e004      	b.n	800c858 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c854:	68f8      	ldr	r0, [r7, #12]
 800c856:	4798      	blx	r3
}
 800c858:	bf00      	nop
 800c85a:	3710      	adds	r7, #16
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b086      	sub	sp, #24
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c86c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c874:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c87c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c888:	2b80      	cmp	r3, #128	@ 0x80
 800c88a:	d109      	bne.n	800c8a0 <UART_DMAError+0x40>
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	2b21      	cmp	r3, #33	@ 0x21
 800c890:	d106      	bne.n	800c8a0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	2200      	movs	r2, #0
 800c896:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c89a:	6978      	ldr	r0, [r7, #20]
 800c89c:	f7ff fe7c 	bl	800c598 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	689b      	ldr	r3, [r3, #8]
 800c8a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8aa:	2b40      	cmp	r3, #64	@ 0x40
 800c8ac:	d109      	bne.n	800c8c2 <UART_DMAError+0x62>
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	2b22      	cmp	r3, #34	@ 0x22
 800c8b2:	d106      	bne.n	800c8c2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c8bc:	6978      	ldr	r0, [r7, #20]
 800c8be:	f7ff feac 	bl	800c61a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8c8:	f043 0210 	orr.w	r2, r3, #16
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c8d8:	6978      	ldr	r0, [r7, #20]
 800c8da:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c8dc:	bf00      	nop
 800c8de:	3718      	adds	r7, #24
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c900:	68f8      	ldr	r0, [r7, #12]
 800c902:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c904:	bf00      	nop
 800c906:	3710      	adds	r7, #16
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b088      	sub	sp, #32
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	e853 3f00 	ldrex	r3, [r3]
 800c920:	60bb      	str	r3, [r7, #8]
   return(result);
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c928:	61fb      	str	r3, [r7, #28]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	461a      	mov	r2, r3
 800c930:	69fb      	ldr	r3, [r7, #28]
 800c932:	61bb      	str	r3, [r7, #24]
 800c934:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c936:	6979      	ldr	r1, [r7, #20]
 800c938:	69ba      	ldr	r2, [r7, #24]
 800c93a:	e841 2300 	strex	r3, r2, [r1]
 800c93e:	613b      	str	r3, [r7, #16]
   return(result);
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d1e6      	bne.n	800c914 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2220      	movs	r2, #32
 800c94a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2200      	movs	r2, #0
 800c952:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c95e:	bf00      	nop
 800c960:	3720      	adds	r7, #32
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}

0800c966 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c966:	b480      	push	{r7}
 800c968:	b083      	sub	sp, #12
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c96e:	bf00      	nop
 800c970:	370c      	adds	r7, #12
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr

0800c97a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c97a:	b480      	push	{r7}
 800c97c:	b083      	sub	sp, #12
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c982:	bf00      	nop
 800c984:	370c      	adds	r7, #12
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr

0800c98e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c98e:	b480      	push	{r7}
 800c990:	b083      	sub	sp, #12
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c996:	bf00      	nop
 800c998:	370c      	adds	r7, #12
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr

0800c9a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c9a2:	b480      	push	{r7}
 800c9a4:	b085      	sub	sp, #20
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d101      	bne.n	800c9b8 <HAL_UARTEx_DisableFifoMode+0x16>
 800c9b4:	2302      	movs	r3, #2
 800c9b6:	e027      	b.n	800ca08 <HAL_UARTEx_DisableFifoMode+0x66>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2224      	movs	r2, #36	@ 0x24
 800c9c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	681a      	ldr	r2, [r3, #0]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f022 0201 	bic.w	r2, r2, #1
 800c9de:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c9e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	68fa      	ldr	r2, [r7, #12]
 800c9f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2220      	movs	r2, #32
 800c9fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2200      	movs	r2, #0
 800ca02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca06:	2300      	movs	r3, #0
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3714      	adds	r7, #20
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr

0800ca14 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b084      	sub	sp, #16
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d101      	bne.n	800ca2c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ca28:	2302      	movs	r3, #2
 800ca2a:	e02d      	b.n	800ca88 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2201      	movs	r2, #1
 800ca30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2224      	movs	r2, #36	@ 0x24
 800ca38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f022 0201 	bic.w	r2, r2, #1
 800ca52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	689b      	ldr	r3, [r3, #8]
 800ca5a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	683a      	ldr	r2, [r7, #0]
 800ca64:	430a      	orrs	r2, r1
 800ca66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f000 f84f 	bl	800cb0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	68fa      	ldr	r2, [r7, #12]
 800ca74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2220      	movs	r2, #32
 800ca7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2200      	movs	r2, #0
 800ca82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca86:	2300      	movs	r3, #0
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3710      	adds	r7, #16
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d101      	bne.n	800caa8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800caa4:	2302      	movs	r3, #2
 800caa6:	e02d      	b.n	800cb04 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2201      	movs	r2, #1
 800caac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2224      	movs	r2, #36	@ 0x24
 800cab4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f022 0201 	bic.w	r2, r2, #1
 800cace:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	689b      	ldr	r3, [r3, #8]
 800cad6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	683a      	ldr	r2, [r7, #0]
 800cae0:	430a      	orrs	r2, r1
 800cae2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f000 f811 	bl	800cb0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	68fa      	ldr	r2, [r7, #12]
 800caf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2220      	movs	r2, #32
 800caf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2200      	movs	r2, #0
 800cafe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cb02:	2300      	movs	r3, #0
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3710      	adds	r7, #16
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b085      	sub	sp, #20
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d108      	bne.n	800cb2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2201      	movs	r2, #1
 800cb20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2201      	movs	r2, #1
 800cb28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cb2c:	e031      	b.n	800cb92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cb2e:	2308      	movs	r3, #8
 800cb30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cb32:	2308      	movs	r3, #8
 800cb34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	689b      	ldr	r3, [r3, #8]
 800cb3c:	0e5b      	lsrs	r3, r3, #25
 800cb3e:	b2db      	uxtb	r3, r3
 800cb40:	f003 0307 	and.w	r3, r3, #7
 800cb44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	689b      	ldr	r3, [r3, #8]
 800cb4c:	0f5b      	lsrs	r3, r3, #29
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	f003 0307 	and.w	r3, r3, #7
 800cb54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cb56:	7bbb      	ldrb	r3, [r7, #14]
 800cb58:	7b3a      	ldrb	r2, [r7, #12]
 800cb5a:	4911      	ldr	r1, [pc, #68]	@ (800cba0 <UARTEx_SetNbDataToProcess+0x94>)
 800cb5c:	5c8a      	ldrb	r2, [r1, r2]
 800cb5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cb62:	7b3a      	ldrb	r2, [r7, #12]
 800cb64:	490f      	ldr	r1, [pc, #60]	@ (800cba4 <UARTEx_SetNbDataToProcess+0x98>)
 800cb66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cb68:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb6c:	b29a      	uxth	r2, r3
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb74:	7bfb      	ldrb	r3, [r7, #15]
 800cb76:	7b7a      	ldrb	r2, [r7, #13]
 800cb78:	4909      	ldr	r1, [pc, #36]	@ (800cba0 <UARTEx_SetNbDataToProcess+0x94>)
 800cb7a:	5c8a      	ldrb	r2, [r1, r2]
 800cb7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cb80:	7b7a      	ldrb	r2, [r7, #13]
 800cb82:	4908      	ldr	r1, [pc, #32]	@ (800cba4 <UARTEx_SetNbDataToProcess+0x98>)
 800cb84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb86:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb8a:	b29a      	uxth	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cb92:	bf00      	nop
 800cb94:	3714      	adds	r7, #20
 800cb96:	46bd      	mov	sp, r7
 800cb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9c:	4770      	bx	lr
 800cb9e:	bf00      	nop
 800cba0:	0800e34c 	.word	0x0800e34c
 800cba4:	0800e354 	.word	0x0800e354

0800cba8 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b08b      	sub	sp, #44	@ 0x2c
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	60f8      	str	r0, [r7, #12]
 800cbb0:	60b9      	str	r1, [r7, #8]
 800cbb2:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	881b      	ldrh	r3, [r3, #0]
 800cbca:	461a      	mov	r2, r3
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	885b      	ldrh	r3, [r3, #2]
 800cbd0:	fb02 f303 	mul.w	r3, r2, r3
 800cbd4:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800cbda:	e013      	b.n	800cc04 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800cbdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbde:	1d1a      	adds	r2, r3, #4
 800cbe0:	627a      	str	r2, [r7, #36]	@ 0x24
 800cbe2:	ed93 7a00 	vldr	s14, [r3]
 800cbe6:	6a3b      	ldr	r3, [r7, #32]
 800cbe8:	1d1a      	adds	r2, r3, #4
 800cbea:	623a      	str	r2, [r7, #32]
 800cbec:	edd3 7a00 	vldr	s15, [r3]
 800cbf0:	69fb      	ldr	r3, [r7, #28]
 800cbf2:	1d1a      	adds	r2, r3, #4
 800cbf4:	61fa      	str	r2, [r7, #28]
 800cbf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cbfa:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800cbfe:	69bb      	ldr	r3, [r7, #24]
 800cc00:	3b01      	subs	r3, #1
 800cc02:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800cc04:	69bb      	ldr	r3, [r7, #24]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d1e8      	bne.n	800cbdc <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800cc0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	372c      	adds	r7, #44	@ 0x2c
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr

0800cc1e <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800cc1e:	b480      	push	{r7}
 800cc20:	b085      	sub	sp, #20
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	60f8      	str	r0, [r7, #12]
 800cc26:	607b      	str	r3, [r7, #4]
 800cc28:	460b      	mov	r3, r1
 800cc2a:	817b      	strh	r3, [r7, #10]
 800cc2c:	4613      	mov	r3, r2
 800cc2e:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	897a      	ldrh	r2, [r7, #10]
 800cc34:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	893a      	ldrh	r2, [r7, #8]
 800cc3a:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	687a      	ldr	r2, [r7, #4]
 800cc40:	605a      	str	r2, [r3, #4]
}
 800cc42:	bf00      	nop
 800cc44:	3714      	adds	r7, #20
 800cc46:	46bd      	mov	sp, r7
 800cc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4c:	4770      	bx	lr

0800cc4e <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800cc4e:	b480      	push	{r7}
 800cc50:	b0bb      	sub	sp, #236	@ 0xec
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	6078      	str	r0, [r7, #4]
 800cc56:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	881b      	ldrh	r3, [r3, #0]
 800cc68:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	885b      	ldrh	r3, [r3, #2]
 800cc6e:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800cc70:	f04f 0300 	mov.w	r3, #0
 800cc74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cc78:	f04f 0300 	mov.w	r3, #0
 800cc7c:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800cc7e:	2300      	movs	r3, #0
 800cc80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800cc84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800cc8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800cc90:	e03b      	b.n	800cd0a <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800cc92:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cc94:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800cc98:	1ad3      	subs	r3, r2, r3
 800cc9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800cc9e:	e00c      	b.n	800ccba <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800cca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cca4:	1d1a      	adds	r2, r3, #4
 800cca6:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ccaa:	f04f 0200 	mov.w	r2, #0
 800ccae:	601a      	str	r2, [r3, #0]
        j--;
 800ccb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ccb4:	3b01      	subs	r3, #1
 800ccb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ccba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d1ee      	bne.n	800cca0 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800ccc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccc6:	1d1a      	adds	r2, r3, #4
 800ccc8:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800cccc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ccd0:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800ccd2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ccd6:	3b01      	subs	r3, #1
 800ccd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ccdc:	e00c      	b.n	800ccf8 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800ccde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cce2:	1d1a      	adds	r2, r3, #4
 800cce4:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800cce8:	f04f 0200 	mov.w	r2, #0
 800ccec:	601a      	str	r2, [r3, #0]
        j--;
 800ccee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ccf2:	3b01      	subs	r3, #1
 800ccf4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ccf8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d1ee      	bne.n	800ccde <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800cd00:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800cd04:	3b01      	subs	r3, #1
 800cd06:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800cd0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d1bf      	bne.n	800cc92 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800cd12:	2300      	movs	r3, #0
 800cd14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cd18:	e2c7      	b.n	800d2aa <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800cd1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cd1e:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	685a      	ldr	r2, [r3, #4]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	885b      	ldrh	r3, [r3, #2]
 800cd28:	3301      	adds	r3, #1
 800cd2a:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800cd2e:	fb01 f303 	mul.w	r3, r1, r3
 800cd32:	009b      	lsls	r3, r3, #2
 800cd34:	4413      	add	r3, r2
 800cd36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800cd3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800cd44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cd48:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800cd4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cd50:	3301      	adds	r3, #1
 800cd52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cd56:	e02c      	b.n	800cdb2 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	685a      	ldr	r2, [r3, #4]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	885b      	ldrh	r3, [r3, #2]
 800cd60:	4619      	mov	r1, r3
 800cd62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cd66:	fb03 f101 	mul.w	r1, r3, r1
 800cd6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cd6e:	440b      	add	r3, r1
 800cd70:	009b      	lsls	r3, r3, #2
 800cd72:	4413      	add	r3, r2
 800cd74:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800cd78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800cd80:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800cd84:	eeb0 7ae7 	vabs.f32	s14, s15
 800cd88:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cd8c:	eef0 7ae7 	vabs.f32	s15, s15
 800cd90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd98:	dd06      	ble.n	800cda8 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800cd9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cd9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800cda2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cda4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800cda8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cdac:	3301      	adds	r3, #1
 800cdae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cdb2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800cdb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d3cd      	bcc.n	800cd58 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800cdbc:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cdc0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cdc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdc8:	f000 809b 	beq.w	800cf02 <arm_mat_inverse_f32+0x2b4>
 800cdcc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cdd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	f000 8094 	beq.w	800cf02 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	885b      	ldrh	r3, [r3, #2]
 800cdee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cdf0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cdf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cdf6:	1ad3      	subs	r3, r2, r3
 800cdf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cdfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cdfc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cdfe:	fb03 f202 	mul.w	r2, r3, r2
 800ce02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ce06:	4413      	add	r3, r2
 800ce08:	009b      	lsls	r3, r3, #2
 800ce0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800ce0e:	4413      	add	r3, r2
 800ce10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ce14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce16:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ce1a:	fb03 f202 	mul.w	r2, r3, r2
 800ce1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ce22:	4413      	add	r3, r2
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ce2a:	4413      	add	r3, r2
 800ce2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ce30:	2300      	movs	r3, #0
 800ce32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ce36:	e018      	b.n	800ce6a <arm_mat_inverse_f32+0x21c>
 800ce38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ce40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ce44:	1d1a      	adds	r2, r3, #4
 800ce46:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800ce4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ce4e:	6812      	ldr	r2, [r2, #0]
 800ce50:	601a      	str	r2, [r3, #0]
 800ce52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ce56:	1d1a      	adds	r2, r3, #4
 800ce58:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800ce5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ce5e:	601a      	str	r2, [r3, #0]
 800ce60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ce64:	3301      	adds	r3, #1
 800ce66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ce6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800ce6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce70:	429a      	cmp	r2, r3
 800ce72:	dbe1      	blt.n	800ce38 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	885b      	ldrh	r3, [r3, #2]
 800ce88:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce8c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce90:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ce92:	fb02 f303 	mul.w	r3, r2, r3
 800ce96:	009b      	lsls	r3, r3, #2
 800ce98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ce9c:	4413      	add	r3, r2
 800ce9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cea2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cea4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cea8:	fb02 f303 	mul.w	r3, r2, r3
 800ceac:	009b      	lsls	r3, r3, #2
 800ceae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ceb2:	4413      	add	r3, r2
 800ceb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ceb8:	2300      	movs	r3, #0
 800ceba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cebe:	e018      	b.n	800cef2 <arm_mat_inverse_f32+0x2a4>
 800cec0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cec8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cecc:	1d1a      	adds	r2, r3, #4
 800cece:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ced2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ced6:	6812      	ldr	r2, [r2, #0]
 800ced8:	601a      	str	r2, [r3, #0]
 800ceda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cede:	1d1a      	adds	r2, r3, #4
 800cee0:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cee4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cee6:	601a      	str	r2, [r3, #0]
 800cee8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ceec:	3301      	adds	r3, #1
 800ceee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cef2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cef6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cef8:	429a      	cmp	r2, r3
 800cefa:	dbe1      	blt.n	800cec0 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800cefc:	2301      	movs	r3, #1
 800cefe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800cf02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800cf06:	2b01      	cmp	r3, #1
 800cf08:	d009      	beq.n	800cf1e <arm_mat_inverse_f32+0x2d0>
 800cf0a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cf0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf16:	d102      	bne.n	800cf1e <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800cf18:	f06f 0304 	mvn.w	r3, #4
 800cf1c:	e208      	b.n	800d330 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800cf1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf22:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800cf26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf2a:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	885b      	ldrh	r3, [r3, #2]
 800cf3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cf42:	1ad3      	subs	r3, r2, r3
 800cf44:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf48:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cf4a:	fb03 f202 	mul.w	r2, r3, r2
 800cf4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cf52:	4413      	add	r3, r2
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800cf5a:	4413      	add	r3, r2
 800cf5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cf60:	2300      	movs	r3, #0
 800cf62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cf66:	e011      	b.n	800cf8c <arm_mat_inverse_f32+0x33e>
 800cf68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cf6c:	1d1a      	adds	r2, r3, #4
 800cf6e:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800cf72:	ed93 7a00 	vldr	s14, [r3]
 800cf76:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cf7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf7e:	edc3 7a00 	vstr	s15, [r3]
 800cf82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cf86:	3301      	adds	r3, #1
 800cf88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cf8c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800cf90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf92:	429a      	cmp	r2, r3
 800cf94:	dbe8      	blt.n	800cf68 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	885b      	ldrh	r3, [r3, #2]
 800cfa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cfa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cfa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfaa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cfac:	fb02 f303 	mul.w	r3, r2, r3
 800cfb0:	009b      	lsls	r3, r3, #2
 800cfb2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800cfb6:	4413      	add	r3, r2
 800cfb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cfc2:	e011      	b.n	800cfe8 <arm_mat_inverse_f32+0x39a>
 800cfc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cfc8:	1d1a      	adds	r2, r3, #4
 800cfca:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800cfce:	ed93 7a00 	vldr	s14, [r3]
 800cfd2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cfd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfda:	edc3 7a00 	vstr	s15, [r3]
 800cfde:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cfe8:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800cfec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfee:	429a      	cmp	r2, r3
 800cff0:	dbe8      	blt.n	800cfc4 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800cff2:	2300      	movs	r3, #0
 800cff4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800cff8:	e0ae      	b.n	800d158 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	685a      	ldr	r2, [r3, #4]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	885b      	ldrh	r3, [r3, #2]
 800d002:	4619      	mov	r1, r3
 800d004:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d008:	fb03 f101 	mul.w	r1, r3, r1
 800d00c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d010:	440b      	add	r3, r1
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	4413      	add	r3, r2
 800d016:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800d01a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	685b      	ldr	r3, [r3, #4]
 800d028:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	885b      	ldrh	r3, [r3, #2]
 800d038:	617b      	str	r3, [r7, #20]
 800d03a:	697a      	ldr	r2, [r7, #20]
 800d03c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d040:	1ad3      	subs	r3, r2, r3
 800d042:	613b      	str	r3, [r7, #16]
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800d04a:	fb03 f202 	mul.w	r2, r3, r2
 800d04e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d052:	4413      	add	r3, r2
 800d054:	009b      	lsls	r3, r3, #2
 800d056:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800d05a:	4413      	add	r3, r2
 800d05c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d064:	fb03 f202 	mul.w	r2, r3, r2
 800d068:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d06c:	4413      	add	r3, r2
 800d06e:	009b      	lsls	r3, r3, #2
 800d070:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800d074:	4413      	add	r3, r2
 800d076:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d07a:	2300      	movs	r3, #0
 800d07c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d080:	e01a      	b.n	800d0b8 <arm_mat_inverse_f32+0x46a>
 800d082:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d086:	1d1a      	adds	r2, r3, #4
 800d088:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d08c:	ed93 7a00 	vldr	s14, [r3]
 800d090:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d094:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d098:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d09c:	1d1a      	adds	r2, r3, #4
 800d09e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800d0a2:	ed93 7a00 	vldr	s14, [r3]
 800d0a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0aa:	edc3 7a00 	vstr	s15, [r3]
 800d0ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d0b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	dbdf      	blt.n	800d082 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	685b      	ldr	r3, [r3, #4]
 800d0c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	885b      	ldrh	r3, [r3, #2]
 800d0d6:	60fb      	str	r3, [r7, #12]
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	60bb      	str	r3, [r7, #8]
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800d0e2:	fb02 f303 	mul.w	r3, r2, r3
 800d0e6:	009b      	lsls	r3, r3, #2
 800d0e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d0ec:	4413      	add	r3, r2
 800d0ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d0f6:	fb02 f303 	mul.w	r3, r2, r3
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d100:	4413      	add	r3, r2
 800d102:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d106:	2300      	movs	r3, #0
 800d108:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d10c:	e01a      	b.n	800d144 <arm_mat_inverse_f32+0x4f6>
 800d10e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d112:	1d1a      	adds	r2, r3, #4
 800d114:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d118:	ed93 7a00 	vldr	s14, [r3]
 800d11c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d120:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d124:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d128:	1d1a      	adds	r2, r3, #4
 800d12a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800d12e:	ed93 7a00 	vldr	s14, [r3]
 800d132:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d136:	edc3 7a00 	vstr	s15, [r3]
 800d13a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d13e:	3301      	adds	r3, #1
 800d140:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d144:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	429a      	cmp	r2, r3
 800d14c:	dbdf      	blt.n	800d10e <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800d14e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d152:	3301      	adds	r3, #1
 800d154:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d158:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800d15c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d15e:	429a      	cmp	r2, r3
 800d160:	f4ff af4b 	bcc.w	800cffa <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800d164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d166:	3301      	adds	r3, #1
 800d168:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d16c:	e092      	b.n	800d294 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	685a      	ldr	r2, [r3, #4]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	885b      	ldrh	r3, [r3, #2]
 800d176:	4619      	mov	r1, r3
 800d178:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d17c:	fb03 f101 	mul.w	r1, r3, r1
 800d180:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d184:	440b      	add	r3, r1
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	4413      	add	r3, r2
 800d18a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800d18e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	685b      	ldr	r3, [r3, #4]
 800d1a2:	677b      	str	r3, [r7, #116]	@ 0x74
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	885b      	ldrh	r3, [r3, #2]
 800d1a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d1b0:	1ad3      	subs	r3, r2, r3
 800d1b2:	623b      	str	r3, [r7, #32]
 800d1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800d1ba:	fb03 f202 	mul.w	r2, r3, r2
 800d1be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d1c2:	4413      	add	r3, r2
 800d1c4:	009b      	lsls	r3, r3, #2
 800d1c6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800d1c8:	4413      	add	r3, r2
 800d1ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d1d0:	fb03 f202 	mul.w	r2, r3, r2
 800d1d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d1d8:	4413      	add	r3, r2
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800d1de:	4413      	add	r3, r2
 800d1e0:	677b      	str	r3, [r7, #116]	@ 0x74
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d1e6:	e014      	b.n	800d212 <arm_mat_inverse_f32+0x5c4>
 800d1e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d1ea:	1d1a      	adds	r2, r3, #4
 800d1ec:	677a      	str	r2, [r7, #116]	@ 0x74
 800d1ee:	ed93 7a00 	vldr	s14, [r3]
 800d1f2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d1f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d1fc:	1d1a      	adds	r2, r3, #4
 800d1fe:	67ba      	str	r2, [r7, #120]	@ 0x78
 800d200:	ed93 7a00 	vldr	s14, [r3]
 800d204:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d208:	edc3 7a00 	vstr	s15, [r3]
 800d20c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d20e:	3301      	adds	r3, #1
 800d210:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d212:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d214:	6a3b      	ldr	r3, [r7, #32]
 800d216:	429a      	cmp	r2, r3
 800d218:	dbe6      	blt.n	800d1e8 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	685b      	ldr	r3, [r3, #4]
 800d21e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	885b      	ldrh	r3, [r3, #2]
 800d22a:	61fb      	str	r3, [r7, #28]
 800d22c:	69fb      	ldr	r3, [r7, #28]
 800d22e:	61bb      	str	r3, [r7, #24]
 800d230:	69fb      	ldr	r3, [r7, #28]
 800d232:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800d236:	fb02 f303 	mul.w	r3, r2, r3
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d23e:	4413      	add	r3, r2
 800d240:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d242:	69fb      	ldr	r3, [r7, #28]
 800d244:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d246:	fb02 f303 	mul.w	r3, r2, r3
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d24e:	4413      	add	r3, r2
 800d250:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d252:	2300      	movs	r3, #0
 800d254:	673b      	str	r3, [r7, #112]	@ 0x70
 800d256:	e014      	b.n	800d282 <arm_mat_inverse_f32+0x634>
 800d258:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d25a:	1d1a      	adds	r2, r3, #4
 800d25c:	66ba      	str	r2, [r7, #104]	@ 0x68
 800d25e:	ed93 7a00 	vldr	s14, [r3]
 800d262:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d26a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d26c:	1d1a      	adds	r2, r3, #4
 800d26e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d270:	ed93 7a00 	vldr	s14, [r3]
 800d274:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d278:	edc3 7a00 	vstr	s15, [r3]
 800d27c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d27e:	3301      	adds	r3, #1
 800d280:	673b      	str	r3, [r7, #112]	@ 0x70
 800d282:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d284:	69bb      	ldr	r3, [r7, #24]
 800d286:	429a      	cmp	r2, r3
 800d288:	dbe6      	blt.n	800d258 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800d28a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d28e:	3301      	adds	r3, #1
 800d290:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d294:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800d298:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d29a:	429a      	cmp	r2, r3
 800d29c:	f4ff af67 	bcc.w	800d16e <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800d2a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d2aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d2ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	f4ff ad32 	bcc.w	800cd1a <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800d2bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	d033      	beq.n	800d32c <arm_mat_inverse_f32+0x6de>
 800d2c4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d2c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2d0:	d12c      	bne.n	800d32c <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800d2d8:	2300      	movs	r3, #0
 800d2da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d2de:	e010      	b.n	800d302 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800d2e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d2e4:	009b      	lsls	r3, r3, #2
 800d2e6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d2e8:	4413      	add	r3, r2
 800d2ea:	edd3 7a00 	vldr	s15, [r3]
 800d2ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2f6:	d10d      	bne.n	800d314 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800d2f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d302:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d304:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d306:	fb02 f303 	mul.w	r3, r2, r3
 800d30a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800d30e:	429a      	cmp	r2, r3
 800d310:	d3e6      	bcc.n	800d2e0 <arm_mat_inverse_f32+0x692>
 800d312:	e000      	b.n	800d316 <arm_mat_inverse_f32+0x6c8>
            break;
 800d314:	bf00      	nop
      }

      if (i == numRows * numCols)
 800d316:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d318:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d31a:	fb02 f303 	mul.w	r3, r2, r3
 800d31e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800d322:	429a      	cmp	r2, r3
 800d324:	d102      	bne.n	800d32c <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800d326:	23fb      	movs	r3, #251	@ 0xfb
 800d328:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800d32c:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800d330:	4618      	mov	r0, r3
 800d332:	37ec      	adds	r7, #236	@ 0xec
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b093      	sub	sp, #76	@ 0x4c
 800d340:	af00      	add	r7, sp, #0
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	60b9      	str	r1, [r7, #8]
 800d346:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	685b      	ldr	r3, [r3, #4]
 800d352:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	685b      	ldr	r3, [r3, #4]
 800d35e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	881b      	ldrh	r3, [r3, #0]
 800d36a:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	885b      	ldrh	r3, [r3, #2]
 800d370:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	885b      	ldrh	r3, [r3, #2]
 800d376:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800d378:	2300      	movs	r3, #0
 800d37a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d37c:	8b7b      	ldrh	r3, [r7, #26]
 800d37e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800d380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	69fa      	ldr	r2, [r7, #28]
 800d386:	4413      	add	r3, r2
 800d388:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800d38a:	8b3b      	ldrh	r3, [r7, #24]
 800d38c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800d394:	f04f 0300 	mov.w	r3, #0
 800d398:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800d39a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d39c:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800d39e:	8afb      	ldrh	r3, [r7, #22]
 800d3a0:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800d3a2:	e017      	b.n	800d3d4 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800d3a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d3a6:	1d1a      	adds	r2, r3, #4
 800d3a8:	647a      	str	r2, [r7, #68]	@ 0x44
 800d3aa:	ed93 7a00 	vldr	s14, [r3]
 800d3ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3b0:	edd3 7a00 	vldr	s15, [r3]
 800d3b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3b8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800d3bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3c0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800d3c4:	8b3b      	ldrh	r3, [r7, #24]
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d3ca:	4413      	add	r3, r2
 800d3cc:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800d3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d0:	3b01      	subs	r3, #1
 800d3d2:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800d3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d1e4      	bne.n	800d3a4 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800d3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3dc:	1d1a      	adds	r2, r3, #4
 800d3de:	63ba      	str	r2, [r7, #56]	@ 0x38
 800d3e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d3e2:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800d3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e6:	3b01      	subs	r3, #1
 800d3e8:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800d3ea:	8b3a      	ldrh	r2, [r7, #24]
 800d3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ee:	1ad3      	subs	r3, r2, r3
 800d3f0:	009b      	lsls	r3, r3, #2
 800d3f2:	6a3a      	ldr	r2, [r7, #32]
 800d3f4:	4413      	add	r3, r2
 800d3f6:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800d3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d1ca      	bne.n	800d394 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800d3fe:	8b3b      	ldrh	r3, [r7, #24]
 800d400:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d402:	4413      	add	r3, r2
 800d404:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800d406:	8afb      	ldrh	r3, [r7, #22]
 800d408:	009b      	lsls	r3, r3, #2
 800d40a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d40c:	4413      	add	r3, r2
 800d40e:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800d410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d412:	3b01      	subs	r3, #1
 800d414:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800d416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d1b1      	bne.n	800d380 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d41c:	2300      	movs	r3, #0
 800d41e:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800d420:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800d424:	4618      	mov	r0, r3
 800d426:	374c      	adds	r7, #76	@ 0x4c
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr

0800d430 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800d430:	b480      	push	{r7}
 800d432:	b08b      	sub	sp, #44	@ 0x2c
 800d434:	af00      	add	r7, sp, #0
 800d436:	60f8      	str	r0, [r7, #12]
 800d438:	ed87 0a02 	vstr	s0, [r7, #8]
 800d43c:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	881b      	ldrh	r3, [r3, #0]
 800d44e:	461a      	mov	r2, r3
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	885b      	ldrh	r3, [r3, #2]
 800d454:	fb02 f303 	mul.w	r3, r2, r3
 800d458:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800d45a:	69bb      	ldr	r3, [r7, #24]
 800d45c:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800d45e:	e010      	b.n	800d482 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800d460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d462:	1d1a      	adds	r2, r3, #4
 800d464:	627a      	str	r2, [r7, #36]	@ 0x24
 800d466:	ed93 7a00 	vldr	s14, [r3]
 800d46a:	6a3b      	ldr	r3, [r7, #32]
 800d46c:	1d1a      	adds	r2, r3, #4
 800d46e:	623a      	str	r2, [r7, #32]
 800d470:	edd7 7a02 	vldr	s15, [r7, #8]
 800d474:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d478:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800d47c:	69fb      	ldr	r3, [r7, #28]
 800d47e:	3b01      	subs	r3, #1
 800d480:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800d482:	69fb      	ldr	r3, [r7, #28]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d1eb      	bne.n	800d460 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d488:	2300      	movs	r3, #0
 800d48a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800d48c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d490:	4618      	mov	r0, r3
 800d492:	372c      	adds	r7, #44	@ 0x2c
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr

0800d49c <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b08b      	sub	sp, #44	@ 0x2c
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	60f8      	str	r0, [r7, #12]
 800d4a4:	60b9      	str	r1, [r7, #8]
 800d4a6:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	685b      	ldr	r3, [r3, #4]
 800d4ac:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	685b      	ldr	r3, [r3, #4]
 800d4b2:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	685b      	ldr	r3, [r3, #4]
 800d4b8:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	881b      	ldrh	r3, [r3, #0]
 800d4be:	461a      	mov	r2, r3
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	885b      	ldrh	r3, [r3, #2]
 800d4c4:	fb02 f303 	mul.w	r3, r2, r3
 800d4c8:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800d4ce:	e013      	b.n	800d4f8 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800d4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d2:	1d1a      	adds	r2, r3, #4
 800d4d4:	627a      	str	r2, [r7, #36]	@ 0x24
 800d4d6:	ed93 7a00 	vldr	s14, [r3]
 800d4da:	6a3b      	ldr	r3, [r7, #32]
 800d4dc:	1d1a      	adds	r2, r3, #4
 800d4de:	623a      	str	r2, [r7, #32]
 800d4e0:	edd3 7a00 	vldr	s15, [r3]
 800d4e4:	69fb      	ldr	r3, [r7, #28]
 800d4e6:	1d1a      	adds	r2, r3, #4
 800d4e8:	61fa      	str	r2, [r7, #28]
 800d4ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4ee:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800d4f2:	69bb      	ldr	r3, [r7, #24]
 800d4f4:	3b01      	subs	r3, #1
 800d4f6:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800d4f8:	69bb      	ldr	r3, [r7, #24]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d1e8      	bne.n	800d4d0 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d4fe:	2300      	movs	r3, #0
 800d500:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800d502:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d506:	4618      	mov	r0, r3
 800d508:	372c      	adds	r7, #44	@ 0x2c
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr

0800d512 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800d512:	b480      	push	{r7}
 800d514:	b08b      	sub	sp, #44	@ 0x2c
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
 800d51a:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	881b      	ldrh	r3, [r3, #0]
 800d52c:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	885b      	ldrh	r3, [r3, #2]
 800d532:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800d534:	89fb      	ldrh	r3, [r7, #14]
 800d536:	61bb      	str	r3, [r7, #24]
 800d538:	2300      	movs	r3, #0
 800d53a:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	009b      	lsls	r3, r3, #2
 800d540:	693a      	ldr	r2, [r7, #16]
 800d542:	4413      	add	r3, r2
 800d544:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800d546:	89bb      	ldrh	r3, [r7, #12]
 800d548:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800d54a:	e00d      	b.n	800d568 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800d54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d54e:	1d1a      	adds	r2, r3, #4
 800d550:	627a      	str	r2, [r7, #36]	@ 0x24
 800d552:	681a      	ldr	r2, [r3, #0]
 800d554:	6a3b      	ldr	r3, [r7, #32]
 800d556:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800d558:	89fb      	ldrh	r3, [r7, #14]
 800d55a:	009b      	lsls	r3, r3, #2
 800d55c:	6a3a      	ldr	r2, [r7, #32]
 800d55e:	4413      	add	r3, r2
 800d560:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800d562:	69fb      	ldr	r3, [r7, #28]
 800d564:	3b01      	subs	r3, #1
 800d566:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800d568:	69fb      	ldr	r3, [r7, #28]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d1ee      	bne.n	800d54c <arm_mat_trans_f32+0x3a>
      }

      i++;
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	3301      	adds	r3, #1
 800d572:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800d574:	69bb      	ldr	r3, [r7, #24]
 800d576:	3b01      	subs	r3, #1
 800d578:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800d57a:	69bb      	ldr	r3, [r7, #24]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d1dd      	bne.n	800d53c <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d580:	2300      	movs	r3, #0
 800d582:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800d584:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d588:	4618      	mov	r0, r3
 800d58a:	372c      	adds	r7, #44	@ 0x2c
 800d58c:	46bd      	mov	sp, r7
 800d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d592:	4770      	bx	lr

0800d594 <malloc>:
 800d594:	4b02      	ldr	r3, [pc, #8]	@ (800d5a0 <malloc+0xc>)
 800d596:	4601      	mov	r1, r0
 800d598:	6818      	ldr	r0, [r3, #0]
 800d59a:	f000 b825 	b.w	800d5e8 <_malloc_r>
 800d59e:	bf00      	nop
 800d5a0:	20000174 	.word	0x20000174

0800d5a4 <sbrk_aligned>:
 800d5a4:	b570      	push	{r4, r5, r6, lr}
 800d5a6:	4e0f      	ldr	r6, [pc, #60]	@ (800d5e4 <sbrk_aligned+0x40>)
 800d5a8:	460c      	mov	r4, r1
 800d5aa:	6831      	ldr	r1, [r6, #0]
 800d5ac:	4605      	mov	r5, r0
 800d5ae:	b911      	cbnz	r1, 800d5b6 <sbrk_aligned+0x12>
 800d5b0:	f000 f8ae 	bl	800d710 <_sbrk_r>
 800d5b4:	6030      	str	r0, [r6, #0]
 800d5b6:	4621      	mov	r1, r4
 800d5b8:	4628      	mov	r0, r5
 800d5ba:	f000 f8a9 	bl	800d710 <_sbrk_r>
 800d5be:	1c43      	adds	r3, r0, #1
 800d5c0:	d103      	bne.n	800d5ca <sbrk_aligned+0x26>
 800d5c2:	f04f 34ff 	mov.w	r4, #4294967295
 800d5c6:	4620      	mov	r0, r4
 800d5c8:	bd70      	pop	{r4, r5, r6, pc}
 800d5ca:	1cc4      	adds	r4, r0, #3
 800d5cc:	f024 0403 	bic.w	r4, r4, #3
 800d5d0:	42a0      	cmp	r0, r4
 800d5d2:	d0f8      	beq.n	800d5c6 <sbrk_aligned+0x22>
 800d5d4:	1a21      	subs	r1, r4, r0
 800d5d6:	4628      	mov	r0, r5
 800d5d8:	f000 f89a 	bl	800d710 <_sbrk_r>
 800d5dc:	3001      	adds	r0, #1
 800d5de:	d1f2      	bne.n	800d5c6 <sbrk_aligned+0x22>
 800d5e0:	e7ef      	b.n	800d5c2 <sbrk_aligned+0x1e>
 800d5e2:	bf00      	nop
 800d5e4:	200021c0 	.word	0x200021c0

0800d5e8 <_malloc_r>:
 800d5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5ec:	1ccd      	adds	r5, r1, #3
 800d5ee:	f025 0503 	bic.w	r5, r5, #3
 800d5f2:	3508      	adds	r5, #8
 800d5f4:	2d0c      	cmp	r5, #12
 800d5f6:	bf38      	it	cc
 800d5f8:	250c      	movcc	r5, #12
 800d5fa:	2d00      	cmp	r5, #0
 800d5fc:	4606      	mov	r6, r0
 800d5fe:	db01      	blt.n	800d604 <_malloc_r+0x1c>
 800d600:	42a9      	cmp	r1, r5
 800d602:	d904      	bls.n	800d60e <_malloc_r+0x26>
 800d604:	230c      	movs	r3, #12
 800d606:	6033      	str	r3, [r6, #0]
 800d608:	2000      	movs	r0, #0
 800d60a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d60e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d6e4 <_malloc_r+0xfc>
 800d612:	f000 f869 	bl	800d6e8 <__malloc_lock>
 800d616:	f8d8 3000 	ldr.w	r3, [r8]
 800d61a:	461c      	mov	r4, r3
 800d61c:	bb44      	cbnz	r4, 800d670 <_malloc_r+0x88>
 800d61e:	4629      	mov	r1, r5
 800d620:	4630      	mov	r0, r6
 800d622:	f7ff ffbf 	bl	800d5a4 <sbrk_aligned>
 800d626:	1c43      	adds	r3, r0, #1
 800d628:	4604      	mov	r4, r0
 800d62a:	d158      	bne.n	800d6de <_malloc_r+0xf6>
 800d62c:	f8d8 4000 	ldr.w	r4, [r8]
 800d630:	4627      	mov	r7, r4
 800d632:	2f00      	cmp	r7, #0
 800d634:	d143      	bne.n	800d6be <_malloc_r+0xd6>
 800d636:	2c00      	cmp	r4, #0
 800d638:	d04b      	beq.n	800d6d2 <_malloc_r+0xea>
 800d63a:	6823      	ldr	r3, [r4, #0]
 800d63c:	4639      	mov	r1, r7
 800d63e:	4630      	mov	r0, r6
 800d640:	eb04 0903 	add.w	r9, r4, r3
 800d644:	f000 f864 	bl	800d710 <_sbrk_r>
 800d648:	4581      	cmp	r9, r0
 800d64a:	d142      	bne.n	800d6d2 <_malloc_r+0xea>
 800d64c:	6821      	ldr	r1, [r4, #0]
 800d64e:	1a6d      	subs	r5, r5, r1
 800d650:	4629      	mov	r1, r5
 800d652:	4630      	mov	r0, r6
 800d654:	f7ff ffa6 	bl	800d5a4 <sbrk_aligned>
 800d658:	3001      	adds	r0, #1
 800d65a:	d03a      	beq.n	800d6d2 <_malloc_r+0xea>
 800d65c:	6823      	ldr	r3, [r4, #0]
 800d65e:	442b      	add	r3, r5
 800d660:	6023      	str	r3, [r4, #0]
 800d662:	f8d8 3000 	ldr.w	r3, [r8]
 800d666:	685a      	ldr	r2, [r3, #4]
 800d668:	bb62      	cbnz	r2, 800d6c4 <_malloc_r+0xdc>
 800d66a:	f8c8 7000 	str.w	r7, [r8]
 800d66e:	e00f      	b.n	800d690 <_malloc_r+0xa8>
 800d670:	6822      	ldr	r2, [r4, #0]
 800d672:	1b52      	subs	r2, r2, r5
 800d674:	d420      	bmi.n	800d6b8 <_malloc_r+0xd0>
 800d676:	2a0b      	cmp	r2, #11
 800d678:	d917      	bls.n	800d6aa <_malloc_r+0xc2>
 800d67a:	1961      	adds	r1, r4, r5
 800d67c:	42a3      	cmp	r3, r4
 800d67e:	6025      	str	r5, [r4, #0]
 800d680:	bf18      	it	ne
 800d682:	6059      	strne	r1, [r3, #4]
 800d684:	6863      	ldr	r3, [r4, #4]
 800d686:	bf08      	it	eq
 800d688:	f8c8 1000 	streq.w	r1, [r8]
 800d68c:	5162      	str	r2, [r4, r5]
 800d68e:	604b      	str	r3, [r1, #4]
 800d690:	4630      	mov	r0, r6
 800d692:	f000 f82f 	bl	800d6f4 <__malloc_unlock>
 800d696:	f104 000b 	add.w	r0, r4, #11
 800d69a:	1d23      	adds	r3, r4, #4
 800d69c:	f020 0007 	bic.w	r0, r0, #7
 800d6a0:	1ac2      	subs	r2, r0, r3
 800d6a2:	bf1c      	itt	ne
 800d6a4:	1a1b      	subne	r3, r3, r0
 800d6a6:	50a3      	strne	r3, [r4, r2]
 800d6a8:	e7af      	b.n	800d60a <_malloc_r+0x22>
 800d6aa:	6862      	ldr	r2, [r4, #4]
 800d6ac:	42a3      	cmp	r3, r4
 800d6ae:	bf0c      	ite	eq
 800d6b0:	f8c8 2000 	streq.w	r2, [r8]
 800d6b4:	605a      	strne	r2, [r3, #4]
 800d6b6:	e7eb      	b.n	800d690 <_malloc_r+0xa8>
 800d6b8:	4623      	mov	r3, r4
 800d6ba:	6864      	ldr	r4, [r4, #4]
 800d6bc:	e7ae      	b.n	800d61c <_malloc_r+0x34>
 800d6be:	463c      	mov	r4, r7
 800d6c0:	687f      	ldr	r7, [r7, #4]
 800d6c2:	e7b6      	b.n	800d632 <_malloc_r+0x4a>
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	42a3      	cmp	r3, r4
 800d6ca:	d1fb      	bne.n	800d6c4 <_malloc_r+0xdc>
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	6053      	str	r3, [r2, #4]
 800d6d0:	e7de      	b.n	800d690 <_malloc_r+0xa8>
 800d6d2:	230c      	movs	r3, #12
 800d6d4:	6033      	str	r3, [r6, #0]
 800d6d6:	4630      	mov	r0, r6
 800d6d8:	f000 f80c 	bl	800d6f4 <__malloc_unlock>
 800d6dc:	e794      	b.n	800d608 <_malloc_r+0x20>
 800d6de:	6005      	str	r5, [r0, #0]
 800d6e0:	e7d6      	b.n	800d690 <_malloc_r+0xa8>
 800d6e2:	bf00      	nop
 800d6e4:	200021c4 	.word	0x200021c4

0800d6e8 <__malloc_lock>:
 800d6e8:	4801      	ldr	r0, [pc, #4]	@ (800d6f0 <__malloc_lock+0x8>)
 800d6ea:	f000 b84b 	b.w	800d784 <__retarget_lock_acquire_recursive>
 800d6ee:	bf00      	nop
 800d6f0:	20002304 	.word	0x20002304

0800d6f4 <__malloc_unlock>:
 800d6f4:	4801      	ldr	r0, [pc, #4]	@ (800d6fc <__malloc_unlock+0x8>)
 800d6f6:	f000 b846 	b.w	800d786 <__retarget_lock_release_recursive>
 800d6fa:	bf00      	nop
 800d6fc:	20002304 	.word	0x20002304

0800d700 <memset>:
 800d700:	4402      	add	r2, r0
 800d702:	4603      	mov	r3, r0
 800d704:	4293      	cmp	r3, r2
 800d706:	d100      	bne.n	800d70a <memset+0xa>
 800d708:	4770      	bx	lr
 800d70a:	f803 1b01 	strb.w	r1, [r3], #1
 800d70e:	e7f9      	b.n	800d704 <memset+0x4>

0800d710 <_sbrk_r>:
 800d710:	b538      	push	{r3, r4, r5, lr}
 800d712:	4d06      	ldr	r5, [pc, #24]	@ (800d72c <_sbrk_r+0x1c>)
 800d714:	2300      	movs	r3, #0
 800d716:	4604      	mov	r4, r0
 800d718:	4608      	mov	r0, r1
 800d71a:	602b      	str	r3, [r5, #0]
 800d71c:	f7f7 f94a 	bl	80049b4 <_sbrk>
 800d720:	1c43      	adds	r3, r0, #1
 800d722:	d102      	bne.n	800d72a <_sbrk_r+0x1a>
 800d724:	682b      	ldr	r3, [r5, #0]
 800d726:	b103      	cbz	r3, 800d72a <_sbrk_r+0x1a>
 800d728:	6023      	str	r3, [r4, #0]
 800d72a:	bd38      	pop	{r3, r4, r5, pc}
 800d72c:	20002300 	.word	0x20002300

0800d730 <__errno>:
 800d730:	4b01      	ldr	r3, [pc, #4]	@ (800d738 <__errno+0x8>)
 800d732:	6818      	ldr	r0, [r3, #0]
 800d734:	4770      	bx	lr
 800d736:	bf00      	nop
 800d738:	20000174 	.word	0x20000174

0800d73c <__libc_init_array>:
 800d73c:	b570      	push	{r4, r5, r6, lr}
 800d73e:	4d0d      	ldr	r5, [pc, #52]	@ (800d774 <__libc_init_array+0x38>)
 800d740:	4c0d      	ldr	r4, [pc, #52]	@ (800d778 <__libc_init_array+0x3c>)
 800d742:	1b64      	subs	r4, r4, r5
 800d744:	10a4      	asrs	r4, r4, #2
 800d746:	2600      	movs	r6, #0
 800d748:	42a6      	cmp	r6, r4
 800d74a:	d109      	bne.n	800d760 <__libc_init_array+0x24>
 800d74c:	4d0b      	ldr	r5, [pc, #44]	@ (800d77c <__libc_init_array+0x40>)
 800d74e:	4c0c      	ldr	r4, [pc, #48]	@ (800d780 <__libc_init_array+0x44>)
 800d750:	f000 fdb0 	bl	800e2b4 <_init>
 800d754:	1b64      	subs	r4, r4, r5
 800d756:	10a4      	asrs	r4, r4, #2
 800d758:	2600      	movs	r6, #0
 800d75a:	42a6      	cmp	r6, r4
 800d75c:	d105      	bne.n	800d76a <__libc_init_array+0x2e>
 800d75e:	bd70      	pop	{r4, r5, r6, pc}
 800d760:	f855 3b04 	ldr.w	r3, [r5], #4
 800d764:	4798      	blx	r3
 800d766:	3601      	adds	r6, #1
 800d768:	e7ee      	b.n	800d748 <__libc_init_array+0xc>
 800d76a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d76e:	4798      	blx	r3
 800d770:	3601      	adds	r6, #1
 800d772:	e7f2      	b.n	800d75a <__libc_init_array+0x1e>
 800d774:	0800e734 	.word	0x0800e734
 800d778:	0800e734 	.word	0x0800e734
 800d77c:	0800e734 	.word	0x0800e734
 800d780:	0800e738 	.word	0x0800e738

0800d784 <__retarget_lock_acquire_recursive>:
 800d784:	4770      	bx	lr

0800d786 <__retarget_lock_release_recursive>:
 800d786:	4770      	bx	lr

0800d788 <sqrtf>:
 800d788:	b508      	push	{r3, lr}
 800d78a:	ed2d 8b02 	vpush	{d8}
 800d78e:	eeb0 8a40 	vmov.f32	s16, s0
 800d792:	f000 f8a1 	bl	800d8d8 <__ieee754_sqrtf>
 800d796:	eeb4 8a48 	vcmp.f32	s16, s16
 800d79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d79e:	d60c      	bvs.n	800d7ba <sqrtf+0x32>
 800d7a0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d7c0 <sqrtf+0x38>
 800d7a4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ac:	d505      	bpl.n	800d7ba <sqrtf+0x32>
 800d7ae:	f7ff ffbf 	bl	800d730 <__errno>
 800d7b2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d7b6:	2321      	movs	r3, #33	@ 0x21
 800d7b8:	6003      	str	r3, [r0, #0]
 800d7ba:	ecbd 8b02 	vpop	{d8}
 800d7be:	bd08      	pop	{r3, pc}
 800d7c0:	00000000 	.word	0x00000000

0800d7c4 <cosf>:
 800d7c4:	ee10 3a10 	vmov	r3, s0
 800d7c8:	b507      	push	{r0, r1, r2, lr}
 800d7ca:	4a1e      	ldr	r2, [pc, #120]	@ (800d844 <cosf+0x80>)
 800d7cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d806      	bhi.n	800d7e2 <cosf+0x1e>
 800d7d4:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800d848 <cosf+0x84>
 800d7d8:	b003      	add	sp, #12
 800d7da:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7de:	f000 b87f 	b.w	800d8e0 <__kernel_cosf>
 800d7e2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d7e6:	d304      	bcc.n	800d7f2 <cosf+0x2e>
 800d7e8:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d7ec:	b003      	add	sp, #12
 800d7ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800d7f2:	4668      	mov	r0, sp
 800d7f4:	f000 f914 	bl	800da20 <__ieee754_rem_pio2f>
 800d7f8:	f000 0003 	and.w	r0, r0, #3
 800d7fc:	2801      	cmp	r0, #1
 800d7fe:	d009      	beq.n	800d814 <cosf+0x50>
 800d800:	2802      	cmp	r0, #2
 800d802:	d010      	beq.n	800d826 <cosf+0x62>
 800d804:	b9b0      	cbnz	r0, 800d834 <cosf+0x70>
 800d806:	eddd 0a01 	vldr	s1, [sp, #4]
 800d80a:	ed9d 0a00 	vldr	s0, [sp]
 800d80e:	f000 f867 	bl	800d8e0 <__kernel_cosf>
 800d812:	e7eb      	b.n	800d7ec <cosf+0x28>
 800d814:	eddd 0a01 	vldr	s1, [sp, #4]
 800d818:	ed9d 0a00 	vldr	s0, [sp]
 800d81c:	f000 f8b8 	bl	800d990 <__kernel_sinf>
 800d820:	eeb1 0a40 	vneg.f32	s0, s0
 800d824:	e7e2      	b.n	800d7ec <cosf+0x28>
 800d826:	eddd 0a01 	vldr	s1, [sp, #4]
 800d82a:	ed9d 0a00 	vldr	s0, [sp]
 800d82e:	f000 f857 	bl	800d8e0 <__kernel_cosf>
 800d832:	e7f5      	b.n	800d820 <cosf+0x5c>
 800d834:	eddd 0a01 	vldr	s1, [sp, #4]
 800d838:	ed9d 0a00 	vldr	s0, [sp]
 800d83c:	2001      	movs	r0, #1
 800d83e:	f000 f8a7 	bl	800d990 <__kernel_sinf>
 800d842:	e7d3      	b.n	800d7ec <cosf+0x28>
 800d844:	3f490fd8 	.word	0x3f490fd8
 800d848:	00000000 	.word	0x00000000

0800d84c <sinf>:
 800d84c:	ee10 3a10 	vmov	r3, s0
 800d850:	b507      	push	{r0, r1, r2, lr}
 800d852:	4a1f      	ldr	r2, [pc, #124]	@ (800d8d0 <sinf+0x84>)
 800d854:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d858:	4293      	cmp	r3, r2
 800d85a:	d807      	bhi.n	800d86c <sinf+0x20>
 800d85c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800d8d4 <sinf+0x88>
 800d860:	2000      	movs	r0, #0
 800d862:	b003      	add	sp, #12
 800d864:	f85d eb04 	ldr.w	lr, [sp], #4
 800d868:	f000 b892 	b.w	800d990 <__kernel_sinf>
 800d86c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d870:	d304      	bcc.n	800d87c <sinf+0x30>
 800d872:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d876:	b003      	add	sp, #12
 800d878:	f85d fb04 	ldr.w	pc, [sp], #4
 800d87c:	4668      	mov	r0, sp
 800d87e:	f000 f8cf 	bl	800da20 <__ieee754_rem_pio2f>
 800d882:	f000 0003 	and.w	r0, r0, #3
 800d886:	2801      	cmp	r0, #1
 800d888:	d00a      	beq.n	800d8a0 <sinf+0x54>
 800d88a:	2802      	cmp	r0, #2
 800d88c:	d00f      	beq.n	800d8ae <sinf+0x62>
 800d88e:	b9c0      	cbnz	r0, 800d8c2 <sinf+0x76>
 800d890:	eddd 0a01 	vldr	s1, [sp, #4]
 800d894:	ed9d 0a00 	vldr	s0, [sp]
 800d898:	2001      	movs	r0, #1
 800d89a:	f000 f879 	bl	800d990 <__kernel_sinf>
 800d89e:	e7ea      	b.n	800d876 <sinf+0x2a>
 800d8a0:	eddd 0a01 	vldr	s1, [sp, #4]
 800d8a4:	ed9d 0a00 	vldr	s0, [sp]
 800d8a8:	f000 f81a 	bl	800d8e0 <__kernel_cosf>
 800d8ac:	e7e3      	b.n	800d876 <sinf+0x2a>
 800d8ae:	eddd 0a01 	vldr	s1, [sp, #4]
 800d8b2:	ed9d 0a00 	vldr	s0, [sp]
 800d8b6:	2001      	movs	r0, #1
 800d8b8:	f000 f86a 	bl	800d990 <__kernel_sinf>
 800d8bc:	eeb1 0a40 	vneg.f32	s0, s0
 800d8c0:	e7d9      	b.n	800d876 <sinf+0x2a>
 800d8c2:	eddd 0a01 	vldr	s1, [sp, #4]
 800d8c6:	ed9d 0a00 	vldr	s0, [sp]
 800d8ca:	f000 f809 	bl	800d8e0 <__kernel_cosf>
 800d8ce:	e7f5      	b.n	800d8bc <sinf+0x70>
 800d8d0:	3f490fd8 	.word	0x3f490fd8
 800d8d4:	00000000 	.word	0x00000000

0800d8d8 <__ieee754_sqrtf>:
 800d8d8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d8dc:	4770      	bx	lr
	...

0800d8e0 <__kernel_cosf>:
 800d8e0:	ee10 3a10 	vmov	r3, s0
 800d8e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d8e8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800d8ec:	eef0 6a40 	vmov.f32	s13, s0
 800d8f0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d8f4:	d204      	bcs.n	800d900 <__kernel_cosf+0x20>
 800d8f6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800d8fa:	ee17 2a90 	vmov	r2, s15
 800d8fe:	b342      	cbz	r2, 800d952 <__kernel_cosf+0x72>
 800d900:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800d904:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800d970 <__kernel_cosf+0x90>
 800d908:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800d974 <__kernel_cosf+0x94>
 800d90c:	4a1a      	ldr	r2, [pc, #104]	@ (800d978 <__kernel_cosf+0x98>)
 800d90e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d912:	4293      	cmp	r3, r2
 800d914:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d97c <__kernel_cosf+0x9c>
 800d918:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d91c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800d980 <__kernel_cosf+0xa0>
 800d920:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d924:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800d984 <__kernel_cosf+0xa4>
 800d928:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d92c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800d988 <__kernel_cosf+0xa8>
 800d930:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d934:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800d938:	ee26 6a07 	vmul.f32	s12, s12, s14
 800d93c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d940:	eee7 0a06 	vfma.f32	s1, s14, s12
 800d944:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d948:	d804      	bhi.n	800d954 <__kernel_cosf+0x74>
 800d94a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d94e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d952:	4770      	bx	lr
 800d954:	4a0d      	ldr	r2, [pc, #52]	@ (800d98c <__kernel_cosf+0xac>)
 800d956:	4293      	cmp	r3, r2
 800d958:	bf9a      	itte	ls
 800d95a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800d95e:	ee07 3a10 	vmovls	s14, r3
 800d962:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800d966:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d96a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d96e:	e7ec      	b.n	800d94a <__kernel_cosf+0x6a>
 800d970:	ad47d74e 	.word	0xad47d74e
 800d974:	310f74f6 	.word	0x310f74f6
 800d978:	3e999999 	.word	0x3e999999
 800d97c:	b493f27c 	.word	0xb493f27c
 800d980:	37d00d01 	.word	0x37d00d01
 800d984:	bab60b61 	.word	0xbab60b61
 800d988:	3d2aaaab 	.word	0x3d2aaaab
 800d98c:	3f480000 	.word	0x3f480000

0800d990 <__kernel_sinf>:
 800d990:	ee10 3a10 	vmov	r3, s0
 800d994:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d998:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800d99c:	d204      	bcs.n	800d9a8 <__kernel_sinf+0x18>
 800d99e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d9a2:	ee17 3a90 	vmov	r3, s15
 800d9a6:	b35b      	cbz	r3, 800da00 <__kernel_sinf+0x70>
 800d9a8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d9ac:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800da04 <__kernel_sinf+0x74>
 800d9b0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800da08 <__kernel_sinf+0x78>
 800d9b4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d9b8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800da0c <__kernel_sinf+0x7c>
 800d9bc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d9c0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800da10 <__kernel_sinf+0x80>
 800d9c4:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d9c8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800da14 <__kernel_sinf+0x84>
 800d9cc:	ee60 6a07 	vmul.f32	s13, s0, s14
 800d9d0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d9d4:	b930      	cbnz	r0, 800d9e4 <__kernel_sinf+0x54>
 800d9d6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800da18 <__kernel_sinf+0x88>
 800d9da:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d9de:	eea6 0a26 	vfma.f32	s0, s12, s13
 800d9e2:	4770      	bx	lr
 800d9e4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d9e8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800d9ec:	eee0 7a86 	vfma.f32	s15, s1, s12
 800d9f0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800d9f4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800da1c <__kernel_sinf+0x8c>
 800d9f8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800d9fc:	ee30 0a60 	vsub.f32	s0, s0, s1
 800da00:	4770      	bx	lr
 800da02:	bf00      	nop
 800da04:	2f2ec9d3 	.word	0x2f2ec9d3
 800da08:	b2d72f34 	.word	0xb2d72f34
 800da0c:	3638ef1b 	.word	0x3638ef1b
 800da10:	b9500d01 	.word	0xb9500d01
 800da14:	3c088889 	.word	0x3c088889
 800da18:	be2aaaab 	.word	0xbe2aaaab
 800da1c:	3e2aaaab 	.word	0x3e2aaaab

0800da20 <__ieee754_rem_pio2f>:
 800da20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da22:	ee10 6a10 	vmov	r6, s0
 800da26:	4b88      	ldr	r3, [pc, #544]	@ (800dc48 <__ieee754_rem_pio2f+0x228>)
 800da28:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800da2c:	429d      	cmp	r5, r3
 800da2e:	b087      	sub	sp, #28
 800da30:	4604      	mov	r4, r0
 800da32:	d805      	bhi.n	800da40 <__ieee754_rem_pio2f+0x20>
 800da34:	2300      	movs	r3, #0
 800da36:	ed80 0a00 	vstr	s0, [r0]
 800da3a:	6043      	str	r3, [r0, #4]
 800da3c:	2000      	movs	r0, #0
 800da3e:	e022      	b.n	800da86 <__ieee754_rem_pio2f+0x66>
 800da40:	4b82      	ldr	r3, [pc, #520]	@ (800dc4c <__ieee754_rem_pio2f+0x22c>)
 800da42:	429d      	cmp	r5, r3
 800da44:	d83a      	bhi.n	800dabc <__ieee754_rem_pio2f+0x9c>
 800da46:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800da4a:	2e00      	cmp	r6, #0
 800da4c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800dc50 <__ieee754_rem_pio2f+0x230>
 800da50:	4a80      	ldr	r2, [pc, #512]	@ (800dc54 <__ieee754_rem_pio2f+0x234>)
 800da52:	f023 030f 	bic.w	r3, r3, #15
 800da56:	dd18      	ble.n	800da8a <__ieee754_rem_pio2f+0x6a>
 800da58:	4293      	cmp	r3, r2
 800da5a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800da5e:	bf09      	itett	eq
 800da60:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800dc58 <__ieee754_rem_pio2f+0x238>
 800da64:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800dc5c <__ieee754_rem_pio2f+0x23c>
 800da68:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800dc60 <__ieee754_rem_pio2f+0x240>
 800da6c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800da70:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800da74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da78:	ed80 7a00 	vstr	s14, [r0]
 800da7c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800da80:	edc0 7a01 	vstr	s15, [r0, #4]
 800da84:	2001      	movs	r0, #1
 800da86:	b007      	add	sp, #28
 800da88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da8a:	4293      	cmp	r3, r2
 800da8c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800da90:	bf09      	itett	eq
 800da92:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800dc58 <__ieee754_rem_pio2f+0x238>
 800da96:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800dc5c <__ieee754_rem_pio2f+0x23c>
 800da9a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800dc60 <__ieee754_rem_pio2f+0x240>
 800da9e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800daa2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800daa6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800daaa:	ed80 7a00 	vstr	s14, [r0]
 800daae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dab2:	edc0 7a01 	vstr	s15, [r0, #4]
 800dab6:	f04f 30ff 	mov.w	r0, #4294967295
 800daba:	e7e4      	b.n	800da86 <__ieee754_rem_pio2f+0x66>
 800dabc:	4b69      	ldr	r3, [pc, #420]	@ (800dc64 <__ieee754_rem_pio2f+0x244>)
 800dabe:	429d      	cmp	r5, r3
 800dac0:	d873      	bhi.n	800dbaa <__ieee754_rem_pio2f+0x18a>
 800dac2:	f000 f8dd 	bl	800dc80 <fabsf>
 800dac6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800dc68 <__ieee754_rem_pio2f+0x248>
 800daca:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800dace:	eee0 7a07 	vfma.f32	s15, s0, s14
 800dad2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dad6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dada:	ee17 0a90 	vmov	r0, s15
 800dade:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800dc50 <__ieee754_rem_pio2f+0x230>
 800dae2:	eea7 0a67 	vfms.f32	s0, s14, s15
 800dae6:	281f      	cmp	r0, #31
 800dae8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800dc5c <__ieee754_rem_pio2f+0x23c>
 800daec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daf0:	eeb1 6a47 	vneg.f32	s12, s14
 800daf4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800daf8:	ee16 1a90 	vmov	r1, s13
 800dafc:	dc09      	bgt.n	800db12 <__ieee754_rem_pio2f+0xf2>
 800dafe:	4a5b      	ldr	r2, [pc, #364]	@ (800dc6c <__ieee754_rem_pio2f+0x24c>)
 800db00:	1e47      	subs	r7, r0, #1
 800db02:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800db06:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800db0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800db0e:	4293      	cmp	r3, r2
 800db10:	d107      	bne.n	800db22 <__ieee754_rem_pio2f+0x102>
 800db12:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800db16:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800db1a:	2a08      	cmp	r2, #8
 800db1c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800db20:	dc14      	bgt.n	800db4c <__ieee754_rem_pio2f+0x12c>
 800db22:	6021      	str	r1, [r4, #0]
 800db24:	ed94 7a00 	vldr	s14, [r4]
 800db28:	ee30 0a47 	vsub.f32	s0, s0, s14
 800db2c:	2e00      	cmp	r6, #0
 800db2e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800db32:	ed84 0a01 	vstr	s0, [r4, #4]
 800db36:	daa6      	bge.n	800da86 <__ieee754_rem_pio2f+0x66>
 800db38:	eeb1 7a47 	vneg.f32	s14, s14
 800db3c:	eeb1 0a40 	vneg.f32	s0, s0
 800db40:	ed84 7a00 	vstr	s14, [r4]
 800db44:	ed84 0a01 	vstr	s0, [r4, #4]
 800db48:	4240      	negs	r0, r0
 800db4a:	e79c      	b.n	800da86 <__ieee754_rem_pio2f+0x66>
 800db4c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800dc58 <__ieee754_rem_pio2f+0x238>
 800db50:	eef0 6a40 	vmov.f32	s13, s0
 800db54:	eee6 6a25 	vfma.f32	s13, s12, s11
 800db58:	ee70 7a66 	vsub.f32	s15, s0, s13
 800db5c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800db60:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800dc60 <__ieee754_rem_pio2f+0x240>
 800db64:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800db68:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800db6c:	ee15 2a90 	vmov	r2, s11
 800db70:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800db74:	1a5b      	subs	r3, r3, r1
 800db76:	2b19      	cmp	r3, #25
 800db78:	dc04      	bgt.n	800db84 <__ieee754_rem_pio2f+0x164>
 800db7a:	edc4 5a00 	vstr	s11, [r4]
 800db7e:	eeb0 0a66 	vmov.f32	s0, s13
 800db82:	e7cf      	b.n	800db24 <__ieee754_rem_pio2f+0x104>
 800db84:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800dc70 <__ieee754_rem_pio2f+0x250>
 800db88:	eeb0 0a66 	vmov.f32	s0, s13
 800db8c:	eea6 0a25 	vfma.f32	s0, s12, s11
 800db90:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800db94:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800dc74 <__ieee754_rem_pio2f+0x254>
 800db98:	eee6 7a25 	vfma.f32	s15, s12, s11
 800db9c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800dba0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800dba4:	ed84 7a00 	vstr	s14, [r4]
 800dba8:	e7bc      	b.n	800db24 <__ieee754_rem_pio2f+0x104>
 800dbaa:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800dbae:	d306      	bcc.n	800dbbe <__ieee754_rem_pio2f+0x19e>
 800dbb0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800dbb4:	edc0 7a01 	vstr	s15, [r0, #4]
 800dbb8:	edc0 7a00 	vstr	s15, [r0]
 800dbbc:	e73e      	b.n	800da3c <__ieee754_rem_pio2f+0x1c>
 800dbbe:	15ea      	asrs	r2, r5, #23
 800dbc0:	3a86      	subs	r2, #134	@ 0x86
 800dbc2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800dbc6:	ee07 3a90 	vmov	s15, r3
 800dbca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800dbce:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800dc78 <__ieee754_rem_pio2f+0x258>
 800dbd2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dbd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dbda:	ed8d 7a03 	vstr	s14, [sp, #12]
 800dbde:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dbe2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800dbe6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dbea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dbee:	ed8d 7a04 	vstr	s14, [sp, #16]
 800dbf2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dbf6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800dbfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbfe:	edcd 7a05 	vstr	s15, [sp, #20]
 800dc02:	d11e      	bne.n	800dc42 <__ieee754_rem_pio2f+0x222>
 800dc04:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800dc08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc0c:	bf0c      	ite	eq
 800dc0e:	2301      	moveq	r3, #1
 800dc10:	2302      	movne	r3, #2
 800dc12:	491a      	ldr	r1, [pc, #104]	@ (800dc7c <__ieee754_rem_pio2f+0x25c>)
 800dc14:	9101      	str	r1, [sp, #4]
 800dc16:	2102      	movs	r1, #2
 800dc18:	9100      	str	r1, [sp, #0]
 800dc1a:	a803      	add	r0, sp, #12
 800dc1c:	4621      	mov	r1, r4
 800dc1e:	f000 f89d 	bl	800dd5c <__kernel_rem_pio2f>
 800dc22:	2e00      	cmp	r6, #0
 800dc24:	f6bf af2f 	bge.w	800da86 <__ieee754_rem_pio2f+0x66>
 800dc28:	edd4 7a00 	vldr	s15, [r4]
 800dc2c:	eef1 7a67 	vneg.f32	s15, s15
 800dc30:	edc4 7a00 	vstr	s15, [r4]
 800dc34:	edd4 7a01 	vldr	s15, [r4, #4]
 800dc38:	eef1 7a67 	vneg.f32	s15, s15
 800dc3c:	edc4 7a01 	vstr	s15, [r4, #4]
 800dc40:	e782      	b.n	800db48 <__ieee754_rem_pio2f+0x128>
 800dc42:	2303      	movs	r3, #3
 800dc44:	e7e5      	b.n	800dc12 <__ieee754_rem_pio2f+0x1f2>
 800dc46:	bf00      	nop
 800dc48:	3f490fd8 	.word	0x3f490fd8
 800dc4c:	4016cbe3 	.word	0x4016cbe3
 800dc50:	3fc90f80 	.word	0x3fc90f80
 800dc54:	3fc90fd0 	.word	0x3fc90fd0
 800dc58:	37354400 	.word	0x37354400
 800dc5c:	37354443 	.word	0x37354443
 800dc60:	2e85a308 	.word	0x2e85a308
 800dc64:	43490f80 	.word	0x43490f80
 800dc68:	3f22f984 	.word	0x3f22f984
 800dc6c:	0800e35c 	.word	0x0800e35c
 800dc70:	2e85a300 	.word	0x2e85a300
 800dc74:	248d3132 	.word	0x248d3132
 800dc78:	43800000 	.word	0x43800000
 800dc7c:	0800e3dc 	.word	0x0800e3dc

0800dc80 <fabsf>:
 800dc80:	ee10 3a10 	vmov	r3, s0
 800dc84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dc88:	ee00 3a10 	vmov	s0, r3
 800dc8c:	4770      	bx	lr
	...

0800dc90 <scalbnf>:
 800dc90:	ee10 3a10 	vmov	r3, s0
 800dc94:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800dc98:	d02b      	beq.n	800dcf2 <scalbnf+0x62>
 800dc9a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800dc9e:	d302      	bcc.n	800dca6 <scalbnf+0x16>
 800dca0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dca4:	4770      	bx	lr
 800dca6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800dcaa:	d123      	bne.n	800dcf4 <scalbnf+0x64>
 800dcac:	4b24      	ldr	r3, [pc, #144]	@ (800dd40 <scalbnf+0xb0>)
 800dcae:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800dd44 <scalbnf+0xb4>
 800dcb2:	4298      	cmp	r0, r3
 800dcb4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800dcb8:	db17      	blt.n	800dcea <scalbnf+0x5a>
 800dcba:	ee10 3a10 	vmov	r3, s0
 800dcbe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800dcc2:	3a19      	subs	r2, #25
 800dcc4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800dcc8:	4288      	cmp	r0, r1
 800dcca:	dd15      	ble.n	800dcf8 <scalbnf+0x68>
 800dccc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800dd48 <scalbnf+0xb8>
 800dcd0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800dd4c <scalbnf+0xbc>
 800dcd4:	ee10 3a10 	vmov	r3, s0
 800dcd8:	eeb0 7a67 	vmov.f32	s14, s15
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	bfb8      	it	lt
 800dce0:	eef0 7a66 	vmovlt.f32	s15, s13
 800dce4:	ee27 0a87 	vmul.f32	s0, s15, s14
 800dce8:	4770      	bx	lr
 800dcea:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800dd50 <scalbnf+0xc0>
 800dcee:	ee27 0a80 	vmul.f32	s0, s15, s0
 800dcf2:	4770      	bx	lr
 800dcf4:	0dd2      	lsrs	r2, r2, #23
 800dcf6:	e7e5      	b.n	800dcc4 <scalbnf+0x34>
 800dcf8:	4410      	add	r0, r2
 800dcfa:	28fe      	cmp	r0, #254	@ 0xfe
 800dcfc:	dce6      	bgt.n	800dccc <scalbnf+0x3c>
 800dcfe:	2800      	cmp	r0, #0
 800dd00:	dd06      	ble.n	800dd10 <scalbnf+0x80>
 800dd02:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800dd06:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800dd0a:	ee00 3a10 	vmov	s0, r3
 800dd0e:	4770      	bx	lr
 800dd10:	f110 0f16 	cmn.w	r0, #22
 800dd14:	da09      	bge.n	800dd2a <scalbnf+0x9a>
 800dd16:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800dd50 <scalbnf+0xc0>
 800dd1a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800dd54 <scalbnf+0xc4>
 800dd1e:	ee10 3a10 	vmov	r3, s0
 800dd22:	eeb0 7a67 	vmov.f32	s14, s15
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	e7d9      	b.n	800dcde <scalbnf+0x4e>
 800dd2a:	3019      	adds	r0, #25
 800dd2c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800dd30:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800dd34:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800dd58 <scalbnf+0xc8>
 800dd38:	ee07 3a90 	vmov	s15, r3
 800dd3c:	e7d7      	b.n	800dcee <scalbnf+0x5e>
 800dd3e:	bf00      	nop
 800dd40:	ffff3cb0 	.word	0xffff3cb0
 800dd44:	4c000000 	.word	0x4c000000
 800dd48:	7149f2ca 	.word	0x7149f2ca
 800dd4c:	f149f2ca 	.word	0xf149f2ca
 800dd50:	0da24260 	.word	0x0da24260
 800dd54:	8da24260 	.word	0x8da24260
 800dd58:	33000000 	.word	0x33000000

0800dd5c <__kernel_rem_pio2f>:
 800dd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd60:	ed2d 8b04 	vpush	{d8-d9}
 800dd64:	b0d9      	sub	sp, #356	@ 0x164
 800dd66:	4690      	mov	r8, r2
 800dd68:	9001      	str	r0, [sp, #4]
 800dd6a:	4ab6      	ldr	r2, [pc, #728]	@ (800e044 <__kernel_rem_pio2f+0x2e8>)
 800dd6c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800dd6e:	f118 0f04 	cmn.w	r8, #4
 800dd72:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800dd76:	460f      	mov	r7, r1
 800dd78:	f103 3bff 	add.w	fp, r3, #4294967295
 800dd7c:	db26      	blt.n	800ddcc <__kernel_rem_pio2f+0x70>
 800dd7e:	f1b8 0203 	subs.w	r2, r8, #3
 800dd82:	bf48      	it	mi
 800dd84:	f108 0204 	addmi.w	r2, r8, #4
 800dd88:	10d2      	asrs	r2, r2, #3
 800dd8a:	1c55      	adds	r5, r2, #1
 800dd8c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800dd8e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800e054 <__kernel_rem_pio2f+0x2f8>
 800dd92:	00e8      	lsls	r0, r5, #3
 800dd94:	eba2 060b 	sub.w	r6, r2, fp
 800dd98:	9002      	str	r0, [sp, #8]
 800dd9a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800dd9e:	eb0a 0c0b 	add.w	ip, sl, fp
 800dda2:	ac1c      	add	r4, sp, #112	@ 0x70
 800dda4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800dda8:	2000      	movs	r0, #0
 800ddaa:	4560      	cmp	r0, ip
 800ddac:	dd10      	ble.n	800ddd0 <__kernel_rem_pio2f+0x74>
 800ddae:	a91c      	add	r1, sp, #112	@ 0x70
 800ddb0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800ddb4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800ddb8:	2600      	movs	r6, #0
 800ddba:	4556      	cmp	r6, sl
 800ddbc:	dc24      	bgt.n	800de08 <__kernel_rem_pio2f+0xac>
 800ddbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ddc2:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800e054 <__kernel_rem_pio2f+0x2f8>
 800ddc6:	4684      	mov	ip, r0
 800ddc8:	2400      	movs	r4, #0
 800ddca:	e016      	b.n	800ddfa <__kernel_rem_pio2f+0x9e>
 800ddcc:	2200      	movs	r2, #0
 800ddce:	e7dc      	b.n	800dd8a <__kernel_rem_pio2f+0x2e>
 800ddd0:	42c6      	cmn	r6, r0
 800ddd2:	bf5d      	ittte	pl
 800ddd4:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800ddd8:	ee07 1a90 	vmovpl	s15, r1
 800dddc:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800dde0:	eef0 7a47 	vmovmi.f32	s15, s14
 800dde4:	ece4 7a01 	vstmia	r4!, {s15}
 800dde8:	3001      	adds	r0, #1
 800ddea:	e7de      	b.n	800ddaa <__kernel_rem_pio2f+0x4e>
 800ddec:	ecfe 6a01 	vldmia	lr!, {s13}
 800ddf0:	ed3c 7a01 	vldmdb	ip!, {s14}
 800ddf4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ddf8:	3401      	adds	r4, #1
 800ddfa:	455c      	cmp	r4, fp
 800ddfc:	ddf6      	ble.n	800ddec <__kernel_rem_pio2f+0x90>
 800ddfe:	ece9 7a01 	vstmia	r9!, {s15}
 800de02:	3601      	adds	r6, #1
 800de04:	3004      	adds	r0, #4
 800de06:	e7d8      	b.n	800ddba <__kernel_rem_pio2f+0x5e>
 800de08:	a908      	add	r1, sp, #32
 800de0a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de0e:	9104      	str	r1, [sp, #16]
 800de10:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800de12:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800e050 <__kernel_rem_pio2f+0x2f4>
 800de16:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800e04c <__kernel_rem_pio2f+0x2f0>
 800de1a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800de1e:	9203      	str	r2, [sp, #12]
 800de20:	4654      	mov	r4, sl
 800de22:	00a2      	lsls	r2, r4, #2
 800de24:	9205      	str	r2, [sp, #20]
 800de26:	aa58      	add	r2, sp, #352	@ 0x160
 800de28:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800de2c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800de30:	a944      	add	r1, sp, #272	@ 0x110
 800de32:	aa08      	add	r2, sp, #32
 800de34:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800de38:	4694      	mov	ip, r2
 800de3a:	4626      	mov	r6, r4
 800de3c:	2e00      	cmp	r6, #0
 800de3e:	dc4c      	bgt.n	800deda <__kernel_rem_pio2f+0x17e>
 800de40:	4628      	mov	r0, r5
 800de42:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800de46:	f7ff ff23 	bl	800dc90 <scalbnf>
 800de4a:	eeb0 8a40 	vmov.f32	s16, s0
 800de4e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800de52:	ee28 0a00 	vmul.f32	s0, s16, s0
 800de56:	f000 f9e9 	bl	800e22c <floorf>
 800de5a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800de5e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800de62:	2d00      	cmp	r5, #0
 800de64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de68:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800de6c:	ee17 9a90 	vmov	r9, s15
 800de70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de74:	ee38 8a67 	vsub.f32	s16, s16, s15
 800de78:	dd41      	ble.n	800defe <__kernel_rem_pio2f+0x1a2>
 800de7a:	f104 3cff 	add.w	ip, r4, #4294967295
 800de7e:	a908      	add	r1, sp, #32
 800de80:	f1c5 0e08 	rsb	lr, r5, #8
 800de84:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800de88:	fa46 f00e 	asr.w	r0, r6, lr
 800de8c:	4481      	add	r9, r0
 800de8e:	fa00 f00e 	lsl.w	r0, r0, lr
 800de92:	1a36      	subs	r6, r6, r0
 800de94:	f1c5 0007 	rsb	r0, r5, #7
 800de98:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800de9c:	4106      	asrs	r6, r0
 800de9e:	2e00      	cmp	r6, #0
 800dea0:	dd3c      	ble.n	800df1c <__kernel_rem_pio2f+0x1c0>
 800dea2:	f04f 0e00 	mov.w	lr, #0
 800dea6:	f109 0901 	add.w	r9, r9, #1
 800deaa:	4670      	mov	r0, lr
 800deac:	4574      	cmp	r4, lr
 800deae:	dc68      	bgt.n	800df82 <__kernel_rem_pio2f+0x226>
 800deb0:	2d00      	cmp	r5, #0
 800deb2:	dd03      	ble.n	800debc <__kernel_rem_pio2f+0x160>
 800deb4:	2d01      	cmp	r5, #1
 800deb6:	d074      	beq.n	800dfa2 <__kernel_rem_pio2f+0x246>
 800deb8:	2d02      	cmp	r5, #2
 800deba:	d07d      	beq.n	800dfb8 <__kernel_rem_pio2f+0x25c>
 800debc:	2e02      	cmp	r6, #2
 800debe:	d12d      	bne.n	800df1c <__kernel_rem_pio2f+0x1c0>
 800dec0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800dec4:	ee30 8a48 	vsub.f32	s16, s0, s16
 800dec8:	b340      	cbz	r0, 800df1c <__kernel_rem_pio2f+0x1c0>
 800deca:	4628      	mov	r0, r5
 800decc:	9306      	str	r3, [sp, #24]
 800dece:	f7ff fedf 	bl	800dc90 <scalbnf>
 800ded2:	9b06      	ldr	r3, [sp, #24]
 800ded4:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ded8:	e020      	b.n	800df1c <__kernel_rem_pio2f+0x1c0>
 800deda:	ee60 7a28 	vmul.f32	s15, s0, s17
 800dede:	3e01      	subs	r6, #1
 800dee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dee4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dee8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800deec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800def0:	ecac 0a01 	vstmia	ip!, {s0}
 800def4:	ed30 0a01 	vldmdb	r0!, {s0}
 800def8:	ee37 0a80 	vadd.f32	s0, s15, s0
 800defc:	e79e      	b.n	800de3c <__kernel_rem_pio2f+0xe0>
 800defe:	d105      	bne.n	800df0c <__kernel_rem_pio2f+0x1b0>
 800df00:	1e60      	subs	r0, r4, #1
 800df02:	a908      	add	r1, sp, #32
 800df04:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800df08:	11f6      	asrs	r6, r6, #7
 800df0a:	e7c8      	b.n	800de9e <__kernel_rem_pio2f+0x142>
 800df0c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800df10:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800df14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df18:	da31      	bge.n	800df7e <__kernel_rem_pio2f+0x222>
 800df1a:	2600      	movs	r6, #0
 800df1c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800df20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df24:	f040 8098 	bne.w	800e058 <__kernel_rem_pio2f+0x2fc>
 800df28:	1e60      	subs	r0, r4, #1
 800df2a:	2200      	movs	r2, #0
 800df2c:	4550      	cmp	r0, sl
 800df2e:	da4b      	bge.n	800dfc8 <__kernel_rem_pio2f+0x26c>
 800df30:	2a00      	cmp	r2, #0
 800df32:	d065      	beq.n	800e000 <__kernel_rem_pio2f+0x2a4>
 800df34:	3c01      	subs	r4, #1
 800df36:	ab08      	add	r3, sp, #32
 800df38:	3d08      	subs	r5, #8
 800df3a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d0f8      	beq.n	800df34 <__kernel_rem_pio2f+0x1d8>
 800df42:	4628      	mov	r0, r5
 800df44:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800df48:	f7ff fea2 	bl	800dc90 <scalbnf>
 800df4c:	1c63      	adds	r3, r4, #1
 800df4e:	aa44      	add	r2, sp, #272	@ 0x110
 800df50:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800e050 <__kernel_rem_pio2f+0x2f4>
 800df54:	0099      	lsls	r1, r3, #2
 800df56:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800df5a:	4623      	mov	r3, r4
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	f280 80a9 	bge.w	800e0b4 <__kernel_rem_pio2f+0x358>
 800df62:	4623      	mov	r3, r4
 800df64:	2b00      	cmp	r3, #0
 800df66:	f2c0 80c7 	blt.w	800e0f8 <__kernel_rem_pio2f+0x39c>
 800df6a:	aa44      	add	r2, sp, #272	@ 0x110
 800df6c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800df70:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800e048 <__kernel_rem_pio2f+0x2ec>
 800df74:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800e054 <__kernel_rem_pio2f+0x2f8>
 800df78:	2000      	movs	r0, #0
 800df7a:	1ae2      	subs	r2, r4, r3
 800df7c:	e0b1      	b.n	800e0e2 <__kernel_rem_pio2f+0x386>
 800df7e:	2602      	movs	r6, #2
 800df80:	e78f      	b.n	800dea2 <__kernel_rem_pio2f+0x146>
 800df82:	f852 1b04 	ldr.w	r1, [r2], #4
 800df86:	b948      	cbnz	r0, 800df9c <__kernel_rem_pio2f+0x240>
 800df88:	b121      	cbz	r1, 800df94 <__kernel_rem_pio2f+0x238>
 800df8a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800df8e:	f842 1c04 	str.w	r1, [r2, #-4]
 800df92:	2101      	movs	r1, #1
 800df94:	f10e 0e01 	add.w	lr, lr, #1
 800df98:	4608      	mov	r0, r1
 800df9a:	e787      	b.n	800deac <__kernel_rem_pio2f+0x150>
 800df9c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800dfa0:	e7f5      	b.n	800df8e <__kernel_rem_pio2f+0x232>
 800dfa2:	f104 3cff 	add.w	ip, r4, #4294967295
 800dfa6:	aa08      	add	r2, sp, #32
 800dfa8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800dfac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800dfb0:	a908      	add	r1, sp, #32
 800dfb2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800dfb6:	e781      	b.n	800debc <__kernel_rem_pio2f+0x160>
 800dfb8:	f104 3cff 	add.w	ip, r4, #4294967295
 800dfbc:	aa08      	add	r2, sp, #32
 800dfbe:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800dfc2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800dfc6:	e7f3      	b.n	800dfb0 <__kernel_rem_pio2f+0x254>
 800dfc8:	a908      	add	r1, sp, #32
 800dfca:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800dfce:	3801      	subs	r0, #1
 800dfd0:	430a      	orrs	r2, r1
 800dfd2:	e7ab      	b.n	800df2c <__kernel_rem_pio2f+0x1d0>
 800dfd4:	3201      	adds	r2, #1
 800dfd6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800dfda:	2e00      	cmp	r6, #0
 800dfdc:	d0fa      	beq.n	800dfd4 <__kernel_rem_pio2f+0x278>
 800dfde:	9905      	ldr	r1, [sp, #20]
 800dfe0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800dfe4:	eb0d 0001 	add.w	r0, sp, r1
 800dfe8:	18e6      	adds	r6, r4, r3
 800dfea:	a91c      	add	r1, sp, #112	@ 0x70
 800dfec:	f104 0c01 	add.w	ip, r4, #1
 800dff0:	384c      	subs	r0, #76	@ 0x4c
 800dff2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800dff6:	4422      	add	r2, r4
 800dff8:	4562      	cmp	r2, ip
 800dffa:	da04      	bge.n	800e006 <__kernel_rem_pio2f+0x2aa>
 800dffc:	4614      	mov	r4, r2
 800dffe:	e710      	b.n	800de22 <__kernel_rem_pio2f+0xc6>
 800e000:	9804      	ldr	r0, [sp, #16]
 800e002:	2201      	movs	r2, #1
 800e004:	e7e7      	b.n	800dfd6 <__kernel_rem_pio2f+0x27a>
 800e006:	9903      	ldr	r1, [sp, #12]
 800e008:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e00c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800e010:	9105      	str	r1, [sp, #20]
 800e012:	ee07 1a90 	vmov	s15, r1
 800e016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e01a:	2400      	movs	r4, #0
 800e01c:	ece6 7a01 	vstmia	r6!, {s15}
 800e020:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800e054 <__kernel_rem_pio2f+0x2f8>
 800e024:	46b1      	mov	r9, r6
 800e026:	455c      	cmp	r4, fp
 800e028:	dd04      	ble.n	800e034 <__kernel_rem_pio2f+0x2d8>
 800e02a:	ece0 7a01 	vstmia	r0!, {s15}
 800e02e:	f10c 0c01 	add.w	ip, ip, #1
 800e032:	e7e1      	b.n	800dff8 <__kernel_rem_pio2f+0x29c>
 800e034:	ecfe 6a01 	vldmia	lr!, {s13}
 800e038:	ed39 7a01 	vldmdb	r9!, {s14}
 800e03c:	3401      	adds	r4, #1
 800e03e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e042:	e7f0      	b.n	800e026 <__kernel_rem_pio2f+0x2ca>
 800e044:	0800e720 	.word	0x0800e720
 800e048:	0800e6f4 	.word	0x0800e6f4
 800e04c:	43800000 	.word	0x43800000
 800e050:	3b800000 	.word	0x3b800000
 800e054:	00000000 	.word	0x00000000
 800e058:	9b02      	ldr	r3, [sp, #8]
 800e05a:	eeb0 0a48 	vmov.f32	s0, s16
 800e05e:	eba3 0008 	sub.w	r0, r3, r8
 800e062:	f7ff fe15 	bl	800dc90 <scalbnf>
 800e066:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800e04c <__kernel_rem_pio2f+0x2f0>
 800e06a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e072:	db19      	blt.n	800e0a8 <__kernel_rem_pio2f+0x34c>
 800e074:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800e050 <__kernel_rem_pio2f+0x2f4>
 800e078:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e07c:	aa08      	add	r2, sp, #32
 800e07e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e082:	3508      	adds	r5, #8
 800e084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e088:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e08c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e090:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e094:	ee10 3a10 	vmov	r3, s0
 800e098:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e09c:	ee17 3a90 	vmov	r3, s15
 800e0a0:	3401      	adds	r4, #1
 800e0a2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e0a6:	e74c      	b.n	800df42 <__kernel_rem_pio2f+0x1e6>
 800e0a8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e0ac:	aa08      	add	r2, sp, #32
 800e0ae:	ee10 3a10 	vmov	r3, s0
 800e0b2:	e7f6      	b.n	800e0a2 <__kernel_rem_pio2f+0x346>
 800e0b4:	a808      	add	r0, sp, #32
 800e0b6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800e0ba:	9001      	str	r0, [sp, #4]
 800e0bc:	ee07 0a90 	vmov	s15, r0
 800e0c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e0c4:	3b01      	subs	r3, #1
 800e0c6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e0ca:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e0ce:	ed62 7a01 	vstmdb	r2!, {s15}
 800e0d2:	e743      	b.n	800df5c <__kernel_rem_pio2f+0x200>
 800e0d4:	ecfc 6a01 	vldmia	ip!, {s13}
 800e0d8:	ecb5 7a01 	vldmia	r5!, {s14}
 800e0dc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e0e0:	3001      	adds	r0, #1
 800e0e2:	4550      	cmp	r0, sl
 800e0e4:	dc01      	bgt.n	800e0ea <__kernel_rem_pio2f+0x38e>
 800e0e6:	4290      	cmp	r0, r2
 800e0e8:	ddf4      	ble.n	800e0d4 <__kernel_rem_pio2f+0x378>
 800e0ea:	a858      	add	r0, sp, #352	@ 0x160
 800e0ec:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800e0f0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800e0f4:	3b01      	subs	r3, #1
 800e0f6:	e735      	b.n	800df64 <__kernel_rem_pio2f+0x208>
 800e0f8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800e0fa:	2b02      	cmp	r3, #2
 800e0fc:	dc09      	bgt.n	800e112 <__kernel_rem_pio2f+0x3b6>
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	dc27      	bgt.n	800e152 <__kernel_rem_pio2f+0x3f6>
 800e102:	d040      	beq.n	800e186 <__kernel_rem_pio2f+0x42a>
 800e104:	f009 0007 	and.w	r0, r9, #7
 800e108:	b059      	add	sp, #356	@ 0x164
 800e10a:	ecbd 8b04 	vpop	{d8-d9}
 800e10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e112:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800e114:	2b03      	cmp	r3, #3
 800e116:	d1f5      	bne.n	800e104 <__kernel_rem_pio2f+0x3a8>
 800e118:	aa30      	add	r2, sp, #192	@ 0xc0
 800e11a:	1f0b      	subs	r3, r1, #4
 800e11c:	4413      	add	r3, r2
 800e11e:	461a      	mov	r2, r3
 800e120:	4620      	mov	r0, r4
 800e122:	2800      	cmp	r0, #0
 800e124:	dc50      	bgt.n	800e1c8 <__kernel_rem_pio2f+0x46c>
 800e126:	4622      	mov	r2, r4
 800e128:	2a01      	cmp	r2, #1
 800e12a:	dc5d      	bgt.n	800e1e8 <__kernel_rem_pio2f+0x48c>
 800e12c:	ab30      	add	r3, sp, #192	@ 0xc0
 800e12e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800e054 <__kernel_rem_pio2f+0x2f8>
 800e132:	440b      	add	r3, r1
 800e134:	2c01      	cmp	r4, #1
 800e136:	dc67      	bgt.n	800e208 <__kernel_rem_pio2f+0x4ac>
 800e138:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800e13c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800e140:	2e00      	cmp	r6, #0
 800e142:	d167      	bne.n	800e214 <__kernel_rem_pio2f+0x4b8>
 800e144:	edc7 6a00 	vstr	s13, [r7]
 800e148:	ed87 7a01 	vstr	s14, [r7, #4]
 800e14c:	edc7 7a02 	vstr	s15, [r7, #8]
 800e150:	e7d8      	b.n	800e104 <__kernel_rem_pio2f+0x3a8>
 800e152:	ab30      	add	r3, sp, #192	@ 0xc0
 800e154:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800e054 <__kernel_rem_pio2f+0x2f8>
 800e158:	440b      	add	r3, r1
 800e15a:	4622      	mov	r2, r4
 800e15c:	2a00      	cmp	r2, #0
 800e15e:	da24      	bge.n	800e1aa <__kernel_rem_pio2f+0x44e>
 800e160:	b34e      	cbz	r6, 800e1b6 <__kernel_rem_pio2f+0x45a>
 800e162:	eef1 7a47 	vneg.f32	s15, s14
 800e166:	edc7 7a00 	vstr	s15, [r7]
 800e16a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800e16e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e172:	aa31      	add	r2, sp, #196	@ 0xc4
 800e174:	2301      	movs	r3, #1
 800e176:	429c      	cmp	r4, r3
 800e178:	da20      	bge.n	800e1bc <__kernel_rem_pio2f+0x460>
 800e17a:	b10e      	cbz	r6, 800e180 <__kernel_rem_pio2f+0x424>
 800e17c:	eef1 7a67 	vneg.f32	s15, s15
 800e180:	edc7 7a01 	vstr	s15, [r7, #4]
 800e184:	e7be      	b.n	800e104 <__kernel_rem_pio2f+0x3a8>
 800e186:	ab30      	add	r3, sp, #192	@ 0xc0
 800e188:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800e054 <__kernel_rem_pio2f+0x2f8>
 800e18c:	440b      	add	r3, r1
 800e18e:	2c00      	cmp	r4, #0
 800e190:	da05      	bge.n	800e19e <__kernel_rem_pio2f+0x442>
 800e192:	b10e      	cbz	r6, 800e198 <__kernel_rem_pio2f+0x43c>
 800e194:	eef1 7a67 	vneg.f32	s15, s15
 800e198:	edc7 7a00 	vstr	s15, [r7]
 800e19c:	e7b2      	b.n	800e104 <__kernel_rem_pio2f+0x3a8>
 800e19e:	ed33 7a01 	vldmdb	r3!, {s14}
 800e1a2:	3c01      	subs	r4, #1
 800e1a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e1a8:	e7f1      	b.n	800e18e <__kernel_rem_pio2f+0x432>
 800e1aa:	ed73 7a01 	vldmdb	r3!, {s15}
 800e1ae:	3a01      	subs	r2, #1
 800e1b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e1b4:	e7d2      	b.n	800e15c <__kernel_rem_pio2f+0x400>
 800e1b6:	eef0 7a47 	vmov.f32	s15, s14
 800e1ba:	e7d4      	b.n	800e166 <__kernel_rem_pio2f+0x40a>
 800e1bc:	ecb2 7a01 	vldmia	r2!, {s14}
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e1c6:	e7d6      	b.n	800e176 <__kernel_rem_pio2f+0x41a>
 800e1c8:	ed72 7a01 	vldmdb	r2!, {s15}
 800e1cc:	edd2 6a01 	vldr	s13, [r2, #4]
 800e1d0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e1d4:	3801      	subs	r0, #1
 800e1d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e1da:	ed82 7a00 	vstr	s14, [r2]
 800e1de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e1e2:	edc2 7a01 	vstr	s15, [r2, #4]
 800e1e6:	e79c      	b.n	800e122 <__kernel_rem_pio2f+0x3c6>
 800e1e8:	ed73 7a01 	vldmdb	r3!, {s15}
 800e1ec:	edd3 6a01 	vldr	s13, [r3, #4]
 800e1f0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e1f4:	3a01      	subs	r2, #1
 800e1f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e1fa:	ed83 7a00 	vstr	s14, [r3]
 800e1fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e202:	edc3 7a01 	vstr	s15, [r3, #4]
 800e206:	e78f      	b.n	800e128 <__kernel_rem_pio2f+0x3cc>
 800e208:	ed33 7a01 	vldmdb	r3!, {s14}
 800e20c:	3c01      	subs	r4, #1
 800e20e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e212:	e78f      	b.n	800e134 <__kernel_rem_pio2f+0x3d8>
 800e214:	eef1 6a66 	vneg.f32	s13, s13
 800e218:	eeb1 7a47 	vneg.f32	s14, s14
 800e21c:	edc7 6a00 	vstr	s13, [r7]
 800e220:	ed87 7a01 	vstr	s14, [r7, #4]
 800e224:	eef1 7a67 	vneg.f32	s15, s15
 800e228:	e790      	b.n	800e14c <__kernel_rem_pio2f+0x3f0>
 800e22a:	bf00      	nop

0800e22c <floorf>:
 800e22c:	ee10 3a10 	vmov	r3, s0
 800e230:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e234:	3a7f      	subs	r2, #127	@ 0x7f
 800e236:	2a16      	cmp	r2, #22
 800e238:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e23c:	dc2b      	bgt.n	800e296 <floorf+0x6a>
 800e23e:	2a00      	cmp	r2, #0
 800e240:	da12      	bge.n	800e268 <floorf+0x3c>
 800e242:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e2a8 <floorf+0x7c>
 800e246:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e24a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e24e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e252:	dd06      	ble.n	800e262 <floorf+0x36>
 800e254:	2b00      	cmp	r3, #0
 800e256:	da24      	bge.n	800e2a2 <floorf+0x76>
 800e258:	2900      	cmp	r1, #0
 800e25a:	4b14      	ldr	r3, [pc, #80]	@ (800e2ac <floorf+0x80>)
 800e25c:	bf08      	it	eq
 800e25e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800e262:	ee00 3a10 	vmov	s0, r3
 800e266:	4770      	bx	lr
 800e268:	4911      	ldr	r1, [pc, #68]	@ (800e2b0 <floorf+0x84>)
 800e26a:	4111      	asrs	r1, r2
 800e26c:	420b      	tst	r3, r1
 800e26e:	d0fa      	beq.n	800e266 <floorf+0x3a>
 800e270:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800e2a8 <floorf+0x7c>
 800e274:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e278:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e280:	ddef      	ble.n	800e262 <floorf+0x36>
 800e282:	2b00      	cmp	r3, #0
 800e284:	bfbe      	ittt	lt
 800e286:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800e28a:	fa40 f202 	asrlt.w	r2, r0, r2
 800e28e:	189b      	addlt	r3, r3, r2
 800e290:	ea23 0301 	bic.w	r3, r3, r1
 800e294:	e7e5      	b.n	800e262 <floorf+0x36>
 800e296:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e29a:	d3e4      	bcc.n	800e266 <floorf+0x3a>
 800e29c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e2a0:	4770      	bx	lr
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	e7dd      	b.n	800e262 <floorf+0x36>
 800e2a6:	bf00      	nop
 800e2a8:	7149f2ca 	.word	0x7149f2ca
 800e2ac:	bf800000 	.word	0xbf800000
 800e2b0:	007fffff 	.word	0x007fffff

0800e2b4 <_init>:
 800e2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2b6:	bf00      	nop
 800e2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2ba:	bc08      	pop	{r3}
 800e2bc:	469e      	mov	lr, r3
 800e2be:	4770      	bx	lr

0800e2c0 <_fini>:
 800e2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2c2:	bf00      	nop
 800e2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2c6:	bc08      	pop	{r3}
 800e2c8:	469e      	mov	lr, r3
 800e2ca:	4770      	bx	lr
